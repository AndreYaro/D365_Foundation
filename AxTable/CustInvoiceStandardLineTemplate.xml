<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceStandardLineTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceStandardLineTemplate extends CustInvoiceLineTemplate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the line amount by using the <c>Quantity</c> and <c>UnitPrice</c> fields.
    /// </summary>
    /// <returns>
    /// The calculated line amount field value.
    /// </returns>
    public AmountCur calcLineAmount()
    {
        AmountCur lineAmount = this.AmountCur;

        if (this.UnitPrice != 0)
        {
            lineAmount = this.Quantity * this.UnitPrice;
            lineAmount = CurrencyExchange::round(lineAmount, CustInvoiceTemplate::find(this.CustInvoiceTemplate).CurrencyCode);
            this.AmountCur = lineAmount;
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the invoice template line amount based on modified currency.
    /// </summary>
    /// <param name="_oldCurrencyCode">
    /// The old currency of <c>CustInoviceTemplate</c> table record.
    /// </param>
    /// <param name="_newCurrencyCode">
    /// The new currency of <c>CustInoviceTemplate</c> table record.
    /// </param>
    /// <param name="_exchRateDate">
    /// The date of currency exchange rate; optional.
    /// </param>
    /// <param name="_custInvoiceChangeCurrencyOption">
    /// A <c>CustInvoiceChangeCurrencyOption</c> base enumeration value; optional.
    /// </param>
    public void convertCurrencyCode(CurrencyCode _oldCurrencyCode,
                                    CurrencyCode _newCurrencyCode,
                                    TransDate _exchRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                    CustInvoiceChangeCurrencyOption _custInvoiceChangeCurrencyOption = CustInvoiceChangeCurrencyOption::CalculateWithNewRate)
    {
        AmountCur rateAmount = realMin();
        CustBillingCodeVersion custBillingCodeVersion;
        CustBillingCodeRate billingCodeRate;
        CurrencyCode currencyCodeMST = CompanyInfoHelper::standardCurrency();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (_custInvoiceChangeCurrencyOption == CustInvoiceChangeCurrencyOption::ResetToBillingCodeRate && this.BillingCode)
            {
                //gets the amount from CustbillingCodeRate based on the selected billing code.
                custBillingCodeVersion = CustBillingCodeVersion::findByDate(this.BillingCode, _exchRateDate);
                //convert only if no rate script

                select firstonly billingCodeRate
                    where billingCodeRate.Currency == _newCurrencyCode
                      && billingCodeRate.CustBillingCodeVersion == custBillingCodeVersion.RecId;

                if ( billingCodeRate )
                {
                    rateAmount = billingCodeRate.Amount;
                }
                else
                { 
                    //if no amount is defined for the specified currency then the amount is calculated by conversion from master currency amount
                    select firstonly billingCodeRate
                    where billingCodeRate.Currency == currencyCodeMST
                    && billingCodeRate.CustBillingCodeVersion == custBillingCodeVersion.RecId;

                    if ( billingCodeRate )
                    {
                        rateAmount = CurrencyExchangeHelper::curAmount2CurAmount(billingCodeRate.Amount, _newCurrencyCode, currencyCodeMST, _exchRateDate);
                        warning(strFmt("@SPS833",currencyCodeMST,_newCurrencyCode));
                    }
                    else
                    {
                        //if master currency amount is not defined.
                        error(strFmt("@SPS39", currencyCodeMST));
                    }
                }

                if ( rateAmount > realMin() )
                {
                    if ( custBillingCodeVersion.RateFieldSelector == RateField::UnitPrice )
                    {
                        this.UnitPrice = rateAmount;
                        this.calcLineAmount();
                    }
                    else if ( custBillingCodeVersion.RateFieldSelector == RateField::LineAmount )
                    {
                        this.AmountCur = rateAmount;
                        this.UnitPrice = 0;
                    }
                }
            } 
            //if resettoBillingCode && billingCode != ''
            else
            {
               this.AmountCur = CurrencyExchangeHelper::curAmount2CurAmount(this.AmountCur, _oldCurrencyCode, _newCurrencyCode, _exchRateDate);
               this.UnitPrice = 0;
            }
        } 
        //if isConfigKeyEnabled(ps)
        else
        {
            if (this.UnitPrice == 0)
            {
                this.AmountCur = CurrencyExchangeHelper::curAmount2CurAmount(this.AmountCur, _oldCurrencyCode, _newCurrencyCode, _exchRateDate);
            }
            else
            {
                this.UnitPrice = ExchangeRateHelper::curPrice2CurPrice(this.UnitPrice, _oldCurrencyCode, _newCurrencyCode, _exchRateDate);
                this.calcLineAmount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBillingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstracts the conversion between Billing Code Text, like Parks, and Billing Code Record ID that is
    /// stored in <c>CustInvoiceStandardLineTemplate</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicate whether to update the value.
    /// </param>
    /// <param name="_billingCode">
    /// A Billing code text value like Parks, WTR/SWR
    /// </param>
    /// <returns>
    /// A Billing code text value like Parks, WTR/SWR
    /// </returns>
    edit BillingCode editBillingCode(boolean _set, BillingCode _billingCode)
    {
        CustBillingCode custBillingCode;
        BillingCode billingCode;

        if (_set)
        {
            billingCode = _billingCode;

            this.BillingCode = 0;
            custBillingCode = CustBillingCode::findBillingCode(_billingCode);
            if (custBillingCode)
            {
                this.BillingCode = custBillingCode.RecId;
            }

            this.modifiedField(fieldNum(CustInvoiceStandardLineTemplate, BillingCode));
        }
        else
        {
            billingCode = '';
            custBillingCode = CustBillingCode::find(this.BillingCode);
            if (custBillingCode)
            {
                billingCode = custBillingCode.BillingCode;
            }
        }

        return billingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustBillingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the Billing code exists in the <c>CustInvoiceStandardLineTemplate</c> table based
    /// on invoice.
    /// </summary>
    /// <param name="_custInvoiceTemplateRecId">
    /// The Record ID of the <c>CustInvoiceTemplate</c> table.
    /// </param>
    /// <returns>
    /// true if billing code exist; otherwise, false.
    /// </returns>
    public boolean existCustBillingCode(RefRecId _custInvoiceTemplateRecId)
    {
        CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate;

        select firstonly RecId from custInvoiceStandardLineTemplate
                    where custInvoiceStandardLineTemplate.CustInvoiceTemplate == _custInvoiceTemplateRecId
                        && custInvoiceStandardLineTemplate.BillingCode != 0;

        return custInvoiceStandardLineTemplate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTemplate</Name>
				<Source><![CDATA[
    public void initFromCustInvoiceTemplate(CustInvoiceTemplate _custInvoiceTemplate)
    {
        this.TaxGroup = _custInvoiceTemplate.TaxGroup;
        this.AccountingDistributionTemplate = _custInvoiceTemplate.AccountingDistributionTemplate;
        this.DefaultDimension = _custInvoiceTemplate.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.Quantity = 1.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.LineNum = CustInvoiceLineTemplate::nextLineNum(this.CustInvoiceTemplate);

        super();

        ttsbegin;
        CustInvoiceDistributionTemplate::updateDistributionLineLedgerDimension(this);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>ProjCategoryId</c> field.
    /// </summary>
    /// <returns>
    /// True if the entered <c>ProjCategoryId</c> can be used; otherwise false.
    /// </returns>
    public boolean isValidProjCategoryId()
    {
        boolean isValid = true;
        ProjCategory projCategory;

        if (this.ProjCategoryId)
        {
            projCategory = ProjCategory::find(this.ProjCategoryId);
            if (projCategory.CategoryType != ProjCategoryType::Revenue)
            {
                return checkFailed(strFmt("@SYS54897", this.ProjCategoryId));
            }

            if (projCategory.SetupEstimate || projCategory.SetupSubscription)
            {
                return checkFailed("@SYS88806");
            }

            isValid = projCategory.validateIfInactiveAllowed();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>ProjId</c> field.
    /// </summary>
    /// <returns>
    /// true if the entered <c>ProjId</c> field can be used; otherwise, false.
    /// </returns>
    public boolean isValidProjId()
    {
        ProjTable projTable;

        if (this.ProjId)
        {
            projTable = ProjTable::find(this.ProjId);
            if (! projTable.status().activeInTreeRevenue())
            {
                return checkFailed(strFmt("@Proj:ProjectCannotBeSelected", this.ProjId));
            }
            if (! projTable.status().activeInTree())
            {
                return checkFailed(strFmt("@Proj:ProjectIsHeaderOrFinished", this.ProjId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the standard <c>modifiedField</c> method and performs additional initialization.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field that has been modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        TaxItemGroup taxItemGroup;
        Notes lineDescription;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustInvoiceStandardLineTemplate, Description):
                if (!this.LineTxt)
                {
                    lineDescription = this.Description;
                    this.LineTxt = lineDescription;
                }
                break;

            case fieldNum(CustInvoiceStandardLineTemplate, Quantity),
                 fieldNum(CustInvoiceStandardLineTemplate, UnitPrice):
                 this.calcLineAmount();
                break;

            case fieldNum(CustInvoiceStandardLineTemplate, AmountCur):
                this.UnitPrice = 0.0;
                break;

            case fieldNum(CustInvoiceStandardLineTemplate, LedgerDimension) :
                taxItemGroup = MainAccountLegalEntity::findByMainAccountLegalEntity(MainAccount::find(LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(this.LedgerDimension)).RecId,
                                                                     CompanyInfo::current()).TaxItemGroup;
                this.TaxItemGroup = taxItemGroup ? taxItemGroup : TaxParameters::find().TaxItemGroup;
                CustInvoiceDistributionTemplate::updateDistributionLineLedgerDimension(this);
                break;

            case fieldNum(CustInvoiceStandardLineTemplate, ProjId):
                if (this.ProjId)
                {
                    // default the category id from the parameter setup if empty
                    if (!this.ProjCategoryId)
                    {
                        this.CustInvoiceLineMap::initProjCategoryId();
                    }

                    // default unit price from sales price fee
                    boolean priceFound;
                    InvoiceUnitPrice newUnitPrice;
                    [newUnitPrice, priceFound] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(this.ProjId, 0, this.ProjCategoryId);
                    if (priceFound)
                    {
                        this.UnitPrice = newUnitPrice;
                        this.calcLineAmount();
                    }

                    // default the ledger account
                    this.setProjInvoiceLineLedgerDimension();
                }
                break;

            case fieldNum(CustInvoiceStandardLineTemplate, ProjCategoryId):
                if (this.ProjCategoryId)
                {
                    // default unit price from sales price fee
                    boolean priceFound;
                    InvoiceUnitPrice newUnitPrice;
                    [newUnitPrice, priceFound] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(this.ProjId, 0, this.ProjCategoryId);
                    if (priceFound)
                    {
                        this.UnitPrice = newUnitPrice;
                        this.calcLineAmount();
                    }
                   
                    // default the ledger account
                    this.setProjInvoiceLineLedgerDimension();
                }
                break;
            case fieldNum(CustInvoiceStandardLineTemplate, BillingCode):
                this.AmountCur = 0;
                this.UnitPrice = 0;
                this.Description = '';
                this.TaxItemGroup = '';
                this.ProjId = '';
                this.ProjCategoryId = '';
                this.setLedgerDimensionByBillingCodeVersion();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensionByBillingCodeVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values from the <c>CustBillingCodeLedgerAccount</c> and <c>CustBillingCodeVersion</c> table
    /// records.
    /// </summary>
    public void setLedgerDimensionByBillingCodeVersion()
    {
        CustBillingCodeVersion custBillingCodeVersion;
        CustBillingCodeLedgerAccount custBillingCodeLedgerAccount;
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        custBillingCodeVersion = CustBillingCodeVersion::findByDate(this.BillingCode, currentDate);

        select firstonly custBillingCodeLedgerAccount
            order by custBillingCodeLedgerAccount.RecId
            where custBillingCodeLedgerAccount.CustBillingCodeVersion == custBillingCodeVersion.RecId;

        if (custBillingCodeLedgerAccount)
        {
            this.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(custBillingCodeLedgerAccount.LedgerDimension);
        }
        else
        {
            this.LedgerDimension = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBillingCodeDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values from the <c>CustBillingCode</c> and <c>CustBillingCodeVersion</c> table
    /// records.
    /// </summary>
    public void setBillingCodeDefaultValues()
    {
        CustBillingCode custBillingCode;
        CustBillingCodeVersion custBillingCodeVersion;
        CustBillingCodeLedgerAccount custBillingCodeLedgerAccount;
        TaxItemGroup taxItemGroup;
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        custBillingCode = CustBillingCode::find(this.BillingCode);

        custBillingCodeVersion = CustBillingCodeVersion::findByDate(custBillingCode.RecId, currentDate);

        this.Description = custBillingCode.Description;
        this.LineTxt = custBillingCode.Description;

        this.ProjId = custBillingCodeVersion.ProjId;
        this.ProjCategoryId = custBillingCodeVersion.ProjCategoryId;

        this.AmountDetails = custBillingCodeVersion.AmountDetails;

        select firstonly custBillingCodeLedgerAccount
                                        order by custBillingCodeLedgerAccount.RecId
                                        where custBillingCodeLedgerAccount.CustBillingCodeVersion == custBillingCodeVersion.RecId;

        if ( custBillingCodeLedgerAccount )
        {
            this.LedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(custBillingCodeLedgerAccount.LedgerDimension);
        }
        else
        {
            this.LedgerDimension = 0;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)))
        {
            taxItemGroup = custBillingCodeVersion.TaxItemGroupHeading;
            taxItemGroup = taxItemGroup ? taxItemGroup : CustInvoiceTemplate::find(this.CustInvoiceTemplate).TaxItemGroup;
            this.TaxItemGroup = taxItemGroup ? taxItemGroup : TaxParameters::find().TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultInvoiceDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values from the <c>custBillingCodeLedgerAccount</c> to the
    /// <c>custInvoiceDistributionTemplate</c> table.
    /// </summary>
    /// <param name="_custBillingCodeVersionRecId">
    /// A Record ID of the <c>CustBillingCodeVersion</c> table.
    /// </param>
    public void setDefaultInvoiceDistribution(RefRecId _custBillingCodeVersionRecId)
    {
        CustBillingCodeLedgerAccount custBillingCodeLedgerAccount;
        CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;
        CustInvLineBillCodeCustomFieldBase baseValue;

        ttsbegin;
        /// removing previous records.
        delete_from custInvoiceDistributionTemplate
            where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == this.RecId;

        /// removing the custom fields records, on modifying the billing code.
        delete_from baseValue
            where baseValue.CustInvoiceStandardLineTemplate == this.RecId;

        /// inserting new records.
        while select custBillingCodeLedgerAccount
            where custBillingCodeLedgerAccount.CustBillingCodeVersion == _custBillingCodeVersionRecId
        {
            custInvoiceDistributionTemplate.clear();
            custInvoiceDistributionTemplate.CustInvoiceLineTemplate = this.RecId;
            custInvoiceDistributionTemplate.LedgerDimension = custBillingCodeLedgerAccount.LedgerDimension;
            custInvoiceDistributionTemplate.Percentage = custBillingCodeLedgerAccount.Percentage;
            custInvoiceDistributionTemplate.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjInvoiceLineLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the main account of the project type invoice template line on the basis of the <c>ProjId</c>,
    /// <c>ProjCategoryId</c> and <c>ProjFundingSource</c> field.
    /// </summary>

    private void setProjInvoiceLineLedgerDimension()
    {
        // Update ledger dimension if neither ProjId nor ProjCategory are blank and both are valid
        boolean isValidProjId = this.ProjId && this.isValidProjId();
        boolean isValidProjCategoryId = this.ProjCategoryId && this.isValidProjCategoryId();

        if (isValidProjId && isValidProjCategoryId)
        {
            this.LedgerDimension = ProjPosting::getLedgerDimension(ProjAccountType::RevenueAccount,
                                                               this.ProjId,
                                                               this.ProjCategoryId,
                                                               0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                // Validate the main account is a transaction account and allows manual posting.
                case fieldNum(CustInvoiceStandardLineTemplate, LedgerDimension):
                    ret = MainAccount::checkTransactionAccount(this.LedgerDimension);
                    ret = ret && MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension).MainAccountId, LedgerPostingType::LedgerJournal, false, true, true);
                    break;
                // Verify that project id should not be cleared once saved and project shouldn't be entered if asset fields are selected.
                case fieldNum(CustInvoiceStandardLineTemplate, ProjId):
                    if (!this.ProjId)
                    {
                        ret = !isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                                || this.BillingCode
                                || checkFailed("@SYS316714");
                    }
                    ret = ret && this.isValidProjId();
                    break;
                case fieldNum(CustInvoiceStandardLineTemplate, ProjCategoryId):
                    ret = ret && this.isValidProjCategoryId();
                    break;
                case fieldNum(CustInvoiceStandardLineTemplate, BillingCode):
                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        if (this.BillingCode && !CustBillingClassificationCode::existBillingClassificationCode(
                                                            CustInvoiceTemplate::find(this.CustInvoiceTemplate).BillingClassification,
                                                            this.BillingCode))
                        {
                            ret =checkFailed(strFmt("@SPS846", CustBillingCode::find(this.BillingCode).BillingCode));
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;
        ProjValCheckTrans projValCheckTrans = new ProjValCheckTrans();

        isValid = super();
        if (isValid && this.ProjId)
        {
            isValid = projValCheckTrans.validateMandatory(this);

            if (isValid && !this.ProjCategoryId)
            {
                isValid = checkFailed("@SYS323010");
            }

            isValid = isValid && this.isValidProjId();
            isValid = isValid && this.isValidProjCategoryId();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record occurs in the <c>CustInvoiceStandardTemplateLine</c> table.
    /// </summary>
    /// <param name="_custInvoiceStandardLineTemplateRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _custInvoiceStandardLineTemplateRecId)
    {
        boolean ret = true;

        if (!CustInvoiceStandardLineTemplate::exist(_custInvoiceStandardLineTemplateRecId))
        {
            ret = checkFailed(strFmt(CustInvoiceStandardLineTemplate::txtNotExist(), _custInvoiceStandardLineTemplateRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>CustInvoiceStandardTemplateLine</c> table exists.
    /// </summary>
    /// <param name="_custInvoiceStandardTemplateLineRecId">
    /// The record ID of the <c>CustInvoiceStandardTemplateLine</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _custInvoiceStandardTemplateLineRecId)
    {
        boolean found;

        found = (select firstonly RecId from custInvoiceStandardLineTemplate
                 where custInvoiceStandardLineTemplate.RecId == _custInvoiceStandardTemplateLineRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>CustInvoiceStandardTemplateLine</c> table.
    /// </summary>
    /// <param name="_custInvoiceStandardLineTemplateRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceStandardTemplateLine</c> table buffer.
    /// </returns>
    public static CustInvoiceStandardLineTemplate find(
        recId _custInvoiceStandardLineTemplateRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceStandardLineTemplate custInvoiceStandardLineTemplate;

        custInvoiceStandardLineTemplate.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceStandardLineTemplate.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInvoiceStandardLineTemplate
            where custInvoiceStandardLineTemplate.RecId == _custInvoiceStandardLineTemplateRecId;

        return custInvoiceStandardLineTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the amount to the <c>CustInvoiceStandardLineTemplate</c> table or
    /// retrieved from the <c>CustBillingCodeRate</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to update the value in the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <param name="_amount">
    /// The amount value to be updated into the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <returns>
    /// The amount value to be displayed.
    /// </returns>
    /// <remarks>
    /// Handle the amount differently based on the billing code for the invoice line:
    /// 1. Saves the amount to the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use billing code.
    /// 2. Retrieves the amount from the <c>CustBillingCodeRate</c> table when the invoice line uses the billing code.
    /// 3. Retrieves the amount from the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use the billing code.
    /// </remarks>
    edit public AmountCur editAmount(boolean _set, AmountCur _amount)
    {
        if (_set && !this.BillingCode)
        {
            this.AmountCur = _amount;
        }

        if (this.BillingCode && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            CustBillingCodeVersion custBillingCodeVersion = CustBillingCodeVersion::findByDate(this.BillingCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            CustBillingCodeRate custBillingCodeRate = CustBillingCodeRate::findByCustBillingCodeVersion(custBillingCodeVersion.RecId);

            if (custBillingCodeVersion.RateFieldSelector == RateField::LineAmount)
            {
                return custBillingCodeRate.Amount;
            }
            else
            {
                return (custBillingCodeRate.Amount * this.Quantity);
            }
        }
        else
        {
            return this.AmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the description to the <c>CustInvoiceStandardLineTemplate</c> table or
    /// retrieved from the <c>CustBillingCode</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to update the value in the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <param name="_description">
    /// The description value to be updated into the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <returns>
    /// The description value to be displayed.
    /// </returns>
    /// <remarks>
    /// Handle the description differently based on the billing code for the invoice line:
    /// 1. Saves the description to the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use billing code.
    /// 2. Retrieves the description from the <c>CustBillingCode</c> table when the invoice line uses the billing code.
    /// 3. Retrieves the description from the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use the billing code.
    /// </remarks>
    edit public Description editDescription(boolean _set, Description _description)
    {
        if (_set && !this.BillingCode)
        {
            this.Description = _description;
            this.modifiedField(fieldNum(CustInvoiceStandardLineTemplate, Description));
        }

        if (this.BillingCode && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            CustBillingCode custBillingCode = CustBillingCode::find(this.BillingCode);
            return custBillingCode.Description;
        }
        else
        {
            return this.Description;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TaxItemGroup</c> field value to the <c>CustInvoiceStandardLineTemplate</c> table or
    /// retrieved from the <c>CustBillingCodeVersion</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to update the value in the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <param name="_taxItemGroup">
    /// The <c>TaxItemGroup</c> field value to be updated into the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <returns>
    /// The <c>TaxItemGroup</c> field value to be displayed.
    /// </returns>
    /// <remarks>
    /// Handle the <c>TaxItemGroup</c> field value differently based on the billing code for the invoice line:
    /// 1. Saves the <c>TaxItemGroup</c> field value to the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use billing code.
    /// 2. Retrieves the <c>TaxItemGroup</c> field value from the <c>CustBillingCodeVersion</c> table when the invoice line uses the billing code.
    /// 3. Retrieves the <c>TaxItemGroup</c> field value from the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use the billing code.
    /// </remarks>
    edit public TaxItemGroup editTaxItemGroup(boolean _set, TaxItemGroup _taxItemGroup)
    {
        if (_set && !this.BillingCode)
        {
            this.TaxItemGroup = _taxItemGroup;
        }

        if (this.BillingCode && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            CustBillingCodeVersion custBillingCodeVersion = CustBillingCodeVersion::findByDate(this.BillingCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            TaxItemGroup taxItemGroup = custBillingCodeVersion.TaxItemGroupHeading ? custBillingCodeVersion.TaxItemGroupHeading : CustInvoiceTemplate::find(this.CustInvoiceTemplate).TaxItemGroup;

            return taxItemGroup ? taxItemGroup : TaxParameters::find().TaxItemGroup;
        }
        else
        {
            return this.TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>UnitPrice</c> field value to the <c>CustInvoiceStandardLineTemplate</c> table or
    /// retrieved from the <c>CustBillingCodeRate</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to update the value in the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <param name="_unitPrice">
    /// The <c>UnitPrice</c> field value to be updated into the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <returns>
    /// The <c>UnitPrice</c> field value to be displayed.
    /// </returns>
    /// <remarks>
    /// Handle the <c>UnitPrice</c> field value differently based on the billing code for the invoice line:
    /// 1. Saves the <c>UnitPrice</c> field value to the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use billing code.
    /// 2. Retrieves the <c>UnitPrice</c> field value from the <c>CustBillingCodeRate</c> table when the invoice line uses the billing code.
    /// 3. Retrieves the <c>UnitPrice</c> field value from the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use the billing code.
    /// </remarks>
    edit public InvoiceUnitPrice editUnitPrice(boolean _set, InvoiceUnitPrice _unitPrice)
    {
        if (_set && !this.BillingCode)
        {
            this.UnitPrice = _unitPrice;
            this.AmountCur = this.calcLineAmount();
        }

        if (this.BillingCode && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            CustBillingCodeVersion custBillingCodeVersion = CustBillingCodeVersion::findByDate(this.BillingCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            CustBillingCodeRate CustBillingCodeRate = CustBillingCodeRate::findByCustBillingCodeVersion(custBillingCodeVersion.RecId);

            if (custBillingCodeVersion.RateFieldSelector == RateField::UnitPrice)
            {
                return custBillingCodeRate.Amount;
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return this.UnitPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>ProjId</c> field value to the <c>CustInvoiceStandardLineTemplate</c> table or
    /// retrieved from the <c>CustBillingCodeVersion</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to update the value in the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <param name="_projId">
    /// The <c>ProjId</c> field value to be updated into the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <returns>
    /// The <c>ProjId</c> field value to be displayed.
    /// </returns>
    /// <remarks>
    /// Handle the <c>ProjId</c> field value differently based on the billing code for the invoice line:
    /// 1. Saves the <c>ProjId</c> field value to the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use billing code.
    /// 2. Retrieves the <c>ProjId</c> field value from the <c>CustBillingCodeVersion</c> table when the invoice line uses the billing code.
    /// 3. Retrieves the <c>ProjId</c> field value from the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use the billing code.
    /// </remarks>
    edit public ProjId editProjId(boolean _set, ProjId _projId)
    {
        if (_set && !this.BillingCode)
        {
            this.ProjId = _projId;
            this.modifiedField(fieldNum(CustInvoiceStandardLineTemplate, ProjId));
        }

        if (this.BillingCode && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            CustBillingCodeVersion custBillingCodeVersion = CustBillingCodeVersion::findByDate(this.BillingCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            return custBillingCodeVersion.ProjId;
        }
        else
        {
            return this.ProjId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>ProjCategoryId</c> field value to the <c>CustInvoiceStandardLineTemplate</c> table or
    /// retrieved from the <c>CustBillingCodeVersion</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to update the value in the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <param name="_projCategory">
    /// The <c>ProjCategoryId</c> field value to be updated into the <c>CustInvoiceStandardLineTemplate</c> table.
    /// </param>
    /// <returns>
    /// The <c>ProjCategoryId</c> field value to be displayed.
    /// </returns>
    /// <remarks>
    /// Handle the <c>ProjCategoryId</c> field value differently based on the billing code for the invoice line:
    /// 1. Saves the <c>ProjCategoryId</c> field value to the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use billing code.
    /// 2. Retrieves the <c>ProjCategoryId</c> field value from the <c>CustBillingCodeVersion</c> table when the invoice line uses the billing code.
    /// 3. Retrieves the <c>ProjCategoryId</c> field value from the <c>CustInvoiceStandardLineTemplate</c> table when the invoice line doesn't use the billing code.
    /// </remarks>
    edit public ProjCategoryId editCategoryId(boolean _set, ProjCategoryId _projCategory)
    {
        if (_set && !this.BillingCode)
        {
            this.ProjCategoryId = _projCategory;
            this.modifiedField(fieldNum(CustInvoiceStandardLineTemplate, ProjCategoryId));
        }

        if (this.BillingCode && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            CustBillingCodeVersion custBillingCodeVersion = CustBillingCodeVersion::findByDate(this.BillingCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            return custBillingCodeVersion.ProjCategoryId;
        }
        else
        {
            return this.ProjCategoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromCustInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a free text invoice line template based on the <c>CustInvoiceLine</c> provided.
    /// </summary>
    /// <param name="_custInvoiceTemplateRecId">
    /// The identifier of the template header for this line.
    /// </param>
    /// <param name="_custInvoiceLine">
    /// An instance of a <c>CustInvoiceLine</c> table buffer.
    /// </param>
    /// <returns>
    /// The new <c>CustInvoiceStandardLineTemplate</c> record.
    /// </returns>
    public static CustInvoiceStandardLineTemplate createFromCustInvoiceLine(RefRecId _custInvoiceTemplateRecId, CustInvoiceLine _custInvoiceLine)
    {
        #ISOCountryRegionCodes
    
        CustInvoiceStandardLineTemplate invoiceLineTemplate;

        invoiceLineTemplate.CustInvoiceTemplate = _custInvoiceTemplateRecId;
        invoiceLineTemplate.AmountCur = _custInvoiceLine.AmountCur;
        invoiceLineTemplate.LineNum = _custInvoiceLine.LineNum;
        invoiceLineTemplate.Description = _custInvoiceLine.Description;
        invoiceLineTemplate.LedgerDimension = _custInvoiceLine.LedgerDimension;
        invoiceLineTemplate.UnitPrice = _custInvoiceLine.UnitPrice;
        invoiceLineTemplate.LineTxt = _custInvoiceLine.InvoiceTxt;
        invoiceLineTemplate.Quantity = _custInvoiceLine.Quantity;
        invoiceLineTemplate.Weight = _custInvoiceLine.Weight;
        invoiceLineTemplate.DefaultDimension = _custInvoiceLine.DefaultDimension;
        invoiceLineTemplate.OrigState = _custInvoiceLine.OrigState;
        invoiceLineTemplate.IntrastatCommodity = _custInvoiceLine.IntrastatCommodity;
        invoiceLineTemplate.Transport = _custInvoiceLine.Transport;
        invoiceLineTemplate.TransactionCode = _custInvoiceLine.TransactionCode;
        invoiceLineTemplate.Port = _custInvoiceLine.Port;
        invoiceLineTemplate.StatProcId = _custInvoiceLine.StatProcId;
        invoiceLineTemplate.ProjId = _custInvoiceLine.ProjId;
        invoiceLineTemplate.ProjCategoryId = _custInvoiceLine.ProjCategoryId;
        invoiceLineTemplate.AccountingDistributionTemplate = _custInvoiceLine.AccountingDistributionTemplate;
        invoiceLineTemplate.OrigCountryRegionId = _custInvoiceLine.OrigCountryRegionId;
        invoiceLineTemplate.TaxGroup = _custInvoiceLine.TaxGroup;
        invoiceLineTemplate.TaxItemGroup = _custInvoiceLine.TaxItemGroup;
        invoiceLineTemplate.OverrideSalesTax = _custInvoiceLine.OverrideSalesTax;
        invoiceLineTemplate.AmountDetails = _custInvoiceLine.AmountDetails;
        invoiceLineTemplate.BillingCode = _custInvoiceLine.CustBillingCode;
        invoiceLineTemplate.TaxAmount = _custInvoiceLine.TaxAmount;

        if (EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            invoiceLineTemplate.PropertyNumber_MX = _custInvoiceLine.PropertyNumber_MX;
        }
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            invoiceLineTemplate.SalesUnit_RU = _custInvoiceLine.SalesUnit_RU;
        }

        // Call doInsert, since a distribution is created in the insert method
        invoiceLineTemplate.doInsert();

        return invoiceLineTemplate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS314202</DeveloperDocumentation>
	<FormRef>custInvoicetemplate</FormRef>
	<Label>@SYS315259</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<Extends>CustInvoiceLineTemplate</Extends>
	<Modules>AccountsReceivable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustInvLineBillCodeCustomFieldBase</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvLineBillCodeCustomFieldBase</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountingDistributionTemplate</Name>
			<Label>@SYS300391</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountDetails</Name>
			<Label>@SPS37</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountDetails</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillingCode</Name>
			<Label>@SPS21</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Codes</Name>
			<Label>@SYS17782</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Data</Name>
			<Label>@SYS55057</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ElectronicInvoice_MX</Name>
			<Label>@SYS341961</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyNumber_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceText</Name>
			<Label>@SYS27050</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS80304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuantityPrice</Name>
			<Label>@SYS11770</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS107174</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AmountDetails</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>AmountDetails</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BillingCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BillingCodeRefRecId</ExtendedDataType>
			<Label>@SPS21</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineTxt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS27050</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
			<Label>@SYS27196</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
			<Label>@SYS73785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyNumber_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>PropertyNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceUnitPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Weight</ExtendedDataType>
			<Label>@SYS69491</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>DEL_IntrastatItemCodeId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustInvoiceLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceStandardLineTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustBillingCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingCode_CustInvoiceStandardLineTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BillingCode</Name>
					<SourceEDT>BillingCodeRefRecId</SourceEDT>
					<Field>BillingCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceLineTemplate_InvoiceLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInvoiceLineTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceStandardLineTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<SourceEDT>IntrastatProcId</SourceEDT>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<SourceEDT>IntrastatTransactionCodeId</SourceEDT>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<SourceEDT>IntrastatTransport</SourceEDT>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustInvoiceStandardLineTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<SourceEDT>ItemOrigCountryRegionId</SourceEDT>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrigState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123884</EntityRelationshipRole>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OrigState</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceStandardLineTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigState</Name>
					<Field>OrigState</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionStateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>