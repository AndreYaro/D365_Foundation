<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExciseRG23CRegister_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ExciseRG23CRegister_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentPayableBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current payable balance.
    /// </summary>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public Amount currentPayableBalance()
    {
        ExciseRG23CRegister_IN  exciseRG23CRegister;
        SecurityRights          sr;
        SecurityTableRights     stRights;
        AccessRight             arc;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tableStr(ExciseRG23CRegister_IN));
        arc = stRights.fieldAccessRight(fieldstr(ExciseRG23CRegister_IN,rg23cPayable));

        if (arc != AccessRight::NoAccess )
        {
            select sum(rg23cPayable)
                from exciseRG23CRegister
                    where exciseRG23CRegister.TaxRegistrationNumberTable == this.TaxRegistrationNumberTable;
        }
        return  exciseRG23CRegister.rg23cPayable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseRG23CDeferredBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise rg23c deferred balance.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public Amount exciseRG23CDeferredBal(TransDate _transDate)
    {
        ExciseRG23CRegister_IN  exciseRG23CRegister;
        SecurityRights          sr;
        SecurityTableRights     stRights;
        AccessRight             arc;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(ExciseRG23CRegister_IN));
        arc = stRights.fieldAccessRight(fieldStr(ExciseRG23CRegister_IN,rg23cDeferredBal));

        if (arc != AccessRight::NoAccess )
        {
            select sum(rg23cDeferredBal) from exciseRG23CRegister
                where exciseRG23CRegister.TaxRegistrationNumberTable == this.TaxRegistrationNumberTable &&
                      exciseRG23CRegister.rgDate                     <= _transDate;
        }
        return  exciseRG23CRegister.rg23cDeferredBal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseRG23CTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display excise rg23c total balance amount.
    /// </summary>
    /// <returns>
    /// The excise rg23c total balance amount.
    /// </returns>
    display Amount exciseRG23CTotal()
    {
        ExciseRG23CRegister_IN  exciseRG23CRegister_IN;
        SecurityRights          sr;
        SecurityTableRights     stRights;
        AccessRight             arc;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(ExciseRG23CRegister_IN));
        arc = stRights.fieldAccessRight(fieldStr(ExciseRG23CRegister_IN,rg23cRecoverable));

        if (arc != AccessRight::NoAccess )
        {
            select sum(rg23cRecoverable) from exciseRG23CRegister_IN
                where exciseRG23CRegister_IN.TaxRegistrationNumberTable == this.TaxRegistrationNumberTable;
        }

        return exciseRG23CRegister_IN.rg23cRecoverable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payableAvailableBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payable available balance.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public Amount payableAvailableBalance(TransDate _transDate)
    {
        return this.payableBalance(_transDate) + this.payableOpeningBalance(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payableBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payable balance.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public Amount payableBalance(TransDate _transDate)
    {
        ExciseRG23CRegister_IN  exciseRG23CRegister;
        SecurityRights          sr;
        SecurityTableRights     stRights;
        AccessRight             arc;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tableStr(ExciseRG23CRegister_IN));
        arc = stRights.fieldAccessRight(fieldstr(ExciseRG23CRegister_IN ,rg23cPayable));

        if (arc != AccessRight::NoAccess )
        {
            select sum(rg23cPayable) from exciseRG23CRegister
                where exciseRG23CRegister.TaxRegistrationNumberTable == this.TaxRegistrationNumberTable
                   && exciseRG23CRegister.rgDate                     == _transDate;
        }
        return  exciseRG23CRegister.rg23cPayable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payableOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payable opening balance.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public Amount payableOpeningBalance(TransDate _transDate)
    {
        ExciseRG23CRegister_IN  exciseRG23CRegister;
        SecurityRights          sr;
        SecurityTableRights     stRights;
        AccessRight             arc;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tableStr(ExciseRG23CRegister_IN));
        arc = stRights.fieldAccessRight(fieldStr(ExciseRG23CRegister_IN,rg23cPayable));

        if (arc != AccessRight::NoAccess )
        {
            select sum(rg23cPayable) from exciseRG23CRegister
                where exciseRG23CRegister.TaxRegistrationNumberTable == this.TaxRegistrationNumberTable
                   && exciseRG23CRegister.rgDate                     < _transDate;
        }
        return  exciseRG23CRegister.rg23cPayable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rg23CavailableBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets rg23c available balance.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public Amount rg23CavailableBalance(TransDate  _transDate)
    {
        return this.rg23cBalance(_transDate) + this.rg23cOpeningBalance(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rg23cBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets rg23c balance.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public Amount rg23cBalance(TransDate _transDate)
    {
        ExciseRG23CRegister_IN  exciseRG23CRegister;
        SecurityRights          sr;
        SecurityTableRights     stRights;
        AccessRight             arc;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(ExciseRG23CRegister_IN));
        arc = stRights.fieldAccessRight(fieldStr(ExciseRG23CRegister_IN,rg23cRecoverable));

        if (arc != AccessRight::NoAccess )
        {
            select sum(rg23cRecoverable) from exciseRG23CRegister
                where exciseRG23CRegister.TaxRegistrationNumberTable == this.TaxRegistrationNumberTable &&
                      exciseRG23CRegister.rgDate                     == _transDate;
        }
        return  exciseRG23CRegister.rg23cRecoverable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rg23cOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets rg23c opening balance.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public Amount rg23cOpeningBalance(TransDate _transDate)
    {
        ExciseRG23CRegister_IN  exciseRG23CRegister_IN;
        SecurityRights          sr;
        SecurityTableRights     stRights;
        AccessRight             arc;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(ExciseRG23CRegister_IN));
        arc = stRights.fieldAccessRight(fieldStr(ExciseRG23CRegister_IN,rg23cRecoverable));

        if (arc != AccessRight::NoAccess )
        {
            select sum(rg23cRecoverable) from exciseRG23CRegister_IN
                where exciseRG23CRegister_IN.TaxRegistrationNumberTable == this.TaxRegistrationNumberTable
                   && exciseRG23CRegister_IN.rgDate                     < _transDate;
        }
        return  exciseRG23CRegister_IN.rg23cRecoverable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rg23cPayableOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets rg23c payable opening balance.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public Amount rg23cPayableOpeningBalance(TransDate _transDate)
    {
        ExciseRG23CRegister_IN  exciseRG23CRegister;
        SecurityRights          sr;
        SecurityTableRights     stRights;
        AccessRight             arc;
        AccessRight             arp;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(ExciseRG23CRegister_IN));
        arc = stRights.fieldAccessRight(fieldstr(ExciseRG23CRegister_IN,rg23cRecoverable));
        arp = stRights.fieldAccessRight(fieldstr(ExciseRG23CRegister_IN,rg23cPayable));

        if (arc != AccessRight::NoAccess && arp != AccessRight::NoAccess)
        {
            select sum(rg23cRecoverable),sum(rg23cPayable) from exciseRG23CRegister
                where exciseRG23CRegister.TaxRegistrationNumberTable == this.TaxRegistrationNumberTable &&
                      exciseRG23CRegister.rgDate                     < _transDate;
        }
        return  exciseRG23CRegister.rg23cRecoverable + exciseRG23CRegister.rg23cPayable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>excisePayableAvailBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise of payable available balance.
    /// </summary>
    /// <param name="_taxInquiryArguments">
    /// The tax inquiry arguments.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public static Amount excisePayableAvailBal(TaxInquiryArguments_IN _taxInquiryArguments)
    {
        ExciseRG23ARegister_IN        exciseRG23ARegister;
        ExciseRG23CRegister_IN        exciseRG23CRegister;
        ExciseRG23ARegister_IN        exciseRG23ARegister1;
        ExciseRG23CRegister_IN        exciseRG23CRegister1;
        Amount                        payableAvailable;
        TaxRegistrationNumbers_IN     taxRegistrationNumberTable;
        SecurityRights                sr;
        SecurityTableRights           stRightsA;
        SecurityTableRights           stRightsC;
        AccessRight                   arA;
        AccessRight                   arC;

        sr = SecurityRights::construct();
        stRightsC = sr.tableFieldAccessRights(tableStr(ExciseRG23CRegister_IN));
        stRightsA = sr.tableFieldAccessRights(tablestr(ExciseRG23CRegister_IN));
        arA = stRightsA.fieldAccessRight(fieldstr(ExciseRG23CRegister_IN,rg23cPayable));
        arC = stRightsA.fieldAccessRight(fieldstr(ExciseRG23CRegister_IN,rg23cPayable));

        select sum(rg23aPayable) from exciseRG23ARegister
            join RecId from taxRegistrationNumberTable
            where taxRegistrationNumberTable.RegistrationType    == TaxRegistrationType_IN::Company
               && taxRegistrationNumberTable.TaxType             == TaxType_IN::Excise
               && taxRegistrationNumberTable.RegistrationNumber  == _taxInquiryArguments.getECCNumber()
               && exciseRG23ARegister.TaxRegistrationNumberTable == taxRegistrationNumberTable.RecId
               && exciseRG23ARegister.rgDate     < _taxInquiryArguments.getFromDate();

        select sum(rg23cPayable) from exciseRG23CRegister
            join RecId from taxRegistrationNumberTable
            where taxRegistrationNumberTable.RegistrationType    == TaxRegistrationType_IN::Company
               && taxRegistrationNumberTable.TaxType             == TaxType_IN::Excise
               && taxRegistrationNumberTable.RegistrationNumber  == _taxInquiryArguments.getECCNumber()
               && exciseRG23CRegister.TaxRegistrationNumberTable == taxRegistrationNumberTable.RecId
               && exciseRG23CRegister.rgDate     < _taxInquiryArguments.getFromDate();

        select sum(rg23aPayable) from exciseRG23ARegister1
            join RecId from taxRegistrationNumberTable
            where taxRegistrationNumberTable.RegistrationType    == TaxRegistrationType_IN::Company
               && taxRegistrationNumberTable.TaxType             == TaxType_IN::Excise
               && taxRegistrationNumberTable.RegistrationNumber  == _taxInquiryArguments.getECCNumber()
               && exciseRG23ARegister1.TaxRegistrationNumberTable == taxRegistrationNumberTable.RecId
               && exciseRG23ARegister1.rgDate    == _taxInquiryArguments.getFromDate();

        select sum(rg23cPayable) from exciseRG23CRegister1
            join RecId from taxRegistrationNumberTable
            where taxRegistrationNumberTable.RegistrationType    == TaxRegistrationType_IN::Company
               && taxRegistrationNumberTable.TaxType             == TaxType_IN::Excise
               && taxRegistrationNumberTable.RegistrationNumber  == _taxInquiryArguments.getECCNumber()
               && exciseRG23CRegister1.TaxRegistrationNumberTable == taxRegistrationNumberTable.RecId
               && exciseRG23CRegister1.rgDate    == _taxInquiryArguments.getFromDate();

        if (arc != AccessRight::NoAccess && arA != AccessRight::NoAccess  )
        {
            payableAvailable = exciseRG23ARegister.rg23aPayable + exciseRG23CRegister.rg23cPayable +
                           exciseRG23ARegister1.rg23aPayable + exciseRG23CRegister1.rg23cPayable;
        }
        return payableAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseRG23CAvailBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise of rg23c available balance.
    /// </summary>
    /// <param name="_taxInquiryArguments">
    /// The tax inquiry arguments.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public static Amount exciseRG23CAvailBal(TaxInquiryArguments_IN   _taxInquiryArguments)
    {
        ExciseRG23CRegister_IN        exciseRG23CRegister;
        ExciseRG23CRegister_IN        exciseRG23CRegister1;
        Amount                        availableBalance;
        TaxRegistrationNumbers_IN     taxRegistrationNumberTable;
        SecurityRights                sr;
        SecurityTableRights           stRights;
        AccessRight                   ar;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tableStr(ExciseRG23CRegister_IN));
        ar = stRights.fieldAccessRight(fieldStr(ExciseRG23CRegister_IN,rg23cRecoverable));

        if (ar != AccessRight::NoAccess)
        {
        select sum(rg23cRecoverable) from exciseRG23CRegister
            join RecId from taxRegistrationNumberTable
            where taxRegistrationNumberTable.RegistrationType    == TaxRegistrationType_IN::Company
               && taxRegistrationNumberTable.TaxType             == TaxType_IN::Excise
               && taxRegistrationNumberTable.RegistrationNumber  == _taxInquiryArguments.getECCNumber()
               && exciseRG23CRegister.TaxRegistrationNumberTable == taxRegistrationNumberTable.RecId
               && exciseRG23CRegister.rgDate                     == _taxInquiryArguments.getFromDate();

        select sum(rg23cRecoverable) from exciseRG23CRegister1
            join RecId from taxRegistrationNumberTable
            where taxRegistrationNumberTable.RegistrationType    == TaxRegistrationType_IN::Company
               && taxRegistrationNumberTable.TaxType             == TaxType_IN::Excise
               && taxRegistrationNumberTable.RegistrationNumber  == _taxInquiryArguments.getECCNumber()
               && exciseRG23CRegister1.TaxRegistrationNumberTable == taxRegistrationNumberTable.RecId
               && exciseRG23CRegister1.rgDate                    < _taxInquiryArguments.getFromDate();

        availableBalance = exciseRG23CRegister.rg23cRecoverable + exciseRG23CRegister1.rg23cRecoverable;
        }

        return availableBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseRG23CDeferredAvailBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise of rg23c deferred available balance.
    /// </summary>
    /// <param name="_taxInquiryArguments">
    /// The tax inquiry arguments.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public static Amount exciseRG23CDeferredAvailBal(TaxInquiryArguments_IN   _taxInquiryArguments)
    {
        ExciseRG23CRegister_IN     exciseRG23CRegister;
        TaxRegistrationNumbers_IN taxRegistrationNumberTable;

        select sum(rg23cDeferredBal) from exciseRG23CRegister
            join RecId from taxRegistrationNumberTable
            where taxRegistrationNumberTable.RegistrationType    == TaxRegistrationType_IN::Company
               && taxRegistrationNumberTable.TaxType             == TaxType_IN::Excise
               && taxRegistrationNumberTable.RegistrationNumber  == _taxInquiryArguments.getECCNumber()
               && exciseRG23CRegister.TaxRegistrationNumberTable == taxRegistrationNumberTable.RecId
               && exciseRG23CRegister.rgDate                     <= _taxInquiryArguments.getFromDate();

        return exciseRG23CRegister.rg23cDeferredBal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the ExciseRG23CRegister_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing ExciseRG23CRegister_IN table.
    /// </returns>
    public static ExciseRG23CRegister_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ExciseRG23CRegister_IN    exciseRG23CRegister;

        exciseRG23CRegister.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            exciseRG23CRegister.concurrencyModel(_concurrencyModel);
        }

        select firstonly exciseRG23CRegister
            where exciseRG23CRegister.RecId == _recId;

        return exciseRG23CRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByEccNumberRgDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds excise of rg23c register by ECC number rg date.
    /// </summary>
    /// <param name="_eccNumber">
    /// The ECC number.
    /// </param>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <param name="_taxcomponent">
    /// The tax component.
    /// </param>
    /// <param name="_exciseRecordType">
    /// The excise record type.
    /// </param>
    /// <param name="_update">
    /// The update flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>ExciseRG23CRegister_IN</c> class.
    /// </returns>
    public static ExciseRG23CRegister_IN findByEccNumberRgDate(
        RefRecId            _eccNumber,
        TransDate           _date,
        RefRecId            _taxcomponent,
        ExciseRecordType_IN _exciseRecordType,
        boolean             _update = false)
    {
        ExciseRG23CRegister_IN  exciseRG23CRegister;

        exciseRG23CRegister.selectForUpdate(_update);

        select firstonly exciseRG23CRegister
            where exciseRG23CRegister.TaxRegistrationNumberTable == _eccNumber
               && exciseRG23CRegister.rgDate                     == _date
               && exciseRG23CRegister.TaxComponentTable          == _taxcomponent
               && exciseRG23CRegister.ExciseRecordType           == _exciseRecordType;

        return exciseRG23CRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumRG23CDeferedBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum of the rg23c defered balance.
    /// </summary>
    /// <param name="_eccNumber">
    /// The ECC number.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public static Amount sumRG23CDeferedBal(
        RefRecId  _eccNumber,
        TransDate _fromDate)
    {
        ExciseRG23CRegister_IN      exciseRG23CRegister;

        select sum(rg23cDeferredBal) from exciseRG23CRegister
            where exciseRG23CRegister.TaxRegistrationNumberTable == _eccNumber
               && exciseRG23CRegister.rgDate                     <= _fromDate;

        return  exciseRG23CRegister.rg23cDeferredBal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumRG23CPayable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum of rg23c payable amount.
    /// </summary>
    /// <param name="_eccNumber">
    /// The ECC number.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_taxComp">
    /// The tax component.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public static Amount sumRG23CPayable(
        RefRecId  _eccNumber,
        TransDate _fromDate,
        RefRecId  _taxComp = 0)
    {
        ExciseRG23CRegister_IN     exciseRG23CRegister;
        SecurityRights             sr;
        SecurityTableRights        stRights;
        AccessRight                ar;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(ExciseRG23CRegister_IN));
        ar = stRights.fieldAccessRight(fieldstr(ExciseRG23CRegister_IN,rg23cPayable));

        if (ar != AccessRight::NoAccess)
        {
            if (!_taxComp)
            {
                select sum(rg23cPayable) from exciseRG23CRegister
                    where exciseRG23CRegister.TaxRegistrationNumberTable == _eccNumber &&
                          exciseRG23CRegister.rgDate     < _fromDate;
            }
            else
            {
                  select sum(rg23cPayable) from exciseRG23CRegister
                    where exciseRG23CRegister.TaxComponentTable == _taxComp
                       && exciseRG23CRegister.TaxRegistrationNumberTable    == _eccNumber
                       && exciseRG23CRegister.rgDate        < _fromDate;
            }
        }
        return  exciseRG23CRegister.rg23cPayable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumRG23CPayableBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum of rg23c payable balance.
    /// </summary>
    /// <param name="_eccNumber">
    /// The ECC number.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_taxComp">
    /// The tax component.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public static Amount sumRG23CPayableBalance(
        RefRecId  _eccNumber,
        TransDate _fromDate,
        RefRecId  _taxComp = 0)
    {
        ExciseRG23CRegister_IN     exciseRG23CRegister;
        SecurityRights             sr;
        SecurityTableRights        stRights;
        AccessRight                ar;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(ExciseRG23CRegister_IN));
        ar = stRights.fieldAccessRight(fieldstr(ExciseRG23CRegister_IN,rg23cPayable));

        if (ar != AccessRight::NoAccess)
        {
            if (!_taxComp)
            {
                select sum(rg23cPayable) from exciseRG23CRegister
                        where exciseRG23CRegister.TaxRegistrationNumberTable == _eccNumber &&
                                exciseRG23CRegister.rgDate                     == _fromDate;
            }
            else
            {
                select sum(rg23cPayable) from  exciseRG23CRegister
                where exciseRG23CRegister.TaxComponentTable          == _taxComp
                    && exciseRG23CRegister.TaxRegistrationNumberTable == _eccNumber
                    && exciseRG23CRegister.rgDate                     == _fromDate;
            }
        }
        return  exciseRG23CRegister.rg23cPayable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumRG23CRecoverable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum of rg23c recoverable amount.
    /// </summary>
    /// <param name="_eccNumber">
    /// The ECC number.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public static Amount sumRG23CRecoverable(
        RefRecId  _eccNumber,
        TransDate _fromDate)
    {
        ExciseRG23CRegister_IN      exciseRG23CRegister;
        SecurityRights             sr;
        SecurityTableRights        stRights;
        AccessRight                ar;

        sr = SecurityRights::construct();
        stRights = sr.tableFieldAccessRights(tablestr(ExciseRG23CRegister_IN));
        ar = stRights.fieldAccessRight(fieldstr(ExciseRG23CRegister_IN,rg23cRecoverable));

        if (ar != AccessRight::NoAccess)
        {
        select sum(rg23cRecoverable) from exciseRG23CRegister
            where exciseRG23CRegister.TaxRegistrationNumberTable == _eccNumber
               && exciseRG23CRegister.rgDate                     == _fromDate;
        }
        return  exciseRG23CRegister.rg23cRecoverable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumRG23CRecoverBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum of rg23c recover balacne.
    /// </summary>
    /// <param name="_eccNumber">
    /// The ECC number.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <returns>
    /// The instance of the <c>Amount</c> class.
    /// </returns>
    public static Amount sumRG23CRecoverBal(
        RefRecId  _eccNumber,
        TransDate _fromDate)
    {
        ExciseRG23CRegister_IN      exciseRG23CRegisterLoc;

        select sum(rg23cRecoverable) from exciseRG23CRegisterLoc
            where exciseRG23CRegisterLoc.TaxRegistrationNumberTable == _eccNumber
               && exciseRG23CRegisterLoc.rgDate                     < _fromDate;

        return  exciseRG23CRegisterLoc.rg23cRecoverable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64059</DeveloperDocumentation>
	<Label>@GLS5618</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TaxRegistrationNumberTable</TitleField1>
	<TitleField2>TaxComponentTable</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RG23CRecoverable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RG23CDeferredBal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RG23CPayable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDestructiveQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Item</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RG23C</Name>
			<Label>@GLS5250</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RGDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RG23CRecoverable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RG23CDeferredBal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExciseRecordType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustVendPackingSlipJour</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseRecordType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDestructiveQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS113631</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Item</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequence</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PackingSlipVersion</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>NumberOfRecords</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostedDocumentLineRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PostedDocumentLineTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceiptQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RG23CDeferredBal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@GLS5621</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RG23CPayable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RG23CRecoverable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RGDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5042</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxRegistrationNumberTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS59571</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxTrans_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxTrans_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxTrans_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxRegistrationNumberTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxRegistrationNumberTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RGDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>TaxExciseAmountRegister_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ExciseRecordType</MapField>
					<MapFieldTo>ExciseRecordType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDestructiveQty</MapField>
					<MapFieldTo>IsDestructiveQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IssueQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Item</MapField>
					<MapFieldTo>Item</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequence</MapField>
					<MapFieldTo>NumberSequence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackingSlipVersion</MapField>
					<MapFieldTo>PackingSlipVersion</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PayableAmount</MapField>
					<MapFieldTo>RG23CPayable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostedDocumentLineRecId</MapField>
					<MapFieldTo>PostedDocumentLineRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostedDocumentLineTableId</MapField>
					<MapFieldTo>PostedDocumentLineTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptQty</MapField>
					<MapFieldTo>ReceiptQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RecoverableAmount</MapField>
					<MapFieldTo>RG23CRecoverable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefRecId</MapField>
					<MapFieldTo>RefRecID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefTableId</MapField>
					<MapFieldTo>RefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RGDate</MapField>
					<MapFieldTo>RGDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxCode</MapField>
					<MapFieldTo>TaxCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxComponentTable</MapField>
					<MapFieldTo>TaxComponentTable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxRegistrationNumberTable</MapField>
					<MapFieldTo>TaxRegistrationNumberTable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxTrans_IN</MapField>
					<MapFieldTo>TaxTrans_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransRecId</MapField>
					<MapFieldTo>TransRecId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxExciseRegister_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDestructiveQty</MapField>
					<MapFieldTo>IsDestructiveQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IssueQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequence</MapField>
					<MapFieldTo>NumberSequence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackingSlipVersion</MapField>
					<MapFieldTo>PackingSlipVersion</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptQty</MapField>
					<MapFieldTo>ReceiptQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RGDate</MapField>
					<MapFieldTo>RGDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxRegistrationNumberTable</MapField>
					<MapFieldTo>TaxRegistrationNumberTable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxTrans_IN</MapField>
					<MapFieldTo>TaxTrans_IN</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustVendPackingSlipJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendPackingSlipJour</Name>
					<Field>CustVendPackingSlipJour</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Item</Name>
					<SourceEDT>ItemIdSmall</SourceEDT>
					<Field>Item</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_ExciseRG23CRegister_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistrationNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_ExciseRG23CRegister_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRegistrationNumberTable</Name>
					<Field>TaxRegistrationNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTrans_IN</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxTrans_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxTrans_IN</Name>
					<Field>TaxTrans_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>