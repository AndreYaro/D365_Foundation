<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCTableConstraintColumnCategoryAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCTableConstraintColumnCategoryAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        super();
        // Delete a path if any exists.
        PCSubComponentPath::find(this.SubComponentPath, true).delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayColumnName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the table constraint column name.
    /// </summary>
    /// <returns>
    /// A table constraint column name.
    /// </returns>
    display PCTableConstraintColumnName displayColumnName()
    {
        return PCTableConstraintColumnDefinition::find(this.TableConstraintColumnDefinition).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <param name="_newConstraintRecId">
    /// The record ID of the new constraint.
    /// </param>
    /// <param name="_duplicatedComponentsMap">
    /// A map that contains pairs of IDs that link the original components to the duplicated components.
    /// </param>
    /// <param name="_duplicatedAttributesMap">
    /// A map that contains pairs of IDs that link the original attributes to the duplicated attributes.
    /// </param>
    /// <remarks>
    /// The argument duplicated attributes map has been added.
    /// </remarks>
    public void duplicate(RefRecId _newConstraintRecId, Map _duplicatedComponentsMap, Map _duplicatedAttributesMap)
    {
        PCTableConstraintColumnCategoryAttribute duplicate;

        duplicate.data(this);

        duplicate.TableConstraint   = _newConstraintRecId;
        PCAttributePathFacade::duplicateConstraintRelationPathReference(duplicate, _duplicatedComponentsMap, _duplicatedAttributesMap);

        duplicate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDatabaseRelationConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table constraint column relation that belongs to a database relation constraint.
    /// </summary>
    /// <returns>
    ///    The relation that belongs to a database relation constraint; otherwise, empty.
    /// </returns>
    public PCTableConstraintDatabaseColumnDef getDatabaseRelationConstraint()
    {
        PCTableConstraintDatabaseColumnDef  column;

        select firstonly column
            where column.RecId == this.TableConstraintColumnDefinition;

        return column;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDatabaseRelationConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the table constraint column relation belongs to a database relation constraint.
    /// </summary>
    /// <returns>
    ///    true if the relation belongs to a database relation constraint; otherwise, false.
    /// </returns>
    public boolean isDatabaseRelationConstraint()
    {
        PCTableConstraintDatabaseColumnDef  column;

        select firstonly RecId from column
            where column.RecId == this.TableConstraintColumnDefinition;

        return column.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpDataForAttachForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the temporary data for the form used to attach table constraints to components.
    /// </summary>
    /// <param name="_columnCategoryAttributeDatasource">
    /// A <c>PCTableConstraintColumnCategoryAttribute</c> record buffer.
    /// </param>
    /// <param name="_tableConstraintDefinition">
    /// The record ID of <c>PCTableConstraintDefinition</c> record.
    /// </param>
    /// <param name="_tableConstraint">
    /// The record ID of <c>PCTableConstraint</c> record.
    /// </param>
    public void setTmpDataForAttachForm(
        PCTableConstraintColumnCategoryAttribute _columnCategoryAttributeDatasource,
        RefRecId _tableConstraintDefinition,
        RefRecId _tableConstraint
        )
    {
        PCTableConstraintColumnCategoryAttribute    columnCategoryAttribute;
        PCTableConstraintColumnCategoryAttribute    columnCategoryAttributeTmp;
        PCTableConstraintColumnDefinition           columnDefinition;
        Set                                         columnSet;
        Map                                         columnRelationMap;

        void insertIntoTmp(PCTableConstraintColumnCategoryAttribute _new)
        {
            columnCategoryAttributeTmp.TableConstraint                  = _tableConstraint;
            columnCategoryAttributeTmp.TableConstraintColumnDefinition  = _new.TableConstraintColumnDefinition;
            columnCategoryAttributeTmp.CategoryAttribute                = _new.CategoryAttribute;
            // by pass validation, by using doInsert. This is needed because the temporary data may note comply with the data model
            columnCategoryAttributeTmp.doInsert();
        }

        columnSet               = new Set(Types::Int64);
        columnRelationMap       = new Map(Types::Int64, Types::Record);

        columnCategoryAttributeTmp.setTmp();
        columnCategoryAttributeTmp.setTmpData(_columnCategoryAttributeDatasource);

        while select columnCategoryAttribute
            where columnCategoryAttribute.TableConstraint == _tableConstraint
        {
            columnRelationMap.insert(columnCategoryAttribute.TableConstraintColumnDefinition, columnCategoryAttribute);
        }

        while select RecId from columnDefinition
            where columnDefinition.TableConstraintDefinition == _tableConstraintDefinition
        {
            if (columnRelationMap.exists(columnDefinition.RecId))
            {
                insertIntoTmp(columnRelationMap.lookup(columnDefinition.RecId));
            }
            else
            {
                columnCategoryAttribute.clear();
                columnCategoryAttribute.TableConstraintColumnDefinition = columnDefinition.RecId;
                insertIntoTmp(columnCategoryAttribute);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByTableConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>PCTableConstraintColumnCategoryAttribute</c> records that are associated with a
    /// table constraint.
    /// </summary>
    /// <param name="_tableConstraint">
    /// A record ID of a <c>PCTableConstraint</c> record.
    /// </param>
    public static void deleteByTableConstraint(RefRecId _tableConstraint)
    {
        PCTableConstraintColumnCategoryAttribute record;

        ttsbegin;
        delete_from record
            where record.TableConstraint == _tableConstraint;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record of the <c>PCTableConstraintColumnCategoryAttribute</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCTableConstraintColumnCategoryAttribute::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified <c>PCTableConstraintColumnCategoryAttribute</c> record.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTableConstraintColumnCategoryAttribute</c> table; otherwise, an empty record.
    /// </returns>
    public static PCTableConstraintColumnCategoryAttribute find(RefRecId _recId, boolean _forupdate = false)
    {
        PCTableConstraintColumnCategoryAttribute record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCategoryAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTableConstraintColumnCategoryAttribute</c> table by using
    ///    the specified record ID.
    /// </summary>
    /// <param name="_categoryAttribute">
    ///    The record ID of the category attribute to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTableConstraintColumnCategoryAttribute</c> table; otherwise, an empty record.
    /// </returns>
    public static PCTableConstraintColumnCategoryAttribute findByCategoryAttribute(RefRecId _categoryAttribute, boolean _forupdate = false)
    {
        PCTableConstraintColumnCategoryAttribute record;

        if (!_categoryAttribute)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.CategoryAttribute == _categoryAttribute;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTableConstraintColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTableConstraintColumnCategoryAttribute</c> table by using
    ///    the specified record IDs.
    /// </summary>
    /// <param name="_tableConstraint">
    ///    The record ID of the table constraint for the record.
    /// </param>
    /// <param name="_columnDefinition">
    ///    The record ID of the table constraint column definition for the record.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTableConstraintColumnCategoryAttribute</c> table; otherwise, an empty record.
    /// </returns>
    public static PCTableConstraintColumnCategoryAttribute findByTableConstraintColumnDefinition(RefRecId _tableConstraint, PCTableConstraintColumnDefinitionRecId _columnDefinition, boolean _forupdate = false)
    {
        PCTableConstraintColumnCategoryAttribute record;

        if (!_tableConstraint || !_columnDefinition)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record
            where record.TableConstraint == _tableConstraint
                && record.TableConstraintColumnDefinition == _columnDefinition;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record from a temporary record buffer.
    /// </summary>
    /// <param name="_columnCategoryAttributeTmp">
    /// A temporary record buffer.
    /// </param>
    public static void updateFromTmpData(PCTableConstraintColumnCategoryAttribute _columnCategoryAttributeTmp)
    {
        PCTableConstraintColumnCategoryAttribute columnCategoryAttribute;

        ttsbegin;
        select firstonly forupdate columnCategoryAttribute
            where   columnCategoryAttribute.CategoryAttribute               == _columnCategoryAttributeTmp.CategoryAttribute    &&
                    columnCategoryAttribute.TableConstraint                 == _columnCategoryAttributeTmp.TableConstraint      &&
                    columnCategoryAttribute.TableConstraintColumnDefinition == _columnCategoryAttributeTmp.TableConstraintColumnDefinition;

        columnCategoryAttribute.CategoryAttribute               = _columnCategoryAttributeTmp.CategoryAttribute;
        columnCategoryAttribute.TableConstraint                 = _columnCategoryAttributeTmp.TableConstraint;
        columnCategoryAttribute.TableConstraintColumnDefinition = _columnCategoryAttributeTmp.TableConstraintColumnDefinition;
        columnCategoryAttribute.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS332816</DeveloperDocumentation>
	<Label>@SYS191268</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TableConstraint</TitleField1>
	<TitleField2>TableConstraintColumnDefinition</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>TableConstraintCategoryAttributeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableConstraintColumnDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableConstraint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableConstraint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableConstraintColumnDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableConstraintColumnDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableConstraint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS191267</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SubComponentPath</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCSubComponentPathRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TableConstraint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS191264</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TableConstraintColumnDefinition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS191266</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TableConstraintCategoryAttributeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CategoryAttribute</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableConstraint</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableConstraintColumnDefinition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PCAttributePathIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TableConstraint</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryAttribute</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SubComponentPath</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PCSubComponentPathIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SubComponentPath</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CategoryAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResCategoryAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConnectedAttribute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefinedTableConstraint</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryAttribute</Name>
					<Field>CategoryAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SubComponentPath</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PCSubComponentPath</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubComponentPath</Name>
					<Field>SubComponentPath</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TableConstraint</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PCTableConstraint</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RelatedConstraint</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefinedTableConstraint</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableConstraint</Name>
					<Field>TableConstraint</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TableConstraintColumn</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCTableConstraintColumnDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TableConstraintColumnContainer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BelongsTo</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableConstraintColumnDefinition</Name>
					<Field>TableConstraintColumnDefinition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>