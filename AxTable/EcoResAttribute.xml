<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResAttribute extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    /// A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        EcoResAttributeTranslation  translation;
        EcoResAttributeDefaultValue defaultValue;
        EcoResComponentControl      attributeModifier;
        EcoResCategoryAttribute     categoryAttribute;

        _visitor.visitStart(this);

        // visit domain
        EcoResAttributeType::find(this.AttributeType).accept(_visitor);

        // visit translations
        while select translation
        where translation.Attribute == this.RecId
        {
            translation.accept(_visitor);
        }

        // visit default values
        defaultValue = EcoResAttributeDefaultValue::findByAttribute(this.RecId);

        if ( defaultValue.RecId != 0 )
        {
            defaultValue.accept(_visitor);
        }

        // visit mandatory
        while select attributeModifier
        join RecId from categoryAttribute
        where   categoryAttribute.RecId     == attributeModifier.CategoryAttribute
        &&      categoryAttribute.Attribute == this.RecId
        {
            attributeModifier.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data type for non-referenced and referenced attribute.
    /// </summary>
    /// <returns>
    /// Actual attribute data type.
    /// </returns>
    public AttributeDataType getActualDataType()
    {
        return this.getActualAttributeType().DataType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets attribute type for non-referenced and referenced attribute.
    /// </summary>
    /// <returns>
    /// Actual attribute type record.
    /// </returns>
    public EcoResAttributeType getActualAttributeType(){
        EcoResAttribute ecoResAttribute, refEcoResAttribute;
        EcoResReferenceValue    ecoResRefereceValue;
        EcoResAttributeDefaultValue attributeReference;
        EcoResAttributeType ecoResAttributeType;

        //non-reference attribute type.
        select RecId, AttributeType from ecoResAttribute
            where ecoResAttribute.RecId == this.RecId
            join RecId, DataType from ecoResAttributeType
                where ecoResAttributeType.RecId == ecoResAttribute.AttributeType
                    && ecoResAttributeType.DataType != AttributeDataType::Reference;
        if (ecoResAttribute.RecId)
        {
            return ecoResAttributeType;
        }
        else
        {
            //referenced attribute type.
            // attribute type as Reference the values will be based on the attribute type of the referenced attribute.
            select RecId from ecoResAttribute
                where ecoResAttribute.RecId == this.RecId
                join RecId, Value, Attribute from attributeReference
                    where attributeReference.Attribute == ecoResAttribute.RecId
                join RefRecId from ecoResRefereceValue
                    where ecoResRefereceValue.RecId == attributeReference.Value
                        && ecoResRefereceValue.RefTableId == tableNum(EcoResAttribute)
                join AttributeType from refEcoResAttribute
                    where refEcoResAttribute.RecId == ecoResRefereceValue.RefRecId
                join DataType from ecoResAttributeType
                    where ecoResAttributeType.RecId == refEcoResAttribute.AttributeType;

            return ecoResAttributeType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeTypeDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>DataType</c> value from the <c>EcoResAttributeType</c> table that has the specified
    /// record domain.
    /// </summary>
    /// <returns>
    /// A <c>DataType</c> value.
    /// </returns>
    display AttributeDataType getAttributeTypeDataType()
    {
        return EcoResAttributeType::find(this.AttributeType).DataType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default value for the attribute.
    /// </summary>
    /// <returns>
    /// The default value for the attribute.
    /// </returns>
    public anytype getDefaultValue()
    {
        EcoResAttributeDefaultValue tblEcoResAttributeDefaultValue;
        EcoResValue tblDefaultValue;

        select firstonly tblDefaultValue
            exists join tblEcoResAttributeDefaultValue
            where tblEcoResAttributeDefaultValue.Attribute == this.RecId
                && tblDefaultValue.RecId == tblEcoResAttributeDefaultValue.Value;

        if (tblDefaultValue.RecId)
        {
            return tblDefaultValue.getValue();
        }

        // need to return (somewhat) proper type depending on AttributeType DataType,
        // otherwise, caller assigning value this method returns to a var of AttributeType DataType
        // (eg, DateTime) could get runtime error.
        switch (this.getAttributeTypeDataType())
        {
            case AttributeDataType::DateTime:
                return DateTimeUtil::minValue();
            case AttributeDataType::Currency:
                // Fall through
            case AttributeDataType::Decimal:
                // Fall through
            case AttributeDataType::Integer:
                return 0;
            case AttributeDataType::Text:
                return '';
            case AttributeDataType::TrueFalse:
                return false;
            default:
                return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        RetailAttributeMetadataHandler retailAttributeMetadataHandler;
        RetailAttributeMetadata attributeMetadata;

        super();
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            retailAttributeMetadataHandler = RetailAttributeMetadataHandler::construct();
            attributeMetadata.Attribute = this.RecId;

            retailAttributeMetadataHandler.parmRetailAttributeMetadata(attributeMetadata);
            [attributeMetadata.Metadata, attributeMetadata.MetadataVersion] = retailAttributeMetadataHandler.getMetadata();

            attributeMetadata.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the attribute.
    /// </summary>
    /// <returns>
    /// The record ID of the duplicated attribute.
    /// </returns>
    public RefRecId pcDuplicate()
    {
        EcoResAttribute             duplicate;
        EcoResAttributeDefaultValue defaultValue;
        EcoResAttributeTranslation  translations;
        EcoResTextValue             textValue;
        str                         value;

        duplicate.data(this);

        duplicate.insert();

        PCSolverVariable::findByAttribute(this.RecId).duplicate(duplicate.RecId);

        //duplicate the defaultValue
        select firstonly defaultValue
            where defaultValue.Attribute == this.RecId;

        if (defaultValue)
        {
            value = defaultValue.pcGetSetDefaultValue(false, '');
            textValue.TextValue = value;
            textValue.insert();
            defaultValue.Value = textValue.RecId;
            defaultValue.Attribute = duplicate.RecId;
            defaultValue.insert();
        }

        //duplicate the translations
        while select translations
            where translations.Attribute == this.RecId
        {
            translations.Attribute = duplicate.RecId;
            translations.insert();
        }

        return duplicate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDuplicates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if duplicates are allowed for that record.
    /// </summary>
    /// <returns>
    /// true, if duplicates are allowed; otherwise, false.
    /// </returns>
    public boolean allowDuplicates()
    {
        return this.AttributeModifier == EcoResAttributeModifier::Component;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetSetDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the text value associated with the current default value definition.
    /// </summary>
    /// <param name="_set">
    /// true if the text value is set; otherwise, false;
    /// </param>
    /// <param name="_value">
    /// The new text value when the <paramref name="set"/> parameter is true.
    /// </param>
    /// <returns>
    /// The current text value of the default value definition.
    /// </returns>
    /// <remarks>
    /// This edit method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public edit AttributeValueText pcGetSetDefaultValue(boolean _set, AttributeValueText _value)
    {
        EcoResTextValue             textValue;
        EcoResAttributeDefaultValue attributeDefaultValue;
        EcoResAttributeType                domain;
        AttributeValueText          ret;

        void deleteIfNotEmpty(Common toDelete)
        {
            if (0 != toDelete.RecId)
            {
                toDelete.delete();
            }
        }

        if (_set)
        {
            domain  = EcoResAttributeType::find(this.AttributeType);
            if (!PCModelingLibrary::validateAttributeTypeValue(domain, _value))
            {
                throw error(strFmt("@SYS32810", "@SYS40175"));
            }

            if ((this.RecId < 1) && FormDataUtil::getFormDataSource(this))
            {
                FormDataUtil::getFormDataSource(this).write();
            }

            ttsbegin;

            select firstonly forupdate attributeDefaultValue
                where attributeDefaultValue.Attribute == this.RecId
                join firstonly forupdate textValue
                    where attributeDefaultValue.Value == textValue.RecId;

            if (_value)
            {
                // create a copy of the value
                // Note: if the domain changes the default value may not be in sync, which is tracked by #123862
                textValue.TextValue = _value;
                textValue.write();

                attributeDefaultValue.Attribute = this.RecId;
                attributeDefaultValue.Value = textValue.RecId;
                attributeDefaultValue.write();
            }
            else
            {
                //delete existing value
                textValue.TextValue = ''; //for the return value
                deleteIfNotEmpty(attributeDefaultValue);
            }

            ttscommit;

            ret = textValue.pcGetStringValue();
        }
        else
        {
            select firstonly RecId from attributeDefaultValue
                where attributeDefaultValue.Attribute == this.RecId
                join firstonly TextValue from textValue
                    where attributeDefaultValue.Value == textValue.RecId;

            if (this.RecId > 0)
            {
                ret = textValue.TextValue;
            }
            else
            {
                ret = '';
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record in the <c>EcoResAttribute</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResAttribute::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the specified record in the <c>EcoResAttribute</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResAttribute</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResAttribute find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResAttribute record;

        if (!_recId)
        {
            return record;
        }

        record.selectForUpdate(_forupdate);

        select firstonly record
            where record.RecId == _recId;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the attribute for the given name, reference record ID of <c>EcoResAttributeType</c> table and attribute modifier type.
    /// </summary>
    /// <param name="_name">
    /// The value of name.
    /// </param>
    /// <param name="_attributeType">
    /// Reference record of attribute type.
    /// </param>
    /// <param name="_modifier">
    /// The value of attribute modifier.
    /// </param>
    /// <returns>
    /// The record of <c>EcoResAttribute</c> table.
    /// </returns>
    public static RefRecId findOrCreateAttribute(Name _name, RefRecId _attributeType, EcoResAttributeModifier _modifier = EcoResAttributeModifier::Catalog)
    {
        EcoResAttribute attribute;

        select firstonly attribute
            where attribute.Name == _name
                && attribute.AttributeType == _attributeType
                && attribute.AttributeModifier == _modifier;

        if (!attribute.RecId)
        {
            ttsbegin;
            attribute.selectForUpdate(true);
            attribute.Name = _name;
            attribute.AttributeType = _attributeType;
            attribute.AttributeModifier = _modifier;
            attribute.insert();
            ttscommit;
        }

        return attribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified attribute in <c>EcoResAttribute</c> table.
    /// </summary>
    /// <param name="_ecoResAttributeName">
    /// The attribute name for which to retrieve in the <c>EcoResAttribute</c> table.
    /// </param>
    /// <param name="_ecoResAttributeTypeId">
    /// The attribute type ID in the <c>EcoResCategory</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResAttribute</c> table if found; otherwise, an empty record.
    /// </returns>
    public static EcoResAttribute findByName(Name _ecoResAttributeName, EcoResAttributeTypeRecId _ecoResAttributeTypeId, boolean _forUpdate = false)
    {
        EcoResAttribute ecoResAttribute = null;

        if (_ecoResAttributeName)
        {
            ecoResAttribute.selectForUpdate(_forUpdate);
            select firstonly ecoResAttribute
                where ecoResAttribute.Name == _ecoResAttributeName
                    && ecoResAttribute.AttributeType == _ecoResAttributeTypeId;
        }

        return ecoResAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameTypeModifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified attribute in <c>EcoResAttribute</c> table.
    /// </summary>
    /// <param name="_ecoResAttributeName">
    /// The attribute name for which to retrieve in the <c>EcoResAttribute</c> table.
    /// </param>
    /// <param name="_ecoResAttributeTypeId">
    /// The attribute type recid.
    /// </param>
    /// <param name="_ecoResAttributeModifier">
    /// The attribute modifier.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResAttribute</c> table if found; otherwise, an empty record.
    /// </returns>
    public static EcoResAttribute findByNameTypeModifier(Name _ecoResAttributeName, EcoResAttributeTypeRecId _ecoResAttributeTypeId, EcoResAttributeModifier _ecoResAttributeModifier, boolean _forUpdate = false)
    {
        EcoResAttribute ecoResAttribute = null;

        if (_ecoResAttributeName && _ecoResAttributeTypeId)
        {
            ecoResAttribute.selectForUpdate(_forUpdate);
            select firstonly ecoResAttribute
                where ecoResAttribute.Name == _ecoResAttributeName
                    && ecoResAttribute.AttributeType == _ecoResAttributeTypeId
                    && ecoResAttribute.AttributeModifier == _ecoResAttributeModifier;
        }

        return ecoResAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeWithNameAndModifierExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a <c>EcoResAttribute</c> record with the specified name and attribute modifier
    /// exists or not.
    /// </summary>
    /// <param name = "_attributeName">The attribute name.</param>
    /// <param name = "_modifier">The attribute modifier.</param>
    /// <returns>True if an attribute with the specified name and modifier exists; otherwise false.</returns>
    public static boolean attributeWithNameAndModifierExists(Name _attributeName, EcoResAttributeModifier _modifier)
    {
        EcoResAttribute attribute;

        if (_attributeName)
        {
            select firstonly RecId from attribute
                where attribute.Name == _attributeName
                    && attribute.AttributeModifier == _modifier;
        }

        return attribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        ret = super();

        if (ret)
        {
            EcoResProductEntityAttributeTableFieldAssociation association = EcoResProductEntityAttributeTableFieldAssociation::findFirstAssociationForAttribute(this);

            if (association)
            {
                EcoResProductEntityAttributeTableField tableFieldRecord = EcoResProductEntityAttributeTableField::find(association.ProductEntityAttributeTableField);
                ret = checkFailed(strFmt("@SCM:EcoResProductEntityAttributeTableFieldAssociationExists", tableId2PName(tableFieldRecord.ApplicationTableId), fieldId2PName(tableFieldRecord.ApplicationTableId, tableFieldRecord.ApplicationTableFieldId)));
            }
            else if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                EcoResAttributeValue erav;
                RefRecId attrRecId = this.RecId;
                EcoResInstanceValue eriv;

                // Find if attribute is used on EcoResInstanceValue.
                select firstonly InstanceRelationType from eriv
                    join erav
                where erav.InstanceValue == eriv.RecId
                    && erav.Attribute == attrRecId;

                if (eriv.InstanceRelationType)
                {
                    // Show different error messages depending on the InstanceRelationType.
                    switch (eriv.InstanceRelationType)
                    {
                        case tableNum(CustomerInstanceValue):
                            ret = checkFailed('@Retail:ErrorDeleteAttrValueOnCustomer');
                            break;
                        case tableNum(RetailSalesTableInstanceValue):
                            ret = checkFailed('@Retail:ErrorDeleteAttrValueOnTransaction');
                            break;
                        case tableNum(RetailCatalogProdInternalOrgInstanceVal):
                        case tableNum(EcoResProductInstanceValue):
                        case tableNum(CatalogProductInstanceValue):
                        case tableNum(EcoResCategoryInstanceValue):
                            ret = checkFailed('@Retail:ErrorDeleteAttrValueOnProduct');
                            break;
                        default:
                            ret = checkFailed(strFmt('@Retail:ErrorDeleteAttrValueExists', tableId2Name(eriv.InstanceRelationType)));
                            break;
                    }
                }
            }

        } 

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrecisionOnRealValueControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the correct number of decimals on the form control to the associated unit of measure precision.
    /// If no unit of measure is associated, sets the number of decimals to auto.
    /// </summary>
    /// <param name = "_formRealControl">The real value form control.</param>
    public void setPrecisionOnRealValueControl(FormRealControl _formRealControl)
    {
        boolean unitOfMeasurePrecisionFound = false;
            
        // Get the unit of measure for this attribute type.
        EcoResAttributeType attributeType = EcoResAttributeType::find(this.AttributeType);
        if (attributeType)
        {
            EcoResAttributeTypeUnitOfMeasure ecoResAttributeTypeUnitOfMeasure = EcoResAttributeTypeUnitOfMeasure::findByAttributeType(attributeType);
            if (ecoResAttributeTypeUnitOfMeasure)
            {
                int64 defaultUnitOfMeasure = ecoResAttributeTypeUnitOfMeasure.DefaultUnitOfMeasure;
                if (defaultUnitOfMeasure)
                {
                    UnitOfMeasure unitOfMeasure = UnitOfMeasure::find(defaultUnitOfMeasure);

                    if (unitOfMeasure)
                    {
                        // Set the number of decimals on this field to the unit of measure's decimal precision value.
                        _formRealControl.noOfDecimals(unitOfMeasure.DecimalPrecision, AutoMode::Fixed);
                        unitOfMeasurePrecisionFound = true;
                    }
                }
            }
        }

        if (!unitOfMeasurePrecisionFound)
        {
            // If there is no precision defined for this attribute type, set it to auto.
            _formRealControl.noOfDecimalsMode(AutoMode::Auto);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeFriendlyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the friendly name of the specific attribute in the current language.
    /// </summary>
    /// <returns>The friendly name of the specific attribute.</returns>
    public Name getAttributeFriendlyName()
    {
        EcoResAttributeTranslation translation = EcoResAttributeTranslation::findByAttributeAndLanguage(this.RecId, SystemParameters::getSystemLanguageId());

        if (translation.FriendlyName)
        {
            return translation.FriendlyName;
        }

        return this.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified field is valid.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The ID of the field to validate.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        if ( _fieldIdToCheck == fieldNum(EcoResAttribute, AttributeType))
        {
            if (this.isAttributePublishedToAzureSearchIndex() && this.orig().AttributeType != this.AttributeType)
            {
                return checkFailed(strFmt("@Retail:AttributeAlreadyPublishedToAzureSearchError", this.Name));
            }
        }

        ret = super(_fieldIdToCheck);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAttributePublishedToAzureSearchIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the attribute is published to azure search index
    /// </summary>
    /// <returns>true if attribute is published to Azure Search Index; otherwise false.</returns>
    private boolean isAttributePublishedToAzureSearchIndex()
    {
        EcoResAttributeValue                   ecoResAttributeValue;
        RetailProdAttributeInternalOrgMetadata prodAttribuiteInternalOrgMetadata;
        RetailProdAttributeCatalogMetadata     prodAttributeCatalogMetadata;
        RetailConfigurationParameters          configurationParameters;
        RetailConfigurationName                useAzureSearch = 'ProductSearch.UseAzureSearch';
        RetailConfigurationName                cloudSearchProvider = 'ProductSearch.CloudSearchProvider';
        RetailConfigurationValue               useAzureSearchValue = 'true';
        RetailConfigurationValue               cloudSearchProviderValue = 'CommerceProductSearch';
        boolean                                isRetailConfigKeyEnabled;

        // Checks if retail configuration key is enabled
        isRetailConfigKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(Retail));

        if (!isRetailConfigKeyEnabled)
        {
            return false;
        }

        // Checks if azure prodduct search is enabled.
        select firstonly configurationParameters
            where (configurationParameters.Name == useAzureSearch && configurationParameters.Value == useAzureSearchValue)
            || (configurationParameters.Name == cloudSearchProvider && configurationParameters.Value == cloudSearchProviderValue);

        if (!configurationParameters)
        {
            return false;
        }

        // Checks if this attribute is linked with any product/category/catalog
        select firstonly ecoResAttributeValue
            where ecoResAttributeValue.Attribute == this.RecId;

        if (!ecoResAttributeValue)
        {
            return false;
        }

        // Checks if this attribute is marked as 'Show attribute on channel' & marked as 'Can be refined' in "Channel categories and product attributes" form
        RetailSPChannelProdAttrMetadataHandler retailChannelProdAttrMetadataHandler = new RetailSPChannelProdAttrMetadataHandler();

        while select prodAttribuiteInternalOrgMetadata
            where prodAttribuiteInternalOrgMetadata.Attribute == this.RecId
        {
            retailChannelProdAttrMetadataHandler.deserialize(prodAttribuiteInternalOrgMetadata.Metadata, prodAttribuiteInternalOrgMetadata.MetadataVersion);

            if(retailChannelProdAttrMetadataHandler.isRefinable())
            {
                return true;
            }
        }

        // Checks if this attribute is marked as 'Show attribute on channel' & marked as 'Can be refined' in "All catalogs" form
        RetailCatalogProdAttrMetadataHandler retailProdAttrMetadataHandler = new RetailCatalogProdAttrMetadataHandler();

        while select prodAttributeCatalogMetadata
            where prodAttributeCatalogMetadata.Attribute == this.RecId
        {
            retailProdAttrMetadataHandler.deserialize(prodAttributeCatalogMetadata.Metadata, prodAttributeCatalogMetadata.MetadataVersion);

            if(retailProdAttrMetadataHandler.isRefinable())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return super()
            && this.validateAttributeTypeChange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttributeTypeChange</Name>
				<Source><![CDATA[
    private boolean validateAttributeTypeChange()
    {
        boolean ret = true;

        if (this.RecId != 0
            && this.orig().AttributeType != this.AttributeType)
        {
            EcoResProductAttributeValue ecoResProductAttributeValue;
            EcoResProduct product;

            select firstonly DisplayProductNumber from product
                exists join ecoResProductAttributeValue
                where ecoResProductAttributeValue.Attribute == this.RecId
                    && ecoResProductAttributeValue.Product == product.RecId;

            if (product)
            {
                ret = checkFailed(strFmt("@SCM:Error_EcoResAttribute_AttributeTypeChange", product.DisplayProductNumber, "@SCM:MenuItem_EcoResProductAttributeValueCleanup"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS130985</DeveloperDocumentation>
	<FormRef>EcoResAttribute</FormRef>
	<Label>@SYS31826</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>AttributeType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResAttributeDefaultValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResAttributeDefaultValue</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResAttributeTranslation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResAttributeTranslation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResAttributeValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResAttributeValue</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResCategoryAttribute</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResCategoryAttribute</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeModifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS183787</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeModifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeModifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EcoResAttributeModifier</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS333319</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameAttributeType</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AttributeType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AttributeType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttributeType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResAttributeType</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResAttributeType_EcoResAttribute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeType</Name>
					<Field>AttributeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>