<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCurrencyConversionLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerCurrencyConversionLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTask</Name>
				<Source><![CDATA[
    public static void addTask(
        LedgerRecId _ledgerRecId,
        className _providerClass,
        LedgerCurrencyConversionType _ledgerCurrencyConversionType,
        ClassName _taskName,
        LedgerCurrencyConversionTask _taskType,
        Priority _priority)
    {
        LedgerCurrencyConversionLog ledgerCurrencyConversionLog;

        ledgerCurrencyConversionLog = LedgerCurrencyConversionLog::findByKey(
            _ledgerRecId,
            _providerClass,
            _ledgerCurrencyConversionType,
            _taskName,
            _taskType);

        if (!ledgerCurrencyConversionLog)
        {
            ledgerCurrencyConversionLog.Ledger = _ledgerRecId;
            ledgerCurrencyConversionLog.ProviderClass = _providerClass;
            ledgerCurrencyConversionLog.ConversionType = _ledgerCurrencyConversionType;
            ledgerCurrencyConversionLog.TaskName = _taskName;
            ledgerCurrencyConversionLog.TaskType = _taskType;
            ledgerCurrencyConversionLog.LastProcessedId = 0;
            ledgerCurrencyConversionLog.Priority = _priority;
            ledgerCurrencyConversionLog.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTasks</Name>
				<Source><![CDATA[
    public static void deleteTasks(
        LedgerRecId _ledgerRecId,
        LedgerCurrencyConversionType _ledgerCurrencyConversionType)
    {
        LedgerCurrencyConversionLog ledgerCurrencyConversionLog;

        ttsBegin;

        delete_from ledgerCurrencyConversionLog
            where ledgerCurrencyConversionLog.Ledger == _ledgerRecId
                && ledgerCurrencyConversionLog.ConversionType == _ledgerCurrencyConversionType;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByKey</Name>
				<Source><![CDATA[
    public static LedgerCurrencyConversionLog findByKey(
        LedgerRecId _ledgerRecId,
        ClassName _providerClass,
        LedgerCurrencyConversionType _ledgerCurrencyConversionType,
        ClassName _taskName,
        LedgerCurrencyConversionTask _taskType,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerCurrencyConversionLog ledgerCurrencyConversionLog;

        ledgerCurrencyConversionLog.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerCurrencyConversionLog.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerCurrencyConversionLog
            where ledgerCurrencyConversionLog.Ledger == _ledgerRecId
                && ledgerCurrencyConversionLog.ProviderClass == _providerClass
                && ledgerCurrencyConversionLog.ConversionType == _ledgerCurrencyConversionType
                && ledgerCurrencyConversionLog.TaskName == _taskName
                && ledgerCurrencyConversionLog.TaskType == _taskType;

        return ledgerCurrencyConversionLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastCompletionDate</Name>
				<Source><![CDATA[
    public static TransDate getLastCompletionDate(
        LedgerRecId _ledgerRecId,
        LedgerCurrencyConversionType _ledgerCurrencyConversionType)
    {
        TransDate lastCompletionDate = dateNull();
        LedgerCurrencyConversionLog ledgerCurrencyConversionLog;

        if (LedgerCurrencyConversionLog::isCurrencyConversionComplete(_ledgerRecId, _ledgerCurrencyConversionType))
        {
            // The latest task completion date is considered the completion date of the entire conversion.
            select firstOnly TaskCompletionDate from ledgerCurrencyConversionLog
                order by ledgerCurrencyConversionLog.TaskCompletionDate desc
                where ledgerCurrencyConversionLog.Ledger == _ledgerRecId
                    && ledgerCurrencyConversionLog.ConversionType == _ledgerCurrencyConversionType;

            if (ledgerCurrencyConversionLog)
            {
                lastCompletionDate = ledgerCurrencyConversionLog.TaskCompletionDate;
            }
        }

        return lastCompletionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastProcessedId</Name>
				<Source><![CDATA[
    public static RecId getLastProcessedId(
        LedgerRecId _ledgerRecId,
        className _providerClass,
        LedgerCurrencyConversionType _ledgerCurrencyConversionType,
        ClassName _taskName,
        LedgerCurrencyConversionTask _taskType)
    {
        LedgerCurrencyConversionLog ledgerCurrencyConversionLog;

        ledgerCurrencyConversionLog = LedgerCurrencyConversionLog::findByKey(
            _ledgerRecId,
            _providerClass,
            _ledgerCurrencyConversionType,
            _taskName,
            _taskType);

        return ledgerCurrencyConversionLog.LastProcessedId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrencyConversionComplete</Name>
				<Source><![CDATA[
    public static boolean isCurrencyConversionComplete(
        LedgerRecId _ledgerRecId,
        LedgerCurrencyConversionType _ledgerCurrencyConversionType)
    {
        LedgerCurrencyConversionLog ledgerCurrencyConversionLog;

        select firstOnly RecId from ledgerCurrencyConversionLog
            where ledgerCurrencyConversionLog.Ledger == _ledgerRecId
                && ledgerCurrencyConversionLog.ConversionType == _ledgerCurrencyConversionType
                && ledgerCurrencyConversionLog.TaskCompletionDate == dateNull();

        // The conversion is complete when all of the tasks have been completed.

        return (ledgerCurrencyConversionLog == null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logLastProcessedId</Name>
				<Source><![CDATA[
    public static void logLastProcessedId(
        LedgerRecId _ledgerRecId,
        className _providerClass,
        LedgerCurrencyConversionType _ledgerCurrencyConversionType,
        ClassName _taskName,
        LedgerCurrencyConversionTask _taskType,
        RecId _lastProcessedRecId)
    {
        LedgerCurrencyConversionLog ledgerCurrencyConversionLog;

        ledgerCurrencyConversionLog = LedgerCurrencyConversionLog::findByKey(
            _ledgerRecId,
            _providerClass,
            _ledgerCurrencyConversionType,
            _taskName,
            _taskType,
            true);

        Debug::assert(ledgerCurrencyConversionLog != null);

        if (ledgerCurrencyConversionLog)
        {
            ttsBegin;
            ledgerCurrencyConversionLog.LastProcessedId = _lastProcessedRecId;
            ledgerCurrencyConversionLog.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTaskCompletion</Name>
				<Source><![CDATA[
    public static void logTaskCompletion(
        LedgerRecId _ledgerRecId,
        className _providerClass,
        LedgerCurrencyConversionType _ledgerCurrencyConversionType,
        ClassName _taskName,
        LedgerCurrencyConversionTask _taskType)
    {
        LedgerCurrencyConversionLog ledgerCurrencyConversionLog;

        ledgerCurrencyConversionLog = LedgerCurrencyConversionLog::findByKey(
            _ledgerRecId,
            _providerClass,
            _ledgerCurrencyConversionType,
            _taskName,
            _taskType,
            true);

        Debug::assert(ledgerCurrencyConversionLog != null);

        if (ledgerCurrencyConversionLog)
        {
            ttsBegin;
            ledgerCurrencyConversionLog.TaskCompletionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            ledgerCurrencyConversionLog.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS335813</DeveloperDocumentation>
	<IsObsolete>Yes</IsObsolete>
	<Label>@SYS335807</Label>
	<TitleField1>TaskName</TitleField1>
	<TitleField2>TaskType</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProviderClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConversionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastProcessedId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConversionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProviderClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskCompletionDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConversionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerCurrencyConversionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LastProcessedId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReferenceField</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Ledger</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Priority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProviderClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClassName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaskCompletionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS130360</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaskName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClassName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaskType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerCurrencyConversionTask</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerCurrencyConversionLogIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Ledger</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProviderClass</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaskName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaskType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConversionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LastProcessedId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Ledger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Ledger</Name>
					<Field>Ledger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>