<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionAgencyGracePeriodSetup_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCollectionAgencyGracePeriodSetup_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAccountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method checks if the combination of Account code and Account/Group number is correct.
    /// </summary>
    /// <returns>
    ///     true, if the combination of Account code and Account/Group number is correct; false otherwise.
    /// </returns>
    boolean checkAccountRelation()
    {
        boolean ok = true;

        if ((this.AccountCode == TableGroupAll::Table ||
             this.AccountCode == TableGroupAll::GroupId) && ! this.Num)
        {
            ok = checkFailed("@SYS17074");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method checks if the dates defining the interval are correct.
    /// </summary>
    /// <returns>
    ///     true, if the dates defining the interval are correct; false otherwise.
    /// </returns>
    public boolean checkInterval()
    {
        if (this.FromDate &&
            this.ToDate &&
            (this.FromDate > this.ToDate))
        {
            return checkFailed("@SYS16982");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        boolean validateField(fieldId p1)
    {
        boolean isValid;

        isValid = super(p1);

        switch (p1)
        {
            case (fieldnum(CustCollectionAgencyGracePeriodSetup_W,Num)) :
                isValid = this.checkAccountRelation() && isValid;
                break;
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = this.checkAccountRelation() && ret;
        ret = this.checkInterval() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the
    ///    <c>CustCollectionAgencyGracePeriodSetup_W</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_accountCode">
    ///    Account code (Table/Group/All) of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_num">
    ///    Account/group number of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_fromDate">
    ///    Effective start date of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_toDate">
    ///    Effective end date of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(CustCollectionLetterAccountCode_W        _accountCode,
                                     CustCollectionLetterAccountRelation_W    _num,
                                     FromDate                                 _fromDate,
                                     ToDate                                   _toDate)
    {
        boolean isExisting = true;

        if (! CustCollectionAgencyGracePeriodSetup_W::exist(_accountCode, _num, _fromDate, _toDate))
        {
            isExisting = checkFailed(strFmt(CustCollectionAgencyGracePeriodSetup_W::txtNotExist(), _accountCode, _num, _fromDate, _toDate));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>CustCollectionAgencyGracePeriodSetup_W</c>
    ///    table exists.
    /// </summary>
    /// <param name="_accountCode">
    ///    Account code (Table/Group/All) of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_num">
    ///    Account/group number of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_fromDate">
    ///    Effective start date of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_toDate">
    ///    Effective end date of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(CustCollectionLetterAccountCode_W        _accountCode,
                                CustCollectionLetterAccountRelation_W    _num,
                                FromDate                                 _fromDate,
                                ToDate                                   _toDate)
    {
        boolean found = false;

        found = (select firstOnly CustCollectionAgencyGracePeriodSetup_W
                     where CustCollectionAgencyGracePeriodSetup_W.AccountCode == _accountCode &&
                           CustCollectionAgencyGracePeriodSetup_W.Num         == _num &&
                           CustCollectionAgencyGracePeriodSetup_W.FromDate    == _fromDate &&
                           CustCollectionAgencyGracePeriodSetup_W.ToDate      == _toDate).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>CustCollectionAgencyGracePeriodSetup_W</c> table.
    /// </summary>
    /// <param name="_accountCode">
    ///    Account code (Table/Group/All) of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_num">
    ///    Account/group number of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_fromDate">
    ///    Effective start date of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_toDate">
    ///    Effective end date of the <c>CustCollectionAgencyGracePeriodSetup_W</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    The record found in the <c>CustCollectionAgencyGracePeriodSetup_W</c> table.
    /// </returns>
    public static CustCollectionAgencyGracePeriodSetup_W find(CustCollectionLetterAccountCode_W        _accountCode,
                                                              CustCollectionLetterAccountRelation_W    _num,
                                                              FromDate                                 _fromDate,
                                                              ToDate                                   _toDate,
                                                              boolean                                  _forUpdate        = false,
                                                              ConcurrencyModel                         _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustCollectionAgencyGracePeriodSetup_W periodSetup;

        if (_accountCode || _num)
        {
            if (_forupdate)
            {
                periodSetup.selectForUpdate(_forupdate);
            }

            if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                periodSetup.concurrencyModel(_concurrencyModel);
            }

            select firstOnly periodSetup
                where periodSetup.AccountCode == _accountCode &&
                      periodSetup.Num         == _num &&
                      periodSetup.FromDate    == _fromDate &&
                      periodSetup.ToDate      == _toDate;
        }

        return periodSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGraceDaysAfterTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the quantity of grace days related to the Customer and Date, following the order Table, Group, All.
    /// </summary>
    /// <param name="_custAccount">
    ///    Customer for which the quantity of grace days is being found.
    /// </param>
    /// <param name="_transDate">
    ///    The date on which the quantity of grace days is being found.
    /// </param>
    /// <returns>
    ///    The quantity of grace days after transaction date found for the passed customer and date.
    /// </returns>
    static PositiveDays findGraceDaysAfterTransDate(CustAccount  _custAccount,
                                                           TransDate    _transDate)
    {
        CustCollectionAgencyGracePeriodSetup_W  gracePeriodSetup;

        select firstonly GraceDaysAfterTransDate from gracePeriodSetup
            where gracePeriodSetup.AccountCode  == TableGroupAll::Table  &&
                  gracePeriodSetup.Num          == _custAccount &&
                  (gracePeriodSetup.FromDate    <= _transDate || ! gracePeriodSetup.FromDate) &&
                  (gracePeriodSetup.ToDate      >= _transDate || ! gracePeriodSetup.ToDate);

        if (! gracePeriodSetup.RecId)
        {
            select firstonly GraceDaysAfterTransDate from gracePeriodSetup
                where gracePeriodSetup.AccountCode  == TableGroupAll::GroupId    &&
                      gracePeriodSetup.Num          == CustTable::find(_custAccount).CustGroup &&
                      (gracePeriodSetup.FromDate    <= _transDate || ! gracePeriodSetup.FromDate) &&
                      (gracePeriodSetup.ToDate      >= _transDate || ! gracePeriodSetup.ToDate);
        }

        if (! gracePeriodSetup.RecId)
        {
            select firstonly GraceDaysAfterTransDate from gracePeriodSetup
                where gracePeriodSetup.AccountCode == TableGroupAll::All &&
                     (gracePeriodSetup.FromDate    <= _transDate || ! gracePeriodSetup.FromDate) &&
                     (gracePeriodSetup.ToDate      >= _transDate || ! gracePeriodSetup.ToDate);
        }

        return gracePeriodSetup.GraceDaysAfterTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the
    ///    <c>CustCollectionAgencyGracePeriodSetup_W</c> table does not exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS4009954";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustCollectionLetter</ConfigurationKey>
	<CountryRegionCodes>AT,BE,CZ,DK,EE,FI,FR,DE,HU,IE,IT,LV,LT,NL,PL,ES,SE,GB</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4009980</DeveloperDocumentation>
	<FormRef>CustCollectionAgencyGracePeriodSetup_W</FormRef>
	<Label>@SYS4009979</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>AccountCode</TitleField1>
	<TitleField2>Num</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsReceivable</Modules>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GraceDaysAfterTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GraceDaysAfterTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCollectionLetterAccountCode_W</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GraceDaysAfterTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PositiveDays</ExtendedDataType>
			<Label>@SYS4009952</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Num</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCollectionLetterAccountRelation_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountNumDatesIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Num</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125070</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustCollectionLetterAccounts_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Num</Name>
					<Field>Num</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustCollectionLetterAccounts_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Num</Name>
					<Field>Num</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>