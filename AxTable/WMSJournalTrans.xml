<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WMSJournalTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateSerialId</Name>
				<Source><![CDATA[
    public boolean canUpdateSerialId(boolean _errorText = false)
    {
        InventDim                               inventDim = this.inventDim();
        boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
        if ((!isCWItem && (this.Qty <= 0)) || (isCWItem && (this.PdsCWQty <= 0)))
        {
            return _errorText ? checkFailed("@SYS50502") : false;
        }

        if (this.isPosted())
        {
            return _errorText ? checkFailed("@SYS23025") : false;
        }

        if (inventDim.InventSerialId)
        {
            return _errorText ? checkFailed("@SYS54763") : false;
        }

        if (!EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventSerialId)))
        {
            return _errorText ? checkFailed("@SYS54764") : false;
        }

        if (this.IsReturnOrder)
        {
            return _errorText ? checkFailed("@SYS127569") : false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSiteId</Name>
				<Source><![CDATA[
    public boolean checkSiteId()
    {
        boolean         ok = true;
        InventDim       inventDim;

        inventDim = this.inventDim();
        if (!inventDim.InventSiteId && !this.wmsJournalTable().Posted)
        {
            ok = checkFailed(strFmt("@SYS84378",fieldPName(InventDim,InventSiteId)));
        }

        if (inventDim.InventSiteId && inventDim.InventLocationId)
        {
            if (InventLocation::find(inventDim.InventLocationId).InventSiteId != inventDim.InventSiteId)
            {
                ok = checkFailed (strFmt("@SYS104861",inventDim.InventLocationId,inventDim.InventSiteId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        SalesLine   salesLine;

        ttsbegin;

        this.reread();
        super();

        if (this.ReturnItemNum && this.InventTransType == InventTransType::Sales && !this.wmsJournalTable().Posted)
        {
            salesLine = SalesLine::findInventTransId(this.InventTransId);
            if ((salesLine.DeliveryType != TradeLineDlvType::DropShip
            || !salesLine.interCompanySalesLineExist()) && !salesLine.ReturnAllowReservation)
            {
                SalesLine::changeReturnOrderType(this.InventTransId, this, true);
            }
            // delete return replacement setup
            ReturnReplaceItemRef::deleteReplaceSetup(salesLine.SalesId, salesLine.LineNum);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventParmQuarantineOrder</Name>
				<Source><![CDATA[
    public void initFromInventParmQuarantineOrder(
        InventParmQuarantineOrder   _inventParmQuarantineOrder,
        WMSJournalId                _wmsJournalId)
    {
        InventQuarantineOrder                   inventQuarantineOrder   = InventQuarantineOrder::find(_inventParmQuarantineOrder.QuarantineId);
        WMSJournalTable                         wmsJournalTable         = WMSJournalTable::find(_wmsJournalId);
        InventDim                               inventDim;

        this.initFromWMSJournalTable(wmsJournalTable);

        this.InventTransType        = InventTransType::QuarantineOrder;
        this.InventTransRefId       = inventQuarantineOrder.QuarantineId;
        this.ItemId                 = inventQuarantineOrder.ItemId;
        this.InventTransId          = inventQuarantineOrder.InventTransId;
        this.TransDate              = _inventParmQuarantineOrder.TransDate;
        this.Qty                    = _inventParmQuarantineOrder.Qty;
        this.PdsCWQty               = _inventParmQuarantineOrder.PdsCWQty;

        if (inventQuarantineOrder.hasReturnOrderReference())
        {
            this.ReturnDispositionCodeId    = inventQuarantineOrder.ReturnDispositionCodeId;
            this.ReturnItemNum              = inventQuarantineOrder.getReturnItemNum();
        }

        if (this.CheckPickingLocation)
        {
            inventDim = InventDim::find(inventQuarantineOrder.InventDimIdQuarantine);
        }
        else
        {
            inventDim = InventDim::find(inventQuarantineOrder.InventDimId);
        }
        this.InventDimId            = inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>WMSJournalTrans</c> record with values from an <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record.
    /// </param>
    /// <param name="_inventTransOrigin">
    /// An <c>InventTransOrigin</c> record that will be used to initialize the fields.
    /// </param>
    /// <remarks>
    /// This method is called when a new <c>WMSJournalTrans</c> record is created.
    /// </remarks>
    public void initFromInventTrans(
        InventTrans         _inventTrans,
        InventDim           _inventDim,
        InventTransOrigin   _inventTransOrigin  = _inventTrans.inventTransOrigin())
    {
        InventTable                         inventTable         = _inventTransOrigin.inventTable();
        InventDim                           inventDimMovement   = _inventTrans.inventDim();
        InventDim                           inventDimOrig;
        InventQuarantineOrder               inventQuarantineOrder;
        ListEnumerator                      dimFieldEnumerator  = InventDim::dimFieldListEnumerator();
        InventDimGroupFieldSetupEnumerator  fieldSetupEnumerator;
        InventDimGroupFieldSetup            inventDimGroupFieldSetup;
        FieldId                             inventDimFieldId;

        this.initFromInventTransOrigin(_inventTransOrigin);

        this.CreateQuarantineOrder = this.quarantineControl();

        if (PdsGlobal::pdsIsCWItem(inventTable.ItemId) && !this.PdsCWQty)
        {
            this.pdsCWSetQty(inventTable, _inventTrans.Qty, _inventTrans.PdsCWQty);
        }
        else
        {
            if (!this.Qty)
            {
                this.Qty = _inventTrans.Qty;
            }
        }

        if (_inventTransOrigin.ReferenceCategory == InventTransType::QuarantineOrder)
        {
            inventQuarantineOrder = InventTransOriginQuarantineOrder::inventQuarantineOrder(_inventTransOrigin.RecId);
            switch (inventQuarantineOrder.Status)
            {
                case InventQuarantineStatus::ReportedFinished:
                    inventDimMovement = InventDim::find(inventQuarantineOrder.InventDimIdQuarantine);
                    break;
            }
        }

        inventDimOrig.data(_inventDim);
        if (inventDimMovement)
        {
            while (dimFieldEnumerator.moveNext())
            {
                inventDimFieldId = dimFieldEnumerator.current();
                if (!_inventDim.(inventDimFieldId) && inventDimMovement.(inventDimFieldId))
                {
                    _inventDim.(inventDimFieldId) = inventDimMovement.(inventDimFieldId);
                }
            }
            if (_inventDim.wmsLocationId)
            {
                if (!WMSLocation::find(_inventDim.wmsLocationId, _inventDim.InventLocationId))
                {
                    _inventDim.wmsLocationId = inventDimOrig.wmsLocationId;
                    _inventDim.InventLocationId = inventDimOrig.InventLocationId;
                    _inventDim.InventSiteId = inventDimOrig.InventSiteId;
                }
            }
            if (_inventDim.InventSiteId && _inventDim.InventLocationId)
            {
                if (_inventDim.inventLocation().InventSiteId != _inventDim.InventSiteId)
                {
                    _inventDim.wmsLocationId = inventDimOrig.wmsLocationId;
                    _inventDim.InventLocationId = inventDimOrig.InventLocationId;
                    _inventDim.InventSiteId = inventDimOrig.InventSiteId;
                }
            }
        }

        fieldSetupEnumerator = InventDimGroupSetup::newInventTable(inventTable).getFieldSetupEnumerator();
        while (fieldSetupEnumerator.moveNext())
        {
            inventDimGroupFieldSetup = fieldSetupEnumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (!inventDimGroupFieldSetup.isActive() && _inventDim.(inventDimFieldId))
            {
                _inventDim.clearField(inventDimFieldId);
            }
        }

        if (!_inventDim.equal(inventDimOrig))
        {
            _inventDim = InventDim::findOrCreate(_inventDim);
            this.InventDimId = _inventDim.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>WMSJournalTrans</c> record with some values from an <c>InventTransOrigin</c> record.
    /// </summary>
    /// <param name="_inventTransOrigin">
    ///    The <c>InventTransOrigin</c> record.
    /// </param>
    /// <remarks>
    ///    Use this method when a new <c>WMSJournalTrans</c> record is created.
    /// </remarks>
    public void initFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        this.ItemId             = _inventTransOrigin.ItemId;
        this.InventTransId      = _inventTransOrigin.InventTransId;
        this.InventTransRefId   = _inventTransOrigin.ReferenceId;
        this.InventTransType    = _inventTransOrigin.ReferenceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMovement</Name>
				<Source><![CDATA[
    public void initFromMovement(
        InventMovement      _inventMovement,
        InventDim           _inventDim)
    {
        InventTable     inventTable;
        InventDim       inventDimMovement   = _inventMovement.inventdim();
        InventDim       inventDimOrig;
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         inventDimFieldId;
        SalesLine       salesLine;
        InventQty       transQty;
        PdsCWInventQty  cwQty;

        this.ItemId             = _inventMovement.itemId();
        this.InventTransRefId   = _inventMovement.transRefId();
        this.InventTransType    = _inventMovement.transType();
        this.InventTransId      = _inventMovement.transId();

        this.CreateQuarantineOrder = this.quarantineControl();

        if (!this.Qty)
        {
            inventTable = _inventMovement.inventTable();
            transQty = _inventMovement.transQty();
            cwQty    = _inventMovement.pdsCWTransQty();
            if (!transQty && this.ReturnItemNum && this.InventTransType == InventTransType::Sales)
            {
                salesLine = _inventMovement.buffer() as SalesLine;
                transQty = salesLine.calcQtyOrdered(salesLine.ExpectedRetQty) * -1;
                cwQty    = salesLine.PdsCWExpectedRetQty * -1;
            }

            if (!this.PdsCWQty)
            {
                this.pdsCWSetQty(inventTable, transQty, cwQty);
            }
            else
            {
                this.Qty = transQty;
            }
        }

        inventDimOrig.data(_inventDim);
        if (inventDimMovement)
        {
            while (enumerator.moveNext())
            {
                inventDimFieldId = enumerator.current();
                if (!_inventDim.(inventDimFieldId) && inventDimMovement.(inventDimFieldId))
                {
                    _inventDim.(inventDimFieldId) = inventDimMovement.(inventDimFieldId);
                }
            }
            if (_inventDim.wmsLocationId)
            {
                if (!WMSLocation::find(_inventDim.wmsLocationId, _inventDim.InventLocationId))
                {
                    _inventDim.wmsLocationId = inventDimOrig.wmsLocationId;
                    _inventDim.InventLocationId = inventDimOrig.InventLocationId;
                }
            }
            if (_inventDim.InventSiteId && _inventDim.InventLocationId)
            {
                if (_inventDim.inventLocation().InventSiteId != _inventDim.InventSiteId)
                {
                    _inventDim.wmsLocationId = inventDimOrig.wmsLocationId;
                    _inventDim.InventLocationId = inventDimOrig.InventLocationId;
                    _inventDim.InventSiteId = inventDimOrig.InventSiteId;
                }
            }
            if (!_inventDim.equal(inventDimOrig))
            {
                _inventDim = InventDim::findOrCreate(_inventDim);
                this.InventDimId = _inventDim.InventDimId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts value that is based on the <c>WMSJournalTable</c> table.
    /// </summary>
    /// <param name="_wmsJournalTable">
    /// <c>WMSJournalTable</c> table buffer.
    /// </param>
    /// <param name="_initFromReference">
    /// Boolean value controlling whether values should originate from a reference; optional.
    /// </param>
    /// <remarks>
    /// Inserts values from the <c>WMSJournalTable</c> table.
    /// </remarks>
    public void initFromWMSJournalTable(
        WMSJournalTable     _wmsJournalTable,
        boolean             _initFromReference  = true)
    {
        ProdTable           prodTable;
        InventMovement      inventMovement;
        InventDim           inventDim;
        InventLocation      inventLocation;
        InventItemLocation  inventItemLocation;

        this.JournalId                  = _wmsJournalTable.JournalId;
        this.VendAccount                = _wmsJournalTable.VendAccount;
        this.InventTransType            = _wmsJournalTable.InventTransType;
        this.InventTransRefId           = _wmsJournalTable.InventTransRefId;
        this.ReturnItemNum              = _wmsJournalTable.ReturnItemNum;
        this.ReturnDispositionCodeId    = _wmsJournalTable.ReturnDispositionCodeId;
        this.InventDimId                = _wmsJournalTable.InventDimId;
        this.CheckPickingLocation       = _wmsJournalTable.CheckPickingLocation;
        this.CreateQuarantineOrder      = _wmsJournalTable.CreateQuarantineOrder;

        this.setIsReturnOrder();

        if (_initFromReference && this.InventTransRefId)
        {
            switch (this.InventTransType)
            {
                case InventTransType::Production:
                    prodTable = ProdTable::find(this.InventTransRefId);
                    if (prodTable)
                    {
                        inventMovement = InventMovement::construct(prodTable);
                        this.initFromMovement(inventMovement, inventDim);
                    }
                    break;
            }
        }

        this.updateInventDimForQuarantineControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimForQuarantineControl</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void updateInventDimForQuarantineControl()
    {
        InventDim           inventDim;
        InventLocation      inventLocation;
        InventItemLocation  inventItemLocation;

        // Check if warehouse should suggest quarantine instead:
        if (this.CheckPickingLocation == NoYes::No && this.InventTransType != InventTransType::QuarantineOrder && this.quarantineControl())
        {
            inventDim = this.inventDim();
            if (inventDim.InventLocationId)
            {
                inventLocation = inventDim.inventLocation();
                if (inventLocation && inventLocation.InventLocationType == InventLocationType::Standard && inventLocation.InventLocationIdQuarantine)
                {
                    inventDim.InventLocationId = inventLocation.InventLocationIdQuarantine; // No need to copy site as Quarantine is on same site
                    if (inventDim.wmsLocationId && !WMSLocation::exist(inventDim.wmsLocationId, inventDim.InventLocationId))
                    {
                        inventDim.wmsLocationId = '';
                    }

                    inventItemLocation = InventItemLocation::findFixedWarehouse(this.ItemId, inventDim.InventDimId);
                    if (inventItemLocation.RecId && inventItemLocation.inventLocationID() == inventDim.InventLocationId && inventItemLocation.wmsLocationIdDefaultIssue)
                    {
                        inventDim.wmsLocationId = inventItemLocation.wmsLocationIdDefaultIssue;
                    }

                    this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSArrivalDetailTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the buffer based on the specified <c>WMSArrivalDetailTmp</c>.
    /// </summary>
    /// <param name = "_wmsArrivalDetailTmp">The <c>WMSArrivalDetailTmp</c> to use for the initialization.</param>
    public void initFromWMSArrivalDetailTmp(WMSArrivalDetailTmp _wmsArrivalDetailTmp)
    {
        this.ItemId                 = _wmsArrivalDetailTmp.ItemId;
        this.InventTransType        = _wmsArrivalDetailTmp.InventTransType;
        this.InventTransRefId       = _wmsArrivalDetailTmp.InventTransRefId;
        this.InventTransId          = _wmsArrivalDetailTmp.InventTransId;
        this.TransDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.ReturnItemNum          = _wmsArrivalDetailTmp.ReturnItemNum;
        this.CreateQuarantineOrder  = _wmsArrivalDetailTmp.QuarantineControlled;
        this.setIsReturnOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventTransId</c> field based on the <c>ItemId</c> field and the reference
    ///    fields.
    /// </summary>
    /// <param name="_showError">
    ///    A Boolean value that indicates whether an Infolog should be shown if multiple lines that match the
    ///    criteria are found; optional.
    /// </param>
    /// <returns>
    ///    true if multiple lines that match the criteria are found; otherwise, false.
    /// </returns>
    public NoYes initInventTransId(NoYes _showError = true)
    {
        switch (this.InventTransType)
        {
            case InventTransType::Purch:
                return this.initInventTransIdPurch(_showError);
            case InventTransType::InventTransaction:
            case InventTransType::InventLossProfit:
            case InventTransType::InventTransfer:
            case InventTransType::BOMMain:
            case InventTransType::InventCounting:
            case InventTransType::Production:
                return this.initInventTransIdInventJournal(_showError);
            case InventTransType::Sales:
                if (this.ReturnItemNum)
                {
                    return this.initInventTransIdReturn(_showError);
                }
                return this.initInventTransIdSales(_showError);
        }
        if (this.InventTransType == InventTransType::TransferOrderReceive)
        {
            return this.initInventTransIdBasedOnDimDefault(_showError);
        }
        else
        {
            return this.initInventTransIdDefault(_showError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransIdDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventTransId</c> field based on the <c>ItemId</c> field and the reference
    ///    fields.
    /// </summary>
    /// <param name="_showError">
    ///    A Boolean value that indicates whether an Infolog should be shown if multiple lines that match the
    ///    criteria are found; optional.
    /// </param>
    /// <returns>
    ///    true if multiple lines that match the criteria are found; otherwise, false.
    /// </returns>
    private NoYes initInventTransIdDefault(NoYes _showError = true)
    {
        InventTransId       inventTransId;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;

        if (this.InventTransRefId)
        {
            while select InventTransId from inventTransOrigin
                where inventTransOrigin.ReferenceCategory == this.InventTransType     &&
                      inventTransOrigin.ReferenceId       == this.InventTransRefId    &&
                      inventTransOrigin.ItemId            == this.ItemId
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId   &&
                          inventTrans.StatusIssue       == StatusIssue::None         &&
                          inventTrans.StatusReceipt     == StatusReceipt::Ordered
            {
                if (inventTransId && inventTransId != inventTransOrigin.InventTransId)
                {
                    if (_showError)
                    {
                        checkFailed("@SYS83915");
                    }
                    return NoYes::Yes;
                }
                inventTransId = inventTransOrigin.InventTransId;
            }
        }
        else
        {
            while select InventTransId from inventTransOrigin
                where inventTransOrigin.ReferenceCategory == this.InventTransType   &&
                      inventTransOrigin.ItemId            == this.ItemId
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                          inventTrans.StatusIssue       == StatusIssue::None       &&
                          inventTrans.StatusReceipt     == StatusReceipt::Ordered
            {
                if (inventTransId && inventTransId != inventTransOrigin.InventTransId)
                {
                    if (_showError)
                    {
                        checkFailed("@SYS83915");
                    }
                    return NoYes::Yes;
                }
                inventTransId = inventTransOrigin.InventTransId;
            }
        }
        if (inventTransId)
        {
            this.InventTransId = inventTransId;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransIdBasedOnDimDefault</Name>
				<Source><![CDATA[
    private NoYes initInventTransIdBasedOnDimDefault(NoYes _showError = true)
    {
        InventTransId       inventTransId;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        InventDim           inventDim;
        InventDim           inventDimCriteria;
        InventDimParm       inventDimParm;

        inventDimCriteria = this.inventDim();
        InventDimGroupSetup::newItemId(this.ItemId).inventDimParmActiveProductDimension(inventDimParm);

        if (this.InventTransRefId)
        {
            while select InventTransId from inventTransOrigin
                where inventTransOrigin.ReferenceCategory == this.InventTransType     &&
                      inventTransOrigin.ReferenceId       == this.InventTransRefId    &&
                      inventTransOrigin.ItemId            == this.ItemId
                join inventDimId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId   &&
                          inventTrans.StatusIssue       == StatusIssue::None         &&
                          inventTrans.StatusReceipt     == StatusReceipt::Ordered
                #inventDimExistsJoin(inventTrans.inventDimId,inventDim,inventDimCriteria,InventDimParm)
            {
                if (inventTransId && inventTransId != inventTransOrigin.InventTransId)
                {
                    if (_showError)
                    {
                        checkFailed("@SYS83915");
                    }
                    return NoYes::Yes;
                }
                inventTransId = inventTransOrigin.InventTransId;
            }
        }
        else
        {
            while select InventTransId from inventTransOrigin
                where inventTransOrigin.ReferenceCategory == this.InventTransType   &&
                      inventTransOrigin.ItemId            == this.ItemId
                join inventDimId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                          inventTrans.StatusIssue       == StatusIssue::None       &&
                          inventTrans.StatusReceipt     == StatusReceipt::Ordered
                #inventDimExistsJoin(inventTrans.inventDimId,inventDim,inventDimCriteria,InventDimParm)
            {
                if (inventTransId && inventTransId != inventTransOrigin.InventTransId)
                {
                    if (_showError)
                    {
                        checkFailed("@SYS83915");
                    }
                    return NoYes::Yes;
                }
                inventTransId = inventTransOrigin.InventTransId;
            }
        }
        if (inventTransId)
        {
            this.InventTransId = inventTransId;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransIdInventJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventTransId</c> field based on the <c>ItemId</c> field and the reference
    ///    fields.
    /// </summary>
    /// <param name="_showError">
    ///    A Boolean value that determines whether an Infolog should be shown if multiple lines that match the
    ///    criteria are found; optional.
    /// </param>
    /// <returns>
    ///    true if multiple lines that match the criteria are found; otherwise, false.
    /// </returns>
    private NoYes initInventTransIdInventJournal(NoYes _showError = true)
    {
        InventTransId       inventTransId;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;

        if (this.InventTransRefId)
        {
            while select InventTransId from inventTransOrigin
                where inventTransOrigin.ReferenceCategory == this.InventTransType     &&
                      inventTransOrigin.ReferenceId       == this.InventTransRefId    &&
                      inventTransOrigin.ItemId            == this.ItemId
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId   &&
                          inventTrans.StatusIssue       == StatusIssue::None         &&
                          inventTrans.StatusReceipt     == StatusReceipt::Ordered
            {
                if (inventTransId && inventTransId != inventTransOrigin.InventTransId)
                {
                    if (_showError)
                    {
                        checkFailed("@SYS51091");
                    }
                    return NoYes::Yes;
                }
                inventTransId = inventTransOrigin.InventTransId;
            }
        }
        else
        {
            while select InventTransId from inventTransOrigin
                where inventTransOrigin.ReferenceCategory == this.InventTransType   &&
                      inventTransOrigin.ItemId            == this.ItemId
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                          inventTrans.StatusIssue       == StatusIssue::None       &&
                          inventTrans.StatusReceipt     == StatusReceipt::Ordered
            {
                if (inventTransId && inventTransId != inventTransOrigin.InventTransId)
                {
                    if (_showError)
                    {
                        checkFailed("@SYS51091");
                    }
                    return NoYes::Yes;
                }
                inventTransId = inventTransOrigin.InventTransId;
            }
        }
        this.InventTransId = inventTransId;
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransIdPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventTransId</c> field based on the <c>ItemId</c> field and the reference
    ///    fields.
    /// </summary>
    /// <param name="_showError">
    ///    A Boolean value that determines whether an Infolog should be shown if multiple lines that match the
    ///    criteria are found; optional.
    /// </param>
    /// <returns>
    ///    true if multiple lines that match the criteria are found; otherwise, false.
    /// </returns>
    private NoYes initInventTransIdPurch(NoYes _showError = true)
    {
        InventTransId               inventTransId;
        PurchTable                  purchTable;
        PurchLine                   purchLine;
        InventTrans                 inventTrans;
        InventTransOriginPurchLine  inventTransOriginPurchLine;
        InventDim                   inventDim;
        InventDim                   inventDimCriteria;
        InventDimParm               inventDimParm;

        inventDimCriteria = this.inventDim();
        InventDimGroupSetup::newItemId(this.ItemId).inventDimParmActiveProductDimension(inventDimParm);

        if (this.InventTransRefId)
        {
            while select InventTransId from purchLine
                where purchLine.PurchId     == this.InventTransRefId
                  && !purchLine.IsDeleted
                  &&  purchLine.ItemId      == this.ItemId
                exists join inventTransOriginPurchLine
                    where inventTransOriginPurchLine.PurchLineDataAreaId    == purchLine.DataAreaId
                      &&  inventTransOriginPurchLine.PurchLineInventTransId == purchLine.InventTransId
                    #inventDimExistsJoin(purchLine.inventDimId,inventDim,inventDimCriteria,InventDimParm)
                    exists join inventTrans
                        where   inventTrans.InventTransOrigin   == inventTransOriginPurchLine.InventTransOrigin
                            &&  inventTrans.StatusIssue         == StatusIssue::None
                            &&  inventTrans.StatusReceipt       == StatusReceipt::Ordered
            {
                if (inventTransId)
                {
                    if (_showError)
                    {
                        checkFailed("@SYS51076");
                    }
                    return NoYes::Yes;
                }
                inventTransId = purchLine.InventTransId;
            }
        }
        else
        {
            if (this.VendAccount)
            {
                while select InventTransId from purchLine
                    where purchLine.ItemId      == this.ItemId
                       && !purchLine.IsDeleted
                    exists join inventTransOriginPurchLine
                        where inventTransOriginPurchLine.PurchLineDataAreaId    == purchLine.DataAreaId
                          &&  inventTransOriginPurchLine.PurchLineInventTransId == purchLine.InventTransId
                        #inventDimExistsJoin(purchLine.inventDimId,inventDim,inventDimCriteria,InventDimParm)
                        exists join purchTable
                            where purchTable.PurchId        == purchLine.PurchId
                              &&  purchTable.OrderAccount   == this.VendAccount
                            exists join inventTrans
                                where   inventTrans.InventTransOrigin   == inventTransOriginPurchLine.InventTransOrigin
                                    &&  inventTrans.StatusIssue         == StatusIssue::None
                                    &&  inventTrans.StatusReceipt       == StatusReceipt::Ordered
                {
                    if (inventTransId)
                    {
                        if (_showError)
                        {
                            checkFailed("@SYS51079");
                        }
                        return NoYes::Yes;
                    }
                    inventTransId = purchLine.InventTransId;
                }
            }
            else
            {
                while select InventTransId from purchLine
                    where purchLine.ItemId      == this.ItemId
                       && !purchLine.IsDeleted
                    exists join inventTransOriginPurchLine
                        where inventTransOriginPurchLine.PurchLineDataAreaId    == purchLine.DataAreaId
                          &&  inventTransOriginPurchLine.PurchLineInventTransId == purchLine.InventTransId
                        #inventDimExistsJoin(purchLine.inventDimId,inventDim,inventDimCriteria,InventDimParm)
                        exists join inventTrans
                                where   inventTrans.InventTransOrigin   == inventTransOriginPurchLine.InventTransOrigin
                                &&  inventTrans.StatusIssue             == StatusIssue::None
                                &&  inventTrans.StatusReceipt           == StatusReceipt::Ordered
                {
                    if (inventTransId)
                    {
                        if (_showError)
                        {
                            checkFailed("@SYS51076");
                        }
                        return NoYes::Yes;
                    }
                    inventTransId = purchLine.InventTransId;
                }
            }
        }
        if (!inventTransId)
        {
            if (_showError)
            {
                checkFailed("@SYS51093");
            }
        }
        else
        {
            this.InventTransId = inventTransId;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransIdReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventTransId</c> field based on the <c>ItemId</c> field and the reference
    ///    fields.
    /// </summary>
    /// <param name="_showError">
    ///    A Boolean value that indicates whether an Infolog should be shown if multiple lines that match the
    ///    criteria are found; optional.
    /// </param>
    /// <returns>
    ///    true if multiple lines that match the criteria are found; otherwise, false.
    /// </returns>
    private NoYes initInventTransIdReturn(NoYes _showError = true)
    {
        InventTransId   inventTransId;
        SalesLine       salesLine;
        InventDim       inventDim;
        InventDim       inventDimCriteria;
        InventDimParm   inventDimParm;

        inventDimCriteria = this.inventDim();
        InventDimGroupSetup::newItemId(this.ItemId).inventDimParmActiveProductDimension(inventDimParm);

        if (this.InventTransRefId && this.ReturnItemNum)
        {
            while select InventTransId from salesLine
                where salesLine.SalesId      == this.InventTransRefId       &&
                      salesLine.ItemId       == this.ItemId                 &&
                      salesLine.ReturnStatus == ReturnStatusLine::Awaiting
                #InventDimExistsJoin(salesLine.inventDimId,inventDim,inventDimCriteria,InventDimParm)
            {
                if (inventTransId)
                {
                    if (_showError)
                    {
                        checkFailed("@SYS51076");
                    }
                    return NoYes::Yes;
                }
                inventTransId = salesLine.InventTransId;
            }
        }

        if (!inventTransId)
        {
            if (_showError)
            {
                checkFailed("@SYS51093");
            }
        }
        else
        {
            this.InventTransId = inventTransId;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>InventTransId</c> field based on the <c>ItemId</c> field and the reference
    ///    fields.
    /// </summary>
    /// <param name="_showError">
    ///    A Boolean value that determines whether an Infolog should be shown if multiple lines that match the
    ///    criteria are found. Otherwise; false; optional.
    /// </param>
    /// <returns>
    ///    true if multiple lines that match the criteria are found; otherwise, false.
    /// </returns>
    private NoYes initInventTransIdSales(NoYes _showError = true)
    {
        InventTransId               inventTransId;
        SalesTable                  salesTable;
        SalesLine                   salesLine;
        InventTrans                 inventTrans;
        InventTransOriginSalesLine  inventTransOriginSalesLine;
        InventDim                   inventDim;
        InventDim                   inventDimCriteria;
        InventDimParm               inventDimParm;

        inventDimCriteria = this.inventDim();
        InventDimGroupSetup::newItemId(this.ItemId).inventDimParmActiveProductDimension(inventDimParm);

        if (this.InventTransRefId)
        {
            while select InventTransId from salesLine
                where salesLine.SalesId     == this.InventTransRefId
                  &&  salesLine.ItemId      == this.ItemId
                exists join inventTransOriginSalesLine
                where inventTransOriginSalesLine.SalesLineDataAreaId    == salesLine.DataAreaId
                  &&  inventTransOriginSalesLine.SalesLineInventTransId == salesLine.InventTransId
                #InventDimExistsJoin(salesLine.inventDimId,inventDim,inventDimCriteria,InventDimParm)
                exists join inventTrans
                    where   inventTrans.InventTransOrigin   == inventTransOriginSalesLine.InventTransOrigin
                        &&  inventTrans.StatusIssue         == StatusIssue::None
                        &&  inventTrans.StatusReceipt       == StatusReceipt::Ordered
            {
                if (inventTransId)
                {
                    if (_showError)
                    {
                        checkFailed("@SYS51076");
                    }
                    return NoYes::Yes;
                }
                inventTransId = salesLine.InventTransId;
            }
        }
        else
        {
            if (this.VendAccount)
            {
                while select InventTransId from salesLine
                    where salesLine.ItemId      == this.ItemId
                    exists join inventTransOriginSalesLine
                    where inventTransOriginSalesLine.SalesLineDataAreaId    == salesLine.DataAreaId
                      &&  inventTransOriginSalesLine.SalesLineInventTransId == salesLine.InventTransId
                    #InventDimExistsJoin(salesLine.inventDimId,inventDim,inventDimCriteria,InventDimParm)
                    exists join salesTable
                        where salesTable.PurchId == salesLine.SalesId
                          &&  salesTable.CustAccount == this.VendAccount
                    exists join inventTrans
                        where   inventTrans.InventTransOrigin   == inventTransOriginSalesLine.InventTransOrigin
                            &&  inventTrans.StatusIssue      == StatusIssue::None
                            &&  inventTrans.StatusReceipt    == StatusReceipt::Ordered
                {
                    if (inventTransId)
                    {
                        if (_showError)
                        {
                            checkFailed("@SYS51079");
                        }
                        return NoYes::Yes;
                    }
                    inventTransId = salesLine.InventTransId;
                }
            }
            else
            {
                while select InventTransId from salesLine
                    where salesLine.ItemId      == this.ItemId
                    exists join inventTransOriginSalesLine
                    where inventTransOriginSalesLine.SalesLineDataAreaId    == salesLine.DataAreaId
                      &&  inventTransOriginSalesLine.SalesLineInventTransId == salesLine.InventTransId
                    #InventDimExistsJoin(salesLine.inventDimId,inventDim,inventDimCriteria,InventDimParm)
                    exists join inventTrans
                        where   inventTrans.InventTransOrigin   == inventTransOriginSalesLine.InventTransOrigin
                            &&  inventTrans.StatusIssue      == StatusIssue::None
                            &&  inventTrans.StatusReceipt    == StatusReceipt::Ordered
                {
                    if (inventTransId)
                    {
                        if (_showError)
                        {
                            checkFailed("@SYS51076");
                        }
                        return NoYes::Yes;
                    }
                    inventTransId = salesLine.InventTransId;
                }
            }
        }
        if (!inventTransId)
        {
            if (_showError)
            {
                checkFailed("@SYS51093");
            }
        }
        else
        {
            this.InventTransId = inventTransId;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default values.
    /// </summary>
    /// <remarks>
    /// Applies default values.
    /// </remarks>
    public void initValue()
    {
        this.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.setIsReturnOrder();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (! this.LineNum)
        {
            this.LineNum = WMSJournalTrans::lastLineNum(this.JournalId) + 1;
        }

        if (this.ReturnItemNum && this.InventTransType == InventTransType::Sales)
        {
            boolean usingContext = false;

            InventDimParm inventDimParmFinancial;
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);
            inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParmFinancial);
            usingContext = inventDimParmFinancial.InventBatchIdFlag == NoYes::Yes;

            if (usingContext)
            {
                using (WMSJournalTransInventDimContext context = WMSJournalTransInventDimContext::construct(this.inventDim()))
                {
                    this.returnCreateUpdateInventTrans();
                }
            }
            else
            {
                this.returnCreateUpdateInventTrans();
            }
        }

        this.setInventOwner();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimProductDimensions</Name>
				<Source><![CDATA[
    public InventDim inventDimProductDimensions()
    {
        return InventTable::find(this.ItemId).inventDimProductDimensions(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>InventMovement</c> object that is based on either an <c>InventTrans</c> or
    /// <c>SalesLine</c> object.
    /// </summary>
    /// <param name="_inventTransId">
    /// An <c>InventTransId</c> value; optional.
    /// </param>
    /// <param name="_requireOrderedInventTrans">
    /// A Boolean value that indicates whether a status receipt must be ordered; optional.
    /// </param>
    /// <returns>
    /// An <c>InventMovement</c> object.
    /// </returns>
    InventMovement inventMovement(
        InventTransId       _inventTransId              = this.InventTransId,
        boolean             _requireOrderedInventTrans  = true)
    {
        InventMovement      inventMovement;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin   = InventTransOrigin::findByInventTransId(_inventTransId);
        SalesLine           salesLine;

        if (_requireOrderedInventTrans)
        {
            select firstonly inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                  &&  inventTrans.StatusReceipt     == StatusReceipt::Ordered;
        }
        else
        {
            select firstonly inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                  &&  inventTrans.Qty                > 0  //Receipt
                  && !inventTrans.DateFinancial;
        }

        if (inventTrans.RecId)
        {
            inventMovement = inventTrans.inventMovement();
        }
        else if (this.ReturnItemNum && this.InventTransType == InventTransType::Sales)
        {
            salesLine = SalesLine::findInventTransId(_inventTransId, true);
            if (salesLine.RecId)
            {
                inventMovement = InventMovement::construct(salesLine);
            }
        }

        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdLookup</Name>
				<Source><![CDATA[
    public void inventTransIdLookup(
        Object      _lookupCtrl,
        Object      _callerForm     = null)
    {
        WMSInventTransLookup    wmsInventTransLookup;
        Query                   query = new Query();
        QueryBuildDataSource    qbd_InventTransOrigin;
        QueryBuildDataSource    qbd_InventTrans;
        QueryBuildDataSource    qbd_PurchTable;
        QueryBuildDataSource    qbd_InventDim;
        QueryBuildRange         queryBuildRange;

        #define.Or(",")

        if (this.IsReturnOrder)
        {
            this.returnInventTransIdLookup(_lookupCtrl, _callerForm);
        }
        else
        {
            qbd_InventTransOrigin = query.addDataSource(tableNum(InventTransOrigin));

            qbd_InventTrans = qbd_InventTransOrigin.addDataSource(tableNum(InventTrans));
            qbd_InventTrans.joinMode(JoinMode::InnerJoin);
            qbd_InventTrans.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin));

            qbd_InventDim = qbd_InventTrans.addDataSource(tableNum(InventDim));
            qbd_InventDim.joinMode(JoinMode::InnerJoin);
            qbd_InventDim.relations(true);

            if (this.ItemId)
            {
                queryBuildRange = qbd_InventTransOrigin.addRange(fieldNum(InventTransOrigin, ItemId));
                queryBuildRange.value(queryValue(this.ItemId));
            }

            queryBuildRange = qbd_InventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
            queryBuildRange.value(enum2Value(StatusReceipt::Ordered));

             queryBuildRange = qbd_InventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceCategory));

            if (#PmfEnabled &&
                this.InventTransType == InventTransType::Production)
            {
                queryBuildRange.value(
                        queryValue(this.InventTransType)
                        + #Or
                        + queryValue(InventTransType::PmfProdCoBy));
            }
            else
            {
                queryBuildRange.value(queryValue(this.InventTransType));
            }

            if (this.InventTransRefId)
            {
                queryBuildRange = qbd_InventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceId));
                queryBuildRange.value(queryValue(this.InventTransRefId));
            }
            else
            {
                if (this.VendAccount && this.InventTransType == InventTransType::Purch)
                {
                    qbd_PurchTable = qbd_InventTransOrigin.addDataSource(tableNum(PurchTable));
                    qbd_PurchTable.joinMode(JoinMode::ExistsJoin);
                    qbd_PurchTable.addLink(fieldNum(InventTransOrigin, ReferenceId), fieldNum(PurchTable, PurchId));
                    queryBuildRange = qbd_PurchTable.addRange(fieldNum(PurchTable, OrderAccount));
                    queryBuildRange.value(queryValue(this.VendAccount));
                }
            }

            wmsInventTransLookup = new WMSInventTransLookup(
                    _lookupCtrl, query, formStr(WMSInventTransLookup));
            wmsInventTransLookup.parmCallerForm(_callerForm);
            wmsInventTransLookup.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewItem</Name>
				<Source><![CDATA[
    public boolean isNewItem()
    {
        return (this.InventTransType == InventTransType::QuarantineOrder) ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    public NoYes isPosted()
    {
        return WMSJournalTable::find(this.JournalId).Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdLookup</Name>
				<Source><![CDATA[
    public void itemIdLookup(Object _lookupCtrl)
    {
        InventLookupItemId      inventLookupItemId;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    queryBuildDataSource1;
        QueryBuildDataSource    queryBuildDataSourceInventTransOriginSalesLine;
        QueryBuildDataSource    queryBuildDataSourceInventTransOriginProdTable;
        QueryBuildDataSource    queryBuildDataSourceInventTransOriginPurchLine;
        QueryBuildDataSource    queryBuildDataSourceInventTransOriginJournalTransReceipt;
        QueryBuildDataSource    queryBuildDataSourceInventTransOriginJournalTrans;
        QueryBuildDataSource    queryBuildDataSourceInventTransOriginTransferReceive;
        QueryBuildDataSource    queryBuildDataSourceInventTrans;
        QueryBuildRange         queryBuildRange;
        SysDictTable            dictTable;
        #Define.lessThanZero('<0')

        queryBuildDataSource = query.addDataSource(tableNum(InventItemIdLookupSimpleView));
        
        if (FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackFeature::instance()) && EcoResProductParameters::find().UseFallbackTranslation)
        {
            queryBuildDataSource.addRange(fieldNum(InventItemIdLookupSimpleView, LanguageId)).value(EcoResProductParametersFallbackLanguage::getSelectedFallbackLanguage());
        }

        InventInventoriedPolicy::addInventoriedRangeToInventTable(queryBuildDataSource);

        switch (this.InventTransType)
        {
            case InventTransType::Sales:
                queryBuildDataSource1 = queryBuildDataSource.addDataSource(tableNum(SalesLine));
                queryBuildDataSource1.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSource1.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(SalesLine, ItemId));

                if (this.ReturnItemNum)
                {
                    queryBuildRange = queryBuildDataSource1.addRange(fieldNum(SalesLine, SalesId));
                    queryBuildRange.value(SysQuery::value(SalesTable::findReturnItemNum(this.ReturnItemNum).SalesId));
                    queryBuildRange = queryBuildDataSource1.addRange(fieldNum(SalesLine, ReturnStatus));
                    queryBuildRange.value(SysQuery::valueNot(ReturnStatusLine::None));
                    queryBuildRange = queryBuildDataSource1.addRange(fieldNum(SalesLine, ExpectedRetQty));
                    queryBuildRange.value(SysQuery::value(#lessThanZero));
                }
                else
                {
                    if (this.InventTransRefId)
                    {
                        queryBuildRange = queryBuildDataSource1.addRange(fieldNum(SalesLine, SalesId));
                        queryBuildRange.value(this.InventTransRefId);
                    }

                    queryBuildDataSourceInventTransOriginSalesLine = queryBuildDataSource1.addDataSource(tableNum(InventTransOriginSalesLine));
                    queryBuildDataSourceInventTransOriginSalesLine.joinMode(JoinMode::ExistsJoin);
                    queryBuildDataSourceInventTransOriginSalesLine.addLink(fieldNum(SalesLine, DataAreaId),     fieldNum(InventTransOriginSalesLine, SalesLineDataAreaId));
                    queryBuildDataSourceInventTransOriginSalesLine.addLink(fieldNum(SalesLine, InventTransId),  fieldNum(InventTransOriginSalesLine, SalesLineInventTransId));

                    queryBuildDataSourceInventTrans = queryBuildDataSourceInventTransOriginSalesLine.addDataSource(tableNum(InventTrans));
                    queryBuildDataSourceInventTrans.joinMode(JoinMode::ExistsJoin);
                    queryBuildDataSourceInventTrans.addLink(fieldNum(InventTransOriginSalesLine, InventTransOrigin),  fieldNum(InventTrans, InventTransOrigin));

                    queryBuildRange = queryBuildDataSourceInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
                    queryBuildRange.value(enum2Value(StatusReceipt::Ordered));
                }
                break;
            case InventTransType::Production:
                dictTable = new SysDictTable(tableNum(ProdTable));
                if (isConfigurationkeyEnabled(dictTable.configurationKeyId()))
                {
                    queryBuildDataSource1 = queryBuildDataSource.addDataSource(tableNum(ProdTable));
                    queryBuildDataSource1.joinMode(JoinMode::ExistsJoin);
                    queryBuildDataSource1.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(ProdTable, ItemId));

                    queryBuildDataSourceInventTransOriginProdTable = queryBuildDataSource1.addDataSource(tableNum(InventTransOriginProdTable));
                    queryBuildDataSourceInventTransOriginProdTable.joinMode(JoinMode::ExistsJoin);
                    queryBuildDataSourceInventTransOriginProdTable.addLink(fieldNum(ProdTable, DataAreaId),     fieldNum(InventTransOriginProdTable, ProdOrderDataAreaId));
                    queryBuildDataSourceInventTransOriginProdTable.addLink(fieldNum(ProdTable, ProdId),         fieldNum(InventTransOriginProdTable, ProdOrderId));

                    queryBuildDataSourceInventTrans = queryBuildDataSourceInventTransOriginProdTable.addDataSource(tableNum(InventTrans));
                    queryBuildDataSourceInventTrans.joinMode(JoinMode::ExistsJoin);
                    queryBuildDataSourceInventTrans.addLink(fieldNum(InventTransOriginProdTable, InventTransOrigin),  fieldNum(InventTrans, InventTransOrigin));

                    queryBuildRange = queryBuildDataSourceInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
                    queryBuildRange.value(enum2Value(StatusReceipt::Ordered));
                }
                break;
            case InventTransType::Purch:
                queryBuildDataSource1 = queryBuildDataSource.addDataSource(tableNum(PurchLine));
                queryBuildDataSource1.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSource1.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(PurchLine, ItemId));
                if (this.InventTransRefId)
                {
                    queryBuildRange = queryBuildDataSource1.addRange(fieldNum(PurchLine, PurchId));
                    queryBuildRange.value(this.InventTransRefId);
                }
                else if (this.VendAccount)
                {
                    queryBuildRange = queryBuildDataSource1.addRange(fieldNum(PurchLine, VendAccount));
                    queryBuildRange.value(this.VendAccount);
                }

                queryBuildDataSourceInventTransOriginPurchLine = queryBuildDataSource1.addDataSource(tableNum(InventTransOriginPurchLine));
                queryBuildDataSourceInventTransOriginPurchLine.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceInventTransOriginPurchLine.addLink(fieldNum(PurchLine, DataAreaId),     fieldNum(InventTransOriginPurchLine, PurchLineDataAreaId));
                queryBuildDataSourceInventTransOriginPurchLine.addLink(fieldNum(PurchLine, InventTransId),  fieldNum(InventTransOriginPurchLine, PurchLineInventTransId));

                queryBuildDataSourceInventTrans = queryBuildDataSourceInventTransOriginPurchLine.addDataSource(tableNum(InventTrans));
                queryBuildDataSourceInventTrans.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceInventTrans.addLink(fieldNum(InventTransOriginPurchLine, InventTransOrigin),  fieldNum(InventTrans, InventTransOrigin));

                queryBuildRange = queryBuildDataSourceInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
                queryBuildRange.value(enum2Value(StatusReceipt::Ordered));
                break;
            case InventTransType::Project:
            case InventTransType::InventTransfer:
                queryBuildDataSource1 = queryBuildDataSource.addDataSource(tableNum(InventJournalTrans));
                queryBuildDataSource1.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSource1.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(InventJournalTrans, ItemId));
                if (this.InventTransRefId)
                {
                    queryBuildRange = queryBuildDataSource1.addRange(fieldNum(InventJournalTrans, JournalId));
                    queryBuildRange.value(this.InventTransRefId);
                }

                queryBuildDataSourceInventTransOriginJournalTransReceipt = queryBuildDataSource1.addDataSource(tableNum(InventTransOriginJournalTransReceipt));
                queryBuildDataSourceInventTransOriginJournalTransReceipt.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceInventTransOriginJournalTransReceipt.addLink(fieldNum(InventJournalTrans, DataAreaId),  fieldNum(InventTransOriginJournalTransReceipt, JournalTransferReceiptDataAreaId));
                queryBuildDataSourceInventTransOriginJournalTransReceipt.addLink(fieldNum(InventJournalTrans, JournalId),   fieldNum(InventTransOriginJournalTransReceipt, JournalTransferReceiptId));
                queryBuildDataSourceInventTransOriginJournalTransReceipt.addLink(fieldNum(InventJournalTrans, LineNum),     fieldNum(InventTransOriginJournalTransReceipt, JournalTransferReceiptLineNum));

                queryBuildDataSourceInventTrans = queryBuildDataSourceInventTransOriginJournalTransReceipt.addDataSource(tableNum(InventTrans));
                queryBuildDataSourceInventTrans.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceInventTrans.addLink(fieldNum(InventTransOriginJournalTransReceipt, InventTransOrigin),  fieldNum(InventTrans, InventTransOrigin));

                queryBuildRange = queryBuildDataSourceInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
                queryBuildRange.value(enum2Value(StatusReceipt::Ordered));
                break;

            case InventTransType::InventCounting:
            case InventTransType::InventTransaction:
            case InventTransType::InventLossProfit:
                queryBuildDataSource1 = queryBuildDataSource.addDataSource(tableNum(InventJournalTrans));
                queryBuildDataSource1.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSource1.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(InventJournalTrans, ItemId));
                if (this.InventTransRefId)
                {
                    queryBuildRange = queryBuildDataSource1.addRange(fieldNum(InventJournalTrans, JournalId));
                    queryBuildRange.value(this.InventTransRefId);
                }

                queryBuildDataSourceInventTransOriginJournalTrans = queryBuildDataSource1.addDataSource(tableNum(InventTransOriginJournalTrans));
                queryBuildDataSourceInventTransOriginJournalTrans.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceInventTransOriginJournalTrans.addLink(fieldNum(InventJournalTrans, DataAreaId),  fieldNum(InventTransOriginJournalTrans, InventJournalDataAreaId));
                queryBuildDataSourceInventTransOriginJournalTrans.addLink(fieldNum(InventJournalTrans, JournalId),   fieldNum(InventTransOriginJournalTrans, InventJournalId));
                queryBuildDataSourceInventTransOriginJournalTrans.addLink(fieldNum(InventJournalTrans, LineNum),     fieldNum(InventTransOriginJournalTrans, InventJournalLineNum));

                queryBuildDataSourceInventTrans = queryBuildDataSourceInventTransOriginJournalTrans.addDataSource(tableNum(InventTrans));
                queryBuildDataSourceInventTrans.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceInventTrans.addLink(fieldNum(InventTransOriginJournalTrans, InventTransOrigin),  fieldNum(InventTrans, InventTransOrigin));

                queryBuildRange = queryBuildDataSourceInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
                queryBuildRange.value(enum2Value(StatusReceipt::Ordered));
                break;

            case InventTransType::TransferOrderShip:
            case InventTransType::TransferOrderReceive:
                queryBuildDataSource1 = queryBuildDataSource.addDataSource(tableNum(InventTransferLine));
                queryBuildDataSource1.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSource1.addLink(fieldNum(InventItemIdLookupSimpleView, ItemId), fieldNum(InventTransferLine, ItemId));
                if (this.InventTransRefId)
                {
                    queryBuildRange = queryBuildDataSource1.addRange(fieldNum(InventTransferLine, TransferId));
                    queryBuildRange.value(this.InventTransRefId);
                }

                queryBuildDataSourceInventTransOriginTransferReceive = queryBuildDataSource1.addDataSource(tableNum(InventTransOriginTransferReceive));
                queryBuildDataSourceInventTransOriginTransferReceive.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceInventTransOriginTransferReceive.addLink(fieldNum(InventTransferLine, DataAreaId),  fieldNum(InventTransOriginTransferReceive, TransferReceiveDataAreaId));
                queryBuildDataSourceInventTransOriginTransferReceive.addLink(fieldNum(InventTransferLine, TransferId),  fieldNum(InventTransOriginTransferReceive, TransferReceiveId));
                queryBuildDataSourceInventTransOriginTransferReceive.addLink(fieldNum(InventTransferLine, LineNum),     fieldNum(InventTransOriginTransferReceive, TransferReceiveLineNum));

                queryBuildDataSourceInventTrans = queryBuildDataSourceInventTransOriginTransferReceive.addDataSource(tableNum(InventTrans));
                queryBuildDataSourceInventTrans.joinMode(JoinMode::ExistsJoin);
                queryBuildDataSourceInventTrans.addLink(fieldNum(InventTransOriginTransferReceive, InventTransOrigin),  fieldNum(InventTrans, InventTransOrigin));

                queryBuildRange = queryBuildDataSourceInventTrans.addRange(fieldNum(InventTrans, StatusReceipt));
                queryBuildRange.value(enum2Value(StatusReceipt::Ordered));
                break;
        }

        inventLookupItemId = InventLookupItemId::newLookupCtrlQuery(_lookupCtrl, query);
        inventLookupItemId.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventTransRefId</Name>
				<Source><![CDATA[
    public boolean lookupInventTransRefId(FormStringControl _lookupCtrl)
    {
        switch (this.InventTransType)
        {
            case InventTransType::Production:
                ProdTable::wmsRegisterProdLookup(_lookupCtrl);
                return true;
            case InventTransType::Purch:
                this.purchIdLookup(_lookupCtrl);
                return true;
            case InventTransType::ConsignmentReplenishmentOrder:
                ConsignmentReplenishmentOrderHeader::lookupReplenishmentOrderForSpecificVendor(_lookupCtrl);
                return true;
            case InventTransType::Sales:
                this.salesIdLookup(_lookupCtrl);
                return true;
            case InventTransType::QuarantineOrder:
                this.lookupQuarantineOrder(_lookupCtrl);
                return true;
            case InventTransType::TransferOrderReceive:
                InventTransferTable::lookupWMSReception(_lookupCtrl);
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupQuarantineOrder</Name>
				<Source><![CDATA[
    public void lookupQuarantineOrder(FormStringControl _lookupCtrl)
    {
        InventQuarantineOrder::lookupWMSReception(_lookupCtrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReturnItemNum</Name>
				<Source><![CDATA[
    public void lookupReturnItemNum(FormStringControl _formControl)
    {
        if (this.InventTransType == InventTransType::Sales)
        {
            SalesTable::lookupWMSReceptionRMA(_formControl,  this.VendAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum(WMSJournalTrans, ReturnItemNum),
                [fieldnum(WMSJournalTrans, InventTransRefId)]
            ],
            [fieldnum(WMSJournalTrans, InventTransRefId),
                [fieldnum(WMSJournalTrans, ReturnItemNum)]
            ],
            [fieldnum(WMSJournalTrans, VendAccount),
                [fieldnum(WMSJournalTrans, ReturnItemNum),
                 fieldnum(WMSJournalTrans, InventTransRefId)]
            ],
            [fieldnum(WMSJournalTrans, CreateQuarantineOrder),
                [fieldnum(WMSJournalTrans, InventTransType)]
            ],
            [fieldnum(WMSJournalTrans, IsReturnOrder),
                [fieldnum(WMSJournalTrans, ReturnItemNum)]
            ],
            [fieldnum(WMSJournalTrans, Qty),
                [fieldnum(WMSJournalTrans, PdsCWQty)]
            ]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(WMSJournalTrans, VendAccount):
                if (this.ReturnItemNum)
                {
                    SalesTable salesTable  = SalesTable::findReturnItemNum(this.ReturnItemNum);
                    this.VendAccount       = salesTable.CustAccount;
                }
                else if (this.inventTransRefId && this.InventTransType == InventTransType::Sales)
                {
                    SalesTable salesTable  = SalesTable::find(this.InventTransRefId);
                    this.VendAccount       = salesTable.CustAccount;
                }
                break;

            case fieldnum(WMSJournalTrans, InventTransRefId):
                if (this.ReturnItemNum)
                {
                    SalesTable salesTable  = SalesTable::findReturnItemNum(this.ReturnItemNum);
                    this.InventTransRefId  = salesTable.SalesId;
                }
                break;

            case fieldnum(WMSJournalTrans, ReturnItemNum):
                if (this.inventTransRefId && this.InventTransType == InventTransType::Sales)
                {
                    SalesTable salesTable  = SalesTable::find(this.InventTransRefId);
                    this.ReturnItemNum     = salesTable.ReturnItemNum;
                }
                break;

            case fieldnum(WMSJournalTrans, isReturnOrder):
                if (this.ReturnItemNum)
                {
                    this.isReturnOrder = NoYes::Yes;
                }
                else
                {
                    this.isReturnOrder = NoYes::No;
                }
                break;

            case fieldnum(WMSJournalTrans, CreateQuarantineOrder):
                if (!InventTrans::canTransTypeDoQuarantineMgmt(this.InventTransType))
                {
                    this.CreateQuarantineOrder = NoYes::No;
                }
                break;

            case fieldnum(WMSJournalTrans, Qty):
                this.pdsCWQtyConversion();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WMSJournalTrans, ReturnItemNum) :
                this.ReturnDispositionCodeId = '';
                break;

            case fieldNum(WMSJournalTrans, VendAccount) :
                if (this.InventTransType == InventTransType::Sales)
                {
                    this.InventTransRefId        = '';
                    this.ReturnItemNum           = '';
                    this.ReturnDispositionCodeId = '';
                    this.IsReturnOrder           = NoYes::No;
                    this.InventTransId           = '';
                    this.Qty                     = 0;
                }
                break;

            case fieldNum(WMSJournalTrans, InventTransType) :
                this.InventTransRefId        = '';
                this.ReturnItemNum           = '';
                this.IsReturnOrder           = NoYes::No;
                this.VendAccount             = '';
                this.ReturnDispositionCodeId = '';
                this.Qty                     = 0;
                break;

            case fieldNum(WMSJournalTrans, InventTransId) :
                if (this.InventTransType == InventTransType::Sales)
                {
                    this.Qty = 0;
                    this.PdsCWQty = 0;
                }
                break;

            case fieldNum(WMSJournalTrans, CreateQuarantineOrder):
                this.updateWarehouseForQuarantine();
                break;

            case fieldNum(WMSJournalTrans, CheckPickingLocation):
                this.updateWarehouseForQuarantine();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyConversion</Name>
				<Source><![CDATA[
    private void pdsCWQtyConversion()
    {
        if (!this.Qty && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.Qty = PdsCatchWeight::inventQty(
                                        this.ItemId,
                                        this.PdsCWQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetQty</Name>
				<Source><![CDATA[
    public void pdsCWSetQty(
        InventTable     _inventTable,
        InventQty       _qty,
        PdsCWInventQty  _cwQty)
    {
        this.Qty = _qty;
        this.PdsCWQty = _cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the catch weight unit of the item related to the warehouse transaction.
    /// </summary>
    /// <returns>
    ///     The ID of the catch weight unit.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSplitByCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction should be split by catch weight quantity.
    /// </summary>
    /// <returns>
    /// true if this transaction's catch weight item is serial number controlled; otherwise false .
    /// </returns>
    public boolean pdsSplitByCWQty()
    {
        InventTable                     inventTable;
        EcoResTrackingDimGroupSetup     ecoResTrackingDimGroupSetup;
        InventDimGroupFieldSetup        inventDimGroupFieldSetup;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return false;
        }

        inventTable = InventTable::find(this.ItemId);
        ecoResTrackingDimGroupSetup = EcoResTrackingDimGroupSetup::newDimensionGroup(inventTable.trackingDimensionGroup());
        inventDimGroupFieldSetup = ecoResTrackingDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventSerialId));

        return inventDimGroupFieldSetup.isActive()                      == NoYes::Yes
            && inventDimGroupFieldSetup.isSerialNumberControlEnabled()  == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchIdLookup</Name>
				<Source><![CDATA[
    public void purchIdLookup(FormStringControl _lookupCtrl)
    {
        PurchTable::lookupWMSReception(_lookupCtrl, this.VendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>quarantineControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the quarantine control option.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that enables setting a new quarantine control value; optional.
    /// </param>
    /// <returns>
    ///    A quarantine control value which is <c>Yes</c> or <c>No</c>.
    /// </returns>
    /// <remarks>
    ///    The quarantine control option is set during the inventory model group set up. But, it can be
    ///    overruled in the case where a new value is not in conflict with the mandatory quarantine control
    ///    set on the inventory model group.
    /// </remarks>
    public InventQuarantineControl quarantineControl(boolean _set = true)
    {
        InventModelGroupId      modelGroupId    = InventTable::find(this.ItemId).modelGroupId();
        InventQuarantineControl ret;
        InventMovement          inventMovement;

        ret = InventModelGroup::find(modelGroupId).QuarantineControl;

        if (ret)
        {
            if (!this.InventTransId)
            {
                this.initInventTransId(false);
            }
            if (this.InventTransId)
            {
                inventMovement = this.inventMovement(this.InventTransId, true);
                if (inventMovement && !inventMovement.mustBeQuarantineControlled())
                {
                    ret = NoYes::No;
                }
            }
        }

        if (_set)
        {
            ret = ret == NoYes::No ?  this.CreateQuarantineOrder : ret;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnCreateUpdateInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensures return order related inventory transactions are kept in sync with <c>WMSJournalTrans</c>.
    /// </summary>
    /// <returns>
    ///    true if anything has changed; otherwise, false.
    /// </returns>
    boolean returnCreateUpdateInventTrans()
    {
        boolean ret;

        if (!InventTrans::findTransId(this.InventTransId).RecId && this.InventTransId != this.orig().InventTransId)
        {
            if (this.orig().InventTransId)
            {
               //The purpose of this call is to roll back changes made to SalesLine (and subsequently InventTrans),
               //in case the user changes an already chosen lot-id.
                SalesLine::changeReturnOrderType(this.orig().InventTransId,this.orig(),true);
            }

            SalesLine::changeReturnOrderType(this.InventTransId);
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnInventTransIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides <c>SalesLine </c>based <c>inventTransId</c> lookup functionality.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///    The form control object.
    /// </param>
    /// <param name="_callerForm">
    ///    The calling form object; optional.
    /// </param>
    public void returnInventTransIdLookup(Object _lookupCtrl, Object _callerForm = null)
    {
        InventLookup            inventLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    queryBuildDataSource1;
        QueryBuildRange         queryBuildRange;
        #Define.lessThanZero('<0')

        if (!this.ItemId)
        {               //"No ItemId is selected"
            checkFailed("@SYS115606");
        }
        else if (this.InventTransType == InventTransType::Sales)
        {
            queryBuildDataSource = query.addDataSource(tableNum(SalesLine));

            queryBuildDataSource1 = queryBuildDataSource.addDataSource(tableNum(InventDim));
            queryBuildDataSource1.joinMode(JoinMode::InnerJoin);
            queryBuildDataSource1.relations(true);

            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesLine, ItemId));
            queryBuildRange.value(SysQuery::value(this.ItemId));

            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesLine, SalesId));
            queryBuildRange.value(SysQuery::value(SalesTable::findReturnItemNum(this.ReturnItemNum).SalesId));

            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesLine, ExpectedRetQty));
            queryBuildRange.value(SysQuery::value(#lessThanZero));

            queryBuildRange = queryBuildDataSource.addRange(fieldNum(SalesLine, ReturnStatus));
            queryBuildRange.value(SysQuery::value(ReturnStatusLine::Awaiting));

            inventLookup = new InventLookup(_lookupCtrl, query, formStr(ReturnInventTransIdLookup));
            inventLookup.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesIdLookup</Name>
				<Source><![CDATA[
    public void salesIdLookup(FormStringControl _lookupCtrl)
    {
        SalesTable::lookupWMSReception(_lookupCtrl, this.VendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>isReturnOrder</c> table field.
    /// </summary>
    /// <remarks>
    ///    The <c>isReturnOrder</c> field is used to control the conditional relationship of the
    ///    <c>SalesLine</c> table and the <c>InventTrans</c> table.
    /// </remarks>
    public void setIsReturnOrder()
    {
        this.IsReturnOrder  = this.ReturnItemNum ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQty</Name>
				<Source><![CDATA[
    public void setQty(
        InventTable     _inventTable,
        InventQty       _qty)
    {
        this.Qty = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean reread;

        ttsbegin;

        this.updateReturnDispositionCodeReferences();

        if (this.ReturnItemNum && this.InventTransType == InventTransType::Sales)
        {
            reread = this.returnCreateUpdateInventTrans();
        }

        this.setInventOwner();

        super();
        ttscommit;

        if (reread && FormDataUtil::isFormDataSource(this))
        {
            this.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnDispositionCodeReferences</Name>
				<Source><![CDATA[
    private void updateReturnDispositionCodeReferences()
    {
        if (this.ReturnDispositionCodeId != this.orig().ReturnDispositionCodeId)
        {
            if (ReturnDispositionCode::find(this.orig().ReturnDispositionCodeId).createReplacement())
            {
                SalesLine salesLine = SalesLine::findInventTransId(this.InventTransId);
                ReturnReplaceItemRef::deleteReplaceSetup(salesLine.SalesId, salesLine.LineNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarehouseForQuarantine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates transaction warehouse to reflect current quarantine settings.
    /// </summary>
    public void updateWarehouseForQuarantine()
    {
        InventLocation                  inventLocationStandard;
        InventLocation                  inventLocationQuarantine;
        InventDim                       inventDim;
        InventDim                       origInventDim;
        InventDim                       journalInventDim;
        InventDim                       movementInventDim;
        WMSLocationId                   wmsLocationId;

        if (WHSInventEnabled::exist(this.itemId) &&
            this.inventDim().inventLocation().WHSEnabled)
        {
            this.createQuarantineOrder = NoYes::No;
        }
        else
        {
            if (FormDataUtil::isFormDataSource(this))
            {
                inventDim = getJoinChildFormDataSource(FormDataUtil::getFormDataSource(this), tableNum(InventDim)).cursor();
            }
            else
            {
                inventDim = this.inventDim();
            }

            // Only change if warehouse is not using journal to find locations
            if (inventDim.InventLocationId && !this.CheckPickingLocation)
            { 
                if (this.CreateQuarantineOrder)
                { // setting quarantine control - change warehouse to quarantine warehouse
                    inventLocationStandard = inventDim.inventLocation();
                    if (inventLocationStandard.InventLocationId && inventLocationStandard.InventLocationType != InventLocationType::Standard)
                    {
                        inventLocationStandard.clear(); // Cannot be used, so clear buffer
                    }

                    if (inventLocationStandard.InventLocationType == InventLocationType::Standard && inventLocationStandard.InventLocationIdQuarantine)
                    { // change to quarantine warehouse
                        inventDim.InventLocationId = inventLocationStandard.InventLocationIdQuarantine;

                        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, wmsLocationId)))
                        {
                            inventDim.wmsLocationId = inventDim.inventLocation().wmsLocationIdDefaultReceipt;
                        }

                        if (FormDataUtil::isFormDataSource(inventDim))
                        {
                            FormDataUtil::getFormDataSource(inventDim).refresh();
                        }
                        else
                        {
                            this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
                        }
                    }
                }
                else
                { // clearing quarantine control
                    inventLocationQuarantine = inventDim.inventLocation();
                    if (inventLocationQuarantine.InventLocationId && inventLocationQuarantine.InventLocationType == InventLocationType::Quarantine)
                    { // change to standard warehouse
                        // use orig buffer first
                        origInventDim = this.orig().inventDim();
                        inventLocationStandard = origInventDim.inventLocation();
                        wmsLocationId          = origInventDim.wmsLocationId;
                        if (!inventLocationStandard.InventLocationId || inventLocationStandard.InventLocationType != InventLocationType::Standard)
                        { // next try the journal header
                            journalInventDim = this.wmsJournalTable().inventDim();
                            inventLocationStandard = journalInventDim.inventLocation();
                            wmsLocationId          = journalInventDim.wmsLocationId;
                            if (inventLocationStandard && inventLocationStandard.InventLocationIdQuarantine != inventDim.InventLocationId)
                            { // warehouse does not have the specified warehouse as quarantine warehouse.
                                inventLocationStandard.clear(); // Cannot be used, so clear buffer
                                wmsLocationId = '';
                            }
                        }

                        if (!inventLocationStandard.InventLocationId || inventLocationStandard.InventLocationType != InventLocationType::Standard)
                        { // try the movements warehouse
                            if (this.InventTransId)
                            {
                                movementInventDim = this.inventMovement().inventdim();
                                inventLocationStandard = movementInventDim.inventLocation();
                                wmsLocationId = movementInventDim.wmsLocationId;
                            }
                        }

                        if (!inventLocationStandard.InventLocationId || inventLocationStandard.InventLocationType != InventLocationType::Standard)
                        { // find a warehouse having the current warehouse as quarantine, might not perform well, so use as last option
                            select firstonly InventLocationId, InventLocationType, WMSLocationIdDefaultReceipt from inventLocationStandard
                                order by InventLocationId  // to make results predictable
                                where inventLocationStandard.InventLocationIdQuarantine == inventDim.InventLocationId
                                    && inventLocationStandard.InventLocationType        == InventLocationType::Standard     // Only look for standard warehouses.
                                    && inventLocationStandard.InventSiteId              == inventDim.InventSiteId;          // Must be on same site

                            if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, WMSLocationId)))
                            {
                                wmsLocationId = inventLocationStandard.wmsLocationIdDefaultReceipt;
                            }
                            else
                            {
                                wmsLocationId = '';
                            }
                        }

                        if (inventLocationStandard.InventLocationId && inventLocationStandard.InventLocationType == InventLocationType::Standard)
                        {
                            inventDim.InventLocationId  = inventLocationStandard.InventLocationId;
                            inventDim.wmsLocationId     = wmsLocationId;

                            if (FormDataUtil::isFormDataSource(inventDim))
                            {
                                FormDataUtil::getFormDataSource(inventDim).refresh();
                            }
                            else
                            {
                                this.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean             ret;
        switch (_fieldId)
        {
            case fieldNum(WMSJournalTrans, ItemId):
                this.ItemId = Barcode::validateItemBarcode(this, this.ItemId);
                break;
        }

        ret = super(_fieldId);
        if (ret)
        {
            switch (_fieldId)
            {
                case fieldNum(WMSJournalTrans, ItemId):
                    if (!this.inventTable().isStocked())
                    {
                        ret = checkFailed("@SYS190614");
                    }
                    break;

                case fieldNum(WMSJournalTrans, CreateQuarantineOrder):

                    //do not allow the quarantine management flag to be set if the transtype does not support quarantine management.
                    if (this.CreateQuarantineOrder == NoYes::Yes && !InventTrans::canTransTypeDoQuarantineMgmt(this.InventTransType))
                    {
                        if (this.InventTransType == InventTransType::QuarantineOrder)
                        {
                            // Quarantine control cannot be set for quarantine order.
                            ret = checkFailed("@SYS115792");
                        }
                        else
                        {
                            ret = checkFailed(strFmt("@SYS70689",fieldPName(WMSJournalTrans,CreateQuarantineOrder)));
                        }
                    }

                    if (this.CreateQuarantineOrder          == NoYes::No
                        && this.quarantineControl(false)    == NoYes::Yes)
                    {
                        // Mandatory quarantine control cannot be changed.
                        ret = checkFailed("@SYS115530");
                    }
                    break;

                case fieldNum(WMSJournalTrans, ReturnDispositionCodeId):
                    if (this.ReturnDispositionCodeId)
                    {
                        if (this.inventTransType != InventTransType::Sales || this.itemId == "")
                        {
                            ret = this.allowEditCheckFailed(fieldPName(WMSJournalTrans, ReturnDispositionCodeId));
                        }

                        if (this.ReturnDispositionCodeId != this.orig().ReturnDispositionCodeId
                            && this.InventTransType == InventTransType::QuarantineOrder)
                        {
                            // Return disposition code cannot be changed.
                            ret = checkFailed("@SYS120065");
                        }

                        if (this.InventTransType == InventTransType::Sales)
                        {
                            ret = WMSJournalTable::validateDispositionCodeId(this.InventTransRefId, this.ReturnDispositionCodeId);
                        }
                    }
                    break;

                case fieldNum(WMSJournalTrans, PdsCWQty):
                    if (this.PdsCWQty != this.orig().PdsCWQty
                            && this.InventTransType
                                == InventTransType::QuarantineOrder)
                    {
                        ret = checkFailed("@SYS121212");
                    }
                    break;

                case fieldNum(WMSJournalTrans, Qty):
                    if (this.Qty != this.orig().Qty
                        && this.InventTransType == InventTransType::QuarantineOrder)
                    {
                        // Quantity cannot be modified.
                        ret = checkFailed("@SYS121212");
                    }

                    if (this.Qty < 0)
                    {
                        ret = checkFailed("@SYS50502"); // Quantity must be positive.
                    }
                    break;

                case fieldNum(WMSJournalTrans, ReturnItemNum):
                    if (this.InventTransType == InventTransType::Sales)
                    {
                        ret = SalesTable::returnValidateReturnItemNum(this.ReturnItemNum);
                    }
                    break;

                case fieldNum(WMSJournalTrans, InventTransType):
                    if (!WMSJournalTable::canTransTypeBeHandled(this.InventTransType))
                    {
                        ret = checkFailed("@SYS19559");
                    }
                    break;

                case fieldNum(WMSJournalTrans, VendAccount):
                    if (this.vendAccount
                            && this.InventTransType != InventTransType::Sales
                            && this.InventTransType != InventTransType::Purch
                            && this.InventTransType != InventTransType::ConsignmentReplenishmentOrder)
                    {
                        ret = this.allowEditCheckFailed(fieldPName(WMSJournalTrans, VendAccount));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCheckFailed</Name>
				<Source><![CDATA[
    private boolean allowEditCheckFailed(FieldLabel _fieldLabel)
    {
        return checkFailed(strFmt("@ApplicationFoundation:DataEntitiesNoAllowEdit", _fieldLabel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.validateWriteServer();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsJournalTable</Name>
				<Source><![CDATA[
    public WMSJournalTable wmsJournalTable(boolean _forUpdate = false)
    {
        return WMSJournalTable::find(this.JournalId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInventTransId</Name>
				<Source><![CDATA[
    public static boolean existInventTransId(InventTransId _inventTransId)
    {
        return _inventTransId && (select firstonly wmsJournalTrans
                    where wmsJournalTrans.InventTransId == _inventTransId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WMSJournalTrans find(
        WMSJournalId        _wmsJournalId,
        LineNum             _lineNum,
        boolean             _forUpdate = false)
    {
        WMSJournalTrans wmsJournalTrans;

        wmsJournalTrans.selectForUpdate(_forUpdate);

        if (_wmsJournalId)
        {
            select firstonly wmsJournalTrans
                where wmsJournalTrans.JournalId == _wmsJournalId &&
                      wmsJournalTrans.LineNum   == _lineNum;
        }
        return wmsJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransIdTransType</Name>
				<Source><![CDATA[
    public static WMSJournalTrans findInventTransIdTransType(
        InventTransId       _inventTransId,
        InventTransType     _inventTransType,
        boolean             _forUpdate = false)
    {
        WMSJournalTrans wmsJournalTrans;

        wmsJournalTrans.selectForUpdate(_forUpdate);

        if (_inventTransId && _inventTransType)
        {
            select firstonly wmsJournalTrans
                where wmsJournalTrans.InventTransId == _inventTransId
                && wmsJournalTrans.InventTransType == _inventTransType;
        }

        return wmsJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(JournalId _journalId)
    {
        return (select maxof(LineNum) from wmsJournalTrans
                    where wmsJournalTrans.JournalId == _journalId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteServer</Name>
				<Source><![CDATA[
    private boolean validateWriteServer()
    {
        boolean ret = this.wmsJournalTable().checkJournalIsNotPosted();

        if (ret)
        {
            InventDim inventDim = this.inventDim();
            ret = InventTable::checkProductDimensions(this.ItemId, inventDim);

            ret = this.checkSiteId() && ret;

            //do not allow the quarantine management flag to be set if the transtype does not support quarantine management.
            if (this.CreateQuarantineOrder && !InventTrans::canTransTypeDoQuarantineMgmt(this.InventTransType))
            {
                ret = checkFailed(strFmt("@SYS70689",fieldPName(WMSJournalTrans,CreateQuarantineOrder)));
            }

            //Validate inventory dimensions
            ret = ret & this.validateInventLocation(inventDim);
            ret = ret & this.validateInventBatchId(inventDim);
            ret = ret & this.validateInventGTD(inventDim);
            ret = ret & this.validateInventOwner(inventDim);
            ret = ret & this.validateInventSerialId(inventDim);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventLocation</Name>
				<Source><![CDATA[
    private boolean validateInventLocation(InventDim _inventDim)
    {
        boolean ret = true;
        if (this.InventTransRefId && this.InventTransType == InventTransType::TransferOrderReceive)
        {
            InventTransferTable inventTransferTable = InventTransferTable::find(this.InventTransRefId);
            if (inventTransferTable.InventLocationIdTo != _inventDim.InventLocationId)
            {
                ret = checkFailed(strFmt("@SYS54084",inventTransferTable.InventLocationIdTo));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventBatchId</Name>
				<Source><![CDATA[
    private boolean validateInventBatchId(InventDim _inventDim)
    {
        boolean ret = true;
        if (_inventDim.InventBatchId && this.IsReturnOrder == true && this.InventTransType == InventTransType::Sales)
        {
            InventTransIdReturn inventTransIdReturn = SalesLine::findInventTransId(this.InventTransId).InventTransIdReturn;

            if (inventTransIdReturn)
            {
                ret = InventLookupReturn::validateInventBatchIdReturn(_inventDim.InventSerialId,
                                                                      _inventDim.InventBatchId,
                                                                      inventTransIdReturn,
                                                                      this.ItemId);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventGTD</Name>
				<Source><![CDATA[
    private boolean validateInventGTD(InventDim _inventDim)
    {
        boolean ret = true;
        if (_inventDim.InventGtdId_RU && this.IsReturnOrder == true && this.InventTransType == InventTransType::Sales)
        {
            InventTransIdReturn inventTransIdReturn = SalesLine::findInventTransId(this.InventTransId).InventTransIdReturn;

            if (inventTransIdReturn)
            {
                ret = InventLookupReturn::validateInventGTDIdReturn(_inventDim.InventGtdId_RU,
                                                                      inventTransIdReturn,
                                                                      this.ItemId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventOwner</Name>
				<Source><![CDATA[
    private boolean validateInventOwner(InventDim _inventDim)
    {
        boolean ret = true;
        if (_inventDim.InventOwnerId_RU && this.IsReturnOrder == true && this.InventTransType == InventTransType::Sales)
        {
            InventTransIdReturn inventTransIdReturn = SalesLine::findInventTransId(this.InventTransId).InventTransIdReturn;

            if (inventTransIdReturn)
            {
                ret = InventLookupReturn::validateInventOwnerIdReturn(_inventDim.InventOwnerId_RU,
                                                                      inventTransIdReturn,
                                                                      this.ItemId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSerialId</Name>
				<Source><![CDATA[
    private boolean validateInventSerialId(InventDim _inventDim)
    {
        boolean ret = true;
        if (_inventDim.InventSerialId && this.IsReturnOrder == true && this.InventTransType == InventTransType::Sales)
        {
            InventTransIdReturn inventTransIdReturn = SalesLine::findInventTransId(this.InventTransId).InventTransIdReturn;

            if (inventTransIdReturn)
            {
                ret = InventLookupReturn::validateInventSerialIdReturn(_inventDim.InventSerialId,
                                                                       _inventDim.InventBatchId,
                                                                       inventTransIdReturn,
                                                                       this.ItemId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventOwner</Name>
				<Source><![CDATA[
    protected void setInventOwner()
    {
        InventDim inventDim = this.inventDim();
        InventOwnerId originalOwnerId = inventDim.InventOwnerId_RU;

        if (this.inventTransType == InventTransType::ConsignmentReplenishmentOrder)
        {
            if (this.inventTransRefId)
            {
                var consignmentReplenishmentOrder = ConsignmentReplenishmentOrderHeader::find(this.inventTransRefId);
                inventDim.setInventoryOwnerItemId(this.itemId, consignmentReplenishmentOrder.inventOwner().InventOwnerId);
            }
            else if (this.inventTransId)
            {
                var inventTransOrigin = InventTransOrigin::findByInventTransId(this.inventTransId);
                var consignmentReplenishmentOrder = ConsignmentReplenishmentOrderHeader::find(inventTransOrigin.ReferenceId);
                inventDim.setInventoryOwnerItemId(this.itemId, consignmentReplenishmentOrder.inventOwner().InventOwnerId);
            }
        }
        else
        {
            inventDim.setInventoryOwnerItemId(this.itemId);
        }

        if (originalOwnerId != inventDim.InventOwnerId_RU)
        {
            this.InventDimId = InventDim::findOrCreate(inventDim).inventDimId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123910</DeveloperDocumentation>
	<Label>@SYS51060</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>journalId</TitleField1>
	<TitleField2>lineNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LineIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LineIdx</PrimaryIndex>
	<ReplacementKey>LineIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JournalError</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JournalError</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>journalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>journalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>journalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>JournalLine</Name>
			<Label>@SYS23949</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ModeOfHandling</Name>
			<Label>@SYS50412</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>checkPickingLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createQuarantineOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Pallet</Name>
			<Label>@SYS50254</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>palletTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWMain</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>vendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnOrder</Name>
			<Label>@SYS105841</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnDispositionCodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>checkBufferLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSCheckBufferLocation</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>checkPickingLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSCheckPickingLocation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>createQuarantineOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQuarantineControl</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventTransRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>inventTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isReturnOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>itemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>journalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSJournalId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>lineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>palletTransports</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPalletTransports</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>palletTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPalletTypeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnDispositionCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnDispositionCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnItemNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnItemNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>transDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>vendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>journalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>lineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdJournalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>inventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>journalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>qty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>JournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>journalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>lineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>transDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>vendAccount</Name>
					<Field>vendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventBOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123851</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventBOM</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::BOMMain</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>InventJournalType::BOM</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventCount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123853</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventCount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::InventCounting</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>InventJournalType::Count</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventDimId</Name>
					<Field>inventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventLossProfit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123855</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLossProfit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::InventLossProfit</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>InventJournalType::LossProfit</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventMovement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123909</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventMovement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::InventTransaction</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>InventJournalType::Movement</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventQuarantineOrder</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123857</EntityRelationshipRole>
			<RelatedTable>InventQuarantineOrder</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::QuarantineOrder</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>QuarantineId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>itemId</Name>
					<Field>itemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransfer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123859</EntityRelationshipRole>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransfer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::InventTransfer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>InventJournalType::Transfer</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123903</EntityRelationshipRole>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JournalError</Name>
			<EntityRelationshipRole>@SYS123823</EntityRelationshipRole>
			<RelatedTable>JournalError</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RefTableId_Extern</Name>
					<RelatedField>RefTableId</RelatedField>
					<Value>670</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>journalId</Name>
					<Field>journalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>lineNum</Name>
					<Field>lineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Production</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123840</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Purch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123518</EntityRelationshipRole>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123841</EntityRelationshipRole>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnDispositionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReturnDispositionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnDispositionCodeId</Name>
					<Field>ReturnDispositionCodeId</Field>
					<RelatedField>DispositionCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DispositionCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReturnSalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123911</EntityRelationshipRole>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReturnSalesLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>isReturnOrder</Name>
					<Field>isReturnOrder</Field>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Sales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123519</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123905</EntityRelationshipRole>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>vendAccount</Name>
					<Field>vendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>journalId</Name>
					<Field>journalId</Field>
					<RelatedField>journalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostedIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ConsignmentReplenishmentVendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Vendor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ArrivalJournalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>vendAccount</Name>
					<Field>vendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::ConsignmentReplenishmentOrder</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ConsignmentReplenishmentOrder</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@Consignment:Table_Singular_ConsignmentReplenishmentOrderHeader</EntityRelationshipRole>
			<RelatedTable>ConsignmentReplenishmentOrderHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ConsignmentReplenishmentOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ArrivalJournalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>ReplenishmentOrderNumber</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::ConsignmentReplenishmentOrder</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>