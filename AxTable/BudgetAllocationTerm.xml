<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAllocationTerm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetAllocationTerm extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocationPercentageTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sum of allocated percentage values of the <c>BudgetAllocationTermDetail</c> records
    ///    for a <c>BudgetAllocationTerm</c> record.
    /// </summary>
    /// <returns>
    ///    The sum of allocated percentage values.
    /// </returns>
    public display Percent allocationPercentageTotal()
    {
        BudgetAllocationTermDetail budgetAllocationTermDetail;

        if (hasTableAccess(tablenum(BudgetAllocationTermDetail)))
        {
            budgetAllocationTermDetail.recordLevelSecurity(true);

            select sum(Percent)
                from  budgetAllocationTermDetail
                where budgetAllocationTermDetail.BudgetAllocationTerm == this.RecId;
        }

        return budgetAllocationTermDetail.Percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the maximum line number of the <c>BudgetAllocationTermDetail</c> records for a <c>BudgetAllocationTerm</c> record.
    /// </summary>
    /// <returns>
    /// The maximum line number value.
    /// </returns>
    public LineNum maxLineNumber()
    {
        BudgetAllocationTermDetail     budgetAllocationTermDetail;

        select maxof(LineNumber)
            from budgetAllocationTermDetail
            where budgetAllocationTermDetail.BudgetAllocationTerm == this.RecId;

        return budgetAllocationTermDetail.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overwrites the system level error message with the custom error message to avoid duplicate
    ///    insertion of the value of the <c>BudgetAllocationId</c> field.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the value of the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean isValid;
        BudgetAllocationTerm budgetAllocationTerm;

        isValid = super(_fieldIdToCheck);

        if (isValid && _fieldIdToCheck == fieldnum(BudgetAllocationTerm, Name))
        {
            // Validate BudgetAllocationTermId to throw custom error message when the term id already exist.
            budgetAllocationTerm = BudgetAllocationTerm::findByTermId(this.Name);

            if (budgetAllocationTerm.RecId != 0)
            {
                isValid = checkFailed(strfmt("@SYS138548", this.Name));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>BudgetAllocationTerm</c> table; if not, an
    ///    error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetAllocationTerm</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!BudgetAllocationTerm::exist(_recId))
        {
            ret = checkFailed(strfmt(BudgetAllocationTerm::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>BudgetAllocationTerm</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetAllocationTerm</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetAllocationTerm
                    where budgetAllocationTerm.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetAllocationTerm</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetAllocationTerm</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetAllocationTerm find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetAllocationTerm budgetAllocationTerm;

        budgetAllocationTerm.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetAllocationTerm.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetAllocationTerm
            where budgetAllocationTerm.RecId == _recId;

        return budgetAllocationTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTermId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetAllocationTerm</c> table using the passed in <c>BudgetAllocationTermId</c> value.
    /// </summary>
    /// <param name="_budgetAllocationTermId">
    /// The <c>BudgetAllocationTermId</c> value of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetAllocationTerm</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetAllocationTerm findByTermId(
        BudgetAllocationTermId  _budgetAllocationTermId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetAllocationTerm budgetAllocationTerm;

        budgetAllocationTerm.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetAllocationTerm.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetAllocationTerm
            where budgetAllocationTerm.Name == _budgetAllocationTermId;

        return budgetAllocationTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBudgetAllocationTerm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the <c>BudgetAllocationTerm</c> form for the specified budget allocation term.
    /// </summary>
    /// <param name="_budgetAllocationTerm">
    ///    The <c>BudgetAllocationTerm</c> record that is referenced by the caller.
    /// </param>
    /// <param name="_caller">
    ///    The form object that is calling the <c>BudgetAllocationTerm</c> form.
    /// </param>
    public static void jumpRefBudgetAllocationTerm(BudgetAllocationTerm _budgetAllocationTerm, Object _caller)
    {
        Args args;
        FormRun formRun;

        args = new Args(new DictTable(_budgetAllocationTerm.TableId).formRef());
        args.caller(_caller);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.dataSource().findRecord(_budgetAllocationTerm);
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@SYS134196</DeveloperDocumentation>
	<FormRef>BudgetAllocationTerm</FormRef>
	<Label>@SYS134195</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetAllocationIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BudgetAllocationTermDetail</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BudgetAllocationTermDetail</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PercentageInTotal</Name>
			<Label>@SYS28504</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>allocationPercentageTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetAllocationTermId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetAllocationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>