<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RequisitionReplenishCatAccessPolicyRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RequisitionReplenishCatAccessPolicyRule extends SysPolicyRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record based on the input parameters
    /// </summary>
    /// <param name="_policy">
    /// The policy this record relates to
    /// </param>
    /// <param name="_policyType">
    /// the policy type
    /// </param>
    /// <param name="_validFrom">
    /// The date this record should be valid from, valid to is automatically calculated based on this input
    /// </param>
    public void initValues(RefRecId _policy, RefRecId _policyType, ValidFromDateTime _validFrom)
    {
        this.Policy = _policy;
        this.PolicyRuleType = _policyType;

        if (!this)
        {
            date beginDate = dateNull();
            date endDate   = maxDate();

            this.ValidFrom = _validFrom;

            RequisitionReplenishCatAccessPolicyRule nextRequisitionAccessPolicyRule;
            select firstonly validtimestate(beginDate, endDate) nextRequisitionAccessPolicyRule order by ValidFrom
                where nextRequisitionAccessPolicyRule.Policy == _policy
                    && nextRequisitionAccessPolicyRule.PolicyRuleType == _policyType
                    && nextRequisitionAccessPolicyRule.ValidFrom >  this.ValidFrom;

            if (nextRequisitionAccessPolicyRule)
            {
                this.ValidTo = DateTimeUtil::addSeconds(nextRequisitionAccessPolicyRule.ValidFrom, -1);
            }
            else
            {
                this.ValidTo = DateTimeUtil::maxValue();
            }
        }

        this.IsInherited = NoYes::No;
        this.EcoResCategoryHierarchy = EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement).CategoryHierarchy).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>RequisitionReplenishCatAccessPolicyRule</c> record.
    /// </summary>
    /// <param name="_policyRuleRecId">
    /// The <c>RecId</c> to find the <c>RequisitionRepCatAccessPolicyRuleData</c> record for.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean indicating if the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The <c>ConcurrencyModel</c> used for selecting the record; optional.
    /// </param>
    /// <returns>
    /// A <c>RequisitionReplenishCatAccessPolicyRule</c> record.
    /// </returns>
    public static RequisitionReplenishCatAccessPolicyRule find(RecId            _policyRuleRecId,
                                                               boolean          _forupdate        = false,
                                                               ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        RequisitionReplenishCatAccessPolicyRule requisitionReplenishCatAccessPolicyRule;

        if (_policyRuleRecId)
        {
            if (_forupdate)
            {
                requisitionReplenishCatAccessPolicyRule.selectForUpdate(_forupdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    requisitionReplenishCatAccessPolicyRule.concurrencyModel(_concurrencyModel);
                }
            }

            requisitionReplenishCatAccessPolicyRule.selectLocked(_forupdate);

            utcdatetime minDateValue = DateTimeUtil::minValue();
            utcdatetime maxDateValue = DateTimeUtil::maxValue();
            select firstonly validtimestate(minDateValue , maxDateValue) requisitionReplenishCatAccessPolicyRule
                where requisitionReplenishCatAccessPolicyRule.RecId == _policyRuleRecId;
        }

        return requisitionReplenishCatAccessPolicyRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOrg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a purpose rule that is effective for the given organizations at a specific time.
    /// </summary>
    /// <param name="_orgArray">
    /// An array of organizations to search for the effective policy rule.
    /// </param>
    /// <param name="_forUpdate">
    ///   A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>RequisitionReplenishCatAccessPolicyRule</c>.
    /// </returns>
    public static RequisitionReplenishCatAccessPolicyRule findByOrg(int64 _orgArray[], boolean _forUpdate = false)
    {
        var ruleType = SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::RequisitionReplenishCatAccessPolicyRule, SysPolicyTypeEnum::PurchasingPolicy);

        var requisitionCatPolicyRuleRecId = SysPolicies::getPolicyRuleID(_orgArray, ruleType.RecId, SysPolicyTypeEnum::PurchasingPolicy);
        var requisitionReplenishCatAccessPolicyRule = RequisitionReplenishCatAccessPolicyRule::find(requisitionCatPolicyRuleRecId, _forUpdate);

        return requisitionReplenishCatAccessPolicyRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RequisitionReplenishCatAccessPolicyRule</c> rule for a legal intity.
    /// </summary>
    /// <param name="_buyingLegalEntity">
    /// <c>RecId</c> for a legal entity.
    /// </param>
    /// <param name="_forupdate">
    /// A <c>boolean</c> that indicated if the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>RequisitionReplenishCatAccessPolicyRule</c> rule for current company.
    /// </returns>
    public static RequisitionReplenishCatAccessPolicyRule findForLegalEntity(RefRecId _buyingLegalEntity,
                                                                                    boolean  _forupdate = false)
    {
        int64 orgArray[];

        orgArray[1] = _buyingLegalEntity;

        return RequisitionReplenishCatAccessPolicyRule::findByOrg(orgArray,_forupdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchReq</ConfigurationKey>
	<DeveloperDocumentation>@SYS4050035</DeveloperDocumentation>
	<Label>@SYS4050031</Label>
	<TableGroup>Parameter</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Extends>SysPolicyRule</Extends>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EcoResCategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategoryHierarchy</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EcoResCategoryHierarchy</Name>
					<Field>EcoResCategoryHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SysPolicyRule1_101584</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SysPolicyRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>