<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
public class InventTransferLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLineAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the lineAmount for the current transfer line.
    /// </summary>
    /// <param name="_qty">
    ///     Quantity used to calculate the line amount.
    /// </param>
    /// <returns>
    ///     Line amount.
    /// </returns>
    public AmountCur calcLineAmount_BR(Qty _qty = this.QtyTransfer)
    {
        InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo_BR = this.inventTransferLineFiscalInfo_BR();

        return CurrencyExchangeHelper::amount(_qty * inventTransferLineFiscalInfo_BR.ShipPrice / (inventTransferLineFiscalInfo_BR.PriceUnit ? inventTransferLineFiscalInfo_BR.PriceUnit : 1), CompanyInfoHelper::standardCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount_RU</Name>
				<Source><![CDATA[
    AmountCur calcLineAmount_RU(Qty _qty = this.QtyTransfer)
    {
        return CurrencyExchangeHelper::amount(_qty * this.Price_RU / (this.PriceUnit_RU ? this.PriceUnit_RU : 1), this.inventTransferTable().CurrencyCode_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNewShipRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the remaining quantity to be shipped.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> table record.
    /// </param>
    /// <param name="_qtyUpdate">
    ///    Ship now quantity.
    /// </param>
    /// <returns>
    /// Returns calculated inventory quantity that indicates the remaining quantity to be shipped.
    /// </returns>
    public InventTransferQty calcNewShipRemain(InventTransferParmLine _inventTransferParmLine,
                                               InventQty              _qtyUpdate = _inventTransferParmLine.QtyShipNow)
    {
        if (_inventTransferParmLine.CloseLine)
        {
            return 0;
        }

        InventTransferQty qty = this.QtyRemainShip - _qtyUpdate;

        if (this.checkForUnitID_IN())
        {
            qty = this.convertUnitForItem_IN(_inventTransferParmLine.ItemId, _inventTransferParmLine.InventDimId, qty);
        }

        return max(qty,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPickQty</Name>
				<Source><![CDATA[
    public InventTransferQty calcPickQty(InventTransferPickUpdateQty _pickUpdateQty)
    {
        InventTransferQty   qty;
        InventQty           qtyRemainPick;
        InventQty           qtyShipWMSandPickRegistered;
        InventOnHandQty     inventOnHandQty;
        InventDimParm       inventDimParm;
        InventDim           inventDim;

        qtyShipWMSandPickRegistered = this.qtyShipWMS();
        qtyRemainPick = max(0,this.QtyRemainShip - (this.qtyShipPicked() + qtyShipWMSandPickRegistered));

        if (!qtyRemainPick)
        {
            return qtyRemainPick;
        }

        switch (_pickUpdateQty)
        {
            case InventTransferPickUpdateQty::All             :
                qty = qtyRemainPick;
                break;

            case InventTransferPickUpdateQty::AvailableQty    :
                qty = max(0,-InventTransIdSum::newTransOriginId(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum)).reservPhysical() - qtyShipWMSandPickRegistered);

                if (qty < qtyRemainPick)
                {
                    inventDim = InventDim::find(this.InventDimId);
                    inventDimParm.initFromInventDim(inventDim);
                    inventOnHandQty = InventOnHandQty::newItemDim(this.ItemId,inventDim,inventDimParm);
                    qty += inventOnHandQty.availReservation(false);
                }
                if (qty > qtyRemainPick)
                {
                    qty = qtyRemainPick;
                }
                break;

            case InventTransferPickUpdateQty::ReservedQty     :
                qty = max(0,-InventTransIdSum::newTransOriginId(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum)).reservPhysical() - this.qtyShipWMSReserved());
                break;

            case InventTransferPickUpdateQty::ShipNow         :
                qty = this.QtyShipNow;
                break;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReceiveLineAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the receive lineAmount for the current transfer line.
    /// </summary>
    /// <param name="_qty">
    ///     Quantity used to calculate the line amount.
    /// </param>
    /// <returns>
    ///     Line amount.
    /// </returns>

    public AmountCur calcReceiveLineAmount_BR(Qty _qty = this.QtyTransfer)
    {
        InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo_BR = this.inventTransferLineFiscalInfo_BR();

        return CurrencyExchangeHelper::amount(_qty * inventTransferLineFiscalInfo_BR.ReceivePrice / (inventTransferLineFiscalInfo_BR.PriceUnit ? inventTransferLineFiscalInfo_BR.PriceUnit : 1), CompanyInfoHelper::standardCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReceiveQty</Name>
				<Source><![CDATA[
    public InventTransferQty calcReceiveQty(
        InventTransferReceiveUpdateQty  _receiveUpdateQty,
        InventTransferVoucherId         _voucherShipmentId      = '',
        InventTransferTable             _inventTransferTable    = null)
    {
        InventTransferQty                       qty;
        InventTrans                             inventTrans;
        InventTrans                             inventTransreceipt;
        InventTransOriginTransferTransitTo      inventTransOriginTransferTransitTo;
        InventTransOriginTransferTransitFrom    inventTransOriginTransferTransitFrom;
        InventDim                               inventDim;
        InventTransferJourLine inventTransferJourLine;

        switch (_receiveUpdateQty)
        {
            case InventTransferReceiveUpdateQty::All        :
                qty = this.QtyShipped - this.QtyReceived;
                break;

            case InventTransferReceiveUpdateQty::Registered :
                if (_inventTransferTable)
                {
                    inventDim = InventDim::find(this.InventDimId);
                    inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(this.ItemId));
                    inventDim.InventLocationId = _inventTransferTable.InventLocationIdTo;
                    inventDim.initFromInventLocation(inventDim.inventLocation());
                    inventDim = InventDim::findOrCreate(inventDim);
                    inventDim = this.inventDimMergeWarehouse(_inventTransferTable.InventLocationIdTo, _inventTransferTable, inventDim);

                    qty = this.qtyReceiveRegistered(inventDim,true);
                    // <GIN>
                    if (this.checkForUnitID_IN())
                    {
                        qty = this.converToUnitID_IN(qty);
                    }
                    // </GIN>
                }
                break;

            case InventTransferReceiveUpdateQty::Shipment   :
                if (_voucherShipmentId)
                {
                    while select TableId from inventTransOriginTransferTransitTo
                        where inventTransOriginTransferTransitTo.TransferTransitToDataAreaId    == this.DataAreaId
                           && inventTransOriginTransferTransitTo.TransferTransitToId            == this.TransferId
                           && inventTransOriginTransferTransitTo.TransferTransitToLineNum       == this.LineNum
                        join sum(Qty) from inventTrans  //Shipped
                            where inventTrans.InventTransOrigin                                 == inventTransOriginTransferTransitTo.InventTransOrigin
                               && inventTrans.StatusReceipt                                     == StatusReceipt::Purchased
                               && inventTrans.StatusIssue                                       == StatusIssue::None
                               && inventTrans.Voucher                                           == _voucherShipmentId
                            join TableId from inventDim
                                group by InventSerialId,InventBatchId,InventDimId
                                where inventDim.InventDimId     == inventTrans.InventDimId
                    {
                        select TableId from inventTransOriginTransferTransitFrom
                            where inventTransOriginTransferTransitFrom.TransferTransitFromDataAreaId    == this.DataAreaId
                               && inventTransOriginTransferTransitFrom.TransferTransitFromId            == this.TransferId
                               && inventTransOriginTransferTransitFrom.TransferTransitFromLineNum       == this.LineNum
                                join sum(Qty) from inventTransreceipt                            //not received with same inventDimId
                                    where   inventTransreceipt.InventTransOrigin                        == inventTransOriginTransferTransitFrom.InventTransOrigin
                                         && inventTransreceipt.StatusReceipt                            == StatusReceipt::None
                                         && inventTransreceipt.StatusIssue                              <= StatusIssue::ReservPhysical
                                         && inventTransreceipt.StatusIssue                              >= StatusIssue::Picked
                                         && inventTransreceipt.InventDimId                              == inventDim.InventDimId;

                        qty += min(inventTrans.Qty,-(inventTransreceipt.Qty));
                    }
                    // <GIN>
                    if (this.checkForUnitID_IN())
                    {
                        qty = this.converToUnitID_IN(qty);
                    }
                    // </GIN>
                }
                else
                {
                    qty = this.QtyShipped - this.QtyReceived;
                }
                break;

            case InventTransferReceiveUpdateQty::ReceiveNow   :
                qty = this.QtyReceiveNow;
                break;
            case InventTransferReceiveUpdateQty::DocumentReturn_RU :
                if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled()) && _voucherShipmentId)
                {
                    select sum(QtyReceived) from inventTransferJourLine
                        where inventTransferJourLine.TransferId == this.TransferId &&
                              inventTransferJourLine.LineNum    == this.LineNum    &&
                              inventTransferJourLine.VoucherId  == _voucherShipmentId;

                    qty = -inventTransferJourLine.QtyReceived;
                }
                break;
        }
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcShipQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that can be shipped.
    /// </summary>
    /// <param name="_shipUpdateQty">
    ///    An <c>InventTransferShipUpdateQty</c> enumeration that is used to determine which Inventory transactions should be included in the calculation.
    /// </param>
    /// <param name="_voucherShipmentId">
    ///    Shipment voucher.
    /// </param>
    /// <returns>
    ///    An <c>InventTransferQty</c> data type that indicates the quantity that can be shipped.
    /// </returns>
    public InventTransferQty calcShipQty(InventTransferShipUpdateQty _shipUpdateQty
                                         , InventTransferVoucherId   _voucherShipmentId = ''
                                        )
    {
        InventTransferQty qty;
        InventTransferJourLine  inventTransferJourLine;

        switch (_shipUpdateQty)
        {
            case InventTransferShipUpdateQty::All             :
                qty = this.QtyRemainShip;
                break;

            case InventTransferShipUpdateQty::AvailableQty    :
                qty = -InventTransIdSum::newTransOriginId(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum)).reservPhysical();
                if (qty < this.QtyRemainShip)
                {
                    qty += InventOnHandQty::newPhysicalUpdate(InventMovement::construct(this),InventDim::find(this.InventDimId)).availPhysical();
                }

                if (qty > this.QtyRemainShip)
                {
                    qty = this.QtyRemainShip;
                }
                break;

            case InventTransferShipUpdateQty::PickedQty       :
                qty = -InventTransIdSum::newTransOriginId(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum)).picked();
                break;

            case InventTransferShipUpdateQty::ReservedQty     :
                qty = -InventTransIdSum::newTransOriginId(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum)).reservPhysical();
                break;

            case InventTransferShipUpdateQty::ShipNow         :
                qty = this.QtyShipNow;
                break;
            case InventTransferShipUpdateQty::DocumentReturn_RU  :            
                if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled()) && _voucherShipmentId)
                {
                    select sum(QtyShipped) from inventTransferJourLine
                        where inventTransferJourLine.TransferId == this.TransferId &&
                              inventTransferJourLine.LineNum    == this.LineNum    &&
                              inventTransferJourLine.VoucherId  == _voucherShipmentId;

                    qty = -inventTransferJourLine.QtyShipped;
                }
                break;
        }
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCancelQty</Name>
				<Source><![CDATA[
    public InventTransferQty calcCancelQty(InventTransferShipUpdateQty _shipUpdateQty, InventTransferVoucherId _voucherShipmentId)
    {
        InventTransferJourLine  inventTransferJourLine;

        select sum(QtyShipped) from inventTransferJourLine
            where inventTransferJourLine.TransferId == this.TransferId &&
                  inventTransferJourLine.LineNum    == this.LineNum    &&
                  inventTransferJourLine.VoucherId  == _voucherShipmentId;

        return -inventTransferJourLine.QtyShipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shippedLicensePlatesWithUOMStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a <c>Query</c> object returning a list of license plates this transfer order line was shipped on
    /// </summary>
    /// <returns>
    /// A <c>Query</c> objects with the <c>InventDim</c> list of license plates this transfer order line was shipped on
    /// </returns>
    public Query shippedLicensePlatesWithUOMStructure()
    {
        Query query = new Query();

        QueryBuildDataSource qdbsInventTransOriginTransferShip = query.addDataSource(tableNum(InventTransOriginTransferShip));
        qdbsInventTransOriginTransferShip.addRange(fieldNum(InventTransOriginTransferShip, TransferShipId)).value(queryValue(this.TransferId));
        qdbsInventTransOriginTransferShip.addRange(fieldNum(InventTransOriginTransferShip, TransferShipLineNum)).value(queryValue(this.LineNum));
        qdbsInventTransOriginTransferShip.addRange(fieldNum(InventTransOriginTransferShip, TransferShipDataAreaId)).value(queryValue(this.DataAreaId));

        QueryBuildDataSource qbdsInventTrans = qdbsInventTransOriginTransferShip.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.addLink(fieldNum(InventTransOriginTransferShip, InventTransOrigin), fieldNum(InventTrans, InventTransOrigin));
        qbdsInventTrans.joinMode(JoinMode::InnerJoin);
        qbdsInventTrans.addRange(fieldNum(InventTrans, StatusIssue)).value(queryValue(Statusissue::Sold));

        QueryBuildDataSource qbdsInventDim = qbdsInventTrans.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.addLink(fieldNum(InventTrans, inventDimId), fieldNum(InventDim, inventDimId));
        qbdsInventDim.addRange(fieldNum(InventDim, LicensePlateId)).value(SysQuery::valueNotEmptyString());
        qbdsInventDim.addGroupByField(fieldNum(InventDim, LicensePlateId));

        QueryBuildDataSource qbdsWHSUomStructure = qbdsInventDim.addDataSource(tableNum(WHSUOMStructure));
        qbdsWHSUomStructure.joinMode(JoinMode::InnerJoin);
        qbdsWHSUomStructure.addLink(fieldNum(InventDim, LicensePlateId), fieldNum(WHSUOMStructure, LicensePlateId));
        qbdsWHSUomStructure.addRange(fieldNum(WHSUOMStructure, Module)).value(queryValue(WHSModule::Transfer));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateShipNowInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the ship now inventory quantity.
    /// </summary>
    /// <returns>
    /// The ship now inventory quantity.
    /// </returns>
    private InventQty calculateShipNowInventQty()
    {
        PdsCatchWeightMovementQtyAdjustment qtyAdjustment;

        qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::newBuffer(this);
        return qtyAdjustment.transferIssueQty(
                    InventTransferUpdateType::PickingList,
                    this.PdsCWQtyShipNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventDimBeChanged</Name>
				<Source><![CDATA[
    /*
        Use this if dimensions are changed, e.g in a form
        Inventory dimensions may not be changed once inventory transactions has been pick updated or shipped
    */
    public boolean canInventDimBeChanged(boolean _info = true)
    {
        if (this.QtyShipped)
        {
            return (_info ? checkFailed("@SYS106812") : false);
        }

        if (this.qtyShipWMS())
        {
            return (_info ? checkFailed("@SYS106813") : false);
        }

        if (this.qtyShipPickedAll())
        {
            return (_info ? checkFailed("@SYS106814") : false);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReceiptBeIdentified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Examines whether an <c>InventTransferVoucherId</c> value can be identified.
    /// </summary>
    /// <param name="_voucherShipmentId">
    ///    An <c>InventTransferVoucherId</c> data type.
    /// </param>
    /// <returns>
    ///    true if the voucher is identified; otherwise, false.
    /// </returns>
    public boolean canReceiptBeIdentified(InventTransferVoucherId _voucherShipmentId)
    {
        InventTrans                             inventTrans;
        InventDim                               inventDim;
        InventTransOriginTransferTransitTo      inventTransOriginTransferTransitTo;
        InventTransOriginTransferTransitFrom    inventTransOriginTransferTransitFrom;

        Set                                     setShippedInventDim = new Set(Types::String);
        Set                                     setReceiveInventDim = new Set(Types::String);

        while select TableId from inventTransOriginTransferTransitTo
            where inventTransOriginTransferTransitTo.TransferTransitToDataAreaId    == this.DataAreaId
               && inventTransOriginTransferTransitTo.TransferTransitToId            == this.TransferId
               && inventTransOriginTransferTransitTo.TransferTransitToLineNum       == this.LineNum
            join TableId from inventTrans  //Shipped
                where inventTrans.InventTransOrigin     == inventTransOriginTransferTransitTo.InventTransOrigin
                   && inventTrans.StatusReceipt         == StatusReceipt::Purchased
                   && inventTrans.StatusIssue           == StatusIssue::None
                   && inventTrans.Voucher               == _voucherShipmentId
                join TableId from inventDim
                    group by InventDimId
                    where inventDim.InventDimId     == inventTrans.InventDimId
        {
            setShippedInventDim.add(inventDim.InventDimId);
        }

        while select TableId from inventTransOriginTransferTransitFrom
            where inventTransOriginTransferTransitFrom.TransferTransitFromDataAreaId    == this.DataAreaId
               && inventTransOriginTransferTransitFrom.TransferTransitFromId            == this.TransferId
               && inventTransOriginTransferTransitFrom.TransferTransitFromLineNum       == this.LineNum
            join InventDimId from inventTrans                            //find transactions at transit warehouse ready to receive
               group by InventDimId
               where    inventTrans.InventTransOrigin   == inventTransOriginTransferTransitFrom.InventTransOrigin
                     && inventTrans.StatusReceipt       == StatusReceipt::None
                  && (inventTrans.StatusIssue         == StatusIssue::ReservPhysical
                  || inventTrans.StatusIssue         == StatusIssue::Picked)
        {
            setReceiveInventDim.add(inventTrans.InventDimId);
        }

        return setShippedInventDim.elements() == setReceiveInventDim.elements() &&
               Set::intersection(setShippedInventDim,setReceiveInventDim).elements() == setShippedInventDim.elements(); // return true if sets equal (function equal doesn't work)
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCostPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to check the PriceType, whether it is CostPrice or TransferPrice.
    /// </summary>
    /// <returns>
    /// Returns true if PriceType is of type CostPrice otherwise false.
    /// </returns>
    public boolean checkCostPrice_IN()
    {
        InventTransferLine      checkCostPrice;
        InventTransferLine_IN   checkCostPrice_IN;
        boolean                 retPrice;

        select firstonly UnitPrice, PriceType from checkCostPrice_IN
            exists join checkCostPrice
                where checkCostPrice.RecId       == checkCostPrice_IN.InventTransferLine
                   && checkCostPrice.ItemId      == this.ItemId
                   && checkCostPrice.InventDimId == this.InventDimId
                   && checkCostPrice.RecId       == this.RecId;

        if (checkCostPrice_IN.UnitPrice && checkCostPrice_IN.PriceType == PriceType_IN::CostPrice)
        {
            retPrice = true;
        }
        else
        {
            retPrice = false;
        }

        return retPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForUnitID_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method checks if Unit of measure in Transfer line and Indian exstention of Transfer line do not equal for Stock Tansfer line.
    /// </summary>
    /// <returns>
    /// true if Unit of measure in Transfer line and Indian extention of Transfer line do not equal for StockTransfers with switched off the StockTransferCostPriceHandlingImprovement_IN feature ; othetwise false.
    /// </returns>
    public boolean checkForUnitID_IN()
    {
        InventTransferTable inventTransferTable = this.inventTransferTable();

        return inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer
            && inventTransferTable.StockTransferCostPriceHandlingImprovement_IN == NoYes::No
            && this.inventTransferLine_IN().UnitId != this.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Close the inventTransferLine.
    /// </summary>
    /// <remarks>
    /// The transfer orders status is not updated by this method.
    /// </remarks>
    public void closeLine()
    {
        this.QtyRemainReceive      = this.QtyShipped - this.QtyReceived;
        this.PdsCWQtyRemainReceive = this.PdsCWQtyShipped - this.PdsCWQtyReceived;
        this.QtyRemainShip         = 0;
        this.PdsCWQtyRemainShip    = 0;
        this.update(NoYes::No, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>converUnit_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate inventory quantity when unit id on stock transfer is different on unit id defined on item.
    /// The quantity conversion is done from transfer order line unit to item inventory unit.
    /// </summary>
    /// <param name="_inventQty">
    ///   The inventory quantity to convert.
    /// </param>
    /// <returns>
    /// Returns calculated inventory quantity.
    /// </returns>
    InventQty converUnit_IN(InventQty _inventQty = realMin())
    {
        return this.convertUnitForItem_IN(this.ItemId, this.InventDimId, _inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertUnitForItem_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate inventory quantity when unit id on stock transfer is different on unit id defined on item.
    /// The quantity conversion is done from transfer order line unit to item inventory unit.
    /// </summary>
    /// <param name="_itemId">
    ///   The item id.
    /// </param>
    /// <param name="_inventDimId">
    ///   The inventory dimension id.
    /// </param>
    /// <param name="_inventQty">
    ///   The inventory quantity to convert.
    /// </param>
    /// <returns>
    /// Returns calculated inventory quantity.
    /// </returns>
    InventQty convertUnitForItem_IN(ItemId _itemId, InventDimId _inventDimId, InventQty _inventQty = realMin())
    {
        InventTransferLine_IN   inventTransferLineIN = this.inventTransferLine_IN();
        InventTable             inventTable = this.inventTable_IN();

        return this.convertQuantity_IN(_itemId, _inventDimId, inventTransferLineIN.UnitId, inventTable.inventUnitId(), _inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default <c>WMSLocation</c> location for the item based on the warehouse and dimensions.
    /// </summary>
    /// <param name="_inventLocationId">
    /// An <c>InventLocationId</c> Id.
    /// </param>
    /// <param name="_inventTransferTable">
    /// The <c>InventTransferTable</c> table related to the line.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> buffer.
    /// </param>
    /// <returns>
    /// The default <c>WMSLocation</c> location record.
    /// </returns>
    public WMSLocation defaultWMSLocation(
        InventLocationId    _inventLocationId,
        InventTransferTable _inventTransferTable,
        InventDim           _inventDim)
    {
        InventDim           inventDim;
        InventDirection     inventDirection = InventDirection::Receipt;

        if (_inventDim.InventLocationId != _inventLocationId)
        {
            inventDim = _inventDim.data();
            inventDim.InventLocationId = _inventLocationId;
        }
        else
        {
            inventDim = _inventDim;
        }

        if (inventDim.InventLocationId == _inventTransferTable.InventLocationIdFrom)
        {
            inventDirection = inventDirection::Issue;
        }

        return WMSLocation::defaultItemLocation(this.ItemId, inventDirection, InventDim::findOrCreate(inventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the record.
    /// </summary>
    public void delete()
    {
        InventTransferCombinedLineDelivery  combinedTransferLineDelivery;
        InventTransferLine                  inventTransferLine;

        ttsbegin;

        if (!WHSParameters::find().AutoCleanEmptyLoadManifest &&
            (WHSLoadLine::existsForInventTransId(this.InventTransId)))
        {
            throw error("@WAX5371");
        }

        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this),false).updateNow();
        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this,InventMovSubType::TransferOrderTransitTo), false).updateNow();
        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this,InventMovSubType::TransferOrderTransitFrom)).updateNow();
        InventUpd_DeleteMovement::newMovement(InventMovement::construct(this,InventMovSubType::TransferOrderTo)).updateNow();

        if (this.InventTransIdScrap)
        {
            InventUpd_DeleteMovement::newMovement(InventMovement::newTransferScrapMovement(this, null, null)).updateNow();
        }

        super();

        this.setInventTransferStatus();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        if (this.CombinedTransferOrderLineDelivery)
        {
            delete_from combinedTransferLineDelivery
                where combinedTransferLineDelivery.RecId == this.CombinedTransferOrderLineDelivery
            notexists join inventTransferLine
                where inventTransferLine.TransferId                         == this.TransferId
                    && inventTransferLine.CombinedTransferOrderLineDelivery == this.CombinedTransferOrderLineDelivery;
        }

        ttscommit;

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayQtyReservedPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the available physical quantity to reserve.
    /// </summary>
    /// <returns>
    /// The available physical quantity to reserve.
    /// </returns>
    public display InventQty displayQtyReservedPhysical()
    {
        return conPeek(this.qtyReservedPhysical(), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountMST getAssessableValue()
    {
        return this.inventTransferLine_IN().AssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find the <c>TransferPrice_IN</c> table based on the combination.
    /// </summary>
    /// <param name="_inventTransLine">
    /// A buffer of <c>InventTransferLine</c> table.
    /// </param>
    /// <returns>
    /// Returns the table buffer of <c>TransferPrice_IN</c>.
    /// </returns>
    public TransferPrice_IN  getTransferPrice_IN(InventTransferLine _inventTransLine)
    {
        TransferPrice_IN    transPrice;
        InventDimId         inventDimIdLoc;
        InventTransferTable inventtransferTableLoc;
        InventDim           inventDimLoc;

        inventtransferTableLoc = InventTransferTable::find(_inventTransLine.TransferId);

        select firstonly transPrice
            where transPrice.ItemId             == _inventTransLine.ItemId
               && transPrice.TransferPriceDimId == _inventTransLine.InventDimId;

        inventDimIdLoc                  = _inventTransLine.InventDimId;

        select firstonly transPrice
            where transPrice.FromWarehouse  == inventtransferTableLoc.InventLocationIdFrom
               && transPrice.ToWarehouse    == inventtransferTableLoc.InventLocationIdTo
               && transPrice.ItemId         == _inventTransLine.ItemId
               && transPrice.FromDate       <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.ToDate         >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.InventDimId    == inventDimIdLoc;

        if (transPrice)
        {
            return transPrice;
        }

        select firstonly transPrice
            where transPrice.FromWarehouse  == inventtransferTableLoc.InventLocationIdFrom
               && transPrice.ToWarehouse    == inventtransferTableLoc.InventLocationIdTo
               && transPrice.ItemId         == _inventTransLine.ItemId
               && transPrice.FromDate       <= dateNull()
               && transPrice.ToDate         >= dateNull()
               && transPrice.InventDimId    == inventDimIdLoc;

        if (transPrice)
        {
            return transPrice;
        }

        select firstonly transPrice
            where transPrice.FromWarehouse   == inventtransferTableLoc.InventLocationIdFrom
               && transPrice.ToWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ItemId          == _inventTransLine.ItemId
               && transPrice.FromDate        <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.ToDate          >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.InventDimId     == inventDimIdLoc;

        if (transPrice)
        {
            return transPrice;
        }

        select firstonly transPrice
            where transPrice.FromWarehouse   == inventtransferTableLoc.InventLocationIdFrom
               && transPrice.ToWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ItemId          == _inventTransLine.ItemId
               && transPrice.FromDate        <= dateNull()
               && transPrice.ToDate          >= dateNull()
               && transPrice.InventDimId     == inventDimIdLoc;

        if (transPrice)
        {
            return transPrice;
        }

        inventDimLoc.InventLocationId   = '';
        inventDimIdLoc                  = InventDim::findOrCreate(inventDimLoc).InventDimId;

        select firstonly transPrice
            where transPrice.FromWarehouseCode  == FromWarehouseCode_IN::All
               && transPrice.ToWarehouse        == inventtransferTableLoc.InventLocationIdTo
               && transPrice.ItemId             == _inventTransLine.ItemId
               && transPrice.FromDate           <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.ToDate             >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.InventDimId        == inventDimIdLoc;

        if (transPrice)
        {
            return transPrice;
        }

        select firstonly transPrice
            where transPrice.FromWarehouseCode  == FromWarehouseCode_IN::All
               && transPrice.ToWarehouse        == inventtransferTableLoc.InventLocationIdTo
               && transPrice.ItemId             == _inventTransLine.ItemId
               && transPrice.FromDate           <= dateNull()
               && transPrice.ToDate             >= dateNull()
               && transPrice.InventDimId        == inventDimIdLoc;

        if (transPrice)
        {
            return transPrice;
        }

        select firstonly transPrice
            where transPrice.FromWarehouseCode  == FromWarehouseCode_IN::All
               && transPrice.ToWarehouseCode    == FromWarehouseCode_IN::All
               && transPrice.ItemId             == _inventTransLine.ItemId
               && transPrice.FromDate           <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.ToDate             >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                && transPrice.InventDimId       == inventDimIdLoc;

        if (transPrice)
        {
            return transPrice;
        }

        select firstonly transPrice
            where transPrice.FromWarehouseCode  == FromWarehouseCode_IN::All
               && transPrice.ToWarehouseCode    == FromWarehouseCode_IN::All
               && transPrice.ItemId             == _inventTransLine.ItemId
               && transPrice.FromDate           <= dateNull()
               && transPrice.ToDate             >= dateNull()
               && transPrice.InventDimId        == inventDimIdLoc;

        if (transPrice)
        {
            return transPrice;
        }

        return transPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the transfer quantity and the record in the <c>InventDim</c> table.
    /// </summary>
    /// <param name="_inventTable">
    /// The record in the inventory table.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension id to be used for initializing.
    /// </param>
    public void initFromInventTable(InventTable _inventTable, InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        InventDim   inventDim;
        InventDim   inventDimTo;
        InventDimId inventDimId;
        // <GIN>
        InventTransferLine_IN inventTransferLineIN;
        // </GIN>

        if (!InventItemType::newItemId(_inventTable.ItemId).canBeTransferred())
        {
            throw error(strFmt("@SYS88192", _inventTable.ItemType));
        }

        inventDimTo = this.createInventDimTo(_inventDimId);
        inventDimId = inventDimTo.inventDimId;

        this.QtyTransfer            = _inventTable.inventStandardQty(inventDimId);
        this.initFromInventTableModule(InventTableModule::find(_inventTable.ItemId,ModuleInventPurchSales::Invent));

        if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled())
        {
            this.TaxItemGroupShipment = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Sales, _inventTable.ItemId, _inventDimId);
            this.TaxItemGroupReceipt = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Purch, _inventTable.ItemId, _inventDimId);
        }
        else
        {
            this.TaxItemGroupShipment = InventTableModule::find(_inventTable.ItemId, ModuleInventPurchSales::Sales).TaxItemGroupId;
            this.TaxItemGroupReceipt = InventTableModule::find(_inventTable.ItemId, ModuleInventPurchSales::Purch).TaxItemGroupId;
        }

        this.QtyTransfer            = decRound(this.QtyTransfer, UnitOfMeasure::unitOfMeasureDecimalPrecision(
            UnitOfMeasure::unitOfMeasureIdBySymbol(this.UnitId)));

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        // Default Status
        if (inventDim.InventLocationId && !inventDim.InventStatusId && WHSInventEnabled::exist(this.ItemId))
        {
            inventDim.InventStatusId = WHSInvent::getDefaultStatus(inventDim, null, this);
        }
        inventDim.setInventoryOwner(_inventTable);

        this.InventDimId            = InventDim::findOrCreate(inventDim).InventDimId;

        this.IntrastatCommodity     = _inventTable.IntrastatCommodity;
        this.OrigCountryRegionId    = _inventTable.OrigCountryRegionId;
        this.OrigStateId            = _inventTable.OrigStateId;
        this.OrigCountyId           = _inventTable.OrigCountyId;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && InventTransferTable::find(this.TransferId).TransferType_IN == TransferType_IN::StockTransfer)
        {
            inventTransferLineIN = this.inventTransferLine_IN();
            inventTransferLineIN.DefaultDimension = _inventTable.DefaultDimension;
            this.packInventTransferLine_IN(inventTransferLineIN); 
        }

        this.initDimensionsDefault(inventDimTo);

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PdsCWQtyTransfer   = 1;

            this.QtyTransfer        = PdsCatchWeight::inventQty(
                                        _inventTable.ItemId,
                                        this.PdsCWQtyTransfer,
                                        this.UnitId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTableModule</Name>
				<Source><![CDATA[
    public void initFromInventTableModule(InventTableModule _inventTableModule)
    {
        this.UnitId             = _inventTableModule.UnitId;
        this.OverDeliveryPct    = _inventTableModule.OverDeliveryPct;
        this.UnderDeliveryPct   = _inventTableModule.UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransferTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields on a line based on values from the <c>InventTransferTable</c> table passed as argument.
    /// </summary>
    /// <param name="_inventTransferTable">
    /// The inventory transfer table record.
    /// </param>
    /// <param name="_initShipReceiveDates">
    /// A Boolean value to determine whether the ship and receive dates should be updated.
    /// </param>
    public void initFromInventTransferTable(
        InventTransferTable     _inventTransferTable,
        boolean                 _initShipReceiveDates)
    {
        InventDim       inventDim;

        this.TransferId                 = _inventTransferTable.TransferId;
        this.AutoReservation            = _inventTransferTable.AutoReservation;
        this.DeliveryDateControlType    = _inventTransferTable.DeliveryDateControlType;
        this.atpTimeFence               = _inventTransferTable.atpTimeFence;
        this.atpInclPlannedOrders       = _inventTransferTable.atpInclPlannedOrders;
        this.atpApplyDemandTimeFence    = _inventTransferTable.atpApplyDemandTimeFence;
        this.atpApplySupplyTimeFence    = _inventTransferTable.atpApplySupplyTimeFence;
        this.atpBackwardDemandTimeFence = _inventTransferTable.atpBackwardDemandTimeFence;
        this.atpBackwardSupplyTimeFence = _inventTransferTable.atpBackwardSupplyTimeFence;

        if (_initShipReceiveDates)
        {
            this.ShipDate            = _inventTransferTable.ShipDate;
            this.ReceiveDate         = _inventTransferTable.ReceiveDate;
        }

        this.TransactionCode         = _inventTransferTable.TransactionCode;
        this.Transport               = _inventTransferTable.Transport;
        this.Port                    = _inventTransferTable.Port;
        this.StatProcId              = _inventTransferTable.StatProcId;

        if (IntrastatSpecMovement_CZ::isEnabled())
        {
            this.IntrastatSpecMove_CZ        = _inventTransferTable.IntrastatSpecMove_CZ;
        }
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.IntrastatFulfillmentDate_HU = _inventTransferTable.IntrastatFulfillmentDate_HU;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU)))
            {
                inventDim                    = this.inventDim();
                inventDim.InventProfileId_RU = _inventTransferTable.InventProfileId_RU;
                this.InventDimId             = InventDim::findOrCreate(inventDim).InventDimId;

                if (_inventTransferTable.InventProfileIdTo_RU)
                {
                    inventDim.InventProfileId_RU = _inventTransferTable.InventProfileIdTo_RU;
                    this.InventDimIdTo_RU        = InventDim::findOrCreate(inventDim).InventDimId;
                }
            }
            if (! this.InventDimIdTo_RU)
            {
                this.InventDimIdTo_RU    = this.inventDimReceive(_inventTransferTable).InventDimId;
            }
        }
        this.InventDimId             = this.inventDimMergeWarehouse(
            _inventTransferTable.InventLocationIdFrom,
            _inventTransferTable,
            this.inventDim(),
            true).InventDimId;

        if (#PdsShelfEnabled)
        {
            this.PdsOverrideFEFO    = _inventTransferTable.PdsOverrideFEFO;
        }

        if (BrazilParameters::isEnabled())
        {
            this.postInitFromInventTransferTableBR(_inventTransferTable, _initShipReceiveDates);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqPo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes fields based on the specified ReqPO table record.
    /// </summary>
    /// <param name="_reqPO">
    ///    The ReqPO table record that is used to initialize the fields.
    /// </param>
    public void initFromReqPo(ReqPO _reqPO)
    {
        InventTable inventTable;

        this.ItemId                 = _reqPO.ItemId;
        this.InventDimId            = _reqPO.CovInventDimId;
        this.QtyTransfer            = _reqPO.Qty;

        this.initFromInventTableModule(InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent));

        this.QtyTransfer            = decRound(this.QtyTransfer, UnitOfMeasure::unitOfMeasureDecimalPrecision(
            UnitOfMeasure::unitOfMeasureIdBySymbol(this.UnitId)));

        this.QtyRemainReceive       = this.QtyTransfer;
        this.QtyRemainShip          = this.QtyTransfer;

        this.PdsCWQtyTransfer      = _reqPO.PdsCWReqQty;
        this.PdsCWQtyRemainReceive = _reqPO.PdsCWReqQty;
        this.PdsCWQtyRemainShip    = _reqPO.PdsCWReqQty;

        this.ShipDate               = _reqPO.SchedFromDate ? _reqPO.SchedFromDate : _reqPO.ReqDateOrder;
        this.ReceiveDate            = _reqPO.ReqDateDlv;

        this.PlanningPriority       = _reqPO.PlanningPriority;

        inventTable  =   inventTable::find(_reqPO.ItemId,false);

        this.IntrastatCommodity     = inventTable.IntrastatCommodity;
        this.OrigCountryRegionId    = inventTable.OrigCountryRegionId;
        this.OrigStateId            = inventTable.OrigStateId;
        this.OrigCountyId           = inventTable.OrigCountyId;

        if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled())
        {
            this.TaxItemGroupShipment = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Sales, this.ItemId, this.InventDimId);
            this.TaxItemGroupReceipt = InventTable::getTaxItemGroupId(ModuleInventPurchSales::Purch, this.ItemId, this.InventDimId);
        }
        else
        {
            this.TaxItemGroupShipment = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).TaxItemGroupId;
            this.TaxItemGroupReceipt = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).TaxItemGroupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    public void initFromSalesLine(SalesLine _salesLine)
    {
        this.ItemId = _salesLine.ItemId;
        this.inventdimid = _salesLine.InventDimId;
        this.initFromInventTable(InventTable::find(_salesLine.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate invent trans id form the number sequence.
    /// </summary>
    /// <param name = "_numberSeq">The number sequence to generate the invent trans id from.</param>
    /// <returns>The generated invent trans id.</returns>
    [Replaceable]
    protected InventTransIdShipment generateInventTransId(NumberSeq _numberSeq)
    {
        return _numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into the database.
    /// </summary>
    /// <param name="_dropEstimated">
    ///    A <c>NoYes</c> enumeration; optional.
    /// </param>
    /// <remarks>
    ///    If yes is chosen for the optional <c>NoYes</c> enumeration parameter, the estimated transactions related to the line is not updated.
    /// </remarks>
    public void insert(NoYes _dropEstimated = NoYes::No)
    {
        NumberSequenceReference numberSequenceReference = InventParameters::numRefInventTransId();
        NumberSeq               numberSeq               = NumberSeq::newGetNum(numberSequenceReference);
        WHSInventTransferLine           whsInventTransferLine;
        WHSAutoCreateLoadLineTransfer   autoCreateLoadLineTransfer;
        // <GIN>
        InventTransferTable             inventTransferTable;
        TransitDocumentManager_IN       transitDocManager;
        // </GIN>
        boolean autoUpdateShipmentBeforeAutoReservationFlightEnabled = WHSAutoUpdateShipmentBeforeAutoReservationFlight::instance().isEnabled();

        this.initLineNum();

        this.InventTransId              = this.generateInventTransId(numberSeq);
        this.InventTransIdTransitTo     = numberSeq.num();
        this.InventTransIdTransitFrom   = numberSeq.num();
        this.InventTransIdReceive       = numberSeq.num();

        if(this.UnitPrice == 0 && TaxIntegrationUtils::isTaxInTransferOrderEnabled())
        {
            this.UnitPrice = this.inventSumUnitPrice();
            this.NetAmount = this.netAmount(this);

            this.setStatisticalAmounts();
        }

        ttsbegin;
  
        if (!this.inventTransferTable().canAddTransferLines())
        {
            throw error("@SCM:TransferOrderStatusNotEditable");
        }
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setInventDimTo_RU();
            this.LineAmount_RU = this.calcLineAmount_RU();
        }

        InventTransferLineEstimation estimation = InventTransferLineEstimation::newFromLine(this);
        estimation.parmDropEstimated(_dropEstimated);
        estimation.updateEstimatedPre();

        super();

        if (autoUpdateShipmentBeforeAutoReservationFlightEnabled)
        {
            // Creating a tag table and a Load if needed
            // Check if status is specified. This item cannot be put in validateWrite as the inventDimId will be out of date
            boolean isItemWHS = WHSInventEnabled::exist(this.ItemId);

            if (isItemWHS || TMSInventEnabled::exist(this.ItemId))
            {
                if (isItemWHS
                && this.isCatchWeightItemHandlingPolicyAssignedToCWItem())
                {
                    throw error(strFmt("@WAX:MissingCWItemHandlingPolicy", this.ItemId));
                }

                whsInventTransferLine.initFromInventTransferLine(this);
                if (whsInventTransferLine.validateWrite())
                {
                    whsInventTransferLine.insert();
                }
                else
                {
                    throw error("@SYS18447");
                }
            }

            autoCreateLoadLineTransfer = WHSAutoCreateLoadLine::newFromSourceLineTableBuffer(this);
            autoCreateLoadLineTransfer.autoCreateLoadLine();
        }

        estimation.updateEstimatedOnInsert();
        estimation.updateEstimatedPost();

        this.SysExtensionSerializerMap::postInsert();

        if (!autoUpdateShipmentBeforeAutoReservationFlightEnabled)
        {
            // Creating a tag table and a Load if needed
            // Check if status is specified. This item cannot be put in validateWrite as the inventDimId will be out of date
            boolean isItemWHS = WHSInventEnabled::exist(this.ItemId);

            if (isItemWHS || TMSInventEnabled::exist(this.ItemId))
            {
                if (isItemWHS
                && this.isCatchWeightItemHandlingPolicyAssignedToCWItem())
                {
                    throw error(strFmt("@WAX:MissingCWItemHandlingPolicy", this.ItemId));
                }

                whsInventTransferLine.initFromInventTransferLine(this);
                if (whsInventTransferLine.validateWrite())
                {
                    whsInventTransferLine.insert();
                }
                else
                {
                    throw error("@SYS18447");
                }
            }

            autoCreateLoadLineTransfer = WHSAutoCreateLoadLine::newFromSourceLineTableBuffer(this);
            autoCreateLoadLineTransfer.autoCreateLoadLine();
        }

        if (WHSInventEnabled::exist(this.ItemId))
        {
            if (this.shouldPerformInventStatusValidation_BR() && !InventDim::find(this.InventDimId).InventStatusId)
            {
                throw error ("@WAX3379");
            }
        }

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            transitDocManager = TransitDocumentManager_IN::newManager();
            if (transitDocManager.existsAnyTransitDocType() &&
                transitDocManager.existTransitRuleForTransType(tableNum(inventTransferTable)))
            {
                inventTransferTable = InventTransferTable::find(this.TransferId);
                transitDocManager.transit(inventTransferTable, this);
            }
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimMergeWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an <c>InventDim</c> record where the <c>InventLocation</c> value passed in as a parameter and the <c>WMSLocationId</c> value is set.
    /// </summary>
    /// <param name="_inventLocationId">
    ///    The <c>InventLocationId</c> of the warehouse.
    /// </param>
    /// <param name="_inventTransferTable">
    ///    An inventory transfer table record; optional.
    /// </param>
    /// <param name="_inventDim">
    ///    An existing <c>InventDim</c> record that the returned <c>InventDim</c> record should be a partial copy of; optional.
    /// </param>
    /// <param name="_initInventStatusId">
    ///    A Boolean to decide if Invent status should be initialized in this method; optional.
    /// </param>
    /// <returns>
    ///    An <c>InventDim</c> record that has the values from the _<paramref name="inventDim" /> and has the wmsLocation field set based on the <c>itemId</c> of the item on the line.
    /// </returns>
    public InventDim inventDimMergeWarehouse(
        InventLocationId    _inventLocationId,
        InventTransferTable _inventTransferTable    = this.inventTransferTable(),
        InventDim           _inventDim              = InventDim::find(this.InventDimId),
        boolean             _initInventStatusId     = false)
    {
        #InventDimDevelop
        InventDim           inventDim = _inventDim.data();
        InventDim           inventDimLine = this.inventDim();

        inventDim.InventLocationId = _inventLocationId;

        if (inventDimLine.InventLocationId == _inventLocationId
            && inventDimLine.wMSLocationId)
        {
            inventDim.wMSLocationId = inventDimLine.wMSLocationId;
        }
        else
        {
            inventDim.wmsLocationId = this.defaultWMSLocation(_inventLocationId, _inventTransferTable, inventDim).wMSLocationId;
        }

        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim,wmsLocationId)))
        {
            if (_inventLocationId == _inventTransferTable.InventLocationIdTo)
            {
                inventDim.wmsPalletId = '';
            }
        }

        inventDim.initFromInventLocation(inventDim.inventLocation());

        inventDim.clearLicensePlateIfInvalid();

        if (_initInventStatusId && !inventDim.InventStatusId && WHSInventEnabled::exist(this.ItemId))
        {
            inventDim.InventStatusId = WHSInvent::getDefaultStatus(inventDim, null, this);
        }

        return InventDim::findOrCreate(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimReceive</Name>
				<Source><![CDATA[
    public InventDim inventDimReceive(InventTransferTable _inventTransferTable = this.inventTransferTable())
    {
        if (this.InventDimIdTo_RU                                        &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            InventDim::find(this.InventDimIdTo_RU).InventProfileId_RU)
        {
            return this.inventDimTo_RU();
        }
        return this.inventDimMergeWarehouse(_inventTransferTable.InventLocationIdTo,_inventTransferTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimShip</Name>
				<Source><![CDATA[
    public InventDim inventDimShip()
    {
        return this.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimTo_RU</Name>
				<Source><![CDATA[
    InventDim inventDimTo_RU()
    {
        return this.InventDimIdTo_RU ? InventDim::find(this.InventDimIdTo_RU) : this.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimTransitFrom</Name>
				<Source><![CDATA[
    public InventDim inventDimTransitFrom(InventTransferTable _inventTransferTable = this.inventTransferTable())
    {
        return this.inventDimMergeWarehouse(_inventTransferTable.InventLocationIdTransit,_inventTransferTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimTransitTo</Name>
				<Source><![CDATA[
    public InventDim inventDimTransitTo(InventTransferTable _inventTransferTable = this.inventTransferTable())
    {
        return this.inventDimMergeWarehouse(_inventTransferTable.InventLocationIdTransit,_inventTransferTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find the <c>InventTable</c> table on the basis of InventTransferLine ItemId.
    /// </summary>
    /// <returns>
    /// Returns the table buffer of the <c>InventTable</c>.
    /// </returns>
    public InventTable inventTable_IN()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModuleInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the record with specified itemId and moduletype value.
    /// </summary>
    /// <returns>
    /// The record with the specified values.
    /// </returns>
    InventTableModule inventTableModuleInvent()
    {
        return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModuleInvent_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find InventTableModule based on the InventTransferLine ItemId and the ModuleType.
    /// </summary>
    /// <returns>
    /// Returns the InventTableModule.
    /// </returns>
    public InventTableModule inventTableModuleInvent_IN()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>InventTransferLine_IN</c> record related to the <c>InventTransferLine</c>.
    /// </summary>
    /// <returns>
    ///     The <c>InventTransferLine_IN</c> record.
    /// </returns>
    public InventTransferLine_IN inventTransferLine_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(InventTransferLine_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferLineFiscalInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>InventTransferLineFiscalInfo_BR</c> record related to the <c>InventTransferLine</c>.
    /// </summary>
    /// <returns>
    ///     The <c>InventTransferTableFiscalInfo_BR</c> record.
    /// </returns>

    public InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(InventTransferLineFiscalInfo_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferOrderType_BR</Name>
				<Source><![CDATA[
    private InventTransferOrderType_BR inventTransferOrderType_BR()
    {
        FormDataSource      parentDataSource;
        FormDataSource      dataSource;
        int                 i;
        int childDataSourceCount;

        InventTransferTableFiscalInfo_BR inventTransferTableFiscalInfo;
        InventTransferTable inventTransferTable;

        if (!FormDataUtil::isFormDataSource(this))
        {
            select inventTransferTableFiscalInfo
                join RecId from inventTransferTable
                    where inventTransferTable.RecId == inventTransferTableFiscalInfo.InventTransferTable
                        && inventTransferTable.TransferId == this.TransferId;
        }
        else
        {
            parentDataSource = FormDataUtil::getFormDataSource(this);

            if (!parentDataSource.isBaseDataSource())
            {
                dataSource = parentDataSource.joinSourceDataSource();

                childDataSourceCount = dataSource.queryBuildDataSource().childDataSourceCount();

                for (i=1; i<= childDataSourceCount; i++)
                {
                    if (dataSource.queryBuildDataSource().childDataSourceNo(i).getNo().TableId == tableNum(InventTransferTableFiscalInfo_BR))
                    {
                        inventTransferTableFiscalInfo = dataSource.queryBuildDataSource().childDataSourceNo(i).getNo();
                        break;
                    }
                }
            }
        }

        return inventTransferTableFiscalInfo.InventTransferOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferTable</Name>
				<Source><![CDATA[
    public InventTransferTable inventTransferTable(boolean  _forUpdate = false)
    {
        return InventTransferTable::find(this.TransferId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCostPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the on-hand CostPrice for the particular item.
    /// </summary>
    /// <returns>
    /// Returns the on-hand CostPrice.
    /// </returns>
    public real itemCostPrice_IN()
    {
        CostPrice priceLoc;
        CostPrice costPrice;

        priceLoc  = InventSum::find(this.ItemId, this.InventDimId).costPricePcs();
        costPrice = CurrencyExchangeHelper::price(priceLoc, this.inventTransferLine_IN().CurrencyCode);

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the item name.
    /// </summary>
    /// <returns>
    ///    An <c>ItemNameDisplay</c> data type that displays the item name.
    /// </returns>
    display public ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(InventDim::find(this.InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrValidateFieldQtyTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>QtyTransfer</c> field.
    /// </summary>
    /// <returns>
    /// true if valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Kept a separate method since this combines base field validation, base validation
    /// from the form, and custom dual unit validation.
    /// The Form validation doesn't run unless copied here because field replaced with edit method.
    /// </remarks>
    /// <seealso>
    /// The <c>InventTransferOrders</c> form <c>InventTransferLine</c> datasource <c>QtyTransfer</c> field validate.
    /// </seealso>
    public boolean mcrValidateFieldQtyTransfer()
    {
        InventTransferLine otherTransferLine;
        boolean ret;

        ret = this.validateField(fieldNum(InventTransferLine, QtyTransfer));

        if (this.QtyTransfer < this.orig().QtyTransfer
            && (this.QtyRemainShip    - this.QtyTransfer == 0
            ||  this.QtyRemainReceive - this.QtyTransfer == 0))
        {
            select firstonly RecId from otherTransferLine
                where otherTransferLine.TransferId   == this.TransferId
                &&    otherTransferLine.RemainStatus != InventTransferRemainStatus::None
                &&    otherTransferLine.RecId        != this.RecId;

            if (!otherTransferLine.RecId)
            {
                warning(strFmt("@SYS106908",
                    fieldId2pname(tableNum(InventTransferLine),fieldNum(InventTransferLine,QtyTransfer)),
                    ((this.QtyRemainReceive - this.QtyTransfer == 0) ? enum2str(InventTransferStatus::Received) : enum2str(InventTransferStatus::Shipped))));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataItemIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the transfer line item specific data.
    /// </summary>
    private void initDataItemIdModified()
    {
        this.resetTransFields();
        var inventDim = InventDim::findOrCreateBlank();
        inventDim.initProductDimensionsFromInventTable(InventTable::find(this.ItemId));
        this.InventDimId = inventDim::findOrCreate(inventDim).inventDimId;
        this.initFromInventTransferTable(InventTransferTable::find(this.TransferId), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemIdModifiedTransferLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventTransferLine_IN</c> specific data when item id modified.
    /// </summary>
    protected void initItemIdModifiedTransferLine_IN()
    {
        if (InventTransferTable::find(this.TransferId).TransferType_IN == TransferType_IN::StockTransfer)
        {
            inventTransferLine_IN inventTransferLineIN = this.inventTransferLine_IN();
            inventTransferLineIN.initItemIdModifiedFields(this);
            this.packInventTransferLine_IN(inventTransferLineIN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the item for given dimensions is not on hold on: to, from and transit warehouses. If there are overriding default order settings with higher rank,
    /// those rules would be used for the check.
    /// </summary>
    /// <param name = "_inventDimId">The inventory dimension id to be checked.</param>
    /// <returns>true if the result  that the item with the current dimensions is not stopped, i.e. usable; otherwise false</returns>
    private boolean checkNotStopped()
    {
        Set setInventSites = new Set(Types::String);

        boolean checkItemNotStoppedOnWarehouse(InventLocationId _inventLocationId, InventDim _inventDimProductDims)
        {
            boolean     notStopped = true;

            _inventDimProductDims.InventSiteId = InventLocation::find(_inventLocationId).InventSiteId;

            if (!setInventSites.in(_inventDimProductDims.InventSiteId))
            {
                InventDimId inventDimId;
                if (_inventDimProductDims.InventSiteId)
                {
                    inventDimId = InventDim::findOrCreate(_inventDimProductDims).InventDimId;
                }
                else
                {
                    inventDimId = _inventDimProductDims.inventDimId;
                }

                // get the item settings
                var inventItemInventSetup  = InventItemInventSetup::find(this.ItemId, inventDimId);
                if (! inventItemInventSetup.RecId)
                {
                    error(strFmt("@SYS5700", this.ItemId, InventItemOrderSetupType::Invent));
                    notStopped = false;
                }

                // check that the item is not marked as stopped on the shipping warehouse
                notStopped = inventItemInventSetup.checkNotStopped();

                setInventSites.add(_inventDimProductDims.InventSiteId);
            }

            return notStopped;
        }
        var ret = true;
        var inventTransferTable = this.inventTransferTable();

        var inventDim = InventDim::mcrGetProductDimensions(this.InventDimId);

        ret = checkItemNotStoppedOnWarehouse(inventTransferTable.InventLocationIdFrom, inventDim);

        ret = ret && checkItemNotStoppedOnWarehouse(inventTransferTable.InventLocationIdTo, inventDim);

        ret = ret && checkItemNotStoppedOnWarehouse(inventTransferTable.InventLocationIdTransit, inventDim);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataDimensionsModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the transfer line dimension specific defaulting if applicable.
    /// </summary>
    /// <returns>true if the result of the defaulting indicates that the item with the current dimensions is not on hold, i.e. usable; otherwise false</returns>
    public boolean initDataDimensionsModified()
    {
        InventDim inventDim = InventDim::find(this.InventDimId);
        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDim))
        {
            return true;
        }
        var notStopped = this.checkNotStopped();
        this.initFromInventTable(InventTable::find(this.ItemId), this.InventDimId);
        this.setDeliveryDateControlType(this.InventDimId);
        SalesCalcAvailableDlvDates::initDateFields(this);

        return notStopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the net amount by multiplying the UnitPrice and the quantity to transfer.
    /// </summary>
    /// <returns>
    /// Returns the net amount.
    /// </returns>
    public real netAmount(InventTransferLine _inventTransferLine)
    {
        return this.UnitPrice * _inventTransferLine.QtyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called by the kernel when a field on the table has its value modified.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID of the field that changed.
    /// </param>
    /// <remarks>
    ///    Methods that should be called when a field value changes are called in this method.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventTransferLine, ItemId):
                this.initDataItemIdModified();
                this.initDataDimensionsModified();
                if (#PmfEnabled)
                {
                    InventMovement::setMinMaxQty(this, true, true);
                }
                this.setPrice_RU();
                this.LineAmount_RU = this.calcLineAmount_RU();
                break;

            case fieldNum(InventTransferLine, PdsCWQtyTransfer):
                this.QtyTransfer = PdsCatchWeight::inventQty(
                    this.ItemId,
                    this.PdsCWQtyTransfer,
                    this.UnitId);
                InventMovement::setMinMaxQty(this, true, true);
                break;

            case fieldNum(InventTransferLine, PdsCWQtyShipNow):
                this.QtyShipNow = PdsCatchWeight::inventQty(
                    this.ItemId,
                    this.PdsCWQtyShipNow,
                    this.UnitId);
                InventMovement::setMinMaxQty(this, true, true);
                break;

            case fieldNum(InventTransferLine, QtyTransfer):
                this.setPrice_RU();
                this.LineAmount_RU = this.calcLineAmount_RU();
                
                if (!WHSAutoCreateTransferOrderIgnoreDefaultOrderSettingsContext::currentIgnoreDefaultOrderSettingsParameter())
                {
                    InventMovement::setMinMaxQty(this, true, true);
                }

                //<GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    InventTransferLine_IN inventTransferLineIN = this.inventTransferLine_IN();
                    inventTransferLineIN.NetAmount = inventTransferLineIN.netAmount(this);
                    inventTransferLineIN.AssessableValueTransactionCurrency = inventTransferLineIN.NetAmount;
                    this.packInventTransferLine_IN(inventTransferLineIN);
                }
                //</GIN>
                else if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() || TaxIntegrationUtils::isTaxInTransferOrderEnabled())
                {
                    this.NetAmount = this.netAmount(this);
                    this.setStatisticalAmounts();
                }
                break;

            case fieldNum(InventTransferLine, UnitPrice):
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() || TaxIntegrationUtils::isTaxInTransferOrderEnabled())
                {
                    this.NetAmount = this.netAmount(this);
                    this.setStatisticalAmounts();
                }
                break;

            case fieldNum(InventTransferLine, AmountValue):
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() || TaxIntegrationUtils::isTaxInTransferOrderEnabled())
                {
                    this.StatisticalValue = this.AmountValue;
                }
                break;

            case fieldNum(InventTransferLine, Price_RU):
            case fieldNum(InventTransferLine, PriceUnit_RU):
                this.LineAmount_RU = this.calcLineAmount_RU();
                break;

            case (fieldNum(InventTransferLine, TransactionCode)):
                IntrastatTransactionCode intrastatTransactionCode = IntrastatTransactionCode::find(this.TransactionCode);

                if (intrastatTransactionCode.TransferOrderAmountValueType == TransferOrderAmountValueType::Manual)
                {
                    this.AmountValue = this.NetAmount;
                    this.StatisticalValue = this.NetAmount;
                }
                else
                {
                    this.AmountValue = 0;
                    this.StatisticalValue = 0;
                }
                break;

            case (fieldNum(InventTransferLine, OrigCountryRegionId)):
                this.OrigStateId = '';
                this.OrigCountyId = '';
                break;

            case (fieldNum(InventTransferLine, OrigStateId)):
                this.OrigCountyId = '';
                break;
        }

        this.modifiedFieldDDC(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldDDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the modified field event for delivery date control fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the modified field.
    /// </param>
    private void modifiedFieldDDC(FieldId _fieldId) //Enhanced Delivery Date Control
    {
        SalesCalcAvailableDlvDates salesCalcAvailableDlvDates;

        if (this.DeliveryDateControlType != SalesDeliveryDateControlType::None)
        {
            salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this,_fieldId);

            switch (_fieldId)
            {
                case fieldNum(InventTransferLine, QtyTransfer):
                case fieldNum(InventTransferLine, DeliveryDateControlType):
                case fieldNum(InventTransferLine, atpTimeFence):
                case fieldNum(InventTransferLine, atpBackwardSupplyTimeFence):
                case fieldNum(InventTransferLine, atpBackwardDemandTimeFence):
                case fieldNum(InventTransferLine, atpApplySupplyTimeFence):
                case fieldNum(InventTransferLine, atpApplyDemandTimeFence):
                case fieldNum(InventTransferLine, atpInclPlannedOrders):
                    salesCalcAvailableDlvDates.modifiedField(this);
                    break;

                case fieldNum(InventTransferLine, ReceiveDate):
                    salesCalcAvailableDlvDates.modifiedField(this);

                    if (this.ShipDate > this.ReceiveDate)
                    {
                        this.ShipDate = this.ReceiveDate;
                    }
                    break;

                case fieldNum(InventTransferLine, ShipDate):
                    salesCalcAvailableDlvDates.modifiedField(this);

                    if (this.ShipDate > this.ReceiveDate)
                    {
                        this.ReceiveDate = this.ShipDate;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustTransitIssueBeIdentified</Name>
				<Source><![CDATA[
    public boolean mustTransitIssueBeIdentified(InventQty _updateQty)
    {
        InventTrans             inventTrans1;
        InventTrans             inventTrans2;
        InventTransOriginId     receiveInventTransOriginId = InventTransOriginTransferReceive::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        int                     foundRecords;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if ((_updateQty > 0 && this.QtyRemainReceive == _updateQty) ||
                (_updateQty < 0 && this.QtyReceived      == -_updateQty))
            {
                return false;
            }

            while select InventDimId from inventTrans1
                group by InventDimId
                where inventTrans1.InventTransOrigin    == receiveInventTransOriginId  &&
                      inventTrans1.StatusIssue          == StatusIssue::None &&
                      ((_updateQty >= 0 &&
                        inventTrans1.StatusReceipt      >= StatusReceipt::Registered) ||
                       (_updateQty < 0 &&
                        inventTrans1.StatusReceipt      == StatusReceipt::Purchased &&
                        inventTrans1.InvoiceReturned    == NoYes::No))
            {
                foundRecords++;

                if (foundRecords > 1)
                {
                    return true;
                }
            }

            return false;
        }
        else
        {
            // all remaining part is being updated so it is not required to select specific transit-transactions
            if (this.QtyRemainReceive == _updateQty)
            {
                return false;
            }

            select firstonly InventDimId from inventTrans1
                where inventTrans1.InventTransOrigin    == receiveInventTransOriginId
                &&    inventTrans1.StatusReceipt        >= StatusReceipt::Registered
                &&    inventTrans1.StatusIssue          == StatusIssue::None;

            if (!inventTrans1.InventDimId)
            {
                return false;
            }

            //if we have 2 open trans with different inventdim, transit transactions must be identified
            select firstonly RecId from inventTrans2
                where inventTrans2.InventTransOrigin    == receiveInventTransOriginId
                &&    inventTrans2.StatusReceipt        >= StatusReceipt::Registered
                &&    inventTrans2.StatusIssue          == StatusIssue::None
                &&    inventTrans2.InventDimId          != inventTrans1.InventDimId;

            return (inventTrans2.RecId ? true : false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustTransitReceiptBeIdentified</Name>
				<Source><![CDATA[
    public boolean mustTransitReceiptBeIdentified(InventQty _updateQty)
    {
        InventTrans             inventTrans1;
        InventTrans             inventTrans2;
        InventTransOriginId     shipInventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        int                     foundRecords;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if ((_updateQty > 0 && this.QtyRemainShip == _updateQty) ||
            (_updateQty < 0 && this.QtyShipped    == -_updateQty))
            {
                return false;
            }

            while select InventDimId from inventTrans1
                group by InventDimId
                where inventTrans1.InventTransOrigin    == shipInventTransOriginId  &&
                      inventTrans1.StatusReceipt        == StatusReceipt::None &&
                    ((_updateQty >= 0 &&
                      inventTrans1.StatusIssue          >= StatusIssue::Picked) ||
                     (_updateQty < 0 &&
                      inventTrans1.StatusIssue          == StatusIssue::Sold &&
                      inventTrans1.InvoiceReturned      == NoYes::No))
            {
                foundRecords++;

                if (foundRecords > 1)
                {
                    return true;
                }
            }

            return false;
        }
        else
        {
            // all remaining part is being updated so it is not required to select specific transit-transactions
            if (this.QtyRemainShip == _updateQty)
            {
                return false;
            }

            select firstonly InventDimId from inventTrans1
                where inventTrans1.InventTransOrigin    == shipInventTransOriginId
                &&    inventTrans1.StatusIssue          >= StatusIssue::Picked
                &&    inventTrans1.StatusReceipt        == StatusReceipt::None;

            if (!inventTrans1.InventDimId)
            {
                return false;
            }

            //if we have 2 open trans with different inventdim, transit transactions must be identified
            select firstonly RecId from inventTrans2
                where inventTrans2.InventTransOrigin    == shipInventTransOriginId
                &&    inventTrans2.StatusIssue          >= StatusIssue::Picked
                &&    inventTrans2.StatusReceipt        == StatusReceipt::None
                &&    inventTrans2.InventDimId          != inventTrans1.InventDimId;

            return (inventTrans2.RecId ? true : false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packInventTransferLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an <c>InventTransferLine_IN</c> record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_inventTransferLine_IN">
    /// The source record of <c>InventTransferLine_IN</c> table.
    /// </param>
    public void packInventTransferLine_IN(InventTransferLine_IN _inventTransferLine_IN)
    {
        _inventTransferLine_IN.InventTransferLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_inventTransferLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packInventTransferLineFiscalInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an <c>InventTransferLineFiscalInfo_BR</c> record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_inventTransferTableFiscalInfo">
    /// The source record of <c>InventTransferLineFiscalInfo_BR</c> table.
    /// </param>
    public void packInventTransferLineFiscalInfo_BR(InventTransferLineFiscalInfo_BR _inventTransferTableFiscalInfo)
    {
        _inventTransferTableFiscalInfo.InventTransferLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_inventTransferTableFiscalInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcNewShipRemain</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWCalcNewShipRemain(
            InventTransferParmLine _inventTransferParmLine
            , PdsCWInventQty       _cwQtyUpdate = _inventTransferParmLine.PdsCWQtyShipNow
            )
    {
        PdsCWInventQty   qty;

        if (_inventTransferParmLine.CloseLine)
        {
            return 0;
        }

        qty = this.PdsCWQtyRemainShip - _cwQtyUpdate;

        return max(qty,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcPickQty</Name>
				<Source><![CDATA[
    public PdsCWQtyTransfer pdsCWCalcPickQty(
            InventTransferPickUpdateQty _pickUpdateQty)
    {
        InventTransferQty   qty;
        InventQty           qtyRemainPick;
        InventQty           qtyShipWMSandPickRegistered;
        InventOnHandQty     inventOnHandQty;
        InventDimParm       inventDimParm;
        InventDim           inventDim;

        qtyShipWMSandPickRegistered = this.pdsCWQtyShipWMS();
        qtyRemainPick = max(0,this.PdsCWQtyRemainShip
                                - (this.pdsCWQtyShipPicked()
                                + qtyShipWMSandPickRegistered));

        if (!qtyRemainPick)
        {
            return qtyRemainPick;
        }

        switch (_pickUpdateQty)
        {
            case InventTransferPickUpdateQty::All             :
                qty = qtyRemainPick;
                break;

            case InventTransferPickUpdateQty::AvailableQty    :
                qty = max(0,-InventTransIdSum::newTransOriginId(
                    InventTransOriginTransferShip::findInventTransOriginId(
                        this.DataAreaId,
                        this.TransferId,
                        this.LineNum)).pdsCWReservPhysical());

                if (qty < qtyRemainPick)
                {
                    inventDim = InventDim::find(this.InventDimId);
                    inventDimParm.initFromInventDim(inventDim);
                    inventOnHandQty = InventOnHandQty::newItemDim(
                                    this.ItemId,
                                    inventDim,
                                    inventDimParm);
                    qty += inventOnHandQty.pdsCWAvailReservation(NoYes::No);
                }
                if (qty > qtyRemainPick)
                {
                    qty = qtyRemainPick;
                }
                break;

            case InventTransferPickUpdateQty::ReservedQty     :
                qty = max(0,-InventTransIdSum::newTransOriginId(
                    InventTransOriginTransferShip::findInventTransOriginId(
                        this.DataAreaId,
                        this.TransferId,
                        this.LineNum)).pdsCWReservPhysical());

                break;

            case InventTransferPickUpdateQty::ShipNow         :
                qty = this.PdsCWQtyShipNow;

                break;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcReceiveQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWCalcReceiveQty(
        InventTransferReceiveUpdateQty _receiveUpdateQty,
        InventTransferVoucherId _voucherShipmentId = '',
        InventTransferTable _inventTransferTable = null)
    {
        PdsCWInventQty  cwQty;
        InventTrans     inventTrans;
        InventTrans     inventTransreceipt;
        InventTransOriginTransferTransitTo      inventTransOriginTransferTransitTo;
        InventTransOriginTransferTransitFrom    inventTransOriginTransferTransitFrom;
        InventDim       inventDim;
        InventTransferJourLine inventTransferJourLine;

        switch (_receiveUpdateQty)
        {
            case InventTransferReceiveUpdateQty::All        :
                cwQty = this.PdsCWQtyShipped - this.PdsCWQtyReceived;
                break;

            case InventTransferReceiveUpdateQty::Registered :
                if (_inventTransferTable)
                {
                    inventDim = this.inventDimMergeWarehouse(
                                _inventTransferTable.InventLocationIdTo,
                                _inventTransferTable);
                    cwQty = this.pdsCWQtyReceiveRegistered(inventDim,true);
                }
                break;

            case InventTransferReceiveUpdateQty::Shipment   :
                if (_voucherShipmentId)
                {
                    while select TableId from inventTransOriginTransferTransitTo
                        where inventTransOriginTransferTransitTo.TransferTransitToDataAreaId    == this.DataAreaId
                           && inventTransOriginTransferTransitTo.TransferTransitToId            == this.TransferId
                           && inventTransOriginTransferTransitTo.TransferTransitToLineNum       == this.LineNum
                        join sum(PdsCWQty) from inventTrans  //Shipped
                            where inventTrans.InventTransOrigin                                 == inventTransOriginTransferTransitTo.InventTransOrigin
                               && inventTrans.StatusReceipt                                     == StatusReceipt::Purchased
                               && inventTrans.StatusIssue                                       == StatusIssue::None
                               && inventTrans.Voucher                                           == _voucherShipmentId
                            join TableId from inventDim
                                group by InventSerialId,InventBatchId,InventDimId
                                where inventDim.InventDimId     == inventTrans.InventDimId
                    {
                        select TableId from inventTransOriginTransferTransitFrom
                            where inventTransOriginTransferTransitFrom.TransferTransitFromDataAreaId    == this.DataAreaId
                               && inventTransOriginTransferTransitFrom.TransferTransitFromId            == this.TransferId
                               && inventTransOriginTransferTransitFrom.TransferTransitFromLineNum       == this.LineNum
                                join sum(PdsCWQty) from inventTransreceipt                            //not received with same inventDimId
                                    where   inventTransreceipt.InventTransOrigin                        == inventTransOriginTransferTransitFrom.InventTransOrigin
                                         && inventTransreceipt.StatusReceipt                            == StatusReceipt::None
                                         && inventTransreceipt.StatusIssue                              <= StatusIssue::ReservPhysical
                                         && inventTransreceipt.StatusIssue                              >= StatusIssue::Picked
                                         && inventTransreceipt.InventDimId                              == inventDim.InventDimId;
                        cwQty += min(
                                    inventTrans.PdsCWQty,
                                    -(inventTransreceipt.PdsCWQty));
                    }
                }
                else
                {
                    cwQty = 0;
                }
                break;

            case InventTransferReceiveUpdateQty::ReceiveNow   :
                cwQty = this.PdsCWQtyReceiveNow;

                break;

            case InventTransferReceiveUpdateQty::DocumentReturn_RU :
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && _voucherShipmentId)
                {
                    select sum(PdsCWQtyReceived) from inventTransferJourLine
                        where inventTransferJourLine.TransferId == this.TransferId &&
                              inventTransferJourLine.LineNum    == this.LineNum    &&
                              inventTransferJourLine.VoucherId  == _voucherShipmentId;

                    cwQty = -inventTransferJourLine.PdsCWQtyReceived;
                }
                break;
        }

        return cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcShipQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that can be shipped in catch weight units.
    /// </summary>
    /// <param name="_shipUpdateQty">
    ///    An <c>InventTransferShipUpdateQty</c> enumeration that is used to determine which Inventory transactions should be included in the calculation.
    /// </param>
    /// <param name="_voucherShipmentId">
    ///    Returned shipment voucher.
    /// </param>
    /// <returns>
    ///    An <c>PdsCWInventQty</c> data type that indicates the quantity in catch weight units that can be shipped.
    /// </returns>
    public PdsCWInventQty pdsCWCalcShipQty(InventTransferShipUpdateQty _shipUpdateQty, InventTransferVoucherId _voucherShipmentId = '')
    {
        PdsCWInventQty cwQty;
        InventTransferJourLine  inventTransferJourLine;

        switch (_shipUpdateQty)
        {
            case InventTransferShipUpdateQty::All             :
                cwQty = this.PdsCWQtyRemainShip;

                break;

            case InventTransferShipUpdateQty::AvailableQty    :
                cwQty = -InventTransIdSum::newTransOriginId(
                    InventTransOriginTransferShip::findInventTransOriginId(
                        this.DataAreaId,
                        this.TransferId,
                        this.LineNum)).pdsCWReservPhysical();

                if (cwQty < this.PdsCWQtyRemainShip)
                {
                    cwQty += InventOnHandQty::newPhysicalUpdate(
                                InventMovement::construct(this),
                                InventDim::find(
                                    this.InventDimId)).pdsCWAvailPhysical();
                }

                if (cwQty > this.PdsCWQtyRemainShip)
                {
                    cwQty = this.PdsCWQtyRemainShip;
                }
                break;

            case InventTransferShipUpdateQty::PickedQty       :
                cwQty = -InventTransIdSum::newTransOriginId(
                    InventTransOriginTransferShip::findInventTransOriginId(
                        this.DataAreaId,
                        this.TransferId,
                        this.LineNum)).pdsCWPicked();

                break;

            case InventTransferShipUpdateQty::ReservedQty     :
                cwQty = -InventTransIdSum::newTransIdNoChildType(
                        InventTransOrigin::findByInventTransId(
                            this.InventTransId).RecId).pdsCWReservPhysical();

                break;

            case InventTransferShipUpdateQty::ShipNow         :
                cwQty = this.PdsCWQtyShipNow;

                break;

            case InventTransferShipUpdateQty::DocumentReturn_RU  :
                if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled()) && _voucherShipmentId)
                {
                    select sum(PdsCWQtyShipped) from inventTransferJourLine
                        where inventTransferJourLine.TransferId == this.TransferId &&
                              inventTransferJourLine.LineNum    == this.LineNum    &&
                              inventTransferJourLine.VoucherId  == _voucherShipmentId;

                    cwQty = -inventTransferJourLine.PdsCWQtyShipped;
                }
                break;
        }

        return cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcCancelQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWCalcCancelQty(InventTransferShipUpdateQty _shipUpdateQty, InventTransferVoucherId _voucherShipmentId)
    {
        InventTransferJourLine  inventTransferJourLine;

        select sum(PdsCWQtyShipped) from inventTransferJourLine
            where inventTransferJourLine.TransferId == this.TransferId &&
                  inventTransferJourLine.LineNum    == this.LineNum    &&
                  inventTransferJourLine.VoucherId  == _voucherShipmentId;

        return -inventTransferJourLine.PdsCWQtyShipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyActivateRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the catch weight active remainder quantity.
    /// </summary>
    /// <returns>
    /// The Catch weight active remainder quantity.
    /// </returns>
    public display PdsCWInventQty pdsCWQtyActivateRemainder()
    {
        InventTransIdSum    inventTransIdSum;

        inventTransIdSum    = InventTransIdSum::newTransIdNoChildType(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum));

        return -inventTransIdSum.pdsCWEstimatedIssue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReceiveRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the registered quantity to be received in catch weight units.
    /// </summary>
    /// <param name="_inventDim">
    ///    An InventDim table record; optional.
    /// </param>
    /// <param name="_useDimTransferReceipt">
    ///    Boolean to indicate whether the dimension irrelevant to a transfer receipt are to be ignored;
    ///    optional.
    /// </param>
    /// <returns>
    ///    An <c>PdsCWInventQty</c> data type that reflects the registered catch weight quantity to be received.
    /// </returns>
    public PdsCWInventQty pdsCWQtyReceiveRegistered(
        InventDim _inventDim  = InventDim::find(this.InventDimId),
        boolean   _useDimTransferReceipt = false
        )
    {
        InventDimParm       inventDimParm;
        InventTransOriginId inventTransOriginId = InventTransOriginTransferReceive::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);

        if (_useDimTransferReceipt)
        {
            //ignore wmslocations but not location
            inventDimParm.initDimTransferReceipt(_inventDim);
            inventDimParm.InventLocationIdFlag = NoYes::Yes;
        }
        else
        {
            inventDimParm.initFromInventDim(_inventDim);
        }

        return InventTransSum::newStandard().pdsCWidRegistered(
                    inventTransOriginId,
                    InventTransChildType::None,
                    '',
                    _inventDim,
                    inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReservedOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the catch weight reserved on order quantity.
    /// </summary>
    /// <returns>
    /// Catch weight reserved on order quantity.
    /// </returns>
    public display PdsCWInventQty pdsCWQtyReservedOnOrder()
    {
        InventTransOriginId inventTransOriginId()
        {
            return InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        }

        return -InventTransIdSumSingleStatus::pdsCWQtyReserveOrdered(inventTransOriginId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReservedPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the catch weight reserved physical quantity.
    /// </summary>
    /// <returns>
    /// Catch weight reserved physical quantity.
    /// </returns>
    public display PdsCWInventQty pdsCWQtyReservedPhysical()
    {
        InventTransOriginId inventTransOriginId()
        {
            return InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        }

        return -InventTransIdSumSingleStatus::pdsCWQtyReservPhysical(inventTransOriginId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyShipPicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the picked quantity for shipments in catch weight units.
    /// </summary>
    /// <param name="_inventDim">
    ///    An InventDim table record; optional.
    /// </param>
    /// <returns>
    ///    An<c> InventTransferQty</c> data type that reflects the quantity picked.
    /// </returns>
    public InventTransferQty pdsCWQtyShipPicked(InventDim _inventDim = InventDim::find(this.InventDimId))
    {
        InventDimParm       inventDimParm;
        InventTransOriginId inventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);

        inventDimParm.initFromInventDim(_inventDim);

        return -InventTransSum::newStandard().pdsCWidPicked(
                        inventTransOriginId,
                        InventTransChildType::None,
                        '',
                        _inventDim,
                        inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyShipPickedAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the catch weight picked quantity.
    /// </summary>
    /// <returns>
    /// Catch weight picked quantity.
    /// </returns>
    public display PdsCWQtyTransfer pdsCWQtyShipPickedAll()
    {
        InventTransOriginId inventTransOriginId()
        {
            return InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        }
        return -InventTransIdSumSingleStatus::pscCWQtyPicked(inventTransOriginId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyShipWMS</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the entire quantity that has a child reference to
    ///     the picking list or the warehouse management order.
    /// </summary>
    /// <returns>
    ///     The catch-weight quantity of the order.
    /// </returns>
    /// <remarks>
    ///     Both On-Order and reserved transactions are included in the search.
    /// </remarks>
    public PdsCWInventQty pdsCWQtyShipWMS()
    {
        InventTransOriginId     shipInventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);

        return -(select sum(PdsCWQty) from inventTrans
                    where inventTrans.InventTransOrigin == shipInventTransOriginId
                       && inventTrans.TransChildType    == InventTransChildType::WMSOrder).PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyShipWMSNotReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the catch weight warehouse management system not reserved quantity.
    /// </summary>
    /// <returns>
    /// The catch weight warehouse management not reserved quantity.
    /// </returns>
    public display PdsCWInventQty pdsCWQtyShipWMSNotReserved()
    {
        InventTransIdSum    inventTransIdSum;

        if (!this.InventTransId)
        {
            return 0;
        }

        inventTransIdSum    = InventTransIdSum::newTransIdChildType(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum), InventTransChildType::WMSOrder, '');

        return -(inventTransIdSum.pdsCWReserveOrdered() + inventTransIdSum.pdsCWOnOrder());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyShipWMSReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the catch weight warehouse management system reserved quantity.
    /// </summary>
    /// <returns>
    /// The catch weight warehouse management reserved quantity.
    /// </returns>
    public display PdsCWInventQty pdsCWQtyShipWMSReserved()
    {
        InventTransIdSum    inventTransIdSum;

        if (!this.InventTransId)
        {
            return 0;
        }

        inventTransIdSum    = InventTransIdSum::newTransIdChildType(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum), InventTransChildType::WMSOrder, '');

        return -inventTransIdSum.pdsCWReserved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether the field update in progress requires a re-reservation of inventory.
    /// </summary>
    /// <returns>
    ///     false if the validation does not allow the field being updated.
    /// </returns>
    public boolean pdsUpdateReservation()
    {
        boolean ret = true;
        // the fetch hits the cache so can return in the same tier if its not a shelf life item.
        if (InventTable::find(this.ItemId).isShelfLifeItem())
        {
            ret = this.pdsUpdateReservationServer(FormDataUtil::isFormDataSource(this));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateReservationServer</Name>
				<Source><![CDATA[
    private boolean pdsUpdateReservationServer(boolean _calledFromDataSource, PdsShelfLifeDateChangeValidatorFactory _factory = PdsShelfLifeDateChangeValidatorFactory::construct())
    {
        // if it's triggered from salesline and the trans id is not created yet, skip the validation
        if (!this.InventTransId)
        {
            return true;
        }
        PdsShelfLifeIDateChangeValidator  dateValidator = _factory.createDateValidatorFromOrderLine(this);
        return dateValidator.validateDateValueChanged(fieldNum(InventTransferLine, ReceiveDate), !_calledFromDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitFromInventTransferTableBR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs Brazilian specific initialization on the <c>InventTransferLineFiscalInfo_BR</c> table record
    /// associated with the line based on values from the <c>InventTransferTable</c> table passed as argument.
    /// </summary>
    /// <param name="_inventTransferTable">
    /// The inventory transfer table record.
    /// </param>
    /// <param name="_initShipReceiveDates">
    /// A Boolean value to determine whether the ship and receive dates should be updated.
    /// </param>
    private void postInitFromInventTransferTableBR(InventTransferTable _inventTransferTable, boolean _initShipReceiveDates)
    {
        InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo_BR = this.inventTransferLineFiscalInfo_BR();

        inventTransferLineFiscalInfo_BR.InventTransferTable = _inventTransferTable.TransferId;
        this.packInventTransferLineFiscalInfo_BR(inventTransferLineFiscalInfo_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInsertBR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Post insertion event handler.
    /// </summary>
    /// <param name="_dropEstimated">
    ///    A <c>NoYes</c> enum value indicating whether the estimated inventory quantity is to be dropped.
    /// </param>
    /// <remarks>
    ///    Applies only to Brazil.
    /// </remarks>
    public void postInsertBR(NoYes _dropEstimated = NoYes::No)
    {
        this.SysExtensionSerializerMap::postInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateBR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls a method to update/insert the extension tables records.
    /// </summary>
    /// <param name="_dropEstimated">
    /// A <c>NoYes</c> enumeration value; optional.
    /// </param>
    /// <param name="_updateHeader">
    /// Indicates whether the header record must be updated; optional.
    /// </param>
    public void postUpdateBR(NoYes _dropEstimated = NoYes::No, NoYes _updateHeader = NoYes::Yes)
    {
        this.SysExtensionSerializerMap::postUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyActivateRemainder</Name>
				<Source><![CDATA[
    display public InventQty qtyActivateRemainder()
    {
        InventTransIdSum    inventTransIdSum;

        inventTransIdSum    = InventTransIdSum::newTransIdNoChildType(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum));

        return -inventTransIdSum.estimatedIssue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReceiveRegistered</Name>
				<Source><![CDATA[
    private InventTransferQty qtyReceiveRegistered(
        InventDim   _inventDim              = InventDim::find(this.InventDimId),
        boolean     _useDimTransferReceipt  = false)
    {
        InventDimParm           inventDimParm;
        InventTransOriginId     inventTransOriginId = InventTransOriginTransferReceive::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);

        if (_useDimTransferReceipt)
        {
            //ignore wmslocations but not location
            inventDimParm.initDimTransferReceipt(_inventDim);
            inventDimParm.InventLocationIdFlag = NoYes::Yes;
        }
        else
        {
            inventDimParm.initFromInventDim(_inventDim);
        }

        return InventTransSum::newChildTypeInventDim().originRegistered(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReservedOnOrder</Name>
				<Source><![CDATA[
    display public InventQtyReservOrdered qtyReservedOnOrder()
    {
        InventTransOriginId inventTransOriginId()
        {
            return InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        }

        return -InventTransIdSumSingleStatus::qtyReserveOrdered(inventTransOriginId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReservedPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>container</c> of the reserved physical and catch weight reserved physical  quantities.
    /// </summary>
    /// <returns>
    /// Reserved physical and catch weight reserved physical quantities.
    /// </returns>
    public container qtyReservedPhysical()
    {
        InventTransOriginId inventTransOriginId()
        {
            return InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        }

        return [-InventTransIdSumSingleStatus::qtyReservPhysical(inventTransOriginId()),
                -InventTransIdSumSingleStatus::pdsCWQtyReservPhysical(inventTransOriginId())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyShipPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the picked quantity for shipments.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> table record; optional.
    /// </param>
    /// <returns>
    /// An<c> InventTransferQty</c> data type that reflects the quantity picked.
    /// </returns>
    public InventTransferQty qtyShipPicked(InventDim       _inventDim  = InventDim::find(this.InventDimId))
    {
        InventDimParm           inventDimParm;
        InventTransOriginId     inventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);

        inventDimParm.initConsistentDimensionsGeneral();

        return -InventTransSum::newChildTypeInventDim().originPicked(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyShipPickedAll</Name>
				<Source><![CDATA[
    display public InventTransferQty qtyShipPickedAll()
    {
        InventTransOriginId inventTransOriginId()
        {
            return InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        }
        return -InventTransIdSumSingleStatus::qtyPicked(inventTransOriginId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyShipReservedPhysical</Name>
				<Source><![CDATA[
    /**
        Returns quantity that is reserved physical
    */
    public
    container
    qtyShipReservedPhysical(
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm,
        NoYes                   _prChildTransType       = NoYes::No,
        InventTransChildType    _childType              = InventTransChildType::None)
    {
        InventTransOriginId inventTransOriginId()
        {
            return InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);
        }

        if (_prChildTransType)
        {
            return
                [
                -InventTransIdSumSingleStatus::qtyReservPhysicalDimensionChildType(inventTransOriginId(), _inventDimCriteria, _inventDimParm, _childType, ''),
                -InventTransIdSumSingleStatus::pdsCWQtyReservPhysicalDimensionChildType(inventTransOriginId(), _inventDimCriteria, _inventDimParm, _childType, '')
                ]
                ;
        }

        return
            [
            -InventTransIdSumSingleStatus::qtyReservPhysicalDimension(inventTransOriginId(), _inventDimCriteria, _inventDimParm),
            -InventTransIdSumSingleStatus::pdsCWQtyReservPhysicalDimension(inventTransOriginId(), _inventDimCriteria, _inventDimParm)
            ]
            ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyShipWMS</Name>
				<Source><![CDATA[
    /*
        Returns the entire quantity that has child reference to wms orders
        Both On-order and reserved transactions are included
    */
    public InventQty qtyShipWMS()
    {
        InventTransOriginId     shipInventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum);

        return -(select sum(Qty) from inventTrans
                    where inventTrans.InventTransOrigin == shipInventTransOriginId
                       && inventTrans.TransChildType    == InventTransChildType::WMSOrder).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyShipWMSNotReserved</Name>
				<Source><![CDATA[
    /**
        Returns the quantity that has child reference to wms orders and are not reserved
    */
    display public InventQty qtyShipWMSNotReserved()
    {
        InventTransIdSum    inventTransIdSum;

        if (!this.InventTransId)
        {
            return 0;
        }

        inventTransIdSum    = InventTransIdSum::newTransIdChildType(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum), InventTransChildType::WMSOrder, '');

        return -(inventTransIdSum.reserveOrdered() + inventTransIdSum.onOrder());
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyShipWMSReserved</Name>
				<Source><![CDATA[
    /**
        Returns the quantity that has child reference to wms orders and are reserved physical
    */
    display public InventQty qtyShipWMSReserved()
    {
        InventTransIdSum    inventTransIdSum;

        if (!this.InventTransId)
        {
            return 0;
        }

        inventTransIdSum    = InventTransIdSum::newTransIdChildType(InventTransOriginTransferShip::findInventTransOriginId(this.DataAreaId, this.TransferId, this.LineNum), InventTransChildType::WMSOrder, '');

        return -inventTransIdSum.reserved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryValueInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a string representation of a <c>queryValue</c> method that returns the
    /// <c>InventTransOrigin</c> records that are related to the line.
    /// </summary>
    /// <returns>
    /// A string representation of a <c>queryValue</c> method.
    /// </returns>
    public str queryValueInventTransId()
    {
        str     s;

        s = '(';
        s += '((' + fieldStr(InventTransOrigin,InventTransId)+' == \"'+this.InventTransId+'\"))';
        s += ' || ';
        s += '((' + fieldStr(InventTransOrigin,InventTransId)+' == \"'+this.InventTransIdTransitTo+'\"))';
        s += ' || ';
        s += '((' + fieldStr(InventTransOrigin,InventTransId)+' == \"'+this.InventTransIdTransitFrom+'\"))';
        s += ' || ';
        s += '((' +fieldStr(InventTransOrigin,InventTransId)+' == \"'+this.InventTransIdReceive+'\"))';
        if (this.InventTransIdScrap)
        {
            s += ' || ';
            s += '((' +fieldStr(InventTransOrigin,InventTransId)+' == \"'+this.InventTransIdScrap+'\"))';
        }

        s +=')';

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiveTransDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the receive date at midnight in the time zone of the receiving site.
    /// </summary>
    /// <returns>
    ///    Receive date and time in UTC when it is midnight on the receive date on the receiving site.
    /// </returns>
    public TransDateTime receiveTransDateTime()
    {
        return DateTimeUtil::newDateTime(this.ReceiveDate, 0, this.timeZoneReceivingSite());
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTransFields</Name>
				<Source><![CDATA[
    private void resetTransFields()
    {
        this.OverDeliveryPct    = 0;
        this.UnderDeliveryPct   = 0;
        this.QtyReceived        = 0;
        this.QtyReceiveNow      = 0;
        this.QtyRemainReceive   = 0;
        this.QtyRemainShip      = 0;
        this.QtyScrapped        = 0;
        this.QtyShipNow         = 0;
        this.QtyShipped         = 0;
        this.InventDimId        = InventDim::inventDimIdBlank();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to set the UnitPrice.
    /// </summary>
    public void setCostPrice_IN()
    {
        InventTransferLine_IN inventTransferLineIN = this.inventTransferLine_IN();
        inventTransferLineIN.UnitPrice  = this.itemCostPrice_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the delivery date control type for the current inventory transfer line.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension to use to find the delivery date control type; optional.
    /// </param>
    public void setDeliveryDateControlType(InventDimId _inventDimId = this.InventDimId)
    {
        InventTransferTable             inventTransferTable;
        SalesATPSettingsMap             salesATPSettingsMap;

        salesATPSettingsMap = SalesATPCalculation::findItemOrderSettings(this.ItemId, _inventDimId);

        if (salesATPSettingsMap.IsItemSpecific)
        {
            this.DeliveryDateControlType    = salesATPSettingsMap.DeliveryDateControlType;
            this.atpTimeFence               = salesATPSettingsMap.atpTimeFence;
            this.atpInclPlannedOrders       = salesATPSettingsMap.atpInclPlannedOrders;
            this.atpApplyDemandTimeFence    = salesATPSettingsMap.atpApplyDemandTimeFence;
            this.atpApplySupplyTimeFence    = salesATPSettingsMap.atpApplySupplyTimeFence;
            this.atpBackwardDemandTimeFence = salesATPSettingsMap.atpBackwardDemandTimeFence;
            this.atpBackwardSupplyTimeFence = salesATPSettingsMap.atpBackwardSupplyTimeFence;
        }
        else
        {
            inventTransferTable             = this.inventTransferTable();
            this.DeliveryDateControlType    = inventTransferTable.DeliveryDateControlType;
            this.atpTimeFence               = inventTransferTable.atpTimeFence;
            this.atpInclPlannedOrders       = inventTransferTable.atpInclPlannedOrders;
            this.atpApplyDemandTimeFence    = inventTransferTable.atpApplyDemandTimeFence;
            this.atpApplySupplyTimeFence    = inventTransferTable.atpApplySupplyTimeFence;
            this.atpBackwardDemandTimeFence = inventTransferTable.atpBackwardDemandTimeFence;
            this.atpBackwardSupplyTimeFence = inventTransferTable.atpBackwardSupplyTimeFence;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimTo_RU</Name>
				<Source><![CDATA[
    public void setInventDimTo_RU(InventTransferTable _inventTransferTable = this.inventTransferTable())
    {
        InventDim   inventDim;
        InventDim   inventDimProfile;

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) ||
            ! this.InventDimIdTo_RU ||
            ! InventDim::find(this.InventDimIdTo_RU).InventProfileId_RU)
        {
            this.InventDimIdTo_RU = InventDim::findOrCreateBlank().InventDimId;
            return;
        }

        inventDim = this.inventDimMergeWarehouse(this.inventTransferTable().InventLocationIdTo, _inventTransferTable);
        // save current invent profile Id value
        inventDimProfile = InventDim::find(this.InventDimIdTo_RU);
        // overwrite profile value
        inventDim.InventProfileId_RU = inventDimProfile.InventProfileId_RU;
        // create new dim if needed
        this.InventDimIdTo_RU = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransferStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transfer order header status.
    /// </summary>
    public void setInventTransferStatus()
    {
        InventTransferTable inventTransferTable;

        ttsbegin;
        inventTransferTable  = this.inventTransferTable(true);
        inventTransferTable.setInventTransferStatus();

        if (inventTransferTable.TransferStatus != inventTransferTable.orig().TransferStatus)
        {
            inventTransferTable.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrice_RU</Name>
				<Source><![CDATA[
    public void setPrice_RU(InventTransferTable _inventTransferTable = this.inventTransferTable())
    {
        PriceDisc           priceDisc;

        if (!_inventTransferTable.CurrencyCode_RU)
        {
            return;
        }

        this.Price_RU       = 0;
        this.PriceUnit_RU   = 0;

        priceDisc = this.createPriceDiscInstance_RU(this.createAndInitPriceDiscParameters_RU(_inventTransferTable));

        if (!priceDisc.findPrice(_inventTransferTable.PriceGroupId_RU))
        {
            priceDisc.findItemPrice();
        }

        this.Price_RU       = priceDisc.price();
        this.PriceUnit_RU   = priceDisc.priceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters_RU()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_inventTransferTable">An <c>InventTransferTable</c> record.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters_RU(InventTransferTable _inventTransferTable)
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters_RU();

        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(this.ItemId);
        parameters.parmInventDim(this.inventDim());
        parameters.parmUnitID(this.UnitId);
        parameters.parmPriceDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        parameters.parmQty(this.QtyTransfer);
        parameters.parmAccountNum(_inventTransferTable.partyCustTable_RU().AccountNum);
        parameters.parmCurrencyCode(_inventTransferTable.CurrencyCode_RU);
        parameters.parmAgreementHeaderExt_RU(_inventTransferTable.partySalesAgreementHeaderExt_RU().RecId);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance_RU(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceUnit</Name>
				<Source><![CDATA[
    public display PriceUnit  salesPriceUnit()
    {
        return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales).getPriceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipTransDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the ship date at midnight in the time zone of the shipping site.
    /// </summary>
    /// <returns>
    ///    Ship date and time in UTC when it is midnight on the ship date on the shipping site.
    /// </returns>
    public TransDateTime shipTransDateTime()
    {
        return DateTimeUtil::newDateTime(this.ShipDate, 0, this.timeZoneShippingSite());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPerformInventStatusValidation_BR</Name>
				<Source><![CDATA[
    private NoYes shouldPerformInventStatusValidation_BR()
    {
        InventTransferTableFiscalInfo_BR    fiscalInfo_BR;
        NoYes                               performStatusValidation = NoYes::Yes;

        if (BrazilParameters::isEnabled())
        {
            fiscalInfo_BR = this.inventTransferTable().inventTransferTableFiscalInfo_BR();

            if (fiscalInfo_BR.InventTransferOrderType == InventTransferOrderType_BR::FiscalEstablishmentReturn
                || fiscalInfo_BR.InventTransferOrderType == InventTransferOrderType_BR::ThirdPartyReturn)
            {
                return NoYes::No;
            }
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneReceivingSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the time zone associated with the receiving site on the current transfer order.
    /// </summary>
    /// <returns>
    ///    The site time zone.
    /// </returns>
    public display Timezone timeZoneReceivingSite()
    {
        return InventSite::timeZoneSite(this.inventDimReceive().InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneShippingSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the time zone associated with the shipping site on the current transfer order.
    /// </summary>
    /// <returns>
    ///    The site time zone.
    /// </returns>
    public display Timezone timeZoneShippingSite()
    {
        return InventSite::timeZoneSite(this.inventDimShip().InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayTotalFreight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total freight costs for the transfer line.
    /// </summary>
    /// <returns>
    /// The total freight cost for the line.
    /// </returns>
    public display TMSRate tmsDisplayTotalFreight()
    {
        TMSTransferCharges      transferCharges;
        CurrencyExchangeHelper  currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        CurrencyCode            companyCurrency = CompanyInfoHelper::standardCurrency();

        select firstonly sum(Value), CurrencyCode
            from transferCharges
            group by transferCharges.CurrencyCode
            where transferCharges.ModuleType        == MarkupModuleType::Invent
                && transferCharges.TransferId       == this.TransferId
                && transferCharges.TransferLineNum  == this.LineNum;

        return currencyExchangeHelper.calculateCurrencyToCurrency(transferCharges.CurrencyCode, companyCurrency, transferCharges.Value, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates an instance of <c>InventTransferLineUpdateParameters</c> class
    /// </summary>
    /// <param name = "_estimation">Estimation parameters for transfer line</param>
    /// <returns></returns>
    public InventTransferLineUpdateParameters createUpdateParameters(InventTransferLineEstimation _estimation)
    {
        InventTransferLineUpdateParameters parameters = InventTransferLineUpdateParameters::construct();
        parameters.updateLoadLines = true;
        parameters.estimation = _estimation;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateParametersFromLegacy</Name>
				<Source><![CDATA[
    private InventTransferLineUpdateParameters createUpdateParametersFromLegacy(
        NoYes _dropEstimated,
        NoYes _updateHeader)
    {
        InventTransferLineEstimation estimation = InventTransferLineEstimation::newFromLine(this);
        estimation.parmDropEstimated(_dropEstimated);
        estimation.parmUpdateHeader(_updateHeader);

        InventTransferLineUpdateParameters parameters = InventTransferLineUpdateParameters::construct();
        parameters.updateLoadLines = true;
        parameters.estimation = estimation;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record in the database.
    /// </summary>
    /// <param name="_parameters">
    /// Either a <c>InventTransferLineUpdateParameters</c> instance or (for backwards compatibility) a <c>NoYes</c> value to drop estimated data; optional.
    /// </param>
    /// <param name="_updateHeader">
    /// Indicates whether the header record must be updated; optional. This is only applicable when the first parameter is a <c>NoYes</c> value.
    /// </param>
    /// <remarks>
    /// If the <paramref name="_updateHeader" /> parameter is set to the <c>NoYes::Yes</c> enumeration
    /// value, the estimated transactions related to the line are not updated.
    /// </remarks>
    public void update(
        anytype _parameters = null,
        NoYes _updateHeader = NoYes::Yes)
    {
        boolean autoUpdateShipmentBeforeAutoReservationFlightEnabled = WHSAutoUpdateShipmentBeforeAutoReservationFlight::instance().isEnabled();
        InventTransferLineUpdateParameters parameters;

        if (_parameters == null)
        {
            parameters = this.createUpdateParametersFromLegacy(NoYes::No, _updateHeader);
        }
        else
        {
            switch (typeOf(_parameters))
            {
                case Types::Class:
                    parameters = _parameters as InventTransferLineUpdateParameters;
                    break;

                case Types::Enum:
                    NoYes dropEstimated = _parameters;
                    parameters = this.createUpdateParametersFromLegacy(dropEstimated, _updateHeader);
                    break;
            }
        }

        if (!parameters)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        boolean isCountryRegionRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (!isCountryRegionRU
            && !this.inventTransferTable().isEditable())
        {
            throw error("@SCM:TransferOrderStatusNotEditable");
        }

        if (isCountryRegionRU)
        {
            this.setInventDimTo_RU();

            if (this.QtyTransfer    != this.orig().QtyTransfer  ||
                this.Price_RU       != this.orig().Price_RU     ||
                this.PriceUnit_RU   != this.orig().PriceUnit_RU)
            {
                this.LineAmount_RU = this.calcLineAmount_RU();
            }
        }

        // Check if status is specified. This item cannot be put in validateWrite as the inventDimId will be out of date
        boolean isItemWHSEnabled = WHSInventEnabled::exist(this.ItemId);
        if (isItemWHSEnabled)
        {
            if (!InventDim::find(this.InventDimId).InventStatusId)
            {
                throw error ("@WAX3379");
            }
        }

        InventTransferLine origTransferLine = this.orig();
        var estimation = parameters.estimation;
        ttsbegin;
        
        estimation.updateEstimatedPre();

        super();

        if (autoUpdateShipmentBeforeAutoReservationFlightEnabled && parameters.updateLoadLines)
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);

            this.updateLoadLinesHandling(isCWItem ? origTransferLine.PdsCWQtyTransfer : origTransferLine.QtyTransfer,
                                         isCWItem ? this.PdsCWQtyTransfer : this.QtyTransfer,
                                         origTransferLine.InventDimId);
        }

        estimation.updateEstimatedOnUpdate();
        estimation.updateEstimatedPost();

        if (!autoUpdateShipmentBeforeAutoReservationFlightEnabled && parameters.updateLoadLines)
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);

            this.updateLoadLinesHandling(isCWItem ? origTransferLine.PdsCWQtyTransfer : origTransferLine.QtyTransfer,
                                         isCWItem ? this.PdsCWQtyTransfer : this.QtyTransfer,
                                         origTransferLine.InventDimId);
        }
        ttscommit;

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && this.SalesPurchJournalLine::taxRecalculationNeeded(origTransferLine))
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliverRemainder</Name>
				<Source><![CDATA[
    public void updateDeliverRemainder()
    {
        InventTransferQtyRemain qtyRemainShipOld        = this.orig().QtyRemainShip;
        PdsCWQtyRemainShip      pdsCWQtyRemainShipOld   = this.orig().PdsCWQtyRemainShip;

        ttsbegin;

        this.updateEstimated(NoYes::No,
            this.QtyRemainReceive - (this.orig().QtyRemainShip - this.QtyRemainShip),
            NoYes::Yes,
            this.PdsCWQtyRemainReceive - (this.orig().PdsCWQtyRemainShip - this.PdsCWQtyRemainShip));

        boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);

        this.updateLoadLinesHandlingQty(isCWItem ? pdsCWQtyRemainShipOld : qtyRemainShipOld,
                                        isCWItem ? this.PdsCWQtyRemainShip : this.QtyRemainShip);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>RemainStatus</c> and estimated <c>InventTrans</c> fields that are related to the line.
    /// </summary>
    /// <param name="_dropEstimated">
    ///    A <c>NoYes</c> enumeration value. When set to yes the estimated transactions related to the line is not updated; optional.
    /// </param>
    /// <param name="_qtyRemainReceive">
    ///    New value of remain to receive quantity; optional.
    /// </param>
    /// <param name="_updateHeader">
    ///    Indicates whether the header record need to be updated; optional.
    /// </param>
    /// <param name="_cwQtyRemainReceive">
    ///    New value of remain to receive catch weight quantity; optional.
    /// </param>
    /// <param name="_skipReservation">
    /// Optional, true if reservation updates should not be attempted; otherwise, false.
    /// </param>
    public void updateEstimated(
        NoYes       _dropEstimated = NoYes::No,
        InventQty   _qtyRemainReceive = this.QtyRemainReceive,
        NoYes       _updateHeader  = NoYes::Yes,
        PdsCWInventQty  _cwQtyRemainReceive = this.PdsCWQtyRemainReceive,
        boolean         _skipReservation = false)
    {
        InventTransferLineEstimation estimation = InventTransferLineEstimation::newFromLine(this);
        estimation.parmDropEstimated(_dropEstimated);
        estimation.parmUpdateHeader(_updateHeader);
        estimation.parmSkipReservation(_skipReservation);
        estimation.parmQtyRemainReceive(_qtyRemainReceive);
        estimation.parmCwQtyRemainReceive(_cwQtyRemainReceive);
        
        InventTransferLineUpdateParameters parameters = InventTransferLineUpdateParameters::construct();
        parameters.updateLoadLines = false;
        parameters.estimation = estimation;

        ttsbegin;
        this.update(parameters);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>WHSLoadLine</c> table and tracked quantities in <c>WHSInventTransferLine</c> table.
    /// </summary>
    /// <param name="_oldQty">
    /// Previous value for quantity.
    /// </param>
    /// <param name="_newQty">
    /// New value for quantity.
    /// </param>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the updateLoadLinesHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public void updateLoadLines(InventQty _oldQty, InventQty _newQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.ItemId);

        this.updateLoadLinesHandlingQuantities(_oldQty, _newQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLinesHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>WHSLoadLine</c> table and tracked quantities in <c>WHSInventTransferLine</c> table.
    /// </summary>
    /// <param name="_oldHandlingQty">
    /// Previous value for quantity in the handling unit.
    /// </param>
    /// <param name="_newHandlingQty">
    /// New value for quantity in the handling unit.
    /// </param>
    [Hookable(true)]
    public void updateLoadLinesHandlingQty(InventHandlingQty _oldHandlingQty, InventHandlingQty _newHandlingQty)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.ItemId))
        {
            this.updateLoadLinesHandlingQuantities(_oldHandlingQty, _newHandlingQty);
        }
        else
        {
            this.updateLoadLines(_oldHandlingQty, _newHandlingQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLinesHandling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>WHSLoadLine</c> table with tracking of inventory dimensions and quantities in <c>WHSInventTransferLine</c> table.
    /// </summary>
    /// <param name="_oldHandlingQty">
    /// Previous value for quantity in the handling unit.
    /// </param>
    /// <param name="_newHandlingQty">
    /// New value for quantity in the handling unit.
    /// </param>
    /// <param name="_oldInventDimId">
    /// Previous value for inventory dimensions.
    /// </param>
    private void updateLoadLinesHandling(InventHandlingQty _oldHandlingQty, InventHandlingQty _newHandlingQty, InventDimId _oldInventDimId)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.ItemId))
        {
            WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.ItemId);
        }

        this.updateLoadLinesHandlingQuantities(_oldHandlingQty, _newHandlingQty, _oldInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLinesHandlingQuantities</Name>
				<Source><![CDATA[
    private void updateLoadLinesHandlingQuantities(InventHandlingQty _oldHandlingQty, InventHandlingQty _newHandlingQty, InventDimId _oldInventDimId = this.orig().InventDimId)
    {
        boolean isItemWHSEnabled = WHSInventEnabled::exist(this.ItemId);
        boolean isItemTMSEnabled = TMSInventEnabled::exist(this.ItemId);

        if (isItemWHSEnabled || isItemTMSEnabled)
        {
            InventTableModule inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent);

            if (inventTableModule.RecId)
            {
                boolean autoCreate = (isItemWHSEnabled && WHSParameters::find().AutoCreateLoadTO)
                                  || (isItemTMSEnabled && TMSParameters::find().AutoCreateLoadTO);
                
                UnitOfMeasureSymbol inventUnitId;
                boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
                
                if (isCWItem)
                {
                    // If catch weight item use catch weight unit
                    inventUnitId = PdsCatchWeightItem::pdsCWUnitId(this.ItemId);
                }
                else
                {
                    inventUnitId = inventTableModule.UnitId;
                }

                var srcLineChangeLoadLineUpdater = WHSSrcLineChangeLoadLineUpdater::newFromUpdateParameters(this,
                                                                                                              this.InventTransId,
                                                                                                              this.InventDimId,
                                                                                                              _oldInventDimId,
                                                                                                              _newHandlingQty,
                                                                                                              _oldHandlingQty,
                                                                                                              inventUnitId,
                                                                                                              inventUnitId,
                                                                                                              autoCreate);

                srcLineChangeLoadLineUpdater.updateLoadLines();

                WHSTransferLineUpdater transferLineUpdater = WHSSourceLineUpdater::newFromSourceLineTableBuffer(this);
                
                transferLineUpdater.setHandlingUpdateQuantitiesOverrideNewQty(this,
                                                                        _oldHandlingQty,
                                                                        _newHandlingQty,
                                                                        inventUnitId,
                                                                        srcLineChangeLoadLineUpdater.getloadLineDiffHandlingQty());        
                      
                transferLineUpdater.updateTable();
            }
            else
            {
                checkFailed(strFmt("@SYS5700", this.ItemId, ModuleInventPurchSales::Invent));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the price of Item based on the TransferPrice MethodPriceTrans_IN whether it is FixedPrice or CostPlus.
    /// </summary>
    /// <returns>
    /// Returns the ItemPrice after evaluation.
    /// </returns>
    public real updateTransferPrice_IN()
    {
        TransferPrice_IN          transPrice;
        PriceCur				  itemPrice;
        CostPrice                 costPrice;
        ExchRate                  exchRate;
        CurrencyCode              currencyCode;
        ExchangeRateType          exchangeRateType;
        ExchangeRateTypeRecId     exchangeRateTypeRecId;
        ExchangeRateDisplayFactor exchangeRateDisplayFactor;

        transPrice = this.getTransferPrice_IN(this);
        costPrice = this.itemCostPrice_IN();
        exchRate  = 1;

        if (transPrice && transPrice.Currency != Ledger::accountingCurrency())
        {
            currencyCode = Ledger::accountingCurrency();

            exchangeRateTypeRecId = Ledger::defaultExchangeRateType(CompanyInfo::findDataArea(curext()).RecId);

            exchangeRateType = ExchangeRateType::find(exchangeRateTypeRecId);

            exchangeRateDisplayFactor = ExchangeRateCurrencyPair::getExchangeRateDisplayFactor(transPrice.Currency, currencyCode, exchangeRateType.RecId, true);

            exchRate = ExchangeRateHelper::exchRate(transPrice.Currency) / InventTransferLine::getNumericDisplayFactor(exchangeRateDisplayFactor);
        }

        if (transPrice.MethodPriceTrans_IN == MethodPriceTrans_IN::FixedPrice)
        {
            itemPrice = transPrice.Price * exchRate;
        }
        else if (transPrice.MethodPriceTrans_IN == MethodPriceTrans_IN::CostPlus)
        {
            itemPrice = (costPrice + (costPrice * transPrice.Price / 100)) * exchRate ;
        }

        return itemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the line can be deleted.
    /// </summary>
    /// <returns>
    ///    true if the line can be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The line cannot be deleted if a quantity still remains to be shipped or received.
    /// </remarks>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.QtyShipped && this.QtyRemainReceive)
        {
            ret = checkFailed("@SYS78844");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a specified field.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The field ID of the field to check.
    /// </param>
    /// <returns>
    /// true if the field passes validation; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The validation of the item to be transferred (ItemId field) comprises of:
    /// - Validating existence of item settings for all 3 warehouse's sites (shipping, shipped to and transfer).
    /// - Validating that the item is not stopped for inventory transactions on any of the sites where the shipping, shipped to and transfer
    ///   warehouses reside.
    /// </remarks>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                  ret;
        InventTableModule        inventTableModuleInvent;
        IntrastatTransactionCode intrastatTransactionCode;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case (fieldNum(InventTransferLine, ItemId)) :
                if (!EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventLocationId)))
                {
                    ret = checkFailed("@SYS70037");
                }

                inventTableModuleInvent = InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent);
                if (! inventTableModuleInvent.RecId)
                {
                    ret = ret && checkFailed(strFmt("@SYS5700",this.ItemId,ModuleInventPurchSales::Invent));
                }

                // Check that the item is inventoried
                if (ret && ! InventTable::find(this.ItemId).isStocked())
                {
                    ret = checkFailed("@SYS190619");
                }
                break;

            case (fieldNum(InventTransferLine,QtyTransfer)) :
                if (this.QtyTransfer <= 0)
                {
                    ret = checkFailed("@SYS78528");
                }
                break;

            case (fieldNum(InventTransferLine,QtyShipNow)) :
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) || BrazilParameters::isEnabled())
                {
                    break;
                }
                if (this.QtyShipNow < 0)
                {
                    ret = checkFailed("@SYS78529");
                }
                break;

            case (fieldNum(InventTransferLine,QtyReceiveNow)) :
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) || BrazilParameters::isEnabled())
                {
                    break;
                }
                if (this.QtyReceiveNow < 0)
                {
                    ret = checkFailed("@SYS78530");
                }
                break;

            case (fieldNum(InventTransferLine,DeliveryDateControlType)) :
                ret = ret && this.SalesDeliveryDateControlMap::checkDeliveryDateControlType(this.ItemId, InventTable::find(this.ItemId).isStocked());
                break;

            case (fieldNum(InventTransferLine, AmountValue)) :
                if (this.AmountValue)
                {
                    intrastatTransactionCode = IntrastatTransactionCode::find(this.TransactionCode);

                    if (intrastatTransactionCode.TransferOrderAmountValueType != TransferOrderAmountValueType::Manual)
                    {
                        ret = checkFailed(strFmt("@SYS4002032", intrastatTransactionCode.TransferOrderAmountValueType));
                    }
                }
                break;

            case (fieldNum(InventTransferLine, StatisticalValue)) :
                if (this.StatisticalValue)
                {
                    intrastatTransactionCode = IntrastatTransactionCode::find(this.TransactionCode);

                    if (intrastatTransactionCode.TransferOrderStatValueType != TransferOrderAmountValueType::Manual)
                    {
                        ret = checkFailed(strFmt("@SYS4002033", intrastatTransactionCode.TransferOrderStatValueType));
                    }
                }
                break;

            default:
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the record can be written to the database.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        TransDate   origReceiptDate;

        boolean     ret;

        this.initLineNum();

        ret = super();

        if (this.ShipDate > this.ReceiveDate)
        {
            ret = checkFailed("@SYS78769");
        }

        origReceiptDate = this.orig().ReceiveDate;

        if (origReceiptDate != dateNull() && this.ReceiveDate != origReceiptDate)
        {
            if (!this.pdsUpdateReservation())
            {
                this.ReceiveDate = origReceiptDate;
            }
        }

        ret = ret && this.checkNotStopped();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize line number if auto increment of line number feature is enabled.
    /// </summary>
    private void initLineNum()
    {
        if (!this.LineNum && this.TransferId)
        {
            this.LineNum = InventTransferLine::lastLineNum(this.TransferId) + 1.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays localized Item Name for forms.
    /// </summary>
    /// <returns>
    /// Localized string representing the Item Name.
    /// </returns>
    display ItemName whsDisplayItemName()
    {
        return EcoResProductTranslation::findByProductLanguage(InventTable::itemProduct(this.ItemId), Global::currentUserLanguage()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays receiving warehouse ID.
    /// </summary>
    /// <returns>
    /// A string representing ID of a receiving warehouse.
    /// </returns>
    display InventLocationId whsDisplayToWarehouse()
    {
        return InventDim::find(InventTrans::findTransId(this.InventTransIdReceive).InventDimId).InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDropoffAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a receiving warehouse address (Drop Off Address)
    /// </summary>
    /// <returns>
    /// Address string of the receiving warehouse to be displayed in forms.
    /// </returns>
    display Addressing whsDropoffAddress()
    {
        return this.inventTransferTable().toAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsMarkAsCrossDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the transfer line for cross-docking and saves the changes to the database.
    /// </summary>
    /// <remarks>
    /// Only affects transfers of WHS items.
    /// </remarks>
    public void whsMarkAsCrossDock()
    {
        WHSInventTransferLine whsTransferLine;

        if (!this.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        whsTransferLine = WHSInventTransferLine::find(this.RecId, true);

        if (whsTransferLine)
        {
            whsTransferLine.CrossDock = true;
            whsTransferLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsPickupAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a pick up warehouse address.
    /// </summary>
    /// <returns>
    /// Address string for the pick up warehouse to be displayed in forms.
    /// </returns>
    display Addressing whsPickupAddress()
    {
        return this.inventTransferTable().fromAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsQtyInWorkReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays quantity for the corresponding receiving work inventory transaction.
    /// </summary>
    /// <returns>
    /// The quantity for the corresponding receiving work inventory transaction.
    /// </returns>
    display WHSQtyInWork whsQtyInWorkReceive()
    {
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter;

        if (!this.InventTransId)
        {
            return 0;
        }

        releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        return releasedProductUnitConverter.convert(WHSInvent::getQtyInWork(this.InventTransIdReceive),
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId),
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(this.UnitId),
                                                    NoYes::No,
                                                    this.ItemId,
                                                    this.InventDimId,
                                                    NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsQtyInWorkShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays quantity for the corresponding outbound work inventory transaction.
    /// </summary>
    /// <returns>
    /// The quantity for the corresponding outbound work inventory transaction.
    /// </returns>
    display WHSQtyInWork whsQtyInWorkShip()
    {
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        if (!this.InventTransId)
        {
            return 0;
        }

        return releasedProductUnitConverter.convert(WHSInvent::getQtyInWork(this.InventTransId),
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId),
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(this.UnitId),
                                                    NoYes::No,
                                                    this.ItemId,
                                                    this.InventDimId,
                                                    NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDefaultDimensionControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the user should be able to change the Financial Dimensions used during ledger posting.
    /// </summary>
    /// <returns>
    /// true, if the user should be able to change the Financial Dimensions, false otherwise.
    /// </returns>
    public static boolean enableDefaultDimensionControl()
    {
        return BrazilParameters::isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(
        InventTransferId    _transferId,
        LineNum             _lineNum)
    {
        return _transferId &&
               (select inventTransferLine
                    where inventTransferLine.TransferId == _transferId &&
                          inventTransferLine.LineNum    == _lineNum
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static public InventTransferLine find(
        InventTransferId    _transferId,
        LineNum             _lineNum,
        boolean             _forUpdate = false)
    {
        InventTransferLine  inventTransferLine;

        inventTransferLine.selectForUpdate(_forUpdate);

        if (_transferId)
        {
            select firstonly inventTransferLine
                where inventTransferLine.TransferId == _transferId &&
                      inventTransferLine.LineNum    == _lineNum;
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>InventTransLine</c> table.
    /// </summary>
    /// <param name="_inventTransLineRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record if found; otherwise, an empty buffer.
    /// </returns>
    public static InventTransferLine findRecId(RefRecId _inventTransLineRecId, boolean _forUpdate = false)
    {
        InventTransferLine inventTransLine;

        if (_inventTransLineRecId)
        {
            inventTransLine.selectForUpdate(_forUpdate);

            select firstonly inventTransLine
                where inventTransLine.RecId == _inventTransLineRecId;
        }

        return inventTransLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransIdReceive</Name>
				<Source><![CDATA[
    static public InventTransferLine findTransIdReceive(
        InventTransId       _inventTransId,
        boolean             _forUpdate = false)
    {
        InventTransferLine  inventTransferLine;

        inventTransferLine.selectForUpdate(_forUpdate);

        if (_inventTransId)
        {
            select firstonly inventTransferLine
                where inventTransferLine.InventTransIdReceive == _inventTransId;
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransIdReceiveforPost_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>InventTransferLine</c> table for the specified InventTransId.
    /// </summary>
    /// <param name="_inventTransId">
    /// The unique record for InventTransId to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then select the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>InventTransferLine</c> table.
    /// </returns>
    public static InventTransferLine findTransIdReceiveforPost_IN(InventTransId _inventTransId,
                                                                  boolean       _forUpdate = false)
    {
        InventTransferLine  inventTransLine;

        inventTransLine.selectForUpdate(_forUpdate);

        if (_inventTransId)
        {
            select firstonly inventTransLine
                where inventTransLine.InventTransId == _inventTransId;
        }

        return inventTransLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransIdScrap</Name>
				<Source><![CDATA[
    static public InventTransferLine findTransIdScrap(
        InventTransId       _inventTransId,
        boolean             _forUpdate = false
        )
    {
        InventTransferLine  inventTransferLine;

        inventTransferLine.selectForUpdate(_forUpdate);

        if (_inventTransId)
        {
            select firstonly inventTransferLine
                where inventTransferLine.InventTransIdScrap == _inventTransId;
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransIdShip</Name>
				<Source><![CDATA[
    static public InventTransferLine findTransIdShip(
        InventTransId       _inventTransId,
        boolean             _forUpdate = false)
    {
        InventTransferLine  inventTransferLine;

        inventTransferLine.selectForUpdate(_forUpdate);

        if (_inventTransId)
        {
            select firstonly inventTransferLine
                where inventTransferLine.InventTransId == _inventTransId;
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransIdTransitFrom</Name>
				<Source><![CDATA[
    static public InventTransferLine findTransIdTransitFrom(
        InventTransId       _inventTransId,
        boolean             _forUpdate = false)
    {
        InventTransferLine  inventTransferLine;

        inventTransferLine.selectForUpdate(_forUpdate);

        if (_inventTransId)
        {
            select firstonly inventTransferLine
                where inventTransferLine.InventTransIdTransitFrom == _inventTransId;
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransIdTransitTo</Name>
				<Source><![CDATA[
    static public InventTransferLine findTransIdTransitTo(
        InventTransId       _inventTransId,
        boolean             _forUpdate = false)
    {
        InventTransferLine  inventTransferLine;

        inventTransferLine.selectForUpdate(_forUpdate);

        if (_inventTransId)
        {
            select firstonly inventTransferLine
                where inventTransferLine.InventTransIdTransitTo == _inventTransId;
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransIdByUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the <c>InventTransferLine</c> table for a InventTransId* depending on an <c>InventTransferUpdateType</c>.
    /// </summary>
    /// <param name = "_updateType">
    /// An <c>InventTransferUpdateType</c>, which determines which InventTransId field to look at.
    /// </param>
    /// <param name = "_inventTransId">
    /// The unique InventTransId* to find.
    /// </param>
    /// <param name = "_forUpdate">
    /// If true, then select the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing the <c>InventTransferLine</c> table.
    /// </returns>
    static public InventTransferLine findTransIdByUpdateType(
        InventTransferUpdateType _updateType,
        InventTransId       _inventTransId,
        boolean             _forUpdate = false)
    {
        switch (_updateType)
        {
            case InventTransferUpdateType::Receive:
                return InventTransferLine::findTransIdReceive(_inventTransId, _forUpdate);
            case InventTransferUpdateType::Shipment:
            default:
                return InventTransferLine::findTransIdShip(_inventTransId, _forUpdate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumberByItemOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LineNum</c> field of the ordered transfer order line with open transactions, which is matching with the specific
    /// transfer and item id and with the product dimensions of the <c>InventDim</c> object if specified.
    /// </summary>
    /// <param name="_transferId">
    /// Transfer Id to be checked against
    /// </param>
    /// <param name="_itemId">
    /// Item id to be checked against
    /// </param>
    /// <param name="_itemInventDim">
    /// InventDim Id to be checked against
    /// </param>
    /// <returns>
    /// The line number of the retrieved transfer order line.
    /// </returns>
    public static LineNum getLineNumberByItemOrdered(
                                        InventTransferId _transferId,
                                        ItemId           _itemId,
                                        InventDim        _itemInventDim = null)
    {
        InventTransferLine  transferLine;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           localInventDim;
        InventDimParm       inventDimParm;

        if (_itemInventDim.anyProductDimensionSpecified())
        {
            inventDimParm.initProductDimensionsAllGroups();

            select firstonly LineNum from transferLine
                where transferLine.TransferId ==  _transferId
                    && transferLine.ItemId    ==  _itemId
            join tableID from inventTransOrigin
                where  inventTransOrigin.InventTransId == transferLine.InventTransIdReceive
            join tableId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt    == StatusReceipt::Ordered
                    && inventTrans.StatusIssue      == StatusIssue::None
            #InventDimExistsJoinNoField(transferLine.InventDimId, localInventDim, _itemInventDim, inventDimParm);
        }
        else
        {
            select firstonly LineNum from transferLine
                where transferLine.TransferId ==  _transferId
                    && transferLine.ItemId    ==  _itemId
            join tableID from inventTransOrigin
                where inventTransOrigin.InventTransId      == transferLine.InventTransIdReceive
            join tableId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt    ==  StatusReceipt::Ordered
                    && inventTrans.StatusIssue      ==  StatusIssue::None;
        }

        return transferLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumberByItemOrderedForTORec</Name>
				<Source><![CDATA[
    internal static LineNum getLineNumberByItemOrderedForTORec(
                                        InventTransferId _transferId,
                                        ItemId           _itemId,
                                        InventDim        _itemInventDim = null)
    {
        InventTransferLine  transferLine;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           localInventDim;
        InventDimParm       inventDimParm;

        if (_itemInventDim.anyProductDimensionSpecified())
        {
            inventDimParm.initProductDimensionsAllGroups();

            while select LineNum, InventTransId, PdsCWQtyTransfer, QtyTransfer from transferLine
                    where transferLine.TransferId ==  _transferId
                        && transferLine.ItemId    ==  _itemId
                join tableID from inventTransOrigin
                    where  inventTransOrigin.InventTransId == transferLine.InventTransIdReceive
                join tableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt    == StatusReceipt::Ordered
                        && inventTrans.StatusIssue      == StatusIssue::None
                #InventDimExistsJoinNoField(transferLine.InventDimId, localInventDim, _itemInventDim, inventDimParm)
            {
                Qty totalDeferredQty = WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(transferLine.InventTransId);

                Qty qtyToCheck = PdsGlobal::pdsIsCWItem(_itemId) ? transferLine.PdsCWQtyTransfer : transferLine.QtyTransfer;

                if (qtyToCheck <= totalDeferredQty)
                {
                    continue;
                }
                else
                {
                    break;
                }
            }
        }
        else
        {
            while select LineNum, InventTransId, PdsCWQtyTransfer, QtyTransfer from transferLine
                    where transferLine.TransferId ==  _transferId
                        && transferLine.ItemId    ==  _itemId
                join tableID from inventTransOrigin
                    where inventTransOrigin.InventTransId == transferLine.InventTransIdReceive
                join tableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt    ==  StatusReceipt::Ordered
                        && inventTrans.StatusIssue      ==  StatusIssue::None
            {
                Qty totalDeferredQty = WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(transferLine.InventTransId);

                Qty qtyToCheck = PdsGlobal::pdsIsCWItem(_itemId) ? transferLine.PdsCWQtyTransfer : transferLine.QtyTransfer;

                if (qtyToCheck <= totalDeferredQty)
                {
                    continue;
                }
                else
                {
                    break;
                }
            }
        }

        return transferLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumericDisplayFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets numeric display factor.
    /// </summary>
    /// <param name="_exchangeRateDisplayFactor">
    /// The exchange rate display factor.
    /// </param>
    /// <returns>
    /// The numeric display factor.
    /// </returns>
    public static int getNumericDisplayFactor(ExchangeRateDisplayFactor _exchangeRateDisplayFactor)
    {
        int numericDisplayFactor;

        switch (_exchangeRateDisplayFactor)
        {
            case ExchangeRateDisplayFactor::One:
                numericDisplayFactor = 1;
                break;

            case ExchangeRateDisplayFactor::Ten:
                numericDisplayFactor = 10;
                break;

            case ExchangeRateDisplayFactor::Hundred:
                numericDisplayFactor = 100;
                break;

            case ExchangeRateDisplayFactor::Thousand:
                numericDisplayFactor = 1000;
                break;

            case ExchangeRateDisplayFactor::TenThousand:
                numericDisplayFactor = 10000;
                break;

            default:
                numericDisplayFactor = 1;
                break;
        }

        return numericDisplayFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransSumDimReceived</Name>
				<Source><![CDATA[
    /*
        Returns updated (statusReceipt < ordered) quantity for a specific dimension of a transfer order line with receive lotid = _inventTransIdReceive
    **/
    public static InventQty inventTransSumDimReceived(
        InventTransId   _inventTransReceipt,
        InventDim       _inventDim)
    {
        return InventTransferLine::getInventTransSumDimReceived(_inventTransReceipt,
                                                                _inventDim,
                                                                false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransSumDimShipped</Name>
				<Source><![CDATA[
    /*
        Returns shipped quantity for a specific dimension of a transfer order line with receive lotid = _inventTransIdReceive
    **/
    public static InventQty inventTransSumDimShipped(
        InventTransId   _inventTransIdReceive,
        InventDim       _inventDim)
    {
        return InventTransferLine::getInventTransSumDimShipped(_inventTransIdReceive,
                                                               _inventDim,
                                                               false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransSumDimShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the shipped quantity for a specific dimension of a transfer order line for the appropriate unit type.
    /// </summary>
    /// <param name = "_inventTransIdReceive">
    /// The receipt trans id.
    /// </param>
    /// <param name = "_inventDim">
    /// The given invent dimension id.
    /// </param>
    /// <param name = "_isCWItem">
    /// true if item is catch weight enabled; otherwise, false.
    /// </param>
    /// <returns>
    /// The shipped quantity in either inventory units, or catch weight units.
    /// </returns>
    private static InventQty getInventTransSumDimShipped(
        InventTransId _inventTransIdReceive,
        InventDim     _inventDim,
        boolean       _isCWItem)
    {
        InventTransferLine  inventTransferLine  = InventTransferLine::findTransIdReceive(_inventTransIdReceive);
        InventTransOriginId inventTransOriginId = InventTransOriginTransferShip::findInventTransOriginId(inventTransferLine.DataAreaId, 
                                                                                                         inventTransferLine.TransferId, 
                                                                                                         inventTransferLine.LineNum);

        if (!inventTransferLine.RecId)
        {
            throw error(strFmt("@SYS78590",_inventTransIdReceive));
        }

        InventDimParm inventDimParm;
        
        inventDimParm.initDimTransferReceipt(_inventDim);

        // If we shipped out with no LP then lp isn't mergeable.
        if (WHSInventEnabled::exist(InventTrans::findTransId(_inventTransIdReceive).ItemId))
        {
            InventTrans       shipInventTrans;
            InventTransOrigin shipInventTransOrgin;

            select firstonly shipInventTrans
                join InventTransId, RecId from shipInventTransOrgin
                where shipInventTrans.InventTransOrigin  == shipInventTransOrgin.RecId       &&
                      shipInventTransOrgin.InventTransId == inventTransferLine.InventTransId &&
                      shipInventTrans.StatusIssue        == StatusIssue::Sold;

            if (shipInventTrans.RecId && !shipInventTrans.inventDim().wmsLocation().whsLocationIsLPControlled())
            {
                inventDimParm.LicensePlateFlag = NoYes::No;
            }
        }

        InventTransSum inventTransSum = InventTransSum::newChildTypeInventDim();

        if (_isCWItem)
        {
            InventQty CWShippedQty = inventTransSum.pdsCWidSold(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm);
            CWShippedQty += inventTransSum.pdsCWidPurchased(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm);
            return CWShippedQty;
        }

        InventQty shippedQty = inventTransSum.originSold(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm);
        shippedQty += inventTransSum.originPurchased(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm);
        return shippedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the last <c>lineNum</c> value of the <c>InventTransferLines</c> table with the transfer ID passed as an argument.
    /// </summary>
    /// <param name="_transferId">
    ///    The <c>InventTransferId</c> of the lines.
    /// </param>
    /// <returns>
    ///    A <c>lineNum</c> value.
    /// </returns>
    static public LineNum  lastLineNum(InventTransferId  _transferId)
    {
        return (select maxof(LineNum) from inventTransferLine
                    where inventTransferLine.TransferId == _transferId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWinventTransSumDimReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the updated CW quantity for a specific dimension of a transfer order line with the specified receipt ID.
    /// </summary>
    /// <param name="_inventTransReceipt">
    /// The ID of the receipt.
    /// </param>
    /// <param name="_inventDim">
    /// The dimension to be retrieved.
    /// </param>
    /// <returns>
    /// The updated CW quantity.
    /// </returns>
    public static PdsCWInventQty pdsCWinventTransSumDimReceived(
        InventTransId   _inventTransReceipt,
        InventDim       _inventDim)
    {
        return InventTransferLine::getInventTransSumDimReceived(_inventTransReceipt,
                                                                _inventDim, 
                                                                true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransSumDimReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the received quantity for a specific dimension of a transfer order line for the appropriate unit type.
    /// </summary>
    /// <param name = "_inventTransIdReceive">
    /// The receipt trans id.
    /// </param>
    /// <param name = "_inventDim">
    /// The given invent dimension id.
    /// </param>
    /// <param name = "_isCWItem">
    /// true if item is catch weight enabled; otherwise, false.
    /// </param>
    /// <returns>
    /// The received quantity in either inventory units, or catch weight units.
    /// </returns>
    private static InventQty getInventTransSumDimReceived(
        InventTransId   _inventTransReceipt,
        InventDim       _inventDim,
        boolean         _isCWItem)
    {
        InventTransOriginId inventTransOriginId = InventTransOrigin::findByInventTransId(_inventTransReceipt).RecId;

        InventDimParm inventDimParm;

        inventDimParm.initDimTransferReceipt(_inventDim);

        // If we shipped out with no LP then lp isn't mergeable.
        if (WHSInventEnabled::exist(InventTrans::findTransId(_inventTransReceipt).ItemId))
        {
            InventTrans       shipInventTrans;
            InventTransOrigin shipInventTransOrgin;

            select firstonly shipInventTrans
                join InventTransId, RecId from shipInventTransOrgin
                where shipInventTrans.InventTransOrigin     == shipInventTransOrgin.RecId                                                   &&
                      shipInventTransOrgin.InventTransId    == InventTransferLine::findTransIdReceive(_inventTransReceipt).InventTransId    &&
                      shipInventTrans.StatusIssue           == StatusIssue::Sold;

            if (shipInventTrans.RecId && !shipInventTrans.inventDim().wmsLocation().whsLocationIsLPControlled())
            {
                inventDimParm.LicensePlateFlag = NoYes::No;
            }
        }

        InventTransSum inventTransSum = InventTransSum::newChildTypeInventDim();

        if (_isCWItem)
        {
            return (inventTransSum.pdsCWidReceiptInTotal(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm)
                    - (inventTransSum.pdsCWidOrdered(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm)
                     + inventTransSum.pdsCWidQuotationReceipt(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm)));
        }

        return (inventTransSum.originReceiptInTotal(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm)
                - (inventTransSum.originOrdered(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm)
                 + inventTransSum.originQuotationReceipt(inventTransOriginId, InventTransChildType::None, '', _inventDim,inventDimParm)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInventTransSumDimShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the shipped CW quantity for a specific dimension of a transfer order line with the specified receipt ID.
    /// </summary>
    /// <param name="_inventTransIdReceive">
    /// The ID of the receipt.
    /// </param>
    /// <param name="_inventDim">
    /// The dimension to be retrieved.
    /// </param>
    /// <returns>
    /// The updated CW quantity.
    /// </returns>
    public static PdsCWInventQty pdsCWInventTransSumDimShipped(
        InventTransId   _inventTransIdReceive,
        InventDim       _inventDim)
    {
        return InventTransferLine::getInventTransSumDimShipped(_inventTransIdReceive,
                                                               _inventDim,
                                                               true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the direction of the load record for the given transfer order line.
    /// </summary>
    /// <param name="_transferId">
    /// Identification of the transfer order
    /// </param>
    /// <param name="_lineNum">
    /// Transfer order line number
    /// </param>
    /// <returns>
    /// The direction of the record for the corresponded load.
    /// </returns>
    static WHSLoadDirection whsLoadDirection(InventTransferId _transferId, LineNum _lineNum = 0)
    {
        WHSLoadDirection    ret;
        InventTransferLine  transferLine        = InventTransferLine::find(_transferId, _lineNum);

        if (!transferLine)
        {
            select firstonly transferLine where transferLine.TransferId == _transferId;
        }

        if (transferLine.inventTransferTable().InventLocationIdFrom == InventTable::find(transferLine.ItemId).inventLocationId())
        {
            ret = WHSLoadDirection::Outbound;
        }
        else if (transferLine.inventTransferTable().InventLocationIdTo == InventTable::find(transferLine.ItemId).inventLocationId())
        {
            ret = WHSLoadDirection::Inbound;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSumUnitPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the CostPrice for the particular item in India.
    /// </summary>
    /// <returns>
    /// Returns the item CostPrice.
    /// </returns>
    public CostPrice inventSumUnitPrice_IN()
    {
        InventSum               inventSum;
        CostPrice               priceLoc;
        CostPrice               costPrice;
        InventOnhand            inventOnHand;
        InventDimParm           inventDimParm;
        InventTransferLine_IN   inventTransferLineIN;

        InventTransferLineInventSumUnitPriceContext_IN inventTransferLineInventSumUnitPriceContext = InventTransferLineInventSumUnitPriceContext_IN::instance();

        InventDim inventDim = inventTransferLineInventSumUnitPriceContext ?
                                InventDim::findOrCreate(inventTransferLineInventSumUnitPriceContext.parmInventDim())
                                : InventDim::find(this.InventDimId);

        InventDimGroupSetup::newItemId(this.itemId).inventDimParmActivefinancialInventory(inventDimParm);
        inventOnHand         = InventOnhand::newParameters(this.ItemId, inventDim, inventDimParm);
        inventSum            = inventOnhand.inventSum();
        inventTransferLineIN = this.inventTransferLine_IN();

        if (inventSum)
        {
            priceLoc = inventSum.costPricePcs();

            if (!priceLoc)
            {
                priceLoc = InventTable::findCostPcsPrice(this.ItemId, inventDim.InventDimId);
            }
        }
        else
        {
            priceLoc = InventTable::findCostPcsPrice(this.ItemId, inventDim.InventDimId);
        }
        costPrice   = CurrencyExchangeHelper::price(priceLoc, inventTransferLineIN.CurrencyCode);

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSumUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the CostPrice for the particular item.
    /// </summary>
    /// <returns>
    /// Returns the item CostPrice.
    /// </returns>
    public CostPrice inventSumUnitPrice()
    {
        return InventCostPriceUtility::inventSumUnitCostPrice(this.ItemId, this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>converToUnitID_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate inventory quantity when unit id on stock transfer is different on unit id defined on item.
    /// The quantity conversion is done from item inventory unit to transfer order line unit.
    /// </summary>
    /// <param name="_inventQty">
    ///   The inventory quantity to convert.
    /// </param>
    /// <returns>
    /// Returns inventory quantity based on Unit
    /// </returns>
    InventQty converToUnitID_IN(InventQty _inventQty = realMin())
    {
        return this.convertToUnitIdForItem_IN(this.ItemId, this.InventDimId, _inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToUnitIdForItem_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate inventory quantity when unit id on stock transfer is different on unit id defined on item. 
    /// The quantity conversion is done from item inventory unit to transfer order line unit.
    /// </summary>
    /// <param name="_itemId">
    ///   The item id.
    /// </param>
    /// <param name="_inventDimId">
    ///   The inventory dimension id.
    /// </param>
    /// <param name="_inventQty">
    ///   The inventory quantity to convert.
    /// </param>
    /// <returns>
    /// Returns inventory quantity based on Unit
    /// </returns>
    InventQty convertToUnitIdForItem_IN(ItemId _itemId, InventDimId _inventDimId, InventQty _inventQty = realMin())
    {
        InventTable             inventTable = this.inventTable_IN();
        InventTransferLine_IN   inventTransferLineIN = this.inventTransferLine_IN();

        return this.convertQuantity_IN(_itemId, _inventDimId, inventTable.inventUnitId(), inventTransferLineIN.UnitId, _inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> InventTransferTable </c> to dirty
    /// </summary>
    // <GTE>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.inventTransferTable());
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Determines whether a change to the <c>InventTransferLine</c> table will update the Tax
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The <c>InventTransferLine</c> record.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    // <GTE>
    private boolean taxRecalculationNeeded(Common _inventTransferLine = null)
    {
        InventTransferLine  inventTransferLine_Orig;
        boolean             updateNeeded;

        if (_inventTransferLine)
        {
            inventTransferLine_Orig = _inventTransferLine as InventTransferLine;
        }
        else
        {
            inventTransferLine_Orig = this.orig();
        }

        updateNeeded =
        (
        (this.ItemId                != inventTransferLine_Orig.ItemId) ||
        (this.PdsCWQtyTransfer      != inventTransferLine_Orig.PdsCWQtyTransfer) ||
        (this.QtyTransfer           != inventTransferLine_Orig.QtyTransfer) ||
        (this.UnitPrice             != inventTransferLine_Orig.UnitPrice) ||
        (this.TransactionCode       != inventTransferLine_Orig.TransactionCode) ||
        (this.AmountValue           != inventTransferLine_Orig.AmountValue) ||
        (this.StatisticalValue      != inventTransferLine_Orig.StatisticalValue) ||
        (this.OrigCountryRegionId   != inventTransferLine_Orig.OrigCountryRegionId) ||
        (this.OrigStateId           != inventTransferLine_Orig.OrigStateId) ||
        (this.OrigCountyId          != inventTransferLine_Orig.OrigCountyId) ||
        (this.UnitId                != inventTransferLine_Orig.UnitId)
        );

        return updateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Determines whether a change to the <c> InventTransferLine </c> table buffer on india fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The <c>InventTransferLine</c> record.
    /// </param>
    /// <returns>
    /// True if the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    public boolean hasIndirectTaxFieldChanged_IN(InventTransferLine _inventTransferLine = null)
    {
        boolean             indirectTaxChanged = false;

        InventTransferLine_IN inventTransferLine_IN;
        InventTransferLine_IN inventTransferLine_Origin_IN;

        InventTransferLine  inventTransferLine_Orig;

        if (TaxParameters::checkTaxParameters_IN())
        {
            if (_inventTransferLine)
            {
                inventTransferLine_Orig   = _inventTransferLine as InventTransferLine;
            }
            else
            {
                inventTransferLine_Orig  = this.orig();
            }

            inventTransferLine_IN = this.inventTransferLine_IN();
            inventTransferLine_Origin_IN = inventTransferLine_Orig.inventTransferLine_IN();

            indirectTaxChanged  =
            inventTransferLine_IN.NetAmount             != inventTransferLine_Origin_IN.NetAmount
            || inventTransferLine_IN.UnitPrice          != inventTransferLine_Origin_IN.UnitPrice
            || inventTransferLine_IN.TaxItemGroup       != inventTransferLine_Origin_IN.TaxItemGroup
            || inventTransferLine_IN.TaxGroup           != inventTransferLine_Origin_IN.TaxGroup
            || inventTransferLine_IN.VATRetentionCode   != inventTransferLine_Origin_IN.VATRetentionCode
            || inventTransferLine_IN.CurrencyCode       != inventTransferLine_Origin_IN.CurrencyCode
            || !DimensionDefaultFacade::areEqual(inventTransferLine_IN.DefaultDimension, inventTransferLine_Origin_IN.DefaultDimension)
            || inventTransferLine_IN.InvntCostPrice     != inventTransferLine_Origin_IN.InvntCostPrice
            || inventTransferLine_IN.PriceType          != inventTransferLine_Origin_IN.PriceType
            || inventTransferLine_IN.UnitId             != inventTransferLine_Origin_IN.UnitId
            || inventTransferLine_IN.VATPriceType       != inventTransferLine_Origin_IN.VATPriceType;
        }

        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultShipDate</Name>
				<Source><![CDATA[
    private void defaultShipDate()
    {
        if (this.ShipDate > this.ReceiveDate)
        {
            this.ShipDate = this.ReceiveDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReceiveDate</Name>
				<Source><![CDATA[
    private void defaultReceiveDate()
    {
        if (this.ShipDate > this.ReceiveDate)
        {
            this.ReceiveDate = this.ShipDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery date.
    /// </summary>
    /// <param name = "_invoiceDate">Invoice date.</param>
    /// <returns>The delivery date.</returns>
    public TransDate getDeliveryDate(TransDate _invoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.ShipDate)
        {
            return this.ShipDate;
        }
        else if (this.ReceiveDate)
        {
            return this.ReceiveDate;
        }
        else
        {
            return _invoiceDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(InventTransferLine, ShipDate):
                this.defaultShipDate();
                break;

            case fieldnum(InventTransferLine, ReceiveDate):
                this.defaultReceiveDate();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum(InventTransferLine, ShipDate), [fieldnum(InventTransferLine, ReceiveDate)]],
            [fieldnum(InventTransferLine, ReceiveDate), [fieldnum(InventTransferLine, ShipDate)]],
            [fieldNum(InventTransferLine, PlanningPriority),
                [
                    fieldNum(InventTransferLine, ItemId),
                    fieldNum(InventTransferLine, InventDimId)
                ]
            ]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            InventTransferLine_IN inventTransferLine_IN = this.inventTransferLine_IN();
            this.packInventTransferLine_IN(inventTransferLine_IN);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventPostingItemLedgerDimensionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new parameter for searching an inventory posting item ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">An inventory account type.</param>
    /// <returns>The created parameter instance.</returns>
    public InventPostingItemLedgerDimensionParameters createInventPostingItemLedgerDimensionParameters(
        InventAccountType   _inventAccountType)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            this.itemId,
            InventItemGroupItem::findByItemIdLegalEntity(this.ItemId).ItemGroupId);

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransferJourLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets values from inventory transfer journal line.
    /// </summary>
    /// <param name = "_inventTransferJourLine">The invent transfer journal line.</param>
    /// <param name = "_inventTransferUpdateType">Invent transfer update type value.</param>
    public void initFromInventTransferJourLine(InventTransferJourLine _inventTransferJourLine, InventTransferUpdateType _inventTransferUpdateType)
    {
        this.QtyTransfer = _inventTransferUpdateType == InventTransferUpdateType::Shipment
                               ? _inventTransferJourLine.QtyShipped
                               : _inventTransferJourLine.QtyReceived;
                               
        this.DimensionDefaultShipFrom = _inventTransferJourLine.inventTransferLine().DimensionDefaultShipTo;
        this.DimensionDefaultShipTo = _inventTransferJourLine.inventTransferLine().DimensionDefaultShipFrom;

    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQuantity_IN</Name>
				<Source><![CDATA[
    private InventQty convertQuantity_IN(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _fromUnitOfMeasureSymbol,
        UnitOfMeasureSymbol _toUnitOfMeasureSymbol,
        InventQty           _inventQty = realMin())
    {
        InventQty inventQty = _inventQty;

        if (inventQty == realMin())
        {
            inventQty = this.QtyTransfer;
        }

        if (!inventQty)
        {
            return 0;
        }

        InventQty qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                            _itemId,
                            _inventDimId,
                            inventQty,
                            _fromUnitOfMeasureSymbol,
                            _toUnitOfMeasureSymbol,
                            NoYes::Yes);

        return decRound(qty, InventTable::inventDecimals(_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightItemHandlingPolicyAssignedToCWItem</Name>
				<Source><![CDATA[
    private boolean isCatchWeightItemHandlingPolicyAssignedToCWItem()
    {
        return PdsGlobal::pdsIsCWItem(this.ItemId)
               && !WHSInventTable::find(this.ItemId).CatchWeightItemHandlingPolicyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsDefault</Name>
				<Source><![CDATA[
    /// <summary>
	/// Fills DimensionDefaultShipTo and DimensionDefaultShipFrom fields.
	/// </summary>
	/// <param name = "_inventDimTo">The inventory dimension.</param>
    public void initDimensionsDefault(InventDim _inventDimTo)
    {
        if (InventTransferLine::enableDefaultDimensionControl() || TaxIntegrationUtils::isTaxInTransferOrderEnabled())
        {
            InventTable inventTable = InventTable::find(this.ItemId);

            InventSiteId siteFrom = InventLocation::find(this.inventTransferTable().InventLocationIdFrom).InventSiteId;

            this.DimensionDefaultShipFrom = InventSite::changeDimension(inventTable.DefaultDimension, siteFrom);
            this.DimensionDefaultShipTo = InventSite::changeDimension(inventTable.DefaultDimension, _inventDimTo.InventSiteId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes inventDimTo and fills InventSiteId field.
    /// </summary>
    /// <param name = "_inventDimId">The inventDimId field of InventDim.</param>
    /// <returns>Initialized InventDimTo cursor.</returns>
    public InventDim createInventDimTo(InventDimId _inventDimId)
    {
        InventDim   inventDimTo;

        inventDimTo.data(InventDim::mcrGetProductDimensions(_inventDimId));

        var inventSiteId = InventLocation::find(this.inventTransferTable().InventLocationIdTo).InventSiteId;

        if (inventSiteId)
        {
            inventDimTo.InventSiteId = inventSiteId;
            inventDimTo = InventDim::findOrCreate(inventDimTo);
        }

        return inventDimTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInventTransQtyReserved</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal display Qty displayInventTransQtyReserved()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrig;

        select sum(Qty) from inventTrans
             where inventTrans.StatusReceipt == StatusReceipt::None
                   && inventTrans.StatusIssue > StatusIssue::Picked
                exists join inventTransOrig
                    where inventTransOrig.RecId == inventTrans.InventTransOrigin
                         && inventTransOrig.InventTransId == this.InventTransId;

        return  inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPDSCWInventTransQtyReserved</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal display Qty displayPDSCWInventTransQtyReserved()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrig;

        select sum(PdsCWQty) from inventTrans
             where inventTrans.StatusReceipt == StatusReceipt::None
                   && inventTrans.StatusIssue > StatusIssue::Picked
                exists join inventTransOrig
                    where inventTransOrig.RecId == inventTrans.InventTransOrigin
                         && inventTransOrig.InventTransId == this.InventTransId;

        return  inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsWHSLoadStatusShipped_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the load status of corresponding WHSLoadLine record is Shipped.
    /// </summary>
    /// <returns>
    /// True if load status is Shipped; otherwise - false.
    /// </returns>
    public boolean IsWHSLoadStatusShipped_BR()
    {
        WHSLoadTable whsLoadTable;
        WHSLoadLine whsLoadLine;

        select LoadStatus from whsLoadTable
            exists join whsLoadLine
                where whsLoadLine.InventTransId == this.InventTransId
                    && whsLoadLine.InventTransType == InventTransType::TransferOrderShip
                    && whsLoadLine.LoadId == whsLoadTable.LoadId;

        return whsLoadTable.LoadStatus == WHSLoadStatus::Shipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatisticalAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Statistical amounts.
    /// </summary>
    public void setStatisticalAmounts()
    {
        IntrastatTransactionCode intrastatTransactionCode = IntrastatTransactionCode::find(this.TransactionCode);

        if (intrastatTransactionCode.TransferOrderAmountValueType == TransferOrderAmountValueType::Manual)
        {
            this.AmountValue = this.NetAmount;
            this.StatisticalValue = this.NetAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shippedTransferOrderNotExistPickedTransaction</Name>
				<Source><![CDATA[
    public static boolean shippedTransferOrderNotExistPickedTransaction(InventTransferId _transferId)
    {
        InventTransOrigin inventTransOrigin;
        InventTrans pickedInventTrans;
        InventTransferLine pickedInventTransferLine;

        select firstonly RecId from pickedInventTransferLine
            where pickedInventTransferLine.TransferId == _transferId
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == pickedInventTransferLine.InventTransIdTransitFrom
                    && inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderReceive
                    && inventTransOrigin.ReferenceId == _transferId
                exists join pickedInventTrans
                    where pickedInventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && pickedInventTrans.StatusIssue == StatusIssue::Picked;

        return pickedInventTransferLine.RecId == 0 ? true : false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventTransferOrders</ConfigurationKey>
	<DeveloperDocumentation>@SYS124009</DeveloperDocumentation>
	<Label>@SYS78296</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>TransferId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LineIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LineIdx</PrimaryIndex>
	<ReplacementKey>LineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyShipped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailInfocodeIdEx2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailInformationSubcodeIdEx2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HHTHandheldUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HHTTransTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HHTTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CombinedTransferOrderLineDelivery</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnderDeliveryPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatisticalValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat_W</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatSpecMove_CZ</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdTransitTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdTransitFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdReceive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdScrap</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdTo_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price_RU</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>receipt</Name>
			<Label>@SYS77799</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyScrapped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyScrapped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyRemainReceive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyRemainReceive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyReceiveNow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reservation</Name>
			<Label>@SYS7120</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoReservation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Shipment</Name>
			<Label>@SYS50389</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyShipped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyShipped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyRemainShip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyRemainShip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyShipNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyShipNow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemainStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferOrder</Name>
			<Label>@SYS78234</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsOverrideFEFO</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPBackwardDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPBackwardSupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPApplyDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPApplySupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPInclPlannedOrders</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanningPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionDefaultShipFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionDefaultShipTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTaxShipment</Name>
			<Label>@SYS50389</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupShipment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupShipment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTaxShipment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTaxReceipt</Name>
			<Label>@SYS77799</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTaxReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ForeignTrade</ConfigurationKey>
			<CountryRegionCodes>AT,BE,BG,CY,CZ,DE,DK,EE,GR,ES,FI,FR,GB,HR,HU,IE,IT,LT,LU,LV,MT,NL,PL,PT,RO,SE,SI,SK</CountryRegionCodes>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS80230</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPApplyDemandTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPApplyDemandTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPApplySupplyTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPApplySupplyTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPBackwardDemandTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPBackwardDemandTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPBackwardSupplyTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPBackwardSupplyTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ATPInclPlannedOrders</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPInclPlannedOrders</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoReservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferAutoReservation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CombinedTransferOrderLineDelivery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferCombinedLineDeliveryRecID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryDateControlType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesDeliveryDateControlType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HHTHandheldUserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUserIdEx2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HHTTransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDateEx2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>HHTTransTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTimeEx2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatSpecMove_CZ</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatSpecMove_CZ</ExtendedDataType>
			<FeatureClass>IntrastatSpecMoveToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdTo_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdShipment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdReceive</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdReceive</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdScrap</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdScrap</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdTransitFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdReceiveTransit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdTransitTo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdShipmentTransit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferOverDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyReceived</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyReceived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyReceiveNow</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyRemainReceive</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyRemainReceive</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyRemainShip</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyRemainShip</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyScrapped</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyScrapped</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyShipNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyShipNow</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyShipped</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyShipped</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyTransfer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyTransfer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsOverrideFEFO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsOverrideFEFO</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PriceCur</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyReceived</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyReceived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyReceived</ExtendedDataType>
			<Label>@SYS1743</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyRemainReceive</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyRemain</ExtendedDataType>
			<Label>@SYS78295</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyRemainShip</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyRemain</ExtendedDataType>
			<Label>@SYS78294</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyScrapped</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyScrapped</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyShipNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyShipped</ExtendedDataType>
			<Label>@SYS78221</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyShipped</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyShipped</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyTransfer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiveDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferReceiveDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RemainStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransferRemainStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAreaId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailInfocodeIdEx2</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeIdEx2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailInformationSubcodeIdEx2</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInformationSubcodeIdEx2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailReplenishRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RetailReplenishRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RetailReplenishRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReplenishRefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShipDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferShipDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StatisticalValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ForeignTrade</ConfigurationKey>
			<CountryRegionCodes>AT,BE,BG,CY,CZ,DE,DK,EE,GR,ES,FI,FR,GB,HR,HU,IE,IT,LT,LU,LV,MT,NL,PL,PT,RO,SE,SI,SK</CountryRegionCodes>
			<ExtendedDataType>StatisticalValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnderDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferUnderDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventUnitId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionDefaultShipFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<Label>@SYS105870</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionDefaultShipTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<Label>@SYS103530</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Intracode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects73</ConfigurationKey>
			<ExtendedDataType>DEL_IntrastatItemCodeId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExciseTariffCodes_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FromDirectSettlement_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>DirectSettlement_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FromDSA_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FromExciseRecordType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FromExciseType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HSNCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvntCostPrice_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>CostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ITCCategory_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ITCCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetAmount_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>NetAmount_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NonBusinessUsagePercentage_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>PriceType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPrice_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>UnitPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Retention_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RetentionAmt_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTaxFormTypes_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>SalesTaxFormTypesRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceAccountingCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceCategory_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ServiceCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ToDirectSettlement_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>DirectSettlement_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ToDSA_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ToExciseRecordType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ToExciseType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ExciseType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ToITCCategory_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>ITCCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPrice_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>UnitPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATPriceType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>PriceType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATRetentionCode_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PlanningPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanningPriority</ExtendedDataType>
			<FeatureClass>ReqPriorityBasedPlanningFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupShipment</Name>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupShipment</Name>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupReceipt</Name>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupReceipt</Name>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTaxShipment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTaxReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventoryServiceReservationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventInventoryServiceReservationId</ExtendedDataType>
			<FeatureClass>InventInventoryDataServiceFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventoryServiceAutoOffset</Name>
			<FeatureClass>InventInventoryDataServiceFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransferId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdReceiveIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdReceive</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdScrapIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdScrap</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdTransitToIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdTransitTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdTransitFromIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdTransitFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdTo_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimIdTo_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RetailReplenishmentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailReplenishRefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RetailReplenishRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventoryServiceReservationIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventoryServiceReservationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesATPSettingsMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ATPApplyDemandTimeFence</MapField>
					<MapFieldTo>ATPApplyDemandTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplySupplyTimeFence</MapField>
					<MapFieldTo>ATPApplySupplyTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardDemandTimeFence</MapField>
					<MapFieldTo>ATPBackwardDemandTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardSupplyTimeFence</MapField>
					<MapFieldTo>ATPBackwardSupplyTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPInclPlannedOrders</MapField>
					<MapFieldTo>ATPInclPlannedOrders</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPTimeFence</MapField>
					<MapFieldTo>ATPTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsItemSpecific</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesDeliveryDateControlMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ATPApplyDemandTimeFence</MapField>
					<MapFieldTo>ATPApplyDemandTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplySupplyTimeFence</MapField>
					<MapFieldTo>ATPApplySupplyTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardDemandTimeFence</MapField>
					<MapFieldTo>ATPBackwardDemandTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardSupplyTimeFence</MapField>
					<MapFieldTo>ATPBackwardSupplyTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPInclPlannedOrders</MapField>
					<MapFieldTo>ATPInclPlannedOrders</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPTimeFence</MapField>
					<MapFieldTo>ATPTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostalAddress</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiveDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShipDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLineExtension_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssessableValue</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssessableValueAccountingCurrency</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditNoteDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsMaxRetailPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsTariffCodeTable</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DirectSettlement</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSA</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseRecordType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseTariffCodes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaximumRetailPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesTaxFormTypes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAsPerOriginalInvoice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInformation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTCSGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTDSGroup</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TMSLoadLineSource</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransIdIssue</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransIdReceive</MapField>
					<MapFieldTo>InventTransIdReceive</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasureSymbol</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
					<MapFieldTo>IntrastatCommodity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CombinedTransferOrderLineDelivery</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>InventTransferCombinedLineDelivery</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CombinedTransferOrderLineDelivery</Name>
					<Field>CombinedTransferOrderLineDelivery</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatSpecMovement_CZ</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatSpecMovement_CZ</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatSpecMove_CZ</Name>
					<SourceEDT>IntrastatSpecMove_CZ</SourceEDT>
					<Field>IntrastatSpecMove_CZ</Field>
					<RelatedField>SpecialMovement_CZ</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SpecMoveIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<SourceEDT>IntrastatProcId</SourceEDT>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<SourceEDT>IntrastatTransactionCodeId</SourceEDT>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<SourceEDT>IntrastatTransport</SourceEDT>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDimTo_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDimTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdTo_RU</Name>
					<Field>InventDimIdTo_RU</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransferTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferId</Name>
					<Field>TransferId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransferIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OriginCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<SourceEDT>ItemOrigCountryRegionId</SourceEDT>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OriginCounty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountyId</Name>
					<Field>OrigCountyId</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OriginState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReceiveInventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReceiveInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdReceive</Name>
					<SourceEDT>InventTransIdReceive</SourceEDT>
					<Field>InventTransIdReceive</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailBuyersPushLineQty</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailBuyersPushLineQty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailReplenishRefRecId</Name>
					<Field>RetailReplenishRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailReplenishRefTableId</Name>
					<Field>RetailReplenishRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailInfocodeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailInfocodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailInfocodeIdEx2</Name>
					<SourceEDT>RetailInfocodeIdEx2</SourceEDT>
					<Field>RetailInfocodeIdEx2</Field>
					<RelatedField>infocodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ScrapInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ScrapInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdScrap</Name>
					<SourceEDT>InventTransIdScrap</SourceEDT>
					<Field>InventTransIdScrap</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipmentInventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ShipmentInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransIdShipment</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransitFromInventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransitFromInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdTransitFrom</Name>
					<SourceEDT>InventTransIdReceiveTransit</SourceEDT>
					<Field>InventTransIdTransitFrom</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransitToInventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransitToInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdTransitTo</Name>
					<SourceEDT>InventTransIdShipmentTransit</SourceEDT>
					<Field>InventTransIdTransitTo</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionDefaultShipFrom</Name>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionDefaultShipFrom</Name>
					<Field>DimensionDefaultShipFrom</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionDefaultShipTo</Name>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionDefaultShipTo</Name>
					<Field>DimensionDefaultShipTo</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_InventTransferLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension_IN</Name>
					<Field>DefaultDimension_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>