<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanQuantityDemandPeriodSeason</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanQuantityDemandPeriodSeason extends KanbanQuantityPolicyDemandPeriod
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDateAfterSeason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified date and time value is later or equal the season definition.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation time.
    /// </param>
    /// <returns>
    /// true if the date and time is after or equal the season definition; otherwise, false.
    /// </returns>
    private boolean calcDateAfterSeason(TransDateTime  _calculationCreationDate)
    {
        return _calculationCreationDate >= this.seasonEndDate(_calculationCreationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDateBeforeSeason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified date and time value is before or equal the season definition.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation time.
    /// </param>
    /// <returns>
    /// true if the date and time is before or equal the season definition; otherwise, false.
    /// </returns>
    private boolean calcDateBeforeSeason(TransDateTime  _calculationCreationDate)
    {
        return _calculationCreationDate <= this.seasonStartDate(_calculationCreationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDateInSeason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified date and time value is inside the season definition.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation time.
    /// </param>
    /// <returns>
    /// true if the date and time is inside the season definition; otherwise, false.
    /// </returns>
    private boolean calcDateInSeason(TransDateTime  _calculationCreationDate)
    {
        return _calculationCreationDate > this.seasonStartDate(_calculationCreationDate)
            && _calculationCreationDate < this.seasonEndDate(_calculationCreationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expectedDemandPeriodEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date and time until when the expected demand transactions are included.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation creation time.
    /// </param>
    /// <returns>
    /// A date and time value that represents the end point of a period.
    /// </returns>
    public KanbanExpectedDemandPeriodEnd expectedDemandPeriodEnd(TransDateTime  _calculationCreationDate)
    {
        TransDateTime   calculationCreationDate = super(_calculationCreationDate);

        if (   this.calcDateBeforeSeason(calculationCreationDate)
            || this.calcDateInSeason(calculationCreationDate))
        {
            return this.seasonEndDate(calculationCreationDate);
        }

        if (this.calcDateAfterSeason(calculationCreationDate))
        {
            return DateTimeUtil::addYears(this.seasonEndDate(calculationCreationDate),1);
        }

        return DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expectedDemandPeriodStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date and time from when the expected demand transactions are included.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation creation time.
    /// </param>
    /// <returns>
    /// A date and time value that represents the end point of a period.
    /// </returns>
    public KanbanExpectedDemandPeriodStart expectedDemandPeriodStart(TransDateTime  _calculationCreationDate)
    {
        TransDateTime   calculationCreationDate = super(_calculationCreationDate);

        if (this.calcDateBeforeSeason(calculationCreationDate))
        {
            return this.seasonStartDate(calculationCreationDate);
        }

        if (this.calcDateInSeason(calculationCreationDate))
        {
            return calculationCreationDate;
        }

        if (this.calcDateAfterSeason(calculationCreationDate))
        {
            return DateTimeUtil::addYears(this.seasonStartDate(calculationCreationDate),1);
        }

        return DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fulfilledDemandPeriodEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date and time until when the fulfilled demand transactions are included.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation creation time.
    /// </param>
    /// <returns>
    /// A date and time value that represents the end point of a period.
    /// </returns>
    public KanbanFulfilledDemandPeriodEnd fulfilledDemandPeriodEnd(TransDateTime  _calculationCreationDate)
    {
        TransDateTime   calculationCreationDate = super(_calculationCreationDate);

        if (   this.calcDateBeforeSeason(calculationCreationDate)
            || this.calcDateInSeason(calculationCreationDate))
        {
            return DateTimeUtil::addYears(this.seasonEndDate(calculationCreationDate),-1);
        }

        if (this.calcDateAfterSeason(calculationCreationDate))
        {
            return this.seasonEndDate(calculationCreationDate);
        }

        return DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fulfilledDemandPeriodStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date and time from when the fulfilled demand transactions are included.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation creation time.
    /// </param>
    /// <returns>
    /// A date and time value that represents the end point of a period.
    /// </returns>
    public KanbanFulfilledDemandPeriodStart fulfilledDemandPeriodStart(TransDateTime  _calculationCreationDate)
    {
        TransDateTime   calculationCreationDate = super(_calculationCreationDate);

        if (   this.calcDateBeforeSeason(calculationCreationDate)
            || this.calcDateInSeason(calculationCreationDate))
        {
            return DateTimeUtil::addYears(this.seasonStartDate(calculationCreationDate),-1);
        }

        if (this.calcDateAfterSeason(calculationCreationDate))
        {
            return this.seasonStartDate(calculationCreationDate);
        }

        return DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanRuleActiveAsOfDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date and time at when kanban rules are selected for recalculation.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation creation time.
    /// </param>
    /// <returns>
    /// A date and time value at when kanban rules are selected.
    /// </returns>
    public KanbanRuleActiveAsOfDate kanbanRuleActiveAsOfDate(TransDateTime _calculationCreationDate)
    {
        return this.kanbanRuleNewEffectiveDate(_calculationCreationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanRuleNewEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date and time on which new kanban rules are effective if existing kanban rules are replaced.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation creation time.
    /// </param>
    /// <returns>
    /// A date and time value on when kanban rules are effective from.
    /// </returns>
    public KanbanRuleNewEffectiveDate kanbanRuleNewEffectiveDate(TransDateTime  _calculationCreationDate)
    {
        TransDateTime   calculationCreationDate = super(_calculationCreationDate);

        if (this.calcDateBeforeSeason(calculationCreationDate))
        {
            return this.seasonStartDate(calculationCreationDate);
        }

        if (this.calcDateInSeason(calculationCreationDate))
        {
            return calculationCreationDate;
        }

        if (this.calcDateAfterSeason(calculationCreationDate))
        {
            return DateTimeUtil::addYears(this.seasonStartDate(calculationCreationDate),1);
        }

        return DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>seasonEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date and time of the season based on the specified calculation date and time.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation creation time in UTC.
    /// </param>
    /// <returns>
    /// A date and time value that represents the end of the season in UTC.
    /// </returns>
    private TransDateTime seasonEndDate(TransDateTime  _calculationCreationDate)
    {
        TransDateTime       calculationCreationDate = DateTimeUtil::applyTimeZoneOffset(_calculationCreationDate, DateTimeUtil::getCompanyTimeZone());

        TransDate           tmpStartDate = mkDate(this.StartDay,this.StartMonth,DateTimeUtil::year(calculationCreationDate));
        TransDate           tmpEndDate   = mkDate(this.EndDay,this.EndMonth,DateTimeUtil::year(calculationCreationDate));

        if (   tmpStartDate > tmpEndDate
            && DateTimeUtil::date(calculationCreationDate) >= tmpEndDate)
        {
            tmpEndDate = nextYr(tmpEndDate);
        }

        return DateTimeUtil::newDateTime(tmpEndDate,DateTimeUtil::time(calculationCreationDate),DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>seasonStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the start date and time of the season based on the specified calculation date and time.
    /// </summary>
    /// <param name="_calculationCreationDate">
    /// A date and time value that represents the kanban quantity calculation creation time in UTC.
    /// </param>
    /// <returns>
    /// A date and time value that represents the start of the season in the UTC.
    /// </returns>
    private TransDateTime seasonStartDate(TransDateTime  _calculationCreationDate)
    {
        TransDateTime       calculationCreationDate = DateTimeUtil::applyTimeZoneOffset(_calculationCreationDate, DateTimeUtil::getCompanyTimeZone());

        TransDate   tmpStartDate = mkDate(this.StartDay,this.StartMonth,DateTimeUtil::year(calculationCreationDate));
        TransDate   tmpEndDate   = mkDate(this.EndDay,this.EndMonth,DateTimeUtil::year(calculationCreationDate));

        if (   tmpStartDate > tmpEndDate
            && DateTimeUtil::date(calculationCreationDate) < tmpEndDate)
        {
            tmpStartDate = prevYr(tmpStartDate);
        }

        return DateTimeUtil::newDateTime(tmpStartDate,DateTimeUtil::time(calculationCreationDate), DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (! this.StartDay
         || ! this.StartMonth)
        {
           ret = checkFailed(strFmt("@SYS26332", "@SYS313335"));
        }

        if (! this.EndDay
         || ! this.EndMonth)
        {
           ret = checkFailed(strFmt("@SYS26332", "@SYS313346"));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS315551</DeveloperDocumentation>
	<FormRef>KanbanQuantityPolicy</FormRef>
	<Label>@SYS315565</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>StartDay</TitleField1>
	<TitleField2>StartMonth</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Extends>KanbanQuantityPolicyDemandPeriod</Extends>
	<Modules>ProductionControl</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartMonth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndMonth</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Season</Name>
			<Label>@SYS315565</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartMonth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndMonth</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>DaysOfMonth</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndMonth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>MonthsOfYear</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StartDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>DaysOfMonth</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StartMonth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>MonthsOfYear</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KanbanQuantityPolicyDemandPeirod_Season</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>KanbanQuantityPolicyDemandPeriod</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DemandPeriod</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>Season</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>