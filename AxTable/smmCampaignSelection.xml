<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmCampaignSelection</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmCampaignSelection extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>busRelAccount</Name>
				<Source><![CDATA[
    smmBusRelAccount busRelAccount()
    {
        return smmBusRelTable::findByParty(this.Party).BusRelAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canActivityBeStored</Name>
				<Source><![CDATA[
    public boolean canActivityBeStored()
    {
        if (this.PlannedDate == dateNull())
        {
            return false;
        }

        if (!this.FollowUpRespWorker)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display Name contactPersonName()
    {
        return ContactPerson::name(this.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAsIs</Name>
				<Source><![CDATA[
    public void copyAsIs(smmCampaignId _campaignId, smmCampaignId _newsmmCampaignId)
    {
        smmCampaignSelection    newsmmCampaignSelection = null;
        smmCampaignSelection    smmCampaignSelection;

        // Update new copy
        ttsbegin;

        while select CampaignId, Party, ContactPersonId from smmCampaignSelection
            index hint PartyIdx
            where smmCampaignSelection.CampaignId == _campaignId
        {
            newsmmCampaignSelection.clear();

            newsmmCampaignSelection.CampaignId              = _newsmmCampaignId;
            newsmmCampaignSelection.Party             = smmCampaignSelection.Party;
            newsmmCampaignSelection.ContactPersonId         = smmCampaignSelection.ContactPersonId;
            newsmmCampaignSelection.BroadcastType           = smmCampaignBroadcastType::NotBroadcasted;

            newsmmCampaignSelection.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewActivity</Name>
				<Source><![CDATA[
    public smmActivities createNewActivity()
    {
        smmActivities   smmActivities;

        if (this.canActivityBeStored())
        {
            smmActivities = smmActivityCreate::createActivity(this);
        }
        return smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        smmActivities   smmActivities;

        ttsbegin;

        // Is an activity attached to the call list
        if (this.ActivityNumber)
        {
            // Delete the attached activity
            smmActivities = smmActivities::find(this.ActivityNumber, true);
            smmActivities.delete(false);
        }

        ttscommit;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    edit smmCampaignTargetName  editContactPersonName(boolean _set, smmCampaignTargetName _name)
    {
        #define.blank('')
        smmContactPersonId  contactPersonId;
        smmCampaignTargetName   name = _name;

        if (_set)
        {
            if (name)
            {
                contactPersonId         = this.ContactPersonId;
                this.ContactPersonId    = ContactPerson::findNameParty(this.Party,_name).ContactPersonId;
                if (this.validateField(fieldNum(smmCampaignSelection,ContactPersonId)))
                {
                    if (this.ContactPersonId)
                    {
                        name = ContactPerson::find(this.ContactPersonId).personName();
                    }
                }
                else
                {
                    this.ContactPersonId = contactPersonId;
                }
            }
            else
            {
                this.ContactPersonId = #blank;
            }
        }
        else
        {
            name = this.contactPersonName();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.BroadcastType = smmCampaignBroadcastType::NotBroadcasted;
        this.PlannedDate   = smmCampaignTable::find(this.CampaignId).CampaignDate;
        if (!this.PlannedDate)
        {
            this.PlannedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // Create follow up activity for the campaign
        if (this.canActivityBeStored() && !this.ActivityNumber && smmParametersTable::find().CampaignTargetsCreateActivity != smmCreateActivity::AdvancedPrompt)
        {
            this.ActivityNumber = smmActivityCreate::createActivity(this).ActivityNumber;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBusRelAddress</Name>
				<Source><![CDATA[
    display Addressing showBusRelAddress()
    {
        return DirParty::getAddress(this.Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBusRelTypeId</Name>
				<Source><![CDATA[
    display smmBusRelTypeId showBusRelTypeId()
    {
        return smmBusRelTable::findByParty(this.Party).BusRelTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCampaignDate</Name>
				<Source><![CDATA[
    public display smmCampaignDate showCampaignDate(smmCampaignSelection _smmCampaignSelection)
    {
        return smmCampaignTable::find(_smmCampaignSelection.CampaignId).CampaignDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCampaignName</Name>
				<Source><![CDATA[
    public display smmCampaignName showCampaignName(smmCampaignSelection _smmCampaignSelection)
    {
        return smmCampaignTable::find(_smmCampaignSelection.CampaignId).CampaignName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCampaignResponsible</Name>
				<Source><![CDATA[
    public display EmplName showCampaignResponsible(smmCampaignSelection _smmCampaignSelection)
    {
        smmCampaignTable    campaignTable;
        HcmWorker           hcmWorker;
        DirPerson           person;

        select RecId from campaignTable
                where campaignTable.CampaignId == _smmCampaignSelection.CampaignId
            join RecId from hcmWorker
                where hcmWorker.RecId == campaignTable.CampaignRespWorker
            join Name from person
                where person.RecId == hcmWorker.Person;

        return person.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCampaignStatus</Name>
				<Source><![CDATA[
    public display Description showCampaignStatus(smmCampaignSelection _smmCampaignSelection)
    {
        return enum2str(smmCampaignTable::find(_smmCampaignSelection.CampaignId).CampaignStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showContactPerson</Name>
				<Source><![CDATA[
    display ContactPersonName showContactPerson()
    {
        return ContactPerson::find(this.ContactPersonId).personName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocHanIcon</Name>
				<Source><![CDATA[
    display smmDocIconNum showDocHanIcon()
    {
        #macrolib.resource

        if ((select docuRef where docuRef.RefCompanyId == this.DataAreaId && docuRef.RefTableId == this.TableId && docuRef.RefRecId == this.RecId).RecId)
        {
            return #RES_NODE_DOC;
        }

        return #RES_AM_NEW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEmail</Name>
				<Source><![CDATA[
    display Email showEmail()
    {
        if (this.ContactPersonId)
        {
            return ContactPerson::find(this.ContactPersonId).email();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPartyName</Name>
				<Source><![CDATA[
    display DirPartyName showPartyName()
    {
        return DirPartyTable::findRec(this.Party).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPhone</Name>
				<Source><![CDATA[
    display Phone showPhone()
    {
        if (this.ContactPersonId)
        {
            return ContactPerson::find(this.ContactPersonId).phone();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTitle</Name>
				<Source><![CDATA[
    display TitleId showTitle()
    {
        DictTable dictTable = new DictTable(tableNum(ContactPerson));

        if (dictTable.rights() >= AccessType::View)
        {
            return ContactPerson::find(this.ContactPersonId).Title;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _activityHandling = true, smmActivities _templateActivity = null)
    {
        smmActivities   smmActivities;
        boolean         createActivity = false;
        boolean         advancePrompt;
        smmActivityId   oldActivityId;

        if (_activityHandling)
        {
            advancePrompt  = (smmParametersTable::find().CampaignTargetsCreateActivity == smmCreateActivity::AdvancedPrompt);

            // Is the activity already attached to the campaign target
            if (this.ActivityNumber)
            {
                ttsbegin;

                // Special case - if advance prompt
                oldActivityId = (advancePrompt) ? this.orig().ActivityNumber : this.ActivityNumber;

                smmActivities = smmActivities::find(oldActivityId, true);

                // Is the required fields on the campaign target (and if advance prompt and activity already attached)
                if (this.canActivityBeStored() && (!advancePrompt || oldActivityId == this.ActivityNumber))
                {
                    if (smmActivities)
                    {
                        // Is the worker still the same
                        if (smmActivities.ResponsibleWorker == this.FollowUpRespWorker)
                        {
                            // Update fields on the CRM activity
                            smmActivities.updateFromCampaignTarget(this);
                        }
                        else if (!advancePrompt)
                        // The responsible worker on the campaign target is changed
                        {
                            // Delete the attached activity for the old employee
                            smmActivities.delete(false);

                            // Create a new activity for the new responsible
                            createActivity = true;
                        }
                    }
                }
                else
                {
                    if (smmActivities)
                    {
                        // Clear the link to old activity
                        if (!advancePrompt || !this.FollowUpRespWorker)
                        {
                            this.ActivityNumber = '';
                        }
                        // Delete the attached activity
                        smmActivities.delete(false);
                    }
                }

                ttscommit;
            }
            else
            // Create follow up activity for the campaign target if the campaign has a responsible worker
            if (this.FollowUpRespWorker)
            {
                createActivity = true;
            }

            if (createActivity && this.canActivityBeStored() && (!advancePrompt || _templateActivity))
            {
                this.ActivityNumber = smmActivityCreate::createActivity(this, false,_templateActivity).ActivityNumber;
            }
        }

        super();

        // Update the CRM transaction log
        smmTransLog::initTrans(this, smmLogAction::update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromAdvPromptActivity</Name>
				<Source><![CDATA[
    /* Call this before update for handling advanced prompt case.
       It should not be inside ttsbegin and ttscommit. */
    void updateFromAdvPromptActivity(smmCampaignSelection _orig = this.orig())
    {
        smmActivities       smmActivities;

        // If advanced prompt
        if (smmParametersTable::find().CampaignTargetsCreateActivity == smmCreateActivity::AdvancedPrompt)
        {
            // If responsible was changed or there was no activity attached earlier
            if ( this.canActivityBeStored() && ((this.FollowUpRespWorker != _orig.FollowUpRespWorker)
                 || (!_orig.ActivityNumber)))
            {
                smmActivities       = smmActivityCreate::createActivity(this);
                this.ActivityNumber = smmActivities.ActivityNumber;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(smmTMCallListTable,Party) :
                    if (DirPartyTable::findRec(this.Party).type() != DirPartyType::Organization)
                    {
                        ret = checkFailed("@SYS136863");
                    }
                    break;

                case fieldNum(smmCampaignSelection,ContactPersonId) :
                    if (this.Party && ContactPerson::find(this.ContactPersonId).ContactForParty != this.Party)
                    {
                        // Contact person "%1" must be attached to the Party "%2".
                        return checkFailed(strFmt("@SYS92799",this.ContactPersonId,this.Party));
                    }
                    break;

                case fieldNum(smmCampaignSelection, BusRelMainRespWorker) :
                    if (this.BusRelMainRespWorker)
                    {
                        ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.BusRelMainRespWorker);
                    }
                    break;

                case fieldNum(smmCampaignSelection, FollowUpRespWorker ) :
                    if (this.FollowUpRespWorker)
                    {
                        ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.FollowUpRespWorker);
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a <c>BusRelMainRespWorker</c> and <c>FollowUpRespWorker</c> of the
    /// <c>smmCampaignSelection</c> table belongs to the current Legal Entity.
    /// </summary>
    /// <param name="validateWorkerOnly">
    /// A Boolean value that indicates whether only the worker has to be validated.
    /// </param>
    /// <returns>
    /// true if the worker belongs to current Legal Entity; otherwise, false.
    /// </returns>
    public boolean validateWrite(boolean validateWorkerOnly = false)
    {
        boolean ret = true;

        if (!validateWorkerOnly)
        {
            ret = super();
        }

        if (this.BusRelMainRespWorker)
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.BusRelMainRespWorker);
        }

        if (this.FollowUpRespWorker)
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.FollowUpRespWorker);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResponsibleForResponsibilities</Name>
				<Source><![CDATA[
    public static void addResponsibleForResponsibilities(smmCampaignId _campaignId, container _workers)
    {
        #define.nextTarget(2)

        smmCampaignSelection        smmCampaignSelection;
        RecId                       campaignSelRecId;
        Counter                     counter = 1;
        int                         numberOfresponsibilityAssigned;
        CrmWorkerRecId              worker;
        smmActivities               templateActivity = null;
        boolean                     activityHandling = false;

        // First worker are fetched from the container
        worker = conPeek(_workers, counter);

        // First workers number of responsibilities are fetched from the container
        numberOfresponsibilityAssigned = conPeek(_workers, counter + 1);

        // Create activity for a first target and use it as a template activity
        while select smmCampaignSelection where smmCampaignSelection.CampaignId == _campaignId && smmCampaignSelection.FollowUpRespWorker == 0
        {
            // Should more targets be assigned to employee
            if (numberOfresponsibilityAssigned == 0)
            {
                // Go to next (employee, number of targets) in the container
                counter = counter + #nextTarget;

                // Next worker are fetched from the container
                worker = conPeek(_workers, counter);

                // Next workers number of responsibilities are fetched from the container
                numberOfresponsibilityAssigned = conPeek(_workers, counter + 1);
            }
            if (counter < conLen(_workers))
            {
                // Assign worker to the target
                smmCampaignSelection.FollowUpRespWorker = worker;

                if (smmCampaignSelection.canActivityBeStored())
                {
                    // Use the first created activity as a template activity for the remainder of the campaign targets
                    templateActivity = smmCampaignSelection.createNewActivity();

                    // Is activity handling active (the user responded Yes to the first activity)
                    if (templateActivity)
                    {
                        activityHandling = true;
                        campaignSelRecId = smmCampaignSelection.RecId;
                    }
                    else
                    {
                       // The user responded "No" to creating activities. Turn off activity handling
                       activityHandling = false;
                    }

                    break;
                }

                // Decrease the number of targets that should be assigned to the current worker
                numberOfresponsibilityAssigned--;
            }
        }

        try
        {
            ttsbegin;

            counter = 1;

            // First worker are fetched from the container
            worker = conPeek(_workers, counter);

            // First workers number of responsibilities are fetched from the container
            numberOfresponsibilityAssigned = conPeek(_workers, counter + 1);

            // Traverse all targets that haven't a target assigned
            while select forupdate smmCampaignSelection where smmCampaignSelection.CampaignId == _campaignId && smmCampaignSelection.FollowUpRespWorker == 0
            {
                // Should more targets be assigned to worker
                if (numberOfresponsibilityAssigned == 0)
                {
                    // Go to next (worker, number of targets) in the container
                    counter = counter + #nextTarget;

                    // Next worker are fetched from the container
                    worker = conPeek(_workers, counter);

                    // Next workers number of responsibilities are fetched from the container
                    numberOfresponsibilityAssigned = conPeek(_workers, counter + 1);
                }

                if (counter < conLen(_workers))
                {
                    // Assign worker to the target
                    smmCampaignSelection.FollowUpRespWorker = worker;

                    if (smmCampaignSelection.RecId == campaignSelRecId)
                    {
                        smmCampaignSelection.ActivityNumber = templateActivity.ActivityNumber;
                        smmCampaignSelection.update(false);
                    }
                    else
                    {
                       // Update the campaign target
                        smmCampaignSelection.update(activityHandling, templateActivity);
                    }

                    // Decrease the number of targets that should be assigned to the current worker
                    numberOfresponsibilityAssigned--;
                }
            }

            ttscommit;
        }
        catch
        {
            if (templateActivity)
            {
                ttsbegin;
                templateActivity = smmActivities::find(templateActivity.ActivityNumber,true);
                if (templateActivity)
                {
                    templateActivity.delete(false);
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countAlreadyAssignedTargets</Name>
				<Source><![CDATA[
    public static Counter countAlreadyAssignedTargets(smmCampaignId _campaignId)
    {
        smmCampaignSelection     smmCampaignSelection;

        select count (RecId) from smmCampaignSelection where smmCampaignSelection.CampaignId                == _campaignId &&
                                                             smmCampaignSelection.FollowUpRespWorker        != 0;

        return any2int(smmCampaignSelection.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNumbers</Name>
				<Source><![CDATA[
    public static Counter countNumbers(smmCampaignId _campaignId)
    {
        smmCampaignSelection     smmCampaignSelection;

        if (_campaignId == '')
        {
            select count (RecId) from smmCampaignSelection where smmCampaignSelection.CampaignId != '';
        }
        else
        {
            select count (RecId) from smmCampaignSelection where smmCampaignSelection.CampaignId == _campaignId;
        }

        return any2int(smmCampaignSelection.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNumbersOfUnassignedTargets</Name>
				<Source><![CDATA[
    public static Counter countNumbersOfUnassignedTargets(smmCampaignId _campaignId)
    {
        smmCampaignSelection smmCampaignSelection;

        select count (RecId) from smmCampaignSelection where smmCampaignSelection.CampaignId == _campaignId && smmCampaignSelection.FollowUpRespWorker == 0;

        return any2int(smmCampaignSelection.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static smmCampaignSelection find(DirPartyRecId _party, boolean _forupdate = false)
    {
        smmCampaignSelection smmCampaignSelection = null;

        if (_party)
        {
            smmCampaignSelection.selectForUpdate(_forupdate);

            select firstonly smmCampaignSelection
                index hint PartyIdx
                where smmCampaignSelection.Party == _party;
        }

        return smmCampaignSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find2</Name>
				<Source><![CDATA[
    public static smmCampaignSelection find2(DirPartyRecId    _party,
                                             smmCampaignId    _campaignId,
                                             ContactPersonId  _contactPersonId,
                                             boolean          _forUpdate = false)
    {
        smmCampaignSelection campaignSelection = null;

        if (_party && _campaignId && _contactPersonId)
        {
            campaignSelection.selectForUpdate(_forUpdate);

            select firstonly campaignSelection
                where campaignSelection.Party   == _party &&
                      campaignSelection.CampaignId      == _campaignId    &&
                      campaignSelection.ContactPersonId == _contactPersonId;
        }

        return campaignSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCampaign</Name>
				<Source><![CDATA[
    public static smmCampaignSelection findCampaign(smmCampaignId     _campaignID,
                                                    DirPartyRecId     _party,
                                                    ContactPersonId   _contactPersonId,
                                                    boolean           _forupdate = false)
    {
        smmCampaignSelection smmCampaignSelection = null;

        if (_campaignID)
        {
            smmCampaignSelection.selectForUpdate(_forupdate);

            select firstonly smmCampaignSelection
                index hint PartyIdx
                where smmCampaignSelection.CampaignId       == _campaignID     &&
                      smmCampaignSelection.Party    == _party  &&
                      smmCampaignSelection.ContactPersonId  == _contactPersonId;
        }

        return smmCampaignSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static smmCampaignSelection findRecId(RecId _recId, boolean _forupdate = false)
    {
        smmCampaignSelection smmCampaignSelection = null;

        if (_recId)
        {
            smmCampaignSelection.selectForUpdate(_forupdate);

            select firstonly smmCampaignSelection
                index hint RecId
                where smmCampaignSelection.RecId == _recId;
        }

        return smmCampaignSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCampaignTargets</Name>
				<Source><![CDATA[
    public static void insertCampaignTargets(smmCampaignId _campaignId)
    {
        smmCampaignSelection        campaignSelection;
        smmCampaignSelection        campSel = null;
        smmCampaignSelectionResult  campSelRes;
        smmCampaignTable            campaignTable;

        if (_campaignId && smmCampaignTable::exist(_campaignId))
        {
            smmCampaignSelection::removeCampaignTargets(_campaignId);

            while select CampaignId, Party, ContactPersonId from campSelRes
                where campSelRes.CampaignId == _campaignId
                    notExists join campaignSelection
                    where campaignSelection.CampaignId      == campSelRes.CampaignId    &&
                          campaignSelection.Party           == campSelRes.Party         &&
                          campaignSelection.ContactPersonId == campSelRes.ContactPersonId
                {
                    campSel.clear();
                    campSel.initValue();

                    campSel.CampaignId      = campSelRes.CampaignId;
                    campSel.Party     = campSelRes.Party;
                    campSel.ContactPersonId = campSelRes.ContactPersonId;
                    campSel.BroadcastType   = smmCampaignBroadcastType::NotBroadcasted;

                    campSel.insert();
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStarted</Name>
				<Source><![CDATA[
    public static boolean isStarted(smmCampaignId _campaignId)
    {
        smmCampaignSelection smmCampaignSelection;

        select count (RecId) from smmCampaignSelection
            where smmCampaignSelection.CampaignId   == _campaignId  &&
                  smmCampaignSelection.Responded    == NoYes::Yes;

        return smmCampaignSelection.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateFromSourceTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds campaign targets based on the campaign's source code.
    /// </summary>
    /// <param name="_campaignId">
    /// The campaign ID of the <c>smmCampaignTable</c> record.
    /// </param>
    /// <param name="_sourceId">
    /// The campaign ID of the <c>MCRSourceCodeSetup</c> record.
    /// </param>
    public static void mcrCreateFromSourceTarget(smmCampaignId _campaignId, MCRSourceID _sourceId)
    {
        smmCampaignTable            smmCampaignTable;
        MCRSourceCodeSetup          mcrSourceCodeSetup;

        if (Box::yesNo("@MCR25795", DialogButton::Yes, "@MCR25796") == DialogButton::Yes)
        {
            smmCampaignTable = smmCampaignTable::find(_campaignId);
            mcrSourceCodeSetup = MCRSourceCodeSetup::find(_sourceId);

            if (smmCampaignTable && mcrSourceCodeSetup)
            {
               smmCampaignSelection::mcrInsertCampaignSelection(_campaignId, mcrSourceCodeSetup.TargetID);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCampaignTargets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all campaign targets for a given campaign.
    /// </summary>
    /// <param name = "_campaignId">A campaign target for which to remove the targets.</param>
    private static void removeCampaignTargets(smmCampaignId _campaignId)
    {
        smmCampaignSelection        campaignSelection;
        smmCampaignSelectionResult  campaignSelectionResult;

        if (_campaignId)
        {
            delete_from campaignSelection
            where campaignSelection.CampaignId      == _campaignId
            notExists join campaignSelectionResult
                where campaignSelectionResult.CampaignId      == campaignSelection.CampaignId    &&
                        campaignSelectionResult.Party           == campaignSelection.Party         &&
                        campaignSelectionResult.ContactPersonId == campaignSelection.ContactPersonId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInsertCampaignSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a <c>smmCampaignSelection</c> record based on the passed parameters.
    /// </summary>
    /// <param name="_campaignId">
    /// The <c>smmCampaignId</c> to be applied to the new <c>smmCampaignSelection</c> record.
    /// </param>
    /// <param name="_mcrTargetId">
    /// The target ID used to insert all applicable parties into the new <c>smmCampaignSelection</c> record.
    /// </param>
    private static void mcrInsertCampaignSelection(smmCampaignId _campaignId, MCRTargetID _mcrTargetId)
    {
        smmCampaignSelection    smmCampaignSelection;
        MCRTargetList           mcrTargetList;
        CustTable               custTable;
        ContactPerson           contactPerson;

        ttsbegin;

        while select RecId, Party, ContactPersonId from mcrTargetList
            where mcrTargetList.TargetID == _mcrTargetId
        {
            // Don't allow relations that are flagged as deleted to be inserted
            if (smmBusRelTable::findByParty(mcrTargetList.RecId).mcrIsListDeleted())
            {
                continue;
            }

            smmCampaignSelection.clear();
            smmCampaignSelection.initValue();
            smmCampaignSelection.CampaignId = _campaignId;
            smmCampaignSelection.Party = mcrTargetList.Party;

            custTable = custTable::findByPartyRecId(mcrTargetList.Party);
            select firstOnly ContactPersonId from contactPerson
                where contactPerson.ContactForParty == custTable.Party;
            smmCampaignSelection.ContactPersonId = contactPerson.ContactPersonId;

            // Check that the campaign target isn't already inserted
            if (!smmCampaignSelection::find2(smmCampaignSelection.Party, smmCampaignSelection.CampaignId, smmCampaignSelection.ContactPersonId).RecId)
            {
                if (smmCampaignSelection.validateWrite())
                {
                    smmCampaignSelection.insert();
                }
                else
                {
                    throw error ("@SYS104318");
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefOnInsert</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnInsert))]
    static void DocuRefOnInsert(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        if (_docuRef.RefTableId == tablenum(smmCampaignSelection))
        {
            changecompany(_docuRef.RefCompanyId)
            {
                smmCampaignSelection smmCampaignSelection   = smmCampaignSelection::findRecId(_docuRef.RefRecId);
                _docuRef.Party                  = smmCampaignSelection.Party;
                _docuRef.ContactPersonId        = smmCampaignSelection.ContactPersonId;
                _docuRef.Author                 = DirPersonUser::current().PersonParty;
                _docuRef.ActualCompanyId        = curext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmMA</ConfigurationKey>
	<DeveloperDocumentation>@SYS124805</DeveloperDocumentation>
	<FormRef>smmCampaignTable</FormRef>
	<Label>@SYS80298</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CampaignId</TitleField1>
	<TitleField2>NumOfTargets</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>UniqueIdx</ClusteredIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>UniqueIdx</PrimaryIndex>
	<ReplacementKey>UniqueIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activity</Name>
			<Label>@SYS54618</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllFields</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlannedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Responded</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AnswerFrequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfTargets</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BroadcastType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SysCheckParameter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FollowUpRespWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusRelMainRespWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DistributionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMVirtualNetworkAnswerTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignResponse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPMiniPage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showPartyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlannedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BroadcastType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CampaignResponse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FollowUpRespWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CampaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Selection</Name>
			<Label>@SYS7678</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumOfTargets</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AnswerFrequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Responded</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AnswerFrequency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignAnswerFrequency</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BroadcastType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmCampaignBroadcastType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BusRelMainRespWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmBusRelAccResponsibleWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CampaignId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CampaignResponse</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmCampaignResponse</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DistributionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignBroadcastDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FollowUpRespWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CrmWorkerRecId</ExtendedDataType>
			<Label>@SYS80923</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KMVirtualNetworkAnswerTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KMVirtualNetworkAnswerTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NameId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignQueryName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NumOfTargets</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignNumOfTargets</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Label>@SYS319238</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PlannedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignPlannedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Responded</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignResponded</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SysCheckParameter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmCampaignSysCheckParameter</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ActivityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PartyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FollowUpRespWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BusRelMainRespWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UniqueIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CampaignId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContactPersonId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CampaignQuery</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124806</EntityRelationshipRole>
			<RelatedTable>smmCampaignQuery</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NameId</Name>
					<Field>NameId</Field>
					<RelatedField>NameId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignId</Name>
					<Field>CampaignId</Field>
					<RelatedField>CampaignId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ContactPerson</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>smmCampaignSelection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirAddressBookParty</Name>
			<RelatedTable>DirAddressBookPartyAllView</RelatedTable>
			<RelatedTableRole>DirAddressBookPartyAllView</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>smmCampaignSelection</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsPartyOf</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>IsCampaignSelectionFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FollowUpRespWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_smmCampaignSelection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FollowUpRespWorker</Name>
					<Field>FollowUpRespWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>KMVirtualNetworkAnswerLine</Name>
			<EntityRelationshipRole>@SYS124807</EntityRelationshipRole>
			<RelatedTable>KMVirtualNetworkAnswerLine</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KMVirtualNetworkAnswerTableId</Name>
					<Field>KMVirtualNetworkAnswerTableId</Field>
					<RelatedField>kmVirtualNetworkAnswerTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KMVirtualNetworkAnswerTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>KMVirtualNetworkAnswerTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>KMVirtualNetworkAnswerTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignSelection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KMVirtualNetworkAnswerTableId</Name>
					<SourceEDT>KMVirtualNetworkAnswerTableId</SourceEDT>
					<Field>KMVirtualNetworkAnswerTableId</Field>
					<RelatedField>kmVirtualNetworkAnswerTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ExecutedByIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MainRespWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_smmCampaignSelection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusRelMainRespWorker</Name>
					<Field>BusRelMainRespWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmCampaignSelection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>smmActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmBusRelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124782</EntityRelationshipRole>
			<RelatedTable>smmBusRelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmCampaignTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124783</EntityRelationshipRole>
			<RelatedTable>smmCampaignTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CampaignId</Name>
					<SourceEDT>smmCampaignId</SourceEDT>
					<Field>CampaignId</Field>
					<RelatedField>CampaignId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmLeadTable</Name>
			<EntityRelationshipRole>@SYS124784</EntityRelationshipRole>
			<RelatedTable>smmLeadTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmOpportunityTable</Name>
			<EntityRelationshipRole>@SYS124767</EntityRelationshipRole>
			<RelatedTable>smmOpportunityTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmQuotationCompetitorGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124768</EntityRelationshipRole>
			<RelatedTable>smmQuotationCompetitorGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>