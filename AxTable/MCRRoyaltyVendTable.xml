<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRoyaltyVendTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRRoyaltyVendTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateRoyaltyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the royalty amounts based on the royalty amount type.
    /// </summary>
    public void calculateRoyaltyAmount()
    {
        Amount                  royaltyAmount;
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing  = this.mcrRoyaltyTablePricing();
        MCRRoyaltyTable         mcrRoyaltyTable         = this.mcrRoyaltyTable();

        switch (mcrRoyaltyTable.RoyaltyAmtType)
        {
            case MCRRoyaltyAmtType::AmountPerUnit :
                royaltyAmount = this.royaltyAmountPerUnit();
                break;

            case MCRRoyaltyAmtType::FixedAmount:
                royaltyAmount = this.convertToNegativeRoyalty(mcrRoyaltyTablePricing.RoyaltyValue);
                break;

            case MCRRoyaltyAmtType::Percentage:
                royaltyAmount = this.SalesAmount
                                    * mcrRoyaltyTablePricing.RoyaltyValue
                                    / 100;
                break;

            default:
                throw error("@PDS1430");
        }

        if(this.CurrencyCode == mcrRoyaltyTable.Currency)
        {
            royaltyAmount           = CurrencyExchangeHelper::amount(royaltyAmount, mcrRoyaltyTable.Currency);
            this.StartingRoyaltyAmt = CurrencyExchangeHelper::curAmount2CurAmount(royaltyAmount, mcrRoyaltyTable.Currency, this.CurrencyCode);
        }
        else
        {
            royaltyAmount           = CurrencyExchangeHelper::amount(royaltyAmount, this.CurrencyCode);
            //This StartingRoyaltyAmt should be in the same currency in royaltyAmount
            //RoyaltyAmount already converted to expected currency. if royaltyAmount currency is different from mcrRoyaltyTable.Currency. 
            //Assign RoyaltyAmount to StartingRoyaltyAmt directly.
            this.StartingRoyaltyAmt = royaltyAmount;
        }
        
        this.CorrectedRoyaltyAmt    = this.StartingRoyaltyAmt;
        this.RoyaltyBalance         = this.StartingRoyaltyAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the royalty claim can be deleted.
    /// </summary>
    /// <returns>
    /// true, if the royalty claim can be deleted; otherwise, false.
    /// </returns>
    public boolean canBeDeleted()
    {
        return this.status().canBeDeleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConsumedRebateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the consumed royalty amount is correct.
    /// </summary>
    /// <returns>
    /// true if the consumed royalty amount is valid; otherwise, false.
    /// </returns>
    public boolean checkConsumedRebateAmount()
    {
        boolean ret = true;

        if (this.CorrectedRoyaltyAmt > this.StartingRoyaltyAmt)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the passed in dates are valid for this royalty.
    /// </summary>
    /// <param name="_startDate">
    /// The start date to validate against the royalty.
    /// </param>
    /// <param name="_endDate">
    /// The end date to validate against the royalty.
    /// </param>
    /// <returns>
    /// true if the passed in dates are valid; otherwise, false.
    /// </returns>
    public boolean checkValidDate(date _startDate, date _endDate)
    {
        boolean ret = true;

        if (    (_startDate && (_startDate  > this.RoyaltyCalcDate))
            ||  (_endDate   && (_endDate    < this.RoyaltyCalcDate)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the standard currency
    /// </summary>
    /// <returns>
    /// the standard currency from <c>CompanyInfo</c>.
    /// </returns>
    public display CurrencyCode companyCurrencyCode()
    {
        return CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToNegativeRoyalty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a negative royalty amount if royalty quantity is negative or if the related sales line is a return item.
    /// </summary>
    /// <param name="_royaltyAmount">
    /// The royalty amount.
    /// </param>
    /// <returns>
    /// The royalty amount.
    /// </returns>
    public Amount convertToNegativeRoyalty(Amount _royaltyAmount)
    {
        PdsRebateAmt    royaltyAmount   = _royaltyAmount;
        Qty             royaltyQty      = this.mcrRoyaltyContract().UnitType  == MCRRoyaltyUnitType::InventoryUnit
                                            ? this.SalesInvoicedQty
                                            : this.cwSalesInvoicedQty;

        // Need to flip the sign on a positive royalty amount, making it negative if:
        // Either the royalty quantity is negative OR the sales order type is equal to returnedItem
        if (_royaltyAmount  > 0
            && (royaltyQty  < 0
				|| SalesLine::findRecId(this.SalesLineRefRecId).SalesType == SalesType::ReturnItem))
        {
            royaltyAmount = _royaltyAmount * (-1);
        }
        return royaltyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cumulateGapRoyaltyTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates royalties by considering the amount difference between earned royalties and royalties that were already paid.
    /// </summary>
    /// <param name="_sumRoyaltyQty">
    /// The total royalty quantity.
    /// </param>
    /// <param name="_sumRoyaltyAmount">
    /// The total royalty amount.
    /// </param>
    public void cumulateGapRoyaltyTotal(
        real _sumRoyaltyQty,
        real _sumRoyaltyAmount)
    {
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;
        MCRRoyaltyVendTable     mcrRoyaltyVendTable;
        MCRRoyaltyTable         mcrRoyaltyTable     = this.mcrRoyaltyTable();
        MCRRoyaltyContract      mcrRoyaltyContract  = this.mcrRoyaltyContract();
        SalesLine               salesLine       = SalesLine::findRecId(this.SalesLineRefRecId);
        UnitOfMeasureSymbol     salesUnit       = mcrRoyaltyContract.UnitType   == MCRRoyaltyUnitType::InventoryUnit
                                                    ? salesLine.SalesUnit
                                                    : salesLine.pdsCWUnitId();

        mcrRoyaltyTablePricing  = MCRRoyaltyTablePricing::selectMCRRoyaltyTablePricing(
                                    mcrRoyaltyTable,
                                    this.custInvoiceTrans(),
                                    _sumRoyaltyQty,
                                    salesUnit,
                                    this.CurrencyCode,
                                    _sumRoyaltyAmount);

        // Check whether we have passed the largest line break threshold
        // and therefore the total royalty amount for this agreement should equal the maximum
        if (!mcrRoyaltyTablePricing.RecId)
        {
            mcrRoyaltyTablePricing = MCRRoyaltyTablePricing::findPricingFromInventDimIdMax(
                                        mcrRoyaltyTable,
                                        this.custInvoiceTrans().ItemId,
                                        this.custInvoiceTrans().InventDimId,
                                        _sumRoyaltyQty,
                                        salesUnit,
                                        this.CurrencyCode,
                                        _sumRoyaltyAmount);
        }

        if (mcrRoyaltyTablePricing.RecId
            && mcrRoyaltyTablePricing.RecId != this.mcrRoyaltyTablePricing().RecId)
        {
            ttsbegin;

            mcrRoyaltyVendTable.selectForUpdate(true);

            mcrRoyaltyVendTable.data(this);

            mcrRoyaltyVendTable.RoyaltyAgreementLineRefRecId   = mcrRoyaltyTablePricing.RecId;

            //after assigning the line, need to calculate the royalty
            mcrRoyaltyVendTable.RoyaltyValue    = mcrRoyaltyTablePricing.RoyaltyValue;
            mcrRoyaltyVendTable.RoyaltyAmtType  = mcrRoyaltyTable.RoyaltyAmtType;
            mcrRoyaltyVendTable.calculateRoyaltyAmount();

            if (mcrRoyaltyVendTable.validateWrite())
            {
                mcrRoyaltyVendTable.update();
            }
            else
            {
                throw error("@SYS104318");
            }

            mcrRoyaltyVendTable.status().updateRoyaltiesToCumulate();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>CustInvoiceTrans</c> record that relates to the current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>CustInvoiceTrans</c> table record.
    /// </returns>
    public CustInvoiceTrans custInvoiceTrans(boolean _forUpdate = false)
    {
        return CustInvoiceTrans::findRecId(this.CustInvoiceTransRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        if (!this.canBeDeleted())
        {
            throw error(strfmt("@MCRRoyaltyVendTableDeleteStatusError", this.RoyaltyClaimId, this.RoyaltyStatus));
        }

        MCRRoyaltyVendTableStatusType royaltyVendTableStatusType = this.status();

        royaltyVendTableStatusType.deleting();

        this.royaltyTableProcess().runDeleted();

        super();

        royaltyVendTableStatusType.deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endOfCumulationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the end date for the period type selected for the royalty agreement.
    /// </summary>
    /// <returns>
    /// The end date of the period type.
    /// </returns>
    public date endOfCumulationPeriod()
    {
        MCRRoyaltyContract          mcrRoyaltyContract          = this.mcrRoyaltyContract();
        MCRRoyaltyCumulationPeriod  mcrRoyaltyCumulationPeriod  = mcrRoyaltyContract.CumulateSalesBy;
        date                        endDate;
        date                        creationDate                = this.RoyaltyCalcDate;
        ProjPeriodLine              periodLine;
        WeekDays                    startingDayOfWeek           = VendParameters::find().mcrStartingDayOfWeekPeriod;
        #TimeConstants
        switch (mcrRoyaltyCumulationPeriod)
        {
            case MCRRoyaltyCumulationPeriod::Week:
                if (dayOfWk(creationDate) >= startingDayOfWeek)
                {
                    endDate = (creationDate + (#daysPerWeek - dayOfWk(creationDate) + startingDayOfWeek) - 1);
                }
                else
                {
                    endDate = (creationDate + (startingDayOfWeek - dayOfWk(creationDate)) - 1);
                }
                break;

            case MCRRoyaltyCumulationPeriod::Month:
                endDate = endmth(creationDate);
                break;
            case MCRRoyaltyCumulationPeriod::Year:
                endDate = mkDate(#daysPerMonth + 1, #monthsPerYear, year(creationDate));
                break;
            case MCRRoyaltyCumulationPeriod::CustomizedPeriod:
                periodLine  = ProjPeriodLine::findFromPeriod(mcrRoyaltyContract.RoyaltyCustomizedPeriodType, creationDate);
                endDate = periodLine.PeriodTo;
                break;
            case MCRRoyaltyCumulationPeriod::Invoice:
                endDate = creationDate;
                break;
            default:
                throw error("@PDS1432");
        }

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default dimensions that should be used on the royalty postings.
    /// </summary>
    /// <returns>
    /// The default dimensions from the sales order line if one is related; otherwise the vendor default dimensions.
    /// </returns>
    public DimensionDefault getDefaultDimension()
    {
        DimensionDefault    dimensionDefault;
        VendTable           vendTable;
        SalesLine           salesLine;

        if (this.SalesLineRefRecId)
        {
            salesLine           = SalesLine::findRecId(this.SalesLineRefRecId);
            dimensionDefault    = salesLine.DefaultDimension;
        }
        else
        {
            vendTable           = VendTable::find(this.VendAccount);
            dimensionDefault    = vendTable.DefaultDimension;
        }

        return dimensionDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>MCRRoyaltyVendTable</c> table record with the values from an <c>CustInvoiceJour</c> and <c>CustInvoiceTrans</c> records.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table record.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The  <c>CustInvoiceTrans</c> table record.
    /// </param>
    /// <param name="_sumQty">
    /// Total quantity for the rebate.
    /// </param>
    /// <param name="_sumGrossAmt">
    /// Total gross amount for the rebate.
    /// </param>
    /// <param name="_sumNetAmt">
    /// Total net amount for the rebate.
    /// </param>
    /// <param name="_cwSumQty">
    /// Total catch weight quantity for the rebate.
    /// </param>
    /// <param name="_mcrRoyaltyContractRecId">
    /// The RecId of <c>MCRRoyaltyContract</c>.
    /// </param>
    public void initFromCustInvoiceJour(
        CustInvoiceJour         _custInvoiceJour,
        CustInvoiceTrans        _custInvoiceTrans,
        SalesQty                _sumQty         = 0,
        Amount                  _sumGrossAmt    = 0,
        Amount                  _sumNetAmt      = 0,
        PdsCWInventQty          _cwSumQty       = 0,
        RecId                   _mcrRoyaltyContractRecId = 0)
    {
        date                    calcDate;
        MCRRoyaltyTable         mcrRoyaltyTable;
        MCRRoyaltyContract      mcrRoyaltyContract;
        if (_custInvoiceJour
            && _custInvoiceTrans)
        {
            if (_mcrRoyaltyContractRecId)
            {
                mcrRoyaltyContract = MCRRoyaltyContract::findByRecId(_mcrRoyaltyContractRecId);
            }
            else
            {
                mcrRoyaltyTable     = this.mcrRoyaltyTable();
                mcrRoyaltyContract  = MCRRoyaltyContract::find(mcrRoyaltyTable.RoyaltyContract, mcrRoyaltyTable.VendAccount);
            }

            this.SalesId                    = _custInvoiceJour.SalesId;
            this.SalesInvoiceId             = _custInvoiceJour.InvoiceId;
            calcDate                        = mcrRoyaltyContract.setCalcDate(_custInvoiceTrans.salesLine());

            this.RoyaltyCalcDate            = calcDate;
            this.CustAccount                = _custInvoiceJour.InvoiceAccount;
            this.CurrencyCode               = mcrRoyaltyContract.Currency;

            this.CustInvoiceJourRefRecId    = _custInvoiceJour.RecId;
            this.SalesTableRefRecId         = _custInvoiceJour.salesTable().RecId;
            this.InventTransId              = _custInvoiceTrans.InventTransId;
            this.ItemId                     = _custInvoiceTrans.ItemId;
            this.SalesPriceUnit             = ExchangeRateHelper::curPrice2CurPrice(_custInvoiceTrans.SalesPrice, _custInvoiceTrans.CurrencyCode, mcrRoyaltyContract.Currency);

            this.SalesNetExtendedPrice      = _sumNetAmt
                                                ? _sumNetAmt
                                                : CurrencyExchangeHelper::curAmount2CurAmount(_custInvoiceTrans.LineAmount, _custInvoiceTrans.CurrencyCode, mcrRoyaltyContract.Currency);

            this.SalesInvoicedQty           = (_sumQty
                                                && _custInvoiceJour.salesTable().SalesType != SalesType::Subscription)
                                                ? _sumQty
                                                : _custInvoiceTrans.Qty;

            this.cwSalesInvoicedQty         = _cwSumQty ? _cwSumQty : _custInvoiceTrans.PdsCWQty;

            if (mcrRoyaltyContract.RoyaltyTakenFrom == MCRRoyaltyTakenFrom::Gross)
            {
                this.SalesAmount            = _sumGrossAmt
                                                ? _sumGrossAmt
                                                : CurrencyExchangeHelper::curAmount2CurAmount(_custInvoiceTrans.Qty * this.SalesPriceUnit, _custInvoiceTrans.CurrencyCode, mcrRoyaltyContract.Currency);
            }
            else
            {
                this.SalesAmount            = this.SalesNetExtendedPrice;
            }

            this.SalesLineRefRecId          = _custInvoiceTrans.salesLine().RecId;
            this.CustInvoiceTransRefRecId   = _custInvoiceTrans.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMCRRoyaltyTablePricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>MCRRoyaltyVendTable</c> table record with the values from <c>MCRRoyaltyTablePricing</c> table record.
    /// </summary>
    /// <param name="_mcrRoyaltyTablePricing">
    /// The <c>MCRRoyaltyTablePricing</c> record from which to initialize the royalty table record.
    /// </param>
    /// <param name="_mcrRoyaltyContractRecId">
    /// The RecId of <c>MCRRoyaltyContract</c>.
    /// </param>
    public void initFromMCRRoyaltyTablePricing(
        MCRRoyaltyTablePricing  _mcrRoyaltyTablePricing,
        RecId                   _mcrRoyaltyContractRecId = 0)
    {
        MCRRoyaltyTable         mcrRoyaltyTable;
        MCRRoyaltyContract      mcrRoyaltyContract;

        if (_mcrRoyaltyTablePricing)
        {
            mcrRoyaltyTable			= MCRRoyaltyTable::find(_mcrRoyaltyTablePricing.RoyaltyCode);
            if (_mcrRoyaltyContractRecId)
            {
                mcrRoyaltyContract	= MCRRoyaltyContract::findByRecId(_mcrRoyaltyContractRecId);
            }
            else
            {
                mcrRoyaltyContract	= MCRRoyaltyContract::find(mcrRoyaltyTable.RoyaltyContract, mcrRoyaltyTable.VendAccount);
            }

            if (mcrRoyaltyTable)
            {
                this.RoyaltyCode                    = mcrRoyaltyTable.RoyaltyCode;
                this.RoyaltyValue                   = _mcrRoyaltyTablePricing.RoyaltyValue;
                this.RoyaltyAmtType                 = mcrRoyaltyTable.RoyaltyAmtType;
                this.LedgerDimension                = mcrRoyaltyContract.LedgerDimension;
                this.OffsetLedgerDimension          = mcrRoyaltyContract.OffsetLedgerDimension;
                this.RoyaltyAgreementLineRefRecId   = _mcrRoyaltyTablePricing.RecId;
                this.mcrRoyaltyTableRefRecId        = mcrRoyaltyTable.RecId;
                this.VendAccount                    = mcrRoyaltyTable.VendAccount;
                this.RoyaltyPayTo                   = mcrRoyaltyTable.VendAccount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRoyaltyClaimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the royalty Id from <c>NumberSeq</c>.
    /// </summary>
    /// <param name="_makeDecisionLater">
    /// true if the number is committed later; optional.
    /// </param>
    /// <returns>
    /// The unique number for the <c>MCRRoyaltyId</c> field.
    /// </returns>
    public MCRRoyaltyId initRoyaltyClaimId(boolean _makeDecisionLater = true)
    {
        NumberSeq numberSeq			= NumberSeq::newGetNum(VendParameters::mcrNumRefRoyaltyClaim(), _makeDecisionLater);
        MCRRoyaltyId mcrRoyaltyId	= numberSeq.num();
        return mcrRoyaltyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        MCRRoyaltyVendTableStatusType royaltyVendTableStatusType = this.status();

        royaltyVendTableStatusType.inserting();

        this.RoyaltyClaimId  = this.initRoyaltyClaimId();

        super();

        royaltyVendTableStatusType.inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount to post.
    /// </summary>
    /// <returns>
    /// The ledger posting amount.
    /// </returns>
    public Amount ledgerPostingAmount()
    {
        return this.status().ledgerPostingAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRoyaltyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding <c>MCRRoyaltyContract</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The corresponding <c>MCRRoyaltyContract</c> record.
    /// </returns>
    public MCRRoyaltyContract mcrRoyaltyContract(boolean _forUpdate = false)
    {
        return MCRRoyaltyContract::findByRoyaltyContract(this.mcrRoyaltyTable().RoyaltyContract, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRoyaltyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the associated <c>MCRRoyaltyTable</c> buffer.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>MCRRoyaltyTable</c> table record.
    /// </returns>
    /// <remarks>
    /// Finds the associated <c>MCRRoyaltyTable</c> buffer based on the current royalty code.
    /// </remarks>
    public MCRRoyaltyTable mcrRoyaltyTable(boolean _forUpdate = false)
    {
        return MCRRoyaltyTable::findByRecId(this.mcrRoyaltyTableRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRoyaltyTablePricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the associated <c>MCRRoyaltyTablePricing</c> buffer.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>MCRRoyaltyTablePricing</c> table record.
    /// </returns>
    /// <remarks>
    /// Finds the associated <c>MCRRoyaltyTablePricing</c> buffer based on the current royalty code.
    /// </remarks>
    public MCRRoyaltyTablePricing mcrRoyaltyTablePricing(boolean _forUpdate = false)
    {
        return MCRRoyaltyTablePricing::findByRecId(this.RoyaltyAgreementLineRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRoyaltyVendTableCorrectedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total corrected royalty amount.
    /// </summary>
    /// <returns>
    /// The corrected royalty amount.
    /// </returns>
    public Amount mcrRoyaltyVendTableCorrectedAmount()
    {
        MCRRoyaltyVendTable mcrRoyaltyVendTable = this.royaltyTableSum(false);

        return mcrRoyaltyVendTable.CorrectedRoyaltyAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>royaltyAmountPerUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the royalty amount when the royalty amount type is calculated per unit.
    /// </summary>
    /// <returns>
    /// The royalty amount.
    /// </returns>
    public Amount royaltyAmountPerUnit()
    {
        Amount                  royaltyAmount;
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing  = this.mcrRoyaltyTablePricing();
        MCRRoyaltyContract      mcrRoyaltyContract      = this.mcrRoyaltyContract();

        SalesLine               salesLine   = SalesLine::findRecId(this.SalesLineRefRecId);

        UnitOfMeasureSymbol     salesUnit   = mcrRoyaltyContract.UnitType  == MCRRoyaltyUnitType::InventoryUnit
                                                ? salesLine.SalesUnit
                                                : salesLine.pdsCWUnitId();

        Qty                     royaltyQty  = mcrRoyaltyContract.UnitType  == MCRRoyaltyUnitType::InventoryUnit
                                                ? this.SalesInvoicedQty
                                                : this.cwSalesInvoicedQty;

        EcoResProductUnitConverter	ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(this.ItemId,
																																   salesLine.InventDimId,
																																   salesUnit,
																																   mcrRoyaltyTablePricing.UnitID,
                                                                                                                                   NoYes::No,
																																   NoYes::No);
		
        if (!ecoResProductUnitConverter.canValueBeConverted())
        {
            throw error(strFmt("@PRO1166",
                            this.ItemId,
                            salesUnit,
                            mcrRoyaltyTablePricing.UnitID));
        }
        else
        {
            royaltyQty = ecoResProductUnitConverter.convertValue(royaltyQty);
        }

        if (mcrRoyaltyContract.RoyaltyTakenFrom         == MCRRoyaltyTakenFrom::Gross)
        {
            royaltyAmount = royaltyQty * mcrRoyaltyTablePricing.RoyaltyValue;
        }
        else if (mcrRoyaltyContract.RoyaltyTakenFrom    == MCRRoyaltyTakenFrom::Net)
        {
            //Ensure no "divide by zero" errors.
            if (this.SalesPriceUnit
                && mcrRoyaltyTablePricing.RoyaltyValue)
            {
                royaltyAmount = this.SalesNetExtendedPrice
                                    / this.SalesPriceUnit
                                    * mcrRoyaltyTablePricing.RoyaltyValue;
            }
            else
            {
                royaltyAmount = 0;
            }

            royaltyAmount = this.convertToNegativeRoyalty(royaltyAmount);
        }

        return royaltyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>royaltyTableProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>MCRRoyaltyVendTableProcess</c> class instance.
    /// </summary>
    /// <returns>
    /// The <c>MCRRoyaltyVendTableProcess</c> class instance.
    /// </returns>
    public MCRRoyaltyVendTableProcess royaltyTableProcess()
    {
        return new MCRRoyaltyVendTableProcess(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>royaltyTableProcessedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total processed royalty amount.
    /// </summary>
    /// <returns>
    /// The processed royalty amount.
    /// </returns>
    public Amount royaltyTableProcessedAmount()
    {
        MCRRoyaltyVendTable     mcrRoyaltyVendTable;
        MCRRoyaltyVendTrans     mcrRoyaltyVendTrans;
        date                    startDate;
        date                    endDate;

        startDate = this.startOfCumulationPeriod();
        endDate   = this.endOfCumulationPeriod();

        select sum(RoyaltyAmt) from mcrRoyaltyVendTrans
            where mcrRoyaltyVendTrans.RoyaltyTransaction == MCRRoyaltyTransactionType::VendorPayment
            exists join mcrRoyaltyVendTable
            where mcrRoyaltyVendTable.RoyaltyClaimId == mcrRoyaltyVendTrans.RoyaltyClaimId
                && mcrRoyaltyVendTable.ItemId                           == this.ItemId
                &&  mcrRoyaltyVendTable.VendAccount                     == this.VendAccount
                &&  mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId         == this.mcrRoyaltyTableRefRecId
                &&  mcrRoyaltyVendTable.CurrencyCode                    == this.CurrencyCode
                &&  (mcrRoyaltyVendTable.RoyaltyCalcDate                >= startDate
                    || !startDate)
                &&  (mcrRoyaltyVendTable.RoyaltyCalcDate                <= endDate
                    || !endDate)
                &&  mcrRoyaltyVendTable.RoyaltyStatus                   == MCRRoyaltyVendTableStatus::Processed;

        return abs(mcrRoyaltyVendTrans.RoyaltyAmt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>royaltyTableSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount and total quantities for all royalties related to the selected royalty in order
    /// to apply the correct royalty amount.
    /// </summary>
    /// <param name="_checkProcessed">
    /// A boolean value defining whether to include the processed status in the query; optional.
    /// </param>
    /// <returns>
    /// The sum values of the <c>MCRRoyaltyVendTable</c> table records that fit the criteria.
    /// </returns>
    public MCRRoyaltyVendTable royaltyTableSum(boolean _checkProcessed = true)
    {
        MCRRoyaltyVendTable mcrRoyaltyVendTable;

        date                startDate	= this.startOfCumulationPeriod();
        date                endDate		= this.endOfCumulationPeriod();

        select sum(SalesAmount), sum(SalesInvoicedQty), sum(cwSalesInvoicedQty), sum(CorrectedRoyaltyAmt)
            from mcrRoyaltyVendTable
            where   mcrRoyaltyVendTable.ItemId                  == this.ItemId
                &&  mcrRoyaltyVendTable.VendAccount             == this.VendAccount
                &&  mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId == this.mcrRoyaltyTableRefRecId
                &&  mcrRoyaltyVendTable.CurrencyCode            == this.CurrencyCode
                &&  mcrRoyaltyVendTable.RoyaltyCalcDate         >= startDate
                &&  mcrRoyaltyVendTable.RoyaltyCalcDate         <= endDate
                && (mcrRoyaltyVendTable.RoyaltyStatus           == MCRRoyaltyVendTableStatus::ToCalculate
                    ||  mcrRoyaltyVendTable.RoyaltyStatus       == MCRRoyaltyVendTableStatus::Calculated
                    ||  mcrRoyaltyVendTable.RoyaltyStatus       == MCRRoyaltyVendTableStatus::Approved
                    || (_checkProcessed                         == true
                        && mcrRoyaltyVendTable.RoyaltyStatus    == MCRRoyaltyVendTableStatus::Processed));

        return mcrRoyaltyVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCorrectedRoyaltyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the corrected royalty amount on the current royalty record.
    /// </summary>
    public void setCorrectedRoyaltyAmount()
    {
        this.CorrectedRoyaltyAmt = this.RoyaltyBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the final status of the royalty based on its current status.
    /// </summary>
    public void setFinalStatus()
    {
        this.status().setFinalStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the next status of the royalty based on it's current status.
    /// </summary>
    public void setNextStatus()
    {
        this.status().setNextStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRoyaltyBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the royalty balance on the current royalty record.
    /// </summary>
    public void setRoyaltyBalance()
    {
        this.RoyaltyBalance -= this.CorrectedRoyaltyAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOfCumulationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the start date for the period type selected for the royalty agreement.
    /// </summary>
    /// <returns>
    /// The start date of the period type.
    /// </returns>
    public date startOfCumulationPeriod()
    {
        MCRRoyaltyContract          mcrRoyaltyContract          = this.mcrRoyaltyContract();
        MCRRoyaltyCumulationPeriod  mcrRoyaltyCumulationPeriod  = mcrRoyaltyContract.CumulateSalesBy;
        date                        startDate;
        date                        creationDate                = this.RoyaltyCalcDate;
        ProjPeriodLine              periodLine;
        WeekDays                    startingDayOfWeek           = VendParameters::find().mcrStartingDayOfWeekPeriod;
        #TimeConstants

        switch (mcrRoyaltyCumulationPeriod)
        {
            case MCRRoyaltyCumulationPeriod::Week:
                if (dayOfWk(creationDate) >= startingDayOfWeek)
                {
                    startDate = (creationDate - (dayOfWk(creationDate) - startingDayOfWeek));
                }
                else
                {
                    startDate = (creationDate - (dayOfWk(creationDate) - startingDayOfWeek + #daysPerWeek));
                }
                break;

            case MCRRoyaltyCumulationPeriod::Month:
                startDate = mkDate(1, mthOfYr(creationDate), year(creationDate));
                break;
            case MCRRoyaltyCumulationPeriod::Year:
                startDate = mkDate(1, 1, year(creationDate));
                break;
            case MCRRoyaltyCumulationPeriod::CustomizedPeriod:
                periodLine = ProjPeriodLine::findFromPeriod(mcrRoyaltyContract.RoyaltyCustomizedPeriodType, creationDate);
                startDate = periodLine.PeriodFrom;
                break;
            case MCRRoyaltyCumulationPeriod::Invoice:
                startDate = creationDate;
                break;
            default:
                throw error("@PDS1432");
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>MCRRoyaltyVendTableStatusType</c> class instance based on the royalty status.
    /// </summary>
    /// <returns>
    /// The <c>MCRRoyaltyVendTableStatusType</c> class instance.
    /// </returns>
    public MCRRoyaltyVendTableStatusType status()
    {
        return MCRRoyaltyVendTableStatusType::newBuffer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>MCRRoyaltyVendTableStatusType</c> class instance based on the rebate type.
    /// </summary>
    /// <returns>
    /// The <c>MCRRoyaltyVendTableStatusType</c> class instance.
    /// </returns>
    public MCRRoyaltyVendTableStatusType type()
    {
        return MCRRoyaltyVendTableStatusType::newBuffer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays <c>MCRRoyaltyUnitType</c> from the <c>MCRRoyaltyContract</c> table.
    /// </summary>
    /// <returns>
    /// The unit type from <c>MCRRoyaltyTable</c>.
    /// </returns>
    public display MCRRoyaltyUnitType unitType()
    {
        return this.mcrRoyaltyContract().UnitType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>MCRRoyaltyVendTable</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name to Validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            ret = this.status().validateFieldValue(_fieldName);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfRoyaltyClaimsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a royalty claim record exists based on the passed in parameters.
    /// </summary>
    /// <param name="_mcrRoyaltyTableRefRecId">
    /// The record ID of the royalty agreement line record for which to search for royalty claims.
    /// </param>
    /// <param name="_custInvoiceTransRefRecId">
    /// The record ID of the customer invoice record for which to search for royalty claims.
    /// </param>
    /// <returns>
    /// true if a royalty claim record exists based on the passed in parameters; otherwise, false.
    /// </returns>
    public static boolean checkIfRoyaltyClaimsExist(RecId     _mcrRoyaltyTableRefRecId,
                                                    RecId     _custInvoiceTransRefRecId)
    {
        MCRRoyaltyVendTable mcrRoyaltyVendTable;

        if (_mcrRoyaltyTableRefRecId && _custInvoiceTransRefRecId)
        {
            return (select firstonly RecId from mcrRoyaltyVendTable
                        where mcrRoyaltyVendTable.CustInvoiceTransRefRecId
                                == _custInvoiceTransRefRecId
                            && mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId
                                == _mcrRoyaltyTableRefRecId).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cumulateRoyalties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cumulative royalty amount.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number for whom the cumulate royalty amount is calculating.
    /// </param>
    /// <param name="_startDate">
    /// The starting date of the period.
    /// </param>
    /// <param name="_endDate">
    /// The ending date of the period.
    /// </param>
    public static void cumulateRoyalties(
        VendAccount _vendAccount,
        date        _startDate,
        date        _endDate)
    {
        MCRRoyaltyVendTable     mcrRoyaltyVendTable;
        MCRRoyaltyVendTable     mcrRoyaltyVendTableCumulated;
        MCRRoyaltyVendTable     mcrRoyaltyVendTableSum;
        MCRRoyaltyVendTable     addedmcrRoyaltyVendTable;
        MCRRoyaltyTable         mcrRoyaltyTable;
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;
        MCRRoyaltyContract      mcrRoyaltyContract;
        real                    minValueQtyQuery;
        real                    minValueSumQtyQuery;
        real                    minValueSumAmountQuery;
        real                    expectedAmt;
        real                    actualAmt;
        real                    amountDiff;
        SalesLine               salesLine;
        UnitOfMeasureSymbol     salesUnit;
        MCRRoyaltyVendTable     previousmcrRoyaltyVendTable;
        date                    startOfCumulationPeriod;
        date                    endOfCumulationPeriod;

        while select mcrRoyaltyVendTable
            order by CustAccount, ItemId, mcrRoyaltyTableRefRecId, RoyaltyCalcDate
            where mcrRoyaltyVendTable.VendAccount           == _vendAccount
                && (mcrRoyaltyVendTable.RoyaltyStatus       == MCRRoyaltyVendTableStatus::ToCalculate
                    || mcrRoyaltyVendTable.RoyaltyStatus    == MCRRoyaltyVendTableStatus::Calculated)
                && (!_startDate
                    || mcrRoyaltyVendTable.RoyaltyCalcDate  >= _startDate)
                && (!_endDate
                    || mcrRoyaltyVendTable.RoyaltyCalcDate  <= _endDate)
            outer join salesLine
                where salesLine.RecId                       == mcrRoyaltyVendTable.SalesLineRefRecId
        {
            startOfCumulationPeriod = mcrRoyaltyVendTable.startOfCumulationPeriod();

            if (previousmcrRoyaltyVendTable.RecId
                && previousmcrRoyaltyVendTable.mcrRoyaltyTableRefRecId      == mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId
                && previousmcrRoyaltyVendTable.ItemId                       == mcrRoyaltyVendTable.ItemId
                && previousmcrRoyaltyVendTable.VendAccount                  == mcrRoyaltyVendTable.VendAccount
                && previousmcrRoyaltyVendTable.startOfCumulationPeriod()    == startOfCumulationPeriod)
            {
                continue;
            }

            mcrRoyaltyContract      = mcrRoyaltyVendTable.mcrRoyaltyContract();
            endOfCumulationPeriod   = mcrRoyaltyVendTable.endOfCumulationPeriod();

            previousmcrRoyaltyVendTable.data(mcrRoyaltyVendTable);

            salesUnit = mcrRoyaltyContract.UnitType  == MCRRoyaltyUnitType::InventoryUnit
                                                            ? salesLine.SalesUnit
                                                            : salesLine.pdsCWUnitId();

            mcrRoyaltyTable         = mcrRoyaltyVendTable.mcrRoyaltyTable();

            mcrRoyaltyVendTableSum  = mcrRoyaltyVendTable.royaltyTableSum();

            if (mcrRoyaltyContract.UnitType == MCRRoyaltyUnitType::CWUnit)
            {
                minValueSumQtyQuery = mcrRoyaltyVendTableSum.cwSalesInvoicedQty;
            }
            else
            {
                minValueSumQtyQuery = mcrRoyaltyVendTableSum.SalesInvoicedQty;
            }

            minValueSumAmountQuery = mcrRoyaltyVendTableSum.SalesAmount;

            // Use MCRRoyaltyTablePricing::selectMCRRoyaltyTablePricing to verify we have the proper royalty value based on the individual claim where status = tocalculate.
            // If one of the sum values is not zero or the status is already calculated, logic drops down to the else and re-evaluates the royalty value based on a sum of multiple lines.
            if (minValueSumQtyQuery         == 0
                && minValueSumAmountQuery   == 0
                && mcrRoyaltyVendTable.RoyaltyStatus    == MCRRoyaltyVendTableStatus::ToCalculate)
            {
                if (mcrRoyaltyContract.UnitType == MCRRoyaltyUnitType::CWUnit)
                {
                    minValueQtyQuery = abs(mcrRoyaltyVendTable.cwSalesInvoicedQty);
                }
                else
                {
                    minValueQtyQuery = abs(mcrRoyaltyVendTable.SalesInvoicedQty);
                }

                mcrRoyaltyTablePricing = MCRRoyaltyTablePricing::selectMCRRoyaltyTablePricing(
                                            mcrRoyaltyTable,
                                            mcrRoyaltyVendTable.custInvoiceTrans(),
                                            minValueQtyQuery,
                                            salesUnit,
                                            mcrRoyaltyVendTable.CurrencyCode,
                                            abs(mcrRoyaltyVendTable.SalesAmount));
            }
            // The claim was originally created based on one individual salesline. We know have a sum of multiple lines to consider. Check to find if we have passed a
            // threshold for a new royalty level based on the sum of multiple claims (salesLines). We do that with MCRRoyaltyTablePricing::selectMCRRoyaltyTablePricing
            else
            {
                mcrRoyaltyTablePricing = MCRRoyaltyTablePricing::selectMCRRoyaltyTablePricing(
                                            mcrRoyaltyTable,
                                            mcrRoyaltyVendTable.custInvoiceTrans(),
                                            minValueSumQtyQuery,
                                            salesUnit,
                                            mcrRoyaltyVendTable.CurrencyCode,
                                            minValueSumAmountQuery);

                // Check whether we have passed the largest line break threshold
                // and therefore the total rebate amount for this agreement should equal the maximum
                if (!mcrRoyaltyTablePricing.RecId)
                {
                    mcrRoyaltyTablePricing = MCRRoyaltyTablePricing::findPricingFromInventDimIdMax(
                                        mcrRoyaltyTable,
                                        salesLine.ItemId,
                                        salesLine.InventDimId,
                                        minValueSumQtyQuery,
                                        salesUnit,
                                        mcrRoyaltyVendTable.CurrencyCode,
                                        minValueSumAmountQuery);
                    if (mcrRoyaltyTablePricing)
                    {
                        if (mcrRoyaltyContract.RoyaltyLineBreakType == MCRRoyaltyLineBreakType::Amount)
                        {
                            if (minValueSumAmountQuery  < 0)
                            {
                                minValueSumAmountQuery  = -mcrRoyaltyTablePricing.ToValue;
                            }
                            else
                            {
                                minValueSumAmountQuery  = mcrRoyaltyTablePricing.ToValue;
                            }
                        }
                        else
                        {
                            if (minValueSumQtyQuery     < 0)
                            {
                                minValueSumQtyQuery     = -mcrRoyaltyTablePricing.ToValue;
                            }
                            else
                            {
                                minValueSumQtyQuery     = mcrRoyaltyTablePricing.ToValue;
                            }
                        }
                    }
                }
            }

            if (!mcrRoyaltyTablePricing.RecId
                &&  !minValueSumAmountQuery
                &&  !minValueSumQtyQuery)
            {
                previousmcrRoyaltyVendTable = null;
                continue;
            }

            while select forupdate mcrRoyaltyVendTableCumulated
                where mcrRoyaltyVendTableCumulated.VendAccount              == mcrRoyaltyVendTable.VendAccount
                    && mcrRoyaltyVendTableCumulated.ItemId                  == mcrRoyaltyVendTable.ItemId
                    && mcrRoyaltyVendTableCumulated.mcrRoyaltyTableRefRecId == mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId
                    && (mcrRoyaltyVendTableCumulated.RoyaltyStatus          == MCRRoyaltyVendTableStatus::ToCalculate
                        || mcrRoyaltyVendTableCumulated.RoyaltyStatus       == MCRRoyaltyVendTableStatus::Calculated)
                    && mcrRoyaltyVendTableCumulated.RoyaltyCalcDate         >= startOfCumulationPeriod
                    && mcrRoyaltyVendTableCumulated.RoyaltyCalcDate         <= endOfCumulationPeriod
            {
                mcrRoyaltyVendTableCumulated.status().runCumulated();
            }

            switch (mcrRoyaltyTable.RoyaltyAmtType)
            {
                case MCRRoyaltyAmtType::AmountPerUnit :
                    expectedAmt = minValueSumQtyQuery   * mcrRoyaltyTablePricing.RoyaltyValue;
                    break;
                case MCRRoyaltyAmtType::FixedAmount :
                    if (mcrRoyaltyContract.RoyaltyLineBreakType         == MCRRoyaltyLineBreakType::Amount)
                    {
                        if (minValueSumAmountQuery      < 0)
                        {
                            expectedAmt = -mcrRoyaltyTablePricing.RoyaltyValue;
                        }
                        else if (minValueSumAmountQuery  > 0)
                        {
                            expectedAmt = mcrRoyaltyTablePricing.RoyaltyValue;
                        }
                    }
                    else if (mcrRoyaltyContract.RoyaltyLineBreakType    == MCRRoyaltyLineBreakType::Quantity)
                    {
                        if (minValueSumQtyQuery         < 0)
                        {
                            expectedAmt = -mcrRoyaltyTablePricing.RoyaltyValue;
                        }
                        else if (minValueSumQtyQuery     > 0)
                        {
                            expectedAmt = mcrRoyaltyTablePricing.RoyaltyValue;
                        }
                    }
                    break;
                case MCRRoyaltyAmtType::Percentage :
                    expectedAmt     = minValueSumAmountQuery * mcrRoyaltyTablePricing.RoyaltyValue / 100;
                    break;
            }

            actualAmt = mcrRoyaltyVendTable.mcrRoyaltyVendTableCorrectedAmount()
                        + mcrRoyaltyVendTable.royaltyTableProcessedAmount();

            expectedAmt = CurrencyExchange::roundWithRuleType(expectedAmt,
                                                                    mcrRoyaltyVendTable.CurrencyCode,
                                                                    CurrencyRoundingRuleType::Price);

            actualAmt = CurrencyExchange::roundWithRuleType(actualAmt,
                                                                  mcrRoyaltyVendTable.CurrencyCode,
                                                                  CurrencyRoundingRuleType::Price);

            amountDiff = expectedAmt - actualAmt;

            if (expectedAmt != actualAmt)
            {
                ttsbegin;
                addedmcrRoyaltyVendTable.clear();
                addedmcrRoyaltyVendTable.RoyaltyCode                = mcrRoyaltyVendTable.RoyaltyCode;
                addedmcrRoyaltyVendTable.RoyaltyClaimId             = mcrRoyaltyVendTable.initRoyaltyClaimId();
                addedmcrRoyaltyVendTable.CustAccount                = mcrRoyaltyVendTable.CustAccount;
                addedmcrRoyaltyVendTable.VendAccount                = mcrRoyaltyVendTable.VendAccount;
                addedmcrRoyaltyVendTable.ItemId                     = mcrRoyaltyVendTable.ItemId;
                addedmcrRoyaltyVendTable.mcrRoyaltyTableRefRecId    = mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId;
                addedmcrRoyaltyVendTable.LedgerDimension            = mcrRoyaltyVendTable.LedgerDimension;
                addedmcrRoyaltyVendTable.OffsetLedgerDimension      = mcrRoyaltyVendTable.OffsetLedgerDimension;
                addedmcrRoyaltyVendTable.CurrencyCode               = mcrRoyaltyVendTable.CurrencyCode;
                addedmcrRoyaltyVendTable.StartingRoyaltyAmt         = amountDiff;
                addedmcrRoyaltyVendTable.CorrectedRoyaltyAmt        = amountDiff;
                addedmcrRoyaltyVendTable.RoyaltyBalance             = amountDiff;
                addedmcrRoyaltyVendTable.RoyaltyStatus              = MCRRoyaltyVendTableStatus::Calculated;
                addedmcrRoyaltyVendTable.RoyaltyAmtType             = MCRRoyaltyAmtType::FixedAmount;
                addedmcrRoyaltyVendTable.RoyaltyCalcDate            = endOfCumulationPeriod;
                addedmcrRoyaltyVendTable.doInsert();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if a <c>MCRRoyaltyVendTable</c> exists based on passed parameters
    /// </summary>
    /// <param name="_mcrRoyaltyTableRecId">
    /// A <c>MCRRoyaltyTable</c> record Id.
    /// </param>
    /// <param name="_custInvoiceTransRefRecId">
    /// A <c>CustInvoiceTrans</c> record Id.
    /// </param>
    /// <returns>
    /// true if a royalty table record exists; otherwise, false.
    /// </returns>
    public static boolean existReferenceId(
        RecId   _mcrRoyaltyTableRecId,
        RecId   _custInvoiceTransRefRecId)
    {
        if (_mcrRoyaltyTableRecId && _custInvoiceTransRefRecId)
        {
            return (select firstonly mcrRoyaltyVendTable
                        where mcrRoyaltyVendTable.CustInvoiceTransRefRecId == _custInvoiceTransRefRecId
                            && mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId == _mcrRoyaltyTableRecId).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRoyaltyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a royalty table record exists with the passed in <c>MCRRoyaltyCode</c>.
    /// </summary>
    /// <param name="_royaltyCode">
    /// The <c>MCRRoyaltyCode</c> value for which to search the royalty table record.
    /// </param>
    /// <returns>
    /// true if a royalty table record exists with the passed in <c>MCRRoyaltyCode</c>; otherwise, false.
    /// </returns>
    public static boolean existRoyaltyCode(MCRRoyaltyCode  _royaltyCode)
    {
        if (_royaltyCode)
        {
            return (select firstonly mcrRoyaltyVendTable
                        where mcrRoyaltyVendTable.RoyaltyCode == _royaltyCode).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a royalty record based on the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value for which to search the royalty table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not.
    /// </param>
    /// <returns>
    /// The royalty record that was found based on the passed in parameters.
    /// </returns>
    public static MCRRoyaltyVendTable findByRecId(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        MCRRoyaltyVendTable mcrRoyaltyVendTable;

        if (_recId)
        {
            mcrRoyaltyVendTable.selectForUpdate(_forUpdate);
            select firstonly mcrRoyaltyVendTable
                where mcrRoyaltyVendTable.RecId == _recId;
        }

        return mcrRoyaltyVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRoyalties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the royalty processing.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The customer account number and customer royalty program Id should not be empty.
    /// </exception>
    public static void processRoyalties(VendAccount _vendAccount)
    {
        MCRRoyaltyVendTable mcrRoyaltyVendTable;

        if (_vendAccount)
        {
            while select mcrRoyaltyVendTable
                where mcrRoyaltyVendTable.VendAccount       == _vendAccount
                    && mcrRoyaltyVendTable.RoyaltyStatus    == MCRRoyaltyVendTableStatus::Calculated
            {
                mcrRoyaltyVendTable.status().runProcessed();
            }
        }
        else
        {
            throw error("@PDS1513");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRoyaltyPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the royalty payment processing.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The customer account number and customer royalty program Id should not be empty.
    /// </exception>
    public static void processRoyaltyPayments(VendAccount  _vendAccount)
    {
        if (_vendAccount)
        {
            VendParameters vendParameters = VendParameters::find();
            MCRRoyaltyVendTablePaymentPost mcrRoyaltyVendTablePaymentPost = new MCRRoyaltyVendTablePaymentPost();
            
            ttsbegin;

            MCRRoyaltyInstrumentationLogger instrumentationLogger = MCRRoyaltyInstrumentationLogger::createLogger(tableStr(MCRRoyaltyVendTable));
            using (var activityContext = instrumentationLogger.royaltyClaimActivities().runProcess(_vendAccount, vendParameters.MCRRoyaltyManualJourPost))
            {
                int royaltyClaimCount;
                
                MCRRoyaltyVendTable mcrRoyaltyVendTable;
                while select mcrRoyaltyVendTable
                    where mcrRoyaltyVendTable.VendAccount       == _vendAccount
                        && mcrRoyaltyVendTable.RoyaltyStatus    == MCRRoyaltyVendTableStatus::Approved
                {
                    mcrRoyaltyVendTablePaymentPost.main(mcrRoyaltyVendTable);
                    royaltyClaimCount++;
                }

                instrumentationLogger.royaltyClaimActivities().processedRoyaltyClaimsCount(activityContext, royaltyClaimCount);
            }

            boolean isManualPostingFlightEnabled = MCRRoyaltyVendParametersManualPostingFlight::instance().isEnabled();

            if (mcrRoyaltyVendTablePaymentPost.parmInvoiceId() 
                && (!isManualPostingFlightEnabled  || (isManualPostingFlightEnabled && !vendParameters.MCRRoyaltyManualJourPost)))
            {
                mcrRoyaltyVendTablePaymentPost.postVendorInvoice();
            }
                
            ttscommit;
        }
        else
        {
            throw error("@PDS1513");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purgeRoyalties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all royalties with a status of 'Processed'.
    /// </summary>
    /// <param name="_upToDate">
    /// The date up to which the royalties are deleted.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The end date should not be empty.
    /// </exception>
    public static void purgeRoyalties(date _upToDate)
    {
        #OCCRetryCount

        if (_upToDate)
        {
            try
            {
                MCRRoyaltyVendTable mcrRoyaltyVendTable;

                while select optimisticlock mcrRoyaltyVendTable
                    where mcrRoyaltyVendTable.ProcessDate           <= _upToDate
                        && (mcrRoyaltyVendTable.RoyaltyStatus       == MCRRoyaltyVendTableStatus::Processed
                        || mcrRoyaltyVendTable.RoyaltyStatus        == MCRRoyaltyVendTableStatus::Approved)
                {
                    ttsbegin;

                    mcrRoyaltyVendTable.delete();

                    ttscommit;
                }
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }


            info("@MCR4410024");
        }
        else
        {
            throw error("@MCR4410025");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRRoyalty</ConfigurationKey>
	<DeveloperDocumentation>@MCR33559</DeveloperDocumentation>
	<FormRef>MCRRoyaltyVendTableEdit</FormRef>
	<Label>@MCR33559</Label>
	<SingularLabel>@MCR33559</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>RoyaltyCode</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RoyaltyCodeIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RoyaltyCodeIdx</PrimaryIndex>
	<ReplacementKey>RoyaltyCodeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyClaimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Accounts</Name>
			<Label>@MCR4410335</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectedRoyaltyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceJourRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custInvoiceTransRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CWSalesInvoicedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRoyaltyGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRRoyaltyTableRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAdjustmentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAgreementLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAmtType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCalcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyClaimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyJournalRefNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyMinAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyMinQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyPayTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoicedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesNetExtendedPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTableRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingRoyaltyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRoyaltyGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustTable</Name>
			<Label>@SYS11307</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRoyaltyGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAdjustmentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventTable</Name>
			<Label>@SYS15649</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRoyaltyGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRoyaltyGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRoyaltyGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingRoyaltyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedRoyaltyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyJournalRefNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Royalty</Name>
			<Label>@MCR33559</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAmtType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyClaimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingRoyaltyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedRoyaltyAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTable</Name>
			<Label>@PRO1394</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoyaltyCalcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesNetExtendedPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesInvoicedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CWSalesInvoicedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendTable</Name>
			<Label>@SYS14048</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoyaltyPayTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Obsolete</Name>
			<Label>@SYS340572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkForCredit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CorrectedRoyaltyAmt</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRCorrectedRoyaltyAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceJourRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCustInvoiceJourRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>custInvoiceTransRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCustInvoiceTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRef</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PdsCustomerRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CWSalesInvoicedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRoyaltyGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRItemRoyaltyGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@MCR4410016</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarkForCredit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS12714</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCRRoyaltyTableRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsRebateAgreementRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyOffsetDimensionDefaultAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProcessDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsProcessDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RoyaltyAdjustmentDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateAdjustmentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RoyaltyAgreementLineRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsRebateAgreementRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoyaltyAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateAmt</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoyaltyAmtType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRRoyaltyAmtType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoyaltyBalance</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyBalance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RoyaltyCalcDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateCalcDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoyaltyClaimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoyaltyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRoyaltyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoyaltyJournalRefNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsJournalRefNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoyaltyMinAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateMinAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RoyaltyMinQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateMinQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoyaltyPayTo</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoyaltyStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRRoyaltyVendTableStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoyaltyValue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateValue</ExtendedDataType>
			<CurrencyCode>CurrencyCodeField</CurrencyCode>
			<CurrencyCodeField>CurrencyCode</CurrencyCodeField>
			<CurrencyCodeTable>Currency</CurrencyCodeTable>
			<CurrencyDate>CurrencyDateField</CurrencyDate>
			<CurrencyDateField>SalesInvoiceDate</CurrencyDateField>
			<CurrencyDateTable>PdsRebateTable</CurrencyDateTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesAmount</ExtendedDataType>
			<CurrencyDate>CurrencyDateField</CurrencyDate>
			<CurrencyDateField>RebateCalcDate</CurrencyDateField>
			<CurrencyDateTable>PdsRebateTable</CurrencyDateTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SalesInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesInvoicedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesInvoicedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesLineRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsSalesLineRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesNetExtendedPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsSalesNetExtdPrice</ExtendedDataType>
			<CurrencyDate>CurrencyDateField</CurrencyDate>
			<CurrencyDateField>RebateCalcDate</CurrencyDateField>
			<CurrencyDateTable>PdsRebateTable</CurrencyDateTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPriceUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTableRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsSalesTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StartingRoyaltyAmt</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRStartingRoyaltyAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendRoyaltyGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateGroupId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RoyaltyCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RoyaltyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RoyaltyClaimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RoyaltyTableRefRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MCRRoyaltyTableRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesInvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProcessDateStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcessDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RoyaltyStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceJourRefRecId</Name>
					<SourceEDT>CustInvoiceJourRefRecId</SourceEDT>
					<Field>CustInvoiceJourRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJourInvoiceId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJourInvoiceId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesInvoiceId</Name>
					<SourceEDT>SalesInvoiceId</SourceEDT>
					<Field>SalesInvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJourRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJourRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceJourRefRecId</Name>
					<SourceEDT>CustInvoiceJourRefRecId</SourceEDT>
					<Field>CustInvoiceJourRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>custInvoiceTransRefRecId</Name>
					<SourceEDT>CustInvoiceTransRefRecId</SourceEDT>
					<Field>custInvoiceTransRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombinationDefault</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_RebateInstanceDefault</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRRoyaltyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRRoyaltyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRRoyaltyTableRefRecId</Name>
					<SourceEDT>RecId</SourceEDT>
					<Field>MCRRoyaltyTableRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRRoyaltyTablePricing</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRRoyaltyTablePricing</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RoyaltyAgreementLineRefRecId</Name>
					<Field>RoyaltyAgreementLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombinationOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_RebateInstanceOffset</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsAgreementRefRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsRebateAgreement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RoyaltyAgreementLineRefRecId</Name>
					<SourceEDT>PdsRebateAgreementRefRecId</SourceEDT>
					<Field>RoyaltyAgreementLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsRebateTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>PdsRebateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RoyaltyCode</Name>
					<SourceEDT>PdsRebateId</SourceEDT>
					<Field>RoyaltyCode</Field>
					<RelatedField>PdsRebateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RoyaltyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRRoyaltyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RoyaltyCode</Name>
					<SourceEDT>MCRRoyaltyCode</SourceEDT>
					<Field>RoyaltyCode</Field>
					<RelatedField>RoyaltyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLineRef</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesLineRefRecId</Name>
					<SourceEDT>SalesLineRefRecId</SourceEDT>
					<Field>SalesLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTableRefRecId</Name>
					<SourceEDT>SalesTableRefRecId</SourceEDT>
					<Field>SalesTableRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Vendtable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PayTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RoyaltyPayTo</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>RoyaltyPayTo</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>