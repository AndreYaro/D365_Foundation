<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBrokerAccrual</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRBrokerAccrual extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDfltAmtToApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default amount that we will approve, which is the un-approved amount
    /// times the settled percent (which has the sum of related deductions subtracted
    /// from it).
    /// </summary>
    /// <returns>
    /// The default amount.
    /// </returns>
    public AmountMST calcDfltAmtToApprove()
    {
        AmountMST retAmt = 0;

        if (this.Status != MCROpenClosed::Closed)
        {
            retAmt = abs(this.QualifiedAmt) - abs(this.ApprovedAmt);

            // If not over approved or not completely approved
            if (retAmt > 0)
            {
                retAmt = retAmt * sign(this.QualifiedAmt);
            }
            else
            {
                retAmt = 0;
            }
        }

        return retAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDeductedAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the deducted amount of the broker accrual.
    /// </summary>
    /// <returns>
    /// The deducted amount.
    /// </returns>
    public display AmountMST displayDeductedAmt()
    {
        CustSettlement      custSettlement;
        LedgerJournalTrans  ledgerJournalTrans;
        TAMDeduction        tamDeduction;

        select sum (SettleAmountMST) from custSettlement
            where custSettlement.OffsetRecid == this.CustTransRecId
            join CustTransId,RecId from ledgerJournalTrans
                where ledgerJournalTrans.CustTransId == custSettlement.TransRecId
            join LedgerJournalTransRecId from tamDeduction
                where tamDeduction.LedgerJournalTransRecId == ledgerJournalTrans.RecId;

        return abs(custSettlement.SettleAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDeductions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Warns if there are deductions.
    /// </summary>
    /// <returns>
    /// The warning icon from the <c>resAppl</c> macro.
    /// </returns>
    public display MCRImage displayDeductions()
    {
        #resAppl

        if (this.hasDeduction_BySalesID(this.SalesId))
        {
            return #ImageWarning;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the difference between the qualified and approved amount.
    /// </summary>
    /// <returns>
    /// The difference between amounts.
    /// </returns>
    public display AmountCur displayDifference()
    {
        return this.QualifiedAmt - this.ApprovedAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDifference_BySalesID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the amount that was denied the broker for all accruals with the
    /// current record's sales ID.
    /// </summary>
    /// <returns>
    /// The denied amount.
    /// </returns>
    /// <remarks>
    /// Note that if the <c>AmountMST</c> is 0, then 0 is returned.
    /// </remarks>
    public display AmountCur displayDifference_BySalesID()
    {
        AmountMST           difference;
        MCRBrokerAccrual    mcrBrokerAccrual;

        select sum(QualifiedAmt), sum(ApprovedAmt) from mcrBrokerAccrual
            where mcrBrokerAccrual.SalesId == this.SalesId;

        difference = mcrBrokerAccrual.QualifiedAmt - mcrBrokerAccrual.ApprovedAmt;

        return difference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySettledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the settled amount of this customer transaction.
    /// </summary>
    /// <returns>
    /// The settled amount.
    /// </returns>
    public display AmountCur displaySettledAmount()
    {
        return CustTrans::find(this.CustTransRecId).SettleAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySettledPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the settled percent of this customer transaction.
    /// </summary>
    /// <returns>
    /// The settled percent.
    /// </returns>
    /// <remarks>
    /// Note that if the <c>AmountMST</c> is 0, then 0 is returned.
    /// </remarks>
    public display AmountCur displaySettledPercent()
    {
        CustTrans custTrans;
        AmountCur retAmt;

        custTrans = CustTrans::find(this.CustTransRecId);

        if (custTrans.AmountMST != 0)
        {
            retAmt = ((custTrans.SettleAmountMST) / custTrans.AmountMST) * 100;
        }

        return retAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is a deduction related to the broker accrual.
    /// </summary>
    /// <returns>
    /// true if there is a deduction; otherwise, false.
    /// </returns>
    public boolean hasDeduction()
    {
        boolean ret = false;

        if (this.displayDeductedAmt())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDeduction_BySalesID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any broker accruals related to the sales order with a sales
    /// ID equal to <paramref name="_salesID"/> have a deduction.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID to use to find related broker accruals.
    /// </param>
    /// <returns>
    /// true if deductions exist; otherwise, false.
    /// </returns>
    private AmountMST hasDeduction_BySalesID(SalesId _salesId)
    {
        MCRBrokerAccrual    mcrBrokerAccrual;
        boolean             hasDeduction = false;
        CustSettlement      custSettlement;
        LedgerJournalTrans  ledgerJournalTrans;
        TAMDeduction        tamDeduction;

        while select RecId from mcrBrokerAccrual
            where mcrBrokerAccrual.SalesId == _salesId
            join sum (SettleAmountMST) from custSettlement
                where custSettlement.OffsetRecid == mcrBrokerAccrual.CustTransRecId
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.CustTransId == custSettlement.TransRecId
            join RecId from tamDeduction
                where tamDeduction.LedgerJournalTransRecId == ledgerJournalTrans.RecId
        {
            if (abs(custSettlement.SettleAmountMST))
            {
                hasDeduction = true;
                break;
            }
        }

        return hasDeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be deleted
    /// from the database.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    /// <remarks>
    /// Accrual records cannot be deleted once created.
    /// </remarks>
    public boolean validateDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAccrualFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates broker accruals given a customer invoice journal.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The customer invoice journal used to create or update the broker accruals.
    /// </param>
    public static void createAccrualFromInvoice(CustInvoiceJour _custInvoiceJour)
    {
        CustInvoiceTrans        custInvoiceTrans;
        SalesLine               salesLine;
        MarkupTrans             markupTrans;
        MarkupTable             markupTable;
        MCRBrokerAccrual        mcrBrokerAccrual;
        CurrencyCode            companyCurrency;
        CustTrans               custTrans;
        MCRBrokerCommission     mcrBrokerCommission;

        AmountCur               accruedAmt;

        if (isConfigurationkeyEnabled(configurationKeyNum(TradeBroker)))
        {
            companyCurrency = CompanyInfoHelper::standardCurrency();

            // Customer transactions are at the invoice level.
            custTrans = CustTrans::findFromInvoice(_custInvoiceJour.InvoiceId, _custInvoiceJour.InvoiceAccount);

            // Only create accrual if a customer posting was found for this invoice.
            if (custTrans)
            {
                ttsbegin;

                while select InvoiceId, InventTransId, TableId, RecId, SalesId, DefaultDimension, Qty from custInvoiceTrans
                    where custInvoiceTrans.InvoiceId == _custInvoiceJour.InvoiceId
                    join InventTransId, LedgerDimension from salesLine
                        where salesLine.InventTransId == custInvoiceTrans.InventTransId
                    join TransTableId, TransRecId, MarkupCode, CalculatedAmount, CurrencyCode, Value from markupTrans
                        where markupTrans.TransTableId == custInvoiceTrans.TableId
                            && markupTrans.TransRecId  == custInvoiceTrans.RecId
                    join MarkupCode, CustomerLedgerDimension, VendorLedgerDimension from markupTable
                        where markupTable.MarkupCode  == markupTrans.MarkupCode
                            && markupTable.ModuleType == MarkupModuleType::Cust
                    join BrokerID, ContractID from mcrBrokerCommission
                        where mcrBrokerCommission.MarkupTransRecID == markupTrans.OrigRecId
                            && mcrBrokerCommission.SalesLineRecID  == salesLine.RecId
                {
                    mcrBrokerAccrual = mcrBrokerAccrual::find(
                        custInvoiceTrans.InvoiceId,
                        custInvoiceTrans.SalesId,
                        mcrBrokerCommission.BrokerID,
                        markupTable.MarkupCode,
                        custInvoiceTrans.DefaultDimension,
                        true,
                        mcrBrokerCommission.ContractID);

                    // When invoiced value for ledger to ledger misc charges are
                    // negative or markupTrans.Value is negative (which means that Broker charges value is negative).  
                    // Accrued amount for returns needs to always be negative
                    // while it needs to always be positive otherwise.
                    if (custInvoiceTrans.Qty < 0 || markupTrans.Value < 0)
                    {
                        accruedAmt = -abs(markupTrans.CalculatedAmount);
                    }
                    else
                    {
                        accruedAmt =  abs(markupTrans.CalculatedAmount);
                    }

                    if (mcrBrokerAccrual)
                    {
                        mcrBrokerAccrual.QualifiedAmt += CurrencyExchangeHelper::curAmount2CurAmount(accruedAmt, markupTrans.CurrencyCode, companyCurrency);

                        if (mcrBrokerAccrual.validateWrite())
                        {
                            mcrBrokerAccrual.update();
                        }
                        else
                        {
                            throw error("@MCR10794");
                        }
                    }
                    else
                    {
                        // Initialize from the customer invoice line.
                        mcrBrokerAccrual.InvoiceId        = custInvoiceTrans.InvoiceId;
                        mcrBrokerAccrual.DefaultDimension = custInvoiceTrans.DefaultDimension;
                        mcrBrokerAccrual.AccrualDefaultDimension = mcrBrokerAccrual.DefaultDimension;
                        mcrBrokerAccrual.SalesId          = custInvoiceTrans.SalesId;

                        // Initialize fromthe broker commission.
                        mcrBrokerAccrual.BrokerID         = mcrBrokerCommission.BrokerID;
                        mcrBrokerAccrual.BrokerContractID = mcrBrokerCommission.ContractID;

                        // Initialize from the charge transaction.
                        mcrBrokerAccrual.QualifiedAmt = CurrencyExchangeHelper::curAmount2CurAmount(accruedAmt, markupTrans.CurrencyCode, companyCurrency);

                        // Initialize from the customer transaction.
                        mcrBrokerAccrual.InvoiceAmt     = custTrans.AmountMST;
                        mcrBrokerAccrual.CustTransRecId = custTrans.RecId;
                        mcrBrokerAccrual.CustAccount    = custTrans.AccountNum;

                        // Initialize from the charge code.
                        mcrBrokerAccrual.MCDebitLedgerDimension  = markupTable.CustomerLedgerDimension;
                        mcrBrokerAccrual.MCCreditLedgerDimension = markupTable.VendorLedgerDimension;
                        mcrBrokerAccrual.MiscChargeCode          = markupTable.MarkupCode;

                        if (mcrBrokerAccrual.validateWrite())
                        {
                            mcrBrokerAccrual.insert();
                        }
                        else
                        {
                            throw error("@MCR10794");
                        }
                    }
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRBrokerAccrual</c> table.
    /// </summary>
    /// <param name="_invoiceId">
    /// The invoice ID of the <c>MCRBrokerAccrual</c> table record to find.
    /// </param>
    /// <param name="_salesId">
    /// The sales ID of the <c>MCRBrokerAccrual</c> table record to find.
    /// </param>
    /// <param name="_mcrBrokerVendAccount">
    /// The broker vendor account of the <c>MCRBrokerAccrual</c> table record to find.
    /// </param>
    /// <param name="_markupCode">
    /// The chage code of the <c>MCRBrokerAccrual</c> table record to find.
    /// </param>
    /// <param name="_dimensionDefault">
    /// The dimension of the <c>MCRBrokerAccrual</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_mcrBrokerContractID">
    /// A <c>MCRBrokerContractID</c>The BrokerContractID of the <c>MCRBrokerAccrual</c> table record to find; optional.
    /// </param>
    /// <returns>
    /// A record in <c>MCRBrokerAccrual</c>; otherwise, an empty record.
    /// </returns>
    public static MCRBrokerAccrual find(
        InvoiceId               _invoiceId,
        SalesId                 _salesId,
        MCRBrokerVendAccount    _mcrBrokerVendAccount,
        MarkupCode              _markupCode,
        DimensionDefault        _dimensionDefault,
        boolean                 _forUpdate = false,
        MCRBrokerContractID     _mcrBrokerContractID = '')
    {
        MCRBrokerAccrual mcrBrokerAccrual;

        if (_invoiceId
            && _salesId
            && _mcrBrokerVendAccount)
        {
            mcrBrokerAccrual.selectForUpdate(_forUpdate);

            select firstonly mcrBrokerAccrual
                where mcrBrokerAccrual.SalesId              == _salesId
                    && mcrBrokerAccrual.InvoiceId           == _invoiceId
                    && mcrBrokerAccrual.BrokerID            == _mcrBrokerVendAccount
                    && mcrBrokerAccrual.MiscChargeCode      == _markupCode
                    && mcrBrokerAccrual.DefaultDimension    == _dimensionDefault
                    && (!_mcrBrokerContractID || mcrBrokerAccrual.BrokerContractID == _mcrBrokerContractID);
        }

        return mcrBrokerAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRBrokerAccrual</c> table by using the specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>MCRBrokerAccrual</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>MCRBrokerAccrual</c> table; otherwise, an empty record.
    /// </returns>
    public static MCRBrokerAccrual findByRecID(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        MCRBrokerAccrual mcrBrokerAccrual;

        if (_recId)
        {
            mcrBrokerAccrual.selectForUpdate(_forUpdate);

            select firstonly mcrBrokerAccrual
                where mcrBrokerAccrual.RecId == _recId;
        }

        return mcrBrokerAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSalesIDs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a lookup for broker accruals that displays a uniue list of sales ID's.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormStringControl</c> control that the lookup should attach to.
    /// </param>
    public static void lookupSalesIDs(FormStringControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup = SysTableLookup::newParameters(tableNum(MCRBrokerAccrual), _formControl);
        query          = new Query();

        sysTableLookup.addLookupfield(fieldNum(MCRBrokerAccrual, SalesId));

        queryBuildDataSource = query.addDataSource(tableNum(MCRBrokerAccrual));
        queryBuildDataSource.addGroupByField(fieldNum(MCRBrokerAccrual, SalesId));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBroker</ConfigurationKey>
	<DeveloperDocumentation>@MCR34388</DeveloperDocumentation>
	<Label>@MCR34388</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>InvoiceId</TitleField1>
	<TitleField2>BrokerID</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerContractID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualifiedAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovedAmt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerContractID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualifiedAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovedAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MiscChargeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCDebitLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCCreditLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualDefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Display_Settled</Name>
			<Label>@SYS79585</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displaySettledAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displaySettledPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccrualDefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ApprovedAmt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS10158</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BrokerContractID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRBrokerContractID</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BrokerID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRBrokerVendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustTransRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS9458</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCCreditLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@SYS3965</Label>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCDebitLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@SYS15996</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MiscChargeCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QualifiedAmt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS103073</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS80127</Label>
			<EnumType>MCROpenClosed</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesInvoiceBrokerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BrokerID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MiscChargeCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AcrrualDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccrualDefaultDimension</Name>
					<Field>AccrualDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BrokerAccrual</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>MCRBrokerAccrual</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MCRBrokerAccrual</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRBrokerAccrual</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BrokerContractTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRBrokerContractTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BrokerContractID</Name>
					<Field>BrokerContractID</Field>
					<RelatedField>ContractID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRBrokerAccrual</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransRecId</Name>
					<Field>CustTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRBrokerAccrual</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination_Cred</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MCCreditLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCDebitLedgerDimension</Name>
					<Field>MCDebitLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination_Deb</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MCDebitLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCCreditLedgerDimension</Name>
					<Field>MCCreditLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRBrokerAccrual</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCCreditLedgerDimension</Name>
					<Field>MCCreditLedgerDimension</Field>
					<RelatedField>VendorLedgerDimension</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCDebitLedgerDimension</Name>
					<Field>MCDebitLedgerDimension</Field>
					<RelatedField>CustomerLedgerDimension</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BrokerID</Name>
					<Field>BrokerID</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>