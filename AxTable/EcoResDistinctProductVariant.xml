<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResDistinctProductVariant</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResDistinctProductVariant extends EcoResDistinctProduct
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCompaniesWhereReleased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the set of all the companies where the current product is available.
    /// </summary>
    /// <returns>
    ///    The set of all the companies where the current product is available.
    /// </returns>
    public Set getCompaniesWhereReleased()
    {
        InventDimCombination    inventDimCombination;
        Set                     releasedCompaniesSet = new Set(Types::String);

        // build the set of all companies, where the product has been released
        while select crosscompany DataAreaId
            from  inventDimCombination
            where inventDimCombination.DistinctProductVariant == this.RecId
        {
            releasedCompaniesSet.add(xDataArea::findNonVirtualCompany(inventDimCombination.DataAreaId));
        }

        return releasedCompaniesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReleased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether a product variant has been released to a company.
    /// </summary>
    /// <returns>
    ///    true if a product variant has been released; otherwise, false.
    /// </returns>
    public boolean isReleased()
    {
        InventDimCombination inventDimCombination;

        select firstonly crosscompany RecId
            from inventDimCombination
            where inventDimCombination.DistinctProductVariant == this.RecId;

        return inventDimCombination.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalculatedRetailTotalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the total retail weight value of the current record.
    /// </summary>
    /// <param name="_retailWeightFactor">
    ///    A retail weight value that is used to update the total retail weight.
    /// </param>
    /// <returns>
    ///    The new total retail weight.
    /// </returns>
    public RetailWeight setCalculatedRetailTotalWeight(RetailWeight _retailWeightFactor)
    {
        this.RetaiTotalWeight = (this.RetaiTotalWeight ? this.RetaiTotalWeight : 1) * (_retailWeightFactor ? _retailWeightFactor : 1);
        return this.RetaiTotalWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.isReleased())
            {
                ret = checkFailed("@SYS191390");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResDistinctProductVariant</c> table.
    /// </summary>
    /// <param name="_distinctProductVariant">
    ///    The ID of the <c>EcoResDistinctProductVariant</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResDistinctProductVariant</c> table; otherwise, an empty record.
    /// </returns>
    static public EcoResDistinctProductVariant find(RefRecId _distinctProductVariant, boolean _forUpdate = false)
    {
        EcoResDistinctProductVariant ecoResDistinctProductVariant;

        if (_distinctProductVariant)
        {
            if (_forUpdate)
            {
                select firstonly forupdate ecoResDistinctProductVariant
                    where ecoResDistinctProductVariant.RecId == _distinctProductVariant;
            }
            else
            {
                ecoResDistinctProductVariant = EcoResProduct::find(_distinctProductVariant) as EcoResDistinctProductVariant; // Use this to benefit from caching of all product types
            }
        }
        return ecoResDistinctProductVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDescriptionBasedOnDimValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a product description based on dimension values.
    /// </summary>
    /// <param name="_distinctProductVariant">
    /// The product variant for which to update the description.
    /// </param>
    /// <param name="_languageId">
    /// A language ID.
    /// </param>
    /// <returns>
    /// A product name based on dimension values.
    /// </returns>
    static public EcoResProductName productDescriptionBasedOnDimValues(
        EcoResDistinctProductVariant _distinctProductVariant,
        LanguageId                   _languageId = SystemParameters::getSystemLanguageId())
    {
        return EcoResDistinctProductVariant::productNameBasedOnNomenclature(_distinctProductVariant, _languageId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameBasedOnNomenclature</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Builds a product name based on product master's nomenclature.
    /// </summary>
    /// <param name="_distinctProductVariant">
    ///   The product variant, the name of which is to be update.
    /// </param>
    /// <param name="_languageId">
    ///   A language ID.
    /// </param>
    /// <param name="_passProductMaster">
    ///   Boolean to pass or not product master into the product name builder.
    ///   If false, the product master's nomenclature is not taken under consideration
    ///   and the produced name is related simply to the product dimensions.
    /// </param>
    /// <returns>
    ///   A product name based on product master's nomenclature.
    /// </returns>
    [Hookable(false)]
    static public EcoResProductName productNameBasedOnNomenclature(
        EcoResDistinctProductVariant _distinctProductVariant,
        LanguageId                   _languageId = SystemParameters::getSystemLanguageId(),
        boolean                      _passProductMaster = true)
    {
        container                           productDimensions;
        EcoResProductNumber                 productNumber;
        EcoResProductMaster                 productMaster;
        EcoResProductNumberBuilderVariant   productNumberBuilderVariant;

        productMaster = EcoResProductMaster::find(_distinctProductVariant.ProductMaster);
        productNumber = productMaster.productNumber();

        if (productNumber)
        {
            productDimensions = EcoResProductVariantDimValue::getDimensionContainerByProductVariant(_distinctProductVariant.RecId);
            productNumberBuilderVariant = EcoResProductNumberBuilderVariant::newNameFromProductNumberAndDimensions(productNumber, _languageId, productDimensions);

            if (_passProductMaster)
            {
                productNumberBuilderVariant.parmProductMaster(productMaster);
            }

            return productNumberBuilderVariant.buildDisplayProductName();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVariantNames</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates variant names based on product master nomenclature in all available languages.
    /// </summary>
    /// <param name="_productVariantRecIdList">
    ///     A list of <c>EcoResDistinctProductVariant</c> record IDs for the variants which will be updated.
    /// </param>
    [Hookable(false)]
    static public void updateVariantNames(List _productVariantRecIdList)
    {
        if (!_productVariantRecIdList)
        {
            info("@SCM:NoProductVariantsSelected");
            return;
        }

        EcoResDistinctProductVariant ecoResDistinctProductVariant;
        ListEnumerator               enumeratorProductVariantRecIds = _productVariantRecIdList.getEnumerator();
        EcoResInstrumentationLogger  logger                         = EcoResInstrumentationLogger::createLogger(tableStr(EcoResDistinctProductVariant));

        using (var activityContext = logger.variants().allVariantsNamesGeneration())
        {
            while (enumeratorProductVariantRecIds.moveNext())
            {
                ecoResDistinctProductVariant = EcoResDistinctProductVariant::find(enumeratorProductVariantRecIds.current(), true);
                EcoResDistinctProductVariant::updateVariantNameInAllLanguages(ecoResDistinctProductVariant);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVariantNameInAllLanguages</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of the variant's names in all available languages. 
    ///     Method updateVariantNamesTranslationsBasedOnGivenRecords() has to be 
    ///     called afterwards, to actually update the names in the database.
    /// </summary>
    /// <param name="_distinctProductVariant">
    ///     The variant, the names of which will be updated.
    /// </param>
    [Hookable(false)]
    static public void updateVariantNameInAllLanguages(EcoResDistinctProductVariant _distinctProductVariant)
    {
        Set                         languageIds = EcoResProductMaster::getSetOfLanguageIds(_distinctProductVariant.ProductMaster);
        SetEnumerator               enumerator  = languageIds.getEnumerator();    
        EcoResInstrumentationLogger logger      = EcoResInstrumentationLogger::createLogger(tableStr(EcoResDistinctProductVariant));

        using (var activityContext = logger.variants().singleVariantNamesGeneration())
        {       
            ttsbegin;

            while (enumerator.movenext())
            {
                EcoResProductTranslation currentVariantTranslation = EcoResProductTranslation::findByProductLanguage(_distinctProductVariant.RecId, enumerator.current(), true);
                EcoResProductName        generatedProductName      = EcoResDistinctProductVariant::productNameBasedOnNomenclature(_distinctProductVariant, enumerator.current());

                // Update name only if the generated name is different than the current name
                if (strCmp(currentVariantTranslation.Name, generatedProductName))
                {
                    EcoResProductTranslation::createOrUpdateTranslation(
                        _distinctProductVariant.RecId,
                        generatedProductName,
                        currentVariantTranslation.Description,
                        enumerator.current());
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static public TxtNotExist txtNotExist()
    {
        return "@SYS133846";
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProductName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a name of the product.
    /// </summary>
    /// <returns>
    /// A name of the product, if defined; otherwise, the product number.
    /// </returns>
    public display EcoResProductName displayProductName()
    {
        return this.productName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailKitConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product variant is a product kit configuration.
    /// </summary>
    /// <returns>
    /// true if a product kit configuration; otherwise, false.
    /// </returns>
    boolean isRetailKitConfiguration()
    {
        if (this.isDistinctProductVariant())
        {
            return RetailKit::existByProductMaster(this.ProductMaster);
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS133902</DeveloperDocumentation>
	<FormRef>EcoResProductVariantsAction</FormRef>
	<Label>@SYS133901</Label>
	<ListPageRef>EcoResProductVariantsAction</ListPageRef>
	<TableGroup>Main</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResDistinctProduct</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResProductVariantDimensionValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductVariantDimensionValue</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DisplayProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SearchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailWeight</Name>
			<Label>@RET3014</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetaiTotalWeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS40147</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductMaster</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductMaster</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RetaiTotalWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWeight</ExtendedDataType>
			<Label>@RET4789</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResProductMasterIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductMaster</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResDistinctProduct</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResDistinctProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResDistinctProduct</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>EcoResDistinctProduct_EcoResDistinctProductVariant</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProductMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProductMaster</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResProductMaster_EcoResDistinctProductVariant</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductMaster</Name>
					<Field>ProductMaster</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>