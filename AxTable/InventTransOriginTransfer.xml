<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransOriginTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransOriginTransfer extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteTransferRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the record related to the transfer inventory transaction originator.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The ID of the transfer inventory transaction originator that defines the record to delete.
    /// </param>
    public static void deleteTransferRef(InventTransOriginId _inventTransOriginId)
    {
        InventTransOriginTransfer     inventTransOriginTransfer;

        if (!_inventTransOriginId)
        {
            return;
        }

        ttsbegin;

        // The deletes are split in two to reduce the risk of SQL picking a bad query plan that leads to a scan of the table.
        delete_from inventTransOriginTransfer
            where inventTransOriginTransfer.IssueInventTransOrigin == _inventTransOriginId;

        delete_from inventTransOriginTransfer
            where inventTransOriginTransfer.ReceiptInventTransOrigin == _inventTransOriginId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransferRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the identifier of the related transfer inventory transaction originator for a given
    ///    transfer inventory transaction originator.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The ID of the transfer inventory transaction originator counterpart originator to find.
    /// </param>
    /// <returns>
    ///    The identifier of the related transfer inventory transaction originator.
    /// </returns>
    /// <remarks>
    ///    This method returns the input <paramref name="_inventTransOriginId" /> parameter if no record that
    ///    corresponds exists in the <c>InventTransOriginTransfer</c> table.This is for backward compatibility
    ///    reasons because before version 4.0, the same originator was used for both issue and receipt
    ///    transfer inventory transactions.
    /// </remarks>
    public static InventTransOriginId findTransferRefId(InventTransOriginId _inventTransOriginId)
    {
        InventTransOriginTransfer   inventTransTransfer;

        // The selects are split in two to reduce the risk of SQL picking a bad query plan that leads to a scan of the table.
        select firstonly IssueInventTransOrigin, ReceiptInventTransOrigin from inventTransTransfer
            where inventTransTransfer.IssueInventTransOrigin == _inventTransOriginId;

        if (inventTransTransfer.IssueInventTransOrigin == _inventTransOriginId)
        {
            return inventTransTransfer.ReceiptInventTransOrigin;
        }

        select firstonly IssueInventTransOrigin, ReceiptInventTransOrigin from inventTransTransfer
            where inventTransTransfer.ReceiptInventTransOrigin == _inventTransOriginId;

        if (inventTransTransfer.ReceiptInventTransOrigin == _inventTransOriginId)
        {
            return inventTransTransfer.IssueInventTransOrigin;
        }

        return _inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTransferRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new record, or updates the existing one, for a pair of transfer inventory transaction
    ///    originators.
    /// </summary>
    /// <param name="_issueInventTransOriginId">
    ///    The ID of the issue transfer inventory transaction originator.
    /// </param>
    /// <param name="_receiptInventTransOriginId">
    ///    The ID of the receipt transfer inventory transaction originator.
    /// </param>
    /// <param name="_ecoResProductRecId">
    ///    The ID of the associated product record.
    /// </param>
    /// <param name="_referenceCategory">
    ///    The inventory transaction type.
    /// </param>
    public static void writeTransferRefId(
        InventTransOriginId _issueInventTransOriginId,
        InventTransOriginId _receiptInventTransOriginId,
        EcoResProductRecId  _ecoResProductRecId,
        InventTransType     _referenceCategory)
    {
        InventTransOriginTransfer     inventTransOriginTransfer;

        if (!_issueInventTransOriginId && !_receiptInventTransOriginId)
        {
            return;
        }

        if (!_receiptInventTransOriginId)
        {
            InventTransOriginTransfer::deleteTransferRef(_issueInventTransOriginId);
            return;
        }

        if (!_issueInventTransOriginId)
        {
            InventTransOriginTransfer::deleteTransferRef(_receiptInventTransOriginId);
            return;
        }

        ttsbegin;

        // The selects are split in two to reduce the risk of SQL picking a bad query plan that leads to a scan of the table.
        // We start with the issue since that is the clustered index which is most effective for the scenario where we find a record.
        select forupdate inventTransOriginTransfer
            where inventTransOriginTransfer.IssueInventTransOrigin == _issueInventTransOriginId;

        if (!inventTransOriginTransfer.RecId)
        {
            select forupdate inventTransOriginTransfer
                where inventTransOriginTransfer.ReceiptInventTransOrigin == _receiptInventTransOriginId;
        }

        if ((inventTransOriginTransfer.IssueInventTransOrigin      != _issueInventTransOriginId)
            || (inventTransOriginTransfer.ReceiptInventTransOrigin != _receiptInventTransOriginId))
        {
            inventTransOriginTransfer.IssueInventTransOrigin    = _issueInventTransOriginId;
            inventTransOriginTransfer.ReceiptInventTransOrigin  = _receiptInventTransOriginId;
            inventTransOriginTransfer.Product = _ecoResProductRecId;
            inventTransOriginTransfer.ReferenceCategory = _referenceCategory;

            inventTransOriginTransfer.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS323956</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS127540</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>IssueInventTransOrigin</TitleField1>
	<TitleField2>ReceiptInventTransOrigin</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>IssueInventTransOriginIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>IssueInventTransOriginIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IssueInventTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptInventTransOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IssueInventTransOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IssueInventTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptInventTransOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IssueInventTransOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
			<Label>@SYS15242</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReceiptInventTransOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
			<Label>@SYS15953</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NonFinancialTransfInventClosingRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventClosingRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReferenceCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IssueInventTransOriginIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>IssueInventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReceiptInventTransOriginIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReceiptInventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EcoResProductIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>NonFinancialTransfInventClosingRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IssueInventTransOrigin</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReceiptInventTransOrigin</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReferenceCategory</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransOriginTransfer</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssueInventTransOrigin</Name>
					<Field>IssueInventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TransferInventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TransferInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransOriginTransfer</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceiptInventTransOrigin</Name>
					<Field>ReceiptInventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProduct</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResProduct</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventClosing</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventClosing</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventClosing</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventClosing</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NonFinancialTransfInventClosingRecId</Name>
					<Field>NonFinancialTransfInventClosingRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>