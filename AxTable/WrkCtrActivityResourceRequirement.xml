<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrActivityResourceRequirement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrActivityResourceRequirement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToPropertyMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the text representation of the requirement and the minimum value that is required to map.
    /// </summary>
    /// <param name="_propertyMap">
    /// The <c>Map</c> to add the property to.
    /// </param>
    void addToPropertyMap(Map _propertyMap)
    {
        str property = WrkCtrSchedulingProperty::getWrkCtrSchedulingProperty(this.WrkCtrId);

        if (!_propertyMap.exists(property))
        {
            _propertyMap.insert(property,0.0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from the other requirements that are in the set.
    /// </summary>
    /// <param name="_activityRequirementSet">
    /// The <c>recId</c> value of the parent activity requirement set.
    /// </param>
    public void initFromRequirementSet(RefRecId _activityRequirementSet)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        // The DataAreaId must be set to avoid getting an error on this field on ValidateWrite
        // since this would not make sense to the user
        this.ResourceDataAreaId = curExt2dataareaid(tableNum(WrkCtrTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitResourceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Limits the query to only include resources which satisfy this requirement.
    /// </summary>
    /// <param name="_dsWrkCtrTable">
    /// The query build data source to be modified. The query must have a primary data source based on the
    /// <c>WrkCtrTable</c> table.
    /// </param>
    /// <param name="_searchFromDate">
    /// The search from date. This parameter only used in the super type.
    /// </param>
    /// <param name="_searchToDate">
    /// The search to date. This parameter only used in the super type.
    /// </param>
    void limitResourceQuery(QueryBuildDataSource    _dsWrkCtrTable,
                            TransDate               _searchFromDate,
                            TransDate               _searchToDate)
    {
        if (this.WrkCtrId)
        {
            _dsWrkCtrTable.addRange(fieldNum(WrkCtrTable,WrkCtrId)).value(queryValue(this.WrkCtrId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the resource description.
    /// </summary>
    /// <returns>
    /// The resource description.
    /// </returns>
    display Description requirementDescription()
    {
        return WrkCtrTable::find(this.WrkCtrId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the resource based on <c>WrkCtrId</c>.
    /// </summary>
    /// <param name="_set">
    /// true if the resource ID is set; otherwise, false.
    /// </param>
    /// <param name="_wrkCtrActivityRequirementEdit">
    /// The new resource ID value when <paramref name="set"/> is true.
    /// </param>
    /// <param name="_wrkCtrActivityRequirement">
    /// The parent activity requirement record.
    /// </param>
    /// <param name="_allowBlank">
    /// A <c>Boolean</c> specifying if the method accepts a blank string as input.
    /// </param>
    /// <param name="_companyId">The company ID.</param>
    /// <returns>
    /// A string with the ID of the resource.
    /// </returns>
    /// <exception cref="Exception::Warning">
    /// The value in field requirement is not found in relating table Resources.
    /// </exception>
    public WrkCtrActivityRequirementEdit requirementEdit(
        boolean                                 _set,
        WrkCtrActivityRequirementEdit           _wrkCtrActivityRequirementEdit,
        WrkCtrActivityRequirement               _wrkCtrActivityRequirement,
        boolean                                 _allowBlank = false,
        CompanyId                               _companyId = ''
        )
    {
        WrkCtrActivityRequirementEdit   wrkCtrActivityRequirementEdit = _wrkCtrActivityRequirementEdit;
        WrkCtrTable                     wrkCtrTable;

        if (_set)
        {
            if (prmisDefault(_companyId))
            {
                _companyId = _wrkCtrActivityRequirement.getCompanyContext(true);
            }

            // Change the company to make sure the find is done in the same company as the activity
            changecompany(_companyId)
            {
                wrkCtrTable = WrkCtrTable::find(wrkCtrActivityRequirementEdit);

                if (wrkCtrTable.RecId && wrkCtrTable.IsIndividualResource)
                {
                    this.WrkCtrId = wrkCtrTable.WrkCtrId;
                    this.ResourceDataAreaId = curExt2dataareaid(tableNum(WrkCtrTable));
                }
                else
                {
                    if (_allowBlank)
                    {
                        this.WrkCtrId = '';
                        this.ResourceDataAreaId = '';
                    }
                    else
                    {
                        throw warning(strFmt("@SYS112224",wrkCtrActivityRequirementEdit,"@SYS11370",tablePName(WrkCtrTable)));
                    }
                }
            }
        }
        else
        {
            wrkCtrActivityRequirementEdit = this.WrkCtrId;
        }

        return wrkCtrActivityRequirementEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Goes to main table for this requirement.
    /// </summary>
    public void requirementJumpRef()
    {
        WrkCtrTable::jumpRefWrkCtrId(this.WrkCtrId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a lookup for resources.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormStringControl</c> control that the lookup should attach to.
    /// </param>
    /// <param name="_siteId">
    /// The ID of a site to limit the search on.
    /// </param>
    public void requirementLookup(FormStringControl _formControl, InventSiteId _siteId)
    {
        WrkCtrTable::lookupWrkCtrId(_formControl, '', '', 0, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>ActivityRequirement</c> field to the provided value.
    /// </summary>
    /// <param name="_activityRequirement">
    /// The record ID of a <c>WrkCtrActivity</c> record.
    /// </param>
    void setActivityRequirement(RefRecId  _activityRequirement)
    {
        this.ActivityRequirement = _activityRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.ResourceDataAreaId && this.WrkCtrId)
        {
            changecompany(this.ResourceDataAreaId)
            {
                if (!WrkCtrTable::exist(this.WrkCtrId))
                {
                    ret = checkFailed(strFmt("@SCM:ResourceDoesNotExistInCompany", this.WrkCtrId, this.ResourceDataAreaId));
                }
            }
        }

        if (ret && this.ActivityRequirement > 0)
        {
            ret = this.validateWriteRequirementSet(WrkCtrActivityRequirement::find(this.ActivityRequirement).ActivityRequirementSet);
        }
        
        if (ret)
        {
            ret = WrkCtrActivityResourceRequirement::validateRequirementCompanyAssociation(this.ResourceDataAreaId, this.ActivityRequirement, this.WrkCtrId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the record is correct before it is written when the activity requirement set is known.
    /// </summary>
    /// <param name="_activityRequirementSet">
    /// The ID of the activity requirement set.
    /// </param>
    /// <returns>
    /// true if the record may be written; otherwise, false.
    /// </returns>
    public boolean validateWriteRequirementSet(RefRecId _activityRequirementSet)
    {
        WrkCtrActivityRequirement               wrkCtrActivityRequirement;
        WrkCtrActivityResourceTypeRequirement   wrkCtrActivityResourceTypeRequirement;
        WrkCtrActivityRequirementSet            wrkCtrActivityRequirementSet;
        WrkCtrTable                             wrkCtrTable;
        boolean                                 ret = true;

        wrkCtrTable = WrkCtrTable::find(this.WrkCtrId);

        // The resource type requirement must be consistent with the type of the required resource.
        select firstonly RecId from wrkCtrActivityResourceTypeRequirement
                where wrkCtrActivityResourceTypeRequirement.ResourceType != wrkCtrTable.WrkCtrType
            exists join wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.RecId == wrkCtrActivityResourceTypeRequirement.ActivityRequirement
                   && wrkCtrActivityRequirement.ActivityRequirementSet == _activityRequirementSet;

        if (wrkCtrActivityResourceTypeRequirement.RecId)
        {
            ret = checkFailed("@SYS301005");
        }

        wrkCtrActivityRequirementSet = WrkCtrActivityRequirementSet::find(_activityRequirementSet);

        // Resource requirement is only allowed when quantity = 1
        if (ret && wrkCtrActivityRequirementSet.Quantity > 1)
        {
            ret = checkFailed("@SYS134213");
        }

        // Only one requirement of type resource is allowed
        ret = ret && WrkCtrActivityRequirementSet::checkExistingRequirementType(WrkCtrActivityRequirementType::Resource,
                                                                                _activityRequirementSet,
                                                                                this.ActivityRequirement);

        if (ret && wrkCtrTable.WrkCtrType != WrkCtrType::Personnel)
        {
            // When resource requirements of type “skill”, “course”, “certificate” or “title” are specified
            // it is only possible to specify resources of type “human resources”

            select firstonly RecId from wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.ActivityRequirementSet == _activityRequirementSet
                   && (   wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::Skill
                       || wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::Course
                       || wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::Certificate
                       || wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::PersonTitle);

            if (wrkCtrActivityRequirement.RecId)
            {
                ret = checkFailed("@SYS301009");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequirementCompanyAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that there are no associated Production Route and Operation relations from another company for the given requirement.
    /// </summary>
    /// <param name = "_requirementDataAreaId">Requirement company.</param>
    /// <param name = "_activityRequirementRecId">Activity requirement RecId.</param>
    /// <param name = "_wrkCtrId">Resource Id.</param>
    /// <returns>
    /// true if there are no associated Production route ond Operation relation from another company and record may be written; otherwise, false.
    /// </returns>
    internal static boolean validateRequirementCompanyAssociation(DataAreaId _requirementDataAreaId, RefRecId _activityRequirementRecId, WrkCtrId _wrkCtrId)
    {
        WrkCtrActivityRequirementSet wrkCtrActivityRequirementSet;
        WrkCtrActivityRequirement wrkCtrActivityRequirement;
        WrkCtrActivity wrkCtrActivity;
        boolean ret = true;
         
        #localmacro.ExistsJoinActivity
            exists join wrkCtrActivity
                where wrkCtrActivity.RecId == %1.Activity
            exists join wrkCtrActivityRequirementSet
                where wrkCtrActivityRequirementSet.Activity == wrkCtrActivity.RecId
            exists join wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.ActivityRequirementSet == wrkCtrActivityRequirementSet.RecId &&
                      wrkCtrActivityRequirement.RecId == _activityRequirementRecId
        #endmacro

        if (!_requirementDataAreaId || !_activityRequirementRecId || !_wrkCtrId)
            return ret;

        WrkCtrProdRouteActivity wrkCtrProdRouteActivity;
        ProdRoute prodRoute;

        select crosscompany ProdId from prodRoute
                where prodRoute.DataAreaId != _requirementDataAreaId
            exists join wrkCtrProdRouteActivity
                where wrkCtrProdRouteActivity.ProdId == prodRoute.ProdId &&
                      wrkCtrProdRouteActivity.OprNum == prodRoute.OprNum &&
                      wrkCtrProdRouteActivity.OprPriority == prodRoute.OprPriority &&
                      wrkCtrProdRouteActivity.RouteDataAreaId == prodRoute.DataAreaId
            #ExistsJoinActivity(wrkCtrProdRouteActivity);
  
        if (prodRoute)
        {
            ret = checkFailed(strFmt("@SCM:RequirementInCompanyIsAssociatedWithProdOrderInDifferentCompany",
                _wrkCtrId, _requirementDataAreaId, prodRoute.ProdId, prodRoute.DataAreaId));
        }

        if (ret)
        {
            WrkCtrRouteOprActivity wrkCtrRouteOprActivity;
            RouteOpr routeOpr;
            
            select crosscompany OprId from routeOpr
                    where routeOpr.DataAreaId != _requirementDataAreaId
                exists join wrkCtrRouteOprActivity
                    where wrkCtrRouteOprActivity.RouteOpr == routeOpr.RecId &&
                          wrkCtrRouteOprActivity.RouteOprDataAreaId == routeOpr.DataAreaId              
                #ExistsJoinActivity(wrkCtrRouteOprActivity);

            if (routeOpr)
            {
                ret = checkFailed(strFmt("@SCM:RequirementInCompanyIsAssociatedWithOperationInDifferentCompany",
                    _WrkCtrId, _requirementDataAreaId, routeOpr.OprId, routeOpr.DataAreaId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS134883</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>RouteOpr</FormRef>
	<Label>@SYS134725</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WrkCtrId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ActivityRequirementIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>ActivityRequirementIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityRequirement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Requirement</Name>
			<Label>@SYS11370</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ActivityRequirement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResourceDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ActivityRequirementIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityRequirement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WrkCtrId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ResourceDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ActivityRequirement</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WrkCtrActivityRequirement</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ActivityRequirement</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ResourceRequirement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityRequirement</Name>
					<Field>ActivityRequirement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Resource</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ResourceRequirement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrId</Name>
					<Field>WrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceDataAreaId</Name>
					<Field>ResourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>