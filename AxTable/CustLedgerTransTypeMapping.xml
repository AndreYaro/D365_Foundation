<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustLedgerTransTypeMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustLedgerTransTypeMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!CustLedgerTransTypeMapping::exist(_recId))
        {
            ret = checkFailed(strFmt(CustLedgerTransTypeMapping::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records that provides the mapping between the <c>LedgerTransType</c> and the
    ///    <c>CustSettleTransType</c> enumeration values.
    /// </summary>
    public static void createData()
    {
        CustLedgerTransTypeMapping custLedgerTransTypeMapping;

        select firstonly crosscompany custLedgerTransTypeMapping;

        // if table is empty inserts record
        if (!custLedgerTransTypeMapping)
        {
            ttsbegin;

            CustLedgerTransTypeMapping::createDataAll();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records that provide the mapping between <c>CustSettlmentTrans</c> and the <c>LedgerTransType</c> enumeration values.
    /// </summary>
    protected static void createDataAll()
    {
        CustLedgerTransTypeMapping::createDataInvoices();
        CustLedgerTransTypeMapping::createDataInterestNotes();
        CustLedgerTransTypeMapping::createDataCollectionLetters();
        CustLedgerTransTypeMapping::createDataPaymentFee();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records that provide the mapping between <c>CustSettlmentTrans</c> invoices and the <c>LedgerTransType</c> enumeration values.
    /// </summary>
    private static void createDataInvoices()
    {
        CustLedgerTransTypeMapping custLedgerTransTypeMapping;

        custLedgerTransTypeMapping.clear();
        custLedgerTransTypeMapping.CustSettleTransType = CustSettlementTrans::Invoices;
        custLedgerTransTypeMapping.LedgerTransType = LedgerTransType::None;
        custLedgerTransTypeMapping.insert();

        custLedgerTransTypeMapping.clear();
        custLedgerTransTypeMapping.CustSettleTransType = CustSettlementTrans::Invoices;
        custLedgerTransTypeMapping.LedgerTransType = LedgerTransType::Sales;
        custLedgerTransTypeMapping.insert();

        custLedgerTransTypeMapping.clear();
        custLedgerTransTypeMapping.CustSettleTransType = CustSettlementTrans::Invoices;
        custLedgerTransTypeMapping.LedgerTransType = LedgerTransType::Project;
        custLedgerTransTypeMapping.insert();

        custLedgerTransTypeMapping.clear();
        custLedgerTransTypeMapping.CustSettleTransType = CustSettlementTrans::Invoices;
        custLedgerTransTypeMapping.LedgerTransType = LedgerTransType::Cust;
        custLedgerTransTypeMapping.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataInterestNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records that provide the mapping between <c>CustSettlmentTrans</c> interest notes and the <c>LedgerTransType</c> enumeration values.
    /// </summary>
    private static void createDataInterestNotes()
    {
        CustLedgerTransTypeMapping custLedgerTransTypeMapping;

        custLedgerTransTypeMapping.clear();
        custLedgerTransTypeMapping.CustSettleTransType = CustSettlementTrans::InterestNotes;
        custLedgerTransTypeMapping.LedgerTransType = LedgerTransType::Interest;
        custLedgerTransTypeMapping.insert();

    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataCollectionLetters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records that provide the mapping between <c>CustSettlmentTrans</c> collection letters and the <c>LedgerTransType</c> enumeration values.
    /// </summary>
    private static void createDataCollectionLetters()
    {
        CustLedgerTransTypeMapping custLedgerTransTypeMapping;
  
        custLedgerTransTypeMapping.clear();
        custLedgerTransTypeMapping.CustSettleTransType = CustSettlementTrans::CollectionLetters;
        custLedgerTransTypeMapping.LedgerTransType = LedgerTransType::CollectionLetter;
        custLedgerTransTypeMapping.insert();

    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataPaymentFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records that provide the mapping between <c>CustSettlmentTrans</c> payment fee and the <c>LedgerTransType</c> enumeration values.
    /// </summary>
    private static void createDataPaymentFee()
    {
        CustLedgerTransTypeMapping custLedgerTransTypeMapping;

        custLedgerTransTypeMapping.clear();
        custLedgerTransTypeMapping.CustSettleTransType = CustSettlementTrans::PaymentFee;
        custLedgerTransTypeMapping.LedgerTransType = LedgerTransType::Fee;
        custLedgerTransTypeMapping.insert();

    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>CustLedgerTransTypeMapping</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custLedgerTransTypeMapping
                 where
                     custLedgerTransTypeMapping.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustLedgerTransTypeMapping</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustLedgerTransTypeMapping</c> table; otherwise, an empty record.
    /// </returns>
    public static CustLedgerTransTypeMapping find(
    recId _recId,
    boolean _forupdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustLedgerTransTypeMapping custLedgerTransTypeMapping;

        custLedgerTransTypeMapping.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custLedgerTransTypeMapping.concurrencyModel(_concurrencyModel);
        }
        select firstonly custLedgerTransTypeMapping
            where custLedgerTransTypeMapping.RecId == _recId;

        return custLedgerTransTypeMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102195";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS327042</DeveloperDocumentation>
	<Label>@SYS300298</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>LedgerTransType</TitleField1>
	<TitleField2>CustSettleTransType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustSettleTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustSettleTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustSettleTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustSettlementTransType</ExtendedDataType>
			<EnumType>CustSettlementTrans</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerTransType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>