<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildStrategyClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSLoadBuildStrategyClass extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateFromILoadBuildStrategy</Name>
				<Source><![CDATA[
    private void updateFromILoadBuildStrategy(TMSILoadBuildStrategy _tmsILoadBuildStrategy)
    {
        TMSLoadBuildStrategyClassDescription    description;

        if (_tmsILoadBuildStrategy)
        {
            description = _tmsILoadBuildStrategy.getDescription();

            if (this.Description != description)
            {
                ttsBegin;
                this.Description = description;
                this.update();
                info(strFmt("@SYP4860904", this.StrategyClassName));
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLoadBuildStrategyNamesMap</Name>
				<Source><![CDATA[
    private static Map buildLoadBuildStrategyNamesMap()
    {
        List                        classList;
        ListIterator                classListIterator;
        TMSILoadBuildStrategy       tmsILoadBuildStrategy;
        ClassName                   strategyClassName;
        Map                         classNameMap = new Map(Types::String, Types::Class);

        classList = SysExtensionAppClassFactory::getClassInstanceListFromSysAttribute(
            classStr(TMSILoadBuildStrategy),
            new TMSLoadBuildStrategyEnableAttribute());

        classListIterator = new ListIterator(classList);

        while (classListIterator.more())
        {
            tmsILoadBuildStrategy = classListIterator.value();

            if (tmsILoadBuildStrategy)
            {
                strategyClassName = classId2Name(classIdGet(tmsILoadBuildStrategy));
                classNameMap.insert(strategyClassName, tmsILoadBuildStrategy);
            }

            classListIterator.next();
        }

        return classNameMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TMSLoadBuildStrategyClass</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of <c>TMSLoadBuildStrategyClass</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TMSLoadBuildStrategyClass</c> table; otherwise, empty record.
    /// </returns>
    public static TMSLoadBuildStrategyClass findByRecId(TMSLoadBuildStrategyClassId _recId, boolean _forUpdate = false)
    {
        TMSLoadBuildStrategyClass tmsLoadBuildStrategyClass;

        if (_recId)
        {
            tmsLoadBuildStrategyClass.selectForUpdate(_forUpdate);

            select firstonly tmsLoadBuildStrategyClass
                where tmsLoadBuildStrategyClass.RecId == _recId;
        }

        return tmsLoadBuildStrategyClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reinitializeLoadBuildStrategies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reinitializes the <c>TMSLoadBuildStrategyClass</c> table data based on the actual
    /// classes implementing <c>TMSILoadBuildStrategy</c> interface and decorated with
    /// <c>TMSLoadBuildStrategyEnableAttribute</c> attribute.
    /// Additionally the initial parameters data (attribute definition) is recorded.
    /// </summary>
    public static void reinitializeLoadBuildStrategies()
    {
        TMSLoadBuildStrategyClass   tmsLoadBuildStrategyClass;
        TMSILoadBuildStrategy       tmsILoadBuildStrategy;
        ClassName                   strategyClassName;
        Map                         classNameMap;
        MapIterator                 classNameMapIterator;

        classNameMap = tmsLoadBuildStrategyClass::buildLoadBuildStrategyNamesMap();

        ttsBegin;

        while select forUpdate tmsLoadBuildStrategyClass
        {
            // Try to find the strategy class name referenced by current tmsLoadBuildStrategyClass buffer
            // in currently retrieved class map.
            // If found remove it from the retrieved class map - this is record that was not changed since last regeneration.
            // If not found, delete it from DB - tmsLoadBuildStrategyClass is pointing to a strategy that was uninstalled from the system.
            if (classNameMap.exists(tmsLoadBuildStrategyClass.StrategyClassName))
            {
                setPrefix(strFmt("@SYP4860905", tmsLoadBuildStrategyClass.StrategyClassName));
                tmsILoadBuildStrategy = classNameMap.lookup(tmsLoadBuildStrategyClass.StrategyClassName);
                TMSLoadBuildStrategyAttribute::reinitializeAttributes(tmsLoadBuildStrategyClass.RecId, tmsILoadBuildStrategy);
                tmsLoadBuildStrategyClass.updateFromILoadBuildStrategy(tmsILoadBuildStrategy);
                classNameMap.remove(tmsLoadBuildStrategyClass.StrategyClassName);
            }
            else
            {
                warning(strFmt("@SYP4860906", tmsLoadBuildStrategyClass.StrategyClassName));
            }
        }

        classNameMapIterator = new MapIterator(classNameMap);

        // The remaining elements in classNameMap are to be added.
        // These are the strategies that were added since last regeneration.
        while (classNameMapIterator.more())
        {
            strategyClassName = classNameMapIterator.key();
            tmsILoadBuildStrategy = classNameMapIterator.value();

            if (strategyClassName && tmsILoadBuildStrategy)
            {
                tmsLoadBuildStrategyClass.clear();
                tmsLoadBuildStrategyClass.StrategyClassName = strategyClassName;
                tmsLoadBuildStrategyClass.Description = tmsILoadBuildStrategy.getDescription();
                tmsLoadBuildStrategyClass.insert();
                setPrefix(strFmt("@SYP4860905", tmsLoadBuildStrategyClass.StrategyClassName));
                info(strFmt("@SYP4860907", tmsLoadBuildStrategyClass.StrategyClassName));

                TMSLoadBuildStrategyAttribute::reinitializeAttributes(tmsLoadBuildStrategyClass.RecId, tmsILoadBuildStrategy);
            }

            classNameMapIterator.next();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@SYP4860888</DeveloperDocumentation>
	<Label>@SYP4860887</Label>
	<TitleField1>StrategyClassName</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Transportation</Modules>
	<ReplacementKey>StrategyClassNameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TMSLoadBuildStrategyAttribute</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TMSLoadBuildStrategyAttribute</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TMSLoadBuildStrategy</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TMSLoadBuildStrategy</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StrategyClassName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StrategyClassName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StrategyClassName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSLoadBuildStrategyClassDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StrategyClassName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSLoadBuildStrategyClassName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StrategyClassNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StrategyClassName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>