<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPaymentConnectors</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Retail=Microsoft.Dynamics.Retail;
public class RetailPaymentConnectors extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSupportedConnectorNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of supported connector names.
    /// </summary>
    /// <returns>A collection of connector names.</returns>
    public static container getSupportedConnectorNames()
    {
        RetailPaymentConnectors retailPaymentConnectors;
        container connectorNames;

        while select retailPaymentConnectors
        {
            connectorNames = conIns(connectorNames, 1, retailPaymentConnectors.Name);
        }

        return connectorNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentPropertyMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default payment properties of the specified connector in XML format
    /// </summary>
    /// <param name="connectorName">The connector name.</param>
    /// <returns>The default payment conector properties.</returns>
    public static Retail.PaymentSDK.Portable.PaymentProperty[] getPaymentPropertyMetadata(CreditCardConnectorName connectorName)
    {
        RetailPaymentConnectors retailPaymentConnectors;
        select firstonly1 retailPaymentConnectors where retailPaymentConnectors.Name == connectorName;
        return Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(retailPaymentConnectors.DefaultPaymentPropertyMetadata);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importPaymentConnectorMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imports the payment connector and its default properties from an xml file.
    /// </summary>
    /// <param name="paymentConnectorMetadataXmlStr">The payment connector metadata xml string.</param>
    public static CreditCardConnectorName importPaymentConnectorMetadata(str paymentConnectorMetadataXmlStr)
    {
        CreditCardConnectorName connectorName;
        boolean isInMultiConnectorFormat = false;
        try
        {
            if (paymentConnectorMetadataXmlStr == '')
            {
                throw Global::error("@Retail_HF_3937382:MissingConnectorMetadataInFile");
            }

            try
            {
                Retail.PaymentSDK.Portable.PaymentProperty[] paymentPropertyArray = Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(paymentConnectorMetadataXmlStr);
                CreditCardPaymentProperties creditCardPaymentProperties = CreditCardPaymentProperties::fromProperties(paymentPropertyArray);

                // Extract Connector Name
                CreditCardPaymentProperty paymentProperty = creditCardPaymentProperties.find(Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_Connector(),
                    Retail.PaymentSDK.Portable.Constants.ConnectorProperties::get_ConnectorName());
                connectorName = paymentProperty.parmStringValue();

                // Check whether XML is in multi-connector format. This indicates that the XML is formatted in such a way that it supports multiple connectors and doesn't
                // necessary mean that the XML itself contains multiple connectors.
                // The multi-connector format has a parent node with Namespace=Connector, Name=Properties, and ValueType=PropertyList.
                paymentProperty = creditCardPaymentProperties.find(Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_Connector(),
                    Retail.PaymentSDK.Portable.Constants.ConnectorProperties::get_Properties());
                isInMultiConnectorFormat = paymentProperty && paymentProperty.parmValueType() == CreditCardPropertyDataType::PropertyList;
            }
            catch
            {
                throw Global::error("@Retail_HF_3937382:FailureToExtractPaymentProperties");
            }

            RetailPaymentConnectors retailPaymentConnectors;
            select firstonly1 retailPaymentConnectors where retailPaymentConnectors.Name == connectorName;

            if(retailPaymentConnectors)
            {
                throw Global::error(strFmt("@Retail_HF_3937382:PaymentConnectorAlreadyExistsError", connectorName));
            }
            else
            {
                ttsbegin;
                retailPaymentConnectors.Name = connectorName;
                retailPaymentConnectors.DefaultPaymentPropertyMetadata = paymentConnectorMetadataXmlStr;
                retailPaymentConnectors.IsMultiConnectorFormat = isInMultiConnectorFormat;
                retailPaymentConnectors.insert();
                ttscommit;
            }
        }
        catch
        {
            throw Global::error("@Retail_HF_3937382:ImportConnectorpropertyFailure");
        }

        return connectorName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the RetailPaymentConnectors record by name.
    /// </summary>
    /// <param name="_name">Connector name.</param>
    /// <param name="_update">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>Instance of Retail Payment Connectors.</returns>
    public static RetailPaymentConnectors findByName(str _name, boolean _update = false)
    {
        RetailPaymentConnectors retailPaymentConnectors;

        select firstonly retailPaymentConnectors
            where retailPaymentConnectors.Name == _name;

        if (retailPaymentConnectors.RecId)
        {
            retailPaymentConnectors.selectForUpdate(_update);
        }

        return retailPaymentConnectors;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RetailCDXBackwardCompatibility</ConfigurationKey>
	<Modules>Payments</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>RetailConnectorName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultPaymentPropertyMetadata</Name>
			<ExtendedDataType>RetailMemo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsMultiConnectorFormat</Name>
			<ExtendedDataType>RetailIsMultiConnectorFormat</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>