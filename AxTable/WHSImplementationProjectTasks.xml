<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSImplementationProjectTasks</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSImplementationProjectTasks extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>taskLinkLabelValue</Name>
				<Source><![CDATA[
    internal edit WHSImplementationAction taskLinkLabelValue(boolean _set, WHSImplementationProjectTasks _currentTemplateTask, WHSImplementationAction _action)
    {
        var actionToPerform = _currentTemplateTask.MenuItem;
        WHSImplementationAction actionLabel;

        if (strLen(actionToPerform) > 0)
        {
            var menuItemType = _currentTemplateTask.MenuItemType;

            if (menuItemType == WHSImplementationProjectTasks::menuItemTypeURL())
            {
                actionLabel = actionToPerform;
            }
            else
            {
                MenuFunction menuFunction = new MenuFunction(_currentTemplateTask.MenuItem, _currentTemplateTask.MenuItemType);
                actionLabel = menuFunction.label();
            }
        }

        return actionLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayStatusImage</Name>
				<Source><![CDATA[
    internal display container displayStatusImage(WHSImplementationProjectTasks _task)
    {
        str symbolString = '';

        switch (_task.Status)
        {
            case WHSImplementationTaskStatus::Complete:
                symbolString = ImageReferenceSymbol::Completed;
                break;
        }

        return ImageReference::constructForSymbol(symbolString).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editIsComplete</Name>
				<Source><![CDATA[
    public edit boolean editIsComplete(boolean _isSet, WHSImplementationProjectTasks _task, boolean _isComplete)
    {
        boolean isComplete = false;

        if (_isSet)
        {
            if (_isComplete)
            {
                _task.Status = WHSImplementationTaskStatus::Complete;
                _task.CompletedDateTime = DateTimeUtil::utcNow();
                _task.CompletedByWorker = HcmWorkerLookup::currentWorker();
            }
            else
            {
                _task.Status = WHSImplementationTaskStatus::NotStarted;
                _task.CompletedDateTime = DateTimeUtil::minValue();
                _task.CompletedByWorker = 0;
            }
        }

        if (_task.Status == WHSImplementationTaskStatus::Complete)
        {
            isComplete = true;
        }

        return isComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    internal static void jumpRef(WHSImplementationAction _menuItem, MenuItemType _menuItemType)
    {
        if (_menuItem)
        {
            if (_menuItemType == WHSImplementationProjectTasks::menuItemTypeURL())
            {
                new Browser().navigate(_menuItem, false, false);
            }
            else
            {
                MenuFunction menuFunction = new MenuFunction(_menuItem, _menuItemType);
                appl.setDefaultCompany(curExt());
                menuFunction.run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrevTaskAtSameLevel</Name>
				<Source><![CDATA[
    internal static WHSImplementationProjectTasks findPrevTaskAtSameLevel(WHSImplementationProjectRecId _project, WHSSeqNum _sequenceNumber, WHSSeqNum _parentSequenceNumber)
    {
        WHSImplementationProjectTasks prevTask;
        
        select firstonly prevTask
            order by SequenceNumber desc
            where  prevTask.Project == _project
                && prevTask.ParentSequenceNumber == _parentSequenceNumber
                && prevTask.SequenceNumber < _sequenceNumber;

        return prevTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextTaskAtSameLevel</Name>
				<Source><![CDATA[
    internal static WHSImplementationProjectTasks findNextTaskAtSameLevel(WHSImplementationProjectRecId _project, WHSSeqNum _sequenceNumber, WHSSeqNum _parentSequenceNumber)
    {
        WHSImplementationProjectTasks nextTask;
        
        select firstonly nextTask
            order by SequenceNumber asc
            where  nextTask.Project == _project
                && nextTask.ParentSequenceNumber == _parentSequenceNumber
                && nextTask.SequenceNumber > _sequenceNumber;

        return nextTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequenceNumberStr</Name>
				<Source><![CDATA[
    internal display str sequenceNumberStr(WHSImplementationProjectTasks _task)
    {
        if (!_task.ParentSequenceNumber)
        {
            int countOfChildTasksForTasksAtCurrentLevel = WHSImplementationProjectTasks::findCountOfChildTasksForTasksAtCurrentLevel(_task.Project, _task.SequenceNumber, _task.ParentSequenceNumber);
            return int2Str(_task.SequenceNumber - countOfChildTasksForTasksAtCurrentLevel);
        }

        WHSImplementationProjectTasks parentTask = WHSImplementationProjectTasks::findBySequenceNumber(_task.Project, _task.ParentSequenceNumber);
        str retVal = this.sequenceNumberStr(parentTask);

        int countOfChildTasksForTasksAtCurrentLevel2 = WHSImplementationProjectTasks::findCountOfChildTasksForTasksAtCurrentLevel(_task.Project, _task.SequenceNumber, _task.ParentSequenceNumber);
        retVal += "." + int2Str(_task.SequenceNumber - _task.ParentSequenceNumber - countOfChildTasksForTasksAtCurrentLevel2);

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCountOfChildTasksForTasksAtCurrentLevel</Name>
				<Source><![CDATA[
    private static int findCountOfChildTasksForTasksAtCurrentLevel(WHSImplementationProjectRecId _project, WHSSeqNum _currentSequenceNumber, WHSSeqNum _currentTasksParentSequenceNumber)
    {
        WHSImplementationProjectTasks task;

        select count(SequenceNumber) from task
            where  task.Project == _project
                && task.SequenceNumber < _currentSequenceNumber
                && task.ParentSequenceNumber > _currentTasksParentSequenceNumber;

        return task.SequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSImplementationProjectTasks find(WHSImplementationProjectRecId _project, WHSImplementationTaskName _taskName, boolean _forupdate = false)
    {
        WHSImplementationProjectTasks task;

        if (_taskName)
        {
            task.selectForUpdate(_forupdate);

            select firstonly task
                where task.Project == _project
                   && task.Name == _taskName;
        }

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextSequenceNumber</Name>
				<Source><![CDATA[
    internal static WHSSeqNum findNextSequenceNumber(WHSImplementationProjectRecId _project)
    {
        WHSImplementationProjectTasks task;

        select maxof(SequenceNumber) from task where task.Project == _project;

        return task.SequenceNumber + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveRows</Name>
				<Source><![CDATA[
    internal WHSImplementationProjectTasks moveRows(boolean _up)
    {
        WHSImplementationProjectTasks taskCursor = this;
        WHSImplementationProjectTasks taskNew;
        
        if (this.checkRecordsCanBeMoved(_up))
        {
            ttsbegin;

            Map recordIdSequenceNumberMap = new Map(Types::Int64, Types::Container);

            select forupdate taskNew
                where taskNew.Project == this.Project 
                    && taskNew.RecId == taskCursor.RecId;

            if (taskNew)
            {
                WHSSeqNum oldLineNum = taskNew.SequenceNumber;
                
                WHSSeqNum toTaskSeqNum;
                int totalChildOfToTask, totalChildOfFromTask;

                if (_up)
                {
                    WHSImplementationProjectTasks taskTo = WHSImplementationProjectTasks::findPrevTaskAtSameLevel(taskNew.Project, taskNew.SequenceNumber, taskNew.ParentSequenceNumber);

                    toTaskSeqNum = taskTo.SequenceNumber;
                    totalChildOfToTask = oldLineNum - toTaskSeqNum;
                        
                    // How many children does the "From" task have.
                    WHSImplementationProjectTasks taskFrom = WHSImplementationProjectTasks::findNextTaskAtSameLevel(taskNew.Project, taskNew.SequenceNumber, taskNew.ParentSequenceNumber);

                    if (!taskFrom)
                    {
                        totalChildOfFromTask = 1;
                    }
                    else
                    {
                        totalChildOfFromTask = taskFrom.SequenceNumber - oldLineNum;
                    }
                        
                    taskNew.SequenceNumber = toTaskSeqNum;

                    // If there are child task they should be updated with new parent id
                    this.updateChildTasks(oldLineNum, -totalChildOfToTask, recordIdSequenceNumberMap, false);
                    this.updateChildTasks(toTaskSeqNum, totalChildOfFromTask, null, true);

                    oldLineNum = taskNew.SequenceNumber + totalChildOfFromTask;
                }
                else
                {
                    WHSImplementationProjectTasks taskDown = WHSImplementationProjectTasks::findNextTaskAtSameLevel(taskNew.Project, taskNew.SequenceNumber, taskNew.ParentSequenceNumber);

                    toTaskSeqNum = taskDown.SequenceNumber;
                    totalChildOfFromTask = taskDown.SequenceNumber - oldLineNum;

                    // How many children does the "To" task have.
                    WHSImplementationProjectTasks taskUp = WHSImplementationProjectTasks::findNextTaskAtSameLevel(taskNew.Project, toTaskSeqNum, taskNew.ParentSequenceNumber);
                    
                    if (!taskUp)
                    {
                        totalChildOfToTask = 1;
                    }
                    else
                    {
                        totalChildOfToTask = taskUp.SequenceNumber - toTaskSeqNum;
                    }

                    taskNew.SequenceNumber += totalChildOfToTask;

                    // If there are child task they should be updated with new parent id
                    this.updateChildTasks(oldLineNum, totalChildOfToTask, recordIdSequenceNumberMap, false);
                    this.updateChildTasks(toTaskSeqNum, -totalChildOfFromTask, null, true);
                }

                WHSImplementationProjectTasks taskOld;
                select firstonly taskOld
                    where taskOld.Project == taskNew.Project 
                        && taskOld.SequenceNumber == toTaskSeqNum
                        && taskOld.ParentSequenceNumber == taskNew.ParentSequenceNumber
                        && taskOld.RecId != taskNew.RecId;

                recordIdSequenceNumberMap.insert(taskOld.RecId, [oldLineNum, taskNew.ParentSequenceNumber]);

                taskNew.update();
                
                this.updateTaskRecords(recordIdSequenceNumberMap);
            }

            ttscommit;
        }

        return taskNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaskRecords</Name>
				<Source><![CDATA[
    private void updateTaskRecords(Map _recordIdSequenceNumberMap)
    {
        WHSImplementationProjectTasks taskUpdate;
        MapEnumerator enumertor = _recordIdSequenceNumberMap.getEnumerator();

        while (enumertor.moveNext())
        {
            RecId taskRecId = enumertor.currentKey();
            WHSSeqNum sequenceNumber, parentSequenceNumber;
            [sequenceNumber, parentSequenceNumber] = enumertor.currentValue();

            select forupdate taskUpdate where taskUpdate.RecId == taskRecId;

            taskUpdate.SequenceNumber = sequenceNumber;
            taskUpdate.ParentSequenceNumber = parentSequenceNumber;
            taskUpdate.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRecordsCanBeMoved</Name>
				<Source><![CDATA[
    private boolean checkRecordsCanBeMoved(boolean _up)
    {
        if (_up)
        {
            if (this.SequenceNumber > 1)
            {
                return true;
            }
        }
        else
        {
            WHSSeqNum nextSequenceNumber = WHSImplementationProjectTasks::findNextSequenceNumber(this.Project);
                
            if (this.SequenceNumber < nextSequenceNumber - 1
                    && this.SequenceNumber != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChildTasks</Name>
				<Source><![CDATA[
    private void updateChildTasks(WHSSeqNum _existingSequenceNumber, 
        WHSSeqNum _change, 
        Map _recordIdSequenceNumberMap,
        boolean _update)
    {
        WHSImplementationProjectTasks task;

        while select forupdate task
            order by SequenceNumber asc
            where  task.Project == this.Project 
                && task.ParentSequenceNumber == _existingSequenceNumber
        {
            this.updateChildTasks(task.SequenceNumber, _change, _recordIdSequenceNumberMap, _update);

            task.SequenceNumber += _change;
            task.ParentSequenceNumber += _change;

            if (_update) 
            {
                task.update();
            }
            else
            {
                _recordIdSequenceNumberMap.insert(task.RecId, [task.SequenceNumber, task.ParentSequenceNumber]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySequenceNumber</Name>
				<Source><![CDATA[
    internal static WHSImplementationProjectTasks findBySequenceNumber(WHSImplementationProjectRecId _project, WHSSeqNum _sequenceNumber)
    {
        WHSImplementationProjectTasks task;

        select firstonly task
            where task.Project == _project 
                && task.SequenceNumber == _sequenceNumber;

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.Name = this.convertLabelId2String(this.Name);
        this.Description = this.convertLabelId2String(this.Description);
        this.initSequenceNumbers();
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSequenceNumbers</Name>
				<Source><![CDATA[
    private void initSequenceNumbers()
    {
        if (!this.SequenceNumber)
        {
            this.SequenceNumber = WHSImplementationProjectTasks::findNextSequenceNumber(this.Project);
        }
        else
        {
            WHSSeqNum nextAvailableSequenceNumber = WHSImplementationProjectTasks::findNextSequenceNumber(this.Project);

            if (this.SequenceNumber != nextAvailableSequenceNumber)
            {
                WHSSeqNum oldSequenceNumber = this.SequenceNumber;
                this.SequenceNumber = nextAvailableSequenceNumber;
            
                if (this.ParentSequenceNumber > 0)
                {
                    this.ParentSequenceNumber = nextAvailableSequenceNumber - (oldSequenceNumber - this.ParentSequenceNumber);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertLabelId2String</Name>
				<Source><![CDATA[
    private str convertLabelId2String(str _labelId)
    {
        str labelIdStr = _labelId;

        if (SysLabel::isLabelId(_labelId))
        {
            labelIdStr = SysLabel::labelId2String(_labelId, SystemParameters::getSystemLanguageId());
        }

        return labelIdStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret && WHSImplementationProjectTasks::existsTaskWithParentSequenceNumber(this.Project, this.SequenceNumber))
        {
            ret = checkFailed(strFmt("@WAX:WarehouseImplementationTaskDeleteTaskValidation", this.Name));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTaskWithParentSequenceNumber</Name>
				<Source><![CDATA[
    private static boolean existsTaskWithParentSequenceNumber(WHSImplementationProjectRecId _project, WHSSeqNum _sequenceNumber)
    {
        return (select firstonly RecId from WHSImplementationProjectTasks
                    where WHSImplementationProjectTasks.Project ==_project
                       && WHSImplementationProjectTasks.ParentSequenceNumber == _sequenceNumber).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemTypeURL</Name>
				<Source><![CDATA[
    private static int menuItemTypeURL()
    {
        return 255;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performProjectLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renders a lookup for project filter selections.
    /// </summary>
    /// <param name = "_lookupControl">The control used as a project filter.</param>
    public static void performProjectLookup(FormControl _lookupControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(WHSImplementationWorkspaceProject), _lookupControl, true);

        Query query = new Query();
        QueryBuildDataSource projectDataSource = query.addDataSource(tablenum(WHSImplementationWorkspaceProject));

        sysTableLookup.addLookupfield(fieldnum(WHSImplementationWorkspaceProject, ImplementationProject));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<Label>@WAX:WarehouseImplementationTasks</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<PrimaryIndex>NameIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Project</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImplementationProjectRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImplementationTaskName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImplementationTaskDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSImplementationTaskStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CompletedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImplementationTaskCompletedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompletedByWorker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImplementationTaskCompletedByWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MenuItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImplementationAction</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MenuItemType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MenuItemType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SequenceNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImplementationTaskSeqNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ParentSequenceNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSImplementationTaskSeqNumber</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Project</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NameSequenceNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SeqNumParentSeqNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParentSequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HCMWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompletedByWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompletedByWorker</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompletedByWorker</Name>
					<Field>CompletedByWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ImplementationProject</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSImplementationWorkspaceProject</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Project</Name>
					<Field>Project</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>