<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTableModule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTableModule extends common
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPriceIncVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inclusive VAT value.
    /// </summary>
    /// <returns>
    /// The calculated VAT value.
    /// </returns>
    /// <remarks>
    /// The <c>calcPriceIncVAT</c> method uses <c>taxCalcWithoutSource</c> method to calculate the tax value.
    /// </remarks>
    RetailPriceInclVAT calcPriceIncVAT()
    {
        Tax                 tax;
        AmountMST           taxTotal;

        tax = new Tax();

        taxTotal = tax.taxCalcWithoutSource(
                            RetailStoreTable::find(RetailSharedParameters::find().LocalStoreId).TaxGroup,
                            this.TaxItemGroupId,
                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                            CompanyInfoHelper::standardCurrency(),
                            this.Price,
                            TaxModuleType::Sales);

        return this.Price + taxTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesPrice</Name>
				<Source><![CDATA[
    public void calcSalesPrice(
        InventTable             _inventTable,
        InventAutoSalesPriceMap _basePrice)
    {
        this.InventAutoSalesPriceMap::calcSalesPrice(_inventTable, _basePrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    public boolean  checkValid()
    {
        if (! this)
        {
            return checkFailed(strFmt("@SYS5700",this.ItemId,this.ModuleType));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a markup amount.
    /// </summary>
    /// <returns>
    /// A markup amount.
    /// </returns>
    display public MarkupAmount  getMarkup()
    {
        return this.InventPriceMap::markup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a price quantity.
    /// </summary>
    /// <returns>
    /// A price quantity.
    /// </returns>
    display public PriceQty getPriceQty()
    {
        return this.InventPriceMap::priceQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a price unit.
    /// </summary>
    /// <returns>
    /// A price unit.
    /// </returns>
    display public PriceUnit  getPriceUnit()
    {
        return this.InventPriceMap::priceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a maximum allowed order quantity, either for sales or inventory or purchase order.
    /// </summary>
    /// <returns>
    ///    A maximum allowed order quantity.
    /// </returns>
    display QtyHighest highestQty()
    {
        return this.inventItemOrderSetup().highestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItemPriceSim</Name>
				<Source><![CDATA[
    public void initFromInventItemPriceSim(InventItemPriceSim _inventItemPriceSim)
    {
        PriceConvertFactory priceConvertFactory = PriceConvertFactory::newItemPriceByInventItemPriceSim(_inventItemPriceSim);

        priceConvertFactory.parmNewUnitId(this.UnitId);
        priceConvertFactory.parmRounding(true);
        priceConvertFactory.parmInventDimId(_inventItemPriceSim.InventDimId);

        PriceConvert priceConvert = priceConvertFactory.priceConvert();

        this.Price          = priceConvert.parmPrice();
        this.PriceUnit      = priceConvert.parmPriceUnit();
        this.Markup         = priceConvert.parmMarkup();
        this.PriceQty       = priceConvert.parmPriceQty();
        this.PriceDate      = _inventItemPriceSim.FromDate;
        this.AllocateMarkup = _inventItemPriceSim.PriceAllocateMarkup;

        // <GEERU>
        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.PriceSecCur_RU  = priceConvert.parmPriceSecCur_RU();
            this.MarkupSecCur_RU = priceConvert.parmMarkupSecCur_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxItemGroupFromItemGrp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the default tax item group based on settings of an item group.
    /// </summary>
    /// <param name="_inventItemGroup">
    ///    The <c>InventItemGroup</c> table buffer.
    /// </param>
    /// <param name="_overrideSet">
    ///    Determines if the <c>TaxItemGroupId</c> field value should be overriden if already set to non-empty value.
    /// </param>
    public void initTaxItemGroupFromItemGrp(InventItemGroup _inventItemGroup, boolean _overrideSet = true)
    {
        if (!_overrideSet && this.TaxItemGroupId)
        {
            return;
        }

        if (TradeModuleType::isApplicableForModule(this.ModuleType))
        {
            TradeModuleType::newFromModule(this.ModuleType).assignTaxItemGroupFromItemGroup(this, _inventItemGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.PriceUnit = 1;

        this.UnitId             = InventParameters::find().DefaultUnitId;
        this.EndDisc            = NoYes::Yes;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.mustUpdatePriceDateOnInsert())
        {
            this.PriceDate= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        ttsbegin;

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdatePriceDateOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the price date must be automatically updated when inserting a
    /// new <c>InventTableModule</c> record.
    /// </summary>
    /// <returns>true if the price date must be updated; otherwise, false.</returns>
    protected boolean mustUpdatePriceDateOnInsert()
    {
        #ISOCountryRegionCodes

        return this.Price || this.Markup
            || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                && ( this.PriceSecCur_RU
                    || this.MarkupSecCur_RU ));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewPrimary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains a price group for items for a specified <c>PriceGroupId</c> value.
    /// </summary>
    /// <param name="_priceGroupType">
    /// A specified <c>_priceGroupType</c> value.
    /// </param>
    /// <param name="_priceGroupId">
    /// A specified <c>PriceGroupId</c> value.
    /// </param>
    void insertNewPrimary(PriceGroupType    _priceGroupType,
                          PriceGroupId      _priceGroupId)
    {
        if (strLTrim(_priceGroupId))
        {
            ttsbegin;
            MCRPriceDiscGroupItem priceDiscGroupItems = MCRPriceDiscGroupItem::findGroupItem(ModuleInventCustVend::Invent,
                                            _priceGroupType,
                                            _priceGroupId,
                                            this.ItemId,
                                            InventDim::inventDimIdBlank(),
                                            true);

            if (TradeModuleType::isApplicableForModule(this.ModuleType))
            {
                // If the item group already exists, change the primary flags based on which module is being assigned.
                TradeModuleType::newFromModule(this.ModuleType).assignPrimaryFlagsForItemPriceGroup(priceDiscGroupItems);
            }

            if (priceDiscGroupItems)
            {
                priceDiscGroupItems.update();
            }
            else  //Insert a new item record to the group.
            {
                priceDiscGroupItems.GroupId        = _priceGroupId;
                priceDiscGroupItems.Module         = ModuleInventCustVend::Invent;
                priceDiscGroupItems.Type           = _priceGroupType;
                priceDiscGroupItems.ItemId         = this.ItemId;
                priceDiscGroupItems.InventDimId    = InventDim::inventDimIdBlank();
                priceDiscGroupItems.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemOrderSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves either the sales or purchase or inventory order settings based on the module type.
    /// </summary>
    /// <returns>
    ///    This matches data from the <c>InventItemPurchSetup</c>, <c>InventItemSalesSetup</c>, or
    ///    <c>InventItemInventSetup</c> tables.
    /// </returns>
    public InventItemOrderSetupMap inventItemOrderSetup()
    {
        InventItemOrderSetupMap inventItemOrderSetupMap;
        inventItemOrderSetupMap = InventItemOrderSetupMap::findDefault(this.ItemId,
                                InventItemOrderSetupMap::module2SetupType(this.ModuleType));
        return inventItemOrderSetupMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a warehouse ID, either for sales or inventory or purchase order.
    /// </summary>
    /// <param name="selectDropShip">
    /// A <c>Boolean</c> value defining whether to search for the drop shipment warehouse or not.
    /// </param>
    /// <returns>
    ///    A warehouse ID.
    /// </returns>
    display InventLocationId inventLocationId(boolean selectDropShip = true)
    {
        MCRInventTable mcrInventTable;

        if (selectDropShip)
        {
            mcrInventTable = this.inventTable().mcrInventTable();
        }

        // If this item is flagged as drop shipment, always use the default drop ship warehouse.
        if (selectDropShip
            && mcrInventTable.DropShipment
            && mcrInventTable.DefaultDropShipmentWarehouse)
        {
            return mcrInventTable.DefaultDropShipmentWarehouse;
        }
        return this.inventItemOrderSetup().inventLocationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects a drop shipment site.
    /// </summary>
    /// <param name="inventSiteId">
    /// A default drop shipment <c>InventSiteId</c> value.
    /// </param>
    /// <param name="selectDropShip">
    /// A <c>boolean</c> value indicates, if the default drop ship warehouse should be returned.
    /// </param>
    /// <returns>
    /// A drop shipment site.
    /// </returns>
    public InventSiteId inventSiteId(InventSiteId inventSiteId = '', boolean selectDropShip = true)
    {
        MCRInventTable mcrInventTable = this.inventTable().mcrInventTable();
        //If this item is flagged as drop shipment, always use the default drop ship warehouse.
        if ( mcrInventTable.DropShipment
            && mcrInventTable.DefaultDropShipmentWarehouse
            && !inventSiteId
            && selectDropShip)
        {
            return InventLocation::find(mcrInventTable.DefaultDropShipmentWarehouse).InventSiteId;
        }

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable()
    {
        InventTable     inventTable;

        if (FormDataUtil::isFormDataSource(this))
        {
            inventTable = this.joinedTable(inventTable) as InventTable;
            if (inventTable && inventTable.ItemId == this.ItemId)
            {
                return inventTable;
            }
        }

        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinedTable</Name>
				<Source><![CDATA[
    public Common joinedTable(Common   _buffer)
    {
        Common      joinBuffer;

        joinBuffer = this.joinParent();
        do
        {
            if (joinBuffer.TableId == _buffer.TableId)
            {
                return joinBuffer;
            }
            joinBuffer = joinBuffer.joinParent();
        }
        while (joinBuffer);

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a lead time either for sales, inventory, or purchase in days.
    /// </summary>
    /// <returns>
    ///    A lead time in days.
    /// </returns>
    display LeadTimeDelivery leadTime()
    {
        return this.inventItemOrderSetup().leadTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a minimum allowed order quantity, either for sales or inventory or purchase order.
    /// </summary>
    /// <returns>
    ///    A minimum allowed order quantity.
    /// </returns>
    display QtyLowest lowestQty()
    {
        return this.inventItemOrderSetup().lowestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatoryInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a mandatory warehouse exists  for either sales, inventory, or a purchase order.
    /// </summary>
    /// <returns>
    ///    true if the mandatory warehouse exists; otherwise, false.
    /// </returns>
    display boolean mandatoryInventLocation()
    {
        return this.inventItemOrderSetup().MandatoryInventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markup</Name>
				<Source><![CDATA[
    public MarkupAmount  markup()
    {
        return this.InventPriceMap::markup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupSecCur_RU</Name>
				<Source><![CDATA[
    public MarkupAmount markupSecCur_RU()
    {
        return this.InventPriceMap::markupSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets max retail price.
    /// </summary>
    /// <returns>
    /// The instance of the <c>Price</c> class.
    /// </returns>
    public Price maxRetailPrice_IN()
    {
        return this.MaximumRetailPrice_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDeletePurchLineGrp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>MCRPriceDiscGroupItem</c> record retrieved based on the passed
    /// <c>PriceGroupType</c> and this record.
    /// </summary>
    /// <param name="_priceGroupType">
    /// The <c>PriceGroupType</c> of the purchase line used to find the appropriate
    /// <c>MCRPriceDiscGroupItem</c> record.
    /// </param>
    public void mcrDeletePurchLineGrp(PriceGroupType    _priceGroupType)
    {
        MCRPriceDiscGroupItem  mcrPriceDiscGroupItemSales;
        MCRPriceDiscGroupItem  mcrPriceDiscGroupItemPurch;

        mcrPriceDiscGroupItemSales = MCRPriceDiscGroupItem::findPrimarySales(ModuleInventCustVend::Invent,
                                                                            _priceGroupType,
                                                                            this.ItemId);
        ttsbegin;
        mcrPriceDiscGroupItemPurch = MCRPriceDiscGroupItem::findPrimaryPurch(ModuleInventCustVend::Invent,
                                                                            _priceGroupType,
                                                                            this.ItemId,
                                                                            InventDim::inventDimIdBlank(),
                                                                            true);

        // If the primary purch group is also the primary sales group, change the
        // primary purch flag to false.
        if (mcrPriceDiscGroupItemSales.GroupId == mcrPriceDiscGroupItemPurch.GroupId
            && mcrPriceDiscGroupItemSales.GroupId != '')
        {
            mcrPriceDiscGroupItemPurch.PrimaryPurchGroup = false;
            mcrPriceDiscGroupItemPurch.update();
        }
        //If the primary purch group is not the primary sales group, delete the item
        // from the group list.
        else
        {
            if (mcrPriceDiscGroupItemPurch.validateDelete())
            {
                mcrPriceDiscGroupItemPurch.delete();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDeleteSalesLineGrp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the <c>MCRPriceDiscGroupItem</c> record related to sales module for the specified item and price group type.
    /// </summary>
    /// <param name = "_priceGroupType">Price group type.</param>
    public void mcrDeleteSalesLineGrp(PriceGroupType    _priceGroupType)
    {
        MCRPriceDiscGroupItem  mcrPriceDiscGroupItemPurch;
        MCRPriceDiscGroupItem  mcrPriceDiscGroupItemSales;

        mcrPriceDiscGroupItemPurch = MCRPriceDiscGroupItem::findPrimaryPurch(ModuleInventCustVend::Invent,
                                                                            _priceGroupType,
                                                                            this.ItemId);
        ttsbegin;
        mcrPriceDiscGroupItemSales = MCRPriceDiscGroupItem::findPrimarySales(ModuleInventCustVend::Invent,
                                                                            _priceGroupType,
                                                                            this.ItemId,
                                                                            InventDim::inventDimIdBlank(),
                                                                            true);

        //If the primary sales group is also the primary purchase group, change the
        // primary sales flag to false.
        if (mcrPriceDiscGroupItemPurch.GroupId == mcrPriceDiscGroupItemSales.GroupId
            && mcrPriceDiscGroupItemPurch.GroupId != '')
        {
            mcrPriceDiscGroupItemSales.PrimarySalesGroup = false;

            if (mcrPriceDiscGroupItemSales.validateWrite())
            {
                mcrPriceDiscGroupItemSales.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        //If the primary sales group is not the primary Purchase group, delete the item
        // from the group list.
        else
        {
            if (mcrPriceDiscGroupItemSales.validateDelete())
            {
                mcrPriceDiscGroupItemSales.delete();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory location ID of the current record.
    /// </summary>
    /// <param name="_inventLocation">
    /// The inventory location ID to return if specified; optional.
    /// </param>
    /// <param name="_selectDropShip">
    /// A boolean that determines whether to select drop ship records.
    /// </param>
    /// <returns>
    /// The devault drop shipment warehouse if the inventory location parameter is null;
    /// otherwise, the <c>inventoryLocationID</c> passed in.
    /// </returns>
    public InventLocationId mcrInventLocationId(InventLocationId _inventLocation = '', boolean _selectDropShip = true)
    {
        MCRInventTable mcrInventTable = this.inventTable().mcrInventTable();

        //If this item is flagged as drop shipment, always use the default drop ship warehouse.
        if ( mcrInventTable.DropShipment
            && mcrInventTable.DefaultDropShipmentWarehouse
            && !_inventLocation
            && _selectDropShip)
        {
            return mcrInventTable.DefaultDropShipmentWarehouse;
        }

        return _inventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHandleLineDiscountChange</Name>
				<Source><![CDATA[
    private void mcrHandleLineDiscountChange()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            if (this.LineDisc != this.orig().LineDisc)
            {
                if (TradeModuleType::isApplicableForModule(this.ModuleType))
                {
                    TradeModuleType::newFromModule(this.ModuleType).deleteOldPrimaryModuleTypeGroup(this);
                }

                //Select to see if item is already on the group.
                this.insertNewPrimary(PriceGroupType::LineDiscGroup, this.LineDisc);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an order quantity multiplier, either for sales, inventory, or purchase order.
    /// </summary>
    /// <returns>
    ///    An order quantity multiplier.
    /// </returns>
    display Qty multipleQty()
    {
        return this.inventItemOrderSetup().multipleQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
    public Price  pcsPrice()
    {
        return this.InventPriceMap::pcsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPriceSecCur_RU</Name>
				<Source><![CDATA[
    public Price pcsPriceSecCur_RU()
    {
        return this.InventPriceMap::pcsPriceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>price</Name>
				<Source><![CDATA[
    public Price price()
    {
        return this.InventPriceMap::price();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceQty</Name>
				<Source><![CDATA[
    public PriceQty priceQty()
    {
        return this.InventPriceMap::priceQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceSecCur_RU</Name>
				<Source><![CDATA[
    public PriceSecCur_RU priceSecCur_RU()
    {
        return this.InventPriceMap::priceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    public PriceUnit  priceUnit()
    {
        return this.InventPriceMap::priceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws the error while renaming the record if the distribution type is other than <c>NoDistribution</c>.
    /// </summary>
    /// <remarks>
    /// The <c>errorOnRename</c> method of <c>RetailConnActionManagement</c> is called.
    /// </remarks>
    public void renamePrimaryKey()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailConnActionManagement::errorOnRename(this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a standard order quantity, either for sales or inventory or purchase order.
    /// </summary>
    /// <returns>
    ///    A standard order quantity.
    /// </returns>
    display QtyStandard standardQty()
    {
        return this.inventItemOrderSetup().standardQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopped</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a sales, inventory, or purchase order type is on hold for transactions.
    /// </summary>
    /// <returns>
    ///    true if the item is on hold for transactions; otherwise, false.
    /// </returns>
    display boolean stopped()
    {
        return this.inventItemOrderSetup().stopped();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _updatePriceDate = true, boolean _updatePrice = true)
    {
        boolean updPrice = _updatePrice && this.mustUpdatePrice();

        if (updPrice && _updatePriceDate)
        {
            this.PriceDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        ttsbegin;

        this.mcrHandleLineDiscountChange();

        super();

        if (updPrice)
        {
            this.performPriceUpdate();
        }

        ttscommit;

        SalesPurchLineInterface::flushPriceDiscCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdatePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales price should be updated.
    /// </summary>
    /// <returns>
    /// true if the price must be updated; otherwise, false.
    /// </returns>
    protected boolean mustUpdatePrice()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        return ((  this.orig().Price    != this.Price
               ||  this.orig().Markup   != this.Markup
                // <GEERU>
               ||  (countryRegion_RU
                    && (this.orig().PriceSecCur_RU  != this.PriceSecCur_RU
                    ||  this.orig().MarkupSecCur_RU != this.MarkupSecCur_RU))
                // </GEERU>
               ||  this.orig().PriceUnit   != this.PriceUnit
               ||  this.orig().UnitId      != this.UnitId)
            &&  !SysRecordTemplate::isTemplateEditFormRecord(this)); // Do not update prices when editing a template as it would update real records.
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPriceUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the sales price update.
    /// </summary>
    protected void performPriceUpdate()
    {
        FormRun             formRun;
        FormObjectSet       formObjSet;
        int                 i;
        InventTable         inventTable;

        if (this.ModuleType != ModuleInventPurchSales::Sales)
        {
            InventTable::updateAutoSalesPrice(this.ItemId, this.PriceDate);
        }
        else
        {
            if (FormDataUtil::isFormDataSource(this))
            {
                RetailLabelUtils    labelUtils = new RetailLabelUtils();

                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    labelUtils.markLabelGeneration(this.ItemId);
                }

                // refresh and reread inventTable datasource if exists in form
                formRun = FormDataUtil::getFormDataSource(this).formRun();
                for (i=1; i<= formRun.dataSourceCount(); i++)
                {
                    if (formRun.dataSource(i).cursor() is InventTable)
                    {
                        formObjSet = formRun.dataSource(i);
                        inventTable = formObjSet.cursor() as InventTable;
                        break;
                    }
                }
                if (!inventTable)
                {
                    inventTable = InventTable::find(this.ItemId, true);
                }
                if (inventTable)
                {
                    if (inventTable.updateAutoSalesPercent() && formObjSet)
                    {
                        formObjSet.refresh();
                        formObjSet.reread();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a sales unit price.
    /// </summary>
    /// <param name="_inventTable">
    /// A specified <c>InventTable</c> buffer that contains the parameters for how to calculate the sales price.
    /// </param>
    /// <param name="_inventTableModule">
    /// A specified <c>InventTable</c> buffer that contains the base price that is used as a basis for the calculation of the new sales price.
    /// </param>
    /// <param name="_unitPrice">
    /// A specifeid unit price.
    /// </param>
    /// <returns>
    /// Updated sales unit price.
    /// </returns>
    public Price updateSalesPrice(
        InventTable             _inventTable,
        InventAutoSalesPriceMap _inventTableModule,
        Price                   _unitPrice)
    {
        return this.InventAutoSalesPriceMap::updateSalesPrice(_inventTable, _inventTableModule, _unitPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        FieldName   _fieldName,
        int         _arrayIndex = 1)
    {
        #ISOCountryRegionCodes

        boolean     ret = super(_fieldName, _arrayIndex);

        //perform validation only if changing real record (not template)
        //we cannot validate when editing template because we need real InventTable record to do that
        if (!SysRecordTemplate::isTemplateEditFormRecord(this))
        {
            switch (_fieldName)
            {
                case fieldStr(InventTableModule,UnitId):
                    // A similar validation is done also from a UnitOfMeasure perspective. 
                    // If additional checks are added here, please consider also adding them to UnitOfMeasureFieldValidationHandler_SCM
                    ret = this.validateUnitChange();
                    break;

                case fieldStr(InventTableModule,TaxWithholdCalculate_TH):
                    // <GTH>
                    if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
                    {
                        return true;
                    }
                    // </GTH>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA])
                        && this.TaxWithholdCalculate_TH == true
                        && InventTable::find(this.ItemId).ItemType != ItemType::Service)
                    {
                        return checkFailed("@SYS328665");
                    }
                    break;
            }
        }

        ret = ret && this.validateCrossCompany(tableMethodStr(InventTableModule, validateFieldValue), _fieldName);
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateCrossCompany(str _methodName, FieldName _fieldName = '')
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
                QueryRun    queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    InventTableModule companyInventTableModule = queryRun.get(this.TableId);
                    DataAreaId company = companyInventTableModule.DataAreaId;

                    if (companyInventTableModule && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            InventTableModule inventTableModule = InventTableModule::find(companyInventTableModule.ItemId, this.ModuleType, true);
                            if (inventTableModule.RecId)
                            {
                                buf2Buf(this, inventTableModule);

                                switch (_methodName)
                                {
                                    case tableMethodStr(InventTableModule, validateWrite):
                                        if (!inventTableModule.validateItemTaxGroup())
                                        {
                                            return false;
                                        }
                                        break;

                                    case tableMethodStr(InventTableModule, validateFieldValue):
                                        if (_fieldName == fieldStr(InventTableModule, UnitId)
                                            && !inventTableModule.validateUnitChange())
                                        {
                                            return false;
                                        }
                                        break;

                                    default:
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExcludeValidateField_SysRecordTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Excludes the validation of specific fields when applying item templates.
    /// </summary>
    /// <param name = "_exclusion">The set of excluded fields.</param>
    /// <param name = "_common">The active buffer.</param>
    [SubscribesTo(classstr(SysRecordTemplate), delegatestr(SysRecordTemplate, onExcludeValidateField))]
    public static void onExcludeValidateField_SysRecordTemplate(Set _exclusion, common _common)
    {
        if (_common.TableId == tableNum(InventTableModule)
            && !_exclusion.in(fieldnum(InventTableModule, UnitId)))
        {
            // Exclude the validation of unit ID field for product master without transactions nor cost prices
            // when the product master has unit of measure per variant enabled
            InventTableModule inventTableModule = _common;
            if (EcoResProductUnitConverter::isProductMasterWithProductVariantConversionEnabled(inventTableModule.ItemId)
               && !InventTrans::transactionsExist(inventTableModule.ItemId)
               && !InventItemPrice::costPricesExistForItem(inventTableModule.ItemId))
            {
                _exclusion.add(fieldnum(InventTableModule, UnitId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the table buffer before it is written.
    /// </summary>
    /// <returns>
    ///    false if the item sales tax group for purchase or sales order fields is not populated, meaning a
    ///    user requires mandatory item tax group; otherwise, true.
    /// </returns>
    public boolean validateWrite()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        InventBaileeCalcSetup_RU inventBaileeCalcSetup;
        // </GEERU>

        boolean ret = true;

        ret = this.validatePriceIsNotNegative() && ret;

        if (PdsGlobal::pdsIsCWItem(this.ItemId)
            && this.ModuleType == ModuleInventPurchSales::Invent
            && !this.isTmp()  //do not do catch-weight check on template buffers, as PDSCatchWeightItem datasource is disabled for templates
            && this.orig()
            && this.orig().UnitId != this.UnitId
            && PdsCatchWeight::cwUnitId(this.ItemId))
        {
            ret = checkFailed("@PDS185");
        }
        ret = super() && ret;

        if (ret)
        {
            ret = this.validateItemTaxGroup();

            if (this.TaxWithholdCalculate_TH && this.TaxWithholdItemGroupHeading_TH == 0)
            {
                ret = checkFailed("@SYS328931");
            }
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.ModuleType == ModuleInventPurchSales::Invent &&
                this.orig() &&
                this.orig().UnitId != this.UnitId)
            {
                select firstonly inventBaileeCalcSetup
                    where inventBaileeCalcSetup.CalcItemId == this.ItemId;
                if (inventBaileeCalcSetup)
                {
                    ret = checkFailed("@GLS115700");
                }
            }
        }
        // </GEERU>
        
        ret = ret && this.validateCrossCompany(tableMethodStr(InventTableModule, validateWrite));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemTaxGroup</Name>
				<Source><![CDATA[
    private boolean validateItemTaxGroup()
    {
        boolean ret = true;

        if (!this.TaxItemGroupId
                && TradeModuleType::isApplicableForModule(this.ModuleType)
                && InventParameters::find().MandatoryItemTaxGroup)
        {
            ret = checkFailed("@SYS113293");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceIsNotNegative</Name>
				<Source><![CDATA[
    private boolean validatePriceIsNotNegative()
    {
        boolean ret = true;

        if (this.Price < 0 || this.PriceQty < 0 || this.PriceUnit < 0)
        {
            ret = checkFailed(strFmt(
                "@CostManagement:InventItemPriceSim_PriceMustNotBeNegative",
                strFmt(
                    '%1, %2, %3',
                    new SysDictField(tableNum(InventTableModule), fieldNum(InventTableModule, Price)).label(),
                    new SysDictField(tableNum(InventTableModule), fieldNum(InventTableModule, PriceUnit)).label(),
                    new SysDictField(tableNum(InventTableModule), fieldNum(InventTableModule, PriceQty)).label())));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        ItemId                  _itemId,
        ModuleInventPurchSales  _moduleType)
    {
        return _itemId && (select inventTableModule
                    where inventTableModule.ItemId      == _itemId
                       && inventTableModule.ModuleType  == _moduleType
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBasedOnSalesPriceModelBasic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an <c>InventTableModule</c> record based on the specified <c>SalesPriceModelBasic</c> and <c>ItemId</c>.
    /// </summary>
    /// <param name = "_salesPriceModelBasic">Used to determine the module type which is used to find the record.</param>
    /// <param name = "_itemId">The <c>ItemId</c> used to find the <c>InventTableModule</c> record</param>
    /// <returns>The <c>InventTableModule</c> record</returns>
    public static InventTableModule findBasedOnSalesPriceModelBasic(
        ItemId                  _itemId,
        SalesPriceModelBasic    _salesPriceModelBasic)
    {
        InventTableModule  inventTableModule;

        switch (_salesPriceModelBasic)
        {
            case SalesPriceModelBasic::PurchPrice:
                inventTableModule = InventTableModule::find(_itemId, ModuleInventPurchSales::Purch);
                break;

            case SalesPriceModelBasic::CostPrice:
                inventTableModule = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent);
                break;
        }

        return inventTableModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static InventTableModule find(
        ItemId                      _itemId,
        ModuleInventPurchSales      _moduleType,
        boolean                     _forUpdate = false)
    {
        InventTableModule  inventTableModule;

        if (_forUpdate)
        {
            inventTableModule.selectForUpdate(_forUpdate);
            inventTableModule.selectLocked(_forUpdate);
        }

        if (_itemId)
        {
            select firstonly inventTableModule
                where inventTableModule.ItemId      == _itemId
                   && inventTableModule.ModuleType  == _moduleType;
        }

        return inventTableModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitIdByModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default unit setup for the item specific to a module - Purchase, Sales, Inventory.
    /// </summary>
    /// <param name = "_itemId">Unique identifier for the item.</param>
    /// <param name = "_moduleType">Module for which default unit of the item will be retrieved.</param>
    /// <returns>Unique identifier of the unit.</returns>
    [Hookable(false)]
    public static UnitOfMeasureSymbol getUnitIdByModuleType(
        ItemId                      _itemId,
        ModuleInventPurchSales      _moduleType)
    {
        InventTableModule  inventTableModule;

        if (_itemId)
        {
            select firstonly UnitId from
                inventTableModule
                where inventTableModule.ItemId == _itemId
                   && inventTableModule.ModuleType == _moduleType;
        }

        return inventTableModule.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdFromTradeAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates <c>InventTableModule</c> precision value.
    /// </summary>
    /// <param name="_itemId">
    ///     The <c>ItemId</c> for which to update the precision value.
    /// </param>
    /// <param name="_module">
    ///     The module for which to update the precision value; optional.
    /// </param>
    public static void pdsUpdFromTradeAgreement(
        ItemId                  _itemId,
        ModuleInventPurchSales  _module = ModuleInventPurchSales::Purch)
    {
        InventTableModule   inventTableModule;
        #define.maximumPrecision(5)

        if (_itemId)
        {
            ttsbegin;
            update_recordSet inventTableModule
                setting PDSPricingPrecision                     =  #maximumPrecision
                where   inventTableModule.ItemId                == _itemId
                    &&  inventTableModule.ModuleType            == _module
                    &&  inventTableModule.PDSPricingPrecision   == 0;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvert</Name>
				<Source><![CDATA[
    public static Qty  unitConvert(
        ItemId                  _itemId,
        ModuleInventPurchSales  _module,
        UnitOfMeasureSymbol     _unitFrom,
        Qty                     _valueFrom = 1,
        InventDimId             _inventDimId = '')
    {
        UnitOfMeasureSymbol unitInvent;
        UnitOfMeasureSymbol unitTo;

        unitTo = InventTableModule::find(_itemId, _module).UnitId;

        if (_unitFrom != unitTo)
        {
            unitInvent  = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;
            return InventTable::unitConvert(_itemId, _unitFrom, unitTo, unitInvent, _valueFrom, _inventDimId);
        }
        return _valueFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDisableStockedOnlyFields</Name>
				<Source><![CDATA[
    private boolean mustDisableStockedOnlyFields(EcoResIReleasedProductCrossTableData _crossTableData = EcoResProductCrossTableManager::crossTableData(this))
    {
        if (this.ModuleType != ModuleInventPurchSales::Invent)
        {
            return false;
        }

        return EcoResProductCrossTableManager::mustDisableStockedOnlyFields(this.ItemId, this.DataAreaId, _crossTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventStockedOnlyFields</Name>
				<Source><![CDATA[
    public static container inventStockedOnlyFields()
    {
        return [fieldNum(InventTableModule, OverDeliveryPct),
                fieldNum(InventTableModule, UnderDeliveryPct)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdItemGroup_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits <c>TaxWithholdItemGroup_TH</c> field.
    /// </summary>
    /// <param name = "_set">True to set.</param>
    /// <param name = "_taxWithholdItemGroup_TH">The <c>TaxWithholdItemGroup_TH</c> field value.</param>
    /// <returns>The <c>TaxWithholdItemGroup_TH</c> field value.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit TaxWithholdItemGroup_TH taxWithholdItemGroup_TH(boolean _set, TaxWithholdItemGroup_TH _taxWithholdItemGroup_TH)
    {
        if (_set)
        {
            this.TaxWithholdItemGroupHeading_TH = TaxWithholdItemGroupHeading_TH::findByTaxWithholdItemGroup(_taxWithholdItemGroup_TH).RecId;
        }

        return TaxWithholdItemGroupHeading_TH::find(this.TaxWithholdItemGroupHeading_TH).TaxWithholdItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;
        super();
        TaxBusinessService::deleteTaxIdentificationDimension(this.TableId, this.RecId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current item's unit change.
    /// </summary>
    /// <returns>true if the unit change is valid with proper unit conversions; otherwise, false.</returns>
    private boolean validateUnitChange()
    {
        UnitOfMeasureSymbol origUnitId = this.orig().UnitId;

        if (this.UnitId != origUnitId)
        {
            InventTable inventTable = this.inventTable();

            if (this.ModuleType == ModuleInventPurchSales::Invent)
            {
                if (InventTrans::transactionsExist(this.ItemId))
                {
                    return checkFailed(strFmt("@SYS120463",this.ItemId));
                }

                if (WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled() && WHSInventReserve::itemHasAnyOnHandChanges(this.ItemId))
                {
                    return checkFailed(strFmt("@WHSInventory:InventTableModule_ValidateUnitChange_TransactionExists", this.ItemId));
                }

                if (InventItemPrice::costPricesExistForItem(this.ItemId))
                {
                    return checkFailed(strFmt("@SYS126703",this.ItemId));
                }

                if (EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
                {
                    UnitOfMeasureSymbol purchUnit = this.findUnitIdBasedOnModule(ModuleInventPurchSales::Purch);
                    UnitOfMeasureSymbol salesUnit = this.findUnitIdBasedOnModule(ModuleInventPurchSales::Sales);

                    return inventTable.mustValidateProductVariantsConversion(this.UnitId, purchUnit, salesUnit);
                }

                return this.validateSequenceGroupForItem();
            }
            else if (EcoResProductUnitConverter::isProductMasterWithProductVariantConversionEnabled(this.ItemId))
            {
                UnitOfMeasureSymbol inventUnit = this.findUnitIdBasedOnModule(ModuleInventPurchSales::Invent);

                if (inventUnit
                    && this.UnitId != inventUnit
                    && !EcoResProductUnitConverter::existConversionForProductMaster(this.UnitId, inventUnit, inventTable.Product))
                {
                    return checkFailed(strFmt("@SYS28690", this.UnitId, inventUnit));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSequenceGroupForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a unit of measure sequence group is valid for an item.
    /// </summary>
    /// <returns>true if the unit of measure sequence group is valid for the item; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean validateSequenceGroupForItem()
    {
        boolean ret = true;

        if (this.ModuleType == ModuleInventPurchSales::Invent)
        {
            WHSInventTable whsInventTable = WHSInventTable::find(this.ItemId);

            if (whsInventTable && whsInventTable.uomSeqGroupId)
            {
                WHSUOMSeqGroupLine  seqGroupLine = WHSUOMSeqGroupTable::lowestUnitSequenceLine(whsInventTable.uomSeqGroupId);
        
                if (!seqGroupLine)
                {
                    ret = checkFailed("@WAX351");
                }
                else
                {
                    if (this.UnitId != seqGroupLine.UnitId)
                    {
                        ret = checkFailed("@WAX352");
                    }            
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnitIdBasedOnModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the unit of measure record based on the current item and specified module.
    /// </summary>
    /// <param name = "_moduleInventPurchSales">The module of the desired unit of measure.</param>
    /// <returns>The corresponding unit of measure.</returns>
    private UnitOfMeasureSymbol findUnitIdBasedOnModule(ModuleInventPurchSales _moduleInventPurchSales)
    {
        InventTableModule inventTableModule;

        select firstonly UnitID from inventTableModule
            where inventTableModule.ItemId     == this.ItemId
               && inventTableModule.ModuleType == _moduleInventPurchSales;

        return inventTableModule.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingTableFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a set of fields that cannot be shared when the <c>InventTableModule</c> table is shared.
    /// </summary>
    /// <returns>
    /// The <c>Set</c> of fields.
    /// </returns>
    [Hookable(false)]
    internal static Set unsupportedDataSharingTableFieldSet()
    {
        Set sharingSet = new Set(Types::String);

        // Country specific fields
        sharingSet.add(fieldstr(InventTableModule, MarkupSecCur_RU));
        sharingSet.add(fieldstr(InventTableModule, MaximumRetailPrice_IN));
        sharingSet.add(fieldstr(InventTableModule, PriceSecCur_RU));
        sharingSet.add(fieldstr(InventTableModule, TaxWithholdCalculate_TH));
        sharingSet.add(fieldstr(InventTableModule, TaxWithholdItemGroupHeading_TH));
        sharingSet.add(fieldstr(InventTableModule, TaxGSTReliefCategory_MY));

        return sharingSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingCountryRegions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static container unsupportedDataSharingCountryRegions()
    {
        #ISOCountryRegionCodes

        return [#isoRU, #isoIN, #isoMY, #isoTH];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123848</DeveloperDocumentation>
	<FormRef>EcoResProductDetailsExtended</FormRef>
	<Label>@SYS27987</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>ModuleType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ItemModuleIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Single</DataSharingType>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>ItemModuleIdx</PrimaryIndex>
	<ReplacementKey>ItemModuleIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BasePrice</Name>
			<Label>@SYS12983</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumRetailPrice_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostBasePrice</Name>
			<Label>@SYS12983</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumRetailPrice_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryPercent</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnderDeliveryPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS115268</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuppItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyBlocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRItemCancellation</Name>
			<Label>@MCR22947</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscCharges</Name>
			<Label>@SYS8371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscellaneousCharges</Name>
			<Label>@SYS116804</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocateMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscellaneousChargesInvent</Name>
			<Label>@SYS116804</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocateMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Module</Name>
			<Label>@SYS9941</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPotency</Name>
			<Label>@PSC61</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSPricingPrecision</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Prices</Name>
			<Label>@SYS12983</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumRetailPrice_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocateMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PriceUpdate</Name>
			<Label>@SYS25118</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS14578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SecondaryCost_RU</Name>
			<Label>@GLS102435</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceSecCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnderDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyBlocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SetupModule</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnderDeliveryPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyBlocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SupplementaryItem</Name>
			<Label>@SYS58240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SuppItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Taxation</Name>
			<Label>@SYS300191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCalculate_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailInventory</Name>
			<Label>@RetailInventory:CommerceInventory</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailInventoryAvailabilityBuffer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailInventoryAvailabilityLevelProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllocateMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceAllocateMarkup</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PriceDisc</ConfigurationKey>
			<Label>@Sys6465</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyBlocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyBlocked</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLineDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Markup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventMarkupGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarkupSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceMarkupSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ModuleInventPurchSales</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MultiLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventMultiLineDiscCode</ExtendedDataType>
			<Label>@Sys11440</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OverDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PDSPricingPrecision</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSPricingPrecision</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PriceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceMarkupQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPriceSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceUnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SuppItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSuppItemGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWithholdCalculate_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdCalculate_TH</ExtendedDataType>
			<FeatureClass>TaxWithholdingGlobalItemGroupToggle</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdItemGroupId_TH</ExtendedDataType>
			<FeatureClass>TaxWithholdingGlobalItemGroupToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnderDeliveryPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnderDeliveryPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxGSTReliefCategory_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGSTReliefCategoryRecId_MY</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmptyString</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<StringSize>0</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetailInventoryAvailabilityBuffer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInventoryBuffer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailInventoryAvailabilityLevelProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInventoryLevelProfileId</ExtendedDataType>
			<HelpText>@RetailInventory:InventoryLevelProfileHelpText</HelpText>
			<Label>@RetailInventory:InventoryLevelProfile</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemModuleIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdItemGroupHeading_THIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineDiscIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LineDisc</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventAutoSalesPriceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>EmptyString</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>Markup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupSecCur_RU</MapField>
					<MapFieldTo>MarkupSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>Price</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceQty</MapField>
					<MapFieldTo>PriceQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceSecCur_RU</MapField>
					<MapFieldTo>PriceSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitID</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventPriceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>Price</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>Markup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceQty</MapField>
					<MapFieldTo>PriceQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceDate</MapField>
					<MapFieldTo>PriceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AllocateMarkup</MapField>
					<MapFieldTo>AllocateMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceCalcId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaximumRetailPrice_IN</MapField>
					<MapFieldTo>MaximumRetailPrice_IN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceSecCur_RU</MapField>
					<MapFieldTo>PriceSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupSecCur_RU</MapField>
					<MapFieldTo>MarkupSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>InventLineDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLineDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTableModule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineDisc</Name>
					<SourceEDT>InventLineDiscCode</SourceEDT>
					<Field>LineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>InventLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::LineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>InventLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Invent</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventMarkupGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MarkupGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventMarkupGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTableModule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupGroupId</Name>
					<SourceEDT>InventMarkupGroupId</SourceEDT>
					<Field>MarkupGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>InventMarkupGroupId</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>MarkupModuleType::Invent</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventMultiLineDiscountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventMultiLineDiscountGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTableModule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MultiLineDisc</Name>
					<SourceEDT>InventMultiLineDiscCode</SourceEDT>
					<Field>MultiLineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>InventMultiLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::MultiLineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>InventMultiLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Invent</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSuppItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SuppItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventSuppItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTableModule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SuppItemGroupId</Name>
					<SourceEDT>InventSuppItemGroupId</SourceEDT>
					<Field>SuppItemGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>InventSuppItemGroupId</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Invent</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableModule</Name>
			<EntityRelationshipRole>@SYS123849</EntityRelationshipRole>
			<RelatedTable>InventTableModule</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<RelatedField>ModuleType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdParmReportFinished</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>ProdParmReportFinished</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupId</Name>
					<Field>TaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdItemGroupHeading_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdItemGroupHeading_TH</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdItemGroupHeading_TH_InventTableModule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdItemGroupHeading_TH</Name>
					<Field>TaxWithholdItemGroupHeading_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGSTReliefCategory_MY</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxGSTReliefCategory_MY</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGSTReliefCategory_MY</Name>
					<Field>TaxGSTReliefCategory_MY</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailInventoryLevelProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailInventoryLevelProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailInventoryAvailabilityLevelProfile</Name>
					<Field>RetailInventoryAvailabilityLevelProfile</Field>
					<RelatedField>ProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>