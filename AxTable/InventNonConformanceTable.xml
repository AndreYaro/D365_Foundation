<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventNonConformanceTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventNonConformanceTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approvedBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current approver of the nonconformance.
    /// </summary>
    /// <returns>
    ///    The current approver if the nonconformance is approved; otherwise, zero.
    /// </returns>
    display InventNonConformanceApprovedByWorker approvedBy()
    {
        InventNonConformanceHistory inventNonConformanceHistory;
        HcmWorker                   hcmWorker;

        if (this.InventNonConformanceApproval != InventNonConformanceApproval::Approved)
        {
            return '';
        }

        select firstonly PersonnelNumber from hcmWorker
            join RecId from inventNonConformanceHistory
            order by CreatedDateTime desc
                where inventNonConformanceHistory.InventNonConformanceID            == this.InventNonConformanceID
                   && inventNonConformanceHistory.InventNonConformanceHistoryType   == InventNonConformanceHistoryType::Approved
                   && inventNonConformanceHistory.Worker                            == hcmWorker.RecId;

        return hcmWorker.PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvedByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the worker name of the current approver of the nonconformance.
    /// </summary>
    /// <returns>
    ///    The worker name of the current approver if the nonconformance is approved; otherwise, an empty
    ///    string.
    /// </returns>
    display ApprovedByName approvedByName()
    {
        HcmPersonnelNumberId approvedBy = this.approvedBy();

        if (!approvedBy)
        {
            return '';
        }

        return HcmWorker::findByPersonnelNumber(approvedBy).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all reference fields.
    /// </summary>
    public void clearAllReferences()
    {
        if (!InventProblemTypeSetup::exist(this.InventTestProblemTypeId, this.InventNonConformanceType))
        {
            this.InventTestProblemTypeId = '';
        }

        this.VendAccount        = '';
        this.CustAccount        = '';
        this.InventRefId        = '';
        this.InventTransIdRef   = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>closedBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the personnel number of the worker who closed the nonconformance.
    /// </summary>
    /// <returns>
    ///    The latest closer if the nonconformance is closed; otherwise, zero.
    /// </returns>

    public InventNonConformanceClosedByWorker closedBy()
    {
        InventNonConformanceHistory inventNonConformanceHistory;
        HcmWorker                   hcmWorker;

        if (!this.Closed)
        {
            return '';
        }

        select firstonly PersonnelNumber from hcmWorker
            join RecId from inventNonConformanceHistory
                order by CreatedDateTime desc
                where inventNonConformanceHistory.InventNonConformanceID            == this.InventNonConformanceID
                   && inventNonConformanceHistory.InventNonConformanceHistoryType   == InventNonConformanceHistoryType::Closed
                   && inventNonConformanceHistory.Worker                            == hcmWorker.RecId;

        return hcmWorker.PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether corrections have been made for the nonconformance.
    /// </summary>
    /// <returns>
    /// true if corrections exist; otherwise, false.
    /// </returns>
    public boolean correctionsExist()
    {
        InventTestCorrection    inventTestCorrection;

        select firstonly RecId from inventTestCorrection
            where inventTestCorrection.InventNonConformanceID   == this.InventNonConformanceID;

        return inventTestCorrection.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the combined cost amount of related operations.
    /// </summary>
    /// <returns>
    ///    The combined cost amount.
    /// </returns>
    display CostAmount costAmount()
    {
        InventTestOperationItems        inventTestOperationItems;
        InventTestOperationMiscCharges  inventTestOperationMiscCharges;
        InventTestOperationTimeSheet    inventTestOperationTimeSheet;

        //Check if user has security access
        if (!hasFieldAccess( tableNum(InventTestOperationItems),
                             fieldNum(InventTestOperationItems, CostAmount),
                             AccessType::View))
        {
            return 0;
        }

        if (!hasFieldAccess( tableNum(InventTestOperationMiscCharges),
                             fieldNum(InventTestOperationMiscCharges, Value),
                             AccessType::View))
        {
            return 0;
        }

        if (!hasFieldAccess( tableNum(InventTestOperationTimeSheet),
                             fieldNum(InventTestOperationTimeSheet, CostAmount),
                             AccessType::View))
        {
            return 0;
        }

        select sum(CostAmount) from inventTestOperationItems
            where   inventTestOperationItems.InventNonConformanceID         == this.InventNonConformanceID;

        select sum(Value) from inventTestOperationMiscCharges
            where   inventTestOperationMiscCharges.InventNonConformanceID   == this.InventNonConformanceID;

        select sum(CostAmount) from inventTestOperationTimeSheet
            where   inventTestOperationTimeSheet.InventNonConformanceID     == this.InventNonConformanceID;

        return inventTestOperationItems.CostAmount + inventTestOperationMiscCharges.Value + inventTestOperationTimeSheet.CostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the standard delete method and performs the deletion of relations to and from other
    ///    nonconformances.
    /// </summary>
    public void delete()
    {
        InventNonConformanceRelation    inventNonConformanceRelation;

        ttsbegin;

        delete_from inventNonConformanceRelation
            where inventNonConformanceRelation.InventNonConformanceID       == this.InventNonConformanceID;

        delete_from inventNonConformanceRelation
            where inventNonConformanceRelation.InventNonConformanceIDRef    == this.InventNonConformanceID;

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRelationToOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the nonconformance references other nonconformances.
    /// </summary>
    /// <returns>
    /// true if references exist; otherwise, false.
    /// </returns>
    display InventNonConformanceHasRelation hasRelationToOther()
    {
        InventNonConformanceRelation    inventNonConformanceRelation;

        if (hasTableAccess(tableNum(InventNonConformanceRelation), AccessType::View))
        {
            select firstonly RecId from inventNonConformanceRelation
                where inventNonConformanceRelation.InventNonConformanceID   == this.InventNonConformanceID;
            return inventNonConformanceRelation.RecId != 0;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this nonconformance record from a reference.
    /// </summary>
    /// <param name="_callerBuffer">
    /// A <c>Common</c> record of the originating reference.
    /// </param>
    public void initFromCaller(Common _callerBuffer)
    {
        switch (_callerBuffer.TableId)
        {
            case (tableNum(SalesLine))   :
                this.initFromSalesLine(_callerBuffer as SalesLine);
                break;

            case (tableNum(PurchLine))   :
                this.initFromPurchLine(_callerBuffer as PurchLine);
                break;

            case (tableNum(ProdTable))   :
                this.initFromProdTable(_callerBuffer as ProdTable);
                break;

            case (tableNum(InventQualityOrderTable))   :
                this.initFromInventQualityOrderTable(_callerBuffer as InventQualityOrderTable);
                break;

            case (tableNum(InventBatch))   :
                this.initFromInventBatch(_callerBuffer as InventBatch);
                break;

            case (tableNum(PmfProdCoBy))   :
                this.initFromPmfProdCoBy(_callerBuffer);

            case (tableNum(InventTable))   :
                this.initFromInventTable(_callerBuffer as InventTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a nonconformance record from an inventory batch.
    /// </summary>
    /// <param name="_inventBatch">
    ///    The originating inventory batch.
    /// </param>
    public void initFromInventBatch(InventBatch _inventBatch)
    {
        InventDim           inventDim           = this.inventDim();
        InventTable         inventTable         = InventTable::find(_inventBatch.ItemId);

        this.ItemId                     = _inventBatch.ItemId;

        this.InventNonConformanceType   = InventNonConformanceType::Internal;
        this.InventTransType            = InventTransType::QualityOrder;

        inventDim.InventLocationId      = inventTable.inventLocationId();
        inventTable.initNonSpecifiedStandardProductDims(inventDim);

        inventDim.InventBatchId         = _inventBatch.InventBatchId;

        this.InventDimId                = InventDim::findOrCreate(inventDim).InventDimId;

        this.DefaultDimension           = this.mergeDimension(inventTable.DefaultDimension);
        this.initUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this nonconformance record from a quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An <c>InventQualityOrderTable</c> record of the originating quality order.
    /// </param>
    public void initFromInventQualityOrderTable(InventQualityOrderTable _inventQualityOrderTable)
    {
        this.ItemId                             = _inventQualityOrderTable.ItemId;
        this.InventDimId                        = _inventQualityOrderTable.InventDimId;
        this.DefaultDimension                   = this.copyDimension(_inventQualityOrderTable.DefaultDimension);
        this.initUnitId();

        switch (_inventQualityOrderTable.ReferenceType)
        {
            case InventTestReferenceType::Sales :
                this.InventNonConformanceType   = InventNonConformanceType::Cust;
                this.InventRefId                = _inventQualityOrderTable.InventRefId;
                this.InventTransIdRef           = _inventQualityOrderTable.InventRefTransId;
                this.InventTransType            = InventTransType::Sales;
                this.CustAccount                = _inventQualityOrderTable.AccountRelation;
                this.TestDefectQty              = _inventQualityOrderTable.Qty;
                this.PdsCWTestDefectQty         = _inventQualityOrderTable.PdsCWQty;
                break;

            case InventTestReferenceType::Inventory :
                this.InventNonConformanceType   = InventNonConformanceType::Internal;
                this.InventTransType            = InventTransType::QualityOrder;
                this.InventRefId                = _inventQualityOrderTable.QualityOrderId;
                this.InventTransIdRef           = _inventQualityOrderTable.InventTransId;
                break;

            case InventTestReferenceType::Quarantine :
                this.InventNonConformanceType   = InventNonConformanceType::Internal;
                this.InventTransType            = InventTransType::QualityOrder;
                break;

            case InventTestReferenceType::Production, InventTestReferenceType::RouteOpr :
                this.InventNonConformanceType   = InventNonConformanceType::Production;
                this.InventRefId                = _inventQualityOrderTable.InventRefId;
                this.InventTransType            = InventTransType::Production;
                this.InventTransIdRef           = _inventQualityOrderTable.InventRefTransId;
                this.TestDefectQty              = _inventQualityOrderTable.Qty;
                this.PdsCWTestDefectQty         = _inventQualityOrderTable.PdsCWQty;
                break;

            case InventTestReferenceType::Purch :
                this.InventNonConformanceType   = InventNonConformanceType::Vend;
                this.InventRefId                = _inventQualityOrderTable.InventRefId;
                this.InventTransType            = InventTransType::Purch;
                this.InventTransIdRef           = _inventQualityOrderTable.InventRefTransId;
                this.VendAccount                = _inventQualityOrderTable.AccountRelation;
                this.TestDefectQty              = _inventQualityOrderTable.Qty;
                this.PdsCWTestDefectQty         = _inventQualityOrderTable.PdsCWQty;
                break;
            default:
                this.InventTransType            = InventTransType::QualityOrder;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this nonconformance record from an item.
    /// </summary>
    /// <param name="_inventTable">
    /// The item record.
    /// </param>
    /// <remarks>
    /// Use a post-method handler when extending the <c>InventNonConformanceType</c> enum to handle additional defaulting.
    /// </remarks>
    public void initFromInventTable(InventTable _inventTable)
    {
        InventDim           inventDim = this.inventDim();

        this.ItemId         = _inventTable.ItemId;

        switch (this.InventNonConformanceType)
        {
            case InventNonConformanceType::Cust, InventNonConformanceType::Service :
                inventDim.initFromInventTable(_inventTable,InventItemOrderSetupType::Sales);
                break;

            case InventNonConformanceType::Vend :
                inventDim.initFromInventTable(_inventTable,InventItemOrderSetupType::Purch);
                break;

            default :
                inventDim.initFromInventTable(_inventTable,InventItemOrderSetupType::Invent);
                break;
        }

        inventDim.InventDimId       = InventDim::findOrCreate(inventDim).InventDimId;

        this.InventDimId            = inventDim.InventDimId;

        this.DefaultDimension       = this.mergeDimension(_inventTable.DefaultDimension);
        this.initUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPmfProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this nonconformance record from a co-byproduct.
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// A <c>PmfProdCoBy</c> record of the originating coby-product.
    /// </param>
    public void initFromPmfProdCoBy(PmfProdCoBy _pmfProdCoBy)
    {
        this.ItemId                     = _pmfProdCoBy.ItemId;
        this.InventNonConformanceType   = InventNonConformanceType::PmfProdCoBy;
        this.InventTransType            = InventTransType::PmfProdCoBy;
        this.InventRefId                = _pmfProdCoBy.ProdId;
        this.InventTransIdRef           = _pmfProdCoBy.InventTransId;
        this.CustAccount                = '';
        this.VendAccount                = '';

        this.InventDimId                = _pmfProdCoBy.InventDimId;
        this.DefaultDimension           = this.mergeDimension(_pmfProdCoBy.DefaultDimension);
        this.initUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a nonconformance record from a production order.
    /// </summary>
    /// <param name="_prodTable">
    ///    The originating production order.
    /// </param>
    public void initFromProdTable(ProdTable _prodTable)
    {
        this.ItemId                     = _prodTable.ItemId;
        this.InventNonConformanceType   = InventNonConformanceType::Production;
        this.InventTransType            = InventTransType::Production;
        this.InventRefId                = _prodTable.ProdId;
        this.InventTransIdRef           = _prodTable.InventTransId;
        this.CustAccount                = '';
        this.VendAccount                = '';

        this.InventDimId                = _prodTable.InventDimId;
        this.DefaultDimension           = this.mergeDimension(_prodTable.DefaultDimension);
        this.initUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a nonconformance record from a purchase order line.
    /// </summary>
    /// <param name="_purchLine">
    ///    The originating purchase order line.
    /// </param>
    public void initFromPurchLine(PurchLine _purchLine)
    {
        this.ItemId                     = _purchLine.ItemId;
        this.InventNonConformanceType   = InventNonConformanceType::Vend;
        this.InventTransType            = InventTransType::Purch;
        this.InventRefId                = _purchLine.PurchId;
        this.InventTransIdRef           = _purchLine.InventTransId;
        this.VendAccount                = _purchLine.VendAccount;
        this.CustAccount                = '';
        this.InventDimId                = _purchLine.InventDimId;
        this.DefaultDimension           = this.mergeDimension(_purchLine.DefaultDimension);
        this.initUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this nonconformance record from a specified reference.
    /// </summary>
    /// <remarks>
    /// The reference is specified by the nonconformance type and the reference fields.
    /// </remarks>
    public void initFromReference()
    {
        SalesLine                   salesLine;
        PurchLine                   purchLine;
        ProdTable                   prodTable;
        PmfProdCoBy                 pmfProdCoBy;
        InventQualityOrderTable     inventQualityOrderTable;
        InventTransId               inventTransId;
        boolean                     inventTransIdFound;

        switch (this.InventNonConformanceType)
        {
            case InventNonConformanceType::Cust :
            case InventNonConformanceType::Service :
                this.InventTransType    = InventTransType::Sales;
                this.VendAccount        = '';
                if (this.InventRefId && !SalesTable::exist(this.InventRefId))
                {
                    this.InventRefId    = '';
                }

                if (this.InventTransIdRef && !this.InventRefId)
                {
                    this.InventTransIdRef   = '';
                }

                if (this.InventTransIdRef)
                {
                    salesLine = SalesLine::findInventTransId(this.InventTransIdRef);
                    if (salesLine.SalesId != this.InventRefId)
                    {
                        this.InventTransIdRef   = '';
                    }
                }
                if (this.InventRefId && !this.InventTransIdRef)
                { // See if it can be initialized in case a single line exists.
                    while select salesLine
                        where salesLine.SalesId == this.InventRefId
                          && (salesLine.ItemId  == this.ItemId || !this.ItemId)
                    {
                        if (!inventTransIdFound)
                        {
                            inventTransId       = salesLine.InventTransId;
                            inventTransIdFound  = true;
                        }
                        else
                        {
                            inventTransId = ''; // Multiple lines exist
                        }
                    }
                    if (inventTransId)
                    {
                        salesLine = SalesLine::findInventTransId(inventTransId);
                        this.initFromSalesLine(salesLine);
                    }
                }
                break;
            case InventNonConformanceType::Vend :
                this.InventTransType    = InventTransType::Purch;
                this.CustAccount        = '';
                if (this.InventRefId && !PurchTable::exist(this.InventRefId))
                {
                    this.InventRefId    = '';
                }

                if (this.InventTransIdRef && !this.InventRefId)
                {
                    this.InventTransIdRef   = '';
                }

                if (this.InventTransIdRef)
                {
                    purchLine = PurchLine::findInventTransId(this.InventTransIdRef);
                    if (purchLine.PurchId != this.InventRefId)
                    {
                        this.InventTransIdRef   = '';
                    }
                }
                if (this.InventRefId && !this.InventTransIdRef)
                { // See if it can be initialized in case a single line exists.
                    while select purchLine
                        where purchLine.PurchId == this.InventRefId
                          && (purchLine.ItemId  == this.ItemId || !this.ItemId)
                    {
                        if (!inventTransIdFound)
                        {
                            inventTransId       = purchLine.InventTransId;
                            inventTransIdFound  = true;
                        }
                        else
                        {
                            inventTransId = ''; // Multiple lines exist
                        }
                    }
                    if (inventTransId)
                    {
                        purchLine = PurchLine::findInventTransId(inventTransId);
                        this.initFromPurchLine(purchLine);
                    }
                }
                break;
            case InventNonConformanceType::Production :
                prodTable = ProdTable::find(this.InventRefId);
                this.initFromProdTable(prodTable);
                break;
            case InventNonConformanceType::PmfProdCoBy :
                this.InventTransType    = InventTransType::PmfProdCoBy;
                this.CustAccount        = '';
                this.VendAccount        = '';
                if (this.InventRefId && !ProdTable::exist(this.InventRefId))
                {
                    this.InventRefId    = '';
                }

                if (this.InventTransIdRef && !this.InventRefId)
                {
                    this.InventTransIdRef   = '';
                }

                if (this.InventTransIdRef)
                {
                    pmfProdCoBy = PmfProdCoBy::findTransId(this.InventTransIdRef);
                    if (pmfProdCoBy.ProdId != this.InventRefId)
                    {
                        this.InventTransIdRef   = '';
                    }
                }
                if (this.InventRefId && !this.InventTransIdRef)
                { // See if it can be initialized in case a single line exists.
                    while select pmfProdCoBy
                        where pmfProdCoBy.ProdId == this.InventRefId
                          && (pmfProdCoBy.ItemId  == this.ItemId || !this.ItemId)
                    {
                        if (!inventTransIdFound)
                        {
                            inventTransId       = pmfProdCoBy.InventTransId;
                            inventTransIdFound  = true;
                        }
                        else
                        {
                            inventTransId = ''; // Multiple lines exist
                            break;
                        }
                    }
                    if (inventTransId)
                    {
                        pmfProdCoBy = PmfProdCoBy::findTransId(inventTransId);
                        this.initFromPmfProdCoBy(pmfProdCoBy);
                    }
                }
                break;
            case InventNonConformanceType::Internal :
                this.InventTransType    = InventTransType::QualityOrder;
                this.VendAccount        = '';
                this.CustAccount        = '';
                inventQualityOrderTable = InventQualityOrderTable::find(this.InventRefId);
                this.ItemId             = inventQualityOrderTable.ItemId;
                this.initUnitId();
                this.InventTransIdRef   = inventQualityOrderTable.InventRefTransId;
                this.TestDefectQty      = inventQualityOrderTable.Qty;
                this.PdsCWTestDefectQty = inventQualityOrderTable.PdsCWQty;
                break;

            default:
                this.initializingInventNonConformanceTableFromReference(this);
                break;
        }
        if (FormDataUtil::getFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingInventNonConformanceTableFromReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event of initializing the nonconformance record based on the specified reference type.
    /// </summary>
    /// <param name = "_inventNonConformanceTable">The <c>InventNonConformanceTable</c> record to set dependent fields on.</param>
    delegate void initializingInventNonConformanceTableFromReference(InventNonConformanceTable _inventNonConformanceTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReferenceTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this nonconformance record from the related source document.
    /// </summary>
    public void initFromReferenceTransId()
    {
        SalesLine               salesLine;
        PurchLine               purchLine;
        ProdTable               prodTable;
        InventQualityOrderTable inventQualityOrderTable;

        PmfProdCoBy             pmfProdCoBy;

        switch (this.InventNonConformanceType)
        {
            case InventNonConformanceType::Cust :
            case InventNonConformanceType::Service :
                salesLine               = SalesLine::findInventTransId(this.InventTransIdRef);
                this.initFromSalesLine(salesLine);
                break;
            case InventNonConformanceType::Vend :
                purchLine               = PurchLine::findInventTransId(this.InventTransIdRef);
                this.initFromPurchLine(purchLine);
                break;
            case InventNonConformanceType::Production :
                prodTable               = ProdTable::findTransId(this.InventTransIdRef);
                this.initFromProdTable(prodTable);
                break;
            case InventNonConformanceType::Internal :
                this.InventTransType    = InventTransType::QualityOrder;
                this.VendAccount        = '';
                this.CustAccount        = '';

                inventQualityOrderTable = InventTransOriginQualityOrder::inventQualityOrderTable(InventTransOrigin::findByInventTransId(this.InventTransIdRef).RecId);
                if (!inventQualityOrderTable)
                {
                    this.InventTransIdRef   = '';
                }
                this.ItemId             = inventQualityOrderTable.ItemId;
                this.initUnitId();
                break;

            case InventNonConformanceType::PmfProdCoBy :
                pmfProdCoBy = PmfProdCoBy::findTransId(this.InventTransIdRef);
                this.initFromPmfProdCoBy(pmfProdCoBy);
                break;

            default:
                this.initializingInventNonConformanceTableFromReferenceTransId(this);
                break;
        }
        if (FormDataUtil::getFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingInventNonConformanceTableFromReferenceTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The event of initializing the nonconformance record based on the specified reference source document.
    /// </summary>
    /// <param name = "_inventNonConformanceTable">The <c>InventNonConformanceTable</c> record to set dependent fields on.</param>
    delegate void initializingInventNonConformanceTableFromReferenceTransId(InventNonConformanceTable _inventNonConformanceTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this nonconformance record from a sales order line.
    /// </summary>
    /// <param name="_salesLine">
    /// The originating sales order line.
    /// </param>
    public void initFromSalesLine(SalesLine _salesLine)
    {
        this.ItemId                     = _salesLine.ItemId;
        if (this.InventNonConformanceType   != InventNonConformanceType::Service)
        {
            this.InventNonConformanceType   = InventNonConformanceType::Cust;
        }
        this.InventTransType            = InventTransType::Sales;
        this.InventRefId                = _salesLine.SalesId;
        this.InventTransIdRef           = _salesLine.InventTransId;
        this.CustAccount                = _salesLine.CustAccount;
        this.VendAccount                = '';
        this.InventDimId                = _salesLine.InventDimId;
        this.DefaultDimension           = this.mergeDimension(_salesLine.DefaultDimension);
        this.initUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLookupTransOriginQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates the query used for looking up records in the <c>InventTransOrigin</c> table.
    /// </summary>
    /// <param name="_qbs_Origin">
    ///    A <c>QueryBuildDataSource</c> object.
    /// </param>
    /// <remarks>
    /// Use a post-method handler if you need to modify the query to account for new values in the extended <c>InventNonConformanceType</c> enum.
    /// </remarks>
    public void initLookupTransOriginQuery(QueryBuildDataSource _qbs_Origin)
    {
        if (this.ItemId)
        {
            _qbs_Origin.addRange(fieldNum(InventTransOrigin, ItemId)).value(queryValue(this.ItemId));
        }

        if (this.CustAccount)
        {
            _qbs_Origin.addRange(fieldNum(InventTransOrigin, Party)).value(queryValue(CustTable::find(this.CustAccount).Party));
        }
        else
        if (this.VendAccount)
        {
            _qbs_Origin.addRange(fieldNum(InventTransOrigin, Party)).value(queryValue(VendTable::find(this.VendAccount).Party));
        }

        switch (this.InventNonConformanceType)
        {
            case InventNonConformanceType::Cust:
            case InventNonConformanceType::Service:
                _qbs_Origin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(queryValue(InventTransType::Sales));
                break;
            case InventNonConformanceType::Vend:
                _qbs_Origin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(queryValue(InventTransType::Purch));
                break;
            case InventNonConformanceType::Production:
                _qbs_Origin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(queryValue(InventTransType::Production));
                break;
            case InventNonConformanceType::Internal:
                _qbs_Origin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(queryValue(InventTransType::QualityOrder));
                break;
        }
        if (this.InventRefId)
        {
            _qbs_Origin.addRange(fieldNum(InventTransOrigin, ReferenceId)).value(queryValue(this.InventRefId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTestResponsibleWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the test that is responsible for the nonconformance based on the worker who reported the
    ///    problem.
    /// </summary>
    /// <param name="_reportedBy">
    ///    The worker who reported the nonconformance.
    /// </param>
    public void initTestResponsibleWorker(HcmWorkerRecId _reportedBy)
    {
        this.TestResponsibleWorker = InventTestEmplResponsible::responsibleByEmployee(_reportedBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>UnitId</c> field with the inventory unit for the item.
    /// </summary>
    public void initUnitId()
    {
        this.UnitId = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.InventNonConformanceType   = InventNonConformanceType::Internal;
        this.NonConformanceDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.InventTransType            = InventTransType::QualityOrder;
        this.InventDimId                = InventDim::inventDimIdBlank();
        this.inventDim().modifiedInventSiteFromParent(this);

        this.initTestResponsibleWorker(DirPersonUserEx::findUserWorkerReference());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record in the <c>InventNonConformanceTable</c> and makes sure that the related
    ///    <c>InventDim</c> record exists.
    /// </summary>
    /// <param name="_inventDim">
    ///    The related <c>InventDim</c> record.
    /// </param>
    /// <returns>
    ///    The <c>InventDimId</c> of the related <c>InventDim</c> record.
    /// </returns>
    public InventDimId insertFromForm(InventDim   _inventDim)
    {
        ttsbegin;

        this.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;
        this.inventDim().modifiedInventSiteFromParent(this);

        this.insert();

        ttscommit;

        return this.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related <c>InventDim</c> record.
    /// </summary>
    /// <returns>
    /// A record in the <c>InventDim</c> table.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related <c>InventTable</c> record.
    /// </summary>
    /// <returns>
    /// A record in the <c>InventTable</c> table.
    /// </returns>
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRelatedTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the nonconformance is referenced from other nonconformances.
    /// </summary>
    /// <returns>
    /// true if referenced; otherwise, false.
    /// </returns>
    display InventNonConformanceIsRelatedTo isRelatedTo()
    {
        InventNonConformanceRelation    inventNonConformanceRelation;

        select firstonly RecId from inventNonConformanceRelation
            where inventNonConformanceRelation.InventNonConformanceIDRef    == this.InventNonConformanceID;

        return inventNonConformanceRelation.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup where the user can select a customer related to the nonconformance.
    /// </summary>
    /// <param name="_ctrl">
    /// The calling form control.
    /// </param>
    public void lookupCustAccount(FormControl  _ctrl)
    {
        if (this.canFilterCustAccountLookup())
        {
            var query = this.custAccountLookupQuery();

            var sysTableLookup = SysTableLookup::newParameters(tableNum(CustTable), _ctrl, true,
                    CustomerDataInteractorFactory::useExistingOrCreateResolver(_ctrl, query));
            sysTableLookup.addLookupfield(fieldNum(CustTable, AccountNum));
            sysTableLookup.addLookupfield(fieldNum(CustTable, Party));
            sysTableLookup.addLookupMethod(tableMethodStr(CustTable, nameAlias));
            sysTableLookup.addLookupfield(fieldNum(CustTable, OurAccountNum));
            sysTableLookup.addLookupMethod(tableMethodStr(CustTable, phone));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
        else
        {
            CustTable::lookupCustomer(_ctrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReferenceCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the customer account number or by mapping
    /// it to the customer name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name = "_ctrl">The control on which contextual data entry is being performed.</param>
    /// <returns>The resolved value.</returns>
    /// <remarks>
    /// This method is designed to be used in conjuction with the <c>InventNonConformanceTable::lookupCustAccount</c> method.
    /// </remarks>
    public str resolveAmbiguousReferenceCustAccount(FormControl _ctrl)
    {
        if (this.canFilterCustAccountLookup())
        {
            return CustomerDataInteractorFactory::resolveAmbiguousReferenceForControl(_ctrl, this.custAccountLookupQuery());
        }
        else
        {
            return CustTable::resolveAmbiguousReferenceCustomer(_ctrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFilterCustAccountLookup</Name>
				<Source><![CDATA[
    private boolean canFilterCustAccountLookup()
    {
        return this.InventTransType == InventTransType::Sales && (this.ItemId || this.InventRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccountLookupQuery</Name>
				<Source><![CDATA[
    private Query custAccountLookupQuery()
    {
        var query = CustomerDataInteractorFactory::constructDefaultBaseQuery();
        var queryBuildDataSource = query.dataSourceTable(tableNum(CustTable));
        var queryBuildDataSourceSalesTable = queryBuildDataSource.addDataSource(tableNum(SalesTable));
        queryBuildDataSourceSalesTable.addLink(fieldNum(CustTable, AccountNum), fieldNum(SalesTable, CustAccount));
        queryBuildDataSourceSalesTable.joinMode(JoinMode::ExistsJoin);
        if (this.InventRefId)
        {
            queryBuildDataSourceSalesTable.addRange(fieldNum(SalesTable, SalesId)).value(queryValue(this.InventRefId));
        }

        if (this.ItemId)
        {
            var queryBuildDataSourceLine = queryBuildDataSourceSalesTable.addDataSource(tableNum(SalesLine));
            queryBuildDataSourceLine.addLink(fieldNum(SalesTable, SalesId), fieldNum(SalesLine, SalesId));
            queryBuildDataSourceLine.joinMode(JoinMode::InnerJoin);
            queryBuildDataSourceLine.addRange(fieldNum(SalesLine, ItemId)).value(queryValue(this.ItemId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and displays a lookup from which the user can select the transaction ID of the origin
    ///    related to the nonconformance.
    /// </summary>
    /// <param name="_ctrl">
    ///    The calling form control.
    /// </param>
    public void lookupInventTransId(FormStringControl  _ctrl)
    {
        Args                args = new Args();
        FormRun             formRun;

        args.name(formStr(InventTransOriginLookup));
        args.caller(_ctrl);
        args.record(this);

        formRun = classfactory.formRunClass(args);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form where the user can select the origin related to the nonconformance.
    /// </summary>
    /// <param name="_ctrl">
    /// The <c>FormControl</c> object performing the call.
    /// </param>
    public void lookupReference(FormControl  _ctrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        switch (this.InventNonConformanceType)
        {
            case InventNonConformanceType::Cust:
            case InventNonConformanceType::Service:
                if (this.ItemId)
                {
                    sysTableLookup = SysTableLookup::newParameters(tableNum(SalesLine), _ctrl);
                    sysTableLookup.addLookupfield(fieldNum(SalesLine, SalesId));
                    sysTableLookup.addLookupfield(fieldNum(SalesLine, CustAccount));
                    sysTableLookup.addLookupfield(fieldNum(SalesLine, ItemId));
                    sysTableLookup.addLookupfield(fieldNum(SalesLine, SalesQty));

                    query = new Query();
                    queryBuildDataSource = query.addDataSource(tableNum(SalesLine));
                    queryBuildDataSource.addRange(fieldNum(SalesLine, ItemId)).value(queryValue(this.ItemId));
                    if (this.CustAccount)
                    {
                        queryBuildDataSource.addRange(fieldNum(SalesLine, CustAccount)).value(queryValue(this.CustAccount));
                    }
                }
                else
                {
                    sysTableLookup = SysTableLookup::newParameters(tableNum(SalesTable), _ctrl);
                    sysTableLookup.addLookupfield(fieldNum(SalesTable, SalesId));
                    sysTableLookup.addLookupfield(fieldNum(SalesTable, CustAccount));
                    query = new Query();
                    queryBuildDataSource = query.addDataSource(tableNum(SalesTable));
                    if (this.CustAccount)
                    {
                        queryBuildDataSource.addRange(fieldNum(SalesTable, CustAccount)).value(queryValue(this.CustAccount));
                    }
                }
                break;
            case InventNonConformanceType::Vend:
                if (this.ItemId)
                {
                    sysTableLookup = SysTableLookup::newParameters(tableNum(PurchLine), _ctrl);
                    sysTableLookup.addLookupfield(fieldNum(PurchLine, PurchId));
                    sysTableLookup.addLookupfield(fieldNum(PurchLine, VendAccount));
                    sysTableLookup.addLookupfield(fieldNum(PurchLine, ItemId));
                    sysTableLookup.addLookupfield(fieldNum(PurchLine, PurchQty));

                    query = new Query();
                    queryBuildDataSource = query.addDataSource(tableNum(PurchLine));
                    queryBuildDataSource.addRange(fieldNum(PurchLine, ItemId)).value(queryValue(this.ItemId));
                    if (this.VendAccount)
                    {
                        queryBuildDataSource.addRange(fieldNum(PurchLine, VendAccount)).value(queryValue(this.VendAccount));
                    }
                }
                else
                {
                    sysTableLookup = SysTableLookup::newParameters(tableNum(PurchTable), _ctrl);
                    sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchId));
                    sysTableLookup.addLookupfield(fieldNum(PurchTable, OrderAccount));
                    query = new Query();
                    queryBuildDataSource = query.addDataSource(tableNum(PurchTable));
                    if (this.VendAccount)
                    {
                        queryBuildDataSource.addRange(fieldNum(PurchTable, OrderAccount)).value(queryValue(this.VendAccount));
                    }
                }
                break;
            case InventNonConformanceType::Production:
                if (this.ItemId)
                {
                    sysTableLookup = SysTableLookup::newParameters(tableNum(ProdTable), _ctrl);
                    sysTableLookup.addLookupfield(fieldNum(ProdTable, ProdId));
                    sysTableLookup.addLookupfield(fieldNum(ProdTable, ItemId));
                    sysTableLookup.addLookupfield(fieldNum(ProdTable, QtySched));

                    query = new Query();
                    queryBuildDataSource = query.addDataSource(tableNum(ProdTable));
                    queryBuildDataSource.addRange(fieldNum(ProdTable, ItemId)).value(queryValue(this.ItemId));
                }
                else
                {
                    ProdTable::lookupProdId(_ctrl, this.InventRefId, this);
                    return;
                }
                break;
            case InventNonConformanceType::Internal:
                sysTableLookup = SysTableLookup::newParameters(tableNum(InventQualityOrderTable), _ctrl);
                sysTableLookup.addLookupfield(fieldNum(InventQualityOrderTable, QualityOrderId));
                sysTableLookup.addLookupfield(fieldNum(InventQualityOrderTable, ItemId));
                sysTableLookup.addLookupfield(fieldNum(InventQualityOrderTable, AccountRelation));
                sysTableLookup.addLookupfield(fieldNum(InventQualityOrderTable, Qty));

                if (this.ItemId)
                {
                    query = new Query();
                    queryBuildDataSource = query.addDataSource(tableNum(InventQualityOrderTable));
                    queryBuildDataSource.addRange(fieldNum(InventQualityOrderTable, ItemId)).value(queryValue(this.ItemId));
                }
                break;

            case InventNonConformanceType::PmfProdCoBy:
                if (this.ItemId)
                {
                    sysTableLookup
                        = SysTableLookup::newParameters(
                            tableNum(PmfProdCoBy), _ctrl);
                    sysTableLookup.addLookupfield(fieldNum(PmfProdCoBy, ProdId));
                    sysTableLookup.addLookupfield(fieldNum(PmfProdCoBy, ItemId));
                    sysTableLookup.addLookupfield(fieldNum(PmfProdCoBy, CoByQty));

                    query = new Query();
                    queryBuildDataSource
                        = query.addDataSource(tableNum(PmfProdCoBy));
                    queryBuildDataSource.addRange(
                        fieldNum(PmfProdCoBy, ItemId))
                            .value(queryValue(this.ItemId));
                }
                else
                {
                    PmfProdCoBy::lookupInventTransId(_ctrl, this.InventRefId);
                    return;
                }
                break;

            default:
                this.lookupReferenceDelegate(this, _ctrl);
                return;
        }

        if (query)
        {
            sysTableLookup.parmQuery(query);
        }

        if (sysTableLookup)
        {
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to handle the building of a lookup form for looking up the origin reference for a nonconformance record based on the nonconformance type.
    /// The subscriber should perform the actual lookup call.
    /// </summary>
    /// <param name = "_inventNonConformanceTable">The <c>InventNonConformanceTable</c> record to build the lookup for.</param>
    /// <param name = "_ctrl">The form control to invoke the lookup for.</param>
    delegate void lookupReferenceDelegate(InventNonConformanceTable _inventNonConformanceTable, FormControl _ctrl)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup where the user can select a vendor related to the nonconformance.
    /// </summary>
    /// <param name="_ctrl">
    /// The calling form control.
    /// </param>
    public void lookupVendAccount(FormControl  _ctrl)
    {
        if (this.canFilterVendAccountLookup())
        {
            var query = this.vendAccountLookupQuery();

            var sysTableLookup = SysTableLookup::newParameters(tableNum(VendTable), _ctrl, true,
                    VendorDataInteractorFactory::useExistingOrCreateResolver(_ctrl, query));
            sysTableLookup.addLookupfield(fieldNum(VendTable, AccountNum));
            sysTableLookup.addLookupfield(fieldNum(VendTable, Party));
            sysTableLookup.addLookupMethod(tableMethodStr(VendTable, nameAlias));
            sysTableLookup.addLookupfield(fieldNum(VendTable, YourAccountNum));
            sysTableLookup.addLookupMethod(tableMethodStr(VendTable, phone));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
        else
        {
            VendTable::lookupVendor(_ctrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReferenceVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the vendor account number or by mapping
    /// it to the vendor name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name = "_ctrl">The control on which contextual data entry is being performed.</param>
    /// <returns>The resolved value.</returns>
    /// <remarks>
    /// This method is designed to be used in conjuction with the <c>InventNonConformanceTable::lookupVendAccount</c> method.
    /// </remarks>
    public str resolveAmbiguousReferenceVendAccount(FormControl _ctrl)
    {
        if (this.canFilterVendAccountLookup())
        {
            return VendorDataInteractorFactory::resolveAmbiguousReferenceForControl(_ctrl, this.vendAccountLookupQuery());
        }
        else
        {
            return VendTable::resolveAmbiguousReferenceVendor(_ctrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFilterVendAccountLookup</Name>
				<Source><![CDATA[
    private boolean canFilterVendAccountLookup()
    {
        return this.InventTransType == InventTransType::Purch && (this.ItemId || this.InventRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccountLookupQuery</Name>
				<Source><![CDATA[
    private Query vendAccountLookupQuery()
    {
        var query = VendorDataInteractorFactory::constructDefaultBaseQuery();
        var queryBuildDataSource = query.dataSourceTable(tableNum(VendTable));
        var queryBuildDataSourcePurchTable = queryBuildDataSource.addDataSource(tableNum(PurchTable));
        queryBuildDataSourcePurchTable.addLink(fieldNum(VendTable, AccountNum), fieldNum(PurchTable, OrderAccount));
        queryBuildDataSourcePurchTable.joinMode(JoinMode::ExistsJoin);
        if (this.InventRefId)
        {
            queryBuildDataSourcePurchTable.addRange(fieldNum(PurchTable, PurchId)).value(queryValue(this.InventRefId));
        }

        if (this.ItemId)
        {
            var queryBuildDataSourceLine = queryBuildDataSourcePurchTable.addDataSource(tableNum(PurchLine));
            queryBuildDataSourceLine.addLink(fieldNum(PurchTable, PurchId), fieldNum(PurchLine, PurchId));
            queryBuildDataSourceLine.joinMode(JoinMode::InnerJoin);
            queryBuildDataSourceLine.addRange(fieldNum(PurchLine, ItemId)).value(queryValue(this.ItemId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    ///    field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    ///    A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    ///    A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    ///    optional.
    /// </param>
    /// <param name="_dimensionMerge">
    ///    A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    ///    this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles updates of related fields and records when the specified field value is changed.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field, for which the value is being modified.</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventNonConformanceTable, InventNonConformanceType):
                this.clearAllReferences();
                switch (this.InventNonConformanceType)
                {
                    case InventNonConformanceType::Cust :
                    case InventNonConformanceType::Service :
                        this.InventTransType    = InventTransType::Sales;
                        break;
                    case InventNonConformanceType::Vend :
                        this.InventTransType    = InventTransType::Purch;
                        break;
                    case InventNonConformanceType::Production :
                        this.InventTransType    = InventTransType::Production;
                        break;
                    case InventNonConformanceType::Internal :
                        this.InventTransType    = InventTransType::QualityOrder;
                        break;

                    case InventNonConformanceType::PmfProdCoBy :
                        this.InventTransType = InventTransType::PmfProdCoBy;
                        break;
                }
                if (this.ItemId)
                {
                    this.initFromInventTable(InventTable::find(this.ItemId));
                }
                break;

            case fieldNum(InventNonConformanceTable, InventRefId):
                this.initFromReference();
                break;

            case fieldNum(InventNonConformanceTable, InventTransIdRef):
                if (this.InventTransIdRef)
                {
                    this.initFromReferenceTransId();
                }
                else
                {
                    this.initFromInventTable(InventTable::find(this.ItemId));
                }
                break;

            case fieldNum(InventNonConformanceTable, ItemId):
                if (this.InventTransIdRef)
                {
                    this.initFromReferenceTransId();
                }
                else
                {
                    this.initFromInventTable(InventTable::find(this.ItemId));
                }
                break;

            case fieldNum(InventNonConformanceTable, InventTestInfoStat):
                if (!this.InventTestInfoStat)
                {
                    this.InventTestInfoStatRef = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openCorrectionsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether open corrections that are related to this nonconformance exists.
    /// </summary>
    /// <returns>
    /// true if open corrections exist; otherwise, false.
    /// </returns>
    public boolean openCorrectionsExist()
    {
        InventTestCorrection    inventTestCorrection;

        select firstonly RecId from inventTestCorrection
            where inventTestCorrection.InventNonConformanceID   == this.InventNonConformanceID
               && inventTestCorrection.CorrectionCompleted      == NoYes::No;

        return inventTestCorrection.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// A <c>PdsCWUnitId</c> value that corresponds to the catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the quality order from which this nonconformance was created.
    /// </summary>
    /// <returns>
    /// The quality order ID associated with this nonconformance.
    /// </returns>
    display InventQualityOrderId qualityOrderId()
    {
        return InventNonConformanceOrigin::find(this.InventNonConformanceID).InventQualityOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refusedBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current refuser of the nonconformance.
    /// </summary>
    /// <returns>
    ///    The current refuser if the nonconformance is refused; otherwise, zero.
    /// </returns>

    public HcmWorkerRecId refusedBy()
    {
        InventNonConformanceHistory inventNonConformanceHistory;

        if (this.InventNonConformanceApproval != InventNonConformanceApproval::Refused)
        {
            return 0;
        }

        select firstonly Worker from inventNonConformanceHistory
            order by CreatedDateTime desc
            where inventNonConformanceHistory.InventNonConformanceID            == this.InventNonConformanceID
               && inventNonConformanceHistory.InventNonConformanceHistoryType   == InventNonConformanceHistoryType::Refused;

        return inventNonConformanceHistory.Worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refusedByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the worker name of the current refuser of the nonconformance.
    /// </summary>
    /// <returns>
    ///    The worker name of the current refuser if the nonconformance is refused; otherwise, an empty
    ///    string.
    /// </returns>
    display RefusedByName refusedByName()
    {
        HcmWorkerRecId refusedBy = this.refusedBy();

        if (!refusedBy)
        {
            return '';
        }

        return HcmWorker::find(refusedBy).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the personnel number for the worker who reported this nonconformance.
    /// </summary>
    /// <returns>
    /// The personnel number of the reporting worker.
    /// </returns>
    display InventNonConformanceReportedByWorker reportedBy()
    {
        InventNonConformanceHistory inventNonConformanceHistory;
        HcmWorker                   hcmWorker;

        select firstonly PersonnelNumber from hcmWorker
            join RecId from inventNonConformanceHistory
                order by CreatedDateTime desc
                where inventNonConformanceHistory.InventNonConformanceID            == this.InventNonConformanceID
                   && inventNonConformanceHistory.InventNonConformanceHistoryType   == InventNonConformanceHistoryType::Created
                   && inventNonConformanceHistory.Worker                            == hcmWorker.RecId;

        return hcmWorker.PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name for the worker who reported this nonconformance.
    /// </summary>
    /// <returns>
    ///    The worker name.
    /// </returns>
    display EmplName reportedByName()
    {
        HcmPersonnelNumberId reportedBy = this.reportedBy();

        if (!reportedBy)
        {
            return '';
        }

        return HcmWorker::findByPersonnelNumber(reportedBy).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixCallerReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the reference fields of the form that shows this data are enabled. 
    /// </summary>
    /// <param name = "_callerRecord">The record that is passed in as a caller when a new record is created.</param>
    /// <returns>true if the reference fields of the form that shows this data are enabled; otherwise, false.</returns>
    protected boolean fixCallerReference(Common _callerRecord)
    {
        if (!_callerRecord.RecId)
        {
            return false;
        }

        switch (_callerRecord.TableId)
        {
            case (tableNum(SalesLine))                  :
            case (tableNum(PurchLine))                  :
            case (tableNum(ProdTable))                  :
            case (tableNum(PmfProdCoBy))                :
            case (tableNum(InventQuarantineOrder))      :
            case (tableNum(InventQualityOrderTable))    :
            case (tableNum(InventBatch))                :
            case (tableNum(InventTable))                :
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form that shows this data so that reference fields are correctly enabled or disabled.
    /// </summary>
    /// <param name="_inventNonConformanceTable_ds">
    /// The form data source for this table.
    /// </param>
    /// <param name="_callerRecord">
    /// The record that is passed in as a caller when a new record is created.
    /// </param>
    public void setEditableFields(FormDataSource _inventNonConformanceTable_ds, Common _callerRecord)
    {
        boolean     modifyReference = true;
        boolean     showReference   = true;

        if (this.InventNonConformanceType == InventNonConformanceType::Internal &&
            _callerRecord.RecId &&
            _callerRecord.TableId == tableNum(InventBatch))
        {
            showReference = false;
        }

        modifyReference = !this.fixCallerReference(_callerRecord);

        _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, InventNonConformanceType)).allowEdit(modifyReference);
        _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, ItemId)).allowEdit(modifyReference);
        _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable,Rush)).allowEdit(this.InventNonConformanceType == InventNonConformanceType::Vend);
        _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable,InventTestInfoStat)).allowEdit(this.RecId && !this.correctionsExist());

        if (showReference || this.RecId)
        {
            _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, InventRefId)).allowEdit(modifyReference);
            _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, InventTransIdRef)).allowEdit(modifyReference);
            _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, CustAccount)).allowEdit(modifyReference);
            _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, VendAccount)).allowEdit(modifyReference);
        }
        else
        {
            _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, InventRefId)).visible(modifyReference);
            _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, InventTransIdRef)).visible(modifyReference);
            _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, CustAccount)).visible(modifyReference);
            _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, VendAccount)).visible(modifyReference);
        }

        switch (this.InventNonConformanceType)
        {
            case InventNonConformanceType::Cust:
            case InventNonConformanceType::Service:
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, CustAccount)).allowEdit(modifyReference);
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, VendAccount)).allowEdit(false);
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, InventTransIdRef)).allowEdit(modifyReference);
                break;
            case InventNonConformanceType::Vend:
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, CustAccount)).allowEdit(false);
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, VendAccount)).allowEdit(modifyReference);
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, InventTransIdRef)).allowEdit(modifyReference);
                break;
            case InventNonConformanceType::Production:
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, CustAccount)).allowEdit(false);
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, VendAccount)).allowEdit(false);
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, InventTransIdRef)).allowEdit(false);
                break;
            case InventNonConformanceType::Internal:
            case InventNonConformanceType::PmfProdCoBy:
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, CustAccount)).allowEdit(false);
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, VendAccount)).allowEdit(false);
                _inventNonConformanceTable_ds.object(fieldNum(InventNonConformanceTable, InventTransIdRef)).allowEdit(modifyReference);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item name from the associated item.
    /// </summary>
    /// <returns>
    /// The item name from the associated <c>InventTable</c> table.
    /// </returns>
    display ItemNameDisplay showItemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProblemDesc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description from the associated problem type.
    /// </summary>
    /// <returns>
    ///    The description field from the associated <c>InventProblemType</c> table.
    /// </returns>
    display Description showProblemDesc()
    {
        //Check if user has security access
        if (hasFieldAccess(tableNum(InventProblemType),
                           fieldNum(InventProblemType, Description),
                           AccessType::View))
        {
            return InventProblemType::find(this.InventTestProblemTypeId).Description;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && this.isRelatedTo())
        {
            ret = checkFailed("@SYS114023");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventNonConformanceTable, InventTestProblemTypeId):
                if (!InventProblemTypeSetup::exist(this.InventTestProblemTypeId, this.InventNonConformanceType))
                {
                    ret = checkFailed("@SYS114021");
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (!InventParameters::find().UseQualityManagement)
        {
            ret = checkFailed("@SYS114218");
        }

        if (!InventProblemTypeSetup::exist(this.InventTestProblemTypeId, this.InventNonConformanceType))
        {
            ret = checkFailed("@SYS114021");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>InventNonConformanceTable</c> table exists.
    /// </summary>
    /// <param name="_inventNonConformanceID">
    ///    The nonconformance ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static public boolean exist(InventNonConformanceID _inventNonConformanceID)
    {
        return _inventNonConformanceID && (select firstonly inventNonConformanceTable
                    where inventNonConformanceTable.InventNonConformanceID == _inventNonConformanceID
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventNonConformanceTable</c> table.
    /// </summary>
    /// <param name="_inventNonConformanceID">
    ///    The nonconformance ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventNonConformanceTable</c> table; otherwise, an empty record.
    /// </returns>
    static public InventNonConformanceTable find(
        InventNonConformanceID      _inventNonConformanceID,
        boolean                     _forUpdate = false)
    {
        InventNonConformanceTable  inventNonConformanceTable;

        inventNonConformanceTable.selectForUpdate(_forUpdate);

        if (_inventNonConformanceID)
        {
            select firstonly inventNonConformanceTable
                where inventNonConformanceTable.InventNonConformanceID == _inventNonConformanceID;
        }

        return inventNonConformanceTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventQualityManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS124054</DeveloperDocumentation>
	<Label>@SYS113998</Label>
	<SingularLabel>@SYS113998</SingularLabel>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>InventNonConformanceID</TitleField1>
	<TitleField2>InventNonConformanceType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>IdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>IdIdx</PrimaryIndex>
	<ReplacementKey>IdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventNonConformanceHistory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventNonConformanceHistory</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventNonConformanceOrigin</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventNonConformanceOrigin</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventNonConformanceRelation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventNonConformanceRelation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventQualityOrderTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventQualityOrderTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventTestCorrection</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventTestCorrection</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonConformanceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResponsibleWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestProblemTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuarantineZoneId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestDefectQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWTestDefectQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestInfoStat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestInfoStatRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Rush</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestQuarantineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CorrectionReportInfo</Name>
			<Label>@SYS114561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestProblemTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>reportedByName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestDefectQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWTestDefectQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>approvedByName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>refusedByName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonConformanceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestInfoStat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestInfoStatRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuarantineZoneId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Cost</Name>
			<Label>@SYS4249</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>costAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CreateIdentification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CreateInformation</Name>
			<Label>@SYS2272</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonConformanceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestInfoStat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResponsibleWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestProblemTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CreateReference</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestDefectQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWTestDefectQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemTracingRelations</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qualityOrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NonConformance</Name>
			<Label>@SYS113998</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonConformanceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResponsibleWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Origin</Name>
			<Label>@SYS98432</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestProblemTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonConformanceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>reportedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResponsibleWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewPart2</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTestInfoStat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceApproval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>approvedBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProblemInformation</Name>
			<Label>@SYS114008</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTestProblemTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showProblemDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Rush</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quarantine</Name>
			<Label>@SYS58416</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuarantineZoneId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestQuarantineType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Relations</Name>
			<Label>@SYS80613</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hasRelationToOther</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isRelatedTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StatisticalInformation</Name>
			<Label>@SYS114007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTestInfoStat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestInfoStatRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TagReport</Name>
			<Label>@SYS114562</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonConformanceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNonConformanceID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuarantineZoneId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestDefectQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWTestDefectQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNonConformanceClosed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventNonConformanceApproval</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventNonConformanceApproval</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventNonConformanceID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNonConformanceID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventNonConformanceType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventNonConformanceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTestInfoStat</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestInfoStat</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTestInfoStatRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNonConformanceID</ExtendedDataType>
			<Label>@SYS15217</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTestProblemTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestProblemTypeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTestQuarantineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTestQuarantineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS8567</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>NonConformanceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWTestDefectQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventTestDefectQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuarantineZoneId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQuarantineZoneId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Rush</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS114003</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TestDefectQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestDefectQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TestResponsibleWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventTestResponsible</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventNonConformanceID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransTypeRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransIdRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_InventNonConformanceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_InventNonConformanceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestResponsibleWorker</Name>
					<Field>TestResponsibleWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventProblemType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventProblemType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTestProblemTypeId</Name>
					<Field>InventTestProblemTypeId</Field>
					<RelatedField>ProblemTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProblemTypeIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventProblemTypeSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124035</EntityRelationshipRole>
			<RelatedTable>InventProblemTypeSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventNonConformanceType</Name>
					<Field>InventNonConformanceType</Field>
					<RelatedField>NonConformanceType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTestProblemTypeId</Name>
					<Field>InventTestProblemTypeId</Field>
					<RelatedField>ProblemTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProblemTypeTypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventQualityOrderTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123856</EntityRelationshipRole>
			<RelatedTable>InventQualityOrderTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::QualityOrder</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>QualityOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventQuarantineZone</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventQuarantineZone</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuarantineZoneId</Name>
					<Field>QuarantineZoneId</Field>
					<RelatedField>QuarantineZoneId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>QuarantineZoneIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfProdCoBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PmfProdCoBy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::PmfProdCoBy</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123840</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123841</EntityRelationshipRole>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdRef</Name>
					<Field>InventTransIdRef</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123518</EntityRelationshipRole>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReferenceInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReferenceInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventNonConformanceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdRef</Name>
					<Field>InventTransIdRef</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123843</EntityRelationshipRole>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdRef</Name>
					<Field>InventTransIdRef</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123519</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventTransType</Name>
					<Field>InventTransType</Field>
					<ValueStr>InventTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>StatisticalNonConformanceReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventNonConformanceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTestInfoStatRef</Name>
					<SourceEDT>InventNonConformanceID</SourceEDT>
					<Field>InventTestInfoStatRef</Field>
					<RelatedField>InventNonConformanceID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>