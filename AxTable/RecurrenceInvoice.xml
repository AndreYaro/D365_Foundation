<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RecurrenceInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RecurrenceInvoice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayRecurrenceInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence amount for a single <c>RecurrenceInvoice</c> invoice.
    /// </summary>
    /// <param name="_recurrenceInvoice">
    /// A <c>RecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The recurrence amount for a single <c>RecurrenceInvoice</c> invoice.
    /// </returns>
    public display AmountCur displayRecurrenceInvoiceAmount(RecurrenceInvoice _recurrenceInvoice)
    {
        AmountCur invoiceAmount;
        CustTrans custTrans;
        CustInvoiceTable custInvoiceTable;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;

        //if related free text invoice is posted
        select firstonly InvoiceId from custInvoiceTable
             where custInvoiceTable.RecId == _recurrenceInvoice.CustInvoiceTable
               outer join AmountCur from custTrans
                     where custInvoiceTable.Posted &&
                            custInvoiceTable.InvoiceAccount == custTrans.AccountNum &&
                            custInvoiceTable.InvoiceDate == custTrans.TransDate &&
                            custInvoiceTable.InvoiceId == custTrans.Invoice;

        if (custInvoiceTable.InvoiceId)
        {
            invoiceAmount = custTrans.AmountCur;
        }
        else
        {
            custFreeInvoiceCalcTotals = RecurrenceInvoice::calcRecurrenceInvoiceAmount(_recurrenceInvoice);

            if (custFreeInvoiceCalcTotals != null)
            {
                invoiceAmount = custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount();
            }
        }
        return invoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRecurrenceInvoiceTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence tax amount for a single <c>RecurrenceInvoice</c> invoice.
    /// </summary>
    /// <param name="_recurrenceInvoice">
    /// A <c>RecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The recurrence tax amount for a single <c>RecurrenceInvoice</c> invoice.
    /// </returns>
    public display AmountCur displayRecurrenceInvoiceTax(RecurrenceInvoice _recurrenceInvoice)
    {
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        AmountCur invoiceTaxAmount;

        custFreeInvoiceCalcTotals = RecurrenceInvoice::calcRecurrenceInvoiceAmount(_recurrenceInvoice);

        if (custFreeInvoiceCalcTotals != null)
        {
            invoiceTaxAmount = custFreeInvoiceCalcTotals.custFreeInvoiceTaxTotal();
        }

        return invoiceTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRecurrenceMiscChargesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the miscellaneous charges amount for a single <c>RecurrenceInvoice</c> invoice.
    /// </summary>
    /// <param name="_recurrenceInvoice">
    /// A <c>RecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The miscellaneous charges amount for a single <c>RecurrenceInvoice</c> invoice.
    /// </returns>
    public display AmountCur displayRecurrenceMiscChargesAmount(RecurrenceInvoice _recurrenceInvoice)
    {
        AmountCur markupAmount;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        CustInvoiceTable custInvoiceTable;
        CustInvoiceJour custInvoiceJour;

        //if related free text invoice is posted
        select firstonly InvoiceId from custInvoiceTable
             where custInvoiceTable.RecId == _recurrenceInvoice.CustInvoiceTable
                    outer join SumMarkup from custInvoiceJour
                        where custInvoiceTable.InvoiceId == custInvoiceJour.InvoiceId &&
                               custInvoiceTable.InvoiceDate == custInvoiceJour.InvoiceDate &&
                               custInvoiceTable.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup;

        if (custInvoiceTable.InvoiceId)
        {
            markupAmount = custInvoiceJour.SumMarkup;
        }
        else
        {
            custFreeInvoiceCalcTotals = RecurrenceInvoice::calcRecurrenceInvoiceAmount(_recurrenceInvoice);
            
            if (custFreeInvoiceCalcTotals != null)
            {
                markupAmount = custFreeInvoiceCalcTotals.custFreeInvoiceMarkup();
            }
        }
        return markupAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRecurrenceInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the recurrence amount for a single <c>RecurrenceInvoice</c> invoice.
    /// </summary>
    /// <param name="_recurrenceInvoice">
    /// A <c>RecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The instance of <c>CustFreeInvoiceCalcTotals</c> class.
    /// </returns>
    public static CustFreeInvoiceCalcTotals calcRecurrenceInvoiceAmount(RecurrenceInvoice _recurrenceInvoice)
    {
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        CustInvoiceTable custInvoiceTable;

        select custInvoiceTable
            where custInvoiceTable.RecId == _recurrenceInvoice.CustInvoiceTable;

        if (custInvoiceTable.RecId)
        {
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
            custFreeInvoiceCalcTotals.calc();
        }

        return custFreeInvoiceCalcTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record occurs in the <c>RecurrenceInvoice</c> table.
    /// </summary>
    /// <param name="_recurrenceInvoiceRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recurrenceInvoiceRecId)
    {
        boolean ret = true;

        if (!RecurrenceInvoice::exist(_recurrenceInvoiceRecId))
        {
            ret = checkFailed(strFmt(RecurrenceInvoice::txtNotExist(), _recurrenceInvoiceRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RecurrenceInvoice</c> table exists.
    /// </summary>
    /// <param name="_recurrenceInvoiceRecId">
    /// The <c>RecId</c> value of the <c>CustInvoiceTemplate</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recurrenceInvoiceRecId)
    {
        boolean found;

        found = (select firstonly RecId from recurrenceInvoice
                    where recurrenceInvoice.RecId == _recurrenceInvoiceRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsByCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RecurrenceInvoice</c> table exists.
    /// </summary>
    /// <param name="_custInvoiceTableRecId">
    /// The <c>RecId</c> value of the <c>CustInvoiceTable</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsByCustInvoiceTable(RecId _custInvoiceTableRecId)
    {
        boolean found;

        found = (select firstonly RecId from recurrenceInvoice
                    where recurrenceInvoice.CustInvoiceTable == _custInvoiceTableRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RecurrenceInvoice</c> table.
    /// </summary>
    /// <param name="_recurrenceInvoiceRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>RecurrenceInvoice</c> table buffer.
    /// </returns>
    public static RecurrenceInvoice find(
        RecId _recurrenceInvoiceRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        RecurrenceInvoice recurrenceInvoice;

        recurrenceInvoice.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            recurrenceInvoice.concurrencyModel(_concurrencyModel);
        }

        select firstonly recurrenceInvoice
            where recurrenceInvoice.RecId == _recurrenceInvoiceRecId;

        return recurrenceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>RecurrenceInvoice</c> table.
    /// </summary>
    /// <param name="_custInvoiceTableRecId">
    /// The unique ID of the <c>CustInvoiceTable</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>RecurrenceInvoice</c> table buffer.
    /// </returns>
    public static RecurrenceInvoice findByCustInvoiceTable(
        RecId _custInvoiceTableRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        RecurrenceInvoice recurrenceInvoice;

        recurrenceInvoice.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            recurrenceInvoice.concurrencyModel(_concurrencyModel);
        }

        select firstonly recurrenceInvoice
            where recurrenceInvoice.CustInvoiceTable == _custInvoiceTableRecId;

        return recurrenceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRecurrenceInvoiceAndTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence invoice amount for a <c>CustRecurrenceInvoiceGroup</c> record.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceGroupRecId">
    /// The record ID of a recurrence invoice.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code for conversion of amount to the currency code.
    /// </param>
    /// <returns>
    /// A container that contains the total invoice amount and total invoice tax amount for a single
    /// <c>CustRecurrenceInvoiceGroup</c> record.
    /// </returns>
    /// <remarks>
    /// The amount returned is in the default currency set for the company.The first value is the invoice
    /// amount and the second value is Invoice tax amount returned in the container.
    /// </remarks>
    static public container getTotalRecurrenceInvoiceAndTaxAmount(RefRecId _custRecurrenceInvoiceGroupRecId,
                                                                    CurrencyCode _currencyCode)
    {
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        CustInvoiceTable custInvoiceTable;
        CustTrans custTrans;
        RecurrenceInvoice recurrenceInvoice;
        Amount totalRecurrenceInvoiceAmount;
        Amount totalRecurrenceInvoiceTaxAmount;
        #EECountryRegionCodes
        #ISOCountryRegionCodes
        boolean countryRegion_EEU = SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU);
        boolean countryRegion_BR = BrazilParameters::isEnabled();
        boolean countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        boolean countryRegionConsolidated = SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion();
        boolean countryRegion_ES = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]);

        while select CustRecurrenceInvoiceGroup, CustInvoiceTable from recurrenceInvoice
            where recurrenceInvoice.CustRecurrenceInvoiceGroup == _custRecurrenceInvoiceGroupRecId
            join custInvoiceTable
                where custInvoiceTable.RecId == recurrenceInvoice.CustInvoiceTable
                outer join AmountCur from custTrans
                    where custInvoiceTable.Posted &&
                          custInvoiceTable.InvoiceId == custTrans.Invoice &&
                          custInvoiceTable.InvoiceAccount == custTrans.AccountNum &&
                          custInvoiceTable.InvoiceDate == custTrans.TransDate
            {
                custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
                // Passing the country region flags to the calc method so we don't end up calling the SysCountryRegionCode::isLegalEntityInCountryRegion method repeatedly for multiple invoices.
                custFreeInvoiceCalcTotals.calc(0, false, countryRegion_EEU, countryRegion_BR, countryRegion_IN, countryRegionConsolidated, countryRegion_ES);

                if (custInvoiceTable.Posted)
                {
                    totalRecurrenceInvoiceAmount += CurrencyExchangeHelper::curAmount2CurAmount(custTrans.AmountCur, custInvoiceTable.CurrencyCode, _currencyCode);
                }
                else
                {
                    totalRecurrenceInvoiceAmount += CurrencyExchangeHelper::curAmount2CurAmount(custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount(), custInvoiceTable.CurrencyCode, _currencyCode);
                }
                    totalRecurrenceInvoiceTaxAmount += CurrencyExchangeHelper::curAmount2CurAmount(custFreeInvoiceCalcTotals.custFreeInvoiceTaxTotal(), custInvoiceTable.CurrencyCode, _currencyCode);
            }

        return [totalRecurrenceInvoiceAmount, totalRecurrenceInvoiceTaxAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>gettRecurrenceInvoiceNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence amount for a <c>CustRecurrenceInvoiceGroup</c> record.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceGroupRecId">
    /// The record ID of recurrence invoice.
    /// </param>
    /// <returns>
    /// The recurrence amount for a single <c>CustRecurrenceInvoiceGroup</c> record.
    /// </returns>
    static public Counter gettRecurrenceInvoiceNumOfLines(RefRecId _custRecurrenceInvoiceGroupRecId)
    {
        RecurrenceInvoice recurrenceInvoice;
        Counter numOfLines;

        numOfLines = any2int((select count(RecId) from recurrenceInvoice
                                where recurrenceInvoice.CustRecurrenceInvoiceGroup == _custRecurrenceInvoiceGroupRecId).RecId);

        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxRecurrenceInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum recurrence invoice generation date for the selected <c>CustRecurrenceInvoice</c> setup.
    /// </summary>
    /// <param name="_custRecurrenceInvoice">
    /// The buffer of <c>CustRecurrenceInvoice</c> table.
    /// </param>
    /// <returns>
    /// The maximum recurrence invoice generation date for the selected <c>CustRecurrenceInvoice</c> setup.
    /// </returns>
    public static TransDate maxRecurrenceInvoiceDate(CustRecurrenceInvoice _custRecurrenceInvoice)
    {
        RecurrenceInvoice recurrenceInvoice;
        TransDate maxRecurrenceInvoiceDate;

        maxRecurrenceInvoiceDate =
            (select maxof(RecurrenceInvoiceDate) from recurrenceInvoice
                where recurrenceInvoice.CustRecurrenceInvoice == _custRecurrenceInvoice.RecId).RecurrenceInvoiceDate;

        return maxRecurrenceInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS318863</DeveloperDocumentation>
	<FormRef>recurrenceInvoice</FormRef>
	<Label>@SYS318922</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CustRecurrenceInvoice</TitleField1>
	<TitleField2>CustInvoiceTable</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>RecurrenceInvoiceIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustInvoiceTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayRecurrenceInvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRecurrenceInvoiceTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRecurrenceMiscChargesAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustRecurrenceInvoiceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRecurrenceInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecurrenceInvoice</Name>
			<Label>@SYS318922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustRecurrenceInvoiceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRecurrenceInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrenceInvoicePeriodEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Total</Name>
			<Label>@SYS8311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayRecurrenceInvoiceTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRecurrenceMiscChargesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRecurrenceInvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustRecurrenceInvoice</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustRecurrenceInvoiceGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RecurrenceInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS320952</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RecurrenceInvoicePeriodEndDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS50115</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RecurrenceInvoiceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustRecurrenceInvoiceGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustRecurrenceInvoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustInvoiceTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable_RecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceTable</Name>
					<Field>CustInvoiceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustRecurrenceInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustRecurrenceInvoice</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustRecurrenceInvoice</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustRecurrenceInvoice_RecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustRecurrenceInvoice</Name>
					<Field>CustRecurrenceInvoice</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustRecurrenceInvoiceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustRecurrenceInvoiceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustRecurrenceInvoiceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustRecurrenceInvoiceGroup_RecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustRecurrenceInvoiceGroup</Name>
					<Field>CustRecurrenceInvoiceGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>