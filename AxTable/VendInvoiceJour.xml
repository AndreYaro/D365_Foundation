<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceJour extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accDistributionTemplateRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>AccountingDistributionTemplateRecId</c> value that is associated with the invoice.
    /// </summary>
    /// <returns>
    /// The <c>AccountingDistributionTemplateRecId</c> value that is associated with this invoice.
    /// </returns>
    public AccountingDistributionTemplateRecId accDistributionTemplateRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateInternalInvoiceId</Name>
				<Source><![CDATA[
    NumberSequenceCode allocateInternalInvoiceId(AmountCur invoiceAmount)
    {
        RefRecId numberSequenceId;
        NumberSequenceReference reference;

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            switch (this.vendInvoiceJour_W().NoteType_MY)
            {
                case NoteType_MY::DebitNote:
                    reference = PurchParameters::numRefPurchDebitNoteId();
                    break;
                case NoteType_MY::CreditNote:
                    reference = PurchParameters::numRefPurchCreditNoteId();
                    break;
                case NoteType_MY::Blank:
                    reference = PurchParameters::numRefPurchInvoiceId();
                    break;
            }
        }
        else
        {
        // </GMY>
            if (invoiceAmount < 0)
            {
                reference = PurchParameters::numRefPurchCreditNoteId();
            }
            else
            {
                reference = PurchParameters::numRefPurchInvoiceId();
            }
        // <GMY>
        }
        // </GMY>

        numberSequenceId = NumberSequenceGroupRef::findNaturalKey(reference.NumberSequenceDatatype,
            NumberSeqScopeFactory::createDefaultScope().getId(),
            this.NumberSequenceGroup).NumberSequenceId;

        if (!numberSequenceId)
        {
            numberSequenceId = reference.NumberSequenceId;
        }

        return NumberSequenceTable::find(numberSequenceId).NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    AmountMST amountMST(AmountCur amountCur)
    {
        return CurrencyExchangeHelper::mstAmount(amountCur, this.CurrencyCode, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchRateSecondary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscDate</Name>
				<Source><![CDATA[
    void calcCashDiscDate()
    {
        this.CustVendInvoiceJour::calcCashDiscDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the due date for the invoice.
    /// </summary>
    public void calcDue()
    {
        this.CustVendInvoiceJour::calcDue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateLimit_ES</Name>
				<Source><![CDATA[
    PaymDueDateLimit_ES calcDueDateLimit_ES(PaymTerm _paymTerm, TransDate _transDate)
    {
        return this.CustVendInvoiceJour::calcDueDateLimit_ES(_paymTerm, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMSTAmounts</Name>
				<Source><![CDATA[
    public void calcMSTAmounts()
    {
        this.InvoiceAmountMST = this.amountMST(this.InvoiceAmount);
        this.SumMarkupMST = this.amountMST(this.SumMarkup);
        this.EndDiscMST = this.amountMST(this.EndDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscTxt</Name>
				<Source><![CDATA[
    display CashDiscFreeTxt cashDiscTxt()
    {
        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(this.TableId, this.RecId))
        {
            boolean isCashDiscCalculatedOnAmountInclTaxForVend = TaxCashDiscountParametersHelper::cashDiscInclTax(ModuleCustVend::Vend);

            return CashDisc::cashDiscTxt(this.CashDiscCode,
                                         this.DocumentDate ? this.DocumentDate : this.InvoiceDate,
                                         isCashDiscCalculatedOnAmountInclTaxForVend,
                                         this.InvoiceAmount,
                                         this.InvoiceAmount - this.SumTax,
                                         this.CurrencyCode,
                                         this.CashDiscDate,
                                         this.CashDisc,
                                         this.LanguageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATTaxAgentChargeType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if VAT tax agent charge source is correct
    /// </summary>
    /// <returns>
    /// True if correct; Otherwise false
    /// </returns>
    public boolean checkVATTaxAgentChargeType_RU()
    {
        VendInvoiceTrans vendInvoiceTrans;
        VATChargeSource_RU chargeSource;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;
        boolean firstIteration = true;

        if (!VendTable::find(this.OrderAccount).vatTaxAgent_RU)
        {
            return true;
        }

        while select TaxGroup, TaxItemGroup from vendInvoiceTrans
            where vendInvoiceTrans.PurchID == this.PurchId &&
                  vendInvoiceTrans.InvoiceId == this.InvoiceId &&
                  vendInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                  vendInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup &&
                  vendInvoiceTrans.InternalInvoiceId == this.InternalInvoiceId
        {
            if (vendInvoiceTrans.TaxGroup && vendInvoiceTrans.TaxItemGroup)
            {
                if (firstIteration)
                {
                    chargeSource = TaxTable::find(TaxTable::vatCode_RU(vendInvoiceTrans.TaxGroup, vendInvoiceTrans.TaxItemGroup)).vatChargeSource_RU;
                    firstIteration = false;
                }
                else if (chargeSource != TaxTable::find(TaxTable::vatCode_RU(vendInvoiceTrans.TaxGroup, vendInvoiceTrans.TaxItemGroup)).vatChargeSource_RU)
                {
                    return checkFailed(strFmt("@GLS115946", this.InvoiceId));
                }
            }
        }

        purchAgreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(this.DefaultDimension) as PurchAgreementHeaderExt_RU;

        if (!firstIteration && purchAgreementHeaderExt.RecId && chargeSource != purchAgreementHeaderExt.vatChargeSource)
        {
            return checkFailed(strFmt("@GLS115947", this.InvoiceId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValue</Name>
				<Source><![CDATA[
    display CostAmount costValue()
    {
        CostAmount costValue = 0;
        QueryRun queryRun = new QueryRun(this.queryVendInvoiceTrans());
        VendInvoiceTrans vendInvoiceTrans;

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(VendInvoiceTrans)))
            {
                vendInvoiceTrans = queryRun.get(tableNum(VendInvoiceTrans)) as VendInvoiceTrans;
                if (vendInvoiceTrans)
                {
                    costValue += vendInvoiceTrans.costValue();
                }
            }
        }

        return costValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSchedule</Name>
				<Source><![CDATA[
    void createPaymentSchedule(boolean _skipVersionChangeCheck = false)
    {
        this.CustVendInvoiceJour::createPaymentSched(null, _skipVersionChangeCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the corresponding fiscal document will create vendor transactions based on <c>SalesPurchOperationTye_BR</c> configuration.
    /// </summary>
    /// <returns>
    ///     Returns true if operation type is not set on <c>VendInvoiceJour</c> or the operation type is configured to create vendor transactions.
    /// </returns>
    public boolean createVendTrans_BR()
    {
        return this.SalesPurchOperationType_BR == 0 || SalesPurchOperationType_BR::find(this.SalesPurchOperationType_BR).CreateFinancialTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote</Name>
				<Source><![CDATA[
    // no prefix; used through CustVendInvoiceJour map
    public boolean creditNote()
    {
        VendInvoiceTrans vendInvoiceTrans;

        boolean ret = this.InvoiceAmount < 0;

        if (!ret)
        {
            select firstonly RecId from vendInvoiceTrans
                where vendInvoiceTrans.PurchID == this.PurchId &&
                      vendInvoiceTrans.InvoiceId == this.InvoiceId &&
                      vendInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                      vendInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup &&
                      vendInvoiceTrans.InternalInvoiceId == this.InternalInvoiceId &&
                      vendInvoiceTrans.RefReturnInvoiceTrans_W;

            ret = vendInvoiceTrans.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitCreditNoteReasonCode_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays reason code of debit note or credit note.
    /// </summary>
    /// <returns>
    /// The reason code of debit note or credit note.
    /// </returns>
    display ReasonCode debitCreditNoteReasonCode_MY()
    {
        return ReasonTableRef::find(this.vendInvoiceJour_W().ReasonTableRef).Reason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the delivery address for the invoice.
    /// </summary>
    /// <returns>
    /// The delivery address for the invoice.
    /// </returns>
    display LogisticsAddressing deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressing deliveryAddress_RU()
    {
        if (this.ConsigneeAccount_RU)
        {
            return CustTable::find(this.ConsigneeAccount_RU).address();
        }
        else
        {
            return this.PurchId ? PurchTable::find(this.PurchId).deliveryAddressing() : '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddressRecId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns delivery postal address record id for current invoice
    /// </summary>
    /// <returns>
    /// Delivery postal address record id for current invoice
    /// </returns>
    public LogisticsPostalAddressRecId deliveryPostalAddressRecId_RU()
    {
        return this.PurchId ? PurchTable::find(this.PurchId).deliveryAddress().RecId : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the vendor invoice register invoice date from what is in VendTrans
    /// <c>InvoiceDate</c> field on the <c>VendInvoiceJour</c> table.
    /// </summary>
    /// <returns>
    /// The InvoiceRegister invoice date.
    /// </returns>
    public display TransDate displayInvoiceDate()
    {
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        
        select firstOnly ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.ToVoucher == this.LedgerVoucher &&
               ledgerJournalVoucherChanged.ToDate == this.InvoiceDate;
        
        if (ledgerJournalVoucherChanged)
        {
            return ledgerJournalVoucherChanged.FromDate;
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the invoice status of unposted invoices.
    /// </summary>
    /// <returns>
    /// An <c>InvoiceStatus</c> enumeration value that indicates the status in the posting and payment
    /// process of the invoice.
    /// </returns>
    /// <remarks>
    /// The <c>InvoiceStatus</c> enumeration value contains five possible values. Posted values only
    /// represent three of those and therefore only three possible values are returned by this method. The
    /// <c>displayInvoiceStatus</c> method in the <c>VendInvoiceInfoTable</c> table contains the other
    /// three statuses.
    /// </remarks>
    public display InvoiceStatus displayInvoiceStatus()
    {
        VendTrans vendTrans;

        select firstonly Closed, LastSettleVoucher, SettleAmountCur from vendTrans
            where vendTrans.Voucher == this.LedgerVoucher &&
                vendTrans.AccountNum == this.InvoiceAccount &&
                vendTrans.TransDate == this.InvoiceDate;

        if ((vendTrans.LastSettleVoucher == '' || vendTrans.SettleAmountCur == 0) && vendTrans.Closed == dateNull())
        {
            return InvoiceStatus::Posted;
        }
        else if (vendTrans.Closed == dateNull() && vendTrans.LastSettleVoucher != "")
        {
            return InvoiceStatus::PartiallyPaid;
        }
        else
        {
            return InvoiceStatus::Paid;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIsVendorAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or retrieves the <c>Vendor Advance</c> field value.
    /// </summary>
    /// A Boolean value that specifies whether the caller is supplying a new value or wants to retrieve the current value.
    /// <returns>
    /// Yes if the invoice is marked as vendor advance; otherwise, No.
    /// </returns>
    display NoYes displayIsVendorAdvance()
    {
        NoYes isVendorAdvance;

        if (this.InvoiceType == PurchInvoiceType::VendorAdvance)
        {
            isVendorAdvance = NoYes::Yes;
        }
        else
        {
            isVendorAdvance = NoYes::No;
        }

        return isVendorAdvance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the vendor invoice register voucher number from what is in VendTrans
    /// <c>LedgerVoucher</c> field on the <c>VendInvoiceJour</c> table.
    /// </summary>
    /// <returns>
    /// The InvoiceRegister voucher number.
    /// </returns>
    public display Voucher displayLedgerVoucher()
    {
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        
        select firstOnly ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.ToVoucher == this.LedgerVoucher &&
               ledgerJournalVoucherChanged.ToDate == this.InvoiceDate;
        
        if (ledgerJournalVoucherChanged)
        {
            return ledgerJournalVoucherChanged.FromVoucher;
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOnHold</Name>
				<Source><![CDATA[
    display NoYes displayOnHold()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOrderAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or retrieves the <c>Order Account Name</c> value.
    /// </summary>
    /// A string value that is the Order Account Name
    /// <returns>
    /// A string value that is the Order Account Name
    /// </returns>
    public display Name displayOrderAccountName()
    {
        return this.vendTable_OrderAccount().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPackingSlipId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the packing slip number that is associated with the invoice.
    /// </summary>
    /// <returns>
    /// '*' if there is more than one packing slip that is associated with the invoice, the packing slip ID
    /// if there is one packing slip that is associated with the invoice, or an empty string if there are
    /// no packing slips that are associated with the invoice.
    /// </returns>
    public display PackingSlipId displayPackingSlipId()
    {
        VendInvoiceTrans vendInvoiceTrans;
        VendInvoicePackingSlipQuantityMatch vendInvoicePackingSlipQuantityMatch;
        VendPackingSlipTrans vendPackingSlipTrans;

        select count(RecId) from vendInvoiceTrans
            where vendInvoiceTrans.PurchID == this.PurchId &&
                vendInvoiceTrans.InvoiceId == this.InvoiceId &&
                vendInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                vendInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup &&
                vendInvoiceTrans.InternalInvoiceId == this.InternalInvoiceId
            exists join vendInvoicePackingSlipQuantityMatch
                where vendInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLIne == vendInvoiceTrans.SourceDocumentLine
            exists join vendPackingSlipTrans
                where vendPackingSlipTrans.SourceDocumentLine == vendInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine;

        if (vendInvoiceTrans.RecId == 0)
        {
            return '';
        }
        else if (vendInvoiceTrans.RecId == 1)
        {
            select PackingSlipId from vendPackingSlipTrans
                exists join vendInvoicePackingSlipQuantityMatch
                    where vendInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine == vendPackingSlipTrans.SourceDocumentLine
                exists join vendInvoiceTrans
                    where vendInvoiceTrans.SourceDocumentLine == vendInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLIne &&
                        vendInvoiceTrans.PurchID == this.PurchId &&
                        vendInvoiceTrans.InvoiceId == this.InvoiceId &&
                        vendInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                        vendInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup &&
                        vendInvoiceTrans.InternalInvoiceId == this.InternalInvoiceId;

            return vendPackingSlipTrans.PackingSlipId;
        }
        else
        {
            return "@SYS342615";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the vendor remittance address that is associated with the vendor <c>RemittanceAddress</c>
    /// field on the <c>VendInvoiceJour</c> table.
    /// </summary>
    /// <returns>
    /// The remittance address.
    /// </returns>
    public display RemittanceAddressing displayRemittanceAddress()
    {
        if (!hasFieldAccess(tableNum(LogisticsPostalAddress), fieldNum(LogisticsPostalAddress, Address),AccessType::View))
        {
            error("@SYS57330");
        }

        //Address based off of the address table recid on the table
        return LogisticsPostalAddress::addressFromRecId(this.RemittanceAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the vendor remittance location name that is associated with the vendor
    /// <c>RemittanceAddress</c> field on the <c>VendInvoiceJour</c> table.
    /// </summary>
    /// <returns>
    /// The remittance location name.
    /// </returns>
    public display RemittanceLocationName displayRemittanceLocation()
    {
        return LogisticsPostalAddress::locationNameFromRecId(this.RemittanceAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxBranchDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the tax branch code depending on the default dimension.
    /// </summary>
    /// <returns>
    /// Returns tax branch code getted by default dimension.
    /// </returns>
    display TaxBranchCode displayTaxBranchDimension()
    {
        return TaxBranchType::getTBDisplayValueByDefaultDimension(this.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuAllowEdit_W</Name>
				<Source><![CDATA[
    // Documents attached to customer invoice are read only, but
    // some fields of invoice itself can be
    boolean docuAllowEdit_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForCostAllocation_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if cost accocations exist for current invoice
    /// </summary>
    /// <returns>
    /// True if cost allocation exist, otherwise false
    /// </returns>
    public boolean existForCostAllocation_RU()
    {
        return (select firstonly RecId from costAllocationHistory_RU where costAllocationHistory_RU.AllocatedInvoiceJourRecId == this.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureJourSortedList_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return <c>List</c> object with factures created by current invoice
    /// </summary>
    /// <returns>
    /// <c>List</c> object with factures created by current invoice
    /// </returns>
    public RecordSortedList factureJourSortedList_RU()
    {
        FactureJour_RU factureJour;
        FactureTrans_RU factureTrans;

        MarkupTrans markupTrans;
        VendInvoiceTrans vendInvoiceTrans;

        RecordSortedList ret = this.CustVendInvoiceJour::factureJourSortedList_RU();

        while select factureJour
            join RecId from factureTrans
            where factureJour.Module == FactureModule_RU::Vend &&
                  factureJour.CustVendInvoiceAccount == this.InvoiceAccount &&
                  factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module == FactureModule_RU::Vend &&
                  factureTrans.FactureLineType == FactureLineType_RU::InvoiceLine &&
                  factureTrans.InvoiceDate == this.InvoiceDate &&
                  factureTrans.InvoiceId == this.InvoiceId &&
                  factureTrans.SalesPurchId == this.PurchId &&
                  factureTrans.NumberSequenceGroup == this.NumberSequenceGroup &&
                  factureTrans.InternalInvoiceId == this.InternalInvoiceId
        {
            if (!ret.find(factureJour))
            {
                ret.ins(factureJour);
            }
        }

        // Header markups
        while select factureJour
            join RecId from factureTrans
            join RecId from markupTrans
            where factureJour.Module == FactureModule_RU::Vend &&
                  factureJour.CustVendInvoiceAccount == this.InvoiceAccount &&
                  factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module == FactureModule_RU::Vend &&
                  factureTrans.FactureLineType == FactureLineType_RU::Markup &&
                  markupTrans.RecId == factureTrans.MarkupRefRecId &&
                  markupTrans.TransTableId == this.TableId &&
                  markupTrans.TransRecId == this.RecId
        {
            if ( !ret.find(factureJour))
            {
                ret.ins(factureJour);
            }
        }

        // Line markups
        while select factureJour
            join RecId from factureTrans
            join RecId from markupTrans
            join RecId from vendInvoiceTrans
            where factureJour.Module == FactureModule_RU::Vend &&
                  factureJour.CustVendInvoiceAccount == this.InvoiceAccount &&
                  factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module == FactureModule_RU::Vend &&
                  factureTrans.FactureLineType == FactureLineType_RU::Markup &&
                  markupTrans.RecId == factureTrans.MarkupRefRecId &&
                  markupTrans.TransTableId == vendInvoiceTrans.TableId &&
                  vendInvoiceTrans.RecId == markupTrans.TransRecId &&
                  vendInvoiceTrans.PurchID == this.PurchId &&
                  vendInvoiceTrans.InvoiceId == this.InvoiceId &&
                  vendInvoiceTrans.InternalInvoiceId == this.InternalInvoiceId &&
                  vendInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                  vendInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
        {
            if ( !ret.find(factureJour))
            {
                ret.ins(factureJour);
            }
        }

        // Invoice round-offs && discounts
        while select factureJour
            exists join factureTrans
            where factureJour.Module == FactureModule_RU::Vend &&
                  factureJour.CustVendInvoiceAccount == this.InvoiceAccount &&
                  factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module == FactureModule_RU::Vend &&
                 (factureTrans.FactureLineType == FactureLineType_RU::InvoiceEndDisc ||
                  factureTrans.FactureLineType == FactureLineType_RU::InvoiceRoundOff) &&
                  factureTrans.InvoiceDate == this.InvoiceDate &&
                  factureTrans.InvoiceId == this.InvoiceId &&
                  factureTrans.SalesPurchId == this.PurchId &&
                  factureTrans.NumberSequenceGroup == this.NumberSequenceGroup &&
                  factureTrans.InternalInvoiceId == this.InternalInvoiceId
        {
            if (!ret.find(factureJour))
            {
                ret.ins(factureJour);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>FiscalDocument_BR</c> related to the <c>vendInvoiceJour</c>
    /// </summary>
    /// <returns>
    ///     Returns a record of <c>FiscalDocument_BR</c>.
    /// </returns>
    public FiscalDocument_BR fiscalDocument_BR()
    {
        FiscalDocument_BR fiscalDocument;

        select fiscalDocument
            where fiscalDocument.RefTableId == this.TableId &&
                  fiscalDocument.RefRecId == this.RecId;

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectedInvoiceDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method created for use when calling <c>CustVendInvoiceJour</c> map method.
    /// </summary>
    /// <returns>
    /// Date of corrected invoice.
    /// </returns>
    public CorrectedInvoiceDate_RU getCorrectedInvoiceDate_RU()
    {
        return this.CorrectedInvoiceDate_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method created for use when calling <c>CustVendInvoiceJour</c> map method.
    /// </summary>
    /// <returns>
    /// Id of corrected invoice.
    /// </returns>
    public CorrectedInvoiceId_RU getCorrectedInvoiceId_RU()
    {
        return this.CorrectedInvoiceId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInternalInvoiceId</Name>
				<Source><![CDATA[
    PurchInternalInvoiceId getInternalInvoiceId(NumberSequenceCode numberSequence)
    {
        if (numberSequence)
        {
            return NumberSeq::newGetNumFromCode(numberSequence).num();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInternalInvoiceIdFromVendTrans</Name>
				<Source><![CDATA[
    PurchInternalInvoiceId getInternalInvoiceIdFromVendTrans(AmountCur invoiceAmount)
    {
        NumberSequenceAllowSameAs allowSameAs;
        PurchInternalInvoiceId internalInvoiceId;

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            switch (this.vendInvoiceJour_W().NoteType_MY)
            {
                case NoteType_MY::DebitNote:
                    allowSameAs = PurchParameters::numRefPurchDebitNoteVoucher().AllowSameAs;
                    break;
                case NoteType_MY::CreditNote:
                    allowSameAs = PurchParameters::numRefPurchCreditNoteVoucher().AllowSameAs;
                    break;
                case NoteType_MY::Blank:
                    allowSameAs = PurchParameters::numRefPurchInvoiceVoucher().AllowSameAs;
                    break;
            }
        }
        else
        {
        // </GMY>
            // <GEERU>
            if (!this.Correct_RU)
            {
                // </GEERU>
                if (invoiceAmount < 0)
                {
                    allowSameAs = PurchParameters::numRefPurchCreditNoteVoucher().AllowSameAs;
                }
                else
                {
                    allowSameAs = PurchParameters::numRefPurchInvoiceVoucher().AllowSameAs;
                }
                // <GEERU>
            }
            // </GEERU>
        // <GMY>
        }
        // </GMY>

        if (allowSameAs)
        {
            internalInvoiceId = this.LedgerVoucher;
        }
        else
        {
            internalInvoiceId = this.getInternalInvoiceId(this.allocateInternalInvoiceId(invoiceAmount));
        }

        return internalInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNoteType_MY</Name>
				<Source><![CDATA[
    private NoteType_MY getNoteType_MY()
    {
        if (this.InvoiceAmount < 0)
        {
            return NoteType_MY::CreditNote;
        }
        else if (this.InvoiceAmount >= 0 && this.vendInvoiceJour_W().HasReference_MY)
        {
            return NoteType_MY::DebitNote;
        }
        else
        {
            return NoteType_MY::Blank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFDIUUID_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unique identification of CDFI document
    /// </summary>
    /// <returns>
    /// The CFDI identification
    /// </returns>
    public EInvoiceCFDIUUID_MX getCFDIUUID_MX()
    {
        return this.CFDIUUID_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFC_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor RFC
    /// </summary>
    /// <returns>
    /// The RFC number
    /// </returns>
    public RFC_MX getRFC_MX()
    {
        return this.vendTable_InvoiceAccount().RFC_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupId</Name>
				<Source><![CDATA[
    CustVendGroupId groupId()
    {
        return this.vendTable_InvoiceAccount().VendGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPositiveTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if exists any lines for current invoice with positive quantity
    /// </summary>
    /// <returns>
    /// True if exists any lines for current invoice with positive quantity, otherwise false
    /// </returns>
    public boolean hasPositiveTrans_RU()
    {
        VendInvoiceTrans vendInvoiceTrans;

        select firstonly RecId from vendInvoiceTrans
            where vendInvoiceTrans.PurchID == this.PurchId
               && vendInvoiceTrans.InvoiceId == this.InvoiceId
               && vendInvoiceTrans.InvoiceDate == this.InvoiceDate
               && vendInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
               && vendInvoiceTrans.InternalInvoiceId == this.InternalInvoiceId
               && vendInvoiceTrans.Qty > 0;

        return vendInvoiceTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initApprovalFromPurchTotals</Name>
				<Source><![CDATA[
    void initApprovalFromPurchTotals(PurchTotals _purchTotals)
    {
        AmountCur invoiceAmount = this.InvoiceAmount;

        this.initFromPurchTotals(_purchTotals);

        this.InvoiceAmount = invoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        #EECountryRegionCodes
        #ISOCountryRegionCodes

        //<GTH>
        LedgerJournalTransExtensionTH ledgerJournalTransExtensionTH;
        VendInvoiceJourExtensionTH vendInvoiceJourExtensionTH;
        //</GTH>

        this.initFromVendTable(VendTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension()));

        this.CustVendInvoiceJour::initFromLedgerJournalTrans(_ledgerJournalTrans);

        this.PaymId = _ledgerJournalTrans.PaymId;
        this.Listcode = _ledgerJournalTrans.Listcode;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.CFDIUUID_MX = _ledgerJournalTrans.CFDIUUID_MX;
            this.InvoiceSeries_MX = _ledgerJournalTrans.InvoiceSeries_MX;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll)
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB]))
        {
            this.PurchReceiptDate_W = _ledgerJournalTrans.ReceiptDate_W;
        }
        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            ledgerJournalTransExtensionTH = LedgerJournalTransExtensionTH::findByLedgerJournalTrans(_ledgerJournalTrans.RecId);
            vendInvoiceJourExtensionTH = this.vendInvoiceJourExtensionTH();

            vendInvoiceJourExtensionTH.InvoiceDate = ledgerJournalTransExtensionTH.InvoiceDate;
            vendInvoiceJourExtensionTH.InvoiceReceiptDate = ledgerJournalTransExtensionTH.InvoiceReceiptDate;
            this.DocumentNum = _ledgerJournalTrans.DocumentNum;
            this.DocumentDate = _ledgerJournalTrans.DocumentDate;
            vendInvoiceJourExtensionTH.TaxInvoiceReceiptDate = ledgerJournalTransExtensionTH.TaxInvoiceReceiptDate;
            vendInvoiceJourExtensionTH.RealVendName = ledgerJournalTransExtensionTH.RealVendName;

            this.SysExtensionSerializerMap::packExtensionTable(vendInvoiceJourExtensionTH);
        }
        //</GTH>
        VendInvoiceJour_W vendInvoiceJour_W = this.vendInvoiceJour_W();
        vendInvoiceJour_W.ReasonTableRef = _ledgerJournalTrans.ReasonRefRecID;
        this.packVendInvoiceJour_W(vendInvoiceJour_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>VendInvoiceJour</c> record based on the data in the specified
    /// <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <param name="_parmTable">
    /// A <c>VendInvoiceInfoTable</c> record that contains the data to copy.
    /// </param>
    void initFromParmTable(VendInvoiceInfoTable _parmTable)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        VendTable vendTable;
        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU;
        //<GTH>
        VendInvoiceJourExtensionTH vendInvoiceJourExtensionTH;
        VendInvoiceInfoTableExtensionTH vendInvoiceInfoTableExtensionTH;
        //</GTH>

        if (_parmTable.isNonPO() || _parmTable.isAdvance())
        {
            vendTable = _parmTable.vendTable_InvoiceAccount();

            this.PurchaseType = PurchaseType::Purch;
            this.PurchId = _parmTable.isAdvance() ? _parmTable.PurchId : '';
            this.OrderAccount = _parmTable.OrderAccount;
            this.TaxGroup = _parmTable.TaxGroup;
            this.vatNum = _parmTable.vatNum;
            this.VendGroup = vendTable.VendGroup;
            this.ItemBuyerGroupId = vendTable.ItemBuyerGroupId;
            this.DlvTerm = vendTable.DlvTerm;
            this.DlvMode = vendTable.DlvMode;
            this.Payment = _parmTable.Payment;
            this.PaymentSched = _parmTable.PaymentSched;
            this.PaymDayId = _parmTable.paymDayId();
            this.CashDiscCode = _parmTable.CashDiscCode;

            if (TaxParameters::find().CashDiscOnInvoice)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
                this.CashDiscPercent = _parmTable.CashDiscPercent;
            }

            this.CashDisc = 0;
            this.CashDiscDate = naDate();
            this.InclTax = _parmTable.InclTax;
            this.PostingProfile = _parmTable.PostingProfile;
            this.NumberSequenceGroup = _parmTable.NumberSequenceGroup;
            this.LanguageId = DirPartyTable::findRec(vendTable.Party).LanguageId;

            this.Qty = 0;
            this.Volume = 0;
            this.Weight = 0;

            this.SumLineDisc = 0;
            this.SalesBalance = 0;
            this.EndDisc = 0;
            this.InvoiceAmount = 0;
            this.CurrencyCode = _parmTable.CurrencyCode;

            this.DefaultDimension = _parmTable.DefaultDimension;

            LogisticsPostalAddress deliveryPostalAddress = LogisticsPostalAddress::findRecId(_parmTable.DeliveryPostalAddress);
            this.CountryRegionId = deliveryPostalAddress.CountryRegionId;
            this.State = deliveryPostalAddress.State;

            this.EnterpriseNumber = _parmTable.EnterpriseNumber;

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                this.PurchAgreementHeader_PSN = _parmTable.PurchAgreementHeader_PSN;
            }
        }

        this.InvoiceAccount = _parmTable.InvoiceAccount;
        this.DocumentNum = _parmTable.DocumentNum;
        this.DocumentDate = _parmTable.DocumentDate;
        this.PaymId = _parmTable.PaymId;
        this.FixedDueDate = _parmTable.FixedDueDate;
        this.VendInvoiceGroup = _parmTable.VendInvoiceGroup;
        this.DocumentOrigin = _parmTable.DocumentOrigin;
        this.VendPaymentGroup = _parmTable.VendPaymentGroup;
        this.Description = _parmTable.Description;

        this.SourceDocumentHeader = _parmTable.SourceDocumentHeader;
        this.SourceDocumentLine = _parmTable.SourceDocumentLine;

        if (_parmTable.FixedExchRate || _parmTable.ExchRate != 0.0)
        {
            this.ExchRate = _parmTable.ExchRate;
            this.ExchRateSecondary = _parmTable.ExchRateSecondary;
            this.Triangulation = _parmTable.euroTriangulation;
            this.ReportingCurrencyExchangeRate = _parmTable.ReportingCurrencyExchangeRate;
        }
        else
        {
            this.Triangulation = Currency::triangulation(this.CurrencyCode,this.InvoiceDate);
            this.ExchRate = ExchangeRateHelper::exchRate(this.CurrencyCode, this.InvoiceDate);
            this.ExchRateSecondary = ExchangeRateHelper::exchRateSecond(this.CurrencyCode, this.InvoiceDate);

            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
            exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
            exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
            exchangeRateHelper.parmExchangeDate(this.InvoiceDate);

            this.ReportingCurrencyExchangeRate = exchangeRateHelper.getExchangeRate1();
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendInvoiceInfoTable_RU = _parmTable.vendInvoiceInfoTable_RU();
            this.AttorneyId_RU = vendInvoiceInfoTable_RU.AttorneyId_RU;
            this.AttorneyDate_RU = vendInvoiceInfoTable_RU.AttorneyDate_RU;
            this.AttorneyIssuedName_RU = vendInvoiceInfoTable_RU.AttorneyIssuedName_RU;

            this.vatOnPayment_RU = vendInvoiceInfoTable_RU.vatOnPayment_RU;
            this.Correct_RU = vendInvoiceInfoTable_RU.Correct_RU;
            this.CorrectedInvoiceId_RU = vendInvoiceInfoTable_RU.CorrectedInvoiceId_RU;
            this.CorrectedInvoiceDate_RU = vendInvoiceInfoTable_RU.CorrectedInvoiceDate_RU;

            if (_parmTable.PostingProfile)
            {
                this.PostingProfile = _parmTable.PostingProfile;
            }
            this.InventProfileType_RU = vendInvoiceInfoTable_RU.InventProfileType_RU;
            if (_parmTable.isNonPO())
            {
                this.ConsigneeAccount_RU = vendInvoiceInfoTable_RU.ConsigneeAccount_RU;
                this.ConsignorAccount_RU = vendInvoiceInfoTable_RU.ConsignorAccount_RU;
            }

            this.CorrectionType_RU = vendInvoiceInfoTable_RU.correctionType_RU();
        }
        // </GEERU>

        if (BankLCImportFeatureChecker::checkBankLCImportEnabled())
        {
            this.BankLCImportLine = _parmTable.BankLCImportLine;
        }

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            vendInvoiceJourExtensionTH      = this.vendInvoiceJourExtensionTH();
            vendInvoiceInfoTableExtensionTH = _parmTable.vendInvoiceInfoTableExtensionTH();

            if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
            {
                vendInvoiceJourExtensionTH.InvoiceDate = vendInvoiceInfoTableExtensionTH.InvoiceDate;
                vendInvoiceJourExtensionTH.InvoiceReceiptDate = vendInvoiceInfoTableExtensionTH.InvoiceReceiptDate;
                this.DocumentNum = _parmTable.DocumentNum;
                this.DocumentDate = _parmTable.DocumentDate;
                vendInvoiceJourExtensionTH.TaxInvoiceReceiptDate = vendInvoiceInfoTableExtensionTH.TaxInvoiceReceiptDate;
                vendInvoiceJourExtensionTH.RealVendName = vendInvoiceInfoTableExtensionTH.RealVendName;
            }

            vendInvoiceJourExtensionTH.InvoicePostalAddress = vendInvoiceInfoTableExtensionTH.PostalAddress;
            this.SysExtensionSerializerMap::packExtensionTable(vendInvoiceJourExtensionTH);
        }
        //</GTH>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.CFDIUUID_MX = _parmTable.vendInvoiceInfoTable_W().CFDIUUID_MX;
            this.InvoiceSeries_MX = _parmTable.vendInvoiceInfoTable_W().InvoiceSeries_MX;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    void initFromPurchTable(PurchTable purchTable)
    {
        #ISOCountryRegionCodes
        // </GEERU>
        PurchTable_RU purchTable_RU;
        // <GEERU>

        // <GMY>
        VendInvoiceJour_W vendInvoiceJour_W;
        PurchTable_W purchTable_W;
        // </GMY>

        VendInvoiceJour_Intrastat vendInvoiceJour_Intrastat;

        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(VendInvoiceJour_Intrastat)))
        {
            vendInvoiceJour_Intrastat = this.vendInvoiceJour_Intrastat();
        }

        this.PurchaseType = purchTable.PurchaseType;
        this.PurchId = purchTable.PurchId;
        this.OrderAccount = purchTable.OrderAccount;
        this.TaxGroup = purchTable.TaxGroup;
        this.vatNum = purchTable.vatNum;
        this.VendGroup = purchTable.VendGroup;
        this.ItemBuyerGroupId = purchTable.ItemBuyerGroupId;
        this.DlvTerm = purchTable.DlvTerm;
        this.DlvMode = purchTable.DlvMode;
        this.Payment = purchTable.Payment;
        this.PaymentSched = purchTable.PaymentSched;
        this.PaymDayId = purchTable.paymDayId();
        this.CashDiscCode = purchTable.CashDisc;
        this.numberSequenceGroup = purchTable.NumberSequenceGroup;

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
            this.CashDiscPercent = purchTable.CashDiscPercent;
        }

        this.CashDisc = 0;
        this.CashDiscDate = naDate();

        this.InclTax = purchTable.InclTax;
        this.ReturnItemNum = purchTable.ReturnItemNum;
        // <GEERU>
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || !this.PostingProfile)
        {
            // </GEERU>
            this.PostingProfile = purchTable.PostingProfile;
            // <GEERU>
        }
        // </GEERU>
        this.NumberSequenceGroup = purchTable.NumberSequenceGroup;
        this.LanguageId = purchTable.LanguageId;

        this.Qty = 0;
        this.Volume = 0;
        this.Weight = 0;

        this.SumLineDisc = 0;
        this.SalesBalance = 0;
        this.EndDisc = 0;
        this.InvoiceAmount = 0;
        this.CurrencyCode = purchTable.CurrencyCode;

        this.DefaultDimension = purchTable.DefaultDimension;

        LogisticsPostalAddress deliveryAddress = purchTable.deliveryAddress();
        this.CountryRegionId = deliveryAddress.CountryRegionId;
        this.State = deliveryAddress.State;

        this.InterCompanyCompanyId = purchTable.InterCompanyCompanyId;
        this.InterCompanySalesId = purchTable.InterCompanySalesId;
        this.EnterpriseNumber = purchTable.EnterpriseNumber;
        this.Listcode = purchTable.ListCode;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIS]))
        {
            this.VendInvoiceDeclaration_IS = purchTable.VendInvoiceDeclaration_IS;
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTable_RU = purchTable.purchTable_RU();
            this.ConsigneeAccount_RU = purchTable_RU.ConsigneeAccount_RU;
            this.ConsignorAccount_RU = purchTable_RU.ConsignorAccount_RU;
        }
        // </GEERU>

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            this.UnitedVATInvoice_LT = purchTable.UnitedVATInvoice_LT;
            this.WhoIsAuthor_LT = LtDocOriginator::Vendor;
        }
        // </GEELT>

        if (IntrastatCountryRegionParameters::isInEUByIsoCode() && !this.TransportationDocument)
        {
            TransportationDocument::copy(purchTable, this);
        }

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.IntrastatFulfillmentDate_HU = purchTable.IntrastatFulfillmentDate_HU;
        }
        // </GEEHU>

        if (BrazilParameters::isEnabled())
        {
            this.initFromPurchTablePost_BR(purchTable);
        }
        // <GEECZ>
        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(VendInvoiceJour_Intrastat)))
        {
            vendInvoiceJour_Intrastat.SpecialMovement_CZ = purchTable.purchTable_Intrastat().SpecialMovement_CZ;
            this.packVendInvoiceJour_Intrastat(vendInvoiceJour_Intrastat);
        }
        // </GEECZ>
        // <GEELV>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            this.IntrastatAddValue_LV = purchTable.IntrastatAddValue_LV;
        }
        // </GEELV>

        // <GMY>
        vendInvoiceJour_W = this.vendInvoiceJour_W();
        vendInvoiceJour_W.ReasonTableRef = purchTable.ReasonTableRef;
        vendInvoiceJour_W.HasReference_MY = purchTable.hasLinesWithRefrence_MY();

        purchTable_W = purchTable.purchTable_W();
        vendInvoiceJour_W.GSTApprovalNumber_MY = purchTable_W.GSTApprovalNumber_MY;
        this.packVendInvoiceJour_W(vendInvoiceJour_W);
        // </GMY>

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            VendInvoiceJourExtensionTH vendInvoiceJourExtensionTH = this.vendInvoiceJourExtensionTH();
            vendInvoiceJourExtensionTH.ReasonTableRef = purchTable.ReasonTableRef;
            this.SysExtensionSerializerMap::packExtensionTable(vendInvoiceJourExtensionTH);
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTablePost_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes brazilian fields
    /// </summary>
    /// <param name="purchTable">
    /// <c>PurchTable</c> record
    /// </param>
    public void initFromPurchTablePost_BR(PurchTable purchTable)
    {
        PurchTable_BR purchTable_BR = purchTable.purchTable_BR();

        this.ServiceCodeOnDlvAddress_BR = purchTable_BR.ServiceCodeOnDlvAddress_BR;
        this.SalesPurchOperationType_BR = purchTable_BR.SalesPurchOperationType_BR;
        this.VendFinalUser_BR = purchTable_BR.VendFinalUser_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTotals</Name>
				<Source><![CDATA[
    public void initFromPurchTotals(PurchTotals _purchTotals)
    {
        // <GMY>
        VendInvoiceJour_W vendInvoiceJour_W;
        // </GMY>

        DocumentStatus  documentStatus = VendInvoiceInfoTable::findPurchInvFromVendInvoiceJour(this.PurchId,this.InvoiceId,this.ParmId).Ordering;

        this.CurrencyCode = _purchTotals.purchCurrency();

        this.Qty = _purchTotals.purchQty();
        this.Weight = _purchTotals.purchWeight();
        this.Volume = _purchTotals.purchVolume();

        this.SalesBalance = _purchTotals.purchBalance();

        this.EndDisc = _purchTotals.purchEndDisc();

        this.SumMarkup = _purchTotals.purchMarkup();

        this.SumTax = _purchTotals.purchTaxTotal();
        this.SumLineDisc = _purchTotals.purchLineDisc();

        //Cash discount should not be computed on Advance
        if ((this.InvoiceType != PurchInvoiceType::VendorAdvance) &&
            (documentStatus != DocumentStatus::ApproveJournal))
        {
            this.CashDisc = _purchTotals.purchCashDiscAmount();
            this.CashDiscDate = _purchTotals.purchCashDiscDate();
            this.CashDiscCode = _purchTotals.purchCashDiscCode();
        }

        this.TaxRoundOff = _purchTotals.purchTaxRoundOff();
        this.InvoiceRoundOff = _purchTotals.purchRoundOff();

        this.InvoiceAmount = _purchTotals.purchTotalAmount();  
        this.ReverseChargeAmount = _purchTotals.totalTaxReverseCharge();

        // <GIN>
        if (TaxParameters::isVATEnable_IN())
        {
            this.vatAmount_IN = _purchTotals.vatAmountTotal_IN();
        }
        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && TaxParameters::isCustomsEnable_IN())
        {
            this.InvoiceAmount = this.InvoiceAmount - _purchTotals.tax().getCustomsDuty_IN();
        }
        if (TaxWithholdParameters_IN::checkTaxParameters()
            && PaymSched::find(this.PaymentSched).PaymBy == PaymSchedBy::AmountByPayment)
        {
            this.TaxWithholdAmount_IN = _purchTotals.parmTaxWithholdAmount_IN();
        }
        // </GIN>

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            vendInvoiceJour_W = this.vendInvoiceJour_W();
            vendInvoiceJour_W.NoteType_MY = this.getNoteType_MY();
            this.packVendInvoiceJour_W(vendInvoiceJour_W);
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSADInvoice_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize invoice from SAD invoice reference
    /// </summary>
    /// <param name="_sadInvoice">
    /// SAD invoice reference
    /// </param>
    public void initFromSADInvoice_PL(PlSADInvoice _sadInvoice)
    {
        if (_sadInvoice)
        {
            this.InvoiceAmount += _sadInvoice.InvoiceMiscCharg + _sadInvoice.InvoiceInsurance + _sadInvoice.InvoiceTransport;
            this.DocumentDate = _sadInvoice.DocumentDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSADTable_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalize duty invoice from SAD document
    /// </summary>
    /// <param name="_sadTable">
    /// SAD document
    /// </param>
    public void initFromSADTable_PL(PlSADTable _sadTable)
    {
        VendTable vendTable = VendTable::find(_sadTable.sadDutyVend);

        this.PurchaseType = PurchaseType::Purch;
        this.PurchId = _sadTable.sadNumber;
        this.OrderAccount = _sadTable.sadDutyVend;
        this.InvoiceAccount = _sadTable.sadDutyVend;

        this.VendGroup = vendTable.VendGroup;
        this.Payment = vendTable.PaymTermId;
        this.PaymentSched = vendTable.PaymSched;
        this.PaymDayId = vendTable.PaymDayId;
        this.CashDisc = 0;
        this.PostingProfile = VendParameters::find().PostingProfile;

        this.Qty = 0;
        this.Volume = 0;
        this.Weight = 0;

        this.SumLineDisc = 0;
        this.SalesBalance = 0;
        this.EndDisc = 0;
        this.InvoiceAmount = 0;
        this.DocumentNum = _sadTable.sadNumber;
        this.CurrencyCode = CompanyInfoHelper::standardCurrency();

        this.Triangulation = Currency::triangulation(this.CurrencyCode, this.InvoiceDate);
        this.ExchRate = ExchangeRateHelper::exchRate(CompanyInfoHelper::standardCurrency(), this.InvoiceDate);
        this.ExchRateSecondary = this.ExchRate;

        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
        exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
        exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
        exchangeRateHelper.parmExchangeDate(this.InvoiceDate);

        this.ReportingCurrencyExchangeRate = exchangeRateHelper.getExchangeRate1();

        this.DefaultDimension = _sadTable.DefaultDimension;

        LogisticsPostalAddress postalAddress = vendTable.postalAddress();
        this.CountryRegionId = postalAddress.CountryRegionId;
        this.State = postalAddress.State;

        this.InvoiceId = _sadTable.sadNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>VendInvoiceJour</c> table record based on the data in the specified
    /// <c>VendInvoiceInfoTable</c> table record.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> table record that contains the data to copy.
    /// </param>
    public void initFromVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        TransDate packingSlipDate;

        // <GEEU>
        #ISOCountryRegionCodes
        // </GEEU>
        #EECountryRegionCodes
        //<GTH>
        VendInvoiceJourExtensionTH vendInvoiceJourExtensionTH;
        VendInvoiceInfoTableExtensionTH vendInvoiceInfoTableExtensionTH;
        //</GTH>

        // <GIN>
        VendInvoiceInfoTable_IN vendInvoiceInfoTableLoc;
        VendInvoiceJour_IN vendInvoiceJourLoc;
        // </GIN>
        // <GMY>
        VendInvoiceJour_W vendInvoiceJour_W;
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;
        // </GMY>

        this.VendorRequestedWorkerEmail = _vendInvoiceInfoTable.VendorRequestedWorkerEmail;
        this.LogisticsElectronicAddress = _vendInvoiceInfoTable.LogisticsElectronicAddress;

        this.DeliveryName = _vendInvoiceInfoTable.DeliveryName;
        this.DeliveryPostalAddress = _vendInvoiceInfoTable.DeliveryPostalAddress;

        this.InvoiceType = _vendInvoiceInfoTable.InvoiceType;
        this.Listcode = _vendInvoiceInfoTable.ListCode;

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            vendInvoiceJourExtensionTH = this.vendInvoiceJourExtensionTH();
            vendInvoiceInfoTableExtensionTH = _vendInvoiceInfoTable.vendInvoiceInfoTableExtensionTH();

            if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
            {
                vendInvoiceJourExtensionTH.InvoiceDate = vendInvoiceInfoTableExtensionTH.InvoiceDate;
                vendInvoiceJourExtensionTH.InvoiceReceiptDate = vendInvoiceInfoTableExtensionTH.InvoiceReceiptDate;
                this.DocumentNum = _vendInvoiceInfoTable.DocumentNum;
                this.DocumentDate = _vendInvoiceInfoTable.DocumentDate;
                vendInvoiceJourExtensionTH.TaxInvoiceReceiptDate = vendInvoiceInfoTableExtensionTH.TaxInvoiceReceiptDate;
                vendInvoiceJourExtensionTH.RealVendName = vendInvoiceInfoTableExtensionTH.RealVendName;
            }

            vendInvoiceJourExtensionTH.InvoicePostalAddress = vendInvoiceInfoTableExtensionTH.PostalAddress;
            this.SysExtensionSerializerMap::packExtensionTable(vendInvoiceJourExtensionTH);
        }
        //</GTH>
        // <GJP>
        if (VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            this.ConsTarget_JP = _vendInvoiceInfoTable.vendInvoiceInfoTable_W().ConsTarget_JP;
        }
        // </GJP>
        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            vendInvoiceJour_W = this.vendInvoiceJour_W();
            vendInvoiceInfoTable_W = _vendInvoiceInfoTable.vendInvoiceInfoTable_W();
            vendInvoiceJour_W.InvoiceType_MY = vendInvoiceInfoTable_W.InvoiceType_MY;
            vendInvoiceJour_W.TaxGSTImportDeclarationNo_MY = vendInvoiceInfoTable_W.TaxGSTImportDeclarationNo_MY;
            this.packVendInvoiceJour_W(vendInvoiceJour_W);
        }
        // </GMY>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && VendorInvoiceSupportUUIDinPLFlight::instance().isEnabled())
        {
            vendInvoiceJour_W = this.vendInvoiceJour_W();
            vendInvoiceInfoTable_W = _vendInvoiceInfoTable.vendInvoiceInfoTable_W();
            vendInvoiceJour_W.SubmissionUUID_EG = vendInvoiceInfoTable_W.SubmissionUUID_W;
            this.packVendInvoiceJour_W(vendInvoiceJour_W);
        }

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(_vendInvoiceInfoTable, this);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll)
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB]))
        {
            this.PurchReceiptDate_W = _vendInvoiceInfoTable.vendInvoiceInfoTable_W().PurchReceiptDate_W;
        }

        if (BrazilParameters::isEnabled())
        {
            this.initFromVendInvoiceInfoTablePost_BR(_vendInvoiceInfoTable);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.CFDIUUID_MX = _vendInvoiceInfoTable.vendInvoiceInfoTable_W().CFDIUUID_MX;
            this.InvoiceSeries_MX = _vendInvoiceInfoTable.vendInvoiceInfoTable_W().InvoiceSeries_MX;
        }

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.IntrastatFulfillmentDate_HU = _vendInvoiceInfoTable.vendInvoiceInfoTable_W().IntrastatFulfillmentDate_HU;
        }
        // </GEEHU>

        packingSlipDate = _vendInvoiceInfoTable.firstPackingSlipDate_ES();

        if (packingSlipDate)
        {
            this.DeliveryDate_ES = packingSlipDate;
        }
        else
        {
            this.DeliveryDate_ES = _vendInvoiceInfoTable.purchTable().DeliveryDate;
        }

        // <GIN>
        if (TaxParameters::isExciseEnable_IN() && _vendInvoiceInfoTable.purchTable().isExcisable_IN())
        {
            vendInvoiceInfoTableLoc = _vendInvoiceInfoTable.vendInvoiceInfoTable_IN();
            vendInvoiceJourLoc = this.vendInvoiceJour_IN();
            vendInvoiceJourLoc.ExciseInvoiceAddress = vendInvoiceInfoTableLoc.ExciseInvoiceAddress;
            this.packVendInvoiceJour_IN(vendInvoiceJourLoc);
        }
        // </GIN>

        this.ImportedSalesTax = _vendInvoiceInfoTable.ImportedSalesTax;
        this.ImportedAmount = _vendInvoiceInfoTable.ImportedAmount;
        this.ReceivedDate = _vendInvoiceInfoTable.ReceivedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoTablePost_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes brazilian fields based on associated <c>VendInvoiceInfoTable</c> record
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// A record of <c>VendInvoiceInfoTable</c> table
    /// </param>
    public void initFromVendInvoiceInfoTablePost_BR(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W = _vendInvoiceInfoTable.vendInvoiceInfoTable_W();

        this.FiscalDocumentType_BR = vendInvoiceInfoTable_W.FiscalDocumentType_BR;
        this.SalesPurchOperationType_BR = vendInvoiceInfoTable_W.SalesPurchOperationType_BR;
        this.ReasonTableRef_BR = vendInvoiceInfoTable_W.ReasonTableRef_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    void initFromVendTable(VendTable vendTable)
    {
        this.TaxGroup = vendTable.TaxGroup;
        this.Payment = vendTable.PaymTermId;
        this.PaymDayId = vendTable.PaymDayId ? vendTable.PaymDayId : PaymTerm::find(this.Payment).PaymDayId;

        this.calcDue();

        this.VendGroup = vendTable.VendGroup;

        this.OrderAccount = vendTable.AccountNum;
        this.InvoiceAccount = vendTable.InvoiceAccount ? vendTable.InvoiceAccount : vendTable.AccountNum;
        this.vatNum = this.vendTable_InvoiceAccount().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.InvoiceDate);
        this.DefaultDimension = vendTable.DefaultDimension;
        this.CashDiscCode = vendTable.CashDisc;
        this.PostingProfile = VendParameters::find().PostingProfile;
        this.PaymentSched = vendTable.PaymSched ? vendTable.PaymSched : PaymTerm::find(this.Payment).PaymSched;

        this.CurrencyCode = vendTable.Currency;
        this.ExchRate = ExchangeRateHelper::exchRate(vendTable.Currency, this.InvoiceDate);
        this.ExchRateSecondary = ExchangeRateHelper::exchRateSecond(vendTable.Currency, this.InvoiceDate);
        this.EnterpriseNumber = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.InvoiceDate);
        this.LanguageId = vendTable.languageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTrans</Name>
				<Source><![CDATA[
    void initFromVendTrans(VendTrans vendTrans)
    {
        #isoCountryRegionCodes

        VendTable vendTable = VendTable::find(vendTrans.AccountNum);

        this.CustVendInvoiceJour::initFromCustVendTrans(vendTrans);

        this.NumberSequenceGroup = vendTable.NumberSequenceGroup;
        this.InternalInvoiceId = this.getInternalInvoiceIdFromVendTrans(-vendTrans.AmountCur);

        this.vatNum = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, vendTrans.TransDate);
        this.EnterpriseNumber = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendTrans.TransDate);
        this.LanguageId = vendTable.languageId();

        this.InvoiceAmount = -this.InvoiceAmount;
        this.TaxInvoicePurchId = vendTrans.TaxInvoicePurchId;
		this.Description = vendTrans.Txt;

        VendInvoiceJour_W vendInvoiceJour_W = this.vendInvoiceJour_W();
        vendInvoiceJour_W.ReasonTableRef = vendTrans.ReasonRefRecId;
        this.packVendInvoiceJour_W(vendInvoiceJour_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters() && !this.PurchId)
        {
            TaxWithholdTrans_IN taxWithholdTrans_IN;
            select sum(TaxWithholdAmountCur) from taxWithholdTrans_IN
                where taxWithholdTrans_IN.Voucher ==  this.LedgerVoucher
                    && taxWithholdTrans_IN.Invoice == this.InvoiceId
                    && taxWithholdTrans_IN.TransDate == this.InvoiceDate;

            this.InvoiceAmount -= taxWithholdTrans_IN.TaxWithholdAmountCur;
        }
        // </GIN>

        this.calcMSTAmounts();

        super();

        // <GEECZ>
        this.SysExtensionSerializerMap::postInsert();
        // </GEECZ>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            CustVendInvoiceJour::initRefOriginalInvoice_RU(this);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDerivedActionPolicy</Name>
				<Source><![CDATA[
    public InterCompanyEndpointActionPolicy interCompanyDerivedActionPolicy()
    {
        CustInvoiceJour custInvoiceJour;
        InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy;

        changecompany(this.company())
        {
            if (this.InterCompanyCompanyId && this.InterCompanySalesId)
            {
                changecompany(this.InterCompanyCompanyId)
                {
                    custInvoiceJour = CustInvoiceJour::findFromCustInvoiceTrans(this.InterCompanySalesId,this.InvoiceId,this.InvoiceDate,this.NumberSequenceGroup);
                    interCompanyEndpointActionPolicy = custInvoiceJour.interCompanyEndpointActionPolicy();
                }
            }
        }
        return interCompanyEndpointActionPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDoExternalPosting</Name>
				<Source><![CDATA[
    public boolean interCompanyDoExternalPosting()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDoInternalPosting</Name>
				<Source><![CDATA[
    public boolean interCompanyDoInternalPosting()
    {
        return this.purchTable().InterCompanyDirectDelivery &&
                this.purchTable().interCompanyEndpointActionPolicy().PostSalesInvoice &&
                !this.purchTable().ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyEndpointActionPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intercompany trading policy for the current <c>VendInvoiceJour</c> table record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyEndpointActionPolicy</c> table; otherwise, an empty record.
    /// </returns>
    public InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy(boolean _forUpdate = false)
    {
        InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy;

        changecompany (this.company())
        {
            interCompanyEndpointActionPolicy = VendTable::find(this.OrderAccount).interCompanyTradingPartner().interCompanyEndpointActionPolicy(_forUpdate);
        }
        return interCompanyEndpointActionPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTransTableNum</Name>
				<Source><![CDATA[
    public TableId interCompanyTransTableNum()
    {
        return tableNum(VendInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the invoice is an advance invoice.
    /// </summary>
    /// <returns>
    /// true if the invoice is an advance invoice; otherwise, false.
    /// </returns>
    public boolean isAdvance()
    {
        return (this.InvoiceType == PurchInvoiceType::VendorAdvance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlockedForBookInvoice_RU</Name>
				<Source><![CDATA[
    public boolean isBlockedForBookInvoice_RU()
    {
        VendTrans vendTrans = this.vendTrans();

        return (select firstonly RecId from costAllocationHistory_RU
            where costAllocationHistory_RU.IndebtednessTransRecId == vendTrans.RecId ||
                  costAllocationHistory_RU.InvoiceTransRecId == vendTrans.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostAllocationInvoice_RU</Name>
				<Source><![CDATA[
    public boolean isCostAllocationInvoice_RU()
    {
        VendTrans vendTrans = this.vendTrans();

        return (select firstonly RecId from costAllocationHistory_RU
            where costAllocationHistory_RU.IndebtednessTransRecId == vendTrans.RecId ||
                  costAllocationHistory_RU.InvoiceTransRecId == vendTrans.RecId ||
                  costAllocationHistory_RU.CreditNoteTransRecId == vendTrans.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this invoice includes tax in the line amount.
    /// </summary>
    /// <param name="_purchTable">
    /// A purchase order header record; optional.
    /// </param>
    /// <returns>
    /// true if the invoice includes tax; otherwise, false.
    /// </returns>
    public boolean isInclTax(PurchTable _purchTable = null)
    {
        boolean includeTax;

        if (this.isNonPO() || this.isAdvance())
        {
            includeTax = this.InclTax;
        }
        else
        {
            if (_purchTable)
            {
                includeTax = _purchTable.InclTax;
            }
            else
            {
                includeTax = this.purchTable().InclTax;
            }
        }

        return includeTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIndebtednessInvoice_RU</Name>
				<Source><![CDATA[
    public boolean isIndebtednessInvoice_RU()
    {
        VendTrans vendTrans = this.vendTrans();

        return (select firstonly RecId from costAllocationHistory_RU
            where costAllocationHistory_RU.IndebtednessTransRecId == vendTrans.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventProfileTypeMapped_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method created for use when calling <c>CustVendInvoiceJour</c> map method.
    /// </summary>
    /// <returns>
    /// true if the field <c>InventProfileType_RU</c> is mapped to <c>CustVentInvoiceJour</c> map; otherwise, false.
    /// </returns>
    public boolean isInventProfileTypeMapped_RU()
    {
        return mappingExists(tableNum(CustVendInvoiceJour), this.TableId, fieldNum(CustVendInvoiceJour, InventProfileType_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this invoice is associated with a purchase order.
    /// </summary>
    /// <returns>
    /// true if the invoice is not associated with a purchase order; otherwise, false.
    /// </returns>
    public boolean isNonPO()
    {
        return (this.PurchId == '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    public boolean isProforma()
    {
        return this.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>LedgerVoucher</c> object that is associated with this invoice.
    /// </summary>
    /// <returns>
    /// The <c>LedgerVoucher</c> object that is associated with this invoice line.
    /// </returns>
    public Voucher ledgerVoucher()
    {
        VendInvoiceTrans vendInvoiceTrans;
        SourceDocumentLine sourceDocumentLine;
        Voucher localVoucher;

        select firstonly AdvanceApplicationId, InternalInvoiceId from vendInvoiceTrans
            order by CreatedDateTime desc, RecId desc
            join SourceDocumentHeader, RecId from sourceDocumentLine
            where sourceDocumentLine.SourceDocumentHeader == this.SourceDocumentHeader &&
                  vendInvoiceTrans.SourceDocumentLine == sourceDocumentLine.RecId;

        if (vendInvoiceTrans.AdvanceApplicationId)
        {
            localVoucher = vendInvoiceTrans.InternalInvoiceId;
        }
        else
        {
            localVoucher = this.LedgerVoucher;
        }

        return localVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    SysModule module()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmount</Name>
				<Source><![CDATA[
    display AmountCurNet netAmount()
    {
        return this.SalesBalance - this.EndDisc + this.SumMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nfePaymentMethod_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get payment method for NF-e
    /// </summary>
    /// <param name ="_purpose">
    /// The <c>FiscalDocumentPurpose_BR</c> value.
    /// </param>
    /// <returns>
    /// The payment method for NF-e
    /// </returns>
    public EFDocPaymentMethod_BR nfePaymentMethod_BR()
    {   
        return this.nfePaymentMethodByPurpose_BR(FiscalDocumentPurpose_BR::Regular);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nfePaymentMethodByPurpose_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get payment method for NF-e by purpose type
    /// </summary>
    /// <param name ="_purpose">
    /// The <c>FiscalDocumentPurpose_BR</c> value.
    /// </param>
    /// <returns>
    /// returns paymnet method for NF-e
    /// </returns>
    public EFDocPaymentMethod_BR nfePaymentMethodByPurpose_BR(FiscalDocumentPurpose_BR _purpose)
    {
        PurchTable purchTable;
        VendPaymModeTable vendPaymModeTable;
        
        select PaymMode from purchTable
            where purchTable.PurchId == this.PurchId;
        
        select firstOnly PaymentMethod_BR from vendPaymModeTable
            where vendPaymModeTable.PaymMode == purchTable.PaymMode;
        
        return vendPaymModeTable.PaymentMethod_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notClosed_RU</Name>
				<Source><![CDATA[
    display CustVendNotClosed_RU notClosed_RU()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        VendTrans vendTrans;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent ||
                this.InventProfileType_RU == InventProfileType_RU::Bailee ||
                this.InventProfileType_RU == InventProfileType_RU::CommissionAgent)
            {
                return false;
            }
        }
        // </GEERU>
        return !(select firstonly Closed from vendTrans
                    where vendTrans.AccountNum == this.InvoiceAccount &&
                          vendTrans.TransDate == this.InvoiceDate &&
                          vendTrans.Voucher == this.LedgerVoucher).Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalInvoices_W</Name>
				<Source><![CDATA[
    // returns original invoices for credit note
    //
    // use _listPattern = "%1" to show invoice numbers only
    // use _listPattern = "%2" to show invoice dates only
    #define.DefaultSeparator(", ")
    #define.DefaultListPattern("\%1 \%2")
    public str originalInvoices_W(str _separator = #DefaultSeparator, boolean _showInvoiceDate = false, str _listPattern = #DefaultListPattern)
    {
        str ret;
        Set retSet = new Set(Types::Container);
        SetEnumerator se;
        container value;

        VendInvoiceTrans invoiceTrans, origTrans;

        while select InvoiceId, InvoiceDate from origTrans
        exists join invoiceTrans
            where invoiceTrans.RefReturnInvoiceTrans_W == origTrans.RecId &&
                  invoiceTrans.InternalInvoiceId == this.InternalInvoiceId &&
                  invoiceTrans.InvoiceId == this.InvoiceId &&
                  invoiceTrans.InvoiceDate == this.InvoiceDate &&
                  invoiceTrans.PurchID == this.PurchId &&
                  invoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
        {
            value = _showInvoiceDate ? [ origTrans.InvoiceId, origTrans.InvoiceDate ] : [ origTrans.InvoiceId ];
            if (!retSet.in(value))
            {
                retSet.add(value);
            }
        }

        se = retSet.getEnumerator();
        while (se.moveNext())
        {
            if (_showInvoiceDate)
            {
                ret += (ret ? _separator : "") + strFmt(_listPattern, conPeek(se.current(), 1), conPeek(se.current(), 2));
            }
            else
            {
                ret += (ret ? _separator : "") + conPeek(se.current(), 1);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceJour_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>VendInvoiceJour_IN</c> record into the current record.
    /// </summary>
    /// <param name ="_vendInvoiceJour_IN">
    /// The <c>VendInvoiceJour_IN</c> record.
    /// </param>
    public void packVendInvoiceJour_IN(VendInvoiceJour_IN _vendInvoiceJour_IN)
    {
        _vendInvoiceJour_IN.VendInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceJour_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceJour_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs <c>VendInvoiceJour_Intrastat</c> extension table record.
    /// </summary>
    /// <param name="_vendInvoiceJour_Intrastat">
    /// The extension table record to pack.
    /// </param>
    public void packVendInvoiceJour_Intrastat(VendInvoiceJour_Intrastat _vendInvoiceJour_Intrastat)
    {
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceJour_Intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceJour_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_vendInvoiceJour_W">
    /// The extension table record.
    /// </param>
    public void packVendInvoiceJour_W(VendInvoiceJour_W _vendInvoiceJour_W)
    {
        _vendInvoiceJour_W.VendInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceJour_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceJourExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceJourExtensionTH</c> into <c>VendInvoiceJour</c>
    /// </summary>
    /// <param name="_vendInvoiceJourExtensionTH">
    /// The <c>VendInvoiceJourExtensionTH</c> to pack.
    /// </param>
    public void packVendInvoiceJourExtensionTH(VendInvoiceJourExtensionTH _vendInvoiceJourExtensionTH)
    {
        _vendInvoiceJourExtensionTH.VendInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendInvoiceJourExtensionTH);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return this.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(SourceDocument_VendorInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_VendorInvoice::VendorInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_VendorInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_VendorInvoice::VendorInvoiceTotalsLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentCondition</Name>
				<Source><![CDATA[
    display PaymTxt paymentCondition()
    {
        #ISOCountryRegionCodes
        PaymTxt paymCondition;

        if (this.FixedDueDate)
        {
            paymCondition = date2StrUsr(this.FixedDueDate, DateFlags::FormatAll);
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            paymCondition = date2StrUsr(this.DueDate, DateFlags::FormatAll);
        }
        else
        {
            paymCondition = PaymTerm::txt(this.Payment, CompanyInfo::languageId());
        }

        return paymCondition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printEUVatInvoice</Name>
				<Source><![CDATA[
    public void printEUVatInvoice(PurchInvoiceJournalPrint _purchInvoiceJournalPrint)
    {
        Args parameters = new Args();
        MenuFunction purchEUVatInvoiceMenu;

        purchEUVatInvoiceMenu = new MenuFunction(menuitemOutputStr(purchEUVatInvoice), MenuItemType::Output);
        parameters.caller(_purchInvoiceJournalPrint);
        parameters.record(this);

        purchEUVatInvoiceMenu.enumParameter(false);
        purchEUVatInvoiceMenu.run(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    void printJournal(PurchInvoiceJournalPrint _purchInvoiceJournalPrint = null,
                       RecordSortedList _journalList = null,
                       NoYes printJournal = NoYes::Yes,
                       NoYes printAcceptanceReport = NoYes::No,
                       NoYes printInventBaileeReport = NoYes::No
                       ,NoYes printExciseInvoice = NoYes::No
                       )
    {
        Args parameters = new Args();
        MenuFunction purchInvoiceMenu;
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        // <GIN>
        MenuFunction excisePurchReturnMenu;
        // </GIN>

        // <GEERU>
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || printJournal)
        {
            // </GEERU>
            // <GIN>
            if (!printExciseInvoice || printJournal)
            {
            // </GIN>
                purchInvoiceMenu = new MenuFunction(menuitemOutputStr(purchInvoice),MenuItemType::Output);
            // <GIN>
            }
            // </GIN>
            // <GEERU>
        }
        // </GEERU>
        // <GIN>
        if (TaxParameters::isExciseEnable_IN() && printExciseInvoice)
        {
            excisePurchReturnMenu = new MenuFunction(menuitemOutputStr(ExciseInvoicePurchReturn_IN), MenuItemType::Output);
        }
        // </GIN>

        parameters.caller(_purchInvoiceJournalPrint);
        if (_journalList)
        {
            parameters.object(_journalList);
        }
        else
        {
            parameters.record(this);
        }

        // <GEERU>
        if (purchInvoiceMenu)
        {
            // </GEERU>
            purchInvoiceMenu.run(parameters);
            // <GEERU>
        }
        // <GIN>
        if (TaxParameters::isExciseEnable_IN() && printExciseInvoice)
        {
            excisePurchReturnMenu.run(parameters);
        }
        // </GIN>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (printAcceptanceReport)
            {
                purchInvoiceMenu = new MenuFunction(menuitemOutputStr(PurchAcceptanceReport_RU), MenuItemType::Output);
                purchInvoiceMenu.run(parameters);
            }
            if (printInventBaileeReport)
            {
                purchInvoiceMenu = new MenuFunction(menuitemOutputStr(PurchInventBaileeReport_RU), MenuItemType::Output);
                purchInvoiceMenu.run(parameters);
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    PurchTable purchTable(boolean update = false)
    {
        return PurchTable::find(this.PurchId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTaxTrans</Name>
				<Source><![CDATA[
    Query queryTaxTrans(boolean update = false, TaxReverseCharge _reverseCharge = NoYes::No)
    {
        QueryBuildDataSource qbds;
        DictRelation dictRelation;
        DictField externdictField;
        DictField dictField;
        Query query = new Query();
        Counter c;

        query.addDataSource(tableNum(TaxTrans));

        qbds = query.dataSourceTable(tableNum(TaxTrans));

        dictRelation = new DictRelation(tableNum(TaxTrans));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField = new DictField(this.TableId, dictRelation.lineExternTableValue(c));
                dictField = new DictField(tableNum(TaxTrans), dictRelation.lineTableValue(c));
                qbds.addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }

        qbds.update(update);
        qbds.addRange(fieldNum(TaxTrans, TaxOrigin)).value(strFmt('!%1', queryValue(TaxOrigin::TaxReversed)));
        qbds.addRange(fieldNum(TaxTrans, ExemptTax)).value(queryValue(NoYes::No));
        qbds.addRange(fieldNum(TaxTrans, ReverseCharge_W)).value(queryValue(_reverseCharge));

        if (_reverseCharge)
        {
            //for reverse charge transactions excluding Outgoing tax from calculation
            qbds.addRange(fieldNum(TaxTrans, TaxDirection)).value(SysQuery::valueNot(TaxDirection::OutgoingTax));
        }

        qbds.addSelectionField(fieldNum(TaxTrans, SourceBaseAmountCur), SelectionField::Sum);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    Query queryTmpTaxWorkTrans(boolean update = false, TaxReverseCharge _reverseCharge = NoYes::No)
    {
        QueryBuildDataSource qbds;
        Query query = new Query();

        query.addDataSource(tableNum(TmpTaxWorkTrans));

        qbds = query.dataSourceTable(tableNum(TmpTaxWorkTrans));
        qbds.update(update);
        qbds.addRange(fieldNum(TmpTaxWorkTrans, TaxOrigin)).value(strFmt('!%1', queryValue(TaxOrigin::TaxReversed)));
        qbds.addRange(fieldNum(TmpTaxWorkTrans, ExemptTax)).value(queryValue(NoYes::No));
        qbds.addRange(fieldNum(TmpTaxWorkTrans, ReverseCharge_W)).value(queryValue(_reverseCharge));

        if (_reverseCharge)
        {
            qbds.addRange(fieldNum(TmpTaxWorkTrans, TaxDirection)).value(SysQuery::valueNot(TaxDirection::OutgoingTax));
        }

        qbds.addSelectionField(fieldNum(TmpTaxWorkTrans, SourceBaseAmountCur), SelectionField::Sum);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryVendInvoiceTrans</Name>
				<Source><![CDATA[
    Query queryVendInvoiceTrans(boolean update = false)
    {
        DictRelation dictRelation;
        DictField externdictField;
        DictField dictField;
        Query query = new Query();
        Counter c;

        query.addDataSource(tableNum(VendInvoiceTrans));

        dictRelation = new DictRelation(tableNum(VendInvoiceTrans));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c = 1; c <= dictRelation.lines(); c++)
            {
                externdictField = new DictField(this.TableId, dictRelation.lineExternTableValue(c));
                dictField = new DictField(tableNum(VendInvoiceTrans), dictRelation.lineTableValue(c));
                query.dataSourceTable(tableNum(VendInvoiceTrans)).addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }
        query.dataSourceTable(tableNum(VendInvoiceTrans)).update(update);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readyForCostAllocation_RU</Name>
				<Source><![CDATA[
    public boolean readyForCostAllocation_RU()
    {
        VendInvoiceTrans vendInvoiceTrans;
        InventTable inventTable;
        VendTrans vendTrans = this.vendTrans();
        CostAllocationHistory_RU costAllocationHistory;

        select firstonly RecId from costAllocationHistory
            where costAllocationHistory.InvoiceTransRecId == vendTrans.RecId ||
                  costAllocationHistory.CreditNoteTransRecId == vendTrans.RecId ||
                  costAllocationHistory.IndebtednessTransRecId == vendTrans.RecId;

        if (costAllocationHistory.RecId)
        {
            return false;
        }

        while select LineAmount, RecId from vendInvoiceTrans
            where vendInvoiceTrans.InvoiceId == this.InvoiceId &&
                  vendInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                  vendInvoiceTrans.PurchID == this.PurchId &&
                  vendInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup &&
                  vendInvoiceTrans.InternalInvoiceId == this.InternalInvoiceId &&
                  vendInvoiceTrans.LineAmount > 0 &&
                  vendInvoiceTrans.MarkupCode_RU != ''
            outer join TableId from inventTable
                where inventTable.ItemId == vendInvoiceTrans.ItemId &&
                      inventTable.ItemType == ItemType::Service
        {
            if (vendInvoiceTrans.markupAmountNotAlloc_RU())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refOriginalInvoiceRecId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets record id of original invoice.
    /// </summary>
    /// <returns>
    /// RecId of original invoice.
    /// </returns>
    public RefRecId refOriginalInvoiceRecId_RU()
    {
        return VendInvoiceJourCorrLink_RU::findVendInvoiceJour(this.RecId).CorrJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTaxNumber_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the registration nubmer for the sale tax registration nubmer.
    /// </summary>
    /// <returns>
    /// Returns the registration nubmer.
    /// </returns>
    display TaxRegistrationNumber_IN salesTaxNumber_IN()
    {
        LogisticsLocation logisticsLocation = VendTable::find(this.InvoiceAccount).invoiceAccountLocation().getLogisticsLocation();
        TaxInformation_IN taxInformation;

        select firstonly RecId from taxInformation
            where taxInformation.RegistrationLocation == logisticsLocation.RecId;

        return TaxRegistrationNumbers_IN::find(taxInformation.SalesTaxRegistrationNumber).RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFacturedFully_RU</Name>
				<Source><![CDATA[
    public void setFacturedFully_RU(FacturedFully_RU _factured)
    {
        this.FacturedFully_RU = _factured;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExchRate</Name>
				<Source><![CDATA[
    display VendExchRate showExchRate()
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

        return exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalance</Name>
				<Source><![CDATA[
    display TaxTaxableAmountCur taxableBalance(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        TaxTrans taxTrans;
        TmpTaxWorkTrans tmpTaxWorkTrans;
        QueryRun queryRun;
        TaxBaseCur sourceBaseAmountCur;

        if (_tmpTaxWorkTrans)
        {
            queryRun = new QueryRun(this.queryTmpTaxWorkTrans());
            queryRun.setCursor(_tmpTaxWorkTrans);
        }
        else
        {
            queryRun = new QueryRun(this.queryTaxTrans());
        }
        if (queryRun.next())
        {
            if (_tmpTaxWorkTrans)
            {
                tmpTaxWorkTrans = queryRun.get(tableNum(TmpTaxWorkTrans)) as TmpTaxWorkTrans;
                if (tmpTaxWorkTrans)
                {
                    sourceBaseAmountCur = tmpTaxWorkTrans.SourceBaseAmountCur;
                }
            }
            else
            {
                taxTrans = queryRun.get(tableNum(TaxTrans)) as TaxTrans;
                if (taxTrans)
                {
                    sourceBaseAmountCur = taxTrans.SourceBaseAmountCur;
                }
            }
        }

        return sourceBaseAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates tax base to which reverse charge was applied.
    /// </summary>
    /// <param name = "_tmpTaxWorkTrans">
    ///   <c>TmpTaxWorkTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///   Tax base to which reverse charge was applied.
    /// </returns>
    TaxAmountCur reverseChargeBalance(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        TaxTrans taxTrans;
        TmpTaxWorkTrans tmpTaxWorkTrans;
        QueryRun queryRun;
        TaxBaseCur sourceBaseAmountCur;

        if (ReverseChargeParameters_W::find().Enabled == NoYes::No)
        {
            return 0;
        }

        if (_tmpTaxWorkTrans)
        {
            queryRun = new QueryRun(this.queryTmpTaxWorkTrans(false, NoYes::Yes));
            queryRun.setCursor(_tmpTaxWorkTrans);
        }
        else
        {
            queryRun = new QueryRun(this.queryTaxTrans(false, NoYes::Yes));
        }
        if (queryRun.next())
        {
            if (_tmpTaxWorkTrans)
            {
                tmpTaxWorkTrans = queryRun.get(tableNum(TmpTaxWorkTrans)) as TmpTaxWorkTrans;
                if (tmpTaxWorkTrans)
                {
                    sourceBaseAmountCur = tmpTaxWorkTrans.SourceBaseAmountCur;
                }
            }
            else
            {
                taxTrans = queryRun.get(tableNum(TaxTrans)) as TaxTrans;
                if (taxTrans)
                {
                    sourceBaseAmountCur = taxTrans.SourceBaseAmountCur;
                }
            }
        }

        return sourceBaseAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCorrected</Name>
				<Source><![CDATA[
    public TaxAmountCur taxAmountCorrected()
    {
        return Tax::taxAmountCorrectedPerVoucher(this.LedgerVoucher, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalance</Name>
				<Source><![CDATA[
    display TaxTaxFreeAmountCur taxFreeBalance(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        return this.netAmount() - this.taxableBalance(_tmpTaxWorkTrans) - this.reverseChargeBalance(_tmpTaxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tinNumber_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the registration nubmer for the Tax Identification Number.
    /// </summary>
    /// <returns>
    /// Returns the registration nubmer.
    /// </returns>
    display TaxRegistrationNumber_IN tinNumber_IN()
    {
        LogisticsLocation logisticsLocation = VendTable::find(this.InvoiceAccount).invoiceAccountLocation().getLogisticsLocation();
        TaxInformation_IN taxInformation;

        select firstonly RecId from taxInformation
            where taxInformation.RegistrationLocation == logisticsLocation.RecId;

        return TaxRegistrationNumbers_IN::find(taxInformation.tin).RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAdvanceApplicationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the prepayment amount applied in the invoice amount.
    /// </summary>
    /// <returns>
    ///     Returns total prepayment amount applied.
    /// </returns>
    public AmountCur totalAdvanceApplicationAmount()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        SourceDocumentLine sourceDocumentLine;

        select sum(LineAmount) from vendInvoiceInfoLine
            exists join sourceDocumentLine
        where vendInvoiceInfoLine.SourceDocumentLine == sourceDocumentLine.RecId &&
              sourceDocumentLine.SourceDocumentHeader == this.SourceDocumentHeader &&
              vendInvoiceInfoLine.LineType == PurchInvoiceLineType::AdvanceApplication;

        return vendInvoiceInfoLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totaltaxAmountRetained_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of the <c>SourceRegulateAmountCur</c> fields from Tax trans related to the vendor journal.
    /// </summary>
    /// <returns>
    /// A real value with the total retained tax amount.
    /// </returns>
    public TaxAmountCur totaltaxAmountRetained_BR()
    {
        return this.CustVendInvoiceJour::totaltaxAmountRetained_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.calcMSTAmounts();

        super();

        // <GEECZ>
        this.SysExtensionSerializerMap::postUpdate();
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates due date and updates related trans and open trans accordingly.
    /// </summary>
    public void updateDue_JP()
    {
        this.CustVendInvoiceJour::updateDue_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case fieldNum(VendInvoiceJour, vatNum):
                    ret = TaxVATNumTable::checkVATNum(this.vatNum, this, p1);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentSched</Name>
				<Source><![CDATA[
    boolean validatePaymentSched()
    {
        #ISOCountryRegionCodes
        boolean ret = true;
        AmountCur netInvoiceAmount;
        PaymTerm paymTerm;
        TransDate deliveryDate;
        TransDate lastValidDate;

        VendPaymSchedLine vendPaymSchedLine;
        VendPaymSched vendPaymSched = VendPaymSched::find(this.TableId, this.RecId);

        if (this.PaymentSched)
        {
            select sum(DueAmount) from vendPaymSchedLine
                where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId &&
                      !vendPaymSchedLine.IsDeleted;

            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters() && this.TaxWithholdAmount_IN)
            {
                AmountCur invoiceAmountInclWHT;

                if (TaxWithholdEnableIncludeTCSInTotalFeatureToggle::isFeatureEnabled())
                {
                    VendInvoiceTrans vendInvoiceTrans;
                    select firstonly RecId from vendInvoiceTrans
                        where vendInvoiceTrans.PurchID == this.PurchId
                            && vendInvoiceTrans.InvoiceId == this.InvoiceId
                            && vendInvoiceTrans.InvoiceDate == this.InvoiceDate
                            && vendInvoiceTrans.NumberSequenceGroup == this.numberSequenceGroup
                            && vendInvoiceTrans.InternalInvoiceId == this.InternalInvoiceId
                            && vendInvoiceTrans.TCSGroup_IN != '';

                    if (vendInvoiceTrans.RecId)
                    {
                        invoiceAmountInclWHT = this.InvoiceAmount + CurrencyExchange::roundWithRuleType(
                        this.TaxWithholdAmount_IN,
                        this.CurrencyCode,
                        CurrencyRoundingRuleType::PurchaseOrder);
                    }
                    else
                    {
                        invoiceAmountInclWHT = this.InvoiceAmount + this.TaxWithholdAmount_IN;
                    }
                }
                else
                {
                    invoiceAmountInclWHT = this.InvoiceAmount + this.TaxWithholdAmount_IN;
                }

                if (vendPaymSchedLine.DueAmount != invoiceAmountInclWHT)
                {
                    ret = checkFailed(strFmt("@SYS78948", vendPaymSchedLine.DueAmount, this.InvoiceAmount));
                    ret = checkFailed("@AccountsPayable:WarningPaymSchedTotalDoesNotMatchInvoiceTotal");
                }
            }
            else
            {
                // </GIN>
                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    if (this.purchTable().isDirectImport_BR())
                    {
                        netInvoiceAmount = this.InvoiceAmount + this.totaltaxAmountRetained_BR() - this.SumTax - this.SumMarkup;
                    }
                    else
                    {
                        netInvoiceAmount = this.InvoiceAmount + this.totaltaxAmountRetained_BR();
                    }
                }
                else
                {
                    // </GBR>
                    netInvoiceAmount = this.InvoiceAmount + this.totalAdvanceApplicationAmount();
                    // <GBR>
                }
                // </GBR>

                if (vendPaymSchedLine.DueAmount != netInvoiceAmount)
                {
                    ret = checkFailed(strFmt("@SYS78948", vendPaymSchedLine.DueAmount, netInvoiceAmount));
                    ret = checkFailed("@AccountsPayable:WarningPaymSchedTotalDoesNotMatchInvoiceTotal");
                }

                if (this.Payment && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
                {
                    paymTerm = PaymTerm::find(this.Payment);
                    deliveryDate = paymTerm.UseDeliveryDateForDueDate_ES ? this.DeliveryDate_ES : this.InvoiceDate;
                    lastValidDate = PaymDueDateLimit_ES::getDueDateLimitSalesParm(paymTerm.DueDateLimitGroupId_ES, deliveryDate, this.PurchId, this.ParmId).getLastValidDate(deliveryDate);

                    select firstOnly RecId from vendPaymSchedLine
                        where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId &&
                              vendPaymSchedLine.DueDate > lastValidDate;

                    if (vendPaymSchedLine.RecId)
                    {
                        ret = checkFailed("@SYS4001055");
                    }
                }
                // <GIN>
            }
            // </GIN>
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret = super();

        if (ret && PaymTerm::isCashAccount(this.Payment) && this.PaymentSched )
        {
            ret = checkFailed("@SYS25074");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatDueDate_W</Name>
				<Source><![CDATA[
    display VatDueDate_W vatDueDate_W()
    {
        return this.CustVendInvoiceJour::vatDueDate_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAddress</Name>
				<Source><![CDATA[
    display Addressing vendAddress()
    {
        // <GTH>
        LogisticsPostalAddressRecId invoicePostalAddressRecId;
        LogisticsPostalAddress logisticsPostalAddress;
        // </GTH>

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
        {
            invoicePostalAddressRecId = this.vendInvoiceJourExtensionTH().InvoicePostalAddress;
            if (invoicePostalAddressRecId)
            {
                logisticsPostalAddress = LogisticsPostalAddress::findRecId(invoicePostalAddressRecId);
                return DirUtility::replaceAddressTokenLanguage(logisticsPostalAddress, this.LanguageId);
            }
        }
        // </GTH>
        return DirUtility::replaceAddressTokenLanguage(VendTable::find(this.InvoiceAccount).invoiceAddress(), this.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendInvoiceJour_IN</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>VendInvoiceJour_IN</c> record.
    /// </returns>
    public VendInvoiceJour_IN vendInvoiceJour_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceJour_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>VendInvoiceJour_Intrastat</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public VendInvoiceJour_Intrastat vendInvoiceJour_Intrastat()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceJour_Intrastat));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>VendInvoiceJour_W</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public VendInvoiceJour_W vendInvoiceJour_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceJour_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJourExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>VendInvoiceJourExtensionTH</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>VendInvoiceJourExtensionTH</c> associated with the current record.
    /// </returns>
    public VendInvoiceJourExtensionTH vendInvoiceJourExtensionTH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendInvoiceJourExtensionTH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendName</Name>
				<Source><![CDATA[
    display Name vendName()
    {
        Name name;
        TaxVATNumTable taxVATNumTable;
        LogisticsLocationEntity location;
        boolean found;

        if (VendParameters::find().VendNameFromVATNum)
        {
            taxVATNumTable = TaxVATNumTable::find(this.vatNum, this.CountryRegionId);

            if (taxVATNumTable.Name)
            {
                name = taxVATNumTable.Name;
                found = true;
            }
        }
        if (!found)
        {
            // Gets the name/description of the invoice location.
            location = VendTable::find(this.InvoiceAccount).invoiceAccountLocation();
            if (!location || !location.parmLocationRecId())
            {
                //Invoice location does not exist, get the vendor name.
                name = VendTable::find(this.InvoiceAccount).name();
            }
            else
            {
                name = location.parmLocationDescription();
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_InvoiceAccount</Name>
				<Source><![CDATA[
    VendTable vendTable_InvoiceAccount(boolean update = false)
    {
        return VendTable::find(this.InvoiceAccount, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_OrderAccount</Name>
				<Source><![CDATA[
    VendTable vendTable_OrderAccount(boolean update = false)
    {
        return VendTable::find(this.OrderAccount, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    VendTrans vendTrans()
    {
        VendTrans vendTrans;

        this.CustVendInvoiceJour::custVendTrans(vendTrans);
        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>venInvoiceJourListPreviewPaneTitle</Name>
				<Source><![CDATA[
    display Caption venInvoiceJourListPreviewPaneTitle()
    {
        return strFmt("@SYS327590", this.InvoiceId, this.vendTable_InvoiceAccount().name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(PurchId _purchId)
    {
        return _purchId && (select firstonly RecId from vendInvoiceJour
                where vendInvoiceJour.PurchId == _purchId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByInvoiceIdTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the record exist for the given invoice id and invoice date.
    /// </summary>
    /// <param name="_invoiceId">
    /// The invoice id.
    /// </param>
    /// <param name="_transDate">
    /// The invoice date.
    /// </param>
    /// <returns>
    /// Returns true if the check succeed.
    /// </returns>
    public static boolean existByInvoiceIdTransDate(InvoiceId _invoiceId, TransDate _transDate)
    {
        return _invoiceId
            && _transDate
            && (select firstonly vendInvoiceJour
                    where vendInvoiceJour.InvoiceId == _invoiceId
                        && vendInvoiceJour.InvoiceDate == _transDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromPurchId</Name>
				<Source><![CDATA[
    static VendInvoiceJour findFromPurchId(PurchId _purchId, boolean _forUpdate = false)
    {
        VendInvoiceJour vendInvoiceJour;

        vendInvoiceJour.selectForUpdate(_forUpdate);

        select firstonly vendInvoiceJour
            where vendInvoiceJour.PurchId == _purchId;

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromPurchParmTable</Name>
				<Source><![CDATA[
    static VendInvoiceJour findFromPurchParmTable(InvoiceId _invoiceId, TransDate _transDate, VendInvoiceAccount _invoiceAccount, boolean _forUpdate = false)
    {
        VendInvoiceJour vendInvoiceJour;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        if (_invoiceId && _transDate && _invoiceAccount)
        {
            vendInvoiceJour.selectForUpdate(_forUpdate);

            while select vendInvoiceJour
                where vendInvoiceJour.InvoiceId == _invoiceId &&
                      vendInvoiceJour.InvoiceAccount == _invoiceAccount &&
                      vendInvoiceJour.LedgerVoucher != ''
            {
                select firstonly ledgerJournalVoucherChanged
                     where ledgerJournalVoucherChanged.FromVoucher == vendInvoiceJour.LedgerVoucher &&
                           ledgerJournalVoucherChanged.FromDate == vendInvoiceJour.InvoiceDate &&
                           ledgerJournalVoucherChanged.ToDate == _transDate;

                if (ledgerJournalVoucherChanged)
                {
                    return vendInvoiceJour;
                }
            }
        }

        vendInvoiceJour.clear();

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromTaxTrans</Name>
				<Source><![CDATA[
    static VendInvoiceJour findFromTaxTrans(Voucher _voucher, TransDate _invoiceDate)
    {
        VendInvoiceJour vendInvoiceJour;

        if (_voucher && _invoiceDate)
        {
            select firstonly vendInvoiceJour
                where vendInvoiceJour.LedgerVoucher == _voucher &&
                      vendInvoiceJour.InvoiceDate == _invoiceDate;
        }

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    static VendInvoiceJour findFromVendInvoiceTrans(PurchId purchId,
                                                    InvoiceId invoiceId,
                                                    TransDate transDate,
                                                    NumberSequenceGroupId numberSequenceGroup,
                                                    PurchInternalInvoiceId internalInvoiceId,
                                                    boolean _forUpdate = false,
                                                    boolean _findProformaJour = false)
    {
        VendInvoiceJour vendInvoiceJour;
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        // <GEERU>
        if ((invoiceId || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && _findProformaJour)) && transDate)
        // </GEERU>
        {
            vendInvoiceJour.selectForUpdate(_forUpdate);

            select firstonly vendInvoiceJour
                where vendInvoiceJour.InvoiceId == invoiceId &&
                      vendInvoiceJour.InvoiceDate == transDate &&
                      vendInvoiceJour.PurchId == purchId &&
                      vendInvoiceJour.NumberSequenceGroup == numberSequenceGroup &&
                      vendInvoiceJour.InternalInvoiceId == internalInvoiceId;
        }

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromVendTrans</Name>
				<Source><![CDATA[
    static VendInvoiceJour findFromVendTrans(InvoiceId invoiceId,
                                             TransDate transDate,
                                             VendInvoiceAccount invoiceAccount,
                                             boolean _forUpdate = false,
                                             Voucher _voucher = ''
                                             )
    {
        VendInvoiceJour vendInvoiceJour;
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        if (invoiceId && transDate && invoiceAccount)
        {
            vendInvoiceJour.selectForUpdate(_forUpdate);

            select firstonly vendInvoiceJour
                order by RecId desc
                where vendInvoiceJour.InvoiceId == invoiceId &&
                      vendInvoiceJour.InvoiceDate == transDate &&
                      vendInvoiceJour.InvoiceAccount == invoiceAccount &&
                      (!_voucher || vendInvoiceJour.LedgerVoucher == _voucher);
        }

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromVendTransVoucher</Name>
				<Source><![CDATA[
    static VendInvoiceJour findFromVendTransVoucher(InvoiceId _invoiceId,
                                                    Voucher _voucher,
                                                    TransDate _transDate,
                                                    VendInvoiceAccount _invoiceAccount,
                                                    boolean _forUpdate = false)
    {
        VendInvoiceJour vendInvoiceJour;

        if (_invoiceId && _voucher && _transDate && _invoiceAccount)
        {
            vendInvoiceJour.selectForUpdate(_forUpdate);

            select firstonly vendInvoiceJour
                where vendInvoiceJour.InvoiceId == _invoiceId &&
                      vendInvoiceJour.LedgerVoucher == _voucher &&
                      vendInvoiceJour.InvoiceDate == _transDate &&
                      vendInvoiceJour.InvoiceAccount == _invoiceAccount;
        }

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static VendInvoiceJour findRecId(RecId _recId, boolean _forUpdate = false)
    {
        VendInvoiceJour vendInvoiceJour;

        vendInvoiceJour.selectForUpdate(_forUpdate);

        select vendInvoiceJour
            where vendInvoiceJour.RecId == _recId;

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendInvoiceJour</c> record by using the specified <c>SourceDocumentHeader</c> record.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// A <c>SourceDocumentHeader</c> record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceJour</c> record.
    /// </returns>
    public static VendInvoiceJour findSourceDocumentHeader(SourceDocumentHeaderRecId _sourceDocumentHeader,boolean _forUpdate = false)
    {
        VendInvoiceJour vendInvoiceJour;

        vendInvoiceJour.selectForUpdate(_forUpdate);

        select firstonly vendInvoiceJour
            where
                vendInvoiceJour.SourceDocumentHeader == _sourceDocumentHeader;

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendInvoiceJour</c> record by using the specified <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// A <c>SourceDocumentLine</c> record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceJour</c> record.
    /// </returns>
    public static VendInvoiceJour findSourceDocumentLine(SourceDocumentLineRecId _sourceDocumentLine,boolean _forUpdate = false)
    {
        VendInvoiceJour vendInvoiceJour;

        vendInvoiceJour.selectForUpdate(_forUpdate);

        select firstonly crossCompany vendInvoiceJour
            where
                vendInvoiceJour.SourceDocumentLine == _sourceDocumentLine;

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback method on tax engine tax document display
    /// </summary>
    /// <returns>The tax document display string.</returns>
    public TaxDocumentDisplayString getTaxDocumentRowDisplayString()
    {
        return strFmt("@ApplicationSuiteTaxEngineIntegration:VendInvoiceJourTaxDocumentRowDisplayFormat", this.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST_EE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amountMst for vat tax declaration in ER model.
    /// </summary>
    /// <returns>The accounting currency amount.</returns>
    // Used in GER configuration.
    public Amount amountMST_EE()
    {
        return this.amountMST(this.InvoiceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryRegistrationNumber_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get registration number for primary address.
    /// </summary>
    /// <returns>The registration number.</returns>
    // Used in GER configuration.
    public TaxRegistrationNumber getPrimaryRegistrationNumber_W()
    {
        TaxRegistrationNumber taxRegistrationNumber;

        VendTable vendTable = VendTable::find(this.InvoiceAccount);

        if (vendTable)
        {
            taxRegistrationNumber = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.InvoiceDate);
        }

        return taxRegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegData_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax registration data for the specified element of the global address book.
    /// </summary>
    /// <returns>
    /// Class <c>SIIGetTaxRegData</c> with calculated tax regisration data.
    /// </returns>
    public SIIGetTaxRegData getTaxRegData_ES()
    {
        return SIIGetTaxRegData::findByCustVendInvoiceJour(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDescription_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets description of the assets acquired.
    /// </summary>
    /// <returns>
    /// Description of the assets acquired.
    /// </returns>
    public str getInvoiceDescription_ES()
    {
        return SIIGetInvoiceDescription::getInvoiceDescription(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxMST_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum tax MST for RegFs in the European Union.
    /// </summary>
    /// <returns>Journal sum tax MST.</returns>
    public AmountMST sumTaxMST_W()
    {
        return this.amountMST(this.SumTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByInvoiceIdTransDate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the record exist for the given invoice id and invoice date.
    /// </summary>
    /// <param name="_invoiceId">
    /// The invoice id.
    /// </param>
    /// <param name="_transDate">
    /// The invoice date.
    /// </param>
    /// <param name="_vendInvoiceAccount">
    /// The invoice account.
    /// </param>
    /// <returns>
    /// Returns true if the check succeed.
    /// </returns>
    //<GIN>
    public static boolean existByInvoiceIdTransDate_IN(InvoiceId _invoiceId, TransDate _transDate, VendInvoiceAccount _vendInvoiceAccount)
    {
        return _invoiceId
        && _transDate
        && (select firstonly vendInvoiceJour
                where vendInvoiceJour.InvoiceId          == _invoiceId
                    && vendInvoiceJour.InvoiceDate       == _transDate
                    && vendInvoiceJour.InvoiceAccount    == _vendInvoiceAccount).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransAmountMST</Name>
				<Source><![CDATA[
    //</GIN>

    /// <summary>
    /// Gets total amount of transactions in company currency
    /// </summary>
    /// <returns>
    /// Total transactions amount
    /// </returns>
    public TaxAmount getVendTransAmountMST()
    
    {            
        return this.vendTrans().AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayGrossInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display gross invoice amount of invoice journal of Inquiries and reports in company currency
    /// </summary>
    /// <returns>
    /// Gross invoice amount
    /// </returns>
    public display AmountCur displayGrossInvoiceAmount()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && !this.PurchId)
        {
            TaxWithholdTrans_IN taxWithholdTrans_IN;

            select sum(TaxWithholdAmountCur) from taxWithholdTrans_IN
                where taxWithholdTrans_IN.Voucher ==  this.LedgerVoucher
                    && taxWithholdTrans_IN.Invoice == this.InvoiceId
                    && taxWithholdTrans_IN.TransDate == this.InvoiceDate;

            return this.InvoiceAmount - taxWithholdTrans_IN.TaxWithholdAmountCur;
        }
        else
        {
            return this.InvoiceAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInvoiceJourInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustVendTransInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>The <c>CustVendTransInterface</c> object.</returns>
    public CustVendInvoiceJourInterface custVendInvoiceJourInterface()
    {
        return this.CustVendInvoiceJour::custVendInvoiceJourInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the sumTax for table VendInvoiceJour.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The table VendInvoiceJour.
    /// </param>
    /// <param name="_taxTrans">
    /// The table TaxTrans.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The table LedgerJournalTrans.
    /// </param>
    public static void updateSumTax(VendInvoiceJour _vendInvoiceJour, TaxTrans _taxTrans, LedgerJournalTrans _ledgerJournalTrans)
    {
        select firstonly _ledgerJournalTrans
            where _ledgerJournalTrans.RecId == _taxTrans.SourceRecId;

        _vendInvoiceJour.selectForUpdate(true);
        if ((_ledgerJournalTrans.Cancel) && (_ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::Approval))
        {
            _vendInvoiceJour.SumTax = Tax::taxTotalVoucherDateRecId(_ledgerJournalTrans.Voucher, _ledgerJournalTrans.TransDate, _ledgerJournalTrans.RecId, true, false, false);
        }
        else
        {
            _vendInvoiceJour.SumTax = Tax::taxTotal(_ledgerJournalTrans.Voucher, _ledgerJournalTrans.TransDate);
        }
        
        _vendInvoiceJour.SalesBalance = _vendInvoiceJour.InvoiceAmount - _vendInvoiceJour.SumTax;
        _vendInvoiceJour.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestRelatedCorrectionFacture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest facture applicable to current invoice journal.
    /// </summary>
    /// <returns>Facture external ID of the latest related facture.</returns>
    public display FactureExternalId_RU getLatestRelatedCorrectionFacture()
    {
        // Since we might not always have full data on hand, we'll need to pull a record directly
        VendInvoiceJour vendInvoiceJour = VendInvoiceJour::findRecId(this.RecId);

        FactureJour_RU facture;
        RecordSortedList factureList = vendInvoiceJour.factureJourSortedList_RU();
        FactureExternalId_RU ret;

        if (factureList.len() > 0)
        {
            factureList.next(facture);
            ret = facture.FactureExternalId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTransApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes VendInvoiceJour fields from relevant fields of LedgerJournalTrans.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">LedgerJournalTrans table record.</param>
    public void initFromLedgerJournalTransApproval(LedgerJournalTrans _ledgerJournalTrans)
    {
        this.LedgerVoucher = _ledgerJournalTrans.Voucher;
        this.InvoiceDate = _ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124493</DeveloperDocumentation>
	<FormRef>VendInvoiceJournal</FormRef>
	<Label>@SYS12872</Label>
	<SingularLabel>@SYS3179</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InvoiceId</TitleField1>
	<TitleField2>InvoiceAccount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TransportationDocument</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TransportationDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustVendCreditInvoicingJour</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendCreditInvoicingJour</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SourceDocumentHeader</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentHeader</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoicePurchLink</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoicePurchLink</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendPaymSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>VendInvoiceJour</Relation>
			<Table>VendInvoiceJour_Customs_IT</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>VendInvoiceJour</Relation>
			<Table>LedgerJournalTrans_Customs_IT</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorRequestedWorkerEmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogisticsElectronicAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsessionId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FacturedFully_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchReceiptDate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceSeries_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Advance</Name>
			<Label>@SYS7604</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountInDefaultCurrency</Name>
			<Label>@SYS84859</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumMarkupMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDiscMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Attorney_RU</Name>
			<Label>@GLS104525</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttorneyIssuedName_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttorneyId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttorneyDate_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCImportGroup</Name>
			<Label>@SYS316286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCImportLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>vendName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contract_SA</Name>
			<Label>@SYS73302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractNum_SA</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correct_RU</Name>
			<Label>@SYS13069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectionType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Correct_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedInvoiceId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedInvoiceDate_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CreditNote_LV</Name>
			<Label>@SYS8125</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DlvAddress_LV</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRateSecondary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Triangulation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchangeRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery_LT</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddress_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryName_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiotInformation_MX</Name>
			<Label>@SYS312478</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OperationType_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceCodeOnDlvAddress_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendFinalUser_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPurchOperationType_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatDispatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intercompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanySalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyLedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyPosted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventBailee_RU</Name>
			<Label>@GLS115581</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventBaileeReceiptReportId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventPackaging</Name>
			<Label>@SYS72995</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile_RU</Name>
			<Label>@GLS113772</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceDetails</Name>
			<Label>@SYS119043</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceGrouping</Name>
			<Label>@SYS130609</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS13356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostLedgerVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LogisticsElectronicAddress</Name>
			<Label>@SYS315655</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LogisticsElectronicAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NonRealRevenue_RU</Name>
			<Label>@GLS101295</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NonRealRevenue_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentSchedule</Name>
			<Label>@SYS23027</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintManagement</Name>
			<Label>@SYS54502</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Proforma</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseOrder</Name>
			<Label>@SYS15812</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EUSalesList</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS14578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Remittance</Name>
			<Label>@sys152838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemittanceAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReverseCharge</Name>
			<Label>@SYS118818</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReverseChargeAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPrintOnInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSpecifyByLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInvoicePurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATOnPayment_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitedVATInvoice_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocument</Name>
			<Label>@sys127863</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SpecialReport</Name>
			<Label>@SYS10223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StateNumbering</Name>
			<Label>@GLS112826</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WhoIsAuthor_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxSetoffVoucher_IN</Name>
			<Label>@GLS221798</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxSetoffVoucher_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TermsOfDelivery</Name>
			<Label>@SYS6576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsigneeAccount_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsignorAccount_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Totals</Name>
			<Label>@SYS8311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SumTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VAT_IN</Name>
			<Label>@GLS5004</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATAmount_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendConsInvoice_JP</Name>
			<Label>@SYS106495</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendConsInvoice_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsTarget_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendInvoiceDeclaration</Name>
			<Label>@SYS126906</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS9455</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendPaymentGroup</Name>
			<Label>@SYS133130</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendPaymentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSDeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSElectronicAddress</Name>
			<Label>@SYS315655</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorRequestedWorkerEmail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSInvoiceApproval</Name>
			<Label>@SYS315655</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorRequestedWorkerEmail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSInvoiceDates</Name>
			<Label>@SYS315666</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSInvoiceIdentification</Name>
			<Label>@SYS315693</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VSSOtherDetails</Name>
			<Label>@SYS315677</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayIsVendorAdvance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayInvoiceStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CFDI_MX</Name>
			<Label>@SYS4081641</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFDIUUID_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AttorneyDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttorneyDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttorneyId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttorneyId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttorneyIssuedName_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttorneyIssuedName_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCImportLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscAmount</ExtendedDataType>
			<Label>@SYS4376</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsigneeAccount_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccountConsignee_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsignorAccount_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccountConsignor_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConsTarget_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendConsTarget_JP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractNum_SA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendContractNumZakat_SA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Correct_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Correct_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedInvoiceDate_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectedInvoiceDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrectedInvoiceId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectedInvoiceId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<EnumType>FactureCorrectionType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostLedgerVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS22878</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryAddress_LT</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>LT</CountryRegionCodes>
			<ExtendedDataType>Addressing</ExtendedDataType>
			<Label>@SYS7924</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate_ES</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>DlvDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
			<Label>@SYS22058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName_LT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>LT</CountryRegionCodes>
			<ExtendedDataType>VendName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDescriptionLarge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvAddress_LV</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>LV</CountryRegionCodes>
			<ExtendedDataType>Addressing</ExtendedDataType>
			<Label>@SYS7924</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendDlvModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendDlvTermId</ExtendedDataType>
			<Label>@SYS5280</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<Label>@SYS8434</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DocumentOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
			<GroupPrompt>@SYS14588</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchEndDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndDiscMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchEndDiscAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxEnterpriseNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EUSalesList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListDispatchId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRateSecondary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FacturedFully_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FacturedFully_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
			<FeatureClass>PurchaseOrderFinTagFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocumentType_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS108</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FixedDueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchFixedDueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyCompanyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyCompanyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyLedgerVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyVoucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyPosted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanySalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanySalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InternalInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchInternalInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntrastatAddValue_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvIntrastatAddValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatDispatch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatDispatchId</ExtendedDataType>
			<FeatureClass>IntrastatDispatchIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventBaileeReceiptReportId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBaileeReceiptReportId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS9458</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS71013</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<GroupPrompt>@SYS7402</GroupPrompt>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOff</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchInvoiceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBuyerGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBuyerGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendLanguageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Listcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsElectronicAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NonRealRevenue_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NonRealRevenue_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceCode_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>NumberSequenceCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>numberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OffsessionId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OffSessionId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OperationType_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendorOperationType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymDayId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymDayId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Prepayment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendPrepayment</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Proforma</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendProforma</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchAgreementHeader_PSN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchaseType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchaseType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PurchReceiptDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReceiptDate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchInvoicedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>ReasonTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RemittanceAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RemittanceAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnItemNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnItemNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReverseChargeAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS343995</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesPurchOperationType_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SalesPurchOperationTypeRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceCodeOnDlvAddress_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeOnDlvAddress_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SourceDocumentHeaderRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SourceDocumentLineRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StateInvoicePrinted_LV</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LV</CountryRegionCodes>
			<Label>@SYS5308</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchSumLineDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSumPurch</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumMarkupMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@SYS5878</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxInvoicePurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxInvoicePurchId</ExtendedDataType>
			<Label>@GLS221798</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxPrintOnInvoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPrintOnInvoice</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@SYS24823</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxSetoffVoucher_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@GLS221798</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxSpecifyByLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxSpecifyLine</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdAmount_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Triangulation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitedVATInvoice_LT</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitedVATInvoice_LT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VATAmount_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79746</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATOnPayment_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATOnPayment_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendConsInvoice_JP</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendFinalUser_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendFinalUser_BR</ExtendedDataType>
			<Label>@GLS933</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceDeclaration_IS</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDeclarationId_IS</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceGrouping</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorRequestedWorkerEmail</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
			<Label>@SYS330340</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPaymentGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymentGrouping</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Volume</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Volume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Weight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WhoIsAuthor_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT</CountryRegionCodes>
			<EnumType>LtDocOriginator</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CFDIUUID_MX</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EInvoiceCFDIUUID_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceSeries_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceSeries_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReverseCharge_UK</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyExchangeRate</Name>
			<ExtendedDataType>ReportingCurrencyExchRate</ExtendedDataType>
			<Label>@GeneralLedger:ReportingCurrencyFixedExchangeRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ImportedSalesTax</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceImportedSalesTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceivedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceReceivedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ImportedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceImportedAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PartyTaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressStateId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>numberSequenceGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VATNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VATNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInvoiceDeclaration_ISIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLine</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeader</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendConsInvoice_JPIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendConsInvoice_JP</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FiscalDocumentType_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalDocumentType_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CostLedgerVoucherInvoiceDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CostLedgerVoucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerVoucherInvoiceDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerVoucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceAccountLegderVoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerVoucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AttorneyDate_RU</MapField>
					<MapFieldTo>AttorneyDate_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyId_RU</MapField>
					<MapFieldTo>AttorneyId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyIssuedName_RU</MapField>
					<MapFieldTo>AttorneyIssuedName_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
					<MapFieldTo>CashDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscBaseDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
					<MapFieldTo>CashDiscCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
					<MapFieldTo>CashDiscDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsigneeAccount_RU</MapField>
					<MapFieldTo>ConsigneeAccount_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsignorAccount_RU</MapField>
					<MapFieldTo>ConsignorAccount_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsInvoice_JP</MapField>
					<MapFieldTo>VendConsInvoice_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceDate_RU</MapField>
					<MapFieldTo>CorrectedInvoiceDate_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceId_RU</MapField>
					<MapFieldTo>CorrectedInvoiceId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Correct_RU</MapField>
					<MapFieldTo>Correct_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate_ES</MapField>
					<MapFieldTo>DeliveryDate_ES</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>DocumentNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc_RU</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecondary</MapField>
					<MapFieldTo>ExchRateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FacturedFully_RU</MapField>
					<MapFieldTo>FacturedFully_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureModule_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedDueDate</MapField>
					<MapFieldTo>FixedDueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GroupId</MapField>
					<MapFieldTo>VendGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatFulfillmentDate_HU</MapField>
					<MapFieldTo>IntrastatFulfillmentDate_HU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileType_RU</MapField>
					<MapFieldTo>InventProfileType_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmount</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_JP</MapField>
					<MapFieldTo>InvoiceAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_RU</MapField>
					<MapFieldTo>InvoiceAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceNum</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceRegister_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceStatus_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerVoucher</MapField>
					<MapFieldTo>LedgerVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPaymOrderID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NonRealRevenue_RU</MapField>
					<MapFieldTo>NonRealRevenue_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceCode_LT</MapField>
					<MapFieldTo>NumberSequenceCode_LT</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroupId</MapField>
					<MapFieldTo>numberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OffSessionId_RU</MapField>
					<MapFieldTo>OffsessionId_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OneTimeAccount</MapField>
					<MapFieldTo>PurchaseType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyTaxId</MapField>
					<MapFieldTo>PartyTaxID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymDayId</MapField>
					<MapFieldTo>PaymDayId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
					<MapFieldTo>Payment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
					<MapFieldTo>PaymentSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymId</MapField>
					<MapFieldTo>PaymId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Prepayment</MapField>
					<MapFieldTo>Prepayment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintCopies_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintOriginals_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintStandardCurrency_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Proforma</MapField>
					<MapFieldTo>Proforma</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchInternalInvoiceId_RU</MapField>
					<MapFieldTo>InternalInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff_W</MapField>
					<MapFieldTo>InvoiceRoundOff</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesInvoicePostingType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesOrderbalance</MapField>
					<MapFieldTo>SalesBalance</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SentElectronically</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader_RU</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SumTax</MapField>
					<MapFieldTo>SumTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxId</MapField>
					<MapFieldTo>TaxID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
					<MapFieldTo>Triangulation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitedVATInvoice</MapField>
					<MapFieldTo>UnitedVATInvoice_LT</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Updated</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATOnPayment_RU</MapField>
					<MapFieldTo>VATOnPayment_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorVATDate</MapField>
					<MapFieldTo>VendorVATDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendPaymentGroup</MapField>
					<MapFieldTo>VendPaymentGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WhoIsAuthor_LT</MapField>
					<MapFieldTo>WhoIsAuthor_LT</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterJournal</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchrateSecondary</MapField>
					<MapFieldTo>ExchRateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
					<MapFieldTo>InternalInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>numberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff</MapField>
					<MapFieldTo>InvoiceRoundOff</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
					<MapFieldTo>Triangulation</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InterCompanyJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyCompanyId</MapField>
					<MapFieldTo>InterCompanyCompanyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyId</MapField>
					<MapFieldTo>InterCompanySalesId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>VendInvoiceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecondary</MapField>
					<MapFieldTo>ExchRateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceRoundOff</MapField>
					<MapFieldTo>InvoiceRoundOff</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchangeRate</MapField>
					<MapFieldTo>ReportingCurrencyExchangeRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>Listcode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyTaxId</MapField>
					<MapFieldTo>PartyTaxID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxId</MapField>
					<MapFieldTo>TaxID</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxReportDomesticCustVendInvoiceJour_IT</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountCur</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST</MapField>
					<MapFieldTo>InvoiceAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerVoucher</MapField>
					<MapFieldTo>LedgerVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
					<MapFieldTo>PaymentSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImportLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCImportLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCImportLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankLCImportLine_VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCImportLine</Name>
					<Field>BankLCImportLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>VendCashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTableConsignee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_Consignee</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsigneeAccount_RU</Name>
					<SourceEDT>CustAccountConsignee_RU</SourceEDT>
					<Field>ConsigneeAccount_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyCompanyId</Name>
					<SourceEDT>InterCompanyCompanyId</SourceEDT>
					<Field>InterCompanyCompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>InterCompanyCompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryPostalAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<SourceEDT>VendDlvModeId</SourceEDT>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<SourceEDT>VendDlvTermId</SourceEDT>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocumentType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>FiscalDocumentType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentType_BR</Name>
					<Field>FiscalDocumentType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBuyerGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventBuyerGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBuyerGroupId</Name>
					<SourceEDT>ItemBuyerGroupId</SourceEDT>
					<Field>ItemBuyerGroupId</Field>
					<RelatedField>Group</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceDeclarationId_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceDeclaration_IS</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeclarationUsedForReporting</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorInvoiceJournal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceDeclaration_IS</Name>
					<Field>VendInvoiceDeclaration_IS</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>VendLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>VendLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsElectronicAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsElectronicAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsElectronicAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsElectronicAddress_VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LogisticsElectronicAddress</Name>
					<Field>LogisticsElectronicAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>numberSequenceGroup</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>numberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OfficialsTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>OfficialsTrans_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsessionId_RU</Name>
					<SourceEDT>OffSessionId_RU</SourceEDT>
					<Field>OffsessionId_RU</Field>
					<RelatedField>OffSessionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymDay</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymDay</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymDayId</Name>
					<SourceEDT>VendPaymDayId</SourceEDT>
					<Field>PaymDayId</Field>
					<RelatedField>PaymDayId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymDayIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>VendPaymTermId</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchAgreementHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchAgreementHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementHeader_PSN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchAgreementHeader_PSN</Name>
					<Field>PurchAgreementHeader_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable_PurchId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable_PurchId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef_BR</Name>
					<Field>ReasonTableRef_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RemittanceAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RemittanceAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RemittanceAddress</Name>
					<Field>RemittanceAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesPurchOperationType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesPurchOperationType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesPurchOperationType_BR</Name>
					<Field>SalesPurchOperationType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceRelationType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceRelationType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendConsInvoice_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendConsInvoice_JP</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendConsInvoice_JP</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendConsInvoice_JP_VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendConsInvoice_JP</Name>
					<Field>VendConsInvoice_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendGroup</Name>
					<SourceEDT>VendGroupId</SourceEDT>
					<Field>VendGroup</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableRole>VendInvoiceJour</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendLedger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_InvoiceAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_InvoiceAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>VendInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_OrderAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTableConsignor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_Consignor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsignorAccount_RU</Name>
					<SourceEDT>VendAccountConsignor_RU</SourceEDT>
					<Field>ConsignorAccount_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_VendInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxID</Name>
					<Field>TaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PartyTaxRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PartyTaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_VendInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PartyTaxID</Name>
					<Field>PartyTaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>State</Name>
					<Field>State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionStateIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>