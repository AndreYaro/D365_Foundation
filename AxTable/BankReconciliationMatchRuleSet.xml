<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchRuleSet</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconciliationMatchRuleSet extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>BankReconciliationMatchRuleSet</c> table;
    /// If not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankReconciliationMatchRuleSet</c> record.
    /// </param>
    /// <returns>
    /// True if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!BankReconciliationMatchRuleSet::exist(_recId))
        {
            isExisting = checkFailed(strFmt(BankReconciliationMatchRuleSet::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>BankReconciliationMatchRuleSet</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankReconciliationMatchRuleSet</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        BankReconciliationMatchRuleSet matchRuleSet;

        select firstOnly RecId from matchRuleSet
            where matchRuleSet.RecId == _recId;

        return matchRuleSet.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankReconciliationMatchRuleSet</c> record by using a specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The specified record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A currency model.
    /// </param>
    /// <returns>
    /// A <c>BankReconciliationMatchRuleSet</c> record.
    /// </returns>
    public static BankReconciliationMatchRuleSet find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankReconciliationMatchRuleSet  matchRuleSet;

        matchRuleSet.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            matchRuleSet.concurrencyModel(_concurrencyModel);
        }

        select firstonly matchRuleSet
            where matchRuleSet.RecId == _recId;

        return matchRuleSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankReconciliationMatchRuleSet</c> record by using a set ID.
    /// </summary>
    /// <param name="_ruleSetId">
    /// A matching rule set ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A currency model.
    /// </param>
    /// <returns>
    /// A <c>BankReconciliationMatchRuleSet</c> record.
    /// </returns>
    public static BankReconciliationMatchRuleSet findBySetId(
        BankReconciliationMatchRuleSetId    _ruleSetId,
        boolean                             _forUpdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankReconciliationMatchRuleSet matchRuleSet;

        matchRuleSet.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            matchRuleSet.concurrencyModel(_concurrencyModel);
        }

        select firstonly matchRuleSet
            where matchRuleSet.SetId == _ruleSetId;

        return matchRuleSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>BankReconciliationMatchRuleSet</c> table does not exist.
    /// </summary>
    /// <returns>
    /// A message that states that a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS222306</DeveloperDocumentation>
	<Label>@GLS222240</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>SetId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Bank</Modules>
	<ReplacementKey>SetIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchRuleSetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SetIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SetId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>