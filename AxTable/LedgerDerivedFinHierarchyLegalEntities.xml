<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDerivedFinHierarchyLegalEntities</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerDerivedFinHierarchyLegalEntities extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overridden to delete all the records related to the legal entity.
    /// </summary>
    public void delete()
    {
        LedgerDerivedFinHierarchyLegalEntities::deleteAllRelatedRecordsWithLegalEntity(this.EcoResCategoryHierarchy, this.CompanyInfo);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets or gets the record ID of the <c>CompanyInfo</c> record for the <c>LedgerDerivedFinHierarchyLegalEntities</c> table.
    /// </summary>
    /// <param name="_set">
    ///     The indicator on whether to update or not.
    /// </param>
    /// <param name="_dataAreaId">
    ///     The ID of the legal entity.
    /// </param>
    /// <returns>
    ///     The ID of the legal entity.
    /// </returns>
    public edit dataAreaId editDataAreaId(
        boolean     _set,
        dataAreaId  _dataAreaId)
    {
        dataAreaId  dataAreaId = "";
        CompanyInfo companyInfo;

        if (_set)
        {
            if (_dataAreaId == "")
            {
                this.CompanyInfo = 0;
            }
            else
            {
                companyInfo = CompanyInfo::findDataArea(_dataAreaId);

                if (companyInfo)
                {
                    this.CompanyInfo = companyInfo.RecId;
                }
                else
                {
                    this.CompanyInfo = 0;
                }
            }
        }
        else
        {
            if (this.CompanyInfo != 0)
            {
                dataAreaId = CompanyInfo::findRecId(this.CompanyInfo).DataArea;
            }
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editEcoResCategoryHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets or gets the record ID of the <c>EcoResCategoryHierarchy</c> record for the <c>LedgerDerivedFinHierarchyLegalEntities</c> table.
    /// </summary>
    /// <param name="_set">
    ///     The indicator on whether to update or not.
    /// </param>
    /// <param name="_ecoResCategoryHierarchyId">
    ///     The name of the category hierarchy.
    /// </param>
    /// <returns>
    ///     The name of the category hierarchy.
    /// </returns>
    public edit EcoResCategoryHierarchyName editEcoResCategoryHierarchyId(boolean _set, EcoResCategoryHierarchyName _ecoResCategoryHierarchyId)
    {
        EcoResCategoryHierarchyName ecoResCategoryHierarchyId = "";
        EcoResCategoryHierarchy     ecoResCategoryHierarchy;

        if (_set)
        {
            if (_ecoResCategoryHierarchyId == "")
            {
                this.EcoResCategoryHierarchy = 0;
            }
            else
            {
                ecoResCategoryHierarchy = EcoResCategoryHierarchy::findByName(_ecoResCategoryHierarchyId);

                if (ecoResCategoryHierarchy)
                {
                    if (this.validateEcoResCategoryHierarchy(ecoResCategoryHierarchy.RecId))
                    {
                        this.EcoResCategoryHierarchy = ecoResCategoryHierarchy.RecId;
                    }
                }
                else
                {
                    this.EcoResCategoryHierarchy = 0;
                }
            }
        }
        else
        {
            if (this.EcoResCategoryHierarchy != 0)
            {
                ecoResCategoryHierarchyId = EcoResCategoryHierarchy::find(this.EcoResCategoryHierarchy).Name;
            }
        }

        return ecoResCategoryHierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEcoResCategoryHierarchy</Name>
				<Source><![CDATA[
        private boolean validateEcoResCategoryHierarchy(EcoResCategoryHierarchyId _ecoResCategoryHierarchyId)
    {
        boolean ret = true;

        if (!EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::Financials, _ecoResCategoryHierarchyId))
        {
            ret = checkFailed(strFmt("@SYS26332", "@SPS813"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean canWrite;

        canWrite = super();

        if (LedgerDerivedFinHierarchyLegalEntities::findByDerivedFinHierarchyAndLegalEntity(this.EcoResCategoryHierarchy, this.CompanyInfo).RecId !=0)
        {
            canWrite = checkFailed(strFmt("@SPS1018",EcoResCategoryHierarchy::find(this.EcoResCategoryHierarchy).Name, CompanyInfo::findRecId(this.CompanyInfo).DataArea));
        }

        return canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record exists in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID of the <c>LedgerDerivedFinHierarchyLegalEntities</c> record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean isExisting = true;

        if (!LedgerDerivedFinHierarchyLegalEntities::exist(_recId))
        {
            isExisting = checkFailed(strFmt(LedgerDerivedFinHierarchyLegalEntities::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllAssociationRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes all the records from the <c>LedgerDerivedFinHierarchyLegalentities</c> table having the specified value for the EcoResCategoryHierarchy field.
    /// </summary>
    /// <param name="_derivedFinHierarchyRecId">
    ///     The record ID of the <c>EcoResCategoryHierarchy</c> record.
    /// </param>
    public static void deleteAllAssociationRecords(recId _derivedFinHierarchyRecId)
    {
        LedgerDerivedFinHierarchyLegalEntities ledgerDerivedFinHierarchyLegalEntities;

        if (_derivedFinHierarchyRecId != 0 && LedgerDerivedFinHierarchyLegalEntities::findByDerivedFinHierarchy(_derivedFinHierarchyRecId).RecId != 0)
        {
            ttsbegin;

            delete_from ledgerDerivedFinHierarchyLegalEntities
            where ledgerDerivedFinHierarchyLegalEntities.EcoResCategoryHierarchy == _derivedFinHierarchyRecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllRelatedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes all the records that are associated with the <c>LedgerDerivedFinHierarchyLegalentities</c> table record by the specified value of the EcoResCategoryHierarchy field
    ///     from the <c>LedgerDerivedFinHierarchyFilterResults</c> and <c>LedgerDerivedFinHierarchyRuleCriteria</c> tables.
    /// </summary>
    /// <param name="_derivedFinHierarchyRecId">
    ///     The record ID of the <c>EcoResCategoryHierarchy</c> record.
    /// </param>
    public static void deleteAllRelatedRecords(recId _derivedFinHierarchyRecId)
    {
        LedgerDerivedFinHierarchyLegalEntities ledgerDerivedFinHierarchyLegalEntities;

        while select EcoResCategoryHierarchy, CompanyInfo from ledgerDerivedFinHierarchyLegalEntities
            where ledgerDerivedFinHierarchyLegalEntities.EcoResCategoryHierarchy == _derivedFinHierarchyRecId
        {
            LedgerDerivedFinHierarchyFilterResults::deleteResultsForDerivedFinHierarchy(
                ledgerDerivedFinHierarchyLegalEntities.EcoResCategoryHierarchy, ledgerDerivedFinHierarchyLegalEntities.CompanyInfo);

            LedgerDerivedFinHierarchyRuleCriteria::deleteCriteriaForDerivedFinHierarchy(
                ledgerDerivedFinHierarchyLegalEntities.EcoResCategoryHierarchy, ledgerDerivedFinHierarchyLegalEntities.CompanyInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllRelatedRecordsWithLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes all records that are associated with the <c>LedgerDerivedFinHierarchyLegalentities</c> table record by the specified values of the EcoResCategoryHierarchy and CompanyInfo fields
    ///     from the <c>LedgerDerivedFinHierarchyFilterResults</c> and <c>LedgerDerivedFinHierarchyRuleCriteria</c> tables.
    /// </summary>
    /// <param name="_derivedFinHierarchyRecId">
    ///     The record ID of the <c>EcoResCategoryHierarchy</c> record.
    /// </param>
    /// <param name="_companyInfoRecId">
    ///     The record ID of the <c>CompanyInfo</c> record.
    /// </param>
    public static void deleteAllRelatedRecordsWithLegalEntity(recId _derivedFinHierarchyRecId, recId _companyInfoRecId)
    {
        LedgerDerivedFinHierarchyLegalEntities ledgerDerivedFinHierarchyLegalEntities;

        while select EcoResCategoryHierarchy, CompanyInfo from ledgerDerivedFinHierarchyLegalEntities
            where ledgerDerivedFinHierarchyLegalEntities.EcoResCategoryHierarchy == _derivedFinHierarchyRecId &&
                    ledgerDerivedFinHierarchyLegalEntities.CompanyInfo == _companyInfoRecId
        {
            LedgerDerivedFinHierarchyFilterResults::deleteResultsForDerivedFinHierarchy(
                ledgerDerivedFinHierarchyLegalEntities.EcoResCategoryHierarchy, ledgerDerivedFinHierarchyLegalEntities.CompanyInfo);
            LedgerDerivedFinHierarchyRuleCriteria::deleteCriteriaForDerivedFinHierarchy(
                ledgerDerivedFinHierarchyLegalEntities.EcoResCategoryHierarchy, ledgerDerivedFinHierarchyLegalEntities.CompanyInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID of the <c>LedgerDerivedFinHierarchyLegalEntities</c> record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        LedgerDerivedFinHierarchyLegalEntities ledgerDerivedFinHierarchyLegalEntities;

        select firstonly
            RecId
        from
            ledgerDerivedFinHierarchyLegalEntities
        where
            ledgerDerivedFinHierarchyLegalEntities.RecId == _recId;

        return ledgerDerivedFinHierarchyLegalEntities != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID of the <c>LedgerDerivedFinHierarchyLegalEntities</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerDerivedFinHierarchyLegalEntities find(
        recId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerDerivedFinHierarchyLegalEntities ledgerDerivedFinHierarchyLegalEntities;

        ledgerDerivedFinHierarchyLegalEntities.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerDerivedFinHierarchyLegalEntities.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                ledgerDerivedFinHierarchyLegalEntities
            where
                ledgerDerivedFinHierarchyLegalEntities.RecId == _recId;

        return ledgerDerivedFinHierarchyLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDerivedFinHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds records in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table for the specified derived financial hierarchy.
    /// </summary>
    /// <param name="_derivedFinHierarchyRecId">
    ///     The record ID of the <c>EcoResCategoryHierarchy</c> record.
    /// </param>
    /// <returns>
    ///     A buffer of the <c>LedgerDerivedFinHierarchyLegalEntities</c> table; otherwise, an empty buffer.
    /// </returns>
    public static LedgerDerivedFinHierarchyLegalEntities findByDerivedFinHierarchy(recId _derivedFinHierarchyRecId)
    {
        LedgerDerivedFinHierarchyLegalEntities ledgerDerivedFinHierarchyLegalEntities;

        select ledgerDerivedFinHierarchyLegalEntities
            where ledgerDerivedFinHierarchyLegalEntities.EcoResCategoryHierarchy == _derivedFinHierarchyRecId;

        return ledgerDerivedFinHierarchyLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDerivedFinHierarchyAndLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table for the specified derived financial hierarchy and legal entity.
    /// </summary>
    /// <param name="_derivedFinHierarchyRecId">
    ///     The record ID of the <c>EcoResCategoryHierarchy</c> record.
    /// </param>
    /// <param name="_legalEntity">
    ///     The record ID of the <c>CompanyInfo</c> record.
    /// </param>
    /// <returns>
    ///     A record in the <c>LedgerDerivedFinHierarchyLegalEntities</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerDerivedFinHierarchyLegalEntities findByDerivedFinHierarchyAndLegalEntity(recId _derivedFinHierarchyRecId, recId _legalEntity)
    {
        LedgerDerivedFinHierarchyLegalEntities ledgerDerivedFinHierarchyLegalEntities;

        select firstonly ledgerDerivedFinHierarchyLegalEntities
            where ledgerDerivedFinHierarchyLegalEntities.EcoResCategoryHierarchy == _derivedFinHierarchyRecId &&
                ledgerDerivedFinHierarchyLegalEntities.CompanyInfo == _legalEntity;

        return ledgerDerivedFinHierarchyLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the message to use when a specific record in the <c>DerivedFinancialHeirarchyLegalEntities</c> table does not exist.
    /// </summary>
    /// <returns>
    ///     The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS1030</DeveloperDocumentation>
	<FormRef>LedgerDerivedFinHierarchyLegalEntities</FormRef>
	<Label>@SPS1029</Label>
	<TitleField1>CompanyInfo</TitleField1>
	<TitleField2>EcoResCategoryHierarchy</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Ledger</Modules>
	<ReplacementKey>CompanyInfoEcoResCategoryHierarchyIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EcoResCategoryHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EcoResCategoryHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EcoResCategoryHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyInfo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EcoResCategoryHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompanyInfo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS305493</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EcoResCategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS813</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CompanyInfoEcoResCategoryHierarchyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CompanyInfo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EcoResCategoryHierarchy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Table1</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyInfo</Name>
					<Field>CompanyInfo</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategoryHierarchy</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategoryHierarchy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Table1</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EcoResCategoryHierarchy</Name>
					<Field>EcoResCategoryHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>