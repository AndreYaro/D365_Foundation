<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCDSEstimateExpensesImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCDSEstimateExpensesImport extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        this.disperseEstimatesDataOnInsert();
        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _disperseData = true)
    {
        ttsbegin;

        if (_disperseData)
        {
            this.disperseEstimatesDataOnUpdate();
        }
        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        // Make sure the project exists
        if (!ProjTable::find(this.ProjectId).RecId)
        {
            ret = ret && checkFailed("@SYS102541");
        }

        // Make sure the currency exists
        if (!Currency::find(this.CurrencyId).RecId)
        {
            ret = ret && checkFailed(strFmt("@SYS1458", this.CurrencyId));
        }

        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            if (!this.TaskId)
            {
                ret = ret && checkFailed(strFmt("@SYS84378", fieldPName(ProjCDSEstimateExpensesImport, TaskId)));
            }
            // Make sure a corresponding Task exists
            if (!ProjCDSTaskImport::findByTask(this.TaskId))
            {
                ret = ret && checkFailed(strFmt("@Proj:ProjCDSRelatedTaskNotFound", guid2Str(this.TaskId)));
            }

            if (!this.TransactionCategory)
            {
                ret = ret && checkFailed(strFmt("@SYS84378", fieldPName(ProjCDSEstimateExpensesImport, TransactionCategory)));
            }
            // Make sure a corresponding Category exists
            if (ProjCDSEstimateExpensesImport::convertCategoryGuidToId(this.TransactionCategory) == '')
            {
                ret = ret && checkFailed(strFmt("@Proj:ProjCDSRelatedCategoryNotFound", guid2Str(this.TransactionCategory)));
            }

            if (!this.ModelId)
            {
                ret = ret && checkFailed(strFmt("@SYS84378", fieldPName(ProjCDSEstimateExpensesImport, ModelId)));
            }

            if (this.DocumentDate == dateNull())
            {
                ret = ret && checkFailed(strFmt("@SYS84378", fieldPName(ProjCDSEstimateExpensesImport, DocumentDate)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record corresponding to the passed in estimateLineId
    /// </summary>
    /// <param name = "_estimateLineId">The estimate line id to find</param>
    /// <param name = "_forUpdate">Optional parameter indicating if the table should be open for write</param>
    /// <returns>The record corresponding to the passed in taskId</returns>
    public static ProjCDSEstimateExpensesImport find(guid _estimateLineId, boolean _forUpdate = false)
    {
        ProjCDSEstimateExpensesImport estimateExpensesImport;

        estimateExpensesImport.selectForUpdate(_forUpdate);

        if (_estimateLineId)
        {
            select estimateExpensesImport
                where estimateExpensesImport.EstimateLineId == _estimateLineId;
        }

        return estimateExpensesImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disperseDataForInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the data that is being inserted into this table to
    /// multiple other AX tables so that AX can utilize it in operations.
    /// </summary>
    private static ProjCostForecastTransId disperseDataForInsert(ProjCDSEstimateExpensesImport _estimateExpensesImport)
    {
        ProjCostForecastTransId createdTransId;

        // Since imported data will have separate records for Cost amount and Sales amount, see if the other record has already been imported
        ProjCDSEstimateExpensesImport matchingRecord = ProjCDSEstimateExpensesImport::GetMatchingExpensesImportRecord(_estimateExpensesImport.EstimateLineId, _estimateExpensesImport.TransType);

        if (matchingRecord)
        {
            ProjCDSEstimateExpensesImport::createForecastModelRecord(_estimateExpensesImport.ModelId);
            createdTransId = ProjCDSEstimateExpensesImport::createProjForecastCost(_estimateExpensesImport, matchingRecord.Price);

            // Update TransId on matching record
            if (createdTransId)
            {
                ttsbegin;
                matchingRecord.TransId = createdTransId;
                matchingRecord.update(false);
                ttscommit;
            }
        }

        return createdTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disperseDataForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write the data that is being updated into this table to
    /// multiple other AX tables so that AX can utilize it in operations.
    /// </summary>
    private static ProjCostForecastTransId disperseDataForUpdate(ProjCDSEstimateExpensesImport _estimateExpensesImport)
    {
        ProjCostForecastTransId createdTransId = _estimateExpensesImport.TransId;

        if (!_estimateExpensesImport.TransId)
        {
            //
            // Record has not been integrated into standard AX tables yet
            // Follow flow for insert
            //
            createdTransId = ProjCDSEstimateExpensesImport::disperseDataForInsert(_estimateExpensesImport);
        }
        else
        {
            ProjCDSEstimateExpensesImport::createForecastModelRecord(_estimateExpensesImport.ModelId);
            ProjCDSEstimateExpensesImport::updateProjForecastCost(_estimateExpensesImport);
        }

        return createdTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecastModelRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>ForecastModel</c> table if it doesn't already exist
    /// </summary>
    private static void createForecastModelRecord(ProjForecastModelId _modelId)
    {
        ForecastModel forecastModel;
        HeadingSub type = HeadingSub::Heading;

        if (!ForecastModel::find(type, _modelId))
        {
            forecastModel.ModelId = _modelId;
            forecastModel.SubModelId = _modelId;
            forecastModel.Type = type;

            if (forecastModel.validateWrite())
            {
                forecastModel.insert();
            }
            else
            {
                throw Error("@Proj:UnableToSaveDueToErrors");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjForecastCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new data into <c>ProjForecastCost</c>
    /// </summary>
    /// <param name = "_estimateExpensesImport">The source data used for insertion</param>
    /// <param name = "_matchingRecordAmount">The amount for the matching record</param>
    /// <returns>Natural key to the record that was inserted</returns>
    private static ProjCostForecastTransId createProjForecastCost(ProjCDSEstimateExpensesImport _estimateExpensesImport, PriceCur _matchingRecordAmount)
    {
        ProjForecastCost forecastCost;

        // call initialization methods on table
        forecastCost.initValue();
        forecastCost.initFromProjTable(ProjTable::find(_estimateExpensesImport.ProjectId));

        forecastCost.CurrencyId = _estimateExpensesImport.CurrencyId;
        forecastCost.ProjId = _estimateExpensesImport.ProjectId;
        forecastCost.StartDate = _estimateExpensesImport.DocumentDate;

        forecastCost.initFromTransDate(false);   // CurrencyId, ProjectId and StartDate need to be set before calling this

        forecastCost.ExchRate = _estimateExpensesImport.ExchangeRate;
        forecastCost.Txt = _estimateExpensesImport.Description;
        forecastCost.Qty = _estimateExpensesImport.Quantity;
        forecastCost.ModelId = _estimateExpensesImport.ModelId;
        forecastCost.LinePropertyId = ProjBillingTypeLinePropertyDefault::getLinePropertyIDByBillingType(_estimateExpensesImport.BillingType);
        forecastCost.CategoryId = ProjCDSEstimateExpensesImport::convertCategoryGuidToId(_estimateExpensesImport.TransactionCategory);
        forecastCost.ActivityNumber = ProjCDSTaskImport::findByTask(_estimateExpensesImport.TaskId).ActivityNumber;

        switch (_estimateExpensesImport.TransType)
        {
            case ProjCDSTransType::Cost:
                forecastCost.SalesPrice = _matchingRecordAmount;
                forecastCost.CostPrice = _estimateExpensesImport.Price;
                break;
            case ProjCDSTransType::Sales:
                forecastCost.CostPrice = _matchingRecordAmount;
                forecastCost.SalesPrice = _estimateExpensesImport.Price;
                break;
        }

        forecastCost.initSchedFromDateToSourceActivity();

        if (forecastCost.validateWrite())
        {
            forecastCost.insert();
        }
        else
        {
            throw Error("@Proj:UnableToSaveDueToErrors");
        }

        return forecastCost.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjForecastCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates data into <c>ProjForecastCost</c>
    /// </summary>
    /// <param name = "_estimateExpensesImport">The source data used for updating the data</param>
    private static void updateProjForecastCost(ProjCDSEstimateExpensesImport _estimateExpensesImport)
    {
        ProjForecastCost forecastCost = ProjForecastCost::find(_estimateExpensesImport.TransId, true);

        forecastCost.CurrencyId = _estimateExpensesImport.CurrencyId;
        forecastCost.StartDate = _estimateExpensesImport.DocumentDate;

        forecastCost.initFromTransDate(false);   // CurrencyId and StartDate need to be set before calling this

        forecastCost.ExchRate = _estimateExpensesImport.ExchangeRate;
        forecastCost.Txt = _estimateExpensesImport.Description;
        forecastCost.Qty = _estimateExpensesImport.Quantity;
        forecastCost.ModelId = _estimateExpensesImport.ModelId;
        forecastCost.CategoryId = ProjCDSEstimateExpensesImport::convertCategoryGuidToId(_estimateExpensesImport.TransactionCategory);
        forecastCost.LinePropertyId = ProjBillingTypeLinePropertyDefault::getLinePropertyIDByBillingType(_estimateExpensesImport.BillingType);
        forecastCost.ActivityNumber = ProjCDSTaskImport::findByTask(_estimateExpensesImport.TaskId).ActivityNumber;

        switch (_estimateExpensesImport.TransType)
        {
            case ProjCDSTransType::Cost:
                forecastCost.CostPrice = _estimateExpensesImport.Price;
                break;
            case ProjCDSTransType::Sales:
                forecastCost.SalesPrice = _estimateExpensesImport.Price;
                break;
        }

        forecastCost.initSchedFromDateToSourceActivity();

        if (forecastCost.validateWrite())
        {
            forecastCost.update();
        }
        else
        {
            throw Error("@Proj:UnableToSaveDueToErrors");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingExpensesImportRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// PSA separates the Cost and Sales amounts into two records where AX has it as one record with two amounts.  Need to 
    /// find the corresponding record to the one thats being imported.  Note that there won't always be a match because 
    /// the record being imported might be the first one in which case we will allow it to be imported without a match.
    /// </summary>
    /// <param name = "_estimateLineId">The id of the record to find the matching record of</param>
    /// <param name = "_transType">The transaction type of the record to retrieve</param>
    /// <returns>Table buffer of the <c>ProjCDSEstimateExpensesImport</c> record</returns>
    private static ProjCDSEstimateExpensesImport getMatchingExpensesImportRecord(guid _estimateLineId, ProjCDSTransType _transType)
    {
        ProjCDSEstimateExpensesImport expensesImport;
        guid matchingTransactionId;
        str transType;
        str opposingTransType;

        switch (_transType)
        {
            case ProjCDSTransType::Cost:
                transType = 'Cost';
                opposingTransType = 'Unbilled Sales';
                break;
            case ProjCDSTransType::Sales:
                transType = 'Unbilled Sales';
                opposingTransType = 'Cost';
                break;
        }

        ProjCDSTransactionRelationshipImport relationshipImport = ProjCDSTransactionRelationshipImport::FindByTransactionId(_estimateLineId, transType, opposingTransType);

        if (relationshipImport)
        {
            if (relationshipImport.Transaction1Id == _estimateLineId)
            {
                matchingTransactionId = relationshipImport.Transaction2Id;
            }
            else
            {
                matchingTransactionId = relationshipImport.Transaction1Id;
            }

            expensesImport = ProjCDSEstimateExpensesImport::find(matchingTransactionId, true);
        }

        return expensesImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCategoryGuidToId</Name>
				<Source><![CDATA[
    private static CategoryId convertCategoryGuidToId(guid _categoryGuid)
    {
        CategoryTable categoryTable;

        select firstonly CategoryId from categoryTable
            where categoryTable.integrationId == _categoryGuid;

        return categoryTable.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disperseEstimatesDataOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfroms imported expense estimate integration data and populates relevant project expense estimates tables when <c>ProjCDSEstimateExpensesImport</c> record is inserted.
    /// </summary>
    public void disperseEstimatesDataOnInsert()
    {
        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            this.TransId = ProjCDSEstimateExpensesImport::disperseDataForInsert(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disperseEstimatesDataOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfroms imported expense estimate integration data and populates relevant project expense estimates tables when <c>ProjCDSEstimateExpensesImport</c> record is updated.
    /// </summary>
    public void disperseEstimatesDataOnUpdate()
    {
        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            this.TransId = ProjCDSEstimateExpensesImport::disperseDataForUpdate(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.deleteForecastData();
        this.deleteProjCDSTransactionRelationshipImport();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForecastData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes relevant forecast records for imported expense estimate integration data when <c>ProjCDSEstimateExpensesImport</c> record is deleted.
    /// </summary>
    public void deleteForecastData()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProjCDSTransactionRelationshipImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes relevant <c>ProjCDSTransactionRelationshipImport</c> for imported expense estimate integration data when <c>ProjCDSEstimateExpensesImport</c> record is deleted.
    /// </summary>
    public void deleteProjCDSTransactionRelationshipImport()
    {
        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjCDSEstimateExpensesImportTableDevDoc</DeveloperDocumentation>
	<FormRef>ProjForecastCost</FormRef>
	<Label>@Proj:ProjCDSEstimateExpensesImportTableTitle</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>TaskId</Name>
			<AllowEdit>No</AllowEdit>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchangeRate</Name>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<ExtendedDataType>PriceCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<ExtendedDataType>ProjCostForecastTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProjCDSTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BillingType</Name>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProjBillingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransClassification</Name>
			<ExtendedDataType>ProjCategoryCostId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>TransactionCategory</Name>
			<Label>@Proj:TransactionCategory</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>EstimateLineId</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Proj:ProjCDSEstimateLineId</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractLineId</Name>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
			<Label>@Proj:ContractLineId</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EstimateLineId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EstimateLineId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjCDSEstimateHoursImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjectId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjCDSEstimateHoursImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>