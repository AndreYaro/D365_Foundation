<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceTableCalcTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceTableCalcTotals extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustInvoiceTableCalcTotals</c> table for the supplied
    /// <c>CustInvoiceTable</c> reference.
    /// </summary>
    /// <param name = "_custInvoiceTable">
    /// The value of the <c>CustInvoiceTable</c> reference.
    /// </param>
    /// <param name = "_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name = "_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// The specified record in the <c>CustInvoiceTableCalcTotals</c> table if found.
    /// </returns>
    internal static CustInvoiceTableCalcTotals findByCustInvoiceTable(
        CustInvoiceTable _custInvoiceTable,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceTableCalcTotals custInvoiceTableCalcTotals;
        
        custInvoiceTableCalcTotals.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceTableCalcTotals.concurrencyModel(_concurrencyModel);
        }

        if (_custInvoiceTable)
        {
            select firstOnly custInvoiceTableCalcTotals
                where custInvoiceTableCalcTotals.CustInvoiceTable == _custInvoiceTable.RecId;
        }
    
        return custInvoiceTableCalcTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustInvoiceTableCalcTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the specified record in the <c>CustInvoiceTableCalcTotals</c> table for the supplied
    /// <c>CustInvoiceTable</c> reference.
    /// </summary>
    /// <param name = "_custInvoiceTable">
    /// The value of the <c>CustInvoiceTable</c> reference.
    /// </param>
    internal static void deleteCustInvoiceTableCalcTotals(CustInvoiceTable _custInvoiceTable)
    {
        #OCCRetryCount

        int backOffWait = RandomGenerate::construct().randomInt(100, 5000);

        CustInvoiceTableCalcTotals custInvoiceTableCalcTotals = CustInvoiceTableCalcTotals::findByCustInvoiceTable(_custInvoiceTable, true);
        
        if (custInvoiceTableCalcTotals)
        {
            try
            {
                ttsbegin;
                custInvoiceTableCalcTotals.delete();
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() <= #RetryNum)
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
                else
                {
                    throw Exception::Deadlock;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentStateInProcessCustInv_Post_CustInvoiceTransitionedToCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for <c>custInvoiceTransitionedToCompleted</c> method in <c>SourceDocumentStateInProcessCustInv</c> class.
    /// </summary>
    /// <param name="_args">
    /// The arguments from the original method.
    /// </param>
    /// <remarks>
    /// This post event handler will delete the <c>SourceDocumentHeader</c> related invoice's saved calculated invoice totals.
    /// Once the invoice is determiend to be posted the saved totals are no longer necessary and can be deleted.
    /// </remarks>
    [Hookable(false), PostHandlerFor(classStr(SourceDocumentStateInProcessCustInv), methodStr(SourceDocumentStateInProcessCustInv, custInvoiceTransitionedToCompleted))]
    public static void sourceDocumentStateInProcessCustInv_Post_CustInvoiceTransitionedToCompleted(XppPrePostArgs _args)
    {
        SourceDocumentStateInProcessCustInv sourceDocumentStateInProcessCustInv = _args.getThis() as SourceDocumentStateInProcessCustInv;
        SourceDocumentHeader sourceDocumentHeader = _args.getArgNum(1) as SourceDocumentHeader;

        if (sourceDocumentStateInProcessCustInv
            && sourceDocumentHeader)
        {
            CustInvoiceTable custInvoiceTable = CustInvoiceTable::findSourceDocumentHeader(sourceDocumentHeader.RecId);

            if (custInvoiceTable
                && custInvoiceTable.Posted == NoYes::Yes)
            {
                CustInvoiceTableCalcTotals::deleteCustInvoiceTableCalcTotals(custInvoiceTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@AccountsReceivable:CustInvoiceTableCalcTotalsDeveloperDocumentation</DeveloperDocumentation>
	<Label>@AccountsReceivable:CustInvoiceTableCalcTotalsLabel</Label>
	<TitleField1>CustInvoiceTable</TitleField1>
	<TitleField2>RecId</TitleField2>
	<Visibility>Internal</Visibility>
	<Visible>No</Visible>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>CustInvoiceTableIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedCustFreeInvoiceCalcTotals</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustInvoiceTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInvoiceTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable_CalculatedTotals</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceTable</Name>
					<Field>CustInvoiceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>