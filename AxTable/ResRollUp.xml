<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResRollUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource capacity roll-ups.
/// </summary>
public class ResRollUp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRollUpCountSumHardLockedAndSumSoftLocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a container which consists of the specific roll-up count, sum of hard locked hours and sum of soft locked hours by the specified arguments.
    /// </summary>
    /// <param name = "_coverage">The <c>ResRollup</c> table record coverage type.</param>
    /// <param name = "_activityResourceId">Activity resource ID string which composed by "AcitvityRecId-ResourceRecId-ActivityResourceRecId".</param>
    /// <param name = "_timescale">The time scale.</param>
    /// <param name = "_start">Start date time.</param>
    /// <param name = "_end">End date time.</param>
    /// <returns>A container which consists of the specific roll-up count, sum of hard locked hours and sum of soft locked hours.</returns>
    public static container getRollUpCountSumHardLockedAndSumSoftLocked(ResRollUpCoverage _coverage, ActivityResourceId _activityResourceId,
        AVTimeframeType _timescale, utcdatetime _start, utcdatetime _end)
    {
        int rollUpCount;
        Hours sumHardLocked;
        Hours sumSoftLocked;

        if (_activityResourceId && _start && _end)
        {
            ResRollUp resourceRollUp;
            select count(RecId), sum(HardLocked), sum(SoftLocked) from resourceRollUp
                where resourceRollUp.Coverage == _coverage
                && resourceRollUp.CollectionKey == _activityResourceId
                && resourceRollUp.Timescale == _timescale
                && resourceRollUp.Timeframe >= _start
                && resourceRollUp.Timeframe < _end;

            rollUpCount = int642int(resourceRollUp.RecId);
            sumHardLocked = resourceRollUp.HardLocked;
            sumSoftLocked = resourceRollUp.SoftLocked;
        }

        return [rollUpCount, sumHardLocked, sumSoftLocked];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRollUpCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the specific roll-up count by the specified arguments.
    /// </summary>
    /// <param name = "_coverage">The <c>ResRollup</c> table record coverage type.</param>
    /// <param name = "_activityResourceId">Activity resource ID string which composed by "AcitvityRecId-ResourceRecId-ActivityResourceRecId".</param>
    /// <param name = "_timescale">The time scale.</param>
    /// <param name = "_start">Start date time.</param>
    /// <param name = "_end">End date time.</param>
    /// <returns>The specific roll-up count.</returns>
    public static int getRollUpCount(ResRollUpCoverage _coverage, ActivityResourceId _activityResourceId,
        AVTimeframeType _timescale, utcdatetime _start, utcdatetime _end)
    {
        int rollUpCount = 0;

        if (_activityResourceId && _start && _end)
        {
            ResRollUp resourceRollUp;
            select count(RecId) from resourceRollUp
                where resourceRollUp.Coverage == _coverage
                && resourceRollUp.CollectionKey == _activityResourceId
                && resourceRollUp.Timescale == _timescale
                && resourceRollUp.Timeframe >= _start
                && resourceRollUp.Timeframe < _end;

            rollUpCount = int642int(resourceRollUp.RecId);
        }

        return rollUpCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByActivityResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>ResRollup</c> table buffer by activity resource identifier, time frame and time scale.
    /// </summary>
    /// <param name = "_activityResourceId">Activity resource ID value which equivalent to table field CollectionKey value.</param>
    /// <param name = "_targetDateTime">Target date time value which equivalent to table field Timeframe value.</param>
    /// <param name = "_timeFrameType">Time frame type value which equivalent to table field TimeScale value.</param>
    /// <returns><c>ResRollup</c> table buffer.</returns>
    public static ResRollup findByActivityResourceId(ActivityResourceId _activityResourceId, utcdatetime _targetDateTime, AVTimeFrameType _timeFrameType)
    {
        ResRollup resRollup;
        
        if (_activityResourceId)
        {
            ResRollUpCoverage coverage;
            if (ResUtil::getActivityResourceRecId(_activityResourceId))
            {
                coverage = ResRollUpCoverage::Assignment;
            }
            else
            {
                coverage = ResRollUpCoverage::Availability;
            }
            
            select firstonly resRollup
                where resRollup.CollectionKey == _activityResourceId
                    && resRollup.TimeFrame == _targetDateTime
                    && resRollup.TimeScale == _timeFrameType
                    && resRollup.Coverage == coverage;
            
            if (!resRollup && (coverage == ResRollUpCoverage::Assignment))
            {
                // In the case of no record is found for assignment coverage, then look for a record for availability coverage.
                ResourceRecId resource = ResUtil::getResourceRecId(_activityResourceId);
                if (resource)
                {
                    ActivityResourceId collectionKey = strFmt(ResUtil::activityResourceIdStrFormat, '0', resource, '0');
                    coverage = ResRollUpCoverage::Availability;

                    select firstonly resRollup
                            where resRollup.CollectionKey == collectionKey
                                && resRollup.TimeFrame == _targetDateTime
                                && resRollup.TimeScale == _timeFrameType
                                && resRollup.Coverage == coverage;
                }
            }
        }

        return resRollup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumOfCapacityRemainingCapacityAndWorkingDaysByActivityResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sum of resource capaicty, remaining hours and number of working days by activity resource identifier and time range.
    /// </summary>
    /// <param name = "_activityResourceId">Activity resource ID value which equivalent to table field CollectionKey value.</param>
    /// <param name = "_startDateTime">Start date time value which equivalent to table field Timeframe value.</param>
    /// <param name = "_endDateTime">End date time value which equivalent to table field Timeframe value.</param>
    /// <returns>Container with three values which are the sum of capacity, sum of remaining hours and number of working days.</returns>
    /// <remarks>This method is not meant to be used for time scale type hour and day.</remarks>
    public static container getSumOfCapacityRemainingCapacityAndWorkingDaysByActivityResourceId(ActivityResourceId _activityResourceId, utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        ResRollup resRollup;

        if (_activityResourceId)
        {
            AVTimeframeType timeFrameType = AVTimeframeType::Day;

            ResRollUpCoverage coverage;
            if (ResUtil::getActivityResourceRecId(_activityResourceId))
            {
                coverage = ResRollUpCoverage::Assignment;
            }
            else
            {
                coverage = ResRollUpCoverage::Availability;
            }
            
            select firstonly RecId from resRollup
                where resRollup.CollectionKey == _activityResourceId
                    && resRollup.TimeFrame == _startDateTime
                    && resRollup.TimeScale == timeFrameType
                    && resRollup.Coverage == coverage;
            
            if (resRollup)
            {
                select sum(Capacity), sum(Remaining), count(RecId) from resRollup
                    where resRollup.CollectionKey == _activityResourceId
                        && resRollup.TimeFrame >= _startDateTime
                        && resRollup.TimeFrame <= _endDateTime
                        && resRollup.TimeScale == timeFrameType
                        && resRollup.Coverage == coverage
                        && resRollup.Capacity != 0;
            }
            else if (coverage == ResRollUpCoverage::Assignment)
            {
                // In the case of no record is found for assignment coverage, then look for a record for availability coverage.
                ResourceRecId resource = ResUtil::getResourceRecId(_activityResourceId);
                if (resource)
                {
                    ActivityResourceId collectionKey = strFmt(ResUtil::activityResourceIdStrFormat, '0', resource, '0');
                    coverage = ResRollUpCoverage::Availability;

                    select sum(Capacity), sum(Remaining), count(RecId) from resRollup
                        where resRollup.CollectionKey == collectionKey
                            && resRollup.TimeFrame >= _startDateTime
                            && resRollup.TimeFrame <= _endDateTime
                            && resRollup.TimeScale == timeFrameType
                            && resRollup.Coverage == coverage
                            && resRollup.Capacity != 0;
                }
            }
        }

        return [resRollup.Capacity, resRollup.Remaining, int642int(resRollup.RecId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkingDayMapByActivityResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update working day map by activity resource ID. This map should contains date as key and values as enum NoYes to represet whether that day has capacity day.
    /// </summary>
    /// <param name = "_workingDayMap">User specify working day map with a definition of (Types::Date, Types::Enum) with NoYes as enum.</param>
    /// <param name = "_activityResourceId">Activity resource ID value which equivalent to table field CollectionKey value.</param>
    /// <param name = "_startDateTime">Start date time value which equivalent to table field Timeframe value.</param>
    /// <param name = "_endDateTime">End date time value which equivalent to table field Timeframe value.</param>
    /// <remarks>It will update the map with NoYes::Yes to represent working day and NoYes::No to represent not a working day.</remarks>
    public static void updateWorkingDayMapByActivityResourceId(Map _workingDayMap, ActivityResourceId _activityResourceId, utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        ResRollup resRollup;

        if (_activityResourceId)
        {
            AVTimeframeType timeFrameType = AVTimeframeType::Day;

            ResRollUpCoverage coverage;
            if (ResUtil::getActivityResourceRecId(_activityResourceId))
            {
                coverage = ResRollUpCoverage::Assignment;
            }
            else
            {
                coverage = ResRollUpCoverage::Availability;
            }

            select firstonly RecId from resRollup
                    where resRollup.CollectionKey == _activityResourceId
                        && resRollup.TimeFrame == _startDateTime
                        && resRollup.TimeScale == timeFrameType
                        && resRollup.Coverage == coverage;
            
            if (resRollup)
            {
                boolean missingDate = false;
                date startWorkingDate = DateTimeUtil::date(_startDateTime);
                date endWorkingDate = DateTimeUtil::date(_endDateTime);
                date tempWorkinDate = startWorkingDate;

                // Only access table if the map is missing date.
                while (endWorkingDate >= tempWorkinDate)
                {
                    if (!_workingDayMap.exists(tempWorkinDate))
                    {
                        missingDate = true;
                        break;
                    }
                    tempWorkinDate++;
                }

                if (missingDate)
                {
                    // Update working day map as working date according to ResRollup table which has capacity.
                    while select TimeFrame from  resRollup
                    where resRollup.CollectionKey == _activityResourceId
                        && resRollup.TimeFrame >= _startDateTime
                        && resRollup.TimeFrame <= _endDateTime
                        && resRollup.TimeScale == timeFrameType
                        && resRollup.Coverage == coverage
                        && resRollup.Capacity != 0
                    {
                        if (!_workingDayMap.exists(DateTimeUtil::date(resRollup.Timeframe)))
                        {
                            _workingDayMap.insert(DateTimeUtil::date(resRollup.Timeframe), NoYes::Yes);
                        }
                    }

                    // Set the rest of date as not a working date.
                    tempWorkinDate = startWorkingDate;
                    while (endWorkingDate >= tempWorkinDate)
                    {
                        if (!_workingDayMap.exists(tempWorkinDate))
                        {
                            _workingDayMap.insert(tempWorkinDate, NoYes::No);
                        }
                        tempWorkinDate++;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if <c>ResRollUp</c> table has records.
    /// </summary>
    /// <returns>true if <c>ResRollUp</c> table has one or more record; otherwise, false.</returns>
    public static boolean hasRecords()
    {
        boolean hasRecords;

        ResRollUp rollupTable;
        select firstonly RecId from rollupTable; 
        
        return rollupTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestTimeframeByTimeScale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the earliest timeframe by time scale.
    /// </summary>
    /// <param name = "_timeScale">Enum <c>AVTimeframeType</c> as time scale.</param>
    /// <returns>The earliest timeframe datetime value.</returns>
    public static utcdatetime getEarliestTimeframeByTimeScale(AVTimeframeType _timeScale)
    {
        ResRollUp rollupTable;
        select minof(Timeframe) from rollupTable
            where rollupTable.Timescale == _timeScale;
                
        return rollupTable.Timeframe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestTimeframeByTimeScale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the latest timeframe by time scale.
    /// </summary>
    /// <param name = "_timeScale">Enum <c>AVTimeframeType</c> as time scale.</param>
    /// <returns>The latest timeframe datetime value.</returns>
    public static utcdatetime getLatestTimeframeByTimeScale(AVTimeframeType _timeScale)
    {
        ResRollUp rollupTable;
        select maxof(Timeframe) from rollupTable
            where rollupTable.Timescale == _timeScale;
                
        return rollupTable.Timeframe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRecordsByTimescale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if <c>ResRollUp</c> table has records by time scale.
    /// </summary>
    /// <returns>true if <c>ResRollUp</c> table has one or more record; otherwise, false.</returns>
    public static boolean hasRecordsByTimescale(AVTimeframeType _timeScale)
    {
        boolean hasRecords;

        ResRollUp rollupTable;
        select firstonly RecId from rollupTable
            where rollupTable.Timescale == _timeScale;
        
        return rollupTable.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<TableGroup>Transaction</TableGroup>
	<CacheLookup>Found</CacheLookup>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Coverage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ResRollUpCoverage</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RootActivity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ActivityRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceLegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ActivityResource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ActivityResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CollectionKey</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ResActivityResourceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Timescale</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AVTimeframeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>Timeframe</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Capacity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>HardLocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SoftLocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Remaining</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjScheduleStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Calendar</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CalendarRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ChatLookupIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Timescale</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Timeframe</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CollectionKey</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Capacity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LookupByRootActivityIndex</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Timescale</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Timeframe</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RootActivity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActivityResource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Capacity</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HardLocked</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SoftLocked</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Calendar</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LookupByResourceIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActivityResource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Timeframe</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RootActivity</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Calendar</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LookupByCollectionKeyIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CollectionKey</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Timeframe</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Timescale</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Capacity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HardLocked</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SoftLocked</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Remaining</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LookupByActivityResourceHardLockIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActivityResource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HardLocked</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LookupByActivityResourceSoftLockIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActivityResource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SoftLocked</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LookupByResourceHardLockIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HardLocked</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LookupByResourceSoftLockIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SoftLocked</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LookupByTimeScaleIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Coverage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Timescale</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Timeframe</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RootActivity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActivityResource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Capacity</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HardLocked</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SoftLocked</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Calendar</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>