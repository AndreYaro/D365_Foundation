<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTmpTimeBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgTmpTimeBalance extends common
{
    #define.workCaption("@SYS90013")
    #define.indirectCaption("@SYS38379")
    #define.breakCaption("@SYS38391")
    #define.flexOvertimeCaption("@SYS38404" + ',' + "@SYS38467")
    #define.absenceCaption("@SYS3414")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateFromProfileAndStampedTimes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates buffer based on profile and stamped times
    /// </summary>
    public static JmgTmpTimeBalance populateFromProfileAndStampedTimes(JmgWorkerRecId _worker, JmgDate _profileDate)
    {
        JmgTmpTimeBalance   timeBalance;

        Map profileTimeMap = JmgTmpTimeBalance::calculateProfileTimes(_worker, _profileDate);
        Map stampedTimeMap = JmgTmpTimeBalance::calculateStampedTimes(_worker, _profileDate);

        JmgTmpTimeBalance::addRecord(timeBalance, #workCaption, profileTimeMap, stampedTimeMap);
        JmgTmpTimeBalance::addRecord(timeBalance, #indirectCaption, profileTimeMap, stampedTimeMap);
        JmgTmpTimeBalance::addRecord(timeBalance, #breakCaption, profileTimeMap, stampedTimeMap);
        JmgTmpTimeBalance::addRecord(timeBalance, #flexOvertimeCaption, profileTimeMap, stampedTimeMap);
        JmgTmpTimeBalance::addRecord(timeBalance, #absenceCaption, profileTimeMap, stampedTimeMap);

        return timeBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProfileTimes</Name>
				<Source><![CDATA[
    private static Map calculateProfileTimes(JmgWorkerRecId _worker, JmgDate _profileDate)
    {
        Map profileTimes = new Map(Types::String, Types::Real);

        profileTimes.insert(#flexOvertimeCaption, 0);
        profileTimes.insert(#breakCaption, 0);
        profileTimes.insert(#workCaption, 0);

        JmgProfileSpec      proSpec;
        JmgProfileTypeTable jmgProfileTypeTable;

        JmgDayIdEnum day = dayofwk(_profileDate) - 1;

        while select Profile, DayId, StartTime, EndTime from proSpec
            where proSpec.Profile   == JmgEmployee::find(_worker).profileId(_profileDate)
               && proSpec.DayId     == day
               && proSpec.EndTime   != proSpec.StartTime
            join ProfileSpecType from jmgProfileTypeTable
                where jmgProfileTypeTable.RecId == proSpec.ProfileType
        {
            str profileTypeKey = (jmgProfileTypeTable.ProfileSpecType == JmgProfileSpecTypeEnum::OverTime
                                    || jmgProfileTypeTable.ProfileSpecType == JmgProfileSpecTypeEnum::FlexAdd
                                    || jmgProfileTypeTable.ProfileSpecType == JmgProfileSpecTypeEnum::FlexSub) ? #flexOvertimeCaption :
                                (jmgProfileTypeTable.ProfileSpecType == JmgProfileSpecTypeEnum::Break
                                    || jmgProfileTypeTable.ProfileSpecType == JmgProfileSpecTypeEnum::BreakPay) ? #breakCaption : #workCaption;

            if ((profileTypeKey == #workCaption) || (profileTypeKey == #breakCaption))
            {
                profileTimes.insert(
                    profileTypeKey,
                profileTimes.lookup(profileTypeKey) + JmgTmpTimeBalance::calculateTimeDuration(proSpec.StartTime, proSpec.EndTime));
            }
        }

        return profileTimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStampedTimes</Name>
				<Source><![CDATA[
    private static Map calculateStampedTimes(JmgWorkerRecId _worker, JmgDate _profileDate)
    {
        Map stampedTimes = new Map(Types::String, Types::Real);

        stampedTimes.insert(#workCaption, 0);
        stampedTimes.insert(#breakCaption, 0);
        stampedTimes.insert(#indirectCaption, 0);
        stampedTimes.insert(#absenceCaption, 0);

        JmgStampJournalTrans stampJournalTrans;

        int assistStartTime = 0;
        boolean assistJobStarted = false;

        while select stampJournalTrans order by StartTime
            where stampJournalTrans.ProfileDate == _profileDate &&
                  stampJournalTrans.Worker      == _worker      &&
                  stampJournalTrans.StartTime   == stampJournalTrans.StopTime &&
                  (stampJournalTrans.JourRegType == JmgJourRegTypeEnum::StopTeam ||
                  stampJournalTrans.JourRegType == JmgJourRegTypeEnum::StartTeam)
        {
            JmgTime startTime = stampJournalTrans.StartTime;

            if ((stampJournalTrans.JourRegType == JmgJourRegTypeEnum::StopTeam) && assistJobStarted)
            {
                startTime = assistStartTime;
                stampedTimes.insert(
                    #indirectCaption,
                    stampedTimes.lookup(#indirectCaption) + JmgTmpTimeBalance::calculateTimeDuration(startTime, stampJournalTrans.StopTime));
                assistJobStarted = false;
            }

            if (stampJournalTrans.JourRegType == JmgJourRegTypeEnum::StartTeam)
            {
                assistStartTime = stampJournalTrans.StartTime;
                assistJobStarted = true;
            }
        }

        while select stampJournalTrans order by StartTime
            where stampJournalTrans.ProfileDate == _profileDate &&
                  stampJournalTrans.Worker      == _worker      &&
                  stampJournalTrans.StartTime   != stampJournalTrans.StopTime
        {
            str stampTypeKey = (stampJournalTrans.StampType == JmgStampTypeEnum::Work) ? #workCaption :
                                   (stampJournalTrans.StampType == JmgStampTypeEnum::Break) ? #breakCaption :
                                   (stampJournalTrans.StampType == JmgStampTypeEnum::Absence) ? #absenceCaption :
                                   #indirectCaption;

            stampedTimes.insert(
                stampTypeKey,
                stampedTimes.lookup(stampTypeKey) + JmgTmpTimeBalance::calculateTimeDuration(stampJournalTrans.StartTime, stampJournalTrans.StopTime));
        }

        return stampedTimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    private static void addRecord(JmgTmpTimeBalance _timeBalance, JmgTimeBalanceProfileType _profileType, Map _profileTimeMap, Map _stampedTimeMap)
    {
        _timeBalance.initValue();
        _timeBalance.ProfileType = _profileType;
        if (_profileTimeMap.exists(_profileType))
        {
            _timeBalance.ProfileTime = _profileTimeMap.lookup(_profileType);
        }
        else
        {
            _timeBalance.ProfileTime = 0;
        }
        if (_stampedTimeMap.exists(_profileType))
        {
            _timeBalance.StampTime = _stampedTimeMap.lookup(_profileType);
        }
        else
        {
            _timeBalance.StampTime = 0;
        }
        _timeBalance.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTimeDuration</Name>
				<Source><![CDATA[
    private static JmgHours calculateTimeDuration(JmgTime _startTime, JmgTime _stopTime)
    {
        const int singleDayTimeOffset = 24 * 60 * 60;

        if (_stopTime == 0)
        {
            _stopTime = JmgProfileSeconds::getSysTime();
        }

        int timeDiff = _stopTime - _startTime;
        if (timeDiff < 0)
        {
            timeDiff += singleDayTimeOffset;
        }

        return round(timeDiff / 3600, 0.01);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SCM:JmgTmpTimeBalanceDevDoc</DeveloperDocumentation>
	<Label>@SCM:TimeBalance</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProfileType</TitleField1>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StampTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StampTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProfileType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgTimeBalanceProfileType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProfileTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgHours</ExtendedDataType>
			<Label>@SCM:ProfileTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StampTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgHours</ExtendedDataType>
			<Label>@SCM:StampedTime</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProfileTypeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProfileType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>