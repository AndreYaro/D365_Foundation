<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsolidateTemplateCurrency</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class LedgerConsolidateTemplateCurrency extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAccountsOverlap</Name>
				<Source><![CDATA[
    private boolean doAccountsOverlap(LedgerConsolidateTemplateCurrency _newLedgerConsolidateTemplateCurrency)
    {
        LedgerConsolidateTemplateCurrency existingLedgerConsolidateTemplateCurrency;

        select firstonly RecId from existingLedgerConsolidateTemplateCurrency
            where existingLedgerConsolidateTemplateCurrency.ConsolidateTemplate == _newLedgerConsolidateTemplateCurrency.ConsolidateTemplate
                && existingLedgerConsolidateTemplateCurrency.FromAccount >= _newLedgerConsolidateTemplateCurrency.FromAccount
                && existingLedgerConsolidateTemplateCurrency.ToAccount <= _newLedgerConsolidateTemplateCurrency.ToAccount
                && existingLedgerConsolidateTemplateCurrency.SourceLegalEntity ==_newLedgerConsolidateTemplateCurrency.SourceLegalEntity
                && existingLedgerConsolidateTemplateCurrency.RecId != _newLedgerConsolidateTemplateCurrency.RecId;

        return existingLedgerConsolidateTemplateCurrency.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesAccountNumExist</Name>
				<Source><![CDATA[
    private boolean doesAccountNumExist(DimensionValue _accountNum, LedgerConsolidateTemplateCurrency _newLedgerConsolidateTemplateCurrency)
    {
        LedgerConsolidateTemplateCurrency existingLedgerConsolidateTemplateCurrency;

        select firstonly RecId from existingLedgerConsolidateTemplateCurrency
            where existingLedgerConsolidateTemplateCurrency.ConsolidateTemplate == _newLedgerConsolidateTemplateCurrency.ConsolidateTemplate
                && existingLedgerConsolidateTemplateCurrency.FromAccount <= _accountNum
                && existingLedgerConsolidateTemplateCurrency.ToAccount >= _accountNum
                && existingLedgerConsolidateTemplateCurrency.SourceLegalEntity == _newLedgerConsolidateTemplateCurrency.SourceLegalEntity
                && existingLedgerConsolidateTemplateCurrency.RecId != _newLedgerConsolidateTemplateCurrency.RecId;

        return existingLedgerConsolidateTemplateCurrency.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConsolidateCurrencyPairs</Name>
				<Source><![CDATA[
    private boolean validateConsolidateCurrencyPairs(
        CurrencyCode _sourceCurrencyCode,
        CurrencyCode _consCurrencyCode,
        RefRecId _exchangeRateTypeId)
    {
        ExchangeRateCurrencyPair exchangeRateCurrencyPair;

        select firstonly RecId from exchangeRateCurrencyPair
            where ((exchangeRateCurrencyPair.FromCurrencyCode == _sourceCurrencyCode && exchangeRateCurrencyPair.ToCurrencyCode == _consCurrencyCode)
                || (exchangeRateCurrencyPair.ToCurrencyCode == _sourceCurrencyCode && exchangeRateCurrencyPair.FromCurrencyCode == _consCurrencyCode))
                && exchangeRateCurrencyPair.ExchangeRateType == _exchangeRateTypeId;

        return exchangeRateCurrencyPair.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    public edit ExchRate editExchRate(boolean _set, ExchRate _exchRate)
    {
        ExchRate exchRate = _exchRate;
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
            Ledger::current(),
            Ledger::accountingCurrency(this.SourceLegalEntity),
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        exchangeRateHelper.parmExchangeRateTypeRecId(this.ExchangeRateType);

        if (_set)
        {
            this.ExchangeRate = exchangeRateHelper.prepareExchangeRateForStorage(exchRate);
        }
        else
        {
            exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchangeRate);
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(LedgerConsolidateTemplateCurrency, FromAccount) :
                if (this.ToAccount && (this.FromAccount > this.ToAccount))
                {
                    ret = checkFailed("@SYS326164");
                }

                if (ret && this.doesAccountNumExist(this.FromAccount, this))
                {
                    ret = checkFailed(strfmt("@SYS326155", this.FromAccount));
                }

                if (!ret)
                {
                    this.ToAccount = this.orig().ToAccount;
                }

                break;

            case fieldnum(LedgerConsolidateTemplateCurrency, ToAccount) :
                if (this.FromAccount > this.ToAccount)
                {
                    ret = checkFailed(strfmt("@SYS326165", this.ToAccount));
                }

                if (ret && this.doesAccountNumExist(this.ToAccount, this))
                {
                    ret = checkFailed(strfmt("@SYS326155", this.ToAccount));
                }

                if (!ret)
                {
                    this.ToAccount = this.orig().ToAccount;
                }

                break;

            case fieldnum(LedgerConsolidateTemplateCurrency, ExchangeRateType) :
                if (ret && this.ExchangeRateType
                    && !this.validateConsolidateCurrencyPairs(
                        Ledger::accountingCurrency(this.SourceLegalEntity),
                        Ledger::accountingCurrency(),
                        this.ExchangeRateType))
                {
                    ret = checkFailed("@SYS326635");
                }

                if (!ret)
                {
                    this.ExchangeRateType = this.orig().ExchangeRateType;
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        // Verify a case if there is a record that does not have ToAccount range specified,
        // and a new record is inserted where a user does not specify the ToAccount range either.
        if (ret && this.doAccountsOverlap(this))
        {
            //The account range %1..%2 overlaps with an existing account range for the source company.
            ret = checkFailed(strfmt("@SYS326632", this.FromAccount, this.ToAccount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTemplateCurrencies</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void copyTemplateCurrencies(RefRecId _targetTemplateId, RefRecId _newTemplateId)
    {
        if (_targetTemplateId == 0 || _newTemplateId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        LedgerConsolidateTemplateCurrency sourceTemplateCurrency;

        while select sourceTemplateCurrency
            where sourceTemplateCurrency.ConsolidateTemplate == _targetTemplateId
        {
            LedgerConsolidateTemplateCurrency newTemplateCurrency;

            buf2Buf(sourceTemplateCurrency, newTemplateCurrency);
            newTemplateCurrency.ConsolidateTemplate = _newTemplateId;
            newTemplateCurrency.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySourceCurrencyConversions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void copySourceCurrencyConversions(RefRecId _targetTemplateId, CompanyId _curCompany)
    {
        if (_targetTemplateId == 0 || _curCompany == '')
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        LedgerConsolidateTemplateCurrency sourceTemplateCurrency;
        LedgerConsolidateCurrencyConversion ledgerConCurrencyConversion;

        ttsbegin;

        delete_from ledgerConCurrencyConversion
            where ledgerConCurrencyConversion.DataAreaId == _curCompany;

        insert_recordset ledgerConCurrencyConversion
                (SourceLegalEntity, FromAccount, ToAccount, ExchangeRateType, ExchangeRate, ConversionDate)
            select SourceLegalEntity, FromAccount, ToAccount, ExchangeRateType, ExchangeRate, ConversionDate from sourceTemplateCurrency
                where sourceTemplateCurrency.ConsolidateTemplate == _targetTemplateId;
        
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdvConsolidations</ConfigurationKey>
	<DeveloperDocumentation>@GeneralLedger:LedgerConsolidateTemplateCurrencyDevDoc</DeveloperDocumentation>
	<Label>@SYS326633</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ConsolidateTemplate</TitleField1>
	<TitleField2>SourceLegalEntity</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceLegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>LedgerConsolidateTemplateFeature</FeatureClass>
			<Label>@SYS107834</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionFromValue</ExtendedDataType>
			<FeatureClass>LedgerConsolidateTemplateFeature</FeatureClass>
			<Label>@SYS326158</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionToValue</ExtendedDataType>
			<FeatureClass>LedgerConsolidateTemplateFeature</FeatureClass>
			<Label>@SYS326160</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExchangeRateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>LedgerConsolidateTemplateFeature</FeatureClass>
			<Label>@SYS326162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConversionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>LedgerConsolidateTemplateFeature</FeatureClass>
			<EnumType>LedgerConsolidateConversionDate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchangeRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyExchangeRate</ExtendedDataType>
			<FeatureClass>LedgerConsolidateTemplateFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConsolidateTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>LedgerConsolidateTemplateFeature</FeatureClass>
			<Label>@GeneralLedger:LedgerConsolidateTemplateTableLabel</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LegalEntityFromTo</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ConsolidateTemplate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceLegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerConsolidateTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerConsolidateTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsolidateTemplate</Name>
					<Field>ConsolidateTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceLegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerConsolidateCurrencyConversion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceLegalEntity</Name>
					<Field>SourceLegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExchangeRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ExchangeRateType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ExchangeRateType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerConsolidateCurrencyConversion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExchangeRateType</Name>
					<Field>ExchangeRateType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>