<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StateHoliday</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class StateHoliday extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record record in the <c>StateHoliday</c> table.
    /// </summary>
    public void delete()
    {
        super();

        // Flush cache
        PaymCalendarProcessor::stateHolidayChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record record in the <c>StateHoliday</c> table.
    /// </summary>
    public void insert()
    {
        super();

        // Flush cache
        PaymCalendarProcessor::stateHolidayChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>StateHoliday</c> table; if not, an error
    /// message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>StateHoliday</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!StateHoliday::exist(_recId))
        {
            isExisting = checkFailed(strFmt(StateHoliday::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>StateHoliday</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RecId _recId)
    {
        StateHoliday stateHoliday;

        select firstonly RecId from stateHoliday
            where stateHoliday.RecId == _recId;

        return stateHoliday != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>StateHoliday</c> table.
    /// </summary>
    /// <param name="_countryRegion">
    /// The record ID of the country region record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existsForCountryRegion(RecId _countryRegion)
    {
        StateHoliday stateHoliday;
        LogisticsAddressState logisticsAddressState;
        LogisticsAddressCountryRegion logisticsAddressCountryRegion;

        // <GBR>
        LogisticsAddressCity logisticsAddressCity;
        CityHoliday cityHoliday;
        // </GBR>

        select firstonly RecId from stateHoliday
            exists join logisticsAddressState
                where logisticsAddressState.RecId == stateHoliday.State
            exists join logisticsAddressCountryRegion
                where logisticsAddressCountryRegion.CountryRegionId == logisticsAddressState.CountryRegionId
                    && logisticsAddressCountryRegion.RecId == _countryRegion;

        // <GBR>
        if (BrazilParameters::isEnabled() && !stateHoliday)
        {
            select firstonly RecId from cityHoliday
                exists join logisticsAddressCity
                    where logisticsAddressCity.RecId == cityHoliday.City
                exists join logisticsAddressCountryRegion
                    where logisticsAddressCountryRegion.CountryRegionId == logisticsAddressCity.CountryRegionId
                        && logisticsAddressCountryRegion.RecId == _countryRegion;

            return (cityHoliday.RecId != 0);
        }
        // </GBR>

        return (stateHoliday.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>StateHoliday</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>StateHoliday</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static StateHoliday find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        StateHoliday stateHoliday;

        stateHoliday.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            stateHoliday.concurrencyModel(_concurrencyModel);
        }

        select firstonly stateHoliday
            where stateHoliday.RecId == _recId;

        return stateHoliday;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDateState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>StateHoliday</c> table.
    /// </summary>
    /// <param name="_date">
    /// The date of the <c>StateHoliday</c> record.
    /// </param>
    /// <param name="_stateRecId">
    /// The state of the <c>PaymCalendarException</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>StateHoliday</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static StateHoliday findByDateState(
        DueDate _date,
        RecId _stateRecId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        StateHoliday stateHoliday;

        stateHoliday.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            stateHoliday.concurrencyModel(_concurrencyModel);
        }

        select firstonly stateHoliday
            where stateHoliday.HolidayDate == _date
                && stateHoliday.State == _stateRecId;

        return stateHoliday;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>StateHoliday</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exists.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PaymCalendar</ConfigurationKey>
	<DeveloperDocumentation>@GLS220128</DeveloperDocumentation>
	<Label>@GLS220127</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>HolidayDate</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Bank</Modules>
	<ReplacementKey>DateStateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HolidayDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HolidayDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HolidayDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HolidayDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>State</Name>
			<ExtendedDataType>LogisticsAddressStateRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DateStateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>HolidayDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>State</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>State</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>State</Name>
					<Field>State</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>