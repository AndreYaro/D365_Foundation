<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class RetailStatementTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from <c>RetailStatementTable</c> table.
    /// </summary>
    public void delete()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the Expense transaction amounts.
    /// </summary>
    /// <returns>
    /// The total amount of Expense transaction for the given statement number and account type.
    /// </returns>
    display Amount expenses()
    {
        return RetailTransactionIncomeExpenseTrans::totalExpenseIncome(this.StatementId, RetailIncomeExpense::Expense, this.StaffOrTerminal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>income</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the Income transaction amounts.
    /// </summary>
    /// <returns>
    /// The total amount of Income transaction for the given statement number and account type.
    /// </returns>
    display Amount income()
    {
        return RetailTransactionIncomeExpenseTrans::totalExpenseIncome(this.StatementId, RetailIncomeExpense::Income, this.StaffOrTerminal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the default statement date.
    /// </summary>
    /// <param name="_storeTable">
    /// Retail store of the statement.
    /// </param>
    void initDefaultDate (RetailStoreTable _storeTable)
    {
        RetailEodStatementConfigurationAccessor statementTableAccessor = RetailEodStatementConfigurationAccessor::construct(this);
        TimeOfDay statementCalculateBatchEndTime = statementTableAccessor.getstmtCalcBatchEndTime();

        RetailStoreTable    retailStoreTable = RetailStoreTable::find(this.storeId);

        this.transToDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        if (statementCalculateBatchEndTime > 0)
        {
            if (DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()) >= statementCalculateBatchEndTime)
            {
                this.transToDate++;
            }
            this.transToTime = statementCalculateBatchEndTime;
        }

        if (statementTableAccessor.isOneStatementPerDay() == true)
        {
            this.transFromDate = this.transToDate;
            if (retailStoreTable.stmtCalcBatchEndTime > 0)
            {
                this.transFromDate--;
                this.transFromTime = retailStoreTable.stmtCalcBatchEndTime;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusinessDate</Name>
				<Source><![CDATA[
    void setBusinessDate(TransDate _businessDate)
    {
        RetailEodStatementConfigurationAccessor statementTableAccessor = RetailEodStatementConfigurationAccessor::construct(this);
        TimeOfDay statementCalculateBatchEndTime = statementTableAccessor.getStmtCalcBatchEndTime();

        // Per businessDate definition, if stmtCalcBatchEndTime is set to 4am, the "given business date" includes 
        // all transactions between (given date) after 4am and (given date + 1) before 4am.
        // Transactions that happen BEFORE 4am on (given date) are considered to be the previous business date (business date - 1),
        // similarly transactions the happen AFTER 4am on (given date + 1) are considered to be next business date (business date + 1),
        // and BOTH are to be excluded.

        // For example...
        // Business Date (B):    ......><.....B0....><.....B1....><.....B2....><.....
        // Transaction time:     12am---4am---12am---4am---12am---4am---12am---4am---
        // Transaction date (D): <.....D0....><.....D1....><.....D2....><............

        // So, if we pass businessDate paramter for Retail statement, we should set statement start date to (businessDate)
        // and statement end date to (businessDate + 1).

        // if stmtCalcBatchEndTime is not set, we should set statement start and end date to the same (businessDate).
        if (statementCalculateBatchEndTime > 0)
        {
            this.transFromDate = _businessDate;
            this.transToDate = _businessDate + 1;
        }
        else
        {
            this.transFromDate = _businessDate;
            this.transToDate = _businessDate;
        }

        this.transFromTime = statementCalculateBatchEndTime;
        this.transToTime = statementCalculateBatchEndTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromStoreTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default dimensions, statement, and counting methods from the
    /// <c>RetailstoreTable</c> table.
    /// </summary>
    /// <param name="_storeTable">
    /// An instance of the <c>RetailstoreTable</c> table.
    /// </param>
    void initFromStoreTable(RetailStoreTable _storeTable)
    {
        if (RetailEodTrickleFeedFeatureExposure::isEnabled())
        {
            this.ClosingMethod = RetailClosingMethodType::PosBatch;
        }
        else
        {
            this.ClosingMethod = _storeTable.ClosingMethod;
        }
  
        this.StatementMethod = _storeTable.StatementMethod;
        this.DefaultDimension = _storeTable.DefaultDimension;
        this.storeId = _storeTable.StoreNumber;
        this.startAmountCalculation = _storeTable.startAmountCalculation;
        this.oneStatementPerDay = _storeTable.oneStatementPerDay;
        this.bankDropCalculation = _storeTable.bankDropCalculation;
        this.tenderDeclarationCalculation = _storeTable.tenderDeclarationCalculation;
        this.stmtCalcBatchEndTime = _storeTable.stmtCalcBatchEndTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ignore return link setting from the
    /// <c>RetailParameters</c> table.
    /// </summary>
    private void initFromRetailParameters()
    {
        RetailParameters retailParameters = RetailParameters::find();

        this.IgnoreReturnLink = retailParameters.IgnoreReturnLink;
        this.AggregateBeforePosting = retailParameters.aggregateBeforePosting;
        this.DisableCountingRequired = retailParameters.DisableCountingRequired;
        this.ReserveInventoryDuringStatementCalculation = retailParameters.ReserveInventoryDuringStatementCalculation;
        this.SkipAggregationForReturns = retailParameters.SkipAggregationForReturns;
        this.UpdateGSTTransactionId_IN = retailParameters.UpdateGSTTransactionId_IN;
        this.DisableTransactionConsistencyChecker = retailParameters.DisableTransactionConsistencyChecker;
        this.MaxNumberOfThreadsCustomerOrder = retailParameters.MaxNumberOfThreadsCustomerOrder;
        this.RecalculateDimensionsOnPostingError = retailParameters.RecalculateDimensionsOnPostingError;
        this.OfferLedgerDimension = retailParameters.OfferLedgerDimension;
        this.MixMatchLedgerDimension = retailParameters.MixMatchLedgerDimension;
        this.MultiBuyLedgerDimension = retailParameters.MultiBuyLedgerDimension;
        this.ThresholdLedgerDimension = retailParameters.ThresholdLedgerDimension;
        this.PrepaymentLedgerDimension = retailParameters.PrepaymentLedgerDimension;
        this.PrePaymentLedgerJournalName = retailParameters.PrePaymentLedgerJournalName;
        this.autoSettle = retailParameters.autoSettle;
        this.GiftcardItem = retailParameters.GiftcardItem;
        this.ProcessGiftcardsAsPrepayments_RU = retailParameters.ProcessGiftCardsAsPrepayments_RU;
        this.TaxOnGiftCards = retailParameters.TaxOnGiftCards;
        this.AggregatedTransactionsBundleSize = retailParameters.AggregatedTransactionsBundleSize;
        this.UseFinancialDimensionFromReturnStore = retailParameters.UseFinancialDimensionFromReturnStore;
        this.StmtAutoSettleCustomerDeposit = retailParameters.StmtAutoSettleCustomerDeposit;
        this.UseChannelCashManagementReconciliation = retailParameters.StmtUseChannelCashManagementReconciliation;
        this.PrioritizeDimensionsFromPaymentMethod = retailParameters.PrioritizeDimensionsFromPaymentMethodForStatements;

        // This is used to detect when backwards compatibility is required (statements created before an upgrade)
        this.CreationVersionIndicator = RetailStatementCreationVersionIndicator::V1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.StoreId = RetailSharedParameters::find().LocalStoreId;
        this.EodCodeVersion = this.detectVersion();

        this.initFromRetailParameters();

        this.EnableParallelPaymentPostingForSales = 
            RetailEodTrickleFeedFeatureExposure::isEnabled() &&
            RetailEodStatementParallelPostSalesPaymentsToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectVersion</Name>
				<Source><![CDATA[
    private RetailEodCodeVersion detectVersion()
    {
        if (RetailEodStatementFeatureHelper::isNewEodEnabled() && !isConfigurationkeyEnabled(configurationKeyNum(RetailEodBackwardCompatibility)))
        {
            return RetailEodCodeVersion::V2;
        }
        else if (!RetailEodStatementFeatureHelper::isNewEodEnabled() && isConfigurationkeyEnabled(configurationKeyNum(RetailEodBackwardCompatibility)))
        {
            return RetailEodCodeVersion::V1;
        }
        else
        {
            CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
            eventSource.EventWriteStatementsBothConfigKeysEnabled();
            throw error("@Retail:StatementConfigKeysEnabledSimultaneously");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailStatementTable</c> table.
    /// </summary>
    /// <remarks>
    /// Initialises the statement number with the number sequence value generated.
    /// </remarks>
    public void insert()
    {
        this.StatementDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (this.StatementId == '')
        {
            // If the number sequence is continuous, it is necessary to allocate it inside a transaction scope.
            ttsbegin;

            this.StatementId = NumberSeq::newGetNumFromId(RetailStatementTable::numberSequenceId(this.storeId)).num();

            ttscommit;
        }
                      
        if (RetailStatementJour::find(this.StatementId))        
        {
            throw error("@RET4042");            
        }
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemsOrBarcodeNotOnFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of sales transactions of the <c>ItemBarcodeNotOnFile</c> transaction code type.
    /// </summary>
    /// <returns>
    /// The number of sales transactions for the current statement number and transaction code of type
    /// <c>ItemBarcodeNotOnFile</c>.
    /// </returns>
    display Integer itemsOrBarcodeNotOnFile()
    {
        return RetailTransactionSalesTrans::statementTransactionCode(this.StatementId, RetailItemTransactionCode::ItemBarcodeNotOnFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of line discount for the current statement number.
    /// </summary>
    /// <returns>
    /// The line discount for the current statement.
    /// </returns>
    display DiscAmount lineDiscount()
    {
        return RetailTransactionSalesTrans::totalStatementLineDiscount(this.StatementId, this.StaffOrTerminal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loyaltyDiscount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the loyalty discount amount.
    /// </summary>
    /// <returns>
    /// The loyalty discount of the statement.
    /// </returns>
    display DiscAmount loyaltyDiscount_RU()
    {
        return RetailTransactionSalesTrans::totalStatementLoyaltyDiscount_RU(this.StatementId, this.StaffOrTerminal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfBlockedCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the transactions for the current statement.
    /// </summary>
    /// <returns>
    /// The number of transactions for the current statement.
    /// </returns>
    display RetailBlockedCustomers numberOfBlockedCustomers()
    {
        return RetailTransactionTable::transactionsPerTransCode(this.StatementId, RetailTransactionCode::BlockedCustomer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfBlockedItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of sales transactions of the <c>ItemBlocked</c> transaction code type.
    /// </summary>
    /// <returns>
    /// The number of sales transactions for the current statement number and transaction code of type
    /// <c>ItemBlocked</c>.
    /// </returns>
    display RetailBlockedItems numberOfBlockedItems()
    {
        return RetailTransactionSalesTrans::statementTransactionCode(this.StatementId, RetailItemTransactionCode::ItemBlocked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfNonExistingItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of sales transactions of the <c>ItemBarcodeNotOnFile</c> transaction code type.
    /// </summary>
    /// <returns>
    /// The number of sales transactions for the current statement number and transaction code of type
    /// <c>ItemBarcodeNotOnFile</c>.
    /// </returns>
    int numberOfNonExistingItems()
    {
        return RetailTransactionSalesTrans::statementTransactionCode(this.StatementId, RetailItemTransactionCode::ItemBarcodeNotOnFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfPostedSalesEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of sales entries with the status as posted.
    /// </summary>
    /// <returns>
    /// The number of posted sales entries.
    /// </returns>
    display RetailPostedSalesTransactions numberOfPostedSalesEntries()
    {
        return RetailTransactionSalesTrans::numberOfPostedSalesEntries(this.StatementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfUnpostedInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of transactions for the current statement with transaction type physical inventory
    /// and status of none.
    /// </summary>
    /// <returns>
    /// The number of inventory transactions that have not been posted.
    /// </returns>
    display RetailUnpostedInventoryTransactions numberOfUnpostedInventoryTransactions()
    {
        return RetailTransactionTable::numberOfUnpostedInventoryTransactions(RetailTransactionType::PhysicalInventory,this.StatementId,RetailEntryStatus::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTransactionsWithValidationError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of transactions that would be assigned to the current statement 
    /// with transaction validation error.
    /// </summary>
    /// <returns>Number of trnsactions with validation error.</returns>
    display RetailValidationErrorTransactions numberOfTransactionsWithValidationError()
    {
        return RetailTransactionTable::numberOfTransactionsWithValidationError(this.StoreId, this.TransFromDate, this.TransToDate, this.TransFromTime, this.TransToTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfUnpostedSalesEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of sales transactions for the current statement with status of none.
    /// </summary>
    /// <returns>
    /// The number of sales transactions that have not been posted.
    /// </returns>
    display RetailUnpostedSalesTransactions numberOfUnpostedSalesEntries()
    {
        return RetailTransactionSalesTrans::numberOfUnpostedSalesEntries(this.StoreId, this.TransFromDate, this.TransToDate, this.TransFromTime, this.TransToTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the record.
    /// </summary>
    /// <remarks>
    /// prompts for the renaming the record.
    /// </remarks>
    public void renamePrimaryKey()
    {
        if (Box::yesNo("@RET4036",DialogButton::No,"@RET4037","@RET4038") == DialogButton::No)
        {
            info("@RET4039");
            return;
        }
        else
            super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailStatementTitleFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays if the record is new or existing record.
    /// </summary>
    /// <returns>
    /// An string which holds if the record is new or existing.
    /// </returns>
    /// <remarks>
    /// If existing record, then the statementId is appended with the message.
    /// </remarks>
    display TitleFields retailStatementTitleFields()
    {
        if (this.RecId == 0)
        {
            return "@RET5915";
        }
        else
        {
            return strFmt("@RET1891", this.statementId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the net sales amount.
    /// </summary>
    /// <returns>
    /// The net sales amount.
    /// </returns>
    display RetailNetAmount salesAmount()
    {
        return RetailTransactionSalesTrans::totalStatementNetAmount(this.StatementId, this.StaffOrTerminal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the current store.
    /// </summary>
    /// <returns>
    /// The name of the operating unit associated with the store.
    /// </returns>
    display RetailStoreName storeName()
    {
        return RetailStoreTable::find(this.StoreId).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of tax amount of sales transactions for the current statement.
    /// </summary>
    /// <returns>
    /// The total tax amount of the sales transactions of the current statement.
    /// </returns>
    display TaxAmount taxAmount()
    {
        return RetailTransactionSalesTrans::totalStatementTaxAmount(this.StatementId, this.StaffOrTerminal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total difference in currency amount for the specified store.
    /// </summary>
    /// <returns>
    /// The total difference in currency amount for the specified store.
    /// </returns>
    display Amount totalDifference()
    {
        return RetailStatementLine::totalDifferenceAmount(this.StatementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDifferenceInMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of difference amount in MST.
    /// </summary>
    /// <returns>
    /// The total difference in currency amount for the specified store.
    /// </returns>
    display RetailDifferenceAmountMST totalDifferenceInMST()
    {
        return RetailStatementLine::totalDifferenceAmountMST(this.StatementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDifferenceStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total difference in currency amount for the specified store.
    /// </summary>
    /// <returns>
    /// The total difference in currency amount for the specified store.
    /// </returns>
    display RetailDifferenceAmountStore totalDifferenceStore()
    {
        return RetailStatementLine::totalDifferenceAmountStore(this.StatementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line discount amount.
    /// </summary>
    /// <returns>
    /// The line discount of the statement.
    /// </returns>
    display DiscAmount totalDiscount()
    {
        return RetailTransactionSalesTrans::totalStatementDiscount(this.StatementId, this.StaffOrTerminal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionOnWrongShift</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of transactions of the current statement with <c>WrongShift</c> set to true.
    /// </summary>
    /// <returns>
    /// The total number of transactions with wrong shift.
    /// </returns>
    display RetailTransactionOnWrongShift transactionOnWrongShift()
    {
        return RetailTransactionTable::transactionOnWrongShift(this.StatementId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionsWithSaleOrPaymentDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the transactions for the current statement and the transaction type of
    /// <c>SalesPaymentDifference</c>.
    /// </summary>
    /// <returns>
    /// The number of transactions with sales or payment difference.
    /// </returns>
    display RetailTransWithSaleOrPaymentDifference transactionsWithSaleOrPaymentDifference()
    {
        return RetailTransactionTable::transactionsPerTransCode(this.StatementId, RetailTransactionCode::SalesPaymentDifference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkPosBatches</Name>
				<Source><![CDATA[
    /// <summary>
    /// updates pos batches by setting the statement number to null.
    /// </summary>
    public void unmarkPosBatches()
    {
        RetailPosBatchTable    posBatchTable;

        ttsbegin;

        update_recordset posBatchTable
        setting StatementId = ""
        where posBatchTable.StatementId == this.StatementId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transactions, banked tender transactions, and safe tender transactions.
    /// </summary>
    public void unmarkTransactions()
    {
        int                                        fromLine = Global::infologLine();
        int                                        retryCount = 0;
        RetailTransactionTable                     transactionTable;
        RetailTransactionBankedTenderTrans         transactionBankedTenderTrans; // LS GV 21.11.06
        RetailTransactionIncomeExpenseTrans        transactionIncomeExpenseTrans;
        RetailTransactionInfocodeTrans             transactionInfocodeTrans;
        RetailTransactionOrderInvoiceTrans         transactionOrderInvoiceTrans;
        RetailTransactionPaymentTrans              transactionPaymentTrans;
        RetailTransactionSafeTenderTrans           transactionSafeTenderTrans;
        RetailTransactionSalesTrans                transactionSalesTrans;
        RetailTransactionTenderDeclarationTrans    transactionTenderDeclarationTrans;
        RetailStatementLine                        statementLine;
        InventTrans                                inventTrans;
        InventTransOrigin                          inventTransOrigin;

        #OCCRetryCount

        System.Exception genericException;
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadLockException;
        Microsoft.Dynamics.Ax.Xpp.UpdateConflictException updateConflictException;

        try
        {
            retryCount++;

            ttsbegin;

            update_recordSet transactionTable
                setting StatementId = ''
                    where   transactionTable.store          == this.storeId
                        &&  transactionTable.StatementId    == this.StatementId;

            while select transactionSalesTrans
                where   transactionSalesTrans.store         == this.storeId
                    &&  transactionSalesTrans.StatementId   == this.StatementId
            {
                if (transactionSalesTrans.InventStatusSales == RetailInventStatusSales::Posted)
                {
                    inventTrans = InventTrans::findTransId(transactionSalesTrans.InventTransId, true);
                    select firstonly inventTransOrigin where inventTransOrigin.RecId == inventTrans.InventTransOrigin;
                    if (inventTransOrigin)
                    {
                        inventTransOrigin.ReferenceId = "";
                        inventTransOrigin.doUpdate();
                    }
                }
                else
                {
                    if (transactionSalesTrans.InventTransId)
                    {
                        transactionSalesTrans.RemoveReservation();
                    }
                }
            }

            // Since the invent trans could be splitting, moving this delete in a separate loop.
            while select transactionSalesTrans
                where   transactionSalesTrans.store         == this.storeId
                    &&  transactionSalesTrans.statementId   == this.statementId
            {
                if (transactionSalesTrans.inventStatusSales != RetailInventStatusSales::Posted)
                {
                    if (transactionSalesTrans.InventTransId)
                    {
                        transactionSalesTrans.DeleteInventoryReservation();
                    }
                }
            }

            update_recordSet transactionSalesTrans
                setting
                    InventDimId = '',
                    InventTransId = '',
                    InventStatusSales = RetailInventStatusSales::None
                where   transactionSalesTrans.store             == this.storeId
                    &&  transactionSalesTrans.StatementId       == this.StatementId
                    &&  transactionSalesTrans.InventStatusSales != RetailInventStatusSales::Posted;

            update_recordSet transactionSalesTrans
                setting
                    StatementId = '',
                    CostAmount = 0
                where   transactionSalesTrans.store         == this.storeId
                    &&  transactionSalesTrans.StatementId   == this.StatementId;

            update_recordset transactionPaymentTrans
                setting
                    StatementId = '',
                    StatementCode = ''
                where   transactionPaymentTrans.store       == this.storeId
                    &&  transactionPaymentTrans.StatementId == this.StatementId;

        // LS GV 21.11.06

            delete_from transactionBankedTenderTrans
                where   transactionBankedTenderTrans.Store          == this.storeId
                    &&  transactionBankedTenderTrans.StatementId    == this.StatementId
                    &&  transactionBankedTenderTrans.StatusType     == RetailBankedStatusTypeBase::Manual;

            update_recordset transactionBankedTenderTrans
                setting
                    StatementId = '',
                    StatementCode = '',
                    StatusType = RetailBankedStatusTypeBase::RetailEx3,
                    AmountCur = transactionBankedTenderTrans.AmountCurPOS,
                    AmountTendered = transactionBankedTenderTrans.AmountTenderedPOS,
                    AmountMST = transactionBankedTenderTrans.AmountMSTPOS
                where   transactionBankedTenderTrans.Store          == this.storeId
                    &&  transactionBankedTenderTrans.StatementId    == this.StatementId
                    &&  (transactionBankedTenderTrans.StatusType == RetailBankedStatusTypeBase::Override || transactionBankedTenderTrans.StatusType  == RetailBankedStatusTypeBase::RetailEx3);

            delete_from transactionSafeTenderTrans
                where   transactionSafeTenderTrans.Store        == this.storeId
                    &&  transactionSafeTenderTrans.StatementId  == this.StatementId
                    &&  transactionSafeTenderTrans.StatusType   == RetailSafeStatusTypeBase::Manual;

            update_recordset transactionSafeTenderTrans
                setting
                    StatementId = '',
                    StatementCode = '',
                    StatusType = RetailSafeStatusTypeBase::RetailEx3,
                    AmountCur = transactionSafeTenderTrans.AmountCurPOS,
                    AmountTendered = transactionSafeTenderTrans.AmountTenderedPOS,
                    AmountMST = transactionSafeTenderTrans.AmountMSTPOS
                where   transactionSafeTenderTrans.Store        == this.storeId
                    &&  transactionSafeTenderTrans.StatementId  == this.StatementId 
                    &&  (transactionSafeTenderTrans.StatusType == RetailSafeStatusTypeBase::Override || transactionSafeTenderTrans.StatusType  == RetailSafeStatusTypeBase::RetailEx3);

        // LS GV 21.11.06
            update_recordset transactionIncomeExpenseTrans
                setting
                    StatementId = ''
                where   transactionIncomeExpenseTrans.store         == this.storeId
                    &&  transactionIncomeExpenseTrans.StatementId   == this.StatementId;

            update_recordset transactionInfocodeTrans
                setting
                    StatementId = ''
                where   transactionInfocodeTrans.store          == this.storeId
                    &&  transactionInfocodeTrans.StatementId    == this.StatementId;

            update_recordset transactionTenderDeclarationTrans
                setting
                    StatementId = '',
                    StatementCode = ''
                where   transactionTenderDeclarationTrans.store         == this.storeId
                    &&  transactionTenderDeclarationTrans.StatementId   == this.StatementId;

            update_recordset transactionOrderInvoiceTrans
                setting
                    StatementId = ''
                where   transactionOrderInvoiceTrans.storeId        == this.storeId
                   &&   transactionOrderInvoiceTrans.StatementId    == this.StatementId;

            delete_from statementLine
                where statementLine.StatementId == this.StatementId;

            ttscommit;
        }
        catch (deadLockException)
        {
            CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
            str stackTrace, originalExceptionMessage;

            stackTrace = deadLockException.StackTrace != null ? deadLockException.StackTrace.ToString() : strFmt('Exception stack trace was null. Current stack is: %1', System.Environment::StackTrace);
            originalExceptionMessage = deadLockException.Message != null ? deadLockException.Message : 'Exception message was null';

            eventSource.EventWriteStatementsCatchExceptionWithRetries(this.StatementId,
                                                                        enum2Symbol(enumNum(RetailEodTransactionPostingStatus), this.PostingStatus),
                                                                        deadLockException.GetType().FullName,
                                                                        retryCount,
                                                                        #RetryNum,
                                                                        originalExceptionMessage,
                                                                        stackTrace);

            if (retryCount >= #RetryNum)
            {
                throw;
            }
            else
            {
                retry;
            }
        }
        catch (updateConflictException)
        {
            CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
            str stackTrace, originalExceptionMessage;

            stackTrace = updateConflictException.StackTrace != null ? updateConflictException.StackTrace.ToString() : strFmt('Exception stack trace was null. Current stack is: %1', System.Environment::StackTrace);
            originalExceptionMessage = updateConflictException.Message != null ? updateConflictException.Message : 'Exception message was null';

            eventSource.EventWriteStatementsCatchExceptionWithRetries(this.StatementId,
                                                                        enum2Symbol(enumNum(RetailEodTransactionPostingStatus), this.PostingStatus),
                                                                        updateConflictException.GetType().FullName,
                                                                        retryCount,
                                                                        #RetryNum,
                                                                        originalExceptionMessage,
                                                                        stackTrace);

            if (retryCount >= #RetryNum)
            {
                throw;
            }
            else
            {
                retry;
            }
        }
        catch (genericException)
        {
            CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
            str infoLogMsg = strLRTrim(RetailTransactionServiceUtilities::getInfologMessages(fromLine));
            str originalExceptionMessage = genericException.Message != null ? genericException.Message : 'Exception message is null';
            str stackTrace = genericException.StackTrace != null ? genericException.StackTrace.ToString() : strFmt('Exception stack trace was null. Current stack trace is: %1', System.Environment::StackTrace);
   
            eventSource.EventWriteStatementsCatchGenericException(this.StatementId,
                                                                enum2Symbol(enumNum(RetailEodTransactionPostingStatus), this.PostingStatus),
                                                                infoLogMsg,
                                                                genericException.GetType().FullName,
                                                                originalExceptionMessage,
                                                                stackTrace);

            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>RetailStatementTable</c> table.
    /// </summary>
    /// <remarks>
    /// Sets recalculate to true if a transaction exists for the current statement.
    /// </remarks>
    public void update()
    {
        RetailTransactionTable transactionTable;

        if ((this.TransFromDate != this.orig().TransFromDate)
        ||  (this.TransToDate != this.orig().TransToDate)
        ||  (this.TransFromTime != this.orig().TransFromTime)
        ||  (this.TransToTime != this.orig().TransToTime))
        {
            select firstonly transactionTable
            where   transactionTable.store          == this.storeId
                &&  transactionTable.statementId    == this.statementId;

            if (transactionTable)
                this.Recalculate = true;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldNum(RetailStatementTable, StoreId):
                ret = this.validateStoreId();
                break;
            case fieldNum(RetailStatementTable, StaffOrTerminal):
                this.validateStaffOrTerminalFilter();
                break;
            case fieldNum(RetailStatementTable, StatementId):
                ret = this.validateStatementId();
                break;
            case fieldNum(RetailStatementTable, TransFromDate):
                ret = this.validateTransFromDate();
                break;
            case fieldNum(RetailStatementTable, TransFromTime):
                ret = this.validateTransFromTime();
                break;
            case fieldNum(RetailStatementTable, TransToDate):
                ret = this.validateTransToDate();
                break;
            case fieldNum(RetailStatementTable, TransToTime):
                ret = this.validateTransToTime();
                break;
            case fieldNum(RetailStatementTable, IgnoreReturnLink):
                ret = this.validateIgnoreReturnLink();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStaffOrTerminalFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets recalculate to true if a transaction exists for the current statement.
    /// </summary>
    void validateStaffOrTerminalFilter()
    {
        if (RetailTransactionTable::exist(this.StatementId))
            this.Recalculate = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatementId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there exists a statement journal for the given statement.
    /// </summary>
    /// <returns>
    /// true if statement ID is not assigned to a posted statement; otherwise, false.
    /// </returns>
    boolean validateStatementId()
    {
        RetailStatementJour    statementJour;
        ;

        statementJour = RetailStatementJour::find(this.StatementId);

        if (statementJour)
            return checkFailed("@RET4042");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStoreId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the default dimensions, statement, counting methods, and transaction date from
    /// stores are valid.
    /// </summary>
    /// <returns>
    /// true if a statement line does not exist for the current statement; otherwise, false.
    /// </returns>
    boolean validateStoreId()
    {
        RetailStoreTable           storeTable;
        ;

        storeTable = RetailStoreTable::find(this.StoreId);

        if ((this.orig().RecId) && (this.StoreId != this.orig().StoreId))
        {
            if (RetailStatementLine::exist(this.StatementId))
            {
                return checkFailed("@RET4043");
            }
        }

        this.StatementMethod = storeTable.StatementMethod;
        this.ClosingMethod = storeTable.ClosingMethod;
        this.DefaultDimension = storeTable.DefaultDimension;

        this.TransToDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        RetailEodStatementConfigurationAccessor statementTableAccessor = RetailEodStatementConfigurationAccessor::construct(this);
        if (statementTableAccessor.isOneStatementPerDay() == true)
        {
            this.TransFromDate = this.TransToDate;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the transaction from date.
    /// </summary>
    /// <returns>
    /// true if calculated date is null; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Sets the transaction to date to transaction from date if transaction from date is null.
    /// </remarks>
    boolean validateTransFromDate()
    {
        boolean ret;
    ;
        if (this.TransFromDate == Global::dateNull())
        {
            RetailEodStatementConfigurationAccessor statementTableAccessor = RetailEodStatementConfigurationAccessor::construct(this);
            if (statementTableAccessor.isOneStatementPerDay() == true)
                this.TransToDate = this.TransFromDate;
        }

        ret = this.CalculatedDate == dateNull() ? true : checkFailed(strFmt("@RET4484",fieldPName(RetailStatementTable, TransFromDate)));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransFromTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the transaction from time.
    /// </summary>
    /// <returns>
    /// true if calculated date is null; otherwise, false.
    /// </returns>
    boolean validateTransFromTime()
    {
        boolean ret;
    ;
        ret = this.CalculatedDate == dateNull() ? true : checkFailed(strFmt("@RET4484",fieldPName(RetailStatementTable, TransFromTime)));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the transaction ending date.
    /// </summary>
    /// <returns>
    /// true if calculated date is null; otherwise, false.
    /// </returns>
    boolean validateTransToDate()
    {
        boolean ret;

        ret = this.CalculatedDate == dateNull() ? true : checkFailed(strFmt("@RET4484",fieldPName(RetailStatementTable, TransToDate)));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransToTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the transaction ending time.
    /// </summary>
    /// <returns>
    /// true if calculated date is null; otherwise, false.
    /// </returns>
    boolean validateTransToTime()
    {
        boolean ret;
    ;
        ret = this.CalculatedDate == dateNull() ? true : checkFailed(strFmt("@RET4484",fieldPName(RetailStatementTable, TransToTime)));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIgnoreReturnLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the ignore return link field can be set.
    /// </summary>
    /// <returns>
    /// True if posting status is checked or earlier; otherwise, false.
    /// </returns>
    boolean validateIgnoreReturnLink()
    {
        boolean ret;

        ret = this.PostingStatus <= RetailEodTransactionPostingStatus::Checked ? true : checkFailed("@Retail:IgnoreReturnLinkValidation");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.TransFromDate) //ath
            if (this.TransFromDate > this.TransToDate)
                ret = checkFailed("@RET4045");

        if (this.TransFromDate == this.TransToDate)
            if (this.TransFromTime) //ath
                if (this.TransFromTime > this.TransToTime)
                    ret = checkFailed("@RET4046");

        RetailEodStatementConfigurationAccessor statementTableAccessor = RetailEodStatementConfigurationAccessor::construct(this);
        /* Validate statement method and closing method are set to Shifts if either start amount calculation
        is set to 'Last' or Bank drop calculation is set to 'Last'*/
        if ((statementTableAccessor.getStartAmountCalculation() == RetailStartAmountCalculationBase::LastStartAmount ||
            statementTableAccessor.getBankDropCalculation() == RetailBankDropCalculationBase::LastBankDrop) &&
            (this.statementMethod != RetailStaffTerminalTotal::Shift ||
            this.closingMethod != RetailClosingMethodType::PosBatch)
            )
        {
            ret = checkFailed("@Retail:ShiftStatementAndClosingMethodRequiredForStatement");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is a data method for the title to show in the header of the statement form.
    /// </summary>
    /// <returns>A string for the title.</returns>
    public display str headerTitle()
    {
        str statementType = enum2Str(this.statementType);

        return strFmt("@Retail:RetailEodTrickleFeedStatementHeaderTitle", this.statementId, statementType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnposted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an unposted statement exists.
    /// </summary>
    /// <param name="_storeId">
    /// The store number identifier; optional.
    /// </param>
    /// <returns>
    /// true if an unposted statement exists; false otherwise.
    /// </returns>
    public static boolean existUnposted(RetailStoreId _storeId = '')
    {
        return (select firstonly RecId from RetailStatementTable
                    where (_storeId == '' || RetailStatementTable.storeId == _storeId)
                       && RetailStatementTable.postedDate == dateNull()).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailStatementTable</c> table.
    /// </summary>
    /// <param name="_statementId">
    /// The ID number of the statement record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStatementTable</c> table; otherwise, an empty record.
    /// </returns>
    static RetailStatementTable find(RetailStatementId _statementId,
                                  boolean        _forUpdate = false)
    {
        RetailStatementTable   statementTable;

        if (_statementId)
        {
            statementTable.selectForUpdate(_forUpdate);

            select firstonly statementTable
                index hint statementIdx
                where statementTable.StatementId == _statementId;
        }

        return statementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailStatementTable</c> table skipping the AOS cache.
    /// </summary>
    /// <param name="_statementId">
    /// The ID number of the statement record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStatementTable</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// This method is needed whenever we are querying RetailStatementTable *outside* of a transaction scope.
    /// Since the cache strategy for the table is NotInTTS, reading it outside a transaction can lead to stale data being returned if
    /// the cache invalidation request was not processed yet.
    /// </remarks>
    internal static RetailStatementTable findNoCache(RetailStatementId _statementId,
                                  boolean        _forUpdate = false)
    {
        RetailStatementTable   statementTable;

        statementTable.disableCache(true);

        if (_statementId)
        {
            statementTable.selectForUpdate(_forUpdate);

            select firstonly statementTable
                index hint statementIdx
                where statementTable.StatementId == _statementId;
        }

        return statementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecIdNoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailStatementTable</c> table skipping the AOS cache.
    /// </summary>
    /// <param name="_statementRecId">
    /// The RecId of the statement.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStatementTable</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// This method is needed whenever we are querying RetailStatementTable *outside* of a transaction scope.
    /// Since the cache strategy for the table is NotInTTS, reading it outside a transaction can lead to stale data being returned if 
    /// the cache invalidation request was not processed yet.
    /// </remarks>
    internal static RetailStatementTable findByRecIdNoCache(RecId _statementRecId, boolean _forUpdate = false)
    {
        RetailStatementTable   statementTable;

        statementTable.disableCache(true);

        if (_statementRecId)
        {
            statementTable.selectForUpdate(_forUpdate);

            select firstonly statementTable where statementTable.RecId == _statementRecId;
        }

        return statementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailStatementTable</c> table.
    /// </summary>
    /// <param name="_statementRecId">
    /// The RecId of the statement.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStatementTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailStatementTable findByRecId(RecId _statementRecId, boolean _forUpdate = false)
    {
        RetailStatementTable   statementTable;

        if (_statementRecId)
        {
            statementTable.selectForUpdate(_forUpdate);

            select firstonly statementTable where statementTable.RecId == _statementRecId;
        }

        return statementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence ID of the statement number of the local store.
    /// </summary>
    /// <param name="_storeId">
    /// A store ID; optional.
    /// </param>
    /// <returns>
    /// The number sequence ID.
    /// </returns>
    static RefRecId numberSequenceId(RetailStoreId _storeId = '')
    {
        RetailStoreTable storeTable;
        NumberSequenceReference numReference;

        if (prmisDefault(_storeId))
        {
            _storeId = RetailSharedParameters::find().LocalStoreId;
        }

        storeTable = RetailStoreTable::find(_storeId);

        numReference = NumberSeqReference::findReference(extendedTypeNum(RetailStatementId),
                                                NumberSeqScopeFactory::createOperatingUnitScope(storeTable.OMOperatingUnitID));

        if (!numReference.NumberSequenceId)
        {
            throw error(strFmt("@RET4198", _storeId));
        }

        return numReference.NumberSequenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBeenPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the statement has been posted based on the posting status.
    /// </summary>
    /// <param name = "_statementTable">Statement record.</param>
    /// <returns>True if the statement is posted based on posting status; otherwise, false.</returns>
    public static boolean hasBeenPosted(RetailStatementTable _statementTable)
    {
        _statementTable.reread();

        if (_statementTable.PostingStatus == RetailEodTransactionPostingStatus::Posted)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBeenCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the statement has been calculated based on the posting status.
    /// </summary>
    /// <param name = "_statementTable">Statement record.</param>
    /// <returns>True if the statement is calculated based on posting status; otherwise, false.</returns>
    public static boolean hasBeenCalculated(RetailStatementTable _statementTable)
    {
        _statementTable.reread();

        if (_statementTable.PostingStatus >= RetailEodTransactionPostingStatus::Calculated
            && _statementTable.PostingStatus < RetailEodTransactionPostingStatus::Posted)
        {
            // Any statement that is in calculated or one of the posted states has been calculated.
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the statement to include transactions from all days.
    /// </summary>
    internal void initAllDates()
    {
        RetailStoreTable    retailStoreTable = RetailStoreTable::find(this.storeId);

        TransDate transToDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.transToDate = transToDate;
        this.transToTime = retailStoreTable.stmtCalcBatchEndTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return statements finding by sales id.
    /// </summary>
    /// <param name = "_salesId">sales order id.</param>
    /// <param name = "_forUpdate">indicate if statements are using to update.</param>
    /// <returns>Return statement related to sales id.</returns>
    public static RetailStatementTable findBySalesId(SalesId _salesId, boolean _forUpdate = false)
    {
        RetailStatementTable statementTable;
        
        // We can not reference RetailEod tables in ApplicationSuite model
        // Using RetailEodTransactionTableStatementTable_Extension to reference
        return statementTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4160543</DeveloperDocumentation>
	<Label>@RET3201</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>statementId</TitleField1>
	<TitleField2>storeId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>statementIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>statementIdx</PrimaryIndex>
	<ReplacementKey>statementIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailStatementLine</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RetailStatementLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailTransactionTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RetailTransactionTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>statementMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>postedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>postedTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>postedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>postedTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>recalculate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculatedLines</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@RET3210</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>calculatedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>calculatedTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@RET3068</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>totalDiscount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineDiscount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>loyaltyDiscount_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET3040</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IncomeExpense</Name>
			<Label>@RET3185</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>income</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expenses</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Methods</Name>
			<Label>@RET3186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>staffOrTerminal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>closingMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@RET3211</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>postingDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostingOptions</Name>
			<Label>@RET3212</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>skipConfirmation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>debugMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingBatchJobId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Replication</Name>
			<Label>@RET3213</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>replicationCounter</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Sale</Name>
			<Label>@RET3188</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>totalDifferenceStore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTrans</Name>
			<Label>@RET3214</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemsOrBarcodeNotOnFile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfBlockedItems</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfBlockedCustomers</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTransactions</Name>
			<Label>@RET3215</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>numberOfPostedSalesEntries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfUnpostedSalesEntries</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Shift</Name>
			<Label>@RET3189</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>shiftId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shiftDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Store</Name>
			<Label>@RET3088</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>storeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>storeName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransactionInterval</Name>
			<Label>@RET3216</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>transFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transFromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transToTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transactions</Name>
			<Label>@RET3191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>transactionsWithSaleOrPaymentDifference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transactionOnWrongShift</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfUnpostedInventoryTransactions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfTransactionsWithValidationError</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Version</Name>
			<Label>@SYS40796</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EodCodeVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@Retail:RetailStatementTypeLabel</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StatementType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>calculatedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@RET3204</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CalculatedLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@RET4836</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>calculatedTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransTime</ExtendedDataType>
			<Label>@RET3205</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>closingMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailClosingMethod</ExtendedDataType>
			<EnumType>RetailClosingMethodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>debugMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDebugMode</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>postedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@RET3193</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>postedTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransTime</ExtendedDataType>
			<Label>@RET3203</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>postingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@RET3202</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>recalculate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailRecalculate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>replicationCounter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReplicationCounter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>shiftDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailShiftDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shiftId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailShiftId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>skipConfirmation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSkipConfirmation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>staffOrTerminal</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffOrTerminalFilter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>statementDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>statementId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStatementId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>statementMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStatementMethod</ExtendedDataType>
			<EnumType>RetailStaffTerminalTotal</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>stmtCalcInfoLog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InfologData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>stmtPostInfoLog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InfologData</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>storeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>transFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStartingDate</ExtendedDataType>
			<Label>@RET3206</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>transFromTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStartingTime</ExtendedDataType>
			<Label>@RET3207</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>transToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailEndingDate</ExtendedDataType>
			<Label>@RET3208</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>transToTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailEndingTime</ExtendedDataType>
			<Label>@RET3209</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostingStatus</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>RetailEodTransactionPostingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostingErrorCode</Name>
			<EnumType>RetailEodTransactionPostingErrorCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingErrorMessage</Name>
			<ExtendedDataType>RetailEodTransactionPostingErrorMessage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostingErrorStatus</Name>
			<EnumType>RetailEodTransactionPostingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EodCodeVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RetailEodCodeVersion</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentStatus</Name>
			<ConfigurationKey>RetailEodBackwardCompatibility</ConfigurationKey>
			<EnumType>RetailStatementPaymentPostingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostingBatchJobId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS114515</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IgnoreReturnLink</Name>
			<ExtendedDataType>RetailEodStatementIgnoreReturnLink</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatementType</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailStatementTypeValue</ExtendedDataType>
			<EnumType>RetailStatementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AggregateBeforePosting</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailRetailAggregateYesNo</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreationVersionIndicator</Name>
			<AllowEdit>No</AllowEdit>
			<Visible>No</Visible>
			<EnumType>RetailStatementCreationVersionIndicator</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>startAmountCalculation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStartAmountCalculation</ExtendedDataType>
			<EnumType>RetailStartAmountCalculationBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>oneStatementPerDay</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOneStatementPerDay</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>bankDropCalculation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBankDropCalculation</ExtendedDataType>
			<EnumType>RetailBankDropCalculationBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>tenderDeclarationCalculation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTenderDeclarationCalculation</ExtendedDataType>
			<EnumType>RetailTenderDeclarationCalculationBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>stmtCalcBatchEndTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeOfDay</ExtendedDataType>
			<Label>@SYS4005912</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisableCountingRequired</Name>
			<AllowEdit>No</AllowEdit>
			<HelpText>@Retail:RetailDisableCountingRequiredHelpText</HelpText>
			<Label>@Retail:RetailDisableCountingRequired</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReserveInventoryDuringStatementCalculation</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailEodReserveInventoryDuringStatementCalculation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipAggregationForReturns</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailSkipAggregationForReturns</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UpdateGSTTransactionId_IN</Name>
			<AllowEdit>No</AllowEdit>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<HelpText>@RetailGTE:UpdatePOSInvoiceNumberHelp</HelpText>
			<Label>@RetailGTE:UpdatePOSInvoiceNumber</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisableTransactionConsistencyChecker</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailTransactionConsistencyCheckerStatus</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxNumberOfThreadsCustomerOrder</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailEodMaxNumberOfCustomerOrderThreads</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecalculateDimensionsOnPostingError</Name>
			<ExtendedDataType>RetailRecalculateDimensionsOnPostingError</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OfferLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MixMatchLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MultiBuyLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ThresholdLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>autosettle</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL,RU</CountryRegionCodes>
			<ExtendedDataType>RetailAutoSettle</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrepaymentLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrePaymentLedgerJournalName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPrePaymentLedgerJournalNameId</ExtendedDataType>
			<Label>@RetailEod:PrepaymentLedgerJournalNameFieldLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiftcardItem</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessGiftcardsAsPrepayments_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS4007519</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxOnGiftCards</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailTaxOnGiftCard</ExtendedDataType>
			<Label>@Retail:TaxOnGiftCards</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AggregatedTransactionsBundleSize</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailEodAggregatedTransactionsBundleSize</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseFinancialDimensionFromReturnStore</Name>
			<ExtendedDataType>RetailEodStatementPostReturnWithoutSaleFinancialDimension</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StmtAutoSettleCustomerDeposit</Name>
			<ExtendedDataType>RetailEodStatementAutoSettleCustomerDeposit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseChannelCashManagementReconciliation</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailEodStatementUseChannelCashManagementReconciliation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastAttemptToClear</Name>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableParallelPaymentPostingForSales</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RetailEodStatementPostSalesPaymentsInParallel</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CalculatedDateTime</Name>
			<ExtendedDataType>RetailStatementCalculatedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrioritizeDimensionsFromPaymentMethod</Name>
			<ExtendedDataType>RetailPrioritizeDimensionsFromPaymentMethod</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>statementIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>statementId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>storeIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>storeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatementType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStaffTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailStaffTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>staffOrTerminal</Name>
					<Field>staffOrTerminal</Field>
					<RelatedField>staffId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>statementMethod</Name>
					<Field>statementMethod</Field>
					<ValueStr>RetailStaffTerminalTotal::Staff</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStatementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailStatementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>statementId</Name>
					<Field>statementId</Field>
					<RelatedField>statementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>storeId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>storeId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStoreWorkShiftTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreWorkShiftTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>shiftDate</Name>
					<SourceEDT>RetailShiftDate</SourceEDT>
					<Field>shiftDate</Field>
					<RelatedField>shiftDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>staffOrTerminal</Name>
					<Field>staffOrTerminal</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>statementMethod</Name>
					<Field>statementMethod</Field>
					<ValueStr>RetailStaffTerminalTotal::Terminal</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTransactionTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTransactionTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>statementId</Name>
					<Field>statementId</Field>
					<RelatedField>statementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BatchJob</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BatchJob</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingBatchJobId</Name>
					<Field>PostingBatchJobId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PrepaymentLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PrepaymentLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrepaymentLedgerDimension</Name>
					<Field>PrepaymentLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ThresholdLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ThresholdLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ThresholdLedgerDimension</Name>
					<Field>ThresholdLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MultiBuyLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MultiBuyLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MultiBuyLedgerDimension</Name>
					<Field>MultiBuyLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MixMatchLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MixMatchLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MixMatchLedgerDimension</Name>
					<Field>MixMatchLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OfferLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OfferLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OfferLedgerDimension</Name>
					<Field>OfferLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>