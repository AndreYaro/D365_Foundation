<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatArchiveGeneral</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class IntrastatArchiveGeneral extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        NumberSeq  idSequence;

        idSequence = NumberSeq::newGetNum(IntrastatParameters::numRefIntrastatArchiveID(), true);
        this.IntrastatArchiveID = idSequence.num();
        idSequence.used();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record with specified IntrastatArchiveID exists.
    /// Shows warning message if record doesn't exists.
    /// </summary>
    /// <param name = "_intrastatArchiveID">Intrastat Archive ID.</param>
    /// <returns>
    /// True if record exists, otherwise false.
    /// </returns>
    public static boolean checkExist(IntrastatArchiveID _intrastatArchiveID )
    {
        boolean ret = true;

        if (!IntrastatArchiveGeneral::exist(_intrastatArchiveID))
        {
            ret = checkFailed(strfmt(IntrastatArchiveGeneral::txtNotExist(), _intrastatArchiveID));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIntrastatArchiveGeneral</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record in <c>IntrastaArchive</c> table.
    /// </summary>
    /// <param name = "_fileName">Name of the file.</param>
    /// <param name = "_extendedReporting">True if exported file contains extended report, otherwise false</param>
    /// <returns></returns>
    public static IntrastatArchiveID createIntrastatArchiveGeneral(
        Filename              _fileName,
        boolean               _extendedReporting)
    {
        IntrastatArchiveGeneral   intrastatArchiveGeneral;
        xSession                  xses = new xSession();
        IntrastatArchiveID        ret;

        ttsbegin;
        intrastatArchiveGeneral.FileName          = _fileName;
        intrastatArchiveGeneral.UserId            = xses.userId();
        intrastatArchiveGeneral.ExtendedReporting = _extendedReporting;
        intrastatArchiveGeneral.insert();

        ret = intrastatArchiveGeneral.IntrastatArchiveID;

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record with specified IntrastatArchiveID exists.
    /// </summary>
    /// <param name = "_intrastatArchiveID">Intrastat Archive ID.</param>
    /// <returns>
    /// True if record exists, otherwise false.
    /// </returns>
    public static boolean exist(IntrastatArchiveID _intrastatArchiveID )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     intrastatArchiveGeneral
                 where
                     intrastatArchiveGeneral.IntrastatArchiveID == _intrastatArchiveID).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>IntrastatArchiveGeneral</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>IntrastatArchiveGeneral</c> table.
    /// </returns>
    public static IntrastatArchiveGeneral find(
        RecId            _recId,
        boolean          _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        IntrastatArchiveGeneral intrastatArchiveGeneral;

        intrastatArchiveGeneral.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            intrastatArchiveGeneral.concurrencyModel(_concurrencyModel);
        }

        select firstonly intrastatArchiveGeneral
            where intrastatArchiveGeneral.RecId == _recId;

        return intrastatArchiveGeneral;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByIntrastatArchiveID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>IntrastatArchiveGeneral</c> table.
    /// </summary>
    /// <param name="_intrastatArchiveID">
    /// The Id of the IntrastatArchive record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>IntrastatArchiveGeneral</c> table.
    /// </returns>
    public static IntrastatArchiveGeneral findByIntrastatArchiveID(
        IntrastatArchiveID      _intrastatArchiveID ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        IntrastatArchiveGeneral intrastatArchiveGeneral;

        intrastatArchiveGeneral.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            intrastatArchiveGeneral.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            intrastatArchiveGeneral
            where
            intrastatArchiveGeneral.IntrastatArchiveID == _intrastatArchiveID;

        return intrastatArchiveGeneral;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns error message if record doesn't exists.
    /// </summary>
    /// <returns>
    /// Text message that record doesn't exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS103261";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIntrastatArchive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>IntrastatArchive</c> table record.
    /// </summary>
    /// <param name = "_lineCount">Count of the lines in the file.</param>
    /// <param name = "_intrastatArchiveID">Intrastat Archive Id.</param>
    public static void updateIntrastatArchive(
        Counter               _lineCount,
        IntrastatArchiveID    _intrastatArchiveId)
    {
        IntrastatArchiveGeneral intrastatArchiveGeneral;

        ttsbegin;
        select forupdate firstonly intrastatArchiveGeneral
                    where intrastatArchiveGeneral.IntrastatArchiveID == _intrastatArchiveId;

        if (intrastatArchiveGeneral.RecId)
        {
            intrastatArchiveGeneral.NumberOfLines = _lineCount;
            intrastatArchiveGeneral.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIntrastatArchive</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates a header record in <c>IntrastatArchiveGeneral</c> table and records in <c>IntrastatArchiveDetail</c> table according to the given query.
    /// </summary>
    /// <param name = "_fileName">A file name of the created intrastat archive.</param>
    /// <param name = "_taxRegistrationRecId">A tax registration id.</param>
    /// <param name = "_queryRun">The instance of <c>Intrastat</c> query run.</param>
    internal static void createIntrastatArchive(ERFileName _fileName, TaxRegistrationRecId _taxRegistrationRecId, QueryRun _queryRun)
    {
        ttsbegin;

        IntrastatArchiveGeneral intrastatArchiveGeneral = IntrastatArchiveGeneral::findByIntrastatArchiveID(IntrastatArchiveGeneral::createIntrastatArchiveGeneral(_fileName, NoYes::No), true);
        Counter noOflines = IntrastatArchiveDetail::createIntrastatArchiveLines(intrastatArchiveGeneral.RecId, _queryRun);

        intrastatArchiveGeneral.TaxId = _taxRegistrationRecId;
        intrastatArchiveGeneral.NumberOfLines = noOflines;
        intrastatArchiveGeneral.update();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ForeignTrade</ConfigurationKey>
	<DeveloperDocumentation>@SYS123470</DeveloperDocumentation>
	<FormRef>IntrastatArchiveGeneral</FormRef>
	<Label>@SYS93305</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>FileName</TitleField1>
	<TitleField2>createdDateTime</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Intrastat</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>IntrastatArchiveIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>IntrastatArchiveDetail</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>IntrastatArchiveDetail</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatArchiveID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtendedReporting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatArchiveID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatArchiveID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FileInformation</Name>
			<Label>@SYS26552</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberOfLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtendedReporting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatArchiveID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxId</Name>
			<Label>@TaxEngine:TaxRegistrationNumber</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExtendedReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS73153</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Filename</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatArchiveID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>IntrastatArchiveID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumberOfLines</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>NumberOf</ExtendedDataType>
			<Label>@SYS8245</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
			<FeatureClass>IntrastatReportingByTaxIdToggle</FeatureClass>
			<Label>@TaxEngine:TaxRegistrationNumber</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IntrastatArchiveIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>IntrastatArchiveID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UserInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IntrastatArchiveGeneral</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<SourceEDT>UserId</SourceEDT>
					<Field>UserId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxId</Name>
					<Field>TaxId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>