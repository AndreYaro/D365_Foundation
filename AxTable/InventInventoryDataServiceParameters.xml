<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class InventInventoryDataServiceParameters extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	internal static InventInventoryDataServiceParameters find(boolean _forupdate = false)
    {
        InventInventoryDataServiceParameters parameter;

        if (_forupdate)
        {
            parameter.selectForUpdate(_forupdate);
        }

        select firstOnly parameter
            index KeyIdx
            where parameter.key == 0;
 
        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithPessimisticLock</Name>
				<Source><![CDATA[
    internal static InventInventoryDataServiceParameters findWithPessimisticLock()
    {
        InventInventoryDataServiceParameters parameter;

        select pessimisticlock firstOnly parameter
            index KeyIdx
            where parameter.key == 0;
 
        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTriggerOffsetAtOnOrderStatus</Name>
				<Source><![CDATA[
    internal static boolean shouldTriggerOffsetAtOnOrderStatus()
    {
        InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
        return (parameter.ReservationOffsetModifier == InventInventoryDataServiceReservationOffsetModifier::OnOrder && FeatureStateProvider::isFeatureEnabled(InventInventoryDataServiceReservationOffsetFeature::instance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTriggerOffsetAtReservedStatus</Name>
				<Source><![CDATA[
    internal static boolean shouldTriggerOffsetAtReservedStatus()
    {
        InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
        return (parameter.ReservationOffsetModifier == InventInventoryDataServiceReservationOffsetModifier::Reserved || FeatureStateProvider::isFeatureEnabled(InventInventoryDataServiceSoftReservationFeature::instance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryServiceStatus</Name>
				<Source><![CDATA[
    internal static void updateInventoryServiceStatus(InventoryServiceStatus status)
    {
        InventInventoryDataServiceParameters parameters = InventInventoryDataServiceParameters::find(true);
        switch (status)
        {
            case InventoryServiceStatus::Disabled:
                parameters.InventoryServiceStatus = InventoryServiceStatus::Disabled;
                parameters.InventoryServiceExecutedDate = Global::DateNull();
                break;
            case InventoryServiceStatus::Disabling:
                parameters.InventoryServiceStatus = InventoryServiceStatus::Disabling;
                break;
            case InventoryServiceStatus::InitialSync:
                parameters.InventoryServiceStatus = InventoryServiceStatus::InitialSync;
                parameters.ResyncJobStatus = InventoryServiceResyncJobStatus::Completed;
                parameters.ResyncJobErrorMessage = '';
                break;
            case InventoryServiceStatus::Enabled:
                parameters.InventoryServiceStatus = InventoryServiceStatus::Enabled;
                parameters.ResyncJobStatus = InventoryServiceResyncJobStatus::Completed;
                parameters.ResyncJobErrorMessage = '';
                break;
            case InventoryServiceStatus::Enabling:
                parameters.InventoryServiceStatus = InventoryServiceStatus::Enabling;
                parameters.ResyncJobErrorMessage = '';
                parameters.ResyncJobStatus = InventoryServiceResyncJobStatus::NotStarted;
                parameters.InventoryServiceExecutedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                break;
            default:
                break;
        }

        InventInventoryDataServiceLog::insertLog(strFmt("@SCM:InventoryServiceUpdateServiceStatusLog", enum2Symbol(enumNum(InventoryServiceStatus), status)), InventInventoryDataServiceLogEventType::BatchJobChange);
        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIsProcessingQueueBackup</Name>
				<Source><![CDATA[
    internal static void updateIsProcessingQueueBackup(boolean isProcessingQueueBackup)
    {
        InventInventoryDataServiceParameters parameters = InventInventoryDataServiceParameters::find(true);
        parameters.IsProcessingQueueBackup = isProcessingQueueBackup;
        parameters.PostedCount = 0;
        parameters.PostedCountWHS = 0;
        parameters.PostedCountReserv = 0;
        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAtpStatus</Name>
				<Source><![CDATA[
    internal static void updateAtpStatus(InventoryServiceStatus _atpStatus)
    {
        InventInventoryDataServiceParameters parameters = InventInventoryDataServiceParameters::find(true);

        if (_atpStatus == InventoryServiceStatus::Enabling)
        {
            parameters.InventoryServiceAtpExecutedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        parameters.InventoryServiceAtpStatus = _atpStatus;
        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIsWaitingForInserting</Name>
				<Source><![CDATA[
    internal static void updateIsWaitingForInserting(boolean isWaitingForInserting)
    {
        InventInventoryDataServiceParameters parameters = InventInventoryDataServiceParameters::find(true);
        parameters.IsWaitingForInserting = isWaitingForInserting;
        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResyncJobStatus</Name>
				<Source><![CDATA[
    internal static void updateResyncJobStatus(InventoryServiceResyncJobStatus status, str message)
    {
        InventInventoryDataServiceParameters parameters = InventInventoryDataServiceParameters::find(true);
        parameters.ResyncJobStatus = status;
        parameters.ResyncJobErrorMessage = message;

        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSuccessfullyPostedCount</Name>
				<Source><![CDATA[
    internal static void addSuccessfullyPostedCount(int postedCount)
    {
        InventInventoryDataServiceParameters parameters;
        select pessimisticlock firstOnly parameters
            index KeyIdx
            where parameters.key == 0;

        parameters.PostedCount += postedCount;
        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSuccessfullyPostedCountWHS</Name>
				<Source><![CDATA[
    internal static void addSuccessfullyPostedCountWHS(int postedCountWHS)
    {
        InventInventoryDataServiceParameters parameters;
        select pessimisticlock firstOnly parameters
            index KeyIdx
            where parameters.key == 0;

        parameters.PostedCountWHS += postedCountWHS;
        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSuccessfullyPostedCountReserv</Name>
				<Source><![CDATA[
    internal static void addSuccessfullyPostedCountReserv(int postedCountReserv)
    {
        InventInventoryDataServiceParameters parameters;
        select pessimisticlock firstOnly parameters
            index KeyIdx
            where parameters.key == 0;

        parameters.PostedCountReserv += postedCountReserv;
        parameters.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBlockLevel</Name>
				<Source><![CDATA[
    internal static SoftReserveBlockLevel defaultBlockLevel()
    {
        InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();

        return parameter.DefaultSoftReserveBlockLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationOffsetV0StatusIssue</Name>
				<Source><![CDATA[
    internal StatusIssue getReservationOffsetV0StatusIssue()
    {
        return this.ReservationOffsetModifier == InventInventoryDataServiceReservationOffsetModifier::OnOrder? StatusIssue::OnOrder : StatusIssue::ReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryServiceStatusEnable</Name>
				<Source><![CDATA[
    public boolean isInventoryServiceStatusEnable()
    {
        return this.InventoryServiceStatus != InventoryServiceStatus::Disabled && this.InventoryServiceStatus != InventoryServiceStatus::Disabling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.InventoryServiceEndpoint == '')
        {
            throw error("@SCM:InventoryServiceEndpointShouldNotBeEmpty");
        }

        this.NumberOfInventsumInRequest = 512;

        InventInventoryDataServiceLog::insertLog(
            strFmt("@SCM:InventoryServiceInsertParametersLogForEndpoint", this.InventoryServiceEndpoint),
            InventInventoryDataServiceLogEventType::InsertServiceParametersRecord);
        InventInventoryDataServiceLog::insertLog(
            strFmt("@SCM:InventoryServiceInsertParametersLogForStatus", enum2Symbol(enumNum(InventoryServiceStatus), this.InventoryServiceStatus), this.ResyncBeforeInitialPush),
            InventInventoryDataServiceLogEventType::InsertServiceParametersRecord);
        InventInventoryDataServiceLog::insertLog(
            strFmt("@SCM:InventoryServiceInsertParametersLogForWHSFeature", this.IsWHSItemEnabled),
            InventInventoryDataServiceLogEventType::InsertServiceParametersRecord);
        InventInventoryDataServiceLog::insertLog(
            strFmt("@SCM:InventoryServiceInsertParametersLogForReservationOffsetFeature", this.IsReservationOffsetEnabled, enum2Symbol(enumNum(InventInventoryDataServiceReservationOffsetModifier), this.ReservationOffsetModifier)),
            InventInventoryDataServiceLogEventType::InsertServiceParametersRecord);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (_fieldName == fieldStr(InventInventoryDataServiceParameters,NumberOfInventsumInRequest))
        {
            if (this.NumberOfInventsumInRequest <= 0 || this.NumberOfInventsumInRequest > 1000)
            {
                ret = checkFailed("@SCM:InventoryServiceMaxRecordsCountMessage");
            }
        }

        if (_fieldName == fieldStr(InventInventoryDataServiceParameters,InventoryServiceEndpoint))
        {
            InventoryServiceRegistrationContract healthCheckResult;
            var serviceHealthChecker = new InventoryServiceServiceHealthChecker();

            if (this.InventoryServiceEndpoint == '' || !serviceHealthChecker.checkHealth(this.InventoryServiceEndpoint))
            {
                var result = serviceHealthChecker.getServiceEndpoint();
                var endpoint = conPeek(result, 1);
                var errorMesg = conPeek(result, 2);

                if (errorMesg != '')
                {
                    ret = checkFailed(errorMesg);
                }
                else
                {
                    if (endpoint != '')
                    {
                        ret = checkFailed("@SCM:InventoryServiceEndpointShouldBeValid");
                    }
                    else
                    {
                        ret = checkFailed("@SCM:InventoryServiceEndpointIsNotSetProperlyAndCanNotBeGetAutomaticallyErrorMessage");
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventInventoryDataServiceParameters buffer = this.orig() as InventInventoryDataServiceParameters;
        if (this.InventoryServiceEndpoint != buffer.InventoryServiceEndpoint)
        {
            InventInventoryDataServiceLog::insertLog(strFmt("@SCM:InventoryServiceUpdateEndpointLog", this.InventoryServiceEndpoint), InventInventoryDataServiceLogEventType::EndpointChange);
        }

        if (this.IsReservationOffsetEnabled != buffer.IsReservationOffsetEnabled)
        {
            InventInventoryDataServiceLog::insertLog(strFmt("@SCM:InventoryServiceUpdateReservationOffsetFeatureLog", buffer.IsReservationOffsetEnabled, this.IsReservationOffsetEnabled), InventInventoryDataServiceLogEventType::ReservationOffsetFeatureChange);
        }

        if (this.ReservationOffsetModifier != buffer.ReservationOffsetModifier)
        {
            InventInventoryDataServiceLog::insertLog(strFmt("@SCM:InventoryServiceUpdateReservationOffsetModifierLog", enum2Symbol(enumNum(InventInventoryDataServiceReservationOffsetModifier), buffer.ReservationOffsetModifier), enum2Symbol(enumNum(InventInventoryDataServiceReservationOffsetModifier), this.ReservationOffsetModifier)), InventInventoryDataServiceLogEventType::ReservationOffsetFeatureChange);
        }

        if (this.IsWHSItemEnabled != buffer.IsWHSItemEnabled)
        {
            InventInventoryDataServiceLog::insertLog(strFmt("@SCM:InventoryServiceUpdateWHSFeatureLog", buffer.IsWHSItemEnabled, this.IsWHSItemEnabled), InventInventoryDataServiceLogEventType::WHSFeatureChange);
        }

        if (this.ResyncBeforeInitialPush != buffer.ResyncBeforeInitialPush)
        {
            InventInventoryDataServiceLog::insertLog(strFmt("@SCM:InventoryServiceUpdateInitialPushLog", buffer.ResyncBeforeInitialPush, this.ResyncBeforeInitialPush), InventInventoryDataServiceLogEventType::BatchJobChange);
        }
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<ClusteredIndex>KeyIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex>KeyIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventoryServiceEndpoint</Name>
			<ExtendedDataType>InventInventoryServiceEndpoint</ExtendedDataType>
			<Label>@SCM:InventoryServiceEndpointURLFieldLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InventoryServiceExecutedDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SCM:InventoryServiceExecutedDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventoryServiceStatus</Name>
			<Label>@SYS36398</Label>
			<EnumType>InventoryServiceStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsProcessingQueueBackup</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumberOfInventsumInRequest</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReservationOffsetEnabled</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReservationOffsetModifier</Name>
			<EnumType>InventInventoryDataServiceReservationOffsetModifier</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsWaitingForInserting</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PostedCount</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PostedCountWHS</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsProcessingQueue</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResyncBeforeInitialPush</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsWHSItemEnabled</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultSoftReserveBlockLevel</Name>
			<EnumType>SoftReserveBlockLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PostedCountReserv</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AadAppClientId</Name>
			<ExtendedDataType>SysAADClientId</ExtendedDataType>
			<HelpText>@RetailInventory:InventoryServiceAadAppClientIdHelpText</HelpText>
			<Label>@RetailInventory:InventoryServiceAadAppClientIdLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AadAppClientSecretName</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<HelpText>@RetailInventory:InventoryServiceAadAppClientSecretNameHelpText</HelpText>
			<Label>@RetailInventory:InventoryServiceAadAppClientSecretNameLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AadAppTenantId</Name>
			<ExtendedDataType>TenantID</ExtendedDataType>
			<HelpText>@RetailInventory:InventoryServiceAadAppTenantIdHelpText</HelpText>
			<Label>@RetailInventory:InventoryServiceAadAppTenantIdLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResyncJobErrorMessage</Name>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResyncJobStatus</Name>
			<EnumType>InventoryServiceResyncJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventoryServiceAtpStatus</Name>
			<Label>@SYS36398</Label>
			<EnumType>InventoryServiceStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InventoryServiceAtpExecutedDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SCM:InventoryServiceExecutedDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TodayDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>keyVaultSecretName</Name>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AadAppClientSecretName</Name>
					<Field>AadAppClientSecretName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>