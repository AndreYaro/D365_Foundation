<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanElementDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanElementDefinition extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanElementDefinition</c> table.
    /// </summary>
    /// <param name='_budgetPlanElementDefinitionRecId'>
    /// The record ID of the <c>BudgetPlanElementDefinition</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanElementDefinition</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanElementDefinition find(
        BudgetPlanElementDefinitionRecId    _budgetPlanElementDefinitionRecId,
        boolean                             _forUpdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanElementDefinition budgetPlanElementDefinition;

        if (_budgetPlanElementDefinitionRecId)
        {
            budgetPlanElementDefinition.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanElementDefinition.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanElementDefinition
                where budgetPlanElementDefinition.RecId == _budgetPlanElementDefinitionRecId;
        }

        return budgetPlanElementDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanElementDefinition</c> table.
    /// </summary>
    /// <param name='_budgetPlanElementDefinitionName'>
    /// The name of the <c>BudgetPlanElementDefinition</c> record to find.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanElementDefinition</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanElementDefinition findByName(
        BudgetPlanElementDefinitionName     _budgetPlanElementDefinitionName,
        boolean                             _forUpdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanElementDefinition budgetPlanElementDefinition;

        if (_budgetPlanElementDefinitionName != '')
        {
            budgetPlanElementDefinition.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanElementDefinition.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanElementDefinition
                where budgetPlanElementDefinition.Name == _budgetPlanElementDefinitionName;
        }

        return budgetPlanElementDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayElementType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>BudgetPlanElementDefinition</c> subtype's name.
    /// </summary>
    /// <param name = "_elementDefinition">The <c>BudgetPlanElementDefinition</c> instance to determine the type.</param>
    /// <returns>The <c>BudgetPlanElementDefinition</c> instance's name.</returns>
    public display BudgetPlanElementType displayElementType(BudgetPlanElementDefinition _elementDefinition)
    {
        return tableId2pname(int642int(_elementDefinition.InstanceRelationType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceElementDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the <c>BudgetPlanElementDefinition</c> available for a selected budget plan layout.
    /// </summary>
    /// <param name = "_formReferenceControl">The <c>FormReferenceControl</c> requesting the lookup.</param>
    /// <param name = "_layoutRecIdToFilterBy">The <c>BudgetPlanLayoutRecId</c> for the selected layout.</param>
    /// <returns>The selected <c>BudgetPlanElementDefinition</c>.</returns>
    public static Common lookupReferenceElementDefinition(FormReferenceControl _formReferenceControl, BudgetPlanLayoutRecId _layoutRecIdToFilterBy)
    {
        Query                   budgetPlanElementDefinitionLookupQuery = new Query(querystr(BudgetPlanElementDefinitionLookup));
        QueryBuildDataSource    layoutElementQueryBuildDataSource;
        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tablenum(BudgetPlanElementDefinition), _formReferenceControl);

        layoutElementQueryBuildDataSource = budgetPlanElementDefinitionLookupQuery.dataSourceTable(tableNum(BudgetPlanLayoutElement));

        SysQuery::findOrCreateRange(layoutElementQueryBuildDataSource, fieldNum(BudgetPlanLayoutElement, Layout)).value(queryValue(_layoutRecIdToFilterBy));

        sysReferenceTableLookup.addLookupfield(fieldNum(BudgetPlanElementDefinition, Name));
        sysReferenceTableLookup.addLookupMethod(tableMethodStr(BudgetPlanElementDefinition, displayElementType));
        sysReferenceTableLookup.parmQuery(budgetPlanElementDefinitionLookupQuery);

        return sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        // Create translation information
        BudgetPlanElementDefinitionTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetPlanElementDefinitionTranslation::deleteForBudgetPlanElementDefinition(this.RecId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        BudgetPlanElementDefinitionTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElementDefinitionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the <c>BudgetPlanElementDefinition</c>.
    /// </summary>
    /// <param name = "_budgetPlanElementDefinition">The <c>BudgetPlanElementDefinitionRecId</c> uniquely identifying the <c>BudgetPlanElementDefinition</c>.</param>
    /// <returns>The <c>BudgetPlanElementDefinitionName</c>.</returns>
    public static BudgetPlanElementDefinitionName getElementDefinitionName(BudgetPlanElementDefinitionRecId _budgetPlanElementDefinition)
    {
        BudgetPlanElementDefinition budgetPlanElementDefinition;

        select Name from budgetPlanElementDefinition
            where budgetPlanElementDefinition.RecId == _budgetPlanElementDefinition;

        return budgetPlanElementDefinition.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>localizedElementDefinitionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized name of the <c>BudgetPlanElementDefinitionTranslation</c> value from a
    /// <c>BudgetPlanElementDefinition</c> record.
    /// </summary>
    /// <returns>
    /// Localized <c>BudgetPlanElementDefinitionName</c> value.
    /// </returns>
    public display BudgetPlanElementDefinitionName localizedElementDefinitionName()
    {
        BudgetPlanElementDefinitionName budgetPlanElementDefinitionName;

        if (hasTableAccess(tableNum(BudgetPlanElementDefinition))
            && hasTableAccess(tableNum(BudgetPlanElementDefinitionTranslation)))
        {
            budgetPlanElementDefinitionName = BudgetPlanElementDefinitionTranslation::getLocalizedName(this.RecId);
        }

        return budgetPlanElementDefinitionName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@Budget:ElementDefinitionDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationColumn</FormRef>
	<Label>@Budget:ElementDefinitionDisplayName</Label>
	<SingularLabel>@Budget:ElementDefinitionDisplayNameSingular</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<Abstract>Yes</Abstract>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>Budget</Modules>
	<ReplacementKey>NameIndex</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteElementDefinitionTranslation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>BudgetPlanElementDefinition</Relation>
			<Table>BudgetPlanElementDefinitionTranslation</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteBudgetPlanColumnRestrictedElementDefinition</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>ElementDefinition</Relation>
			<Table>BudgetPlanLayoutElement</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Budget:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Budget:Identification</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanElementDefinitionName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanElementDefinitionDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIndex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>