<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMAServiceBOMTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMAServiceBOMTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _validate = false, boolean _maintainHistory = false)
    {
        SMAServiceBOMChange  serviceBOMChange;

        ttsbegin;

        if (_maintainHistory)
        {
            if (this.ObjectId)
            {
                serviceBOMChange.ServiceBOMId               = this.ServiceBOMId;
                serviceBOMChange.ServiceObjectRelationId    = this.ServiceObjectRelationId;
                serviceBOMChange.ObjectId                   = this.ObjectId;
                serviceBOMChange.ReplacedServiceBOMLineId   = this.ServiceBOMParentLineId;
                serviceBOMChange.ServiceBOMChangeAction     = SMAServiceBOMChangeAction::DeletedSubLine;

                serviceBOMChange.insert();
            }
            else
            {
                this.deleteChildren(_validate);

                if (_validate && !this.validateDelete())
                {
                    // Update has been canceled.
                    throw error("@SYS25904");
                }

                super();
            }
        }
        else
        {
            super();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteChildren</Name>
				<Source><![CDATA[
    public void deleteChildren(boolean _validate = false)
    {
        SMAServiceBOMTable child;

        ttsbegin;

        if (this.inventTable().isProducedByDefault())
        {
            while select forupdate child where child.ServiceBOMId == this.ServiceBOMId && child.ServiceBOMParentLineId == this.ServiceBOMLineId
            {
                child.delete(_validate);
            }
        }

        if (_validate && !this.validateDelete())
        {
            // Update has been canceled.
            throw error("@SYS25904");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCopyRefFieldsBOM</Name>
				<Source><![CDATA[
    public void initCopyRefFieldsBOM(Common _source, TransDate _bomDate)
    {
        InventTable         inventTable;
        ProdTable           prodTable;
        ProdBOM             prodBOM;
        BOM                 inventBOM;
        SMAServiceBOMTable  serviceBOMTable;

        switch (_source.TableId)
        {
            case tableNum(InventTable) :
                inventTable = _source as InventTable;
                if (inventTable.isBOMAllowed())
                {
                    this.bomCopyRefType  = SMABOMCopyRefType::BOM;
                    this.bomCopyRefId    = SMAServiceBOMTable::findCopyBOMId(inventTable, _bomDate, this.InventDimId);
                }
                break;

            case tableNum(ProdTable) :
                prodTable = _source as ProdTable;
                this.bomCopyRefType  = SMABOMCopyRefType::Production;
                this.bomCopyRefId    = prodTable.ProdId;
                break;

            case tableNum(ProdBOM) :
                prodBOM = _source as ProdBOM;
                if (prodBOM.inventTable().isBOMAllowed())
                {
                    prodTable = SMAServiceBOMTable::findCopyProdTable(_source as ProdBOM);
                    if (prodTable)
                    {
                        this.bomCopyRefType  = SMABOMCopyRefType::Production;
                        this.bomCopyRefId    = prodTable.ProdId;
                    }
                    else
                    {
                        this.bomCopyRefType  = SMABOMCopyRefType::BOM;
                        this.bomCopyRefId    = SMAServiceBOMTable::findCopyBOMId(prodBOM, _bomDate, prodBOM.InventDimId);
                    }
                }
                break;

            case tableNum(BOM) :
                inventBOM = _source as BOM;
                if (inventBOM.inventTable().isFormulaOrBOMAllowed())
                {
                    this.bomCopyRefType  = SMABOMCopyRefType::BOM;
                    this.bomCopyRefId    = SMAServiceBOMTable::findCopyBOMId(inventBOM, _bomDate, inventBOM.InventDimId);
                }
                break;

            case tableNum(SMAServiceBOMTable) :
                serviceBOMTable = _source as SMAServiceBOMTable;
                if (serviceBOMTable.inventTable().isBOMAllowed())
                {
                    this.bomCopyRefType         = SMABOMCopyRefType::TemplateBOM;
                    this.bomCopyRefId           = serviceBOMTable.ServiceBOMId;
                    this.bomCopyRefParentLineId = serviceBOMTable.ServiceBOMLineId;
                }
                break;

            default :
                return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOM</Name>
				<Source><![CDATA[
    public void initFromBOM(BOM _inventBOM)
    {
        InventDim inventDim = _inventBOM.inventDim();

        inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_inventBOM.ItemId));

        this.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
        this.ItemId         = _inventBOM.ItemId;
        this.bomQty         = _inventBOM.bomQty();
        this.UnitID         = _inventBOM.UnitId;
        this.ItemType       = _inventBOM.itemType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable)
    {
        InventDim   inventDim;

        _inventTable.initStandardProductDimensions(inventDim);
        this.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
        this.ItemId         = _inventTable.ItemId;
        this.bomQty         = 1;
        this.UnitID         = _inventTable.inventTableModuleInvent().UnitId;
        this.ItemType       = _inventTable.ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdBOM</Name>
				<Source><![CDATA[
    public void initFromProdBOM(ProdBOM _prodBOM)
    {
        InventDim   inventDim = InventDim::find(_prodBOM.InventDimId);

        inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_prodBOM.ItemId));

        this.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
        this.ItemId         = _prodBOM.ItemId;
        this.bomQty         = _prodBOM.QtyBOMCalc ? _prodBOM.QtyBOMCalc : _prodBOM.bomQty(_prodBOM.bomQtySerie);
        this.UnitID         = _prodBOM.UnitId;
        this.ItemType       = _prodBOM.itemType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    public void initFromProdTable(ProdTable _prodTable)
    {
        InventDim   inventDim = InventDim::find(_prodTable.InventDimId);

        inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_prodTable.ItemId));

        this.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
        this.ItemId         = _prodTable.ItemId;
        this.bomQty         = 1;
        this.UnitID         = _prodTable.inventTable().inventTableModuleInvent().UnitId;
        this.ItemType       = _prodTable.inventTable().ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTemplateBOM</Name>
				<Source><![CDATA[
    public void initFromTemplateBOM(SMAServiceBOMTable _serviceBOMTable)
    {
        this.data(_serviceBOMTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStandardBOMQty</Name>
				<Source><![CDATA[
    public void initStandardBOMQty()
    {
        this.bomQty = this.inventTable().inventStandardQty(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        SMAServiceBOMChange serviceBOMChange;

        ttsbegin;

        if (!this.ServiceBOMLineId)
        {
            this.setLineId();
        }

        super();

        if (this.ServiceObjectRelationId)
        {
            serviceBOMChange.ServiceBOMId               = this.ServiceBOMId;
            serviceBOMChange.ObjectId                   = SMAServiceObjectRelation::find(this.ServiceObjectRelationId).ServiceObjectId;
            serviceBOMChange.ServiceObjectRelationId    = this.ServiceObjectRelationId;
            serviceBOMChange.bomQty                     = this.bomQty;
            serviceBOMChange.ReplacedServiceBOMLineId   = this.ServiceBOMLineId;
            serviceBOMChange.ActiveServiceBOMLineId     = this.ServiceBOMLineId;
            serviceBOMChange.ServiceBOMChangeAction     = SMAServiceBOMChangeAction::InsertedLine;

            serviceBOMChange.insert();
        }

        if (this.inventTable().isProducedByDefault() && this.bomCopyRefType != SMABOMCopyRefType::Manual && this.bomCopyRefId != '')
        {
            SMABOMCopy::newParameters(this.bomCopyRefType,
                                      this.bomCopyRefId,
                                      this.ServiceBOMId,
                                      this.bomCopyRefParentLineId,
                                      this.ServiceBOMLineId,
                                      this.ObjectId,
                                      this.ServiceObjectRelationId,
                                      this.bomVersionDate,
                                      this.ItemId,
                                      this.inventDim().ConfigId,
                                      0).runOperation();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forupdate = false)
    {
        return InventTable::find(this.ItemId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    public boolean isActive(SMAServiceObjectRelationId _relationId)
    {
        return (select firstonly smaServiceBOMChange
                    where smaServiceBOMChange.ServiceBOMId              == this.ServiceBOMId &&
                          smaServiceBOMChange.ServiceObjectRelationId   == _relationId &&
                          smaServiceBOMChange.ReplacedServiceBOMLineId  == this.ServiceBOMLineId &&
                          smaServiceBOMChange.ReplacedServiceBOMLineId  != smaServiceBOMChange.ActiveServiceBOMLineId).RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        InventItemInventSetup   inventItemInventSetup;

        super(_fieldId);

        switch (_fieldId)
        {
            // Item is changed
            case(fieldNum(SMAServiceBOMTable, ItemId)):
                this.inventDim().initFromInventTable(this.inventTable());
                this.initStandardBOMQty();
                break;

            // Quantity is changed
            case(fieldNum(SMAServiceBOMTable, bomQty)):
                inventItemInventSetup   = InventItemInventSetup::find(this.ItemId, this.InventDimId);
                this.bomQty             = InventTable::calculateOrderQuantity(inventItemInventSetup,
																			  this.InventDimId,
																		      this.bomQty, 
																			  this.UnitID, 
																			  true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceLines</Name>
				<Source><![CDATA[
    public void replaceLines(container _replaceRecIds)
    {
        SMAServiceBOMTable  bomReplace;
        SMAServiceBOMChange serviceBOMChange;
        int                 counter;

        if (!this.ObjectId || !conLen(_replaceRecIds))
        {
            return;
        }

        ttsbegin;

        for (counter = 1; counter <= conLen(_replaceRecIds); counter++)
        {
            bomReplace = SMAServiceBOMTable::findRecId(conPeek(_replaceRecIds, counter));

            if (bomReplace)
            {
                select firstonly forupdate serviceBOMChange
                    where serviceBOMChange.ServiceBOMId                 == this.ServiceBOMId &&
                            serviceBOMChange.ServiceObjectRelationId    == this.ServiceObjectRelationId &&
                            serviceBOMChange.ActiveServiceBOMLineId     == this.ServiceBOMLineId &&
                            serviceBOMChange.ServiceBOMChangeAction     == SMAServiceBOMChangeAction::InsertedLine;

                serviceBOMChange.ServiceBOMId               = this.ServiceBOMId;
                serviceBOMChange.ObjectId                   = SMAServiceObjectRelation::find(this.ServiceObjectRelationId).ServiceObjectId;
                serviceBOMChange.ServiceObjectRelationId    = this.ServiceObjectRelationId;
                serviceBOMChange.bomQty                     = this.bomQty;
                serviceBOMChange.ActiveServiceBOMLineId     = this.ServiceBOMLineId;
                serviceBOMChange.ReplacedServiceBOMLineId   = bomReplace.ServiceBOMLineId;
                serviceBOMChange.ServiceBOMChangeAction     = SMAServiceBOMChangeAction::ReplacedLine;

                serviceBOMChange.write();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceQtyLines</Name>
				<Source><![CDATA[
    public void replaceQtyLines(SMAQuantity _updateQty)
    {
        SMAServiceBOMChange serviceBOMChange;

        if (this.ServiceObjectRelationId && _updateQty > 0)
        {
            ttsbegin;

            select firstonly forupdate serviceBOMChange
                where serviceBOMChange.ServiceBOMId             == this.ServiceBOMId
                    && serviceBOMChange.ServiceObjectRelationId == this.ServiceObjectRelationId
                    && serviceBOMChange.ActiveServiceBOMLineId  == this.ServiceBOMLineId
                    && serviceBOMChange.ServiceBOMChangeAction  == SMAServiceBOMChangeAction::UpdatedLine;

            if (serviceBOMChange)
            {
                serviceBOMChange.ServiceBOMChangeAction     = SMAServiceBOMChangeAction::UpdatedQty;
                serviceBOMChange.bomQty                     = _updateQty;
            }

            serviceBOMChange.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineId</Name>
				<Source><![CDATA[
    public void setLineId()
    {
        this.ServiceBOMLineId = NumberSeq::newGetNum(SMAParameters::numRefSMATemplateBOMLineId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNumAfter</Name>
				<Source><![CDATA[
    public boolean setLineNumAfter(SMAServiceBOMTable _bomBefore = null)
    {
        SMAServiceBOMTable  bomAfter;
        boolean             linesBefore;

        if ((this.ServiceBOMId && this.ServiceBOMId != _bomBefore.ServiceBOMId) || (this.ServiceBOMParentLineId && this.ServiceBOMParentLineId != _bomBefore.ServiceBOMParentLineId))
        {
            // Error in %1
            throw error(strFmt("@SYS63093", funcName()));
        }

        if (this.ServiceObjectRelationId && _bomBefore.ServiceObjectRelationId
            && !(this.ServiceObjectRelationId == _bomBefore.ServiceObjectRelationId))
        {
            // Error in %1
            throw error(strFmt("@SYS63093", funcName()));
        }

        if (!_bomBefore)
        {
            this.LineNum = SMAServiceBOMTable::nextLineNum(this.ServiceBOMId, this.ServiceBOMParentLineId, this.ServiceObjectRelationId);
        }

        while select LineNum, ServiceBOMId, ServiceBOMParentLineId, ServiceObjectRelationId, RecId from bomAfter
            order by LineNum
            where bomAfter.ServiceBOMId            == _bomBefore.ServiceBOMId &&
                  bomAfter.ServiceBOMParentLineId  == _bomBefore.ServiceBOMParentLineId &&
                  ((bomAfter.ServiceObjectRelationId   == _bomBefore.ServiceObjectRelationId) || this.ServiceObjectRelationId == '') &&
                    bomAfter.LineNum    >  _bomBefore.LineNum
        {
            if (bomAfter.RecId == this.RecId)
            {
                continue;
            }

            linesBefore = true;
            this.LineNum = decRound(((bomAfter.LineNum - _bomBefore.LineNum) / 2) + _bomBefore.LineNum, 8);
            break;
        }

        if (!linesBefore)
        {
            this.LineNum = _bomBefore.LineNum + 1;
            return true;
        }
        else
        if ((this.LineNum == _bomBefore.LineNum || this.LineNum == bomAfter.LineNum) && !(this.ServiceObjectRelationId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        SMAServiceBOMTable  serviceBOMTable;
        SMAServiceBOMChange serviceBOMChange;
        boolean             origIsProducedByDefault;
        boolean             thisIsProducedByDefault;

        void copy()
        {
            this.initCopyRefFieldsBOM(this.inventTable(), this.bomVersionDate);

            if (this.bomCopyRefType != SMABOMCopyRefType::Manual && this.bomCopyRefId)
            {
                SMABOMCopy::newParameters(this.bomCopyRefType,
                                          this.bomCopyRefId,
                                          this.ServiceBOMId,
                                          this.bomCopyRefParentLineId,
                                          this.ServiceBOMLineId,
                                          this.ObjectId,
                                          this.ServiceObjectRelationId,
                                          this.bomVersionDate,
                                          this.ItemId,
                                          this.inventDim().ConfigId,
                                          0).runOperation();
            }
        }

        ttsbegin;

        if (this.ServiceObjectRelationId)
        {
            serviceBOMTable.initFromTemplateBOM(this);
            serviceBOMTable.setLineId();
            serviceBOMTable.OrigLine = NoYes::No;
            if (serviceBOMTable.ItemId == this.orig().ItemId && serviceBOMTable.inventDim().ConfigId == this.orig().inventDim().ConfigId)
            {
                serviceBOMTable.initCopyRefFieldsBOM(this, serviceBOMTable.bomVersionDate);
            }
            else
            {
                serviceBOMTable.initCopyRefFieldsBOM(serviceBOMTable.inventTable(), serviceBOMTable.bomVersionDate);
            }
            serviceBOMTable.insert();

            select firstonly forupdate serviceBOMChange
                where serviceBOMChange.ServiceBOMId             == serviceBOMTable.ServiceBOMId                  &&
                      serviceBOMChange.ServiceObjectRelationId  == serviceBOMTable.ServiceObjectRelationId       &&
                      serviceBOMChange.ReplacedServiceBOMLineId == serviceBOMTable.ServiceBOMLineId              &&
                      serviceBOMChange.ActiveServiceBOMLineId   == serviceBOMTable.ServiceBOMLineId              &&
                      serviceBOMChange.ServiceBOMChangeAction   == SMAServiceBOMChangeAction::InsertedLine;

            if (serviceBOMChange.ReplacedServiceBOMLineId != this.ServiceBOMLineId)
            {
                serviceBOMChange.ServiceBOMId               = serviceBOMTable.ServiceBOMId;
                serviceBOMChange.ServiceObjectRelationId    = serviceBOMTable.ServiceObjectRelationId;
                serviceBOMChange.ObjectId                   = serviceBOMTable.ObjectId;
                serviceBOMChange.bomQty                     = this.bomQty;
                serviceBOMChange.ReplacedServiceBOMLineId   = this.ServiceBOMLineId;
                serviceBOMChange.ActiveServiceBOMLineId     = serviceBOMTable.ServiceBOMLineId;
                serviceBOMChange.ServiceBOMChangeAction     = SMAServiceBOMChangeAction::UpdatedLine;
                serviceBOMChange.write();
            }

            this.data(serviceBOMTable);
        }
        else
        {
            origIsProducedByDefault = this.orig().inventTable().isProducedByDefault();
            thisIsProducedByDefault = this.inventTable().isProducedByDefault();
            if (origIsProducedByDefault && !thisIsProducedByDefault)
            {
                this.deleteChildren(true);
            }
            else
            if (!origIsProducedByDefault && thisIsProducedByDefault)
            {
                copy();
            }
            else
            if (thisIsProducedByDefault && this.ItemId != this.orig().ItemId)
            {
                this.deleteChildren();
                copy();
            }
            else
            if (origIsProducedByDefault && thisIsProducedByDefault && this.orig().inventDim().ConfigId != this.inventDim().ConfigId)
            {
                this.deleteChildren();
                copy();
            }

            super();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistoryLine</Name>
				<Source><![CDATA[
    public void updateHistoryLine(SMAServiceOrderId _serviceOrderId, SMAServiceBOMChangeAction _action, SMAIsRequirement _isRequirement)
    {
        SMAServiceBOMChange serviceBOMChange;

        if (this.ServiceObjectRelationId && (_serviceOrderId != ''))
        {
            ttsbegin;

            select firstonly forupdate serviceBOMChange
                where serviceBOMChange.ServiceBOMId             == this.ServiceBOMId
                    && serviceBOMChange.ServiceObjectRelationId == this.ServiceObjectRelationId
                    && serviceBOMChange.ActiveServiceBOMLineId  == this.ServiceBOMLineId
                    && serviceBOMChange.ServiceBOMChangeAction  == _action;

            if (serviceBOMChange)
            {
                serviceBOMChange.ServiceOrderId     = _serviceOrderId;
                serviceBOMChange.IsRequirement  = _isRequirement;
                serviceBOMChange.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.InventDimId)
        {
            ret = ret && InventTable::checkProductDimensions(this.ItemId, this.inventDim());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumberSeqSetup</Name>
				<Source><![CDATA[
    public static boolean checkNumberSeqSetup()
    {
        NumberSequenceTable     numberSequenceTable;
        NumberSequenceReference numberSequenceReference = SMAParameters::numRefSMATemplateBOMLineId();
        boolean                 ret = true;

        if (!numberSequenceReference.RecId || !numberSequenceReference.NumberSequenceId)
        {
            return ret;
        }

        numberSequenceTable.selectLocked(false);

        select firstonly NumberSequence, Continuous, FetchAhead, FetchAheadQty from numberSequenceTable where numberSequenceTable.RecId == numberSequenceReference.NumberSequenceId;

        if (numberSequenceTable.Continuous)
        {
            // Number sequence '%1' is setup to '%2'. This has a large negative impact on performance
            ret = checkFailed(strFmt("@SYS86931", numberSequenceTable.NumberSequence, new DictField(tableNum(NumberSequenceTable), fieldNum(NumberSequenceTable, Continuous)).label()));
        }
        else
        if (!numberSequenceTable.FetchAhead || numberSequenceTable.FetchAheadQty == 0)
        {
            // Number sequence '%1' is not setup to Pre-allocate numbers. Pre-allocating numbers has a large impact on performance
            ret = checkFailed(strFmt("@SYS86932", numberSequenceTable.NumberSequence));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SMAServiceBOMTable find(SMATemplateBOMLineId _serviceBOMLineId, boolean _forupdate = false)
    {
        SMAServiceBOMTable serviceBOMTable;

        if (!_serviceBOMLineId)
        {
            return serviceBOMTable;
        }

        serviceBOMTable.selectForUpdate(_forupdate);

        select firstonly serviceBOMTable where serviceBOMTable.ServiceBOMLineId == _serviceBOMLineId;

        return serviceBOMTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCopyBOMId</Name>
				<Source><![CDATA[
    public static BOMId findCopyBOMId(Common _caller, TransDate _bomDate, InventDimId _inventDimId)
    {
        BOM         inventBOM;
        ProdBOM     prodBOM;
        BOMId       subBOMId;
        InventTable inventTable;

        if (_caller.TableId == tableNum(BOM))
        {
            inventBOM = _caller as BOM;
            subBOMId = inventBOM.BOMMap::itemBOMId(_bomDate, inventBOM.inventTable().inventStandardQty(_inventDimId),InventDim::find(_inventDimId));
            return subBOMId ? subBOMId : SMAServiceBOMTable::findInactiveCopyBOMId(inventBOM.ItemId, inventBOM.bomQty(), _bomDate, InventDim::find(_inventDimId));
        }
        else
        if (_caller.TableId == tableNum(ProdBOM))
        {
            prodBOM = _caller as ProdBOM;
            subBOMId = prodBOM.itemBOMId(_bomDate, prodBOM.QtyInventCalc, prodBOM.inventDim());
            return subBOMId ? subBOMId : SMAServiceBOMTable::findInactiveCopyBOMId(prodBOM.ItemId, prodBOM.QtyInventCalc, _bomDate, prodBOM.inventDim());
        }
        else
        if (_caller.TableId == tableNum(InventTable))
        {
            inventTable = _caller as InventTable;
            subBOMId = inventTable.bomId(_bomDate, inventTable.inventStandardQty(), InventDim::find(_inventDimId));
            return subBOMId ? subBOMId : SMAServiceBOMTable::findInactiveCopyBOMId(inventTable.ItemId, inventTable.inventStandardQty(), _bomDate, InventDim::find(_inventDimId));
        }

        return subBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCopyProdTable</Name>
				<Source><![CDATA[
    public static ProdTable findCopyProdTable(ProdBOM _prodBOM)
    {
        InventTransOrigin           inventTransOriginReceipt;
        InventTransOrigin           inventTransOriginIssue;
        InventTrans                 inventTransIssue;
        InventTrans                 inventTransReceipt;
        InventDim                   inventDimIssue;
        InventDim                   inventDimReceipt;
        ProdTable                   prodTable;
        ProdTable                   prodTableBlank;
        InventDimParm               inventDimParm;
        ProdId                      prodId = '';

        if (_prodBOM.ProdLineType == BOMType::PeggedSupply)
        {
            // Look for direct linked sub productions
            prodTable = ProdTable::find(_prodBOM.InventRefId);
            if (prodTable && !prodTable.status().isBefore(ProdStatus::ReportedFinished))
            {
                return prodTable;
            }
        }
        else
        {
            // Look through inventory transactions of type Receipt on the same set of inventory dimensions.
            // If one and only one reference is common for all transactions and the reference is to a production, then ok

            while select ItemId from inventTransOriginIssue
                where inventTransOriginIssue.InventTransId == _prodBOM.InventTransId
                join TableId from inventTransIssue
                    where inventTransIssue.InventTransOrigin == inventTransOriginIssue.RecId
                    join inventDimIssue
                        where inventDimIssue.InventDimId == inventTransIssue.InventDimId
            {
                inventDimParm.initFromInventDim(inventDimIssue);

                if (!inventDimParm.isFlagSelective())
                {
                    select forceplaceholders forceselectorder forcenestedloop ReferenceCategory from inventTransOriginReceipt
                        where inventTransOriginReceipt.ItemId            == inventTransOriginIssue.ItemId
                        exists join inventTransReceipt
                        where inventTransReceipt.InventTransOrigin == inventTransOriginReceipt.RecId
                           && inventTransReceipt.StatusIssue       == StatusIssue::None
                           && inventTransReceipt.StatusReceipt     >= StatusReceipt::Received
                        #inventDimExistsJoin(inventTransReceipt.InventDimId, inventDimReceipt, inventDimIssue, inventDimParm, dimIdIdx);
                }
                else
                if (inventDimParm.InventSerialIdFlag && inventDimIssue.InventSerialId)
                {
                    select forcePlaceholders forceSelectOrder forceNestedLoop ReferenceCategory from inventTransOriginReceipt
                        exists join TableId from inventTransReceipt
                            where inventTransReceipt.InventTransOrigin == inventTransOriginReceipt.RecId
                               && inventTransReceipt.ItemId            == inventTransOriginIssue.ItemId
                               && inventTransReceipt.StatusIssue       == StatusIssue::None
                               && inventTransReceipt.StatusReceipt     >= StatusReceipt::Received
                        #inventDimExistsJoin(inventTransReceipt.InventDimId, inventDimReceipt, inventDimIssue, inventDimParm, dimIdIdx);
                }
                else
                {
                    select ReferenceCategory from inventTransOriginReceipt
                        where inventTransOriginReceipt.ItemId            == inventTransOriginIssue.ItemId
                        exists join inventTransReceipt
                            where inventTransReceipt.InventTransOrigin == inventTransOriginReceipt.RecId
                               && inventTransReceipt.StatusIssue       == StatusIssue::None
                               && inventTransReceipt.StatusReceipt     >= StatusReceipt::Received
                        #inventDimExistsJoin(inventTransReceipt.InventDimId,inventDimReceipt,inventDimIssue,inventDimParm);
                }
                while (inventTransOriginReceipt)
                {
                    if (inventTransOriginReceipt.ReferenceCategory != InventTransType::Production)
                    {
                        return prodTableBlank;
                    }

                    if (!prodId)
                    {
                        prodId = InventTransOriginProdTable::prodTable(inventTransOriginReceipt.RecId).ProdId;
                    }
                    else
                    if (prodId != InventTransOriginProdTable::prodTable(inventTransOriginReceipt.RecId).ProdId)
                    {
                        return prodTableBlank;
                    }

                    next inventTransOriginReceipt;
                }
            }

            if (prodId)
            {
                return ProdTable::find(prodId);
            }
        }

        return prodTableBlank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInactiveCopyBOMId</Name>
				<Source><![CDATA[
    public static BOMId findInactiveCopyBOMId(ItemId _itemId, FromQty _fromQty, TransDate _bomDate, InventDim _inventDim)
    {
        BOMVersion  bomVersion;

        bomVersion = BOMVersion::selectBomVersion(_itemId,_bomDate,_fromQty,_inventDim,false,true,true,true);

        return bomVersion.bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static SMAServiceBOMTable findRecId(recId _recId, boolean _forupdate = false)
    {
        SMAServiceBOMTable serviceBOMTable;

        if (!_recId)
        {
            return serviceBOMTable;
        }

        serviceBOMTable.selectForUpdate(_forupdate);

        select firstonly serviceBOMTable where serviceBOMTable.RecId == _recId;

        return serviceBOMTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(SMATemplateBOMId _serviceBOMId, SMATemplateBOMParentLineId _serviceBOMParentLineId, SMAServiceObjectRelationId _relationId)
    {
        return (select maxof(LineNum) from smaServiceBOMTable
                where smaServiceBOMTable.ServiceBOMId           == _serviceBOMId &&
                      smaServiceBOMTable.ServiceBOMParentLineId == _serviceBOMParentLineId &&
                      ((smaServiceBOMTable.ServiceObjectRelationId == _relationId)
                        || (smaServiceBOMTable.ObjectId == ''))).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiDelete</Name>
				<Source><![CDATA[
    public static void multiDelete(container _delRecIds, SMAServiceObjectRelationId _relationId, SMAServiceObjectId _objectId)
    {
        #OCCRetryCount
        int                 i;
        SMAServiceBOMTable  delOrUpdate;
        SMAServiceBOMChange serviceBOMChange;

        if (!conLen(_delRecIds))
        {
            return;
        }

        try
        {
            ttsbegin;

            for (i = 1; i <= conLen(_delRecIds); i++)
            {
                delOrUpdate = SMAServiceBOMTable::findRecId(conPeek(_delRecIds, i), true);

                if (delOrUpdate.RecId)
                {
                    if (!_relationId)
                    {
                        delOrUpdate.delete(false, true);
                    }
                    else
                    {
                        serviceBOMChange.ServiceBOMId               = delOrUpdate.ServiceBOMId;
                        serviceBOMChange.ActiveServiceBOMLineId     = delOrUpdate.ServiceBOMParentLineId;
                        serviceBOMChange.ReplacedServiceBOMLineId   = delOrUpdate.ServiceBOMLineId;
                        serviceBOMChange.ServiceBOMChangeAction     = SMAServiceBOMChangeAction::DeletedSubLine;
                        serviceBOMChange.ServiceObjectRelationId    = _relationId;
                        serviceBOMChange.ObjectId                   = _objectId;
                        serviceBOMChange.insert();
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    public static LineNum nextLineNum(SMATemplateBOMId _serviceBOMId, SMATemplateBOMParentLineId _serviceBOMParentLineId, SMAServiceObjectRelationId _relationId)
    {
        return SMAServiceBOMTable::lastLineNum(_serviceBOMId, _serviceBOMParentLineId, _relationId) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reNumber</Name>
				<Source><![CDATA[
    public static container reNumber(SMATemplateBOMId _serviceBOMId, SMATemplateBOMParentLineId _serviceBOMParentLineId, boolean _packInContainer = false)
    {
        Map                 lines = new Map(Types::Int64,Types::Integer);
        container           packedLines;
        int                 counter;
        SMAServiceBOMTable  serviceBOM;

        if (!_serviceBOMId)
        {
            return conNull();
        }

        counter = 0;

        ttsbegin;

        while select RecId from serviceBOM
            index ServiceBOMOrigIdx
            where serviceBOM.ServiceBOMId           == _serviceBOMId
            && serviceBOM.ServiceBOMParentLineId    == _serviceBOMParentLineId
            && serviceBOM.ServiceObjectRelationId   == ''
            && serviceBOM.OrigLine                  == NoYes::Yes
        {
            lines.insert(serviceBOM.RecId, counter);
            counter++;
        }

        while select forupdate serviceBOM
            index ServiceBOMOrigIdx
            where serviceBOM.ServiceBOMId           == _serviceBOMId
            && serviceBOM.ServiceBOMParentLineId    == _serviceBOMParentLineId
            && serviceBOM.ServiceObjectRelationId   == ''
            && serviceBOM.OrigLine                  == NoYes::Yes
        {
            counter = lines.lookup(serviceBOM.RecId);
            serviceBOM.LineNum = counter;
            serviceBOM.doUpdate();

            if (_packInContainer)
            {
                packedLines += [serviceBOM.data()];
            }
        }

        ttscommit;

        return packedLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAllHistoryPack</Name>
				<Source><![CDATA[
    public static container selectAllHistoryPack(SMAServiceObjectRelationId  _relationId,
                                                        SMAServiceBOMTable          _activeServiceBOM,
                                                        SMAMasterBOMId              _serviceBOMId)
    {
        SMAServiceBOMTable  serviceBOM;
        SMAServiceBOMTable  serviceBOMActive;
        SMAServiceBOMChange serviceBOMChange;
        RecordSortedList    sortedList;
        container           packedSMAMasterBOMReplaced;
        container           packedSMAMasterBOMActive;
        container           packedServiceBOMChange;
        boolean             loop;

            sortedList = new RecordSortedList(tableNum(SMAServiceBOMChange));
            sortedList.sortOrder(fieldNum(SMAServiceBOMTable, CreatedDateTime), fieldNum(SMAServiceBOMTable, RecId));

            while select serviceBOMChange
                where serviceBOMChange.ServiceObjectRelationId  == _relationId &&
                      serviceBOMChange.ServiceBOMId             == _serviceBOMId
                join ServiceBOMId, ServiceObjectRelationId, OrigLine from serviceBOM
                    where (serviceBOM.ServiceObjectRelationId           == serviceBOMChange.ServiceObjectRelationId) ||
                           (serviceBOM.OrigLine == NoYes::Yes && serviceBOM.ServiceBOMId      == serviceBOMChange.ServiceBOMId)
            {
                sortedList.ins(serviceBOMChange);
            }

            if (sortedList.len())
            {
                loop = sortedList.first(serviceBOMChange);
                while (loop)
                {
                    packedServiceBOMChange += [serviceBOMChange];

                    serviceBOM = SMAServiceBOMTable::find(serviceBOMChange.ReplacedServiceBOMLineId);
                    packedSMAMasterBOMReplaced += [serviceBOM];

                    serviceBOMActive = SMAServiceBOMTable::find(serviceBOMChange.ActiveServiceBOMLineId);
                    packedSMAMasterBOMActive += [serviceBOMActive];

                    loop = sortedList.next(serviceBOMChange);
                }
            }

        return [packedServiceBOMChange, packedSMAMasterBOMReplaced, packedSMAMasterBOMActive];
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectHistoryPack</Name>
				<Source><![CDATA[
    public static container selectHistoryPack(SMAServiceObjectRelationId _relationId,
                                                     SMAServiceBOMTable         _activeServiceBOM,
                                                     SMAMasterBOMId             _serviceBOMId,
                                                     boolean                    _skipRecordList = false)
    {
        SMAServiceBOMTable          serviceBOM;
        SMAServiceBOMTable          serviceBOMActive;
        SMAServiceBOMChange         serviceBOMChange;
        SMAServiceBOMChange         tmpBuffer;
        RecordSortedList            sortedList;
        container                   packedSMAMasterBOMReplaced;
        container                   packedSMAMasterBOMActive;
        container                   packedServiceBOMChange,tmpRecords;
        boolean                     loop;
        int                         i;

        if (_skipRecordList)
        {
            while select serviceBOMChange
                where serviceBOMChange.ServiceObjectRelationId  == _relationId
                && serviceBOMChange.ServiceBOMId                == _serviceBOMId
                && serviceBOMChange.ActiveServiceBOMLineId  == _activeServiceBOM.ServiceBOMLineId
                join serviceBOM
                    where serviceBOM.ServiceBOMLineId == serviceBOMChange.ReplacedServiceBOMLineId
            {
                packedServiceBOMChange += [serviceBOMChange];
                if (serviceBOMChange.ActiveServiceBOMLineId != serviceBOMChange.ReplacedServiceBOMLineId)
                {
                    packedServiceBOMChange += SMAServiceBOMTable::selectHistoryPack(_relationId, serviceBOM, _serviceBOMId, true);
                }
            }

            return packedServiceBOMChange;
        }
        else
        {
            sortedList = new RecordSortedList(tableNum(SMAServiceBOMChange));
            sortedList.sortOrder(fieldNum(SMAServiceBOMTable, CreatedDateTime), fieldNum(SMAServiceBOMTable, RecId));

            while select serviceBOMChange
                where serviceBOMChange.ServiceObjectRelationId      == _relationId
                && serviceBOMChange.ServiceBOMId                    == _serviceBOMId
                && serviceBOMChange.ActiveServiceBOMLineId          == _activeServiceBOM.ServiceBOMLineId
                join serviceBOM
                    where serviceBOM.ServiceBOMLineId == serviceBOMChange.ReplacedServiceBOMLineId
            {
                sortedList.ins(serviceBOMChange);
                if (serviceBOMChange.ActiveServiceBOMLineId != serviceBOMChange.ReplacedServiceBOMLineId)
                {
                    tmpRecords = SMAServiceBOMTable::selectHistoryPack(_relationId, serviceBOM, _serviceBOMId, true);
                }

                for (i = 1; i <= conLen(tmpRecords); i++)
                {
                    tmpBuffer = conPeek(tmpRecords, i);
                    sortedList.ins(tmpBuffer);
                }
            }
            if (sortedList.len())
            {
                loop = sortedList.first(serviceBOMChange);
                while (loop)
                {
                    packedServiceBOMChange += [serviceBOMChange];

                    serviceBOM = SMAServiceBOMTable::find(serviceBOMChange.ReplacedServiceBOMLineId);
                    packedSMAMasterBOMReplaced += [serviceBOM];

                    serviceBOMActive = SMAServiceBOMTable::find(serviceBOMChange.ActiveServiceBOMLineId);
                    packedSMAMasterBOMActive += [serviceBOMActive];

                    loop = sortedList.next(serviceBOMChange);
                }
            }
        }

        return [packedServiceBOMChange, packedSMAMasterBOMReplaced, packedSMAMasterBOMActive];
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectLevelPack</Name>
				<Source><![CDATA[
    public static container selectLevelPack(Common                       _caller,
                                                   SMAServiceObjectRelationId   _relationId,
                                                   boolean                      _returnInventDimInMap = false)
    {
        SMATemplateBOMTable         templateBOMTable;
        SMAServiceBOMTable          serviceBOM;
        SMATemplateBOMId            serviceBOMId;
        SMATemplateBOMParentLineId  serviceBOMParentLineId;
        SMAServiceBOMTable          serviceBOMSelect;
        InventDim                   inventDim;
        RecordSortedList            recordList;
        Map                         inventDimMap;
        container                   packedMasterBOM;
        container                   packedInventDim;
        boolean                     loop;

        if (_caller.TableId == tableNum(SMATemplateBOMTable))
        {
            templateBOMTable        = _caller as SMATemplateBOMTable;
            serviceBOMId            = templateBOMTable.TemplateBOMId;
            serviceBOMParentLineId  = '';
        }
        else
        if (_caller.TableId == tableNum(SMAServiceBOMTable))
        {
            serviceBOM              = _caller as SMAServiceBOMTable;
            serviceBOMId            = serviceBOM.ServiceBOMId;
            serviceBOMParentLineId  = serviceBOM.ServiceBOMLineId;
        }
        else
        {
            // Error in call of method '%1'
            throw error(strFmt("@SYS68912", funcName()));
        }

        if (!serviceBOMId)
        {
            return conNull();
        }

        recordList = new RecordSortedList(tableNum(SMAServiceBOMTable));
        recordList.sortOrder(fieldNum(SMAServiceBOMTable, LineNum), fieldNum(SMAServiceBOMTable, RecId));
        inventDimMap = _returnInventDimInMap ? new Map(Types::String, Types::Record) : new Map(Types::String, Types::Integer);

        // Select lines specific to the service agreement lines
        if (_relationId != '')
        {
            while select forceselectorder forceplaceholders forcenestedloop serviceBOMSelect
                where serviceBOMSelect.ServiceBOMId             == serviceBOMId
                   && serviceBOMSelect.ServiceBOMParentLineId   == serviceBOMParentLineId
                   && serviceBOMSelect.ServiceObjectRelationId  == _relationId
                   && serviceBOMSelect.OrigLine                 == NoYes::No
                join inventDim
                    where inventDim.InventDimId == serviceBOMSelect.InventDimId
            {
                if (serviceBOMSelect.isActive(_relationId))
                {
                    recordList.ins(serviceBOMSelect);
                    if (_returnInventDimInMap)
                    {
                        if (!inventDimMap.exists(inventDim.InventDimId))
                            inventDimMap.insert(serviceBOMSelect.InventDimId, inventDim);
                    }
                    else
                    if (!inventDimMap.exists(inventDim.InventDimId))
                    {
                        inventDimMap.insert(inventDim.InventDimId, 1);
                        packedInventDim += [inventDim];
                    }
                }
            }
        }

        while select forceselectorder forceplaceholders forcenestedloop serviceBOMSelect // select orig lines
            where serviceBOMSelect.ServiceBOMId                 == serviceBOMId                           &&
                  serviceBOMSelect.ServiceBOMParentLineId       == serviceBOMParentLineId                 &&
                  serviceBOMSelect.ServiceObjectRelationId      == ''       &&
                  serviceBOMSelect.OrigLine                     == NoYes::Yes
            join inventDim
                where inventDim.InventDimId == serviceBOMSelect.InventDimId
        {
            if (serviceBOMSelect.isActive(_relationId))
            {
                recordList.ins(serviceBOMSelect);
                if (_returnInventDimInMap)
                {
                    if (!inventDimMap.exists(inventDim.InventDimId))
                    {
                        inventDimMap.insert(serviceBOMSelect.InventDimId, inventDim);
                    }
                }
                else
                if (!inventDimMap.exists(inventDim.InventDimId))
                {
                    inventDimMap.insert(inventDim.InventDimId, 1);
                    packedInventDim += [inventDim];
                }
            }
        }

        loop = recordList.first(serviceBOMSelect);

        while (loop)
        {
            packedMasterBOM += [serviceBOMSelect];
            loop = recordList.next(serviceBOMSelect);
        }

        if (_returnInventDimInMap)
        {
            packedInventDim = inventDimMap.pack();
        }

        return [packedMasterBOM, packedInventDim];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SMABom</ConfigurationKey>
	<DeveloperDocumentation>@SYS122709</DeveloperDocumentation>
	<FormRef>smatemplatebomTable</FormRef>
	<Label>@SYS86926</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>ServiceBOMId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ServiceBOMOrigIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ServiceManagement</Modules>
	<PrimaryIndex>ServiceBOMLineIdx</PrimaryIndex>
	<ReplacementKey>ServiceBOMLineIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceBOMLineId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceBOMLineId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMQuantity</Name>
			<Label>@SYS22164</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ObjectRelation</Name>
			<Label>@SYS103948</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceObjectRelationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ObjectId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceBOMLineId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceBOMParentLineId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMCopyRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMCopyRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMCopyRefParentLineId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMVersionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMCopyRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMABOMCopyRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMCopyRefParentLineId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMATemplateBOMParentLineId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMCopyRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SMABOMCopyRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BOMQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BOMVersionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS22297</Label>
			<SaveContents>No</SaveContents>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ItemType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ObjectId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceObjectId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OrigLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS5301</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceBOMId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMATemplateBOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceBOMLineId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMATemplateBOMLineId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceBOMParentLineId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMATemplateBOMParentLineId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceObjectRelationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceObjectRelationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ServiceBOMLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceBOMLineId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ServiceBOMOrigIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceBOMId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ServiceBOMParentLineId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ObjectId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ServiceBOMLineId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SMAServiceObjectRelation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceObjectRelation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceObjectRelationId</Name>
					<Field>ServiceObjectRelationId</Field>
					<RelatedField>ServiceObjectRelationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAServiceObjectTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceObjectTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ObjectId</Name>
					<Field>ObjectId</Field>
					<RelatedField>ServiceObjectId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ObjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SMATemplateBOMTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>SMATemplateBOMTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TemplateBom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TemplateBomLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceBOMId</Name>
					<Field>ServiceBOMId</Field>
					<RelatedField>TemplateBOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TemplateBomLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitID</Name>
					<Field>UnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>