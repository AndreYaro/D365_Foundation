<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceDistributionTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceDistributionTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayDistributionLineTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total distribution amount for a single <c>CustInvoiceLineTemplate</c> line.
    /// </summary>
    /// <param name="_custInvoiceDistributionTemplate">
    ///    A buffer of the <c>CustInvoiceDistributionTemplate</c> table.
    /// </param>
    /// <returns>
    ///    The sum of all the distribution amounts for a single <c>CustInvoiceLineTemplate</c> line.
    /// </returns>
    public display AmountCur displayDistributionLineTotalAmount(CustInvoiceDistributionTemplate _custInvoiceDistributionTemplate)
    {
        return CustInvoiceDistributionTemplate::sumDistributionLineAmount(_custInvoiceDistributionTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDistributionLineTotalPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total distribution percentage for a single <c>CustInvoiceLineTemplate</c> line.
    /// </summary>
    /// <param name="_custInvoiceDistributionTemplate">
    ///    A buffer of the <c>CustInvoiceDistributionTemplate</c> table.
    /// </param>
    /// <returns>
    ///    The sum of all the distribution percentages for a single <c>CustInvoiceLineTemplate</c> line.
    /// </returns>
    public display Percent displayDistributionLineTotalPercentage(CustInvoiceDistributionTemplate _custInvoiceDistributionTemplate)
    {
        return CustInvoiceDistributionTemplate::sumDistributionLinePercentage(_custInvoiceDistributionTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the amount and percentage fields when a record is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that has been modified.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        CustInvoiceTemplate custInvoiceTemplate;
        CustInvoiceLineTemplate custInvoiceLineTemplate;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustInvoiceDistributionTemplate, Percentage):
                custInvoiceLineTemplate = CustInvoiceLineTemplate::find(this.CustInvoiceLineTemplate);
                custInvoiceTemplate = CustInvoiceTemplate::find(custInvoiceLineTemplate.CustInvoiceTemplate);
                this.AmountCur = CurrencyExchange::round(((this.Percentage / 100) * custInvoiceLineTemplate.AmountCur), custInvoiceTemplate.CurrencyCode);
                break;

            case fieldNum(CustInvoiceDistributionTemplate, AmountCur):
                custInvoiceLineTemplate = CustInvoiceLineTemplate::find(this.CustInvoiceLineTemplate);

                if (custInvoiceLineTemplate.AmountCur != 0.0)
                {
                    this.Percentage = (this.AmountCur / custInvoiceLineTemplate.AmountCur) * 100;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        Percent linePercentage, totalPercentage;
        AmountCur lineAmount, totalAmount;
        CustInvoiceTemplate custInvoiceTemplate;
        CustInvoiceLineTemplate custInvoiceLineTemplate;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CustInvoiceDistributionTemplate, Percentage):

                    custInvoiceLineTemplate = CustInvoiceLineTemplate::find(this.CustInvoiceLineTemplate);
                    if (custInvoiceLineTemplate.AmountCur != 0.0)
                    {
                        custInvoiceTemplate = CustInvoiceTemplate::find(custInvoiceLineTemplate.CustInvoiceTemplate);
                        lineAmount = CurrencyExchange::round(((this.Percentage / 100) * custInvoiceLineTemplate.AmountCur), custInvoiceTemplate.CurrencyCode);

                        totalAmount = (select sum(AmountCur) from custInvoiceDistributionTemplate
                                            where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == custInvoiceLineTemplate.RecId
                                                && custInvoiceDistributionTemplate.RecId != this.RecId ).AmountCur;

                        totalAmount += lineAmount;

                        if (totalAmount <= custInvoiceLineTemplate.AmountCur)
                        {
                            this.AmountCur = lineAmount;
                        }
                    }
                    break;

                case fieldNum(CustInvoiceDistributionTemplate, AmountCur):
                    custInvoiceLineTemplate = CustInvoiceLineTemplate::find(this.CustInvoiceLineTemplate);

                    if (custInvoiceLineTemplate.AmountCur != 0.0)
                    {
                        linePercentage = (this.AmountCur / custInvoiceLineTemplate.AmountCur) * 100;

                        totalPercentage = (select sum(Percentage) from custInvoiceDistributionTemplate
                                            where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == custInvoiceLineTemplate.RecId
                                                && custInvoiceDistributionTemplate.RecId != this.RecId ).Percentage;

                        totalPercentage += linePercentage;

                        if (totalPercentage <= 100)
                        {
                            this.Percentage = linePercentage;
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record occurs in the <c>CustInvoiceTemplateDistributionLine</c> table.
    /// </summary>
    /// <param name="_custInvoiceDistributionTemplateRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _custInvoiceDistributionTemplateRecId)
    {
        boolean ret = true;

        if (!CustInvoiceDistributionTemplate::exist(_custInvoiceDistributionTemplateRecId))
        {
            ret = checkFailed(strFmt(CustInvoiceDistributionTemplate::txtNotExist(), _custInvoiceDistributionTemplateRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>CustInvoiceTemplateDistributionLine</c> table
    ///    exists.
    /// </summary>
    /// <param name="_custInvoiceDistributionTemplateRecId">
    ///    The record ID of the <c>CustInvoiceTemplateDistributionLine</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _custInvoiceDistributionTemplateRecId)
    {
        boolean found;

        found = (select firstonly RecId from custInvoiceDistributionTemplate
                    where custInvoiceDistributionTemplate.RecId == _custInvoiceDistributionTemplateRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustInvoiceDistributionTemplate</c> table.
    /// </summary>
    /// <param name="_custInvoiceDistributionTemplateRecId">
    ///    The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A <c>CustInvoiceDistributionTemplate</c> table buffer.
    /// </returns>
    public static CustInvoiceDistributionTemplate find(
        recId _custInvoiceDistributionTemplateRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;

        custInvoiceDistributionTemplate.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceDistributionTemplate.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInvoiceDistributionTemplate
            where custInvoiceDistributionTemplate.RecId == _custInvoiceDistributionTemplateRecId;

        return custInvoiceDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDistributionLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total distributed amount of an invoice line template.
    /// </summary>
    /// <param name="_custInvoiceDistributionTemplate">
    ///    The <c>RecId</c> value of the <c>CustInvoiceTemplateDistributionLine</c> record.
    /// </param>
    /// <returns>
    ///    The total distributed amount of an invoice line template.
    /// </returns>
    public static AmountCur sumDistributionLineAmount(CustInvoiceDistributionTemplate _custInvoiceDistributionTemplate)
    {
        AmountCur totalDistributedAmount;

        totalDistributedAmount = (select sum(AmountCur) from custInvoiceDistributionTemplate
                                    where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == _custInvoiceDistributionTemplate.CustInvoiceLineTemplate).AmountCur;

        return totalDistributedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCountForTemplateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of distribution records for a template line
    /// </summary>
    /// <param name = "_custInvoiceLineTemplateRecId">
    /// The identifier of the invoice line template for the new distribution template.
    /// </param>
    /// <returns>
    /// The number of distribution records for a template line
    /// </returns>
    static int recordCountForTemplateLine(RefRecId _custInvoiceLineTemplateRecId)
    {
        return any2int(
            (select count(RecId) from custInvoiceDistributionTemplate
                where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == _custInvoiceLineTemplateRecId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDistributionLinePercentage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total distributed percentage of an invoice line template.
    /// </summary>
    /// <param name="_custInvoiceTemplateLine">
    ///    The <c>RecId</c> of the <c>CustInvoiceTemplateDistributionLine</c> record.
    /// </param>
    /// <returns>
    ///    The total distributed percentage of an invoice line template.
    /// </returns>
    public static Percent sumDistributionLinePercentage(CustInvoiceDistributionTemplate _custInvoiceTemplateLine)
    {
        Percent totalDistributedPercentage;

        totalDistributedPercentage = (select sum(Percentage) from custInvoiceDistributionTemplate
                                        where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == _custInvoiceTemplateLine.CustInvoiceLineTemplate).Percentage;

        return totalDistributedPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistributionLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the template line distribution amount for the template line.
    /// </summary>
    /// <param name="_custInvoiceLineTemplate">
    /// A <c>CustInvoiceLineTemplate</c> table record.
    /// </param>
    /// <remarks>
    /// Updates the distribution line amount by a percentage and handles the penny difference at the last
    /// distribution line when there are any differences.
    /// </remarks>
    public static void updateDistributionLineAmount(CustInvoiceLineTemplate _custInvoiceLineTemplate)
    {
        CustInvoiceTemplate custInvoiceTemplate;
        CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;
        AmountCur totalDistributedAmount;

        ttsbegin;

        if ( !isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
        if (_custInvoiceLineTemplate.AmountCur == 0.0)
        {
            delete_from custInvoiceDistributionTemplate where custInvoiceDistributionTemplate. CustInvoiceLineTemplate == _custInvoiceLineTemplate.RecId;
        }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                || ( !isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && _custInvoiceLineTemplate.AmountCur != 0.0))
        {
            custInvoiceTemplate = CustInvoiceTemplate::find(_custInvoiceLineTemplate.CustInvoiceTemplate);

            // Update the invoice line template distribution amount by percentage.
            while select forupdate custInvoiceDistributionTemplate
                where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == _custInvoiceLineTemplate.RecId
            {
                custInvoiceDistributionTemplate.AmountCur =
                CurrencyExchange::round(((custInvoiceDistributionTemplate.Percentage / 100) * _custInvoiceLineTemplate.AmountCur),
                                                        custInvoiceTemplate.CurrencyCode);
                custInvoiceDistributionTemplate.update();
                totalDistributedAmount += custInvoiceDistributionTemplate.AmountCur;
            }

            // Handle panney difference at last distribution line.
            if (totalDistributedAmount != 0.0 && totalDistributedAmount != _custInvoiceLineTemplate.AmountCur)
            {
                custInvoiceDistributionTemplate.clear();
                select forupdate custInvoiceDistributionTemplate
                    order by RecId desc
                        where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == _custInvoiceLineTemplate.RecId;

                custInvoiceDistributionTemplate.AmountCur += (_custInvoiceLineTemplate.AmountCur - totalDistributedAmount);
                custInvoiceDistributionTemplate.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistributionLineLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recreate template line distributions if LederDimension on CustInvoiceStandardLineTemplate updated
    /// </summary>
    /// <param name="_custInvoiceStandardLineTemplate">
    /// A <c>CustInvoiceStandardLineTemplate</c> table record.
    /// </param>
    /// <remarks>
    /// Create a distribution for new CustInvoiceStandardLineTemplate record (template line). Deletes all existing distributions before
    /// creating a new distribution.
    /// </remarks>
    public static void updateDistributionLineLedgerDimension(CustInvoiceStandardLineTemplate _custInvoiceStandardLineTemplate)
    {
        if (_custInvoiceStandardLineTemplate)
        {
            ttsbegin;
            CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;
            delete_from custInvoiceDistributionTemplate where custInvoiceDistributionTemplate.CustInvoiceLineTemplate == _custInvoiceStandardLineTemplate.RecId;

            CustInvoiceDistributionTemplate::createDefaultDistributionTemplate(_custInvoiceStandardLineTemplate, _custInvoiceStandardLineTemplate.LedgerDimension);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultDistributionTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the default distribution template for the given invoice line template.
    /// </summary>
    /// <param name = "_custInvoiceLineTemplate">
    /// A standard or markup invoice line template.
    /// </param>
    /// <param name = "_ledgerDimension">
    /// The ledger dimension account to use on the default distribution.
    /// </param>
    public static void createDefaultDistributionTemplate(CustInvoiceLineTemplate _custInvoiceLineTemplate, LedgerDimensionAccount _ledgerDimension)
    {
        CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;

        if (CustInvoiceDistributionTemplate::isExtensionOfCustInvoiceLineTemplateAndHasDefaultDimension(_custInvoiceLineTemplate))
        {
            custInvoiceDistributionTemplate.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimension, CustInvoiceDistributionTemplate::getDefaultDimensionFieldFromCustInvoiceLineTemplate(_custInvoiceLineTemplate));
        }
        else
        {
            custInvoiceDistributionTemplate.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimension, CustInvoiceTemplate::find(_custInvoiceLineTemplate.CustInvoiceTemplate).DefaultDimension);
        }

        custInvoiceDistributionTemplate.Percentage = 100.0;
        custInvoiceDistributionTemplate.AmountCur = _custInvoiceLineTemplate.AmountCur;
        custInvoiceDistributionTemplate.CustInvoiceLineTemplate = _custInvoiceLineTemplate.RecId;
        custInvoiceDistributionTemplate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtensionOfCustInvoiceLineTemplateAndHasDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the passed in table buffer is an extension of <c>CustInvoiceLineTemplate</c> and has a default dimension field.
    /// </summary>
    /// <param name = "_custInvoiceLineTemplate">The <c>CustInvoiceLineTemplate</c> buffer to check.</param>
    /// <returns>true if the instance passed in is an instance of an extension of the <c>CustInvoiceLineTemplate</c> table and has a default dimension field; otherwise, false.</returns>
    protected static boolean isExtensionOfCustInvoiceLineTemplateAndHasDefaultDimension(CustInvoiceLineTemplate _custInvoiceLineTemplate)
    {
        return _custInvoiceLineTemplate is CustInvoiceStandardLineTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionFieldFromCustInvoiceLineTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension field from <c>CustInvoiceLineTemplate</c> instance.
    /// </summary>
    /// <param name = "_custInvoiceLineTemplate">The <c>CustInvoiceLineTemplate</c> buffer to get the dimension from.</param>
    /// <returns>The default dimension field value from the <c>CustInvoiceLineTemplate</c> buffer.</returns>
    protected static DimensionDefault getDefaultDimensionFieldFromCustInvoiceLineTemplate(CustInvoiceLineTemplate _custInvoiceLineTemplate)
    {
        return (_custInvoiceLineTemplate as CustInvoiceStandardLineTemplate).DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDistributionsFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create one or more distribution template records for the given invoice line template.
    /// </summary>
    /// <param name = "_custInvoiceLineTemplate">
    /// A standard or markup invoice line template.
    /// </param>
    /// <param name = "_sourceDocumentLineRecId">
    /// The source document line for the invoice line or charge.
    /// </param>
    /// <remarks>
    /// If the invoice line or charge has existing distributions, distribution template records will be created to match those. Otherwise,
    /// the default distribution template will be created.
    /// </remarks>
    public static void createDistributionsFromLine(CustInvoiceLineTemplate _custInvoiceLineTemplate, SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        AccountingDistribution accountingDistribution;
        boolean distributionFound;
        MonetaryAmount monetaryAmount;
        LedgerDimensionAccount defaultLedgerDimension;

        // Get default values, depending on the type of line
        if (_custInvoiceLineTemplate.InstanceRelationType == DictTable::getRelationTypeFromTableName(tableStr(CustInvoiceStandardLineTemplate)))
        {
            CustInvoiceStandardLineTemplate standardLineTemplate = _custInvoiceLineTemplate;
            monetaryAmount = MonetaryAmount::ExtendedPrice;
            defaultLedgerDimension = standardLineTemplate.LedgerDimension;
        }
        else
        {
            CustInvoiceMarkupTransTemplate markupLineTemplate = _custInvoiceLineTemplate;
            monetaryAmount = MonetaryAmount::Charge;
            defaultLedgerDimension = MarkupTable::find(MarkupModuleType::Cust, markupLineTemplate.MarkupCode).VendorLedgerDimension;
        }

        // Create a distribution template for each accounting distribution on the source document line
        while select accountingDistribution
            where accountingDistribution.SourceDocumentLine == _sourceDocumentLineRecId &&
                accountingDistribution.MonetaryAmount == monetaryAmount
        {
            CustInvoiceDistributionTemplate::createFromAccountingDistribution(_custInvoiceLineTemplate.RecId, accountingDistribution);

            distributionFound = true;
        }

        if (!distributionFound)
        {
            CustInvoiceDistributionTemplate::createDefaultDistributionTemplate(_custInvoiceLineTemplate, defaultLedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromAccountingDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a Distribution template record for the given accounting distribution.
    /// </summary>
    /// <param name = "_custInvoiceLineTemplateRecId">
    /// The identifier of the invoice line template for the new distribution template.
    /// </param>
    /// <param name = "_accountingDistribution">
    /// The accounting distribution.
    /// </param>
    public static void createFromAccountingDistribution(RefRecId _custInvoiceLineTemplateRecId, AccountingDistribution _accountingDistribution)
    {
        CustInvoiceDistributionTemplate distributionTemplate;

        distributionTemplate.CustInvoiceLineTemplate = _custInvoiceLineTemplateRecId;
        distributionTemplate.LedgerDimension = _accountingDistribution.LedgerDimension;
        distributionTemplate.Percentage = _accountingDistribution.percentage();
        distributionTemplate.AmountCur = _accountingDistribution.TransactionCurrencyAmount;

        distributionTemplate.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS314205</DeveloperDocumentation>
	<FormRef>CustInvoiceDistributionTemplate</FormRef>
	<Label>@SYS314602</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LedgerDimension</TitleField1>
	<TitleField2>AmountCur</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceLineTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Distribution</Name>
			<Label>@SYS81056</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS177138</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceLineTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PercentPositive</ExtendedDataType>
			<Label>@SYS67344</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTemplateLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceLineTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustFreeInvoiceTemplateLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustFreeInvoiceTemplateLine_CustFreeInvoiceTemplateDistributionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceLineTemplate</Name>
					<Field>CustInvoiceLineTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentDistribution</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>