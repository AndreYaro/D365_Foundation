<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchRuleSetLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconciliationMatchRuleSetLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dispIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays an active indicator of a matching rule.
    /// </summary>
    /// <returns>
    /// The active indicator to display.
    /// </returns>
    public display BankReconciliationMatchRuleActive dispIsActive()
    {
        return BankReconciliationMatchRule::find(this.BankReconciliationMatchRule).isActivated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispRuleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a rule name.
    /// </summary>
    /// <returns>
    /// The rule name to display.
    /// </returns>
    public display BankReconciliationMatchRuleName dispRuleName()
    {
        return BankReconciliationMatchRule::find(this.BankReconciliationMatchRule).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the selected line and switches it and the next line.
    /// </summary>
    /// <returns>
    /// The currently selected line.
    /// </returns>
    public BankReconciliationMatchRuleSetLine moveDown()
    {
        return BankReconciliationMatchRuleSetLine::switchLines(this.nextLine(true), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the selected line up and switches it and the previous line.
    /// </summary>
    /// <returns>
    /// The currently selected line.
    /// </returns>
    public BankReconciliationMatchRuleSetLine moveUp()
    {
        return BankReconciliationMatchRuleSetLine::switchLines(this.prevLine(true), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line after the currently selected line.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the line for update; optional.
    /// </param>
    /// <returns>
    /// The next line.
    /// </returns>
    private BankReconciliationMatchRuleSetLine nextLine(boolean _forUpdate)
    {
        BankReconciliationMatchRuleSetLine  matchRuleSetLine;

        matchRuleSetLine.selectForUpdate(_forUpdate);

        select firstOnly matchRuleSetLine
            order by LineNum
            where matchRuleSetLine.BankReconciliationMatchRuleSet == this.BankReconciliationMatchRuleSet
                && matchRuleSetLine.LineNum                       >  this.LineNum;

        return matchRuleSetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line before the currently selected line.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the selected line is for update; Optional, default is false.
    /// </param>
    /// <returns>
    /// The previous line.
    /// </returns>
    private BankReconciliationMatchRuleSetLine prevLine(boolean _forUpdate = false)
    {
        BankReconciliationMatchRuleSetLine  matchRuleSetLine;

        matchRuleSetLine.selectForUpdate(_forUpdate);

        select firstOnly matchRuleSetLine
            order by LineNum desc
            where matchRuleSetLine.BankReconciliationMatchRuleSet == this.BankReconciliationMatchRuleSet
                && matchRuleSetLine.LineNum                       <  this.LineNum;

        return matchRuleSetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>BankReconciliationMatchRuleSetLine</c> table;
    /// If not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankReconciliationMatchRuleSetLine</c> record.
    /// </param>
    /// <returns>
    /// True if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!BankReconciliationMatchRuleSetLine::exist(_recId))
        {
            isExisting = checkFailed(strFmt(BankReconciliationMatchRuleSetLine::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>BankReconciliationMatchRuleSetLine</c>
    /// table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankReconciliationMatchRuleSetLine</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        BankReconciliationMatchRuleSetLine matchRuleSetLine;

        select firstOnly RecId from matchRuleSetLine
            where matchRuleSetLine.RecId == _recId;

        return matchRuleSetLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankReconciliationMatchRuleSetLine</c> record that has a specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The specified record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A currency model.
    /// </param>
    /// <returns>
    /// A <c>BankReconciliationMatchRuleSetLine</c> record.
    /// </returns>
    public static BankReconciliationMatchRuleSetLine find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankReconciliationMatchRuleSetLine  matchRuleSetLine;

        matchRuleSetLine.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            matchRuleSetLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly matchRuleSetLine
            where matchRuleSetLine.RecId == _recId;

        return matchRuleSetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByMatchingRuleSetAndMatchingRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankReconciliationMatchRuleSetLine</c> record that has a specified matching rule set and matching rule.
    /// </summary>
    /// <param name="_matchRuleSetId">The specified matching rule set.</param>
    /// <param name="_matchRuleId">The specified matching rule.</param>
    /// <param name="_forUpdate">A Boolean value that indicates whether to select the record for update.</param>
    /// <returns>A <c>BankReconciliationMatchRuleSetLine</c> record.</returns>
    internal static BankReconciliationMatchRuleSetLine findByMatchingRuleSetAndMatchingRule(
        RecId _matchRuleSetId,
        RecId _matchRuleId,
        boolean _forUpdate = false)
    {
        BankReconciliationMatchRuleSetLine matchRuleSetLine;

        matchRuleSetLine.selectForUpdate(_forUpdate);
        select firstonly matchRuleSetLine
            where matchRuleSetLine.BankReconciliationMatchRuleSet == _matchRuleSetId
                && matchRuleSetLine.BankReconciliationMatchRule == _matchRuleId;

        return matchRuleSetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the line numbers of two lines when the up or down button is clicked.
    /// </summary>
    /// <param name="_switchedLine">
    /// The line to be switched.
    /// </param>
    /// <param name="_currentLine">
    /// The currently selected line.
    /// </param>
    private static void switchLineNum(
        BankReconciliationMatchRuleSetLine  _switchedLine,
        BankReconciliationMatchRuleSetLine  _currentLine)
    {
        LineNum saveLineNum;

        saveLineNum = _switchedLine.LineNum;

        _switchedLine.LineNum = _currentLine.LineNum;
        _currentLine.LineNum  = saveLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches two lines when the up or down button is clicked.
    /// </summary>
    /// <param name="_switchedLine">
    /// The line to be switched.
    /// </param>
    /// <param name="_currentLine">
    /// The currently selected line.
    /// </param>
    /// <returns>
    /// The currently selected line.
    /// </returns>
    private static BankReconciliationMatchRuleSetLine switchLines(
        BankReconciliationMatchRuleSetLine  _switchedLine,
        BankReconciliationMatchRuleSetLine  _currentLine)
    {
        BankReconciliationMatchRuleSetLine  switchedLine = _switchedLine;
        BankReconciliationMatchRuleSetLine  currentLine = _currentLine;
        BankReconciliationMatchRuleSetLine  tmpLine;

        if (switchedLine.RecId && currentLine.RecId)
        {
            ttsBegin;

            // Switch the two lines.
            BankReconciliationMatchRuleSetLine::switchLineNum(switchedLine, currentLine);

            // Set line number to 0 for 'thisLine' to avoid duplicated index.
            BankReconciliationMatchRuleSetLine::switchLineNum(tmpLine, currentLine);
            currentLine.update();
            switchedLine.update();

            // Set Line number for 'thisLine' back to it's original value.
            BankReconciliationMatchRuleSetLine::switchLineNum(tmpLine, currentLine);
            currentLine.update();

            ttsCommit;
        }

        return currentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>BankReconciliationMatchRuleSetLine</c> table does not exist.
    /// </summary>
    /// <returns>
    /// A message that states that a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret && _fieldIdToCheck == fieldNum(BankReconciliationMatchRuleSetLine, BankReconciliationMatchRule))
        {
            BankReconciliationMatchRule rule = BankReconciliationMatchRule::find(this.BankReconciliationMatchRule);

            if (rule.RecId)
            {
                if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
                {
                    if (rule.MatchActionType == BankReconciliationMatchActionType::Adjustment)
                    {
                        ret = checkFailed(strFmt("@Bank:BankReconciliationRuleSetIUpdateFailError", "@Bank:Enabled", rule.MatchActionType));
                    }
                }
                else if (rule.MatchActionType != BankReconciliationMatchActionType::Adjustment
                    && rule.MatchActionType != BankReconciliationMatchActionType::Match
                    && rule.MatchActionType != BankReconciliationMatchActionType::Reversal)
                {
                    ret = checkFailed(strFmt("@Bank:BankReconciliationRuleSetIUpdateFailError", "@Bank:Disabled", rule.MatchActionType));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS222307</DeveloperDocumentation>
	<Label>@GLS222241</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>BankReconciliationMatchRuleSet</TitleField1>
	<TitleField2>BankReconciliationMatchRule</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>Bank</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankReconciliationMatchRuleSet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankReconciliationMatchRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankReconciliationMatchRule</Name>
			<Label>@GLS222274</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankReconciliationMatchRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankReconciliationMatchRuleSet</Name>
			<Label>@GLS222275</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankReconciliationMatchRuleSet</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineNum</Name>
			<Label>@SYS15682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankReconciliationMatchRule</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchRuleRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankReconciliationMatchRuleSet</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchRuleSetRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankReconciliationMatchRuleSetIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>BankReconciliationMatchRuleSet</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankReconciliationMatchRuleIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>BankReconciliationMatchRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankReconciliationMatchRuleSet</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankReconciliationMatchRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BankReconciliationMatchRule</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankReconciliationMatchRule</Name>
					<Field>BankReconciliationMatchRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankReconciliationMatchRuleSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankReconciliationMatchRuleSet</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankReconciliationMatchRuleSet</Name>
					<Field>BankReconciliationMatchRuleSet</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>