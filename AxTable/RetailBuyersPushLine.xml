<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBuyersPushLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailBuyersPushLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availCrossDocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity available for cross docking.
    /// </summary>
    /// <param name="_symbol">
    /// A unit of measure symbol.
    /// </param>
    /// <returns>
    /// The available quantity.
    /// </returns>
    public Qty availCrossDocking(UnitOfMeasureSymbol _symbol = this.UnitID)
    {
        PurchLine purchline;
        Qty       availCrossDockingQty;

        purchline = PurchLine::findRecId(this.RefRecId);

        if (purchline)
        {
            // Get recieved amount...(in purchase units)
            availCrossDockingQty = purchline.PurchQty;

            return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																						 purchLine.InventDimId,
																						 availCrossDockingQty,
																						 purchline.PurchUnit,
																						 _symbol,
																						 NoYes::No);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>availOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the available on-hand inventory converted by line to the unit of measure.
    /// </summary>
    /// <param name="_tfshBuyersPushLine">
    /// A buyer push line.
    /// </param>
    /// <returns>
    /// The converted quantity.
    /// </returns>
    /// <remarks>
    /// The on-hand inventory should be returned in the unit of measure of the buyer push line.
    /// </remarks>

    display Qty availOnHand(RetailBuyersPushLine  _tfshBuyersPushLine)
    {
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_tfshBuyersPushLine.ItemId,
																					 _tfshBuyersPushLine.InventDimId,
																					 _tfshBuyersPushLine.onHand(),
																					 _tfshBuyersPushLine.inventTable().inventUnitId(),
																					 _tfshBuyersPushLine.UnitID,
																					 NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the available on-hand inventory converted by line to the unit of measure.
    /// </summary>
    /// <param name="_tfshBuyersPushLine">
    /// A buyer push line.
    /// </param>
    /// <param name="_inventAvailabilityFormCache">
    /// The <c>InventAvailabilityFormCache</c> object.
    /// </param>
    /// <returns>
    /// The converted quantity.
    /// </returns>
    /// <remarks>
    /// The on-hand inventory should be returned in the unit of measure of the buyer push line.
    /// </remarks>
    display Qty availableOnHand(RetailBuyersPushLine  _tfshBuyersPushLine, InventAvailabilityFormCache _inventAvailabilityFormCache = null)
    {
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_tfshBuyersPushLine.ItemId,
																					 _tfshBuyersPushLine.InventDimId,
																					 _tfshBuyersPushLine.onHandQty('', curext(), _inventAvailabilityFormCache),
																					 _tfshBuyersPushLine.inventTable().inventUnitId(),
																					 _tfshBuyersPushLine.UnitID,
																					 NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTmpInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the buyer push lines using the <c>TmpInventTable</c> record.
    /// </summary>
    /// <param name="_fshBuyersPushTable">
    /// A <c>RetailBuyersPushTable</c> record.
    /// </param>
    /// <param name="_tmpInventTable">
    /// A <c>TmpInventTable</c> record.
    /// </param>
    public void createFromTmpInventTable(RetailBuyersPushTable _fshBuyersPushTable, TmpRetailProductsToAdd _tmpInventTable)
    {
        InventDim                   tInventDim;

        while select _tmpInventTable
        {
            try
            {
                this.clear();
                if (_tmpInventTable.EcoResDistinctProductVariant)
                {
                    EcoResProductDimGroupSetup::copyProductDimensionsForItem(
                        InventTable::findByProduct(_tmpInventTable.EcoResProduct).ItemId
                        , InventDim::find(_tmpInventTable.InventDim)
                        , tInventDim);
                    tInventDim.InventLocationId = _fshBuyersPushTable.InventLocationId;
                    tInventDim.InventSiteId = _fshBuyersPushTable.InventSiteId;
                    tInventDim = InventDim::findOrCreate(tInventDim);
                    RetailBuyersPushLine::createBuyersPushLine(
                        _fshBuyersPushTable.BuyersPushId
                        , InventTable::findByProduct(_tmpInventTable.EcoResProduct).ItemId
                        , tInventDim.inventDimId);
                }
                else
                {
                    RetailBuyersPushLine::createBuyersPushLines(_fshBuyersPushTable.BuyersPushId,InventTable::findByProduct(_tmpInventTable.EcoResProduct).ItemId,_fshBuyersPushTable.InventLocationId,_fshBuyersPushTable.InventSiteId);
                }

                _tmpInventTable.delete();
            }

            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossdockQtyForTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates transfer or sales orders for the cross docking line.
    /// </summary>
    public void crossdockQtyForTransfer()
    {
        RetailBuyersPushLineQty     buyersPushLineQty;
        PurchLine                   purchLine;
        InventLocation              inventLocationFrom, inventLocationTo;
        InterCompanyTradingPartner  tradingPartner;
        CustAccount                 custAccount;

        ttsbegin;

        select firstonly RecId from purchLine
        where purchLine.RecId == this.RefRecId;

        inventLocationFrom = InventDim::find(purchLine.InventDimId).inventLocation();

        while select forupdate buyersPushLineQty
        where buyersPushLineQty.BuyersPushId == this.BuyersPushId &&
              buyersPushLineQty.LineNum      == this.LineNum &&
              buyersPushLineQty.Qty          >  0
        {
            inventLocationTo = InventLocation::findInLegalEntity(buyersPushLineQty.InventLocationId, buyersPushLineQty.WarehouseDataAreaId);
            if (inventLocationFrom.DataAreaId == inventLocationTo.DataAreaId)
            {
                buyersPushLineQty.createOrUpdateTransferOrder();
                purchLine.updateWhsCrossDock(NoYes::Yes);
            }
            else
            {
                tradingPartner = InterCompanyTradingPartner::findTradingCustomer(inventLocationFrom.DataAreaId, inventLocationTo.DataAreaId);
                custAccount = tradingPartner.custTable().AccountNum;

                if (tradingPartner && (custAccount != ""))
                {   // Create the Sales Order given the specified trading customer
                    buyersPushLineQty.createOrUpdateSalesOrder(this, custAccount, inventLocationTo);
                    purchLine.updateWhsCrossDock(NoYes::Yes);
                }
                else
                {   // No valid trading customer
                    error(strFmt("@RET5767", inventLocationTo.DataAreaId));
                    ttsabort;
                    return;
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into <c>RetailBuyersPushLine</c> table.
    /// </summary>
    public void insert()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the <c>InventTable</c> record for update by using the specified value.
    /// </summary>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventTable</c> table.
    /// </returns>
    public InventTable inventTable(boolean _forupdate = false)
    {
        return InventTable::find(this.ItemId,_forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssortedTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the product or the variant in the buyer's push line is assorted to the warehouse.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Invent location id of the warehouse.
    /// </param>
    /// <param name="_inventLocationDataAreaId">
    /// The company of the warehouse.
    /// </param>
    /// <param name="checkDate">
    /// Check date.
    /// </param>
    /// <returns>
    /// The result.
    /// </returns>
    public boolean isAssortedTo(InventLocationId _inventLocationId, DataAreaId _inventLocationDataAreaId = curext(), date checkDate = DateTimeUtil::date(DateTimeUtil::utcNow()))
    {
        boolean                 result = false;

        InventTable             inventTable;
        InventDim               buyersPushLineInventDim, inventDim;
        InventDimCombination    inventDimCombination;
        RetailChannelTable      channel;

        // Find the product from ItemID
        select firstOnly RecId, Product from inventTable
                where   inventTable.ItemId == this.ItemId;

        // Try to find the variant from InventDim
        select firstonly RecId, InventDimId, DistinctProductVariant from inventDimCombination
            where       inventDimCombination.ItemId     == this.ItemId
            exists join inventDim
                where   inventDim.InventDimId       == inventDimCombination.InventDimId
            exists join buyersPushLineInventDim
                where   buyersPushLineInventDim.ConfigId        == inventDim.ConfigId
                    &&  buyersPushLineInventDim.InventSizeId    == inventDim.InventSizeId
                    &&  buyersPushLineInventDim.InventColorId   == inventDim.InventColorId
                    &&  buyersPushLineInventDim.InventStyleId   == inventDim.InventStyleId
                    &&  buyersPushLineInventDim.InventVersionId == inventDim.InventVersionId
                    &&  buyersPushLineInventDim.inventDimId     == this.InventDimId;

        while select RecId from channel
            where channel.inventLocation == _inventLocationId
               && channel.inventLocationDataAreaId == _inventLocationDataAreaId
        {
            if (inventDimCombination)
            {
                result = RetailAssortmentTable::isProductAssortedTo(inventDimCombination.DistinctProductVariant, channel.RecId, checkDate);
            }
            else
            {
                result = RetailAssortmentTable::isProductAssortedTo(inventTable.Product, channel.RecId, checkDate);
            }

            if (result)
            {
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates distrubtion limit when the unit ID of the distribution is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory available on-hand.
    /// </summary>
    /// <param name="_sInventLocationId">
    /// The identification value of a location.
    /// </param>
    /// <param name="_locationDataAreaId">
    /// The company of the location.
    /// </param>
    /// </param>
    /// <param name="_inventAvailabilityFormCache">
    /// The <c>InventAvailabilityFormCache</c> object.
    /// </param>
    /// <returns>
    /// The calculated on-hand quantity.
    /// </returns>
    public Qty onHandQty(InventLocationId    _sInventLocationId = '', DataAreaId _locationDataAreaId = curext(), InventAvailabilityFormCache _inventAvailabilityFormCache = null)
    {
        InventAvailabilityFormCache inventAvailabilityFormCache;
        InventDim                   tInventDim;
        InventDimParm               inventDimParm;
        InventTable                 inventTableThisLE, inventTableOtherLE;
        Qty                         onHandQty;

        if (_inventAvailabilityFormCache == null)
        {
            inventAvailabilityFormCache = InventAvailabilityFormCache::construct();
        }
        else
        {
            inventAvailabilityFormCache = _inventAvailabilityFormCache;
        }

        tInventDim = InventDim::find(this.InventDimId);

        // When the inputs are default values, finds the on hand of the source location;
        // otherwise, finds the on hand of the provided location (i.e. target location)
        if (!_sInventLocationId
            || (tInventDim.InventLocationId == _sInventLocationId && _locationDataAreaId == curext()))
        {
            onHandQty = this.onHandQtyByItem(this.ItemId, tInventDim, inventAvailabilityFormCache);
        }
        else
        {
            inventDimParm.setAllProductDimensions();
            tInventDim.clearNotSelectedDim(inventDimParm);

            if (_locationDataAreaId == curext())
            {
                // The location is from the same company of the source location
                tInventDim.InventLocationId = _sInventLocationId;
                tInventDim.InventSiteId     = InventLocation::find(_sInventLocationId).InventSiteId;
                tInventDim = InventDim::findDim(tInventDim);

                onHandQty = this.onHandQtyByItem(this.ItemId, tInventDim, inventAvailabilityFormCache);
            }
            else
            {
                // The location is from a different company
                inventTableThisLE = InventTable::find(this.ItemId);

                changeCompany(_locationDataAreaId)
                {
                    inventTableOtherLE = InventTable::findByProduct(inventTableThisLE.Product);

                    tInventDim.InventLocationId = _sInventLocationId;
                    tInventDim.InventSiteId     = InventLocation::find(_sInventLocationId).InventSiteId;
                    tInventDim = InventDim::findDim(tInventDim);

                    onHandQty = this.onHandQtyByItem(inventTableOtherLE.ItemId, tInventDim, inventAvailabilityFormCache);
                }
            }
        }

        return onHandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory available on-hand.
    /// </summary>
    /// <param name="_sInventLocationId">
    /// The identification value of a location.
    /// </param>
    /// <param name="_locationDataAreaId">
    /// The company of the location.
    /// </param>
    /// <returns>
    /// The calculated on-hand quantity.
    /// </returns>
    public Qty onHand(InventLocationId    _sInventLocationId = '', DataAreaId _locationDataAreaId = curext())
    {
        InventDim       tInventDim;
        InventTable inventTableThisLE, inventTableOtherLE;
        InventDimParm inventDimParm;
        Qty onHandQty;

        tInventDim = InventDim::find(this.InventDimId);

        // When the inputs are default values, finds the on hand of the source location;
        // otherwise, finds the on hand of the provided location (i.e. target location)
        if (!_sInventLocationId
            || (tInventDim.InventLocationId == _sInventLocationId && _locationDataAreaId == curext()))
        {
            onHandQty = this.onHandByItem(this.ItemId, tInventDim);
        }
        else
        {
            inventDimParm.setAllProductDimensions();
            tInventDim.clearNotSelectedDim(inventDimParm);

            if (_locationDataAreaId == curext())
            {
                // The location is from the same company of the source location
                tInventDim.InventLocationId = _sInventLocationId;
                tInventDim.InventSiteId     = InventLocation::find(_sInventLocationId).InventSiteId;
                tInventDim = InventDim::findDim(tInventDim);

                onHandQty = this.onHandByItem(this.ItemId, tInventDim);
            }
            else
            {
                // The location is from a different company
                inventTableThisLE = InventTable::find(this.ItemId);

                changeCompany(_locationDataAreaId)
                {
                    inventTableOtherLE = InventTable::findByProduct(inventTableThisLE.Product);

                    tInventDim.InventLocationId = _sInventLocationId;
                    tInventDim.InventSiteId     = InventLocation::find(_sInventLocationId).InventSiteId;
                    tInventDim = InventDim::findDim(tInventDim);

                    onHandQty = this.onHandByItem(inventTableOtherLE.ItemId, tInventDim);
                }
            }
        }

        return onHandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandByItem</Name>
				<Source><![CDATA[
    private Qty onHandByItem(ItemId _itemId, InventDim _inventDim)
    {
        InventDimParm   inventDimParm;
        InventOnHandQty inventOnHandQty;
        InventAvailabilityFormCache inventAvailabilityFormCache = InventAvailabilityFormCache::construct();
        Qty onHandQty;

        if (_itemId && _inventDim)
        {
            inventDimParm.initFromInventDim(_inventDim);
            inventOnHandQty = InventOnHandQty::newItemDim(_itemId, _inventDim, inventDimParm);

            onHandQty = inventAvailabilityFormCache.availability(inventOnHandQty.inventSum(), _inventDim).availTotal();
        }
        else
        {
            onHandQty = 0;
        }

        return onHandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandQtyByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the total on-hand quantity for the item.
    /// </summary>
    /// <param name = "_itemId">
    /// Product number of the item.
    /// </param>
    /// <param name = "_inventDim">
    /// Product dimension.
    /// </param>
    /// <param name = "_inventAvailabilityFormCache">
    /// The <c>InventAvailabilityFormCache</c> object.
    /// </param>
    /// <returns>
    /// Returns the total on-hand quantity for the item.
    /// </returns>
    public Qty onHandQtyByItem(ItemId _itemId, InventDim _inventDim, InventAvailabilityFormCache _inventAvailabilityFormCache )
    {
        InventDimParm   inventDimParm;
        InventOnHandQty inventOnHandQty;
        Qty             onHandQty;

        if (_itemId && _inventDim)
        {
            inventDimParm.initFromInventDim(_inventDim);
            inventOnHandQty = InventOnHandQty::newItemDim(_itemId, _inventDim, inventDimParm);

            onHandQty = _inventAvailabilityFormCache.availability(inventOnHandQty.inventSum(), _inventDim).availTotal();
        }
        else
        {
            onHandQty = 0;
        }

        return onHandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availablePhysicalByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the physically available quantity of items based on the product number.
    /// </summary>
    /// <param name = "_itemId">
    /// Product number of the item.
    /// </param>
    /// <param name = "_inventDim">
    /// Product dimension.
    /// </param>
    /// <param name = "_inventAvailabilityFormCache">
    /// The <c>InventAvailabilityFormCache</c> object.
    /// </param>
    /// <returns>
    /// Returns the physically available quantity of items.
    /// </returns>
    public Qty availablePhysicalByItem(ItemId _itemId, InventDim _inventDim, InventAvailabilityFormCache _inventAvailabilityFormCache = null)
    {
        InventDimParm   inventDimParm;
        InventOnHandQty inventOnHandQty;
        Qty             onHandQty;

        if (_itemId && _inventDim)
        {
            inventDimParm.initFromInventDim(_inventDim);
            inventOnHandQty = InventOnHandQty::newItemDim(_itemId, _inventDim, inventDimParm);

            onHandQty = _inventAvailabilityFormCache.availability(inventOnHandQty.inventSum(), _inventDim).availPhysical();
        }
        else
        {
            onHandQty = 0;
        }

        return onHandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specifiedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user specified quantity to distribute.
    /// </summary>
    /// <param name="set">
    /// The flag indicating whether the field is set.
    /// </param>
    /// <param name="specifiedQty">
    /// The specified quantity. If the input is empty, it means the user does not specify the quantity to distribute.
    /// </param>
    /// <returns>
    /// The user specified quantity to distribute.
    /// </returns>
    edit QtyString specifiedQty(boolean set, QtyString specifiedQty)
    {
        RetailUserSpecifiedQty qty;
        boolean invalid = false;
        int decimals;
        Qty distributeLimit;

        decimals = UnitOfMeasure::find(UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(this.ItemId).inventUnitId())).DecimalPrecision;

        if (set)
        {
            if (specifiedQty == '')
            {
                this.UserSpecified = NoYes::No;
                this.UserSpecifiedQty = 0;
            }
            else
            {
                // The quantity to distribute cannot be negative
                qty = str2num(specifiedQty);
                qty = roundZeroDec(qty, decimals);
                if (qty < 0)
                {
                    qty = 0;
                }

                this.UserSpecified = NoYes::Yes;
                this.UserSpecifiedQty = qty;
                specifiedQty = num2str(this.UserSpecifiedQty, 0, decimals, DecimalSeparator::Auto, ThousandSeparator::Auto);
            }
        }

        // If the field is not set, or if the input is invalid, display the old value.
        if (!set || invalid)
        {
            if (this.UserSpecified == NoYes::Yes)
            {
                specifiedQty = num2str(this.UserSpecifiedQty, 0, decimals, DecimalSeparator::Auto, ThousandSeparator::Auto);
            }
            else
            {
                specifiedQty = '';
            }
        }

        return specifiedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total quantity from the <c>RetailBuyersPushLineQty</c> table.
    /// </summary>
    /// <returns>
    /// The calculated total quantity.
    /// </returns>
    display Qty totalQty()
    {
        RetailBuyersPushLineQty    tfshBuyersPushLineQty;

        select sum(Qty) from tfshBuyersPushLineQty
            where tfshBuyersPushLineQty.BuyersPushId    == this.BuyersPushId
               && tfshBuyersPushLineQty.LineNum         == this.LineNum;

        return tfshBuyersPushLineQty.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuyersPushLine</Name>
				<Source><![CDATA[
    static private RetailBuyersPushLine createBuyersPushLine(RetailBuyersPushId    _sBuyersPushId
                                                , ItemId             _sItemId
                                                , InventDimId        _sInventDimId)
    {
        RetailBuyersPushLine           tBuyersPushLine;

        tBuyersPushLine.ItemId           =   _sItemId;
        tBuyersPushLine.UnitID           =   tBuyersPushLine.inventTable().inventUnitId();
        tBuyersPushLine.BuyersPushId     =   _sBuyersPushId;
        tBuyersPushLine.LineNum          =   RetailBuyersPushLine::lastLineNum(_sBuyersPushId) + 1;

        tBuyersPushLine.InventDimId  =   _sInventDimId;

        tBuyersPushLine.insert();

        RetailBuyersPushLine::createBuyersPushLineQtyLines(tBuyersPushLine);

        return tBuyersPushLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuyersPushLineQtyLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lines in the <c>RetailBuyersPushLineQty</c> table.
    /// </summary>
    /// <param name="_tBuyersPushLine">
    /// A <c>RetailBuyersPushLine</c> record.
    /// </param>
    public static void createBuyersPushLineQtyLines(RetailBuyersPushLine _tBuyersPushLine)
    {
        InventLocation          tInventLocation;
        RetailBuyersPushLineQty    tBuyersPushLineQty;

        ttsbegin;

        // Select Cross Company for all stores with a RetailWeight...
        while select crossCompany * from tInventLocation
            where tInventLocation.fshStore == NoYes::Yes
        {   // For each store determine if a record already exist in the BuyersPushLineQty table...

            select firstonly * from tBuyersPushLineQty
                where tBuyersPushLineQty.InventLocationId == tInventLocation.InventLocationId
                   && tBuyersPushLineQty.WarehouseDataAreaId == tInventLocation.DataAreaId
                   && tBuyersPushLineQty.BuyersPushId   == _tBuyersPushLine.BuyersPushId
                   && tBuyersPushLineQty.LineNum        == _tBuyersPushLine.LineNum;

            if (!tBuyersPushLineQty.RecId)
            {   // The record does not exist so create it:

                tBuyersPushLineQty.BuyersPushId      =   _tBuyersPushLine.BuyersPushId;
                tBuyersPushLineQty.LineNum           =   _tBuyersPushLine.LineNum;
                tBuyersPushLineQty.InventLocationId    =   tInventLocation.InventLocationId;
                tBuyersPushLineQty.WarehouseDataAreaId    =   tInventLocation.DataAreaId;
                tBuyersPushLineQty.insert();
            }
        }

        ttscommit;

        RetailTracer::Info('Replenishment', funcName(), strFmt('Quantity lines have been created for buyer\'s push/cross docking %1', _tBuyersPushLine.BuyersPushId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBuyersPushLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lines in the <c>RetailBuyersPushLine</c> table.
    /// </summary>
    /// <param name="_sBuyersPushId">
    /// The identification of a buyer push record.
    /// </param>
    /// <param name="_sItemId">
    /// An item ID value.
    /// </param>
    /// <param name="_sInventLocation">
    /// The identification value of a location.
    /// </param>
    /// <param name="_sInventSiteId">
    /// The identification value of a site.
    /// </param>
    static public void createBuyersPushLines(RetailBuyersPushId    _sBuyersPushId,
                                             ItemId             _sItemId,
                                             InventLocationId   _sInventLocation,
                                             InventSiteId       _sInventSiteId)
    {
        RetailBuyersPushLine::createAndReturnBuyersPushLines(_sBuyersPushId, _sItemId, _sInventLocation, _sInventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndReturnBuyersPushLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lines in the <c>RetailBuyersPushLine</c> table.
    /// </summary>
    /// <param name="_sBuyersPushId">
    /// The identification of a buyer push record.
    /// </param>
    /// <param name="_sItemId">
    /// An item ID value.
    /// </param>
    /// <param name="_sInventLocation">
    /// The identification value of a location.
    /// </param>
    /// <param name="_sInventSiteId">
    /// The identification value of a site.
    /// </param>
    /// <returns>
    /// A <c>RetailBuyersPushLine</c> record which is newly created.
    /// </returns>
    static public RetailBuyersPushLine createAndReturnBuyersPushLines(RetailBuyersPushId    _sBuyersPushId,
                                             ItemId             _sItemId,
                                             InventLocationId   _sInventLocation,
                                             InventSiteId       _sInventSiteId)
    {
        InventDimCombination        tInventDimCombination;
        RetailBuyersPushLine           tBuyersPushLine;
        InventDim                   tInventDim;
        Counter                     iCount;
        RetailBuyersPushLine        retailBuyersPushLine;

        ttsbegin;

        while select * from tInventDimCombination
            index ItemIdx
            where tInventDimCombination.ItemId == _sItemId
        {
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(tInventDimCombination.ItemId, tInventDimCombination.inventDim(), tInventDim);
            tInventDim.InventLocationId = _sInventLocation;
            tInventDim.InventSiteId = _sInventSiteId;
            tInventDim = InventDim::findOrCreate(tInventDim);

            select * from tBuyersPushLine
                where tBuyersPushLine.BuyersPushId  == _sBuyersPushId
                    && tBuyersPushLine.ItemId        == _sItemId
                    && tBuyersPushLine.InventDimId   == tInventDim.inventDimId;

            if (!tBuyersPushLine.RecId)
            {
                retailBuyersPushLine = RetailBuyersPushLine::createBuyersPushLine(_sBuyersPushId, tInventDimCombination.ItemId, tInventDim.InventDimId);
                iCount++;
            }
        }

        if (!iCount)
        {
            tInventDim.InventLocationId = _sInventLocation;
            tInventDim.InventSiteId = _sInventSiteId;
            tInventDim = InventDim::findOrCreate(tInventDim);
            retailBuyersPushLine = RetailBuyersPushLine::createBuyersPushLine(_sBuyersPushId, _sItemId, tInventDim.inventDimId);
        }

        ttscommit;

        RetailTracer::Info('Replenishment', funcName(), strFmt('Lines with product variants have been created for buyer\'s push/cross docking %1 (product: %2)', _sBuyersPushId, _sItemId));
        
        return retailBuyersPushLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>RetailBuyersPushLine</c> table by using the buyer's push ID and the line number.
    /// </summary>
    /// <param name="_buyersPushId">
    /// The buyer's push ID.
    /// </param>
    /// <param name="_lineNum">
    /// The line number.
    /// </param>
    /// <param name="_forUpdate">
    /// The flag indicating whether to select the record for update.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailBuyersPushLine</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailBuyersPushLine find(RetailBuyersPushId _buyersPushId, LineNum _lineNum, boolean _forUpdate = false)
    {
        RetailBuyersPushLine retailBuyersPushLine;

        retailBuyersPushLine.selectForUpdate(_forUpdate);

        select firstonly retailBuyersPushLine
            where retailBuyersPushLine.BuyersPushId == _buyersPushId
            &&    retailBuyersPushLine.LineNum == _lineNum;

        return retailBuyersPushLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last line number from the <c>RetailBuyersPushLine</c> table.
    /// </summary>
    /// <param name="_sPushId">
    /// The identification value of a buyer push.
    /// </param>
    /// <returns>
    /// The last line number.
    /// </returns>
    public static LineNum  lastLineNum(RetailBuyersPushId _sPushId)
    {
        return (select maxof(LineNum) from retailBuyersPushLine
                    where retailBuyersPushLine.BuyersPushId == _sPushId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4160439</DeveloperDocumentation>
	<Label>@RET1234</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PushIdLineNumIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<PrimaryIndex>PushIdLineNumIdx</PrimaryIndex>
	<ReplacementKey>PushIdLineNumIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailBuyersPushLineQty</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailBuyersPushLineQty</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BuyersPushId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserSpecified</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserSpecifiedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BuyersPushId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BuyersPushId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Information</Name>
			<Label>@SYS60385</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseLine</Name>
			<Label>@SYS22957</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UserSpecified</Name>
			<Label>@REX1345</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserSpecified</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserSpecifiedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BuyersPushId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBuyersPushId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UserSpecified</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUserSpecified</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UserSpecifiedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUserSpecifiedQty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PushIdLineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BuyersPushId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailBuyersPushTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailBuyersPushTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BuyersPushId</Name>
					<SourceEDT>RetailBuyersPushId</SourceEDT>
					<Field>BuyersPushId</Field>
					<RelatedField>BuyersPushId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>