<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCComponentAttributeGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCComponentAttributeGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        PCComponentAttributeGroupTranslation    componentAttributeGroupTranslation;
        PCComponentAttributeGroupCategoryAttr   componentAttributeGroupCategoryAttr;

        _visitor.visitStart(this);

        while select componentAttributeGroupTranslation
        where componentAttributeGroupTranslation.ComponentAttributeGroup == this.RecId
        {
            componentAttributeGroupTranslation.accept(_visitor);
        }

        while select componentAttributeGroupCategoryAttr
        where componentAttributeGroupCategoryAttr.ComponentAttributeGroup == this.RecId
        {
            componentAttributeGroupCategoryAttr.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <param name="_duplicatedComponentControl">
    /// A reference to a <c>PCComponentControl</c> record to duplicate.
    /// </param>
    /// <param name="_duplicatedComponent">
    /// A reference to a
    /// </param>
    public void duplicateExtended(RefRecId  _duplicatedComponentControl, RefRecId _duplicatedComponent)
    {
        PCComponentAttributeGroup               duplicate;
        PCComponentAttributeGroupCategoryAttr   categoryAttributeRelation;

        ttsbegin;

        duplicate.data(this);

        duplicate.ComponentControl = _duplicatedComponentControl;

        // do insert to by-pass the logic in the insert method
        duplicate.doInsert();

        while select categoryAttributeRelation
            where categoryAttributeRelation.ComponentAttributeGroup == this.RecId
        {
            categoryAttributeRelation.duplicateExtended(duplicate.RecId,_duplicatedComponent);
        }

        this.duplicateTranslations(duplicate.RecId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the translations that are related to the component attribute group.
    /// </summary>
    /// <param name="_duplicateAttributeGroup">
    /// The record ID of the duplicated component attribute group.
    /// </param>
    private void duplicateTranslations(RefRecId _duplicateAttributeGroup)
    {
        PCComponentAttributeGroupTranslation  duplicateTranslation;
        PCComponentAttributeGroupTranslation  originalTranslation;

        ttsbegin;

        while select originalTranslation
            where originalTranslation.ComponentAttributeGroup == this.RecId
        {
            duplicateTranslation.clear();
            duplicateTranslation.data(originalTranslation);
            duplicateTranslation.ComponentAttributeGroup = _duplicateAttributeGroup;
            duplicateTranslation.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTranslatedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the attribute group in the client language.
    /// </summary>
    /// <param name="_language">
    /// A language ID.
    /// </param>
    /// <returns>
    /// The name of an attribute group.
    /// </returns>
    public PCName getTranslatedName(LanguageId _language = LanguageTable::defaultLanguage())
    {
        PCComponentAttributeGroupTranslation componentAttributeGroupTranslation;

        select firstonly Name from componentAttributeGroupTranslation
            where   componentAttributeGroupTranslation.ComponentAttributeGroup  == this.RecId &&
                    componentAttributeGroupTranslation.Language                 == _language;

        // If no translation is found, default to the system language
        if (componentAttributeGroupTranslation.Name == '')
        {
            select firstonly Name from componentAttributeGroupTranslation
            where   componentAttributeGroupTranslation.ComponentAttributeGroup  == this.RecId &&
                    componentAttributeGroupTranslation.Language                 == SystemParameters::getSystemLanguageId();
        }

        return componentAttributeGroupTranslation.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the table.
    /// </summary>
    /// <remarks>
    /// Ensure that the user interface order ID is given a correct number.
    /// </remarks>
    public void insert()
    {
        PCComponentAttributeGroup record;

        if (!this.uiOrder)
        {
            select maxof(uiOrder) from record
                where   record.ComponentControl == this.ComponentControl;

            this.uiOrder = record.uiOrder + 1;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUIOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move the display order of the element up or down.
    /// </summary>
    /// <param name="_up">
    /// A <c>NoYes</c> value that indicates whether the element should be moved up.
    /// </param>
    public void moveUIOrder(NoYes _up)
    {
        PCComponentAttributeGroup record;
        PCComponentAttributeGroup recordToBeUpdated;
        Integer                   uiOrder;

        recordToBeUpdated.data(this);

        if (_up == NoYes::Yes)
        {
            // find the UI order number just before the current record
            select maxof(uiOrder) from record
                where record.ComponentControl == this.ComponentControl &&
                      record.uiOrder    < recordToBeUpdated.uiOrder;
        }
        else
        {
            // find the UI order number just after the current record
            select minof(uiOrder) from record
                where record.ComponentControl == this.ComponentControl &&
                      record.uiOrder    > recordToBeUpdated.uiOrder;
        }

        if (record.uiOrder == 0)
        {
            // this is the first UI order
            return;
        }

        uiOrder = record.uiOrder;

        ttsbegin;

        select forupdate firstonly record
            where   record.ComponentControl == recordToBeUpdated.ComponentControl  &&
                    record.uiOrder          == uiOrder;

        // need to update to temporary value to avoid index violation
        record.uiOrder = -1;
        record.update();

        recordToBeUpdated = PCComponentAttributeGroup::find(this.RecId, true);
        recordToBeUpdated.uiOrder = uiOrder;
        recordToBeUpdated.update();

        record.uiOrder = (_up == NoYes::Yes) ? recordToBeUpdated.uiOrder + 1 : recordToBeUpdated.uiOrder - 1;
        record.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PCComponentAttributeGroup</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCComponentAttributeGroup::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCComponentAttributeGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCComponentAttributeGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentAttributeGroup find(RefRecId _recId, boolean _forupdate = false)
    {
        PCComponentAttributeGroup record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAttributeGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup that shows all attribute group names that are associated with a component.
    /// </summary>
    /// <param name="_lookupCtrl">
    /// A form string control.
    /// </param>
    /// <param name="_componentControlRecId">
    /// The record ID of the component.
    /// </param>
    static void lookupAttributeGroupName(
        FormStringControl   _lookupCtrl,
        RefRecId            _componentControlRecId
        )
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    dataSourcePrime;
        QueryBuildDataSource    dataSource;

        sysTableLookup = SysTableLookup::newParameters(tableNum(PCComponentAttributeGroupTranslation), _lookupCtrl);

        if (_componentControlRecId)
        {
            dataSourcePrime = query.addDataSource(tableNum(PCComponentAttributeGroupTranslation), tableStr(PCComponentAttributeGroupTranslation));
            dataSourcePrime.addRange(fieldNum(PCComponentAttributeGroupTranslation, Language)).value(queryValue(SystemParameters::getSystemLanguageId()));
            dataSource  = dataSourcePrime.addDataSource(tableNum(PCComponentAttributeGroup), tableStr(PCComponentAttributeGroup));
            dataSource.joinMode(JoinMode::InnerJoin);
            dataSource.addLink(fieldNum(PCComponentAttributeGroupTranslation, ComponentAttributeGroup), fieldNum(PCComponentAttributeGroup, RecId), tableStr(PCComponentAttributeGroupTranslation));
            dataSource.addRange(fieldNum(PCComponentAttributeGroup, ComponentControl)).value(queryValue(_componentControlRecId));
            sysTableLookup.addLookupfield(fieldNum(PCComponentAttributeGroupTranslation, Name));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAttributeGrpToCatAttributeRel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the relation between a component attribute group and a category attribute.
    /// </summary>
    /// <param name="_control">
    /// A reference to a component control.
    /// </param>
    /// <param name="_categoryAttribute">
    /// A reference to a category attribute.
    /// </param>
    /// <param name="_componentAttributeGroupName">
    /// The name of a component attribute group.
    /// </param>
    /// <returns>
    /// A <c>PCComponentAttributeGroup</c> record.
    /// </returns>
    public static PCComponentAttributeGroup writeAttributeGrpToCatAttributeRel(
        RefRecId        _control,
        RefRecId        _categoryAttribute,
        PCName          _componentAttributeGroupName)
    {
        PCComponentAttributeGroup               componentAttributeGroup;
        PCComponentAttributeGroupTranslation    componentAttributeGroupTranslation;
        PCComponentAttributeGroupCategoryAttr   relation;

        select firstonly RecId from componentAttributeGroup
            where   componentAttributeGroup.ComponentControl    == _control
            join RecId from componentAttributeGroupTranslation
                where   componentAttributeGroupTranslation.ComponentAttributeGroup  == componentAttributeGroup.RecId &&
                        componentAttributeGroupTranslation.Name                     == _componentAttributeGroupName  &&
                        componentAttributeGroupTranslation.Language                 == SystemParameters::getSystemLanguageId();

        if (componentAttributeGroup.RecId != 0)
        {
            ttsbegin;
            relation = PCComponentAttributeGroupCategoryAttr::findByComponentControlAndCategoryAttr(_control, _categoryAttribute, true);
            relation.CategoryAttribute          = _categoryAttribute;
            relation.ComponentAttributeGroup    = componentAttributeGroup.RecId;
            relation.UIOrder                    = PCComponentAttributeGroupCategoryAttr::nextUIOrderValue(componentAttributeGroup.RecId);
            relation.write();
            ttscommit;
        }
        else
        {
            error(strFmt("@SYS191495", _componentAttributeGroupName));
        }

        return componentAttributeGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS332820</DeveloperDocumentation>
	<Label>@SYS190609</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ComponentControl</TitleField1>
	<TitleField2>UIOrder</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ComponentOrder</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCComponentAttributeGroupCategoryAttr</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCComponentAttributeGroupCategoryAttr</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UIOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UIOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UIOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ComponentControl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS190608</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>UIOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PC</ConfigurationKey>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS69861</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ComponentOrder</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>PC</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UIOrder</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ComponentControl</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Control</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCComponentControl</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ControlContained</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UIGroupOf</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ComponentControl</Name>
					<Field>ComponentControl</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>