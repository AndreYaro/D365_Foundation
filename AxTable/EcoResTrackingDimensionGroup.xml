<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResTrackingDimensionGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResTrackingDimensionGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditCaptureSerial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>CaptureSerial</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditCaptureSerial()
    {
        EcoResTrackingDimensionGroupFldSetup    trackingDimensionGroupFldSetup;

        trackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.RecId, fieldNum(InventDim, InventSerialId));

        return !(trackingDimensionGroupFldSetup.RecId && trackingDimensionGroupFldSetup.IsSalesProcessActivated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditIsSerialNumberControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsSerialNumberControlled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditIsSerialNumberControlled()
    {
        EcoResTrackingDimensionGroupFldSetup    trackingDimensionGroupFldSetup;

        trackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.RecId, fieldNum(InventDim, InventSerialId));

        return !(trackingDimensionGroupFldSetup.RecId && trackingDimensionGroupFldSetup.IsSalesProcessActivated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks and fixes records in the <c>EcoResTrackingDimensionGroupFldSetup</c> table.
    /// </summary>
    /// <remarks>
    ///    If a record for a dimension does not exist in the <c>EcoResTrackingDimensionGroupFldSetup</c>
    ///    table, it is created. If a record exists, then the line number of the record is checked and fixed
    ///    if it does not match the position of a corresponding field in the <c>InventoryDimensions</c> field
    ///    group of the <c>InventDim</c> table.
    /// </remarks>
    void checkFixReference()
    {
        EcoResTrackingDimensionGroupFldSetup    trackingDimensionGroupFldSetup;
        ListEnumerator                          enumerator  = EcoResTrackingDimensionGroup::dimEnabledFieldList().getEnumerator();
        FieldId                                 dimFieldId;
        int                                     fieldNo;

        ttsbegin;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            fieldNo++;
            trackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.RecId, dimFieldId);

            if (trackingDimensionGroupFldSetup.RecId)
            {
                if (trackingDimensionGroupFldSetup.LineNumber != fieldNo)
                {
                    update_recordset trackingDimensionGroupFldSetup
                        setting LineNumber = fieldNo
                        where trackingDimensionGroupFldSetup.TrackingDimensionGroup == this.RecId
                           && trackingDimensionGroupFldSetup.DimensionFieldId       == dimFieldId;
                }
            }
            else
            {
                trackingDimensionGroupFldSetup.clear();
                trackingDimensionGroupFldSetup.DimensionFieldId     = dimFieldId;
                trackingDimensionGroupFldSetup.initValue();
                trackingDimensionGroupFldSetup.initFromTrackingDimensionGroup(this);
                trackingDimensionGroupFldSetup.LineNumber           = fieldNo;
                trackingDimensionGroupFldSetup.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record in the <c>EcoResTrackingDimensionGroup</c> table and creates related records in the <c>EcoResTrackingDimensionGroupFldSetup</c> table.
    /// </summary>
    void insert()
    {
        ttsbegin;

        super();

        this.checkFixReference();

        ttscommit;
        EcoResTrackingDimGroupSetupCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByItemWithTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether this tracking dimension group is used by any item that has created inventory
    ///    transactions.
    /// </summary>
    /// <returns>
    ///    true if any inventory transactions exist; otherwise, false.
    /// </returns>
    public boolean isUsedByItemWithTransactions()
    {
        EcoResTrackingDimensionGroupItem        ecoResTrackingDimensionGroupItem;
        InventTable                             inventTable;
        InventTrans                             inventTrans;

        select firstonly crosscompany RecId
            from ecoResTrackingDimensionGroupItem
                where ecoResTrackingDimensionGroupItem.TrackingDimensionGroup == this.RecId
            exists join inventTable
                where inventTable.DataAreaId        == ecoResTrackingDimensionGroupItem.ItemDataAreaId
                  &&  inventTable.ItemId            == ecoResTrackingDimensionGroupItem.ItemId
                exists join inventTrans
                    where inventTrans.ItemId        == inventTable.ItemId;

        if (   !ecoResTrackingDimensionGroupItem.RecId
            && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            WHSInventReserve inventReserve;

            select firstonly crosscompany RecId
                from ecoResTrackingDimensionGroupItem
                    where ecoResTrackingDimensionGroupItem.TrackingDimensionGroup == this.RecId
                exists join inventTable
                    where inventTable.DataAreaId == ecoResTrackingDimensionGroupItem.ItemDataAreaId
                      &&  inventTable.ItemId == ecoResTrackingDimensionGroupItem.ItemId
                    exists join inventReserve
                        where  inventReserve.ItemId == inventTable.ItemId
                            && inventReserve.AvailPhysical != 0;
        }

        return ecoResTrackingDimensionGroupItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByCatchWeightItemInNonRussianCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current tracking dimensiong group is used by a catch weight item in a non-Russian company.
    /// </summary>
    /// <returns>true if the current tracking dimensiong group is used by such item; otherwise, false</returns>
    public boolean isUsedByCatchWeightItemInNonRussianCompany()
    {
        #ISOCountryRegionCodes

        EcoResTrackingDimensionGroupItem        ecoResTrackingDimensionGroupItem;
        InventTable                             inventTable;
        EcoResProduct                           ecoResProduct;

        while select crossCompany ItemDataAreaId from ecoResTrackingDimensionGroupItem
            where ecoResTrackingDimensionGroupItem.TrackingDimensionGroup == this.RecId
            exists join inventTable
                where inventTable.ItemId        == ecoResTrackingDimensionGroupItem.ItemId
                    && inventTable.dataAreaId   == ecoResTrackingDimensionGroupItem.ItemDataAreaId
            exists join ecoResProduct
                where ecoResProduct.RecId           == inventTable.Product
                    && ecoResProduct.PdsCWProduct   == NoYes::Yes
        {
            if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], ecoResTrackingDimensionGroupItem.ItemDataAreaId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByWHSCatchWeightItemInWarehouseProcesses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current tracking dimension group is used by a warehouse management enabled catch weight item.
    /// </summary>
    /// <returns>true if the current tracking dimension group is used by such item; otherwise, false.</returns>
    public boolean isUsedByWHSCatchWeightItemInWarehouseProcesses()
    {
        EcoResTrackingDimensionGroupItem    ecoResTrackingDimensionGroupItem;
        InventTable                         inventTable;
        EcoResProduct                       ecoResProduct;
        WHSInventTable                      whsInventTable;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            while select crossCompany ItemDataAreaId from ecoResTrackingDimensionGroupItem
                where ecoResTrackingDimensionGroupItem.TrackingDimensionGroup == this.RecId
                exists join inventTable
                    where inventTable.ItemId        == ecoResTrackingDimensionGroupItem.ItemId
                       && inventTable.dataAreaId    == ecoResTrackingDimensionGroupItem.ItemDataAreaId
                exists join ecoResProduct
                    where ecoResProduct.RecId           == inventTable.Product
                       && ecoResProduct.PdsCWProduct    == NoYes::Yes
                exists join whsInventTable
                    where whsInventTable.ItemId == inventTable.ItemId
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByItemInNonRussianCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current tracking dimensiong group is used by an item in a non-Russian company.
    /// </summary>
    /// <returns>true if the current tracking dimensiong group is used by an item; otherwise, false</returns>
    public boolean isUsedByItemInNonRussianCompany()
    {
        #ISOCountryRegionCodes

        EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem;

        while select ItemDataAreaId from ecoResTrackingDimensionGroupItem
            where ecoResTrackingDimensionGroupItem.TrackingDimensionGroup == this.RecId
        {
            if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], ecoResTrackingDimensionGroupItem.ItemDataAreaId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForCWProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if the current EcoResTrackingDimensionGroup can be associated with a CW item.
    /// </summary>
    /// <returns>
    ///    true if the Tracking Dimension Group can be associatd with a CW Product, false otherwise.
    /// </returns>
    public boolean isValidForCWProduct()
    {
        boolean trackingDimensionValidForCW = true;

        if (#PdsCatchWeightEnabled)
        {
            EcoResTrackingDimensionGroupFldSetup serialNumberFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.RecId, fieldNum(InventDim, InventSerialId));

            if (serialNumberFldSetup.IsSalesProcessActivated)
            {
                error("@SYS4050061");
                trackingDimensionValidForCW = false;
            }
        }

        return trackingDimensionValidForCW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        EcoResTrackingDimensionGroupFldSetup fieldSetup;
        boolean writeSucceeded = true;

        if (this.orig().CaptureSerial != this.CaptureSerial)
        {
            select forupdate firstOnly fieldSetup
                where fieldSetup.TrackingDimensionGroup == this.RecId
                   && fieldSetup.DimensionFieldId == fieldNum(InventDim, InventSerialId);

            if (fieldSetup)
            {
                fieldSetup.initFromTrackingDimensionGroup(this);
                writeSucceeded = fieldSetup.validateWrite();
                if (writeSucceeded)
                {
                    fieldSetup.write();
                }
            }
        }

        if (writeSucceeded)
        {
            super();
            EcoResTrackingDimGroupSetupCache::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;
        EcoResTrackingDimensionGroup    origDimGroup = this.orig();

        // Dimensions cannot change if transactions already exist for tracking dimensions
        if (this.RecId
            && (this.IsSerialNumberControlEnabled != origDimGroup.IsSerialNumberControlEnabled
                || this.IsSerialAtConsumptionEnabled != origDimGroup.IsSerialAtConsumptionEnabled))
        {
            // record changed -> consistency check is not entering
            if (this.isUsedByItemWithTransactions())
            {
                this.data(origDimGroup);
                return checkFailed("@SYS97796");
            }

            EcoResTrackingDimensionGroupFldSetup trackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.RecId, fieldNum(InventDim, InventSerialId));
            ret = ret && trackingDimensionGroupFldSetup.checkFieldConstraint(trackingDimensionGroupFldSetup.IsSalesProcessActivated, this.IsSerialNumberControlEnabled, NoYes::Yes, "@SYS4050060", "@SYS68709");
        }

        // Serial at consumption policy cannot be checked unless capturing at picking or packing
        if (this.RecId
            && this.CaptureSerial == WHSWhenToCapture::None
            && this.IsSerialAtConsumptionEnabled)
        {
            this.IsSerialAtConsumptionEnabled = NoYes::No;
        }

        // Warehouse management enabled catch weight items do not support capturing serials at picking
        if (this.RecId
            && this.CaptureSerial != origDimGroup.CaptureSerial
            && (this.CaptureSerial == WHSWhenToCapture::Picking
                || this.CaptureSerial == WHSWhenToCapture::Packing)
            && this.isUsedByWHSCatchWeightItemInWarehouseProcesses())
        {
            return checkFailed(strFmt("@WAX:Error_WHSCWItemWhenToCaptureSerialValueNotSupported", this.CaptureSerial));
        }

        return ret && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixReferenceAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks and fixes records in the <c>EcoResTrackingDimensionGroupFldSetup</c> table for all tracking
    ///    dimension groups.
    /// </summary>
    /// <remarks>
    ///    See description of the <c>checkFixReference</c> method for more information.
    /// </remarks>
    static void checkFixReferenceAll()
    {
        EcoResTrackingDimensionGroup            trackingDimensionGroup;
        EcoResTrackingDimensionGroupFldSetup    trackingDimensionGroupFieldSetup;
        EcoResTrackingDimensionGroupFldSetup    trackingDimensionGroupFieldSetupDelete;
        Set                                     dimFields = InventDim::dimFieldList2Set(EcoResTrackingDimensionGroup::dimEnabledFieldList());

        ttsbegin;

        while select DimensionFieldId from trackingDimensionGroupFieldSetup
            group by DimensionFieldId
        {
            if (!dimFields.in(trackingDimensionGroupFieldSetup.DimensionFieldId))
            { // delete from all groups
                delete_from trackingDimensionGroupFieldSetupDelete
                    where trackingDimensionGroupFieldSetupDelete.DimensionFieldId == trackingDimensionGroupFieldSetup.DimensionFieldId;
            }
        }

        while select trackingDimensionGroup
        {
            trackingDimensionGroup.checkFixReference();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimEnabledFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of IDs of fields from the <c>InventDim</c> records that are enabled to be tracking
    ///    dimension fields.
    /// </summary>
    /// <returns>
    ///    A list of IDs.
    /// </returns>
    static public List dimEnabledFieldList()
    {
        return InventDim::dimTrackingDimEnabledFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResTrackingDimensionGroup</c> table.
    /// </summary>
    /// <param name="_trackingDimensionGroup">
    ///    The ID of the <c>EcoResTrackingDimensionGroup</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResTrackingDimensionGroup</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResTrackingDimensionGroup find(EcoResTrackingDimensionGroupRecId _trackingDimensionGroup, boolean _forUpdate = false)
    {
        EcoResTrackingDimensionGroup  ecoResTrackingDimensionGroup;

        ecoResTrackingDimensionGroup.selectForUpdate(_forUpdate);
        if (_trackingDimensionGroup)
        {
            select firstonly ecoResTrackingDimensionGroup
                where ecoResTrackingDimensionGroup.RecId == _trackingDimensionGroup;
        }
        return ecoResTrackingDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EcoResTrackingDimensionGroup</c> table.
    /// </summary>
    /// <param name="_dimensionGroupName">
    /// A dimension group name that will be used as a filter in the search.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether a buffer is selected for update.
    /// </param>
    /// <returns>
    /// An <c>EcoResTrackingDimensionGroup</c> buffer.
    /// </returns>
    static EcoResTrackingDimensionGroup findByDimensionGroupName(EcoResTrackingDimensionGroupName _dimensionGroupName, boolean _forUpdate = false)
    {
        EcoResTrackingDimensionGroup    ecoResTrackingDimensionGroup;

        ecoResTrackingDimensionGroup.selectForUpdate(_forUpdate);
        if (_dimensionGroupName)
        {
            select firstonly ecoResTrackingDimensionGroup
                where ecoResTrackingDimensionGroup.Name == _dimensionGroupName;
        }
        return ecoResTrackingDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the relevant maintenance form for the specified tracking dimension group.
    /// </summary>
    /// <param name="_trackingDimensionGroup">
    /// The tracking dimension group for which the form is opened.
    /// </param>
    static public void jumpRef(EcoResTrackingDimensionGroupRecId _trackingDimensionGroup)
    {
        Args                            args            = new Args();
        MenuFunction                    menuFunction;

        menuFunction = new MenuFunction(menuitemDisplayStr(EcoResTrackingDimensionGroup), MenuItemType::Display);
        args.lookupRecord(EcoResTrackingDimensionGroup::find(_trackingDimensionGroup));
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditSerialAtConsumptionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Indicates whether the <c>IsSerialAtConsumptionEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///  True if capturing serials at "Picking" or "Packing", false otherwise.
    /// </returns>
    public boolean allowEditSerialAtConsumptionEnabled()
    {
        return this.CaptureSerial != WHSWhenToCapture::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the lookup for tracking dimension group name so there is a dropdown.
    /// </summary>
    /// <param name="_ctrl">
    /// The <c>FormStringControl</c> that will use the lookup.
    /// </param>
    public static void lookup(FormStringControl _ctrl)
    {
        SysTableLookup  sysTableLookup;
        Query           query;

        sysTableLookup  = SysTableLookup::newParameters(tableNum(EcoResTrackingDimensionGroup), _ctrl);
        query           = new query();
        query.addDataSource(tableNum(EcoResTrackingDimensionGroup));

        sysTableLookup.addLookupfield(fieldNum(EcoResTrackingDimensionGroup, Name));
        sysTableLookup.addLookupfield(fieldNum(EcoResTrackingDimensionGroup, Description));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS312254</DeveloperDocumentation>
	<FormRef>EcoResTrackingDimensionGroup</FormRef>
	<Label>@SYS312273</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResTrackingDimensionGroupFldSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResTrackingDimensionGroupFldSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResTrackingDimensionGroupItem</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResTrackingDimensionGroupItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResTrackingDimensionGroupProduct</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResTrackingDimensionGroupProduct</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSerialNumberControlEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CaptureSerial</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS8811</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSerialNumberControlEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CaptureSerial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSerialAtConsumptionEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SerialNumberControl</Name>
			<Label>@SYS68709</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsSerialNumberControlEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CaptureSerial</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCaptureSerial</ExtendedDataType>
			<EnumType>WHSWhenToCapture</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSerialAtConsumptionEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimProdSerialConsumption</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSerialNumberControlEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimSerialNumberControl</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResTrackingDimensionGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>