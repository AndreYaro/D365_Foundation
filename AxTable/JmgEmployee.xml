<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgEmployee</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgEmployee extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>absenceTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a text that describes the workers current absence status.
    /// </summary>
    /// <returns>
    /// A string that describes the workers current absence status.
    /// </returns>
    /// <remarks>
    /// If no absence is planned for the worker today, an empty string is returned.
    /// </remarks>
    display JmgDescription absenceTxt()
    {
        #define.PreRegisterdAbsence(2)

        JmgAbsenceCalendar  jmgAbsenceCalendar;
        JmgDescription      absencetxt = '';

        if (this.isSignIn() == #PreRegisterdAbsence)
        {
            select firstonly jmgAbsenceCalendar
                    where jmgAbsenceCalendar.Worker       == this.Worker &&
                          jmgAbsenceCalendar.FromDateTime <= DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone()) &&
                          jmgAbsenceCalendar.ToDateTime   >= DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone()) &&
                          jmgAbsenceCalendar.Disabled     == NoYes::No;

            if (jmgAbsenceCalendar)
            {
                absencetxt      = jmgAbsenceCalendar.hrmAbsenceCodeDescription();
                absencetxt      = strFmt("@SYS39864",
                                        date2StrUsr(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(jmgAbsenceCalendar.FromDateTime,DateTimeUtil::getUserPreferredTimeZone())),    DateFlags::FormatAll),
                                        date2StrUsr(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(jmgAbsenceCalendar.ToDateTime,DateTimeUtil::getUserPreferredTimeZone())),      DateFlags::FormatAll),
                                        absencetxt);
            }
        }
        return absencetxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeRegs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the worker is currently registered as active on a job.
    /// </summary>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if the worker is currently active on a job; otherwise, a
    /// <c>NoYes::No</c> enumeration value.
    /// </returns>
    display JmgActiveRegs activeRegs()
    {
        NoYes activeRegs = ((select firstonly RecId from jmgTermReg
                                    where jmgTermReg.Worker     == this.Worker      &&
                                          jmgTermReg.JobActive  == NoYes::Yes       &&
                                          (jmgTermReg.RegType   == JmgTermRegType::JobStart     ||
                                           jmgTermReg.RegType   == JmgTermRegType::TeamStart    ||
                                           jmgTermReg.RegType   == JmgTermRegType::BrkFlowStart)).RecId ? NoYes::Yes :NoYes::No);
        return activeRegs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the approval group that the worker belongs to at the specified date.
    /// </summary>
    /// <param name="_profileDate">
    /// The profile date for which to retrieve the approval group association.
    /// </param>
    /// <returns>
    /// The approval group the worker is associated to at the specified date.
    /// </returns>
    public JmgGroupApproveId approveGroup(JmgProfileDate _profileDate)
    {
        JmgScheduledLoan    jmgScheduledLoan;

        jmgScheduledLoan = JmgScheduledLoan::find(this.Worker, _profileDate);

        if (jmgScheduledLoan && jmgScheduledLoan.GroupApproveId)
        {
            return jmgScheduledLoan.GroupApproveId;
        }
        return this.ApproveGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the calculation group that the worker belongs to at the specified date.
    /// </summary>
    /// <param name="_profileDate">
    /// The profile date to retrieve the calculation group association for.
    /// </param>
    /// <returns>
    /// The calculation group the worker is associated to at the specified date.
    /// </returns>
    public JmgGroupCalcId calcGroup(JmgProfileDate _profileDate)
    {
        JmgScheduledLoan    jmgScheduledLoan;

        jmgScheduledLoan = JmgScheduledLoan::find(this.Worker, _profileDate);

        if (jmgScheduledLoan && jmgScheduledLoan.GroupCalcId)
        {
            return jmgScheduledLoan.GroupCalcId;
        }
        return this.CalculateGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clockInDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest clock in date for the worker.
    /// </summary>
    /// <returns>
    /// the date where the worker clocked in.
    /// </returns>
    /// <remarks>
    /// If the worker is not currently clocked in, the null date is returned.
    /// </remarks>
    display JmgDate clockInDate()
    {
        boolean clockInState;
        JmgDate clockInDate;
        JmgProfileSeconds   profileSec;

        JmgTermCheckInOutState termCheck = new JmgTermCheckInOutState(this.Worker);
        profileSec          = new JmgProfileSeconds();

        clockInState = termCheck.getClockInStatus();
        if (clockInState)
        {
            clockInDate =DateTimeUtil::date(termCheck.getClockInDateTime());
            return clockInDate;
        }
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clockInTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest clock in time for the worker.
    /// </summary>
    /// <returns>
    /// The time where the worker clocked in.
    /// </returns>
    /// <remarks>
    /// If the worker is not currently clocked in, an empty string is returned.
    /// </remarks>
    display JmgTimeString clockInTime()
    {
        boolean clockInState;
        JmgTime clockInTime;
        JmgProfileSeconds   profileSec;

        JmgTermCheckInOutState termCheck = new JmgTermCheckInOutState(this.Worker);
        profileSec          = new JmgProfileSeconds();

        clockInState = termCheck.getClockInStatus();
        if (clockInState)
        {
            clockInTime = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(termCheck.getClockInDateTime(), DateTimeUtil::getOriginatingTimeZone(termCheck.getClockInDateTime())));
            return time2str(clockInTime,1,1);
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>flexBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the workers current flex balance.
    /// </summary>
    /// <returns>
    /// The workers current flex balance.
    /// </returns>
    display JmgLabelFlexBalance flexBalance()
    {
        JmgStampJournalTable    jmgStampJournalTable;
        JmgDate                 flexDate;

        flexDate = this.flexDate();
        if (flexDate)
        {
            select PayFlexBalanceSeconds from jmgStampJournalTable
                where jmgStampJournalTable.Worker      == this.Worker &&
                      jmgStampJournalTable.ProfileDate == flexDate;
        }
        else
        {
            return this.openingFlexBalance();
        }
        return JmgProfileSeconds::formattedSeconds(jmgStampJournalTable.PayFlexBalanceSeconds,JmgSecondPresentationEnum::Centitime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flexDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date that the flex balance is last calculated.
    /// </summary>
    /// <returns>
    /// The date that the flex balance is last calculated
    /// </returns>
    display JmgLabelFlexDate flexDate()
    {
        return (select maxof(ProfileDate) from jmgStampJournalTable
                    where jmgStampJournalTable.Worker      == this.Worker &&
                          jmgStampJournalTable.Transferred == NoYes::Yes).ProfileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flexMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the maximum allowed value of the flex balance of a worker.
    /// </summary>
    /// <returns>
    /// The maximum allowed value of the flex balance of a worker.
    /// </returns>
    public display JmgLabelFlexMax flexMax()
    {
        JmgFlexGroup jmgFlexGroup;
        jmgFlexGroup = JmgFlexGroup::find(this.FlexGroup);

        return jmgFlexGroup.maximumFlexBalance(false, "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>flexMin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the minimum allowed value of the flex balance of the worker.
    /// </summary>
    /// <returns>
    /// The minimum allowed value of the flex balance of the worker.
    /// </returns>
    public display JmgLabelFlexMin flexMin()
    {
        JmgFlexGroup jmgFlexGroup;
        jmgFlexGroup = JmgFlexGroup::find(this.FlexGroup);

        return jmgFlexGroup.minimumFlexBalance(false, "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.Active   = true;
        this.StopJobs = true;

        this.setPINCode('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the <c>JmgEmployee</c> table.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The worker referred to by the record does not exist in the <c>HcmWorker</c> table.
    /// </exception>
    public void insert()
    {
        if (!HcmWorker::exist(this.Worker))
        {
            throw error("@SYS8607");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSignIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the worker is currently clocked in, or has a planned absence.
    /// </summary>
    /// <returns>
    /// An integer that indicates the current clock in status of a worker.
    /// </returns>
    display JmgLabelSignedIn isSignIn()
    {
        #define.PreRegisterdAbsence(2)

        JmgLabelSignedIn    jmgLabelSignedIn = this.signedInNow();

        if ((! jmgLabelSignedIn) &&
            ((select firstonly jmgAbsenceCalendar
                    where jmgAbsenceCalendar.Worker       == this.Worker &&
                          jmgAbsenceCalendar.FromDateTime <= DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone()) &&
                          jmgAbsenceCalendar.ToDateTime   >= DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone()) &&
                          jmgAbsenceCalendar.Disabled     == NoYes::No).RecId))
        {
            jmgLabelSignedIn = #PreRegisterdAbsence;
        }

        return jmgLabelSignedIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the worker.
    /// </summary>
    /// <returns>
    /// The name of the worker
    /// </returns>
    display DirPartyName name()
    {
        return HcmWorker::worker2Name(this.Worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingFlexBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the opening balance of a worker.
    /// </summary>
    /// <returns>
    /// The opening flex balance for the worker.
    /// </returns>
    public display JmgLabelOpeningFlexBalance openingFlexBalance()
    {
        return JmgProfileSeconds::formattedSeconds(this.OpeningFlexBalanceSeconds, JmgSecondPresentationEnum::Centitime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>profileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the profile, which is used when the registrations of a worker are calculated.
    /// </summary>
    /// <param name="_date">
    /// The clock in date for the worker.
    /// </param>
    /// <param name="_time">
    /// The clock in time for the worker.
    /// </param>
    /// <returns>
    /// The profile that is used to calculate the registrations of a worker.
    /// </returns>
    /// <remarks>
    /// The profile is determined based on the clock in date and time for the worker.
    /// </remarks>
    JmgProfileId profileId(JmgDate _date, TimeOfDay _time = 0)
    {
        JmgProfileId            jmgProfileId;
        JmgProfileRelation      jmgProfileRelation;
        JmgProfileCalendar      jmgProfileCalendar;
        JmgDate                 startDate;
        JmgDate                 endDate;

        // Check profile calendar
        jmgProfileCalendar  = JmgProfileCalendar::find(this, _date);
        if (jmgProfileCalendar && jmgProfileCalendar.ProfileId)
        {
            jmgProfileId    = jmgProfileCalendar.ProfileId;
        }

        // Check profile group.
        if (!jmgProfileId && !prmisDefault(_time))
        {
            while select StartDate, EndDate, ProfileId
                from  jmgProfileRelation
                order by FromTime, ToTime, StartDate, EndDate
                where jmgProfileRelation.ProfileGroupId == this.ProfileGroupId &&
                      jmgProfileRelation.FromTime       <= _time               &&
                      jmgProfileRelation.ToTime         >= _time
            {
                if (!jmgProfileId)
                {
                    if (jmgProfileRelation.StartDate && jmgProfileRelation.EndDate)
                    {
                        startDate   = mkDate(dayOfMth(jmgProfileRelation.StartDate), mthOfYr(jmgProfileRelation.StartDate), year(_date));
                        endDate     = mkDate(dayOfMth(jmgProfileRelation.EndDate),   mthOfYr(jmgProfileRelation.EndDate),   year(_date));

                        if (_date >= startDate  &&
                            _date <= endDate)
                        {
                            jmgProfileId = jmgProfileRelation.ProfileId;
                            break;
                        }
                    }
                    else
                    {
                        jmgProfileId = jmgProfileRelation.ProfileId;
                        break;
                    }
                }
            }
        }

        // Use default.
        if (!jmgProfileId)
        {
            jmgProfileId    = this.DefaultProfileId;
        }
        return jmgProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest clock in date for the worker.
    /// </summary>
    /// <returns>
    /// The date that the worker clocked in.
    /// </returns>
    /// <remarks>
    /// If the worker is not currently clocked in, the null date is returned.
    /// </remarks>
    display JmgLabelSignedDate signedDate()
    {
        JmgProfileSeconds   profSec     = new JmgProfileSeconds();
        JmgTime             datetime    = JmgTermReg::getCurSignInTime(this.Worker);

        if (! this || ! datetime)
            return dateNull();

        return profSec.date(datetime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>signedInNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the worker is currently clocked in.
    /// </summary>
    /// <returns>
    /// true if the worker is currently signed in; otherwise, false.
    /// </returns>
    JmgLabelSignedIn signedInNow()
    {
        return JmgEmployee::signedIn(this.Worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>signedTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest clock in time for the worker.
    /// </summary>
    /// <returns>
    /// The time that the worker clocked in.
    /// </returns>
    /// <remarks>
    /// If the worker is not currently clocked in, an empty string is returned.
    /// </remarks>
    display JmgLabelSignedTime signedTime()
    {
        JmgProfileSeconds   profSec     = new JmgProfileSeconds();
        JmgTime             datetime    = JmgTermReg::getCurSignInTime(this.Worker);

        if (! this || ! datetime)
            return "";

        return JmgProfileSeconds::formattedSeconds(profSec.seconds(datetime),JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean             ret;
        ProjValCheckTrans   projValCheckTrans;
        ret = true;

        if (ret && this.FlexProfile == NoYes::Yes && !this.FlexGroup)
        {
            ret = checkFailed("@SYS39533");
        }

        if (ret && this.LoginCardNo && (select firstonly RecId from jmgEmployee
                                            where jmgEmployee.LoginCardNo == this.LoginCardNo &&
                                                  jmgEmployee.Worker      != this.Worker).RecId)

            ret = checkFailed(strFmt("@SYS40110",this.LoginCardNo));

        if (ret && this.ProjCategoryId)
        {
            projValCheckTrans = new ProjValCheckTrans();
            ret = projValCheckTrans.validateMandatory(this);
        }

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the dimension attribute value set, which is used for the worker at the specified profile date.
    /// </summary>
    /// <param name="_profileDate">
    /// The profile date for which the dimension attribute value set.
    /// </param>
    /// <returns>
    /// The dimension attribute value set, which is associated to the worker at the specified date.
    /// </returns>
    public DimensionDefault workerDimension(JmgProfileDate _profileDate)
    {
        JmgScheduledLoan jmgScheduledLoan;

        jmgScheduledLoan = JmgScheduledLoan::find(this.Worker, _profileDate);

        return jmgScheduledLoan.mergeDimension(HcmWorker::find(this.Worker).getDefaultDimension(
                                                                                                this.companyInfo()
                                                                                                .RecId)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPINCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypts PIN code and sets corresponding fields on JmgEmployee record.
    /// </summary>
    /// <param name="_pinCode">
    /// PIN code to set for employee.
    /// </param>
    public void setPINCode(str _pinCode)
    {
        const int pswdKeyGenFuncIterations = 1000;

        this.PINCodeIterations = pswdKeyGenFuncIterations;
        this.PINCodeSalt = CryptoServiceProvider::generateSalt();
        this.PINCodeHash = CryptoServiceProvider::computeSaltedHash(_pinCode, this.PINCodeSalt, this.PINCodeIterations);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePINCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to validate entered PIN code against a stored employee's PIN code.
    /// </summary>
    /// <param name="_pinCode">
    /// The entered PIN code we are validating.
    /// </param>
    /// <returns>
    /// true if the PIN code is valid for the user; otherwise false.
    /// </returns>
    public boolean validatePINCode(str _pinCode)
    {
        return CryptoServiceProvider::verifyPassword(
            _pinCode,
            this.PINCodeSalt,
            this.PINCodeHash,
            this.PINCodeIterations);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>JmgEmployee</c> record for the specified worker.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker to retrieve from the <c>JmgEmployee</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the returned record is selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>JmgEmployee</c> record for the specified worker.
    /// </returns>
    static JmgEmployee find(JmgWorkerRecId _worker, boolean  _forUpdate = false)
    {
        JmgEmployee    jmgEmployee;

        if (_worker)
        {
            jmgEmployee.selectForUpdate(_forUpdate);

            select firstonly jmgEmployee
                where jmgEmployee.Worker == _worker;
        }

        return jmgEmployee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCardNo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>JmgEmployee</c> record for the specified card number.
    /// </summary>
    /// <param name="_cardId">
    /// The card number of the worker to retrieve from the <c>JmgEmployee</c> table.
    /// </param>
    /// <returns>
    /// A <c>JmgEmployee</c> record for the specified card number.
    /// </returns>
    static JmgEmployee findCardNo(JmgTermLoginCardNo _cardId)
    {
        JmgEmployee    jmgEmployee;

        select firstonly jmgEmployee
                where  jmgEmployee.LoginCardNo == _cardId;

        return jmgEmployee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPersonnelNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>JmgEmployee</c> record for the specified personnel number.
    /// </summary>
    /// <param name="_personnelNumberId">
    /// The personel number of the worker to retrieve from the <c>JmgEmployee</c> table.
    /// </param>
    /// <returns>
    /// A <c>JmgEmployee</c> record for the specified personnel number.
    /// </returns>
    public static JmgEmployee findPersonnelNumber(HcmPersonnelNumberId _personnelNumberId)
    {
        JmgEmployee employee;
        HcmWorker worker;

        select firstonly employee
                join Tableid from worker
                where worker.RecId == employee.Worker
                   && worker.PersonnelNumber == _personnelNumberId;

        return employee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPilot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified worker is currently a pilot.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker.
    /// </param>
    /// <returns>
    /// true if the worker is currently a pilot; otherwise, false.
    /// </returns>
    static boolean isPilot(JmgWorkerRecId _worker)
    {
        return (select firstonly jmgTermReg
                    where jmgTermReg.WorkerPilot  == _worker                    &&
                          jmgTermReg.RegType      == JmgTermRegType::TeamStart  &&
                          jmgTermReg.JobActive    == NoYes::Yes).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlexProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determine if the employee is eligible for flex.
    /// </summary>
    /// <returns>
    ///     true, if the employee is flex enabled.
    /// </returns>
    public boolean isFlexProfile()
    {
        return (this.FlexProfile == NoYes::Yes && this.FlexGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCalcApproveWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup of the workers that are created as registration workers for use in the <c>JmgCalcApprove</c> Form.
    /// </summary>
    /// <param name="_formControl">
    /// The form control for which the lookup is performed.
    /// </param>
    /// <param name="jmgGroupCalcId">
    /// A Text value that indicates the calculation group that registration workers is part of; optional.
    /// </param>
    /// <param name="jmgGroupApproveId">
    /// A Text value that indicates the approval group that registration workers is part of; optional.
    /// </param>
    /// <param name="_activeFromDate">
    /// A Date value that indicates the active from range of registration workers; optional.
    /// </param>
    /// <remarks>
    /// The lookup is based on the lookup that is provided by the <c>HcmWorkerLookup</c> class.A worker is
    /// included in the lookup if a record exists in the <c>JmgEmployee</c> table for the worker.
    /// If the <paramref name="jmgGroupCalcId" /> parameter is set, a range is added for that group.
    /// If the <paramref name="jmgGroupApproveId" /> parameter is set, a range is added for that group.
    /// If the <paramref name="_activeFromDate" /> parameter is set, a range is added using that date, else default date is today.
    /// </remarks>
    public static void lookupCalcApproveWorker(FormControl _formControl, JmgGroupCalcId jmgGroupCalcId = '', JmgGroupApproveId jmgGroupApproveId = '', JmgProfileDate _activeFromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        HcmWorkerLookup         workerLookup    = HcmWorkerLookup::newCustomOptions(true, true, true, false, true, true, false, true, true);
        Query                   query           = workerLookup.updateQuery();
        QueryBuildDataSource    qbdsWorker      = query.dataSourceTable(tableNum(HcmWorker));
        QueryBuildDataSource    qbdsJmgEmployee = qbdsWorker.addDataSource(tableNum(JmgEmployee));

        qbdsJmgEmployee.joinMode(JoinMode::ExistsJoin);
        qbdsJmgEmployee.addLink(fieldNum(HcmWorker, RecId), fieldNum(JmgEmployee, Worker));
        qbdsJmgEmployee.addRange(fieldNum(JmgEmployee, ActiveFrom)).value(queryRange(dateNull(), _activeFromDate));

        // Select only active employees or who have registered hours
        QueryBuildDataSource qbdsJmgStampJournalTrans = JmgEmployee::addQueryRangeForActiveOrTimeRegisteredEmployees(qbdsJmgEmployee);
        qbdsJmgStampJournalTrans.addRange(fieldNum(JmgStampJournalTrans, ProfileDate)).value(queryRange(DateTimeUtil::addDays(_activeFromDate, -6), _activeFromDate));

        if (jmgGroupCalcId)
        {
            qbdsJmgEmployee.addRange(fieldNum(JmgEmployee, CalculateGroupId)).value(queryValue(jmgGroupCalcId));
        }
        else
        if (jmgGroupApproveId)
        {
            qbdsJmgEmployee.addRange(fieldNum(JmgEmployee, ApproveGroupId)).value(queryValue(jmgGroupApproveId));
        }

        workerLookup.lookupWorker(_formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueryRangeForActiveOrTimeRegisteredEmployees</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a condition to the employees data source: select all active employees and employees who have registered hours.
    /// Using this returned query remember add conditions (depending on caller form):
    ///    1) ProfileDate value or ProfileDate range;
    ///    2) other conditions that are necessary.
    /// </summary>
    /// <param name = "_jmgEmployeeDataSource">
    ///     JmgEmployee_ds.
    /// </param>
    /// <returns>
    ///     The query range like:
    ///     ...
    ///     FROM JmgEmployee as T1
    ///          LEFT OUTER JOIN JmgStampJournalTrans as T2 on (T1.Worker=T2.Worker)
    ///     WHERE (T1.ACTIVE = 1 OR T2.RECID <> 0)
    /// </returns>
    internal static QueryBuildDataSource addQueryRangeForActiveOrTimeRegisteredEmployees(QueryBuildDataSource _jmgEmployeeDataSource)
    {
        QueryBuildDataSource qbdsJmgStampJournalTrans = _jmgEmployeeDataSource.addDataSource(tableNum(JmgStampJournalTrans));
        qbdsJmgStampJournalTrans.relations(false);
        qbdsJmgStampJournalTrans.joinMode(JoinMode::OuterJoin);
        qbdsJmgStampJournalTrans.addLink(fieldNum(JmgEmployee, Worker), fieldNum(JmgStampJournalTrans, Worker));

        // Select all active employees and employees who have rows in JmgStampJournalTrans
        // SQL: (JmgEmployee.ACTIVE = 1) OR (JmgStampJournalTrans.RECID <> 0)
        _jmgEmployeeDataSource.addRange(fieldNum(JmgEmployee, Active)).value(queryValue(NoYes::Yes));
        _jmgEmployeeDataSource.addRange(fieldNum(JmgEmployee, Active)).value(
        strFmt('(%1.%2 != %3)', qbdsJmgStampJournalTrans.name(), fieldStr(JmgStampJournalTrans, RecId), nullValueFromType(Types::Int64)));

        return qbdsJmgStampJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRegistrationWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup of the workers that are created as registration workers.
    /// </summary>
    /// <param name="_formControl">
    /// The form control for which the lookup is performed.
    /// </param>
    /// <param name="_activeRegistrationWorkersOnly">
    /// A Boolean value that indicates whether only active registration workers are to be displayed in the
    /// lookup; optional.
    /// </param>
    /// <param name="_activeFromDate">
    /// The date for which to check whether the worker is active as a registration worker; optional.
    /// </param>
    /// <param name="_timecardWorkersOnly">
    /// A Boolean value that indicates whether only registration workers who are allowed to use the
    /// electronic timecard should be displayed; optional.
    /// </param>
    /// <remarks>
    /// The lookup is based on the lookup that is provided by the <c>HcmWorkerLookup</c> class.A worker is
    /// included in the lookup if a record exists in the <c>JmgEmployee</c> table for the worker.If the
    /// <paramref name="_activeRegistrationWorkersOnly" /> parameter is set, a worker is included on the
    /// lookup if the <c>Active</c> field on the <c>JmgEmployee</c> record is set to <c>NoYes::Yes</c>, and
    /// if the <c>ActiveFrom</c> field on the <c>JmgEmployee</c> record is a date before the specified
    /// <paramref name="_activeFromDate" /> parameter.If the <paramref name="_timecardWorkersOnly" />
    /// parameter is set, a worker is included in the lookup if the <c>UseTimecard</c> field on the
    /// <c>JmgEmployee</c> record is set to <c>NoYes::Yes</c>.
    /// </remarks>
    public static void lookupRegistrationWorker(FormControl _formControl, boolean _activeRegistrationWorkersOnly = false, JmgProfileDate _activeFromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), boolean _timecardWorkersOnly = false)
    {
        HcmWorkerLookup         workerLookup    = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany();
        Query                   q               = workerLookup.updateQuery();
        QueryBuildDataSource    qbdsWorker      = q.dataSourceTable(tableNum(HcmWorker));
        QueryBuildDataSource    qbdsJmgEmployee = qbdsWorker.addDataSource(tableNum(JmgEmployee));

        qbdsJmgEmployee.joinMode(JoinMode::ExistsJoin);
        qbdsJmgEmployee.addLink(fieldNum(HcmWorker, RecId), fieldNum(JmgEmployee, Worker));
        if (_activeRegistrationWorkersOnly)
        {
            qbdsJmgEmployee.addRange(fieldNum(JmgEmployee, Active)).value(queryValue(NoYes::Yes));
            qbdsJmgEmployee.addRange(fieldNum(JmgEmployee, ActiveFrom)).value(queryRange(dateNull(), _activeFromDate));
        }
        if (_timecardWorkersOnly)
        {
            qbdsJmgEmployee.addRange(fieldNum(JmgEmployee, UseTimecard)).value(queryValue(NoYes::Yes));
        }
        workerLookup.lookupWorker(_formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>signedIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether the specified worker is currently clocked in.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker
    /// </param>
    /// <returns>
    /// true if the worker is currently clocked in; otherwise, false.
    /// </returns>
    static boolean signedIn(JmgWorkerRecId _worker)
    {
        return (JmgTermReg::getCurSignInTime(_worker) ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRegistrationWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method validates whether the specified worker is a registration worker.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker to validate.
    /// </param>
    /// <param name="_activeRegistrationWorkersOnly">
    /// true if the specified worker must be an active registration workers; otherwise, the default value
    /// is false.
    /// </param>
    /// <param name="_activeFromDate">
    /// The date to check whether the worker is active as a registration worker; optional.
    /// </param>
    /// <param name="_timecardWorkersOnly">
    /// true if the specified worker must be able to use the electronic timecard; otherwise, the default
    /// value is false.
    /// </param>
    /// <returns>
    /// true if the specified worker is a registration worker; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A worker is considered a registration worker if a record exists in the <c>JmgEmployee</c> table for
    /// the worker. A worker is considered an active registration worker if the active field on the
    /// <c>JmgEmployee</c> record is set to <c>NoYes::Yes</c>, and if the <c>ActiveFrom</c> field on the
    /// <c>JmgEmployee</c> record is a date before the specified <paramref name="_activeFromDate" />
    /// parameter. A worker is considered an electronic timecard worker if the <c>UseTimecard</c> field on
    /// the <c>JmgEmployee</c> record is set to <c>NoYes::Yes</c>.
    /// </remarks>
    public static boolean validateRegistrationWorker(JmgWorkerRecId _worker, boolean _activeRegistrationWorkersOnly = false, JmgProfileDate _activeFromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), boolean _timecardWorkersOnly = false)
    {
        HcmWorkerLookup         workerLookup    = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany();
        Query                   q               = workerLookup.updateQuery();
        QueryBuildDataSource    qbdsWorker      = q.dataSourceTable(tableNum(HcmWorker));
        QueryBuildDataSource    qbdsJmgEmployee = qbdsWorker.addDataSource(tableNum(JmgEmployee));
        boolean                 validatedOk     = false;

        qbdsJmgEmployee.joinMode(JoinMode::ExistsJoin);
        qbdsJmgEmployee.addLink(fieldNum(HcmWorker, RecId), fieldNum(JmgEmployee, Worker));
        if (_activeRegistrationWorkersOnly)
        {
            qbdsJmgEmployee.addRange(fieldNum(JmgEmployee, Active)).value(queryValue(NoYes::Yes));
            qbdsJmgEmployee.addRange(fieldNum(JmgEmployee, ActiveFrom)).value(queryRange(dateNull(), _activeFromDate));
        }
        if (_timecardWorkersOnly)
        {
            qbdsJmgEmployee.addRange(fieldNum(JmgEmployee, UseTimecard)).value(queryValue(NoYes::Yes));
        }
        validatedOk = workerLookup.validateWorker(_worker);

        if (!validatedOk && _timecardWorkersOnly)
        {
            validatedOk = checkFailed(strFmt("@SYS39913", HcmWorker::find(_worker).PersonnelNumber));
        }
        else if (!validatedOk)
        {
             validatedOk = checkFailed(strFmt("@SYS39817", HcmWorker::find(_worker).PersonnelNumber));
        }
        return validatedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker</Name>
				<Source><![CDATA[
    public HcmWorker HcmWorker(HcmWorker _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('HcmWorker');
        }
        else
        {
            return this.setLink('HcmWorker', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgRegistrationEmployees</ConfigurationKey>
	<DeveloperDocumentation>@SYS317238</DeveloperDocumentation>
	<FormRef>HcmWorker</FormRef>
	<Label>@SYS319111</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>CalculateGroupId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>HcmWorkerIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>HcmWorkerIdx</PrimaryIndex>
	<ReplacementKey>HcmWorkerIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgAbsenceCalendar</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgAbsenceCalendar</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgStampJournalTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JmgStampJournalTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgStampJournalTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JmgStampJournalTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgStampTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JmgStampTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApproveGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayAgreement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FlexProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SeniorityDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmplExportId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActiveFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Active</Name>
			<Label>@SYS15744</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>signedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>signedTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>activeRegs</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Filter</Name>
			<Label>@SYS35881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FilterEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterInventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterProdUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterWrkCtrId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Flextime</Name>
			<Label>@SYS38566</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FlexGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmplExportId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoginCardNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoginCardVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payroll</Name>
			<Label>@SYS2694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayAgreement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SeniorityDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPeriodId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS26269</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActiveFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApproveGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopJobs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseTimecard</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationSetupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromptForAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultCalculateGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24676</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ActiveFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS54971</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApproveGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgGroupApproveId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalculateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgGroupCalcId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultCalculateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgGroupCalcId</ExtendedDataType>
			<Label>@SYS322112</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS38567</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmplExportId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgEmplExportId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FilterEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS109876</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FilterInventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FilterProdUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdUnitId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FilterWrkCtrId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FlexGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgFlexGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FlexProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS38505</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoginCardNo</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgTermLoginCardNo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoginCardVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTermLoginCardVersion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OpeningFlexBalanceSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayAgreement</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProfileGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPeriodId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PromptForAction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS304383</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegistrationSetupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgRegistrationSetupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SeniorityDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS38555</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StopJobs</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS38509</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseTimecard</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS39872</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PINCodeHash</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgEmployeePINCodeHash</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PINCodeIterations</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgEmployeePINCodeIterations</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PINCodeSalt</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgEmployeePINCodeSalt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PINCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>JmgPINCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SetFilters</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:JmgSetFitlersHelptext</HelpText>
			<Label>@SCM:JmgSetFiltersLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjPeriodTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjPeriodId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ApproveGroupId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgGroupApprove</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ApprovalGroups</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ApprovalGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApproveGroupId</Name>
					<Field>ApproveGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultJmgGroupCalc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>JmgGroupCalc</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultCalculateGroupId</Name>
					<SourceEDT>JmgGroupCalcId</SourceEDT>
					<Field>DefaultCalculateGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Group</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgGroupCalc</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CalculationGroups</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CalculationGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalculateGroupId</Name>
					<Field>CalculateGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgEmployee</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterInventSiteId</Name>
					<Field>FilterInventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgFlexGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgFlexGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FlexGroup</Name>
					<Field>FlexGroup</Field>
					<RelatedField>FlexGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FlexGroupIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgPayAgreementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgPayAgreementTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayAgreement</Name>
					<Field>PayAgreement</Field>
					<RelatedField>PayAgreement</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AgreementIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgProfileTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgProfileTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultProfileId</Name>
					<Field>DefaultProfileId</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgRegistrationSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgRegistrationSetup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RegistrationSetupId</Name>
					<Field>RegistrationSetupId</Field>
					<RelatedField>SetupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SetupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdUnitTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdUnitTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterProdUnitId</Name>
					<Field>FilterProdUnitId</Field>
					<RelatedField>ProdUnitId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdUnitIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProfileGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgProfileGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProfileGroups</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProfileGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileGroupId</Name>
					<Field>ProfileGroupId</Field>
					<RelatedField>ProfileGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjPeriodTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgEmployee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPeriodId</Name>
					<Field>ProjPeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResourceWrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceWrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgEmployee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterWrkCtrId</Name>
					<Field>FilterWrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>