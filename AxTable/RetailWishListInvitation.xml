<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailWishListInvitation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailWishListInvitation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SendInvitation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the invitation based on type.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Invitation type is not supported.
    /// </exception>
    public void SendInvitation()
    {
        boolean result = false;

        // send invitation by type
        switch (this.Type)
        {
            case RetailWishListInvitationType::Public:
                // Public invitation does not send anything.
                result = true;
                break;
            case RetailWishListInvitationType::Email:
                // Send email invitation
                result = this.SendInvitationByEmail();
                break;

            default:
                throw error(strFmt("Invitation type '%1' is not supported.", enum2str(this.Type)));
        }

        // Update sent flag
        if (result)
        {
            this.LastSentDateTime = DateTimeUtil::utcNow();
            this.IsSent = FalseTrue::True;
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SendInvitationByEmail</Name>
				<Source><![CDATA[
    private boolean SendInvitationByEmail()
    {
        SysEmailParameters emailParameters;
        RetailParameters retailParameters;
        RetailWishListTable list;
        CustTable custTable;

        boolean result = false;
        Map mappings;

        select firstonly SMTPRelayServerName from emailParameters;
        select firstOnly WishListInvitationEmailId from retailParameters;

        // Do not send email if SMTP server is not configured or email id is not set.
        if (emailParameters.SMTPRelayServerName && retailParameters.WishListInvitationEmailId)
        {
            // Find list
            list = RetailWishListTable::find(this.WishListId, false);

            // Find the owner
            custTable = CustTable::find(list.CustomerId);

            // Get customer (list owner) language

            // Prepare mapping values for email
            mappings = new Map(Types::String, Types::String);
            mappings.insert('Owner', custTable.name());
            mappings.insert('CompanyName', CompanyInfo::find().Name);
            mappings.insert('ListName', list.Name);
            mappings.insert('Token', guid2str(this.Token));

            // Send email
            SysEmailTable::sendMail(retailParameters.WishListInvitationEmailId, custTable.languageId(), this.Invitee, mappings);
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvitation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the invitation.
    /// </summary>
    /// <returns>
    /// The container [result, error].
    /// </returns>
    private container validateInvitation()
    {
        boolean ret = true;
        str error = '';
        RetailWishListTable wishlistTable;

        wishlistTable = RetailWishListTable::find(this.WishListId, false);

        // Validate
        if (wishlistTable.IsPrivate)
        {
            if (wishlistTable.IsCollaborative)
            {
                // Collaborative list
                if (this.Type == RetailWishListInvitationType::Public)
                {
                    ret = false;
                    error = strFmt("Wrong invitation type '%1'.", enum2str(this.Type));
                }
                else if (!this.Invitee)
                {
                    ret = false;
                    error = "Invitee is required for collaborative list.";
                }
            }
            else
            {
                // Private list
                ret = false;
                error = strFmt("You cannot create an invitation for private wish list '%1'", wishlistTable.Name);
            }
        }
        else
        {
            // Public list
            if (this.Type != RetailWishListInvitationType::Public)
            {
                ret = false;
                error = "Invitation type must be 'Public' for public list.";
            }
        }

        return [ret, error];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        str error;

        ret = super();

        // Validate
        if (ret)
        {
            [ret, error] = this.validateInvitation();
        }

        if (!ret)
        {
            checkFailed(error);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AcceptInvitation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts the invitation.
    /// </summary>
    /// <param name="token">
    /// The invitation token.
    /// </param>
    /// <param name="customerAccount">
    /// The accepting customer.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Authentication error.
    /// </exception>
    public static void AcceptInvitation(RetailWishListInvitationToken token, CustAccount customerAccount)
    {
        RetailWishListInvitation invitation;
        RetailWishListContributor contributor;
        boolean isAuthenticated = false;

        ttsBegin;

        invitation = RetailWishListInvitation::FindByToken(token, true);

        if (invitation)
        {
            // Authentication
            switch (invitation.Type)
            {
                case RetailWishListInvitationType::Public:
                    isAuthenticated = true;
                    break;
                case RetailWishListInvitationType::Email:
                    isAuthenticated = RetailWishListInvitation::AnthenticateByEmail(customerAccount, invitation.Invitee);
                    break;
                default:
                    isAuthenticated = false;
                    break;
            }
        }

        if (isAuthenticated)
        {
            // Add contributor
            contributor = RetailWishListContributor::FindByIds(invitation.WishListId, customerAccount);

            if (!contributor)
            {
                contributor.WishListId = invitation.WishListId;
                contributor.CustomerId = customerAccount;
                contributor.Invitation = invitation.RecId;
                contributor.insert();
            }

            if (invitation.Status != RetailWishListInvitationStatus::Accepted)
            {
                invitation.Status = RetailWishListInvitationStatus::Accepted;
                invitation.update();
            }
        }
        else
        {
            throw error("Failed to accept invitation.");
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AnthenticateByEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Authenticates customer by email.
    /// </summary>
    /// <param name="customerNumber">
    /// The customer account number.
    /// </param>
    /// <param name="invitee">
    /// The email address of the invited person.
    /// </param>
    /// <returns>
    /// The result.
    /// </returns>
    private static boolean AnthenticateByEmail(CustAccount customerNumber, RetailWishListInvitee invitee)
    {
        CustTable               custTable;
        DirPartyLocation        partyLocation;
        LogisticsLocation           logisticsLocation;
        LogisticsElectronicAddress  electronicAddress;

        boolean result = false;

        if (customerNumber && invitee)
        {
            while select Locator from electronicAddress
                    where electronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                exists join logisticsLocation
                    where logisticsLocation.RecId == electronicAddress.Location
                exists join partyLocation
                    where partyLocation.Location == electronicAddress.Location
                       && partyLocation.IsPostalAddress == 0
                exists join custTable
                    where custTable.Party == partyLocation.Party
                       && custTable.AccountNum == customerNumber
            {
                if (electronicAddress.Locator == invitee)
                {
                    result = true;
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateOrRecreateInvitation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or recreates an invitation.
    /// </summary>
    /// <param name="wishlist">
    /// The wish list ID.
    /// </param>
    /// <param name="invitationType">
    /// The invitation type.
    /// </param>
    /// <param name="invitee">
    /// The contact of the person who is invited.
    /// </param>
    /// <returns>
    /// The created invitation record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Invitation validation error for create.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Invitation validation error for recreate.
    /// </exception>
    public static RetailWishListInvitation CreateOrRecreateInvitation(RefRecId wishlist, RetailWishListInvitationType invitationType, RetailWishListInvitee invitee)
    {
        RetailWishListInvitation invitation;
        boolean ret;
        str error;

        ttsBegin;

        invitation = RetailWishListInvitation::FindByInvitee(wishlist, invitationType, invitee, true);

        if (invitation)
        {
            // Validate and resend
            [ret, error] = invitation.validateInvitation();

            if (ret)
            {
                // Resend the invitation
                if (invitation.Type != RetailWishListInvitationType::Public)
                {
                    invitation.IsSent = FalseTrue::False;
                }

                invitation.LastRequestDateTime = DateTimeUtil::utcNow();
                invitation.update();
            }
            else
            {
                throw error(error);
            }
        }
        else
        {
            // Prepare a new invitation
            invitation.WishListId = wishlist;
            invitation.Type = invitationType;
            invitation.Invitee = invitee;
            invitation.Token = RetailWishListInvitation::NewToken();
            invitation.Status = RetailWishListInvitationStatus::Pending;
            invitation.IsSent = FalseTrue::False;
            invitation.LastRequestDateTime = DateTimeUtil::utcNow();

            // Validate and insert
            [ret, error] = invitation.validateInvitation();

            if (ret)
            {
                invitation.insert();
            }
            else
            {
                throw error(error);
            }
        }

        ttsCommit;

        return invitation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindByInvitee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an invitation record by the invitee.
    /// </summary>
    /// <param name="wishlist">
    /// The wish list id.
    /// </param>
    /// <param name="invitationType">
    /// The invitation type.
    /// </param>
    /// <param name="invitee">
    /// The contact of the person who are invited.
    /// </param>
    /// <param name="update">
    /// The flag indicating whether to select the record for update.
    /// </param>
    /// <returns>
    /// The found record.
    /// </returns>
    public static RetailWishListInvitation FindByInvitee(RefRecId wishlist, RetailWishListInvitationType invitationType, RetailWishListInvitee invitee, boolean update = false)
    {
        RetailWishListInvitation invitation;

        if (wishlist)
        {
            invitation.selectForUpdate(update);
            select firstonly invitation
        where invitation.WishListId == wishlist
           && invitation.Type == invitationType
           && invitation.Invitee == invitee;
        }

        return invitation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindByToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an invitation record by the token.
    /// </summary>
    /// <param name="token">
    /// The invitation token.
    /// </param>
    /// <param name="update">
    /// The flag indicating whether to select the record for update.
    /// </param>
    /// <returns>
    /// The found record.
    /// </returns>
    public static RetailWishListInvitation FindByToken(RetailWishListInvitationToken token, boolean update = false)
    {
        RetailWishListInvitation invitation;

        invitation.selectForUpdate(update);

        select firstonly invitation
        where invitation.Token == token;

        return invitation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>NewToken</Name>
				<Source><![CDATA[
    private static RetailWishListInvitationToken NewToken()
    {
        return newGuid();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@WishListLabels:Invitation</Label>
	<TitleField1>Invitee</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<Modules>Merchandising</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Invitee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastRequestDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invitee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWishListInvitee</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>Is sent</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>FalseTrue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastRequestDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreatedDateTime</ExtendedDataType>
			<Label>Invitation date time</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastSentDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateTimeSent</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>RetailWishListInvitationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>Token</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWishListInvitationToken</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>RetailWishListInvitationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WishListId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Invitation</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Invitee</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WishListId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Token</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Token</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailWishListTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailWishListTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WishListId</Name>
					<Field>WishListId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>