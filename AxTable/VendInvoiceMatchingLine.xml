<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceMatchingLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceMatchingLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>expectedNetUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the expected net unit price.
    /// </summary>
    /// <returns>
    /// The expected net unit price.
    /// </returns>
    /// <remarks>
    /// The net unit price is determined by dividing the <c>ExpectedLineAmount</c> value by the
    /// <c>ExpectedQty</c> value. The value is intentionally not rounded for maximum precision.
    /// </remarks>
    public display NetUnitPrice expectedNetUnitPrice()
    {
        NetUnitPrice netUnitPrice;

        if (this.ExpectedQty == 0.0)
        {
            return 0.0;
        }

        netUnitPrice = this.ExpectedLineAmount / this.ExpectedQty;
        return netUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceTolerance</Name>
				<Source><![CDATA[
    private void getPriceTolerance(ItemId _itemId, CustVendAC _accountNum)
    {
        this.PriceTolerancePercentage = PurchPriceTolerance::find(_itemId,_accountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExpectedValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the expected values and the price tolerance percentage for a
    ///    <c>VendInvoiceMatchingLine</c> table, a <c>Purchline</c> table, and a lookup on the
    ///    <c>PriceTolerancePercentage</c> table.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> table from which to initialize.
    /// </param>
    /// <param name="_parmLine">
    ///    A line record from which to initialize.
    /// </param>
    /// <remarks>
    ///    Various fields are copied from the <c>PurchLine</c> table to the <c>VendInvoiceMatchingLine</c> and
    ///    <c>PriceTolerancePercentage</c> tables.
    /// </remarks>
    public void initExpectedValues(PurchLine _purchLine, VendInvoiceInfoLine _parmLine)
    {
        if (_purchLine.RecId != 0)
        {
            this.initFromPurchLine(_purchLine);
            this.getPriceTolerance(_purchLine.ItemId,_purchLine.VendAccount);
            this.setExtendendedPriceVarianceAmounts(_purchLine, _parmLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    protected void initFromPurchLine(PurchLine _purchLine)
    {
        if (_purchLine.RecId != 0)
        {
            this.ExpectedQty = _purchLine.PurchQty;
            this.ExpectedPrice = _purchLine.PurchPrice;
            this.ExpectedLinePercent = _purchLine.LinePercent;
            this.ExpectedLineDisc = _purchLine.LineDisc;
            this.ExpectedMultiLnDisc = _purchLine.MultiLnDisc;
            this.ExpectedMultiLnPercent = _purchLine.MultiLnPercent;
            this.ExpectedPriceUnit = _purchLine.PriceUnit;
            this.ExpectedMarkup = _purchLine.PurchMarkup;
            this.ExpectedLineAmount = _purchLine.LineAmount;
            this.ExpectedCurrencyCode = _purchLine.CurrencyCode;
            this.MatchingPolicy = _purchLine.MatchingPolicy;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExtendendedPriceVarianceAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the extended price expected values and price tolerance amount and
    ///    percentage for the current <c>VendInvoiceMatchingLine</c> record.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> table from which to initialize.
    /// </param>
    /// <param name="_parmLine">
    ///    The associated invoice line.
    /// </param>
    public boolean setExtendendedPriceVarianceAmounts(PurchLine _purchLine, VendDocumentLineMap _parmLine)
    {
        VendParameters vendParameters = VendParameters::find();
        PurchLineType purchLineType;
        container postedLineAmounts,pendingLineAmounts;
        LineAmount postedLineAmount, postedLineAmountMST, pendingLineAmount, pendingLineAmountMST, expectedLineAmount, expectedLineAmountMST;

        if (vendParameters.useExtendedPriceMatching() != ExtendedPriceMatching::None)
        {
            purchLineType = PurchLineType::construct(_purchLine);

            postedLineAmounts = purchLineType.invoicedInTotalAmount();
            postedLineAmount = conPeek(postedLineAmounts,1);
            postedLineAmountMST = conPeek(postedLineAmounts,2);

            pendingLineAmounts = _purchLine.calcPendingLineAmounts(_parmLine.TableRefId);
            pendingLineAmount = conPeek(pendingLineAmounts,1);
            pendingLineAmountMST = conPeek(pendingLineAmounts,2);

            PurchQty receivedQty = purchLineType.receivedInTotal();

            if(_purchLine.PurchQty)
            {
                expectedLineAmount = CurrencyExchangeHelper::amount(((receivedQty + _purchLine.RemainPurchPhysical) / _purchLine.PurchQty) * _purchLine.LineAmount, _purchLine.CurrencyCode);
            }
            
            this.ExtendedPriceVarianceAmount = postedLineAmount + pendingLineAmount - expectedLineAmount;
           
            AmountMST fullLineAmountMST = _purchLine.lineAmountMST(_purchLine.purchTable().AccountingDate);
 
            if(_purchLine.PurchQty)
            {
                expectedLineAmountMST = CurrencyExchangeHelper::amount(((receivedQty + _purchLine.RemainPurchPhysical) / _purchLine.PurchQty) * fullLineAmountMST);
            }

            this.ExtendedPriceVarianceAmountMST = postedLineAmountMST + pendingLineAmountMST - expectedLineAmountMST;

            if (_purchLine.inclTax())
            {
                container postedLineAmountTaxes = purchLineType.invoicedInTotalAmountTax();
                LineAmountTaxMST postedLineAmountTaxMST = conPeek(postedLineAmountTaxes, 2);

                // If the purchase order with the price includes tax and invoices partially (postedLineAmountMST != 0),
                // the ExtendedPriceVarianceAmountMST should contain posted tax amounts.
                this.ExtendedPriceVarianceAmountMST += postedLineAmountTaxMST;
            }

            this.ExtendedPriceToleranceAmount = vendParameters.ExtendedPriceToleranceAmount;
            this.ExtendedPriceTolerancePercentage = vendParameters.ExtendedPriceTolerancePercentage;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and persists values for a <c>VendInvoiceMatchingLine</c> table from a specified
    ///    <c>Purchline</c> and <c>PurchParmLine</c> tables.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> instance to initialize from.
    /// </param>
    /// <param name="_parmLine">
    ///    A line record to initialize from.
    /// </param>
    /// <remarks>
    ///    Various fields are copied from the <c>PurchLine</c> and <c>PurchParmLine</c> tables to the
    ///    <c>VendInvoiceMatchingLine</c> table.
    /// </remarks>
    public static void createFromPurchLine(PurchLine _purchLine, VendDocumentLineMap _parmLine)
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine;

        if (_parmLine.TableId && _parmLine.RecId && _purchLine)
        {
            vendInvoiceMatchingLine.clear();
            vendInvoiceMatchingLine.initExpectedValues(_purchLine, _parmLine);
            vendInvoiceMatchingLine.RefTableId = _parmLine.TableId;
            vendInvoiceMatchingLine.RefRecId = _parmLine.RecId;
            vendInvoiceMatchingLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether matching details exist for the invoice.
    /// </summary>
    /// <param name="_parmTable">
    /// A record that represents the invoice.
    /// </param>
    /// <returns>
    /// true if matching details exist for the invoice; otherwise, false.
    /// </returns>
    public static boolean existForInvoice(VendDocumentTableMap _parmTable)
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine;
        VendInvoiceInfoLine parmLine;

        select firstonly RecId from parmLine
            exists join vendInvoiceMatchingLine
                where parmLine.ParmId == _parmTable.ParmId
                    && parmLine.TableRefId == _parmTable.TableRefId
                    && vendInvoiceMatchingLine.RefTableId == parmLine.TableId
                    && vendInvoiceMatchingLine.RefRecId == parmLine.RecId;

        return parmLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>VendInvoiceMatchingLine</c> record for the specified reference table and reference
    ///    record IDs.
    /// </summary>
    /// <param name="_refTableId">
    ///    The table ID to search for.
    /// </param>
    /// <param name="_refRecId">
    ///    The record ID to search for.
    /// </param>
    /// <param name="_update">
    ///    A Boolean value that specifies whether to update the record; optional.
    /// </param>
    /// <returns>
    ///    A <c>VendInvoiceMatchingLine</c> record if found; otherwise, null.
    /// </returns>
    public static VendInvoiceMatchingLine find(RefTableId _refTableId, RefRecId _refRecId, boolean _update = false )
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine;

        if ((_refTableId !=0) && (_refRecId !=0))
        {
            if (_update)
            {
                vendInvoiceMatchingLine.selectForUpdate(_update);
            }

            select firstonly vendInvoiceMatchingLine
            where vendInvoiceMatchingLine.RefTableId == _refTableId
                && vendInvoiceMatchingLine.RefRecId == _refRecId;
        }

        return vendInvoiceMatchingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpectedValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates expected values for the invoice represented by the table buffer which is passed in.
    /// </summary>
    /// <param name="_parmTable">
    ///    The record that represents the invoice.
    /// </param>
    public static void updateExpectedValues(VendInvoiceInfoTable _parmTable)
    {
        VendInvoiceMatchingLine vendInvoiceMatchingLine;
        PriceTolerancePercentage priceTolerancePercentage;

        VendInvoiceInfoLine parmLine;
        PurchLine purchLine;
        boolean needsUpdate;

        update_recordset vendInvoiceMatchingLine
            setting
                ExpectedQty = purchLine.PurchQty,
                ExpectedPrice = purchLine.PurchPrice,
                ExpectedLinePercent = purchLine.LinePercent,
                ExpectedLineDisc = purchLine.LineDisc,
                ExpectedMultiLnDisc = purchLine.MultiLnDisc,
                ExpectedMultiLnPercent = purchLine.MultiLnPercent,
                ExpectedPriceUnit = purchLine.PriceUnit,
                ExpectedMarkup = purchLine.PurchMarkup,
                ExpectedLineAmount = purchLine.LineAmount,
                ExpectedCurrencyCode = purchLine.CurrencyCode,
                MatchingPolicy = purchLine.MatchingPolicy
            join parmLine
                where vendInvoiceMatchingLine.RefTableId == parmLine.TableId
                    && vendInvoiceMatchingLine.RefRecId == parmLine.RecId
                    && parmLine.ParmId == _parmTable.ParmId
                    && parmLine.TableRefId == _parmTable.TableRefId

            join purchLine
                where purchLine.InventTransId == parmLine.InventTransId
                    && !purchLine.IsDeleted;

        // update price tolerance percentage
        while select forupdate vendInvoiceMatchingLine
            join parmLine
                where vendInvoiceMatchingLine.RefTableId == parmLine.TableId
                    && vendInvoiceMatchingLine.RefRecId == parmLine.RecId
                    && parmLine.ParmId == _parmTable.ParmId
                    && parmLine.TableRefId == _parmTable.TableRefId

            join purchLine
                where purchLine.InventTransId == parmLine.InventTransId
                   && !purchLine.IsDeleted
        {
            needsUpdate = false;

            priceTolerancePercentage = vendInvoiceMatchingLine.PriceTolerancePercentage;
            vendInvoiceMatchingLine.getPriceTolerance(purchLine.ItemId, purchLine.VendAccount);

            if (vendInvoiceMatchingLine.PriceTolerancePercentage != priceTolerancePercentage)
            {
                needsUpdate = true;
            }

            needsUpdate = vendInvoiceMatchingLine.setExtendendedPriceVarianceAmounts(purchLine, parmLine) || needsUpdate;

            if (needsUpdate)
            {
                ttsbegin;
                vendInvoiceMatchingLine.update(); // update only if neccesary
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
	<DeveloperDocumentation>@SYS126183</DeveloperDocumentation>
	<Label>@SYS115394</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>ExpectedQty</TitleField1>
	<TitleField2>ExpectedLineAmount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RefIdx</PrimaryIndex>
	<ReplacementKey>RefIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpectedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedLineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedPriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedMultiLnPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedMultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedLinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceTolerancePercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ActualValues</Name>
			<Label>@SYS132530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExtendedPriceVarianceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtendedPriceVarianceAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExpectedValues</Name>
			<Label>@SYS115395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceTolerancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedLineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedPriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedMultiLnPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedMultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedLinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchingPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtendedPriceTolerancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtendedPriceToleranceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExpectedCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedLineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedLinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedMultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedMultiLnDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedMultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedPriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedPriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExtendedPriceToleranceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExtendedPriceToleranceAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExtendedPriceTolerancePercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExtendedPriceTolerancePercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExtendedPriceVarianceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExtendedPriceVarianceAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExtendedPriceVarianceAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExtendedPriceVarianceAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchingPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS129852</Label>
			<EnumType>PurchMatchingPolicyOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceTolerancePercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExpectedCurrencyCode</Name>
					<SourceEDT>ExpectedCurrencyCode</SourceEDT>
					<Field>ExpectedCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS126184</EntityRelationshipRole>
			<RelatedTable>PurchParmLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchParmLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendInvoiceMatchingLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS126185</EntityRelationshipRole>
			<RelatedTable>VendInvoiceInfoLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendInvoiceMatchingLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>