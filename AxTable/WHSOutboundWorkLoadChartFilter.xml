<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundWorkLoadChartFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSOutboundWorkLoadChartFilter extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSOutboundWorkLoadChartFilter</c> record with given parameter.
    /// </summary>
    /// <param name="_filterName">Filter name of the record.</param>
    /// <param name="_forupdate">Determines whether the record is selected for update.</param>
    /// <returns>The record that is searched for.</returns>
    [Hookable(false)]
    internal static WHSOutboundWorkLoadChartFilter find(WHSChartFilterName _filterName,
                                                      boolean _forupdate = false)
    {
        WHSOutboundWorkLoadChartFilter outboundWorkLoadChartFilter;

        if (_filterName)
        {
            outboundWorkLoadChartFilter.selectForUpdate(_forupdate);

            select firstOnly outboundWorkLoadChartFilter
                where outboundWorkLoadChartFilter.FilterName == _filterName;
        }

        return outboundWorkLoadChartFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query run based on the display level.
    /// </summary>
    /// <returns>The default query run.</returns>
    [Hookable(false)]
    internal QueryRun defaultQueryRun()
    {
        QueryRun queryRun;

        if (this.DisplayLevel == WHSChartDisplayLevel::OpenLines)
        {
            queryRun = new QueryRun(queryStr(WHSOutboundWorkLoadChartQuery));
        }
        else
        {
            queryRun = new QueryRun(queryStr(WHSOutboundWorkLoadWorkHeaderChartQuery));
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.XAxisGroupTableId = tableNum(WHSWorkTable);
        this.XAxisValueTableId = tableNum(WHSWorkTable);
        this.DaysToInclude = 1;
        this.PackedWorkTransType = WHSOutboundWorkLoadChartHelper::outboundWorkOrderTypeRange().pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WHSOutboundWorkLoadChartFilter, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
            case fieldStr(WHSOutboundWorkLoadChartFilter, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSOutboundWorkLoadChartFilter, InventLocationId):
                if (this.InventLocationId)
                {
                    ret = ret && this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                    if (!InventLocation::find(this.InventLocationId).whsEnabled)
                    {
                        ret = checkFailed("@WAX4825");
                    }
                }
                break;
            case fieldNum(WHSOutboundWorkLoadChartFilter, DisplayLevel):
                ret = ret && this.validateDisplayLevel();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDisplayLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that when Display level is set to open headers the X-Axis fields are configured with work header table.
    /// </summary>
    /// <returns>True, if display level and group/values tables are configured properly; otherwise, false.</returns>
    private boolean validateDisplayLevel()
    {
        if (this.DisplayLevel == WHSChartDisplayLevel::OpenHeaders)
        {
            if (this.XAxisGroupTableId != tableNum(WHSWorkTable)
                || this.XAxisValueTableId != tableNum(WHSWorkTable))
            {
                return checkFailed("@WAX:OutboundChartFilterValidateDisplayLevel");
            }

            if (this.PickingType != WHSChartPickingType::InitialAndStagedPicks)
            {
                return checkFailed("@WAX:OutboundChartFilterValidateDisplayLevelWithPickingType");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateXAxisTableAndField</Name>
				<Source><![CDATA[
    private boolean validateXAxisTableAndField()
    {
        if (this.XAxisGroupTableId == this.XAxisValueTableId 
            && this.XAxisGroupFieldId == this.XAxisValueFieldId)
        {
            return checkFailed("@WAX:OutboundChartFilterValidateAxisTableAndField");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
        ret = ret && this.validateXAxisTableAndField();
        ret = ret && this.validateDisplayLevel();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTransTypeStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the work transaction type in string format.
    /// </summary>
    /// <returns>Concatenated string of work transaction type.</returns>
    internal str getWorkTransTypeStr()
    {
        return this.convert2StringFormat(Set::create(this.PackedWorkTransType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert2StringFormat</Name>
				<Source><![CDATA[
    private str convert2StringFormat(Set workTransTypeSet)
    {
        str workTransTypes;
        SetEnumerator se = workTransTypeSet.getEnumerator();
        
        while (se.moveNext())
        {
            if (workTransTypes)
            {
                workTransTypes += ',';
            }

            workTransTypes += any2Str(se.current());
        }

        return workTransTypes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:OutboundChartWorkLoadFiltersTableDoc</DeveloperDocumentation>
	<FormRef>WHSOutboundWorkLoadVisualizationConfigureFilter</FormRef>
	<Label>@WAX:OutboundChartWorkLoadFiltersTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>FilterName</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>FilterNameIdx</ClusteredIndex>
	<PrimaryIndex>FilterNameIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FilterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XAxisGroupTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XAxisGroupFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XAxisValueTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XAxisValueFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoRefresh</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefreshInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DaysToInclude</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Filters</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FilterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ChartAxis</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>XAxisGroupTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XAxisGroupFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XAxisValueTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XAxisValueFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Parameters</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoRefresh</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefreshInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DaysToInclude</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FilterName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSChartFilterName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PickingType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSChartPickingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisplayLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSChartDisplayLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>XAxisGroupTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSChartXAxisGroupTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>XAxisGroupFieldId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSChartXAxisGroupFieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>XAxisValueTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSChartXAxisValueTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>XAxisValueFieldId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSChartXAxisValueFieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoRefresh</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSChartAutoRefresh</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefreshInterval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSChartRefreshInterval</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DaysToInclude</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSChartDaysToInclude</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedWorkTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSChartPackedWorkTransType</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FilterNameIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>FilterName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>