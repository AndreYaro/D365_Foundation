<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectWbsLockBox</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjectWbsLockBox extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isLockedInMSProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a given hierarchy is checked out from Project Client.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy Id to check</param>
    /// <returns>true if the Wbs is checked out, otherwise false.</returns>
    public static ProjectWbsOpenInMSProject isLockedInMSProject(HierarchyIdBase _hierarchyId)
    {
        ProjectWbsLockBox projLockBox;
        ProjectWbsOpenInMSProject retval = ProjectWbsOpenInMSProject::Close;

        select firstonly projLockBox where projLockBox.HierarchyId == _hierarchyId;

        if (projLockBox.RecId == 0)
        {
            return ProjectWbsOpenInMSProject::NotSynched;
        }

        if (projLockBox.IsLocked == NoYes::Yes && projLockBox.LockLocation == ProjectWbsLockLocation::ProjectClient)
        {
            retval = ProjectWbsOpenInMSProject::Open;
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will remove the link of the given Project's Wbs between Dynamics 365 for Operations and Microsoft Project Client.
    /// </summary>
    /// <param name = "_projId">Project Id context</param>
    public static void unlinkProject(ProjId _projId)
    {
        ProjPlanVersionDetail projPlanVersionDetail = ProjPlanVersionDetail::findProjectDraftVersion(_projId);
        ProjectWbsLockBox projectWbsLockBox;
        ProjPlanVersion projPlanversion;
        guid nullGuid = emptyGuid();

        if (projPlanVersionDetail.RecId != 0)
        {
            select forupdate projectWbsLockBox where projectWbsLockBox.HierarchyId == projPlanVersionDetail.HierarchyId;
        }

        if (projectWbsLockBox.RecId != 0)
        {
            ttsbegin;

            if (projectWbsLockBox.FileId)
            {
                ProjectWbsMppUploadResult::constructFromFileId(projectWbsLockBox.FileId).deleteResult();
            }

            projectWbsLockBox.delete();

            update_recordset projPlanversion setting MSPID = nullGuid where projPlanversion.HierarchyId == projPlanVersionDetail.HierarchyId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSynchedInMSProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify if the given Project's Wbs is synchronized from Project Client
    /// </summary>
    /// <param name = "_projId">Project Id context</param>
    /// <returns>true if Wbs is synchronized, otherwise false.</returns>
    public static boolean isSynchedInMSProject(ProjId _projId)
    {
        ProjPlanVersionDetail projPlanVersionDetail = ProjPlanVersionDetail::findProjectDraftVersion(_projId);
        ProjectWbsLockBox projectWbsLockBox;

        if (projPlanVersionDetail.RecId != 0)
        {
            select firstonly RecId from projectWbsLockBox where projectWbsLockBox.HierarchyId == projPlanVersionDetail.HierarchyId;
        }

        return projectWbsLockBox.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOutProjectWbs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exclusive locked a Project Wbs for a given user
    /// </summary>
    /// <param name = "_projId">Project Id context</param>
    /// <returns>true if the lock is successful.</returns>
    public static boolean checkOutProjectWbs(ProjId _projId)
    {
        ProjPlanVersionDetail projPlanVersionDetail = ProjPlanVersionDetail::findProjectDraftVersion(_projId);        
        ProjectWbsLockBox projWbsLockBox;

        if (projPlanVersionDetail.RecId != 0)
        {
            UserInfo userInfo;            

            select firstonly userInfo where userInfo.Id == curUserId() && userInfo.Enable == NoYes::Yes;

            select firstonly forupdate projWbsLockBox where projWbsLockBox.HierarchyId == projPlanVersionDetail.HierarchyId;

            ttsbegin;

            if (!projWbsLockBox.RecId)
            {
                ProjTable projTable =  ProjTable::find(_projId);                

                projWbsLockBox.HierarchyId = projPlanVersionDetail.HierarchyId;
                projWbsLockBox.CurrentActiveUser = userInfo.networkAlias;
                projWbsLockBox.IsLocked = NoYes::Yes;
                projWbsLockBox.LockLocation = ProjectWbsLockLocation::ProjectClient;
                projWbsLockBox.ProjTable = projTable.RecId;
                projWbsLockBox.insert();
            }
            else
            {
                projWbsLockBox.CurrentActiveUser = userInfo.networkAlias;
                projWbsLockBox.IsLocked = NoYes::Yes;
                projWbsLockBox.update();
            }

            ttscommit;
        }

        return projWbsLockBox.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>undoCheckOutProjectWbs</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will undo the exclusive lock on a given Project Wbs
    /// </summary>
    /// <param name = "_projId">Project Id context</param>
    /// <returns>true if removing the exclusive lock is successful, otherwise false.</returns>
    public static boolean undoCheckOutProjectWbs(ProjId _projId)
    {
        ProjPlanVersionDetail projPlanVersionDetail = ProjPlanVersionDetail::findProjectDraftVersion(_projId);
        ProjectWbsLockBox projWbsLockBox;
        boolean retval = false;
            
        if (projPlanVersionDetail.RecId != 0)
        {
            select forupdate projWbsLockBox where projWbsLockBox.HierarchyId == projPlanVersionDetail.HierarchyId;

            if (projWbsLockBox.RecId != 0 && projWbsLockBox.IsLocked)
            {
                ttsbegin;

                projWbsLockBox.IsLocked = false;
                projWbsLockBox.CurrentActiveUser = "";
                projWbsLockBox.update();

                retval = true;

                ttscommit;
            }

        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wbsCheckOutInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the current Wbs for a given Project is checked-out.
    /// </summary>
    /// <param name = "_projId">project Id context</param>
    /// <returns>ProjectWbsLockCheck object that contains Wbs checkout information</returns>
    public static ProjectWbsLockCheck wbsCheckOutInfo(ProjId _projId)
    {
        ProjPlanVersionDetail projPlanVersionDetail = ProjPlanVersionDetail::findProjectDraftVersion(_projId);
        ProjectWbsLockBox projWbsLockBox;
        ProjectWbsLockCheck  checkOutInfo = new ProjectWbsLockCheck();

        checkOutInfo.isLocked(false);

        if (projPlanVersionDetail.RecId == 0)
        {
            checkOutInfo.isPublished(true);
            checkOutInfo.isLocked(true);
        }
        else
        {
            select firstonly projWbsLockBox where projWbsLockBox.HierarchyId == projPlanVersionDetail.HierarchyId;

            if (projWbsLockBox.RecId != 0)
            {
                checkOutInfo.isLocked(projWbsLockBox.IsLocked);
                checkOutInfo.userName(projWbsLockBox.CurrentActiveUser);
            }
        }

        return checkOutInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wbsCheckOutInfoByHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the current Wbs for a given Hierarchy Id is checked-out
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy Id context</param>
    /// <returns>ProjectWbsLockCheck object that contains Wbs checkout information</returns>
    public static ProjectWbsLockCheck wbsCheckOutInfoByHierarchy(HierarchyIdBase _hierarchyId)
    {
        ProjPlanVersionDetail projPlanVersionDetail = ProjPlanVersionDetail::findByHierarchyId(_hierarchyId);
        ProjectWbsLockBox projWbsLockBox;
        ProjectWbsLockCheck  checkOutInfo = new ProjectWbsLockCheck();

        checkOutInfo.isLocked(false);

        if (projPlanVersionDetail.RecId == 0)
        {
            checkOutInfo.isPublished(true);
            checkOutInfo.isLocked(true);
        }
        else
        {
            select firstonly projWbsLockBox where projWbsLockBox.HierarchyId == _hierarchyId;

            if (projWbsLockBox.RecId != 0)
            {
                checkOutInfo.IsLocked(projWbsLockBox.IsLocked);
                checkOutInfo.userName(projWbsLockBox.CurrentActiveUser);
            }
        }

        return checkOutInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOutCheckOutInfoOnPublish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remote checkout information for a Wbs when the Wbs is published.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy Id of the Wbs</param>
    public static void clearOutCheckOutInfoOnPublish(HierarchyIdBase _hierarchyId )
    {
        ProjectWbsLockBox projectWbsLockBox;
        select forupdate projectWbsLockBox where projectWbsLockBox.HierarchyId == _hierarchyId;

        if (projectWbsLockBox.RecId != 0)
        {
            ttsbegin;

            if (projectWbsLockBox.FileId)
            {
                ProjectWbsMppUploadResult::constructFromFileId(projectWbsLockBox.FileId).deleteResult();
            }

            projectWbsLockBox.delete();

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<Visible>No</Visible>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SharedServiceUnitFileID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HierarchyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HierarchyIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UpdateMppFileInStorage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrentActiveUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>NetworkAlias</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsLocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LockLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>ProjectWbsLockLocation</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjectFile</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>HierarchyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjTable</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Projects</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTable</Name>
					<Field>ProjTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>