<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductTranslation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductTranslation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canMaintainTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the conditions for when the product translation record can be additionally maintained.
    /// </summary>
    /// <returns>
    /// true when the product translation record can be additionally maintained; otherwise, false.
    /// </returns>
    public boolean canMaintainTranslation()
    {
        return this.Name || this.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.canMaintainTranslation())
        {
            ttsbegin;

            super();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.setDefaultLanguage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a default <c>LanguageId</c> value.
    /// </summary>
    public void setDefaultLanguage()
    {
        this.LanguageId = SystemParameters::getSystemLanguageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shortDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description.
    /// </summary>
    /// <returns>
    /// The description.
    /// </returns>
    /// <remarks>
    /// This method returns a shorted description if the description is longer than 120 characters.
    /// </remarks>
    public display EcoResDescription shortDescription()
    {
        if ( strLen( this.Description ) < 150 )
        {
            return this.Description;
        }
        else
        {
            return strFmt( '%1 %2' , subStr( this.Description, 0 , 140) , "@SYS74103" );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        EcoResProductName               origName;

        if (this.canMaintainTranslation())
        {
            origName = this.orig().Name;

            super();

            // Product name exists on item search, if it changes after it has been
            //  released, need to update the search text for each company the product was
            //  released to.
            if (isConfigurationkeyEnabled(configurationKeyNum(TradeItemSearch)))
            {
                if (this.Name != origName)
                {
                    MCRInventSearch::updateFromProduct(this.Product);
                }
            }
        }
        else
        {
            this.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean _skipInfoLogMessage = false)
    {
        boolean ret;

        ret = super();

        if (!this.canMaintainTranslation())
        {
            if (!_skipInfoLogMessage)
            {
                ret = checkFailed("@SYS312448");
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the product translation record.
    /// </summary>
    /// <param name="_product">
    /// The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_name">
    /// The specified product name value.
    /// </param>
    /// <param name="_description">
    /// The specified product description value.
    /// </param>
    /// <param name="_languageId">
    /// The specified <c>LanguageId</c> value.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The product name and description value has not been passed.
    /// </exception>
    public static void createOrUpdateTranslation(
        EcoResProductRecId  _product,
        EcoResProductName   _name,
        EcoResDescription   _description,
        LanguageId          _languageId = SystemParameters::getSystemLanguageId())
    {
        EcoResProductTranslation    ecoResProductTranslation;

        if (!_description && !_name)
        {
            throw error("@SYS312448");
        }

        ttsbegin;

        ecoResProductTranslation = EcoResProductTranslation::findByProductLanguage(_product, _languageId, true);

        if (ecoResProductTranslation.RecId)
        {
            ecoResProductTranslation.Name           =   _name;
            ecoResProductTranslation.Description    =   _description;

            if (ecoResProductTranslation.validateWrite(true))
            {
                ecoResProductTranslation.update();
            }
        }
        else
        {
            ecoResProductTranslation.Product        =   _product;
            ecoResProductTranslation.Name           =   _name;
            ecoResProductTranslation.Description    =   _description;
            ecoResProductTranslation.LanguageId     =   _languageId;

            if (ecoResProductTranslation.validateWrite(true))
            {
                ecoResProductTranslation.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the product translation record.
    /// </summary>
    /// <param name="_product">
    ///     The ID of the <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_languageId">
    ///     The specified <c>LanguageId</c> value.
    /// </param>
    public static void deleteTranslation(
        EcoResProductRecId  _product,
        LanguageId          _languageId = SystemParameters::getSystemLanguageId())
    {
        EcoResProductTranslation    ecoResProductTranslation;

        ttsbegin;

        ecoResProductTranslation = EcoResProductTranslation::findByProductLanguage(_product, _languageId, true);

        if (ecoResProductTranslation.RecId)
        {
            ecoResProductTranslation.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResProductTranslation</c> table by using the specified
    ///    product language.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record to use as a filter.
    /// </param>
    /// <param name="_languageId">
    ///    A language ID to use as a filter.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResProductTranslation</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResProductTranslation findByProductLanguage(
        RefRecId    _product,
        LanguageId  _languageId,
        boolean     _forUpdate = false)
    {
        EcoResProductTranslation productTranslation;

        productTranslation.selectForUpdate(_forUpdate);

        select firstonly productTranslation
            where productTranslation.Product    == _product
               && productTranslation.LanguageId == _languageId;

        return productTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductOrSystemLanguage</Name>
				<Source><![CDATA[
    private static EcoResProductTranslation findByProductOrSystemLanguage(
        EcoResProductRecId  _productRecId,
        LanguageId          _languageId,
        FieldId             _translationFieldId)
    {
        EcoResProductTranslation    ecoResProductTranslation;
        LanguageId                  systemLanguageId;

        ecoResProductTranslation = EcoResProductTranslation::findByProductLanguage(
            _productRecId, _languageId);

        //no translation record or no value provided - fallback to system language
        if (!ecoResProductTranslation.RecId || !ecoResProductTranslation.(_translationFieldId))
        {
            systemLanguageId = SystemParameters::getSystemLanguageId();
            if (systemLanguageId != _languageId)
            {
                ecoResProductTranslation = EcoResProductTranslation::findByProductLanguage(
                    _productRecId, systemLanguageId);
            }
        }

        return ecoResProductTranslation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCompanyLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default company language id.
    /// </summary>
    /// <returns>The default company language id</returns>
    protected static LanguageId defaultCompanyLanguageId()
    {
        return CompanyInfo::languageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescriptionOrDefaultDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a description of a product.
    /// </summary>
    /// <param name="_productRecId">
    ///    The ID of a product for which a description is retrieved.
    /// </param>
    /// <param name="_languageId">
    ///    The ID of a language in which a description is retrieved.
    /// </param>
    /// <returns>
    ///    A description of a product.
    /// </returns>
    /// <remarks>
    ///    If a description in language specified by the <c>_languageId</c> parameter is not found then a
    ///    description in the system language is returned.
    /// </remarks>
    public static EcoResDescription getDescriptionOrDefaultDescription(
        EcoResProductRecId  _productRecId,
        LanguageId          _languageId)
    {
        EcoResProductTranslation ecoResProductTranslation;

        ecoResProductTranslation = EcoResProductTranslation::findByProductOrSystemLanguage(
            _productRecId, _languageId, fieldNum(EcoResProductTranslation, Description));

        return ecoResProductTranslation.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameOrDefaultName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of a product.
    /// </summary>
    /// <param name="_productRecId">
    ///    The ID of a product for which a name is retrieved.
    /// </param>
    /// <param name="_languageId">
    ///    The ID of a language in which a name is retrieved.
    /// </param>
    /// <returns>
    ///    A name of a product.
    /// </returns>
    /// <remarks>
    ///    If a name in the language specified by the <c>_languageId</c> parameter is not found then a name in
    ///    the system language is returned.
    /// </remarks>
    public static EcoResProductName getNameOrDefaultName(
        EcoResProductRecId  _productRecId,
        LanguageId          _languageId)
    {
        EcoResProductTranslation ecoResProductTranslation;

        ecoResProductTranslation = EcoResProductTranslation::findByProductOrSystemLanguage(
            _productRecId, _languageId, fieldNum(EcoResProductTranslation, Name));

        return ecoResProductTranslation.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddCompanyLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the company language ID filter for specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query that is extended with the company language ID filter.
    /// </param>
    /// <param name="_name">
    ///    The name of specified <c>ecoResProductTranslation</c> record.
    /// </param>
    static void queryAddCompanyLanguage(Query _query, str _name = '')
    {
        QueryBuildDataSource    qbdsProductTranslation;

        if (_name)
        {
            qbdsProductTranslation = _query.dataSourceName(_name);
        }
        else
        {
            qbdsProductTranslation = _query.dataSourceTable(tableNum(EcoResProductTranslation));
        }

        if (!qbdsProductTranslation)
        {
            throw error(Error::wrongUseOfFunction(tableStaticMethodStr(EcoResProductTranslation, queryAddDefaultLanguage)));
        }

        qbdsProductTranslation.addRange(fieldNum(EcoResProductTranslation, LanguageId))
            .value(queryValue(EcoResProductTranslation::defaultCompanyLanguageId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddDefaultLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The method adds a default language ID filter for the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query that is extended with the default language ID filter.
    /// </param>
    /// <param name="_name">
    ///    The name of specified <c>ecoResProductTranslation</c> record.
    /// </param>
    static void queryAddDefaultLanguage(Query _query, str _name = '')
    {
        QueryBuildDataSource    qbdsProductTranslation;

        if (_name)
        {
            qbdsProductTranslation = _query.dataSourceName(_name);
        }
        else
        {
            qbdsProductTranslation = _query.dataSourceTable(tableNum(EcoResProductTranslation));
        }

        if (!qbdsProductTranslation)
        {
            throw error(Error::wrongUseOfFunction(tableStaticMethodStr(EcoResProductTranslation, queryAddDefaultLanguage)));
        }

        qbdsProductTranslation.addRange(fieldNum(EcoResProductTranslation, LanguageId))
            .value(queryValue(SystemParameters::getSystemLanguageId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS133900</DeveloperDocumentation>
	<FormRef>EcoResProductTranslation</FormRef>
	<Label>@SCM:ProductTranslation</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Product</TitleField1>
	<TitleField2>LanguageId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ProductLanguageIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ProductLanguageIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultTranslation</Name>
			<Label>@SYS133899</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageIdAll</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes>
		<AxTableFullTextIndex>
			<Name>ProductTranslationIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Description</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableFullTextIndex>
	</FullTextIndexes>
	<Indexes>
		<AxTableIndex>
			<Name>ProductLanguageIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RecIdProductLanguageId</Name>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProduct</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResProduct_EcoResProductTranslation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LanguageTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LanguageTable_EcoResProductTranslation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>