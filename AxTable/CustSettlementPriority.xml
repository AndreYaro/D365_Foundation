<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSettlementPriority</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustSettlementPriority extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!CustSettlementPriority::exist(_recId))
        {
            ret = checkFailed(strfmt(CustSettlementPriority::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records that represent each attribute and default priority.
    /// </summary>
    public static void createData()
    {
        CustSettlementPriority custSettlementPriority;

        select firstonly custSettlementPriority;

        // if table is empty insert records
        if (custSettlementPriority.RecId == 0)
        {
            ttsbegin;

            CustSettlementPriority::createDataInternal();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records that represent each attribute and default priority.
    /// </summary>
    /// <remarks>
    /// This method is the extensibility point to create additional data for <c>CustSettlementPriorityAttribute</c> extentions.
    /// </remarks>
    protected static void createDataInternal()
    {
        CustSettlementPriority::createDataVoucher();
        CustSettlementPriority::createDataTransactionAmount();
        CustSettlementPriority::createDataTransactionDate();
        CustSettlementPriority::createDataCashDiscountDate();
        CustSettlementPriority::createDataDueDate();
        CustSettlementPriority::createDataBilling();
        CustSettlementPriority::createDataTransactionType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create data for <c>CustSettlementPriorityAttribute</c> voucher.
    /// </summary>
    private static void createDataVoucher()
    {
        CustSettlementPriority custSettlementPriority;

        custSettlementPriority.clear();
        custSettlementPriority.Enabled   = NoYes::Yes;
        custSettlementPriority.Attribute = CustSettlementPriorityAttribute::Voucher;
        custSettlementPriority.Direction = CustSettlementAttributeDirection::Ascending;
        custSettlementPriority.Priority  = CustSettlementPriority::custSettlementPriorityAttributePriority().lookup(CustSettlementPriorityAttribute::Voucher);
        custSettlementPriority.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create data for <c>CustSettlementPriorityAttribute</c> transaction amount.
    /// </summary>
    private static void createDataTransactionAmount()
    {
        CustSettlementPriority custSettlementPriority;

        custSettlementPriority.clear();
        custSettlementPriority.Enabled   = NoYes::No;
        custSettlementPriority.Attribute = CustSettlementPriorityAttribute::TranscationAmount;
        custSettlementPriority.Direction = CustSettlementAttributeDirection::Ascending;
        custSettlementPriority.Priority  = CustSettlementPriority::custSettlementPriorityAttributePriority().lookup(CustSettlementPriorityAttribute::TranscationAmount);
        custSettlementPriority.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataTransactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create data for <c>CustSettlementPriorityAttribute</c> transaction date.
    /// </summary>
    private static void createDataTransactionDate()
    {
        CustSettlementPriority custSettlementPriority;

        custSettlementPriority.clear();
        custSettlementPriority.Enabled   = NoYes::No;
        custSettlementPriority.Attribute = CustSettlementPriorityAttribute::TransactionDate;
        custSettlementPriority.Direction = CustSettlementAttributeDirection::Ascending;
        custSettlementPriority.Priority  = CustSettlementPriority::custSettlementPriorityAttributePriority().lookup(CustSettlementPriorityAttribute::TransactionDate);
        custSettlementPriority.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataCashDiscountDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create data for <c>CustSettlementPriorityAttribute</c> cash discount date.
    /// </summary>
    private static void createDataCashDiscountDate()
    {
        CustSettlementPriority custSettlementPriority;

        custSettlementPriority.clear();
        custSettlementPriority.Enabled   = NoYes::No;
        custSettlementPriority.Attribute = CustSettlementPriorityAttribute::CashDiscountDate;
        custSettlementPriority.Direction = CustSettlementAttributeDirection::Ascending;
        custSettlementPriority.Priority  = CustSettlementPriority::custSettlementPriorityAttributePriority().lookup(CustSettlementPriorityAttribute::CashDiscountDate);
        custSettlementPriority.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create data for <c>CustSettlementPriorityAttribute</c> due date.
    /// </summary>
    private static void createDataDueDate()
    {
        CustSettlementPriority custSettlementPriority;

        custSettlementPriority.clear();
        custSettlementPriority.Enabled   = NoYes::No;
        custSettlementPriority.Attribute = CustSettlementPriorityAttribute::DueDate;
        custSettlementPriority.Direction = CustSettlementAttributeDirection::Ascending;
        custSettlementPriority.Priority  = CustSettlementPriority::custSettlementPriorityAttributePriority().lookup(CustSettlementPriorityAttribute::DueDate);
        custSettlementPriority.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataBilling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create data for <c>CustSettlementPriorityAttribute</c> billing.
    /// </summary>
    private static void createDataBilling()
    {
        CustSettlementPriority custSettlementPriority;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            custSettlementPriority.clear();
            custSettlementPriority.Enabled   = NoYes::No;
            custSettlementPriority.Attribute = CustSettlementPriorityAttribute::Billing;
            custSettlementPriority.Direction = CustSettlementAttributeDirection::Ascending;
            custSettlementPriority.Priority  = CustSettlementPriority::custSettlementPriorityAttributePriority().lookup(CustSettlementPriorityAttribute::Billing);
            custSettlementPriority.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create data for <c>CustSettlementPriorityAttribute</c> transaction type.
    /// </summary>
    private static void createDataTransactionType()
    {
        CustSettlementPriority custSettlementPriority;
     
        custSettlementPriority.clear();
        custSettlementPriority.Enabled   = NoYes::No;
        custSettlementPriority.Attribute = CustSettlementPriorityAttribute::TransactionType;
        custSettlementPriority.Direction = CustSettlementAttributeDirection::Ascending;
        custSettlementPriority.Priority  = CustSettlementPriority::custSettlementPriorityAttributePriority().lookup(CustSettlementPriorityAttribute::TransactionType);
        custSettlementPriority.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custSettlementPriorityAttributePriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// The customer settlement priority.
    /// </summary>
    /// <returns>
    /// The relationship between the <c>CustSettlementPriorityAttribute</c> and the priority.
    /// </returns>
    protected static Map custSettlementPriorityAttributePriority()
    {
        Map custSettlementPriorityAttributePriority = new Map(Types::Enum, Types::Integer);

        Priority priority = 0;
        custSettlementPriorityAttributePriority.insert(CustSettlementPriorityAttribute::Voucher, priority);
        
        priority += 1;
        custSettlementPriorityAttributePriority.insert(CustSettlementPriorityAttribute::TranscationAmount, priority);
        
        priority += 1;
        custSettlementPriorityAttributePriority.insert(CustSettlementPriorityAttribute::TransactionDate, priority);
        
        priority += 1;
        custSettlementPriorityAttributePriority.insert(CustSettlementPriorityAttribute::CashDiscountDate, priority);
        
        priority += 1;
        custSettlementPriorityAttributePriority.insert(CustSettlementPriorityAttribute::DueDate, priority);
        
        priority += 1;
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            custSettlementPriorityAttributePriority.insert(CustSettlementPriorityAttribute::Billing, priority);
            priority += 1;
        }

        custSettlementPriorityAttributePriority.insert(CustSettlementPriorityAttribute::TransactionType, priority);

        return custSettlementPriorityAttributePriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>CustSettlementPriority</c> table exists.
    /// </summary>
    /// <param name="_custSettlementPriorityId">
    ///    The record ID of the <c>CustSettlementPriority</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _custSettlementPriorityId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custSettlementPriority
                 where
                     custSettlementPriority.RecId == _custSettlementPriorityId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustSettlementPriority</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>CustSettlementPriority</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustSettlementPriority</c> table; otherwise, an empty record.
    /// </returns>
    public static CustSettlementPriority find(
    recId _recId,
    boolean _forupdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustSettlementPriority custSettlementPriority;

        custSettlementPriority.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custSettlementPriority.concurrencyModel(_concurrencyModel);
        }
        select firstonly custSettlementPriority
            where custSettlementPriority.RecId == _recId;

        return custSettlementPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustSettlementPriority</c> table by the attribute.
    /// </summary>
    /// <param name="_custSettlementAttribute">
    ///    A <c>CustSettlementPriorityAttribute</c> type value that indicates the attribute to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustSettlementPriority</c> table; otherwise, an empty record.
    /// </returns>
    public static CustSettlementPriority findByAttribute(
    CustSettlementPriorityAttribute _custSettlementAttribute,
    boolean _forUpdate = false)
    {
        CustSettlementPriority custSettlementPriority;

        custSettlementPriority.selectForUpdate(_forUpdate);
        select firstonly custSettlementPriority
            where custSettlementPriority.Attribute == _custSettlementAttribute;

        return custSettlementPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustSettlementPriority</c> table by the attribute priority.
    /// </summary>
    /// <param name="_custSettlementTransPriority">
    ///    A <c>CustSettlementTransPriority</c> type value that indicates the attribute priority to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>CustSettlementPriority</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static CustSettlementPriority findByPriority(CustSettlementTransPriority _custSettlementTransPriority,
    boolean _forUpdate = false)
    {
        CustSettlementPriority custSettlementPriority;

        custSettlementPriority.selectForUpdate(_forUpdate);

        select firstonly custSettlementPriority
            where custSettlementPriority.Priority == _custSettlementTransPriority;

        return custSettlementPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderedAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the list of attributes in the order of their current priority.
    /// </summary>
    /// <param name="_isAscending">
    ///    A Boolean value that indicates whether to get the records in ascending order of priority; optional.
    /// </param>
    /// <returns>
    ///    A list that contains the attributes.
    /// </returns>
    /// <remarks>
    ///    This method also creates records in the <c>CustSettlementPriority</c> table if it is empty.
    /// </remarks>
    public static List getOrderedAttributes(boolean _isAscending = false)
    {
        CustSettlementPriority custSettlementPriority;
        List custSettlementPriorityList = new List (Types::Enum);
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryRun qRun;

        select firstonly custSettlementPriority;
        if (custSettlementPriority.RecId == 0)
        {
            CustSettlementPriority::createData();
        }

        query.addDataSource(tablenum(CustSettlementPriority));
        qbds = query.dataSourceNo(1);

        if (_isAscending)
        {
            qbds.addSortField(fieldnum(CustSettlementPriority, Priority), SortOrder::Ascending);
        }
        else
        {
            qbds.addSortField(fieldnum(CustSettlementPriority, Priority), SortOrder::Descending);
        }
        qRun = new QueryRun(query);
        while (qRun.next())
        {
            custSettlementPriority = qRun.get(tablenum(CustSettlementPriority)) as CustSettlementPriority;
            custSettlementPriorityList.addEnd(custSettlementPriority.Attribute);
        }

        return custSettlementPriorityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapPriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Swaps the priorities of two records based on their <c>CustSettlementPriorityAttribute</c> enumeration values.
    /// </summary>
    /// <param name="_curPriorityAttribute">
    ///    A <c>CustSettlementPriorityAttribute</c> enumeration value.
    /// </param>
    /// <param name="_newPriorityAttribute">
    ///    A <c>CustSettlementPriorityAttribute</c> enumeration value.
    /// </param>
    /// <returns>
    ///   true if the attribute priority is updated; otherwise, false.
    /// </returns>
    public static boolean swapPriority(CustSettlementPriorityAttribute _curPriorityAttribute,
            CustSettlementPriorityAttribute _newPriorityAttribute)
    {
        CustSettlementPriority curCustSettlementPriority = CustSettlementPriority::findByAttribute(_curPriorityAttribute, true);
        CustSettlementPriority newCustSettlementPriority = CustSettlementPriority::findByAttribute(_newPriorityAttribute, true);
        Priority tmpPriority;

        if (curCustSettlementPriority && newCustSettlementPriority)
        {
            ttsbegin;
            tmpPriority = newCustSettlementPriority.Priority;
            newCustSettlementPriority.Priority = curCustSettlementPriority.Priority;
            curCustSettlementPriority.Priority = tmpPriority;

            newCustSettlementPriority.update();
            curCustSettlementPriority.update();
            ttscommit;

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102195";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS326951</DeveloperDocumentation>
	<Label>@SYS131721</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>Attribute</TitleField1>
	<CacheLookup>EntireTable</CacheLookup>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Bank</Modules>
	<ReplacementKey>SettlementPriorityIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Enabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SettlementPriority</Name>
			<Label>@SYS131721</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Enabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Attribute</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustSettlementPriorityAttribute</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Direction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustSettlementAttributeDirection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Enabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustSettlementAttributeEnable</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustSettlementTransPriority</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SettlementPriorityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Priority</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>