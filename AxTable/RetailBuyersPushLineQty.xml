<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBuyersPushLineQty</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailBuyersPushLineQty extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a Sales Order for the specified RetailBuyersPushLine using the customerAccount provided
    /// </summary>
    /// <param name="_retailBuyersPushLine">
    ///    The <c>RetailBuyersPushLine</c> to be used for creating the Sales Order
    /// </param>
    /// <param name="_customerAccount">
    ///    The trading customer <c>CustAccount</c> to use when creating the sales order.
    /// </param>
    /// <param name="_inventLocationTo">
    ///    The trading to location.
    /// </param>
    /// <remarks>
    ///    The <c>_inventLocationFrom</c> parameter was removed as it wasn't used by the implementation.
    /// </remarks>
    public void createOrUpdateSalesOrder(RetailBuyersPushLine _retailBuyersPushLine, CustAccount _customerAccount, InventLocation _inventLocationTo)
    {
        InventTable             inventTable = InventTable::find(_retailBuyersPushLine.ItemId);
        InventDim               inventDim, productInventDim;
        InventDimParm           inventDimParm;
        InventDimId             productInventDimId;

        SalesTable              salesTable;
        RetailSalesTable        retailSalesTable;
        SalesLine               salesLine;
        date                    preferredDate;

        RetailBuyersPushLineQty tmpRetailBuyersPushLineQty;

        PurchLine               purchLine;
        boolean                 createSalesLine;

        RetailBuyersPushLine tempBuyersPushLine;
        InventTable tempInventTable;
        LogisticsPostalAddress  postalAddress;

        ttsbegin;

        inventDim = InventDim::find(_retailBuyersPushLine.InventDimId);

        // Find the previously created Sales Order for this intercompany trade if one exist
        select firstonly SalesTable from tmpRetailBuyersPushLineQty
            where tmpRetailBuyersPushLineQty.BuyersPushId == _retailBuyersPushLine.BuyersPushId
                && tmpRetailBuyersPushLineQty.InventLocationId == _inventLocationTo.InventLocationId
                && tmpRetailBuyersPushLineQty.WarehouseDataAreaId == _inventLocationTo.dataAreaId
                && tmpRetailBuyersPushLineQty.SalesTable;

        // See if an existing open salesTable already exisit for this this location/customer
        salesTable = SalesTable::findRecId(tmpRetailBuyersPushLineQty.SalesTable);

        if (salesTable.RecId == 0)
        {
            // No previous entry found - create a new Sales Table
            salesTable.clear();
            salesTable.SalesId          = NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
            salesTable.Reservation      = ItemReservation::Automatic;
            salesTable.CustAccount      = _customerAccount;
            salesTable.initFromCustTable();
            salesTable.SalesType        = SalesType::Sales;
            salesTable.InventSiteId     = inventDim.InventSiteId;
            salesTable.InventLocationId = inventDim.InventLocationId;
            retailSalesTable.RetailReplenishmentLocationId = _inventLocationTo.InventLocationId;
            retailSalesTable.SalesTable = salesTable.RecId;
            salesTable.packRetailSalesTable(retailSalesTable);

            // Default prefferedDate to today.
            preferredDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
            salesTable.DeliveryDate = preferredDate;
            salesTable.ReceiptDateRequested = preferredDate;
            salesTable.ShippingDateRequested = preferredDate;

            postalAddress = InventLocation::findInLegalEntity(_inventLocationTo.InventLocationId, _inventLocationTo.dataAreaId).logisticsPostalAddress();
            salesTable.DeliveryName = postalAddress.displayLocationDescription();
            salesTable.DeliveryPostalAddress = postalAddress.RecId;

            salesTable.insert();
            info(strFmt("@RET5753", salesTable.SalesId));
        }

        // Try to figure out whether to create the sales line.
        createSalesLine = false;
        if (_retailBuyersPushLine.RefRecId)
        {
            // The replenishment is cross docking.
            // Try to find the purch line.
            select firstOnly PurchId, InventTransId from purchLine
                    where purchLine.RecId == _retailBuyersPushLine.RefRecId;

            if (purchLine.InventTransId)
            {
                // Found the purch line.
                // Try to find the matching sales line.
                select firstOnly RecId from salesLine
                    where salesLine.SalesId == salesTable.SalesId
                    &&    salesLine.InventRefTransId == purchLine.InventTransId;

                // Create the sales line if no matching sales line is found.
                createSalesLine = (salesLine.RecId == 0);
            }
            else
            {
                // Didn't find the purch line.
                // Maybe the purch line was deleted after cross docking.
                // Do not create sales line.
                createSalesLine = false;
            }
        }
        else
        {
            // RetailBuyersPushLine does not have a reference to purch line.
            // It means that the replenishment is buyers push, not cross docking.
            // Since we don't have the link between RetailBuyersPushLineQty and SalesLine,
            // We always create a new sales line.
            createSalesLine = true;
        }

        if (createSalesLine)
        {
            //Create SO line for the given salesTable
            salesLine.clear();

            // Set the SalesId for the sales table that is used when createLine has _initFromSalesOrderTable
            salesLine.SalesId = salesTable.SalesId;
            salesLine.ItemId  = _retailBuyersPushLine.ItemId;

            productInventDim = InventDim::find(_retailBuyersPushLine.InventDimId);
            inventDimParm.setAllProductDimensions();
            productInventDim.clearNotSelectedDim(inventDimParm);
            productInventDimId = InventDim::findOrCreate(productInventDim).inventDimId;
            salesLine.RetailVariantId = InventDimCombination::find(_retailBuyersPushLine.ItemId, productInventDimId).RetailVariantId;

            tempBuyersPushLine = this.pushLine();
            tempInventTable = tempBuyersPushLine.inventTable();

            salesLine.CustAccount = salesTable.CustAccount;

            salesLine.SalesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                    tempBuyersPushLine.ItemId,
                                    tempBuyersPushLine.InventDimId,
                                    this.Qty,
                                    tempBuyersPushLine.UnitID,
                                    tempInventTable.salesUnitId(),
                                    NoYes::No,
                                    NoYes::No);

            salesLine.initFromInventTable(inventTable);
            salesLine.InventDimId   = _retailBuyersPushLine.InventDimId;

            salesLine.QtyOrdered    = salesLine.calcQtyOrdered();

            // Set InventTransId of the PurchLine to the SalesLine for cross-docking.
            // InventMov_Sales::markingRefInventTransOrigin() will use the information for InventTrans marking.
            if (purchLine.InventTransId)
            {
                salesLine.InventRefType = InventRefType::Purch;
                salesLine.InventRefId = purchLine.PurchId;
                salesLine.InventRefTransId = purchLine.InventTransId;
            }

            InventMovement::bufferSetRemainQty(salesLine);

            // Set the _initFromSalesOrderTable = true and accept default for all others, but make sure _setLineNum is true (default)
            // Now go ahead and create the line (e.g., insert)
            salesLine.createLine(
                false, // _validation
                true // _initFromSalesOrderTable
                );
        }

        this.SalesTable = salesTable.RecId;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transfer order or creates a transfer order if not found.
    /// </summary>
    /// <param name="_qty">
    /// A quantity to transfer.
    /// </param>
    /// <remarks>
    /// This method creates a transfer order if there is a quantity to cross-dock.
    /// </remarks>
    public void createOrUpdateTransferOrder(Qty _qty = 0)
    {
        RetailBuyersPushTable           buyersPushTable = RetailBuyersPushTable::find(this.BuyersPushId,true);
        RetailBuyersPushLine            buyersPushLine;
        InventTransferTable             inventTransferTable;
        InventTransferLine              inventTransferLine;
        InventDim                       inventDim;
        RetailTransferOrderHandler      transferOrderHandler;
        Qty                             transferQty;

        ttsbegin;

        select firstonly buyersPushLine
        where buyersPushLine.BuyersPushId == this.BuyersPushId &&
              buyersPushLine.LineNum      == this.LineNum;

        if (buyersPushTable && buyersPushLine)
        {
            inventDim = InventDim::find(buyersPushLine.InventDimId);

            inventTransferTable = RetailReplenishmentTransferOrder::findTransferOrder(tableNum(RetailBuyersPushTable),
                                                                                      buyersPushTable.RecId,
                                                                                      inventDim.InventLocationId,
                                                                                      this.InventLocationId);

            // Only create/update transfer order if from and to warehouses differ
            if (this.WarehouseDataAreaId != inventDim.dataAreaId ||
                this.InventLocationId != inventDim.InventLocationId)
            {
                // If quantity parameter is zero, use the cross docking quantity
                transferQty = (_qty == 0) ? this.Qty : _qty;

                // Quantity has to be transferred in the item's inventory unit
                InventTable inventTable = buyersPushLine.inventTable();
                transferQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                    buyersPushLine.ItemId,
                                    buyersPushLine.InventDimId,
                                    transferQty,
                                    buyersPushLine.UnitID,
                                    inventTable.inventUnitId(),
                                    NoYes::No,
                                    NoYes::No);

                // Find or create TO
                transferOrderHandler = RetailTransferOrderHandler::newTransfer(this,
                                                                            InventLocation::find(inventDim.InventLocationId),
                                                                            InventLocation::findInLegalEntity(this.InventLocationId, this.WarehouseDataAreaId),
                                                                            buyersPushLine.ItemId,
                                                                            inventDim,
                                                                            transferQty);

                if (inventTransferTable)
                {
                    transferOrderHandler.parmInventTransferTable(inventTransferTable);
                }
                else
                {
                    //Only create transfer order if there is quantity to cross dock
                    if (transferQty != 0)
                    {
                        transferOrderHandler.setTransferTable();
                        transferOrderHandler.createTransferTable();
                    }
                    else
                    {
                        ttsabort;
                        return;
                    }
                }

                inventTransferLine = RetailReplenishmentTransferOrder::findTransferOrderLine(tableNum(RetailBuyersPushLineQty),
                                                                                             this.RecId,
                                                                                             this.InventLocationId,
                                                                                             true);

                if (inventTransferLine)
                {
                    if (!RetailCrossDockingFeatureControl::isLegacyTransferOrderUpdateSkipEnabled())
                    {
                        if (inventTransferLine.QtyTransfer != transferQty
                        && (inventTransferLine.RemainStatus == InventTransferRemainStatus::None
                            || inventTransferLine.RemainStatus == InventTransferRemainStatus::Shipping))
                        {
                            inventTransferLine.QtyTransfer = transferQty;
                            inventTransferLine.update();
                        }
                    }
                }
                else if (transferOrderHandler.parmInventTransferTable().canAddTransferLines())
                {
                    transferOrderHandler.parmRetailBuyersPushLine(buyersPushLine);
                    transferOrderHandler.setTransferLine();
                    transferOrderHandler.createTransferLine(this.isCrossdocking());
                }

                buyersPushTable.TransferOrderCreated = NoYes::Yes;
                buyersPushTable.update();
            }
            else
            {
                info("@RET1358");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverflowErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns a over flow error message.
    /// </summary>
    /// <returns>
    /// The message if quantity to distribute is greater than available.
    /// </returns>
    public LabelString getOverflowErrorMessage()
    {
        return this.isCrossdocking() ? "@RET1357" : "@RET826";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.WarehouseDataAreaId = curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the inventory location.
    /// </summary>
    /// <returns>
    /// The name of the inventory location.
    /// </returns>
    display InventLocationName inventLocationName()
    {
        return InventLocation::findInLegalEntity(this.InventLocationId, this.WarehouseDataAreaId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCrossdocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a buyers push line.
    /// </summary>
    /// <returns>
    /// true if a buyers push line exists for the given buyers push ID; otherwise, false.
    /// </returns>

    // Checks whether relevant buyers push line references a purchase order line
    boolean isCrossdocking()
    {
        RetailBuyersPushLine   buyersPushLine;
        boolean             ret;

        select firstonly BuyersPushId, LineNum, RefRecId from buyersPushLine
        where buyersPushLine.BuyersPushId == this.BuyersPushId &&
              buyersPushLine.LineNum      == this.LineNum;

        if (buyersPushLine.RefRecId)
        {
            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the on-hand quantity.
    /// </summary>
    /// <returns>
    /// The on-hand quantity of the buyers push line.
    /// </returns>
    [SysObsolete('This method has been moved to the form RetailBuyersPush.', false, 30\06\2018)]
    display Qty onHand()
    {
        RetailBuyersPushLine buyersPushLine = this.pushLine();
        InventTable          inventTable = buyersPushLine.inventTable();

        // On-hand quantity should be returned in the UOM of the buyer's push line
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                    buyersPushLine.ItemId,
                    buyersPushLine.InventDimId,
                    this.pushLine().onHand(this.InventLocationId, this.WarehouseDataAreaId),
                    inventTable.inventUnitId(),
                    buyersPushLine.UnitID,
                    NoYes::No,
                    NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pushLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailBuyersPushLine</c> table.
    /// </summary>
    /// <returns>
    /// A <c>RetailBuyersPushLine</c> record if found; otherwise, an empty record.
    /// </returns>
    RetailBuyersPushLine pushLine()
    {
        RetailBuyersPushLine   tfshBuyersPushLine;

        select * from tfshBuyersPushLine
            where this.BuyersPushId == tfshBuyersPushLine.BuyersPushId
               && this.LineNum      == tfshBuyersPushLine.LineNum;

        return tfshBuyersPushLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCrossdockingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the cross-docking quantity with the ordered quantity.
    /// </summary>
    /// <returns>
    /// true if the cross-docking quantity is less than the ordered quantity; otherwise, false.
    /// </returns>
    boolean validateCrossdockingQty()
    {
        RetailBuyersPushLine            buyersPushLine;
        RetailBuyersPushLineQty         buyersPushLineQty;

        select firstonly BuyersPushId, LineNum, RefRecId from buyersPushLine
            where buyersPushLine.BuyersPushId == this.BuyersPushId &&
                  buyersPushLine.LineNum      == this.LineNum;

        PurchLine purchLine = PurchLine::findRecId(buyersPushLine.RefRecId);

        // Find the sum cross docking quantity being cross docked to other warehouses
        select sum(Qty) from buyersPushLineQty
            where buyersPushLineQty.BuyersPushId     == this.BuyersPushId
               && buyersPushLineQty.LineNum          == this.LineNum
               && buyersPushLineQty.InventLocationId != this.InventLocationId;

        // Get quantity in purchase unit of measure
        Qty quantityInPurchUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                        buyersPushLine.ItemId,
                                        buyersPushLine.InventDimId,
                                        this.Qty + buyersPushLineQty.Qty,
                                        buyersPushLine.UnitID,
                                        purchLine.PurchUnit,
                                        NoYes::No,
                                        NoYes::No);

        // Only cross dock if total cross docking quantity does not exceed ordered quantity on the relevant purchase order line
        if (purchLine.PurchQty < quantityInPurchUnit)
        {
            return checkFailed(this.getOverflowErrorMessage());
        }
        else
        {
            // Only cross dock if total cross docking quantity does not exceed received quanitity on the relevant purchase order line
            if (quantityInPurchUnit <= purchLine.receivedInTotal())
            {
                InventLocation  inventLocation;
                inventLocation = InventDim::find(purchLine.InventDimId).inventLocation();
            }
            else
            {
                RetailTracer::Warning('Replenishment', funcName(), 'Total cross docking quantity exceeds received quanitity on the relevant purchase order line');
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldNum(RetailBuyersPushLineQty, Qty):
                if (this.isCrossdocking())
                {
                    ret = this.validateCrossdockingQty();
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the quantity to be distributed.
    /// </summary>
    /// <returns>
    /// true if the quantity to be distributed is less than the quantity available; otherwise, false.
    /// </returns>
    public boolean validateFieldQty()
    {
        return this.validateFieldQtyWithCache(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldQtyWithCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the quantity to be distributed.
    /// </summary>
    /// <param name="_inventAvailabilityFormCache">
    /// The cache which retrieves the on hand quantity. If this parameter is null, an empty cache will be used.
    /// </param>
    /// <returns>
    /// true if the quantity to be distributed is less than the quantity available; otherwise, false.
    /// </returns>
    public boolean validateFieldQtyWithCache(InventAvailabilityFormCache _inventAvailabilityFormCache)
    {
        RetailBuyersPushLineQty         tfshBuyersPushLineQty;
        RetailBuyersPushLine            tBuyersPushLine;
        InventTransferLine              tInventTransferLine;
        InventModelGroup                tInventModelGroup;

        ttsbegin;
        select * from tBuyersPushLine
           where tBuyersPushLine.BuyersPushId     == this.BuyersPushId
              && tBuyersPushLine.LineNum          == this.LineNum;

        tInventModelGroup       =    InventModelGroup::find(InventTable::find(tBuyersPushLine.ItemId).itemGroupId());
        if (!tInventModelGroup.NegativePhysical)
        {
            select sum(Qty) from tfshBuyersPushLineQty
            where tfshBuyersPushLineQty.BuyersPushId    == this.BuyersPushId
               && tfshBuyersPushLineQty.LineNum         == this.LineNum
               && tfshBuyersPushLineQty.InventLocationId != this.InventLocationId;

            if ((this.Qty + tfshBuyersPushLineQty.Qty) > tBuyersPushLine.onHandQty('', curExt(), _inventAvailabilityFormCache) )
            {
                ttsAbort;
                return checkFailed(this.getOverflowErrorMessage());
            }
        }

        select firstonly BuyersPushId, LineNum, InventLocationId, RecId from tfshBuyersPushLineQty
            where tfshBuyersPushLineQty.BuyersPushId      == this.BuyersPushId
                && tfshBuyersPushLineQty.LineNum          == this.LineNum
                && tfshBuyersPushLineQty.InventLocationId == this.InventLocationId
        join
        firstonly forupdate tInventTransferLine
            where tInventTransferLine.RetailReplenishRefRecId == tfshBuyersPushLineQty.RecId;

        if (tInventTransferLine)
        {
            tInventTransferLine.QtyTransfer = this.Qty;
            tInventTransferLine.doUpdate();
        }

        ttscommit;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchLineInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the invent transaction origin ID of the purchase line by the cross-docking line quantity RecId.
    /// </summary>
    /// <param name="_retailBuyersPushLineQtyRecId">
    /// The recId of the <c>RetailBuyersPushLineQty</c>.
    /// </param>
    /// <returns>
    /// The invent transaction origin ID of the purchase line.
    /// </returns>
    public static InventTransOriginId findPurchLineInventTransOriginId(RefRecId _retailBuyersPushLineQtyRecId)
    {
        RetailBuyersPushLineQty retailBuyersPushLineQty;
        RetailBuyersPushLine    retailBuyersPushLine;
        RetailBuyersPushTable   retailBuyersPushTable;
        PurchLine               purchLine;

        // Find the PO line of the BuyersPushLine
        select firstOnly TableId from retailBuyersPushLineQty
            where retailBuyersPushLineQty.RecId == _retailBuyersPushLineQtyRecId
        join TableId from retailBuyersPushTable
            where retailBuyersPushTable.BuyersPushId == retailBuyersPushLineQty.BuyersPushId
            &&    retailBuyersPushTable.PurchId != ''
        join TableId from retailBuyersPushLine
            where retailBuyersPushLine.BuyersPushId == retailBuyersPushLineQty.BuyersPushId
            &&    retailBuyersPushLine.LineNum      == retailBuyersPushLineQty.LineNum
        join InventTransId, DataAreaId from purchLine
            where purchLine.RecId == RetailBuyersPushLine.RefRecId;

        if (purchLine.InventTransId)
        {
            return InventTransOriginPurchLine::findInventTransOriginId(purchLine.dataAreaId, purchLine.InventTransId);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the total user specified quantity (total of RetailBuyersPushLineQty lines) when inserting data into <c>RetailBuyersPushLineQty</c> table.
    /// </summary>
    public void insert()
    {
        super();

        if (!this.isFormDataSource())
        {
            this.updateLinePushedQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the total user specified quantity (total of RetailBuyersPushLineQty lines) when updating data into <c>RetailBuyersPushLineQty</c> table.
    /// </summary>
    public void update()
    {
        super();

        this.updateLinePushedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinePushedQty</Name>
				<Source><![CDATA[
    private void updateLinePushedQty()
    {
        RetailBuyersPushLine retailBuyersPushLine;

        ttsbegin;

        retailBuyersPushLine = RetailBuyersPushLine::find(this.BuyersPushId, this.LineNum, true);

        if (retailBuyersPushLine)
        {
            // Update RetailBuyersPushLine.UserSpecifiedQty
            retailBuyersPushLine.UserSpecifiedQty = retailBuyersPushLine.totalQty();  // The total user specified quantity (total of RetailBuyersPushLineQty lines).
            retailBuyersPushLine.UserSpecified = retailBuyersPushLine.UserSpecifiedQty != 0; // If there is a user specified Qty then it is user specified.  Otherwise if user cleared value, clear flag.

            retailBuyersPushLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260906</DeveloperDocumentation>
	<Label>@RET1235</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>InventLocationId</TitleField1>
	<TitleField2>Qty</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PushIdLineNumLocationIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<PrimaryIndex>PushIdLineNumLocationIdx</PrimaryIndex>
	<ReplacementKey>PushIdLineNumLocationIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BuyersPushId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BuyersPushId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BuyersPushId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Qty</Name>
			<Label>@SYS59970</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BuyersPushId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBuyersPushId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyInventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PushIdLineNumLocationIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BuyersPushId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WarehouseDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseDataAreaId</Name>
					<Field>WarehouseDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailBuyersPushLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailBuyersPushLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BuyersPushId</Name>
					<Field>BuyersPushId</Field>
					<RelatedField>BuyersPushId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<Field>LineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailBuyersPushTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailBuyersPushTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BuyersPushId</Name>
					<SourceEDT>RetailBuyersPushId</SourceEDT>
					<Field>BuyersPushId</Field>
					<RelatedField>BuyersPushId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BuyersPushIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTable</Name>
					<Field>SalesTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>