<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlInventPackageParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlInventPackageParm extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
    display ItemId itemId()
    {
        ItemId itemId;

        switch (this.RefTableId)
        {
            case tablenum(SalesParmLine):
                itemId = SalesParmLine::findRecId(this.RefRecId).ItemId;
                break;

            case tablenum(SalesLine):
                itemId = SalesLine::findRecId(this.RefRecId).ItemId;
                break;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingUnitFromSalesLine</Name>
				<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
    display InventPackingUnit packingUnitFromSalesLine()
    {
        InventPackingUnit packingUnit;

        switch (this.RefTableId)
        {
            case tablenum(SalesParmLine):
                packingUnit = SalesParmLine::findRecId(this.RefRecId).PackingUnit;
                break;

            case tablenum(SalesLine):
                packingUnit = SalesLine::findRecId(this.RefRecId).PackingUnit;
                break;
        }

        return packingUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static PlInventPackageParm find(
        RefTableId  _refTableId,
        RefRecId    _refRecId,
        PlPackageId _packageId,
        boolean     _forupdate = false)
    {
        PlInventPackageParm inventPackageParm;

        if (_refTableId && _refRecId)
        {
            inventPackageParm.selectForUpdate(_forupdate);

            select firstonly inventPackageParm
                where inventPackageParm.RefTableId == _refTableId &&
                      inventPackageParm.RefRecId   == _refRecId   &&
                      inventPackageParm.PackageId  == _packageId;
        }

        return inventPackageParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromSalesLine</Name>
				<Source><![CDATA[
        public static void updateFromSalesLine(
        SalesLine _salesLine)
    {
        #isoCountryRegionCodes
        PlInventPackageParm inventPackageParm;
        PlPackageId         packageId;
        Qty                 qty;

        if (_salesLine.ProjId)
            return;

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoPL ]))
            return;

        packageId =  InventPackagingUnit::findFirstUnit(_salesLine.ItemId,
                                                        _salesLine.inventDim(),
                                                        _salesLine.PackingUnit).PackageId_PL;
        ttsbegin;

        delete_from inventPackageParm
            where inventPackageParm.RefTableId == _salesLine.TableId &&
                  inventPackageParm.RefRecId   == _salesLine.RecId;

        if (packageId)
        {
            qty = _salesLine.SalesDeliverNow ?
                  _salesLine.SalesDeliverNow :
                  _salesLine.RemainInventPhysical;

            inventPackageParm = PlInventPackageParm::find(_salesLine.TableId,
                                                          _salesLine.RecId,
                                                          packageId,
                                                          true);
            inventPackageParm.PackageId     = packageId;
            inventPackageParm.RefTableId    = _salesLine.TableId;
            inventPackageParm.RefRecId      = _salesLine.RecId;
            inventPackageParm.SalesId       = _salesLine.SalesId;

            inventPackageParm.PackageQty    = InventPackagingUnit::calcPackingUnitQty(_salesLine.PackingUnit,
                                                                                      abs(qty),
                                                                                      _salesLine.ItemId,
                                                                                      _salesLine.inventDim());
            if (qty < 0)
            {
                inventPackageParm.PackageQty = -1 * min(inventPackageParm.PackageQty,
                                                        PlInventPackageTrans::invoicedForCreditNote(_salesLine.InventTransIdReturn));
            }

            inventPackageParm.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromSalesParmLine</Name>
				<Source><![CDATA[
        public static void updateFromSalesParmLine(
        SalesParmLine  _salesParmLine,
        DocumentStatus _docStatus)
    {
        #isoCountryRegionCodes
        PlInventPackageParm inventPackageParm;
        PlInventPackageParm packageSalesLine;
        PlPackageId         packageId;
        Qty                 qty;
        Qty                 salesLineQty;
        Qty                 calculatedQty;
        SalesLine           salesLine;

        if (_docStatus != DocumentStatus::PackingSlip &&
            _docStatus != DocumentStatus::Invoice)
            return;

        if (! _salesParmLine.RecId)
            return;

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoPL ]))
            return;

        salesLine = _salesParmLine.salesLine();

        if (salesLine.ProjId)
            return;

        packageId = InventPackagingUnit::findFirstUnit(salesLine.ItemId,
                                                       salesLine.inventDim(),
                                                       salesLine.PackingUnit).PackageId_PL;

        packageSalesLine = PlInventPackageParm::find(salesLine.TableId,
                                                     salesLine.RecId,
                                                     packageId);

        if (salesLine.SalesDeliverNow)
        {
            salesLineQty = salesLine.SalesDeliverNow;
        }
        else
        {
            if (salesLine.RemainInventPhysical)
            {
                salesLineQty = salesLine.RemainInventPhysical;
            }
            else
            {
                salesLineQty = salesLine.RemainInventFinancial;
            }
        }
        calculatedQty = InventPackagingUnit::calcPackingUnitQty(salesLine.PackingUnit, abs(salesLineQty), salesLine.ItemId, salesLine.inventDim());

        qty = sign(_salesParmLine.InventNow) *
                // if package qty was not changed
                ((packageSalesLine.PackageQty == calculatedQty || packageSalesLine.PackageQty == 0) ?
                    InventPackagingUnit::calcPackingUnitQty(_salesParmLine.PackingUnit,
                                                            abs(_salesParmLine.InventNow),
                                                            _salesParmLine.ItemId,
                                                            _salesParmLine.inventDim()):
                    roundUp(packageSalesLine.PackageQty * abs(_salesParmLine.InventNow) / abs(salesLineQty), 1)
                );

        if (packageSalesLine.RecId)
        {
            ttsbegin;

            inventPackageParm.clear();
            inventPackageParm = PlInventPackageParm::find(_salesParmLine.TableId,
                                                          _salesParmLine.RecId,
                                                          packageId,
                                                          true);
            inventPackageParm.PackageId     = packageId;
            inventPackageParm.RefTableId    = _salesParmLine.TableId;
            inventPackageParm.RefRecId      = _salesParmLine.RecId;
            inventPackageParm.SalesId       = salesLine.SalesId;

            if (_docStatus == DocumentStatus::PackingSlip)
            {
                if (qty > 0)
                {
                    inventPackageParm.PackageQty = qty;
                }
                else if (qty < 0)
                {
                    inventPackageParm.PackageQty = -1 * min(abs(qty),
                                                            PlInventPackageTrans::invoicedForCreditNote(salesLine.InventTransIdReturn));
                }
            }
            else
            {
                if (SalesParmUpdate::find(_salesParmLine.ParmId).SpecQty == SalesUpdate::PackingSlip &&
                    SalesParmSubLine::subLines(_salesParmLine))
                {
                    inventPackageParm.PackageQty = PlInventPackageTrans::remainSalesFinancialPackingSlipLine(
                        salesLine.TableId,
                        salesLine.RecId,
                        inventPackageParm.PackageId,
                        _salesParmLine);
                }
                else
                {
                    inventPackageParm.PackageQty = PlInventPackageTrans::remainSalesFinancial(
                        salesLine.TableId,
                        salesLine.RecId,
                        inventPackageParm.PackageId);
                    inventPackageParm.PackageQty = sign(qty) *
                                                   min(abs(qty),
                                                       abs(inventPackageParm.PackageQty));
                }
            }

            inventPackageParm.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromSalesParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create PlInventPackageParm records referrin salesParmTable for further update during packing slip / invoice update
    /// </summary>
    /// <param name="_salesParmTable">
    /// SalesParmTable record to find original sales order and attach calculated lines to.
    /// </param>
    public static void updateFromSalesParmTable(
        SalesParmTable _salesParmTable)
    {
        #isoCountryRegionCodes
        PlInventPackageParm inventPackageParm, packageSalesTable;
        SalesTable          salesTable;

        if (_salesParmTable.Ordering != DocumentStatus::PackingSlip &&
            _salesParmTable.Ordering != DocumentStatus::Invoice)
            return;

        if (_salesParmTable.ProjId)
            return;

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoPL ]))
            return;

        ttsbegin;

        salesTable = _salesParmTable.salesTable();

        while select PackageId, PackageQty from packageSalesTable
            where packageSalesTable.RefTableId == salesTable.TableId &&
                  packageSalesTable.RefRecId   == salesTable.RecId
        {
            inventPackageParm = PlInventPackageParm::find(_salesParmTable.TableId, _salesParmTable.RecId, packageSalesTable.PackageId, true);
            inventPackageParm.PackageId = packageSalesTable.PackageId;

            if (_salesParmTable.Ordering == DocumentStatus::PackingSlip)
            {
                if (packageSalesTable.PackageQty >= 0)
                {
                    inventPackageParm.PackageQty = packageSalesTable.PackageQty;
                }
                else
                {
                    inventPackageParm.PackageQty = -1 * min(abs(packageSalesTable.PackageQty),
                                                            PlInventPackageTrans::invoicedInTotal(salesTable.TableId,
                                                                                                  salesTable.RecId,
                                                                                                  inventPackageParm.PackageId));
                }
            }
            else
            {
                if (_salesParmTable.salesParmUpdate().SpecQty == SalesUpdate::PackingSlip &&
                    SalesParmSubLine::subLinesTable(_salesParmTable, true))
                {
                    inventPackageParm.PackageQty = PlInventPackageTrans::remainSalesFinancialPackingSlip(
                        salesTable.TableId,
                        salesTable.RecId,
                        inventPackageParm.PackageId,
                        _salesParmTable);
                }
                else
                {
                    inventPackageParm.PackageQty = PlInventPackageTrans::remainSalesFinancial(
                        salesTable.TableId,
                        salesTable.RecId,
                        inventPackageParm.PackageId);
                }

                if (packageSalesTable.PackageQty)
                {
                    inventPackageParm.PackageQty = sign(packageSalesTable.PackageQty) *
                                                       min(abs(packageSalesTable.PackageQty),
                                                           abs(inventPackageParm.PackageQty));
                }
            }
            inventPackageParm.RefTableId = _salesParmTable.TableId;
            inventPackageParm.RefRecId   = _salesParmTable.RecId;
            inventPackageParm.SalesId    = _salesParmTable.SalesId;
            inventPackageParm.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@GLS222463</DeveloperDocumentation>
	<Label>@GLS110318</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>PackageId</TitleField1>
	<TitleField2>PackageQty</TitleField2>
	<ClusteredIndex>RefRecIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RefRecIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Qty</Name>
			<Label>@SYS59970</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackageQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>packingUnitFromSalesLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS81755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackageId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlPackageId</ExtendedDataType>
			<Label>@GLS110339</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackageQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS17214</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PackageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlInventPackageTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PlInventPackageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackageId</Name>
					<SourceEDT>PlPackageId</SourceEDT>
					<Field>PackageId</Field>
					<RelatedField>PackageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PackageIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesParmLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesParmLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesParmTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesParmTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>