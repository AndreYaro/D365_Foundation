<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanColumnRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanColumnRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanColumnRule</c> table.
    /// </summary>
    /// <param name='_budgetPlanColumnRuleRecId'>
    /// The record ID of the <c>BudgetPlanColumnRule</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanColumnRule</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanColumnRule find(
        BudgetPlanColumnRuleRecId   _budgetPlanColumnRuleRecId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanColumnRule budgetPlanColumnRule;

        if (_budgetPlanColumnRuleRecId)
        {
            budgetPlanColumnRule.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanColumnRule.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanColumnRule
                where budgetPlanColumnRule.RecId == _budgetPlanColumnRuleRecId;
        }

        return budgetPlanColumnRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLabel2Name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the field name based on a field label for fields that can be used in budget plan column filters.
    /// </summary>
    /// <param name='_tableName'>
    /// The <c>TableName</c> value of the table.
    /// </param>
    /// <param name='_fieldLabel'>
    /// The <c>FieldLabel</c> label of the field to find.
    /// </param>
    /// <returns>
    /// The <c>FieldName</c> of the field; otherwise, an empty string.
    /// </returns>
    public FieldName fieldLabel2Name(TableName _tableName, FieldLabel _fieldLabel)
    {
        Query                lookupFields;
        QueryBuildFieldList  lookupFieldList;
        FieldName            fieldName;
        FieldLabel           queryFieldLabel;
        TableId              tableId = tableName2Id(_tableName);

        if (tableId)
        {
            lookupFields = new Query(queryStr(BudgetPlanColumnRuleLookup));

            QueryBuildDataSource dataSource = lookupFields.dataSourceName(_tableName);

            if (dataSource)
            {
                lookupFieldList = dataSource.fields();

                for (Counter fieldCount = 1; fieldCount <= lookupFieldList.fieldCount(); fieldCount++)
                {
                    queryFieldLabel = fieldId2pname(tableId, lookupFieldList.field(fieldCount));

                    if (queryFieldLabel == _fieldLabel)
                    {
                        fieldName = fieldId2name(tableId, lookupFieldList.field(fieldCount));
                        break;
                    }
                }
            }
        }

        return fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableLabel2Name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the table name based on a table label for tables that can be used in budget plan column filters.
    /// </summary>
    /// <param name = "_tableLabel">
    /// The <c>TableLabel</c> value of the table to find.
    /// </param>
    /// <returns>
    /// The <c>TableName</c> of the table; otherwise, an empty string.
    /// </returns>
    public TableName tableLabel2Name(TableLabel _tableLabel)
    {
        Query                lookupTables;
        QueryBuildDataSource dataSource;
        TableName            tableName;
        TableId              tableId;

        lookupTables = new Query(queryStr(BudgetPlanColumnRuleLookup));

        for (Counter dataSourceCount = 1; dataSourceCount <= lookupTables.dataSourceCount(); dataSourceCount++)
        {
            dataSource = lookupTables.dataSourceNo(dataSourceCount);
            tableId    = dataSource.table();

            if (tableId2PName(tableId) == _tableLabel)
            {
                tableName = tableId2Name(tableId);
                break;
            }
        }

        return tableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values that will be used for the field reference lookup.
    /// </summary>
    /// <param name = "_refTableId">
    /// The <c>TableId</c> value to use for the lookup.
    /// </param>
    /// <returns>
    /// A <c>TmpSysTableField</c> buffer holding the valid values that can be used in the lookup.
    /// </returns>
    static TmpSysTableField initFieldLookup(RefTableId _refTableId)
    {
        Query                   lookupFields;
        QueryBuildFieldList     lookupFieldList;
        TmpSysTableField        tmpSysTableField;

        lookupFields = new Query(queryStr(BudgetPlanColumnRuleLookup));
        lookupFieldList = lookupFields.dataSourceName(tableid2name(_refTableId)).fields();

        int i = 1;

        while (i <= lookupFieldList.fieldCount())
        {
            tmpSysTableField.FieldId    = lookupFieldList.field(i);
            tmpSysTableField.FieldName  = fieldId2name(_refTableId, tmpSysTableField.FieldId);
            tmpSysTableField.FieldLabel = fieldId2pname(_refTableId, tmpSysTableField.FieldId);

            tmpSysTableField.insert();

            i++;
        }

        return tmpSysTableField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values that will be used for the table reference lookup.
    /// </summary>
    /// <returns>
    /// A <c>TmpSysTableField</c> buffer holding the valid values that can be used in the lookup.
    /// </returns>
    public static TmpSysTableField initTableLookup()
    {
        Query                   lookupTables;
        QueryBuildDataSource    lookupDataSource;
        TmpSysTableField        tmpSysTableField;

        lookupTables = new Query(queryStr(BudgetPlanColumnRuleLookup));

        int i = 1;

        while (i <= lookupTables.dataSourceCount())
        {
            lookupDataSource = lookupTables.dataSourceNo(i);

            tmpSysTableField.DictTableId    = lookupDataSource.table();
            tmpSysTableField.TableLabel     = tableId2pname(tmpSysTableField.DictTableId);
            tmpSysTableField.TableName      = tableId2name(tmpSysTableField.DictTableId);

            tmpSysTableField.insert();

            i++;
        }

        return tmpSysTableField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for reference field name.
    /// </summary>
    /// <param name="_formControl">
    /// The form control tied to the lookup.
    /// </param>
    /// <param name="_refTableId">
    /// The <c>TableId</c> value that will be used to look up the field names.
    /// </param>
    /// <returns> A <c>SysTableFieldLookup</c> object instance. </returns>
    public SysTableFieldLookup lookupReferenceFieldName(FormControl _formControl, RefTableId _refTableId)
    {
        SysTableFieldLookup sysTableFieldLookup;

        if (_refTableId)
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(TmpSysTableField));
            queryBuildDataSource.addSortField(fieldNum(TmpSysTableField, FieldLabel));

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TmpSysTableField), _formControl);
            sysTableLookup.parmQuery(query);

            sysTableLookup.addLookupfield(fieldNum(TmpSysTableField, FieldLabel));
            sysTableLookup.addSelectionField(fieldNum(TmpSysTableField, FieldLabel));

            sysTableLookup.parmTmpBuffer(BudgetPlanColumnRule::initFieldLookup(_refTableId));
            sysTableLookup.performFormLookup();
        }

        return sysTableFieldLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for reference field value.
    /// </summary>
    /// <param name="_formControl">
    /// The form control tied to the lookup.
    /// </param>
    /// <param name="_tableName">
    /// The <c>TableName</c> value that will be used to look up the field values.
    /// </param>
    /// <param name="_fieldName">
    /// The <c>FieldName</c> value that will be used to look up the field values.
    /// </param>
    public static void lookupReferenceFieldValue(FormStringControl _formControl, TableName _tableName, FieldName _fieldName)
    {
        SysDictField sysDictField = SysDictField::newName(_tableName, _fieldName);

        if (sysDictField)
        {
            if (sysDictField.enumId())
            {
                _formControl.performFormLookup(SysLookup::lookupEnum(sysDictField));
            }
            else
            {
                if (_fieldName != fieldstr(BudgetPlanLine, Comment))
                {
                    TableId tableId = tableName2Id(_tableName);
                    FieldId fieldId = fieldName2Id(tableId, _fieldName);

                    if (_fieldName == fieldStr(BudgetPlanLine, TransactionCurrencyCode))
                    {
                        tableId = tableNum(Currency);
                        fieldId = fieldNum(Currency, CurrencyCode);
                    }

                    SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableId, _formControl);

                    Query query = new Query();
                    query.allowCrossCompany(true);

                    QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableId);
                    queryBuildDataSource.addSortField(fieldId);

                    DictTable sysDictTable = new DictTable(tableId);
                    if (sysDictTable.dataPrCompany())
                    {
                        queryBuildDataSource.addGroupByField(fieldId);
                    }
                    sysTableLookup.parmQuery(query);

                    sysTableLookup.addLookupfield(fieldId);
                    if (sysDictTable.titleField1() && (fieldId != sysDictTable.titleField1()))
                    {
                        sysTableLookup.addLookupField(sysDictTable.titleField1());

                        // Need to add group by clauses to ensure these fields are selected as well due as a group by will have been
                        // applied to the main field id.
                        if (sysDictTable.dataPrCompany())
                        {
                            queryBuildDataSource.addGroupByField(sysDictTable.titleField1());
                        }
                    }
                    if (sysDictTable.titleField2() && (fieldId != sysDictTable.titleField2()))
                    {
                        sysTableLookup.addLookupField(sysDictTable.titleField2());

                        // Need to add group by clauses to ensure these fields are selected as well due as a group by will have been
                        // applied to the main field id.
                        if (sysDictTable.dataPrCompany())
                        {
                            queryBuildDataSource.addGroupByField(sysDictTable.titleField2());
                        }
                    }

                    sysTableLookup.performFormLookup();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for reference table name.
    /// </summary>
    /// <param name="_formControl">
    /// The form control tied to the lookup.
    /// </param>
    public void lookupReferenceTableName(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TmpSysTableField), _formControl);
        Query          query          = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(TmpSysTableField));
        queryBuildDataSource.addSortField(fieldNum(TmpSysTableField, TableLabel));

        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupField(fieldNum(TmpSysTableField, TableLabel));
        sysTableLookup.addSelectionField(fieldNum(TmpSysTableField, TableLabel));
        sysTableLookup.setLabel("@SYS68625");

        sysTableLookup.parmTmpBuffer(BudgetPlanColumnRule::initTableLookup());
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference field value.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether a new value has been set.
    /// </param>
    /// <param name="_fieldLabel">
    /// A <c>FieldLabel</c> to be set.
    /// </param>
    /// <returns>
    /// A <c>FieldLabel</c> of the selected reference field.
    /// </returns>
    /// <remarks>
    /// This is an edit method use on the <c>BudgetPlanningConfiguration</c> form.
    /// </remarks>
    public edit FieldLabel editFieldLabel(boolean _set, FieldLabel _fieldLabel)
    {
        if (_set)
        {
            this.FieldName = this.fieldLabel2Name(this.TableName, _fieldLabel);
            this.modifiedField(fieldnum(BudgetPlanColumnRule, FieldName));
        }

        return fieldId2pname(tableName2Id(this.TableName), fieldName2id(tableName2Id(this.TableName), this.FieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTableLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference table value.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether a new value has been set.
    /// </param>
    /// <param name="_tableLabel">
    /// A <c>TableLabel</c> value to be set.
    /// </param>
    /// <returns>
    /// A <c>TableLabel</c> label of the selected reference table.
    /// </returns>
    /// <remarks>
    /// This is an edit method use on the <c>BudgetPlanningConfiguration</c> form.
    /// </remarks>
    public edit TableLabel editTableLabel(boolean _set, TableLabel _tableLabel)
    {
        if (_set)
        {
            this.TableName = this.tableLabel2Name(_tableLabel);
            this.modifiedField(fieldnum(BudgetPlanColumnRule, TableName));
        }

        return this.TableName == '' ? '' : tableId2pname(tableName2Id(this.TableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveEnumFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an enum to either a string or integer representation of the given extended data type.
    /// </summary>
    /// <param name = "_enumId">
    /// The <c>EnumId</c> of the value to convert.
    /// </param>
    /// <param name = "_fieldValue">
    /// The <c>BudgetPlanColumnRuleValue</c> value to convert.
    /// </param>
    /// <param name = "_set">
    /// Boolean value to determine if which type of conversion to execute; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanColumnRuleValue</c> value of the converted enum.
    /// </returns>
    public static BudgetPlanColumnRuleValue resolveEnumFieldValue(EnumId _enumId,  BudgetPlanColumnRuleValue _fieldValue, boolean _set = false)
    {
        BudgetPlanColumnRuleValue resolvedValue;
        int                       integerRepresentation;

        switch (_enumId)
        {
            case enumNum(BudgetClass):
                BudgetClass budgetClass;

                // Case 1: field is 'Expense', 'Revenue'
                if (_set)
                {
                    integerRepresentation = enum2int(str2Enum(budgetClass, _fieldValue));
                    resolvedValue = int2Str(integerRepresentation);
                }
                // Case 2: field is '0', '1'
                else
                {
                    budgetClass = str2Int(_fieldValue);
                    resolvedValue = enum2Str(budgetClass);
                }

                break;

            case enumNum(NoYes):
                NoYes noYes;

                // Case 1: field is 'No', 'Yes'
                if (_set)
                {
                    integerRepresentation = enum2int(str2Enum(noYes, _fieldValue));
                    resolvedValue = int2Str(integerRepresentation);
                }
                // Case 2: field is '0', '1'
                else
                {
                    noYes = str2Int(_fieldValue);
                    resolvedValue = enum2Str(noYes);
                }

                break;
        }

        return resolvedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveRightSideValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a <c>BudgetPlanColumnRuleValue</c> value to the correct representation needed to be saved in the database.
    /// </summary>
    /// <param name = "_set">
    /// Boolean that indicates if the value was set by the user.
    /// </param>
    /// <param name = "_fieldValue">
    /// The <c>BudgetPlanColumnRuleValue</c> value to convert and set the record field to.
    /// </param>
    /// <param name = "_setRightSideValueOne">
    /// Boolean value to to determine which field to modify; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanColumnRuleValue</c> value of the field to display.
    /// </returns>
    public BudgetPlanColumnRuleValue resolveRightSideValue(boolean _set, BudgetPlanColumnRuleValue _fieldValue, boolean _setRightSideValueOne = true)
    {
        const str                 emptyStr = '';
        BudgetPlanColumnRuleValue storedValue;
        BudgetPlanColumnRuleValue displayValue;

        if (this.FieldName != emptyStr && _fieldValue != emptyStr)
        {
            switch (this.FieldName)
            {
                case fieldStr(BudgetPlanLine, BudgetClass):
                    storedValue = BudgetPlanColumnRule::resolveEnumFieldValue(enumNum(BudgetClass), _fieldValue, _set);

                    // When setting, _fieldValue is 'Expense'/'Revenue' so use that for display
                    // When displaying, _fieldValue is '0'/'1' so use the converted value for display
                    displayValue = (_set == true) ? _fieldValue : storedValue;

                    break;

                case fieldStr(BudgetPlanLine, IsRecurring):
                case fieldStr(BudgetPlanLine, IsNewRequest):
                    storedValue = BudgetPlanColumnRule::resolveEnumFieldValue(enumNum(NoYes), _fieldValue, _set);

                    // When setting, _fieldValue is 'No'/'Yes' so use that for display
                    // When displaying, _fieldValue is '0'/'1' so use the converted value for display
                    displayValue = (_set == true) ? _fieldValue : storedValue;

                    break;

                case fieldStr(HcmPositionForecast, Position):
                    storedValue = _fieldValue;
                    displayValue = HcmPosition::find(str2Int64(_fieldValue)).PositionId;

                    break;

                default:
                    storedValue = _fieldValue;
                    displayValue = _fieldValue;
            }

            if (_set && _setRightSideValueOne)
            {
                this.RightSideValueOne = storedValue;
            }
            else if (_set && !_setRightSideValueOne)
            {
                this.RightSideValueTwo = storedValue;
            }
        }

        return displayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRightSideValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference field value of either <c>BudgetPlanColumnRuleValue</c> field one or two.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether a new value has been set.
    /// </param>
    /// <param name="_fieldValue">
    /// A <c>BudgetPlanColumnRuleValue</c> to be set.
    /// </param>
    /// <param name="_columnRuleFieldName">
    /// A <c>FieldName</c> of the <c>BudgetPlanColumnRule</c> record that is being modified or displayed.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanColumnRuleValue</c> of the selected reference field.
    /// </returns>
    protected BudgetPlanColumnRuleValue editRightSideValue(boolean _set, BudgetPlanColumnRuleValue _fieldValue, FieldName _columnRuleFieldName)
    {
        BudgetPlanColumnRuleValue valueToResolve = (_set) ? _fieldValue : this.getFieldValue(_columnRuleFieldName);
        BudgetPlanColumnRuleValue resolvedValue;
        boolean                   isColumnRuleValueOne = (_columnRuleFieldName == fieldStr(BudgetPlanColumnRule, RightSideValueOne));

        if (_set)
        {
            this.setFieldValue(_columnRuleFieldName, _fieldValue);

            boolean fieldIsValid = this.fieldIsEnumType() ? this.isEnumStringValid(valueToResolve) : this.validateField(fieldName2Id(tableNum(BudgetPlanColumnRule), _columnRuleFieldName));

            if (fieldIsValid)
            {
                resolvedValue = this.resolveRightSideValue(_set, valueToResolve, isColumnRuleValueOne);
            }
            else
            {
                warning(strFmt("@Budget:CannotFindColumnRuleValueRecord", this.getFieldValue(_columnRuleFieldName)));
                this.setFieldValue(_columnRuleFieldName, BudgetPlanningConstants::emptyString);
            }
        }
        else
        {
            resolvedValue = this.resolveRightSideValue(_set, valueToResolve, isColumnRuleValueOne);
        }

        return resolvedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRightSideValueTwo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference field value.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether a new value has been set.
    /// </param>
    /// <param name="_fieldValue">
    /// A <c>BudgetPlanColumnRuleValue</c> to be set.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanColumnRuleValue</c> of the selected reference field.
    /// </returns>
    /// <remarks>
    /// This is an edit method used on the <c>BudgetPlanningConfiguration</c> form.
    /// </remarks>
    public edit BudgetPlanColumnRuleValue editRightSideValueTwo(boolean _set, BudgetPlanColumnRuleValue _fieldValue)
    {
        return this.editRightSideValue(_set, _fieldValue, fieldStr(BudgetPlanColumnRule, RightSideValueTwo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRightSideValueOne</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference field value.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether a new value has been set.
    /// </param>
    /// <param name="_fieldValue">
    /// A <c>BudgetPlanColumnRuleValue</c> to be set.
    /// </param>
    /// <returns>
    /// A <c>BudgetPlanColumnRuleValue</c> of the selected reference field.
    /// </returns>
    /// <remarks>
    /// This is an edit method used on the <c>BudgetPlanningConfiguration</c> form.
    /// </remarks>
    public edit BudgetPlanColumnRuleValue editRightSideValueOne(boolean _set, BudgetPlanColumnRuleValue _fieldValue)
    {
        return this.editRightSideValue(_set, _fieldValue, fieldStr(BudgetPlanColumnRule, RightSideValueOne));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIsEnumType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the data type of the field described by the current <c>BudgetPlanColumnRule</c> records
    /// <c>TableName</c> and <c>FieldName</c> values is an enum.
    /// </summary>
    /// <returns>
    /// true if the data type is an enum; otherwise, false.
    /// </returns>
    public boolean fieldIsEnumType()
    {
        boolean   isEnum;
        TableId   tableToCheck = tableName2Id(this.TableName);
        FieldId   fieldToCheck = fieldName2Id(tableToCheck, this.FieldName);
        DictField dictField = new DictField(tableToCheck, fieldToCheck);

        if (dictField)
        {
            isEnum = dictField.enumId();
        }

        return isEnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnumStringValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a given <c>BudgetPlanColumnRuleValue</c> value that represents an enum is a valid symbol.
    /// </summary>
    /// <param name = "_enumValue">
    /// The <c>BudgetPlanColumnRuleValue</c> value to check.
    /// </param>
    /// <returns>
    /// true if the value is a valid enum symbol; otherwise, false.
    /// </returns>
    public boolean isEnumStringValid(BudgetPlanColumnRuleValue _enumValue)
    {
        boolean   enumIsValid;
        DictEnum  dictEnum;

        switch (this.FieldName)
        {
            case fieldStr(BudgetPlanLine, IsNewRequest):
            case fieldStr(BudgetPlanLine, IsRecurring):
                dictEnum = new DictEnum(enumNum(NoYes));

                break;

            case fieldStr(BudgetPlanLine, BudgetClass):
                dictEnum = new DictEnum(enumNum(BudgetClass));

                break;
        }

        if (dictEnum)
        {
            enumIsValid = dictEnum.symbol2Value(_enumValue) != 255;
        }

        return enumIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBudgetPlanColumnRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies <c>BudgetPlanColumnRule</c> records based upon an original <c>BudgetPlanColumn</c> record.
    /// </summary>
    /// <param name = "_sourceBudgetPlanColumn">
    /// Original source <c>BudgetPlanColumn</c> record identifier.
    /// </param>
    /// <param name = "_targetBudgetPlanColumn">
    /// New target <c>BudgetPlanColumn</c> record identifier to link the new records to.
    /// </param>
    public static void copyBudgetPlanColumnRule(
        BudgetPlanColumnRecId   _sourceBudgetPlanColumn,
        BudgetPlanColumnRecId   _targetBudgetPlanColumn)
    {
        BudgetPlanColumnRule    budgetPlanColumnRuleSource;
        BudgetPlanColumnRule    budgetPlanColumnRuleTarget;

        if (_sourceBudgetPlanColumn)
        {
            ttsbegin;

            insert_recordset budgetPlanColumnRuleTarget (TableName, FieldName, Operator, RightSideValueOne, RightSideValueTwo, Column)
                select TableName, FieldName, Operator, RightSideValueOne, RightSideValueTwo, _targetBudgetPlanColumn from budgetPlanColumnRuleSource
                    where budgetPlanColumnRuleSource.Column == _sourceBudgetPlanColumn;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies or sets additional field values based on the modified field.
    /// </summary>
    /// <param name = "_fieldId">
    /// The field ID of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(BudgetPlanColumnRule, TableName):
                this.FieldName = '';
                this.RightSideValueOne = '';
                this.RightSideValueTwo = '';
                break;

            case fieldNum(BudgetPlanColumnRule, FieldName):
                this.RightSideValueOne = '';
                this.RightSideValueTwo = '';
                break;

            case fieldnum(BudgetPlanColumnRule, Operator):
                if (this.Operator != BudgetPlanExpressionOperator::Between)
                {
                    this.RightSideValueTwo = '';
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean   isValid;

        isValid = super();

        if (isValid && this.fieldIsEnumType())
        {
            if (this.Operator != BudgetPlanExpressionOperator::Equals)
            {
                isValid = checkFailed(strFmt("@Budget:OnlyEqualOperatorIsAllowedForEnum", this.FieldName));
            }

            if (isValid)
            {
                BudgetPlanColumnRule budgetPlanColumnRule;

                select firstonly RecId from budgetPlanColumnRule
                    where budgetPlanColumnRule.Column       == this.Column
                        && budgetPlanColumnRule.TableName   == this.TableName
                        && budgetPlanColumnRule.FieldName   == this.FieldName
                        && budgetPlanColumnRule.RecId       != this.RecId;

                if (budgetPlanColumnRule.RecId)
                {
                    TableId tableId = tableName2Id(this.TableName);
                    isValid = checkFailed(strFmt("@Budget:OnlyOneRuleIsAllowedForEnum", fieldid2pname(tableId, fieldName2Id(tableId, this.FieldName))));
                }
            }
        }

        if (isValid && this.Operator == BudgetPlanExpressionOperator::Between && (this.RightSideValueTwo == BudgetPlanningConstants::emptyString))
        {
            isValid = checkFailed(strfmt("@Budget:FieldMustBeFilledIn", fieldid2pname(tablenum(BudgetPlanColumnRule), fieldnum(BudgetPlanColumnRule, RightSideValueTwo))));
        }

        if (isValid && this.RightSideValueOne != BudgetPlanningConstants::emptyString)
        {
            isValid = this.validateField(fieldNum(BudgetPlanColumnRule, RightSideValueOne));
        }

        if (isValid && this.RightSideValueTwo != BudgetPlanningConstants::emptyString)
        {
            isValid = this.validateField(fieldNum(BudgetPlanColumnRule, RightSideValueTwo));
        }

        if (isValid)
        {
            BudgetPlanRecordModificationType modificationType;
            if (!this.RecId)
            {
                modificationType = BudgetPlanRecordModificationType::Insert;
            }
            else
            {
                modificationType = BudgetPlanRecordModificationType::Update;
            }

            isValid = !BudgetPlanColumnRule::isFilterUsedAsLayoutElement(this.TableName, this.FieldName, this.Column)
                        && !BudgetPlanOverlappingColumnValidator::checkOverlapExistsAcrossAnyLayoutForColumn(
                                BudgetPlanOverlappingColumnValidatorRequest::construct()
                                    .setCurrentBudgetPlanColumn(BudgetPlanColumn::find(this.Column))
                                    .setColumnRuleToCheck(this)
                                    .setColumnRuleModificationType(modificationType)
                                    .setShowColumnModificationWarning(true));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLessThanOrGreaterColumnFilterExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a less than or greater than operator is used in a column filter for a given <c>BudgetPlanColumn</c> record.
    /// </summary>
    /// <param name = "_budgetPlanColumn">
    /// The <c>BudgetPlanColumn</c> record to search column filters for.
    /// </param>
    /// <param name = "_showWarningMessage">
    /// A boolean value determining if a warning message is to be displayed; optional.
    /// </param>
    /// <returns>
    /// true if a less than or greater operator exists in a column filter; otherwise, false.
    /// </returns>
    public static boolean checkLessThanOrGreaterColumnFilterExists(BudgetPlanColumn _budgetPlanColumn, boolean _showWarningMessage = false)
    {
        BudgetPlanColumnRule    budgetPlanColumnRule;
        boolean                 checkFilterOperatorExists;

        if (_budgetPlanColumn)
        {
            select firstonly RecId, Operator from budgetPlanColumnRule
                where (budgetPlanColumnRule.Operator == BudgetPlanExpressionOperator::GreaterThan
                    || budgetPlanColumnRule.Operator == BudgetPlanExpressionOperator::LessThan)
                    && budgetPlanColumnRule.Column == _budgetPlanColumn.RecId;

            if (budgetPlanColumnRule.RecId)
            {
                checkFilterOperatorExists = true;

                if (_showWarningMessage)
                {
                    UnitOfMeasureClass scenarioUnitOfMeasureClass = BudgetPlanScenario::find(_budgetPlanColumn.Scenario).UnitOfMeasureClass;

                    warning(strFmt("@Budget:InvalidFilterOperatorWarningMessage",
                                    strLwr(enum2Str(scenarioUnitOfMeasureClass)),
                                    _budgetPlanColumn.Name,
                                    budgetPlanColumnRule.Operator));
                }
            }
        }

        return checkFilterOperatorExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDimensionAttributeColumnRuleFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BudgetPlanColumnRule</c> record that belongs to a given <c>BudgetPlanColumn</c> and has a filter on the given table.
    /// </summary>
    /// <param name = "_budgetPlanColumn">
    /// The record ID of the <c>BudgetPlanColumn</c> record.
    /// </param>
    /// <param name = "_tableName">
    /// The value of the <c>tableName</c> field.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanColumnRule</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanColumnRule findFirstDimensionAttributeColumnRuleFilter(BudgetPlanColumnRecId _budgetPlanColumn, TableName _tableName)
    {
        BudgetPlanColumnRule budgetPlanColumnRule;

        if (_budgetPlanColumn)
        {
            select firstonly budgetPlanColumnRule
                order by budgetPlanColumnRule.RecId
                where budgetPlanColumnRule.Column == _budgetPlanColumn
                    && budgetPlanColumnRule.TableName == _tableName;
        }

        return budgetPlanColumnRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstColumnRuleForColumnTableField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first <c>BudgetPlanColumnRule</c> record that belongs to a given <c>BudgetPlanColumn</c> and has a filter on a given <c>TableName</c> and <c>FieldName</c> values.
    /// </summary>
    /// <param name = "_budgetPlanColumnRecId">
    /// The record ID of the <c>BudgetPlanColumn</c> record.
    /// </param>
    /// <param name = "_tableName">
    /// The <c>TableName</c> of the filtered table.
    /// </param>
    /// <param name = "_fieldName">
    /// The <c>FieldName</c> of the filtered field.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanColumnRule</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanColumnRule findFirstColumnRuleForColumnTableField(BudgetPlanColumnRecId _budgetPlanColumnRecId, TableName _tableName, FieldName _fieldName)
    {
        BudgetPlanColumnRule budgetPlanColumnRule;

        if (_budgetPlanColumnRecId
            && (_tableName != BudgetPlanningConstants::emptyString && _fieldName != BudgetPlanningConstants::emptyString))
        {
            select budgetPlanColumnRule
                order by budgetPlanColumnRule.RecId
                where budgetPlanColumnRule.Column == _budgetPlanColumnRecId
                    && budgetPlanColumnRule.TableName == _tableName
                    && budgetPlanColumnRule.FieldName == _fieldName
                    && budgetPlanColumnRule.Operator != BudgetPlanExpressionOperator::GreaterThan
                    && budgetPlanColumnRule.Operator != BudgetPlanExpressionOperator::LessThan;
        }

        return budgetPlanColumnRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a given field is valid to be entered into the database.
    /// </summary>
    /// <param name = "_fieldIdToCheck">
    /// The <c>FieldId</c> value of the field to check.
    /// </param>
    /// <returns>
    /// true if the value in the field is able to be entered into the database; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean   isValid;

        isValid = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(BudgetPlanColumnRule, RightSideValueOne):
            case fieldNum(BudgetPlanColumnRule, RightSideValueTwo):
                if (this.TableName != BudgetPlanningConstants::emptyString
                    && this.FieldName != BudgetPlanningConstants::emptyString
                    && this.getFieldValue(fieldId2Name(this.TableId, _fieldIdToCheck)) != BudgetPlanningConstants::emptyString
                    && this.FieldName != fieldStr(BudgetPlanLine, Comment))
                {
                    if (this.fieldIsEnumType())
                    {
                        DictEnum dictEnum = new DictEnum(enumNum(BudgetClass));

                        isValid = isValid
                                    && dictEnum.value2Symbol(str2Int(this.getFieldValue(fieldId2Name(this.TableId, _fieldIdToCheck)))) != BudgetPlanningConstants::emptyString;
                    }
                    else
                    {
                        TableId tableToCheck;
                        FieldId fieldToCheck;

                        if (this.FieldName == fieldStr(BudgetPlanLine, TransactionCurrencyCode))
                        {
                            tableToCheck = tableNum(Currency);
                            fieldToCheck = fieldNum(Currency, CurrencyCode);
                        }
                        else
                        {
                            tableToCheck = tableName2Id(this.TableName);
                            fieldToCheck = fieldName2Id(tableToCheck, this.FieldName);
                        }

                        Query query = new Query();
                        query.allowCrossCompany(true);
                        QueryBuildDataSource queryDataSource = query.addDataSource(tableToCheck);
                        QueryBuildRange queryRange = queryDataSource.addRange(fieldToCheck);
                        queryRange.value(this.getFieldValue(fieldId2Name(this.TableId, _fieldIdToCheck)));

                        if (queryRange.valid())
                        {
                            QueryRun queryRun = new QueryRun(query);
                            isValid = isValid && (queryRun.next());
                        }
                        else
                        {
                            isValid = false;
                        }
                    }
                }

                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFilterUsedAsLayoutElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the column rule filters for the column is part of any <c>BudgetPlanLayout</c>'s <c>BudgetPlanLayoutElement</c>.
    /// </summary>
    /// <param name = "_budgetPlanColumnTableName">
    /// The value of the <c>TableName</c> field of the <c>BudgetPlanColumnRule</c> record.
    /// </param>
    /// <param name = "_budgetPlanColumnFieldName">
    /// The value of the <c>FieldName</c> field of the <c>BudgetPlanColumnRule</c> record.
    /// </param>
    /// <param name = "_budgetPlanColumnRecId">
    /// The record ID of the <c>BudgetPlanColumn</c> record.
    /// </param>
    /// <returns>
    /// true, if the column is part of the layout; otherwise, false.
    /// </returns>
    public static boolean isFilterUsedAsLayoutElement(
        TableName             _budgetPlanColumnTableName,
        FieldName             _budgetPlanColumnFieldName,
        BudgetPlanColumnRecId _budgetPlanColumnRecId)
    {
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        BudgetPlanLayoutElement budgetPlanLayoutElementForRow;
        BudgetPlanRow           budgetPlanRow;
        boolean                 doesExist = false;
        FieldName               fieldName;

        if (tableStr(MainAccount) != _budgetPlanColumnTableName)
        {
            fieldName = BudgetPlanLineFieldFilterMapping::getRowTableFieldMappingForColumnFilter([_budgetPlanColumnTableName, _budgetPlanColumnFieldName]);

            select firstonly Layout from budgetPlanLayoutElement
                where budgetPlanLayoutElement.ElementDefinition == _budgetPlanColumnRecId
                exists join budgetPlanLayoutElementForRow
                    where budgetPlanLayoutElementForRow.Layout == budgetPlanLayoutElement.Layout
                    exists join budgetPlanRow
                        where budgetPlanRow.RecId == budgetPlanLayoutElementForRow.ElementDefinition
                            && budgetPlanRow.FieldName == fieldName;

            doesExist = budgetPlanLayoutElement.Layout;
        }

        if (tableStr(MainAccount)   == _budgetPlanColumnTableName
            || tableStr(ProjTable)  == _budgetPlanColumnTableName
            || tableStr(AssetTable) == _budgetPlanColumnTableName)
        {
            BudgetPlanLayout        budgetPlanLayout;
            DimensionHierarchyLevel dimensionHierarchyLevel;
            DimensionAttribute      dimensionAttribute;

            select firstonly RecId from budgetPlanLayout
                exists join budgetPlanLayoutElement
                where budgetPlanLayoutElement.ElementDefinition == _budgetPlanColumnRecId
                    && budgetPlanLayoutElement.Layout == budgetPlanLayout.RecId
                    exists join dimensionHierarchyLevel
                    where dimensionHierarchyLevel.DimensionHierarchy == budgetPlanLayout.DimensionHierarchy
                        exists join dimensionAttribute
                        where dimensionAttribute.RecId == dimensionHierarchyLevel.DimensionAttribute
                            && dimensionAttribute.BackingEntityTableName == _budgetPlanColumnTableName;

            doesExist = budgetPlanLayout.RecId;
        }

        if (doesExist)
        {
            warning("@Budget:CannotAddColumnRuleFilter");
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the column rule with the specified values exists.
    /// </summary>
    /// <param name = "_columnRecId">
    /// The record ID of the <c>BudgetPlanColumn</c> record.
    /// </param>
    /// <param name = "_tableName">
    /// The value of the <c>TableName</c> field of the <c>BudgetPlanColumnRule</c> record.
    /// </param>
    /// <param name = "_fieldName">
    /// The value of the <c>FieldName</c> field of the <c>BudgetPlanColumnRule</c> record.
    /// </param>
    /// <param name = "_rightSideValueOne">
    /// The <c>BudgetPlanColumnRuleValue</c> value to check.
    /// </param>
    /// <param name = "_rightSideValueTwo">
    /// The second <c>BudgetPlanColumnRuleValue</c> value to check; optional.
    /// </param>
    /// <param name = "_operator">
    /// The <c>BudgetPlanExpressionOperator</c> value to check; optional.
    /// </param>
    /// <returns>
    /// true, if the column rule record with the corresponding values is found; otherwise, false.
    /// </returns>
    public static boolean existsRule(
        BudgetPlanColumnRecId           _columnRecId,
        TableName                       _tableName,
        FieldName                       _fieldName,
        BudgetPlanColumnRuleValue       _rightSideValueOne,
        BudgetPlanColumnRuleValue       _rightSideValueTwo = BudgetPlanningConstants::emptyString,
        BudgetPlanExpressionOperator    _operator = BudgetPlanExpressionOperator::Equals)
    {
        BudgetPlanColumnRule budgetPlanColumnRule;

        select firstonly RecId from budgetPlanColumnRule
            where budgetPlanColumnRule.Column               == _columnRecId
                && budgetPlanColumnRule.TableName           == _tableName
                && budgetPlanColumnRule.FieldName           == _fieldName
                && budgetPlanColumnRule.RightSideValueOne   == _rightSideValueOne
                && budgetPlanColumnRule.RightSideValueTwo   == _rightSideValueTwo
                && budgetPlanColumnRule.Operator            == _operator;

        return budgetPlanColumnRule.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetPlanColumnRecId columnRecId = this.Column;

        super();
        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByElement,
            columnRecId,
            BudgetPlanMappingRefreshType::RefreshByElement,
            columnRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByElement,
            this.Column,
            BudgetPlanMappingRefreshType::RefreshByElement,
            this.Column);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByElement,
            this.Column,
            BudgetPlanMappingRefreshType::RefreshByElement,
            this.Column);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = super();

        if (isValid)
        {
            isValid = isValid && !BudgetPlanOverlappingColumnValidator::checkOverlapExistsAcrossAnyLayoutForColumn(
                                    BudgetPlanOverlappingColumnValidatorRequest::construct()
                                        .setCurrentBudgetPlanColumn(BudgetPlanColumn::find(this.Column))
                                        .setColumnRuleToCheck(this)
                                        .setColumnRuleModificationType(BudgetPlanRecordModificationType::Delete)
                                        .setShowColumnModificationWarning(true));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@Budget:ColumnRuleDeveloperDocumentation</DeveloperDocumentation>
	<Label>@Budget:ColumnRuleDisplayName</Label>
	<SingularLabel>@Budget:ColumnRuleDisplayNameSingular</SingularLabel>
	<TitleField1>TableName</TitleField1>
	<TitleField2>FieldName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Column</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Operator</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Budget:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Column</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Operator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RightSideValueOne</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RightSideValueTwo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Column</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BudgetPlanColumnRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TableName</ExtendedDataType>
			<Label>@Budget:RuleTableName</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<Label>@Budget:RuleFieldName</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Operator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetPlanExpressionOperator</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RightSideValueOne</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanColumnRuleValue</ExtendedDataType>
			<Label>@Budget:RightSideValueOne</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RightSideValueTwo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanColumnRuleValue</ExtendedDataType>
			<Label>@Budget:RightSideValueTwo</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetPlanColumnIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Column</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FieldName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RightSideValueOne</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanColumn</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanColumn</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ColumnRecId</Name>
					<Field>Column</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>