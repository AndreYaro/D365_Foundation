<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DIOTAddlInfoForNoVendorLedger_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DIOTAddlInfoForNoVendorLedger_MX extends DIOTAdditionalInfoForNoVendor_MX
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for mandatory fields based on the vendor type that was selected.
    /// </summary>
    /// <param name="_taxGroup">
    /// Used to pass as a parameter to the <c>isCommonTaxCodeMarked</c> method.
    /// </param>
    /// <param name="_taxItemGroup">
    /// Used to pass as a parameter to the <c>isCommonTaxCodeMarked</c> method.
    /// </param>
    /// <param name="_ledgerJournalType">
    /// To check the type of the <c>LedgerJournalType</c> enumeration type.
    /// </param>
    /// <param name="_accountType">
    /// To check the type of the account.
    /// </param>
    /// <param name="_offsetAccountType">
    /// To check offset account type.
    /// </param>
    /// <returns>
    /// true if all mandatory fields are entered; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Called from an invoice journal and expense forms for Mexico.
    /// </remarks>
    public boolean checkMandatoryFields(
        TaxGroup            _taxGroup,
        TaxItemGroup        _taxItemGroup,
        LedgerJournalType   _ledgerJournalType,
        LedgerJournalACType _accountType        = LedgerJournalACType::Vend,
        LedgerJournalACType _offsetAccountType  = LedgerJournalACType::Vend
        )
    {
        boolean ret = true;
        boolean isCommonTaxCodeMarked;
        boolean isVendorType;
        boolean otherTypeNotAllowed;

        switch (_ledgerJournalType)
        {
            case LedgerJournalType::Cost :
                isCommonTaxCodeMarked = DIOTAdditionalInfoForNoVendor_MX::isCommonTaxCodeMarked(_taxGroup, _taxItemGroup);
                isVendorType          = DIOTAddlInfoForNoVendorLedger_MX::isOffsetTypeVend(_offsetAccountType);
                otherTypeNotAllowed   = DIOTAddlInfoForNoVendorLedger_MX::isOffsetTypeNotAllowed(_offsetAccountType);
                break;

            case LedgerJournalType::VendInvoiceRegister :
                isCommonTaxCodeMarked = DIOTAdditionalInfoForNoVendor_MX::isCommonTaxCodeMarked(_taxGroup, _taxItemGroup);
                isVendorType          = DIOTAddlInfoForNoVendorLedger_MX::isVendType(_accountType, _offsetAccountType);
                otherTypeNotAllowed   = DIOTAddlInfoForNoVendorLedger_MX::isOtherTypeNotAllowed(_accountType, _offsetAccountType);
                break;

            default:
                break;
        }

        if (!isVendorType && !otherTypeNotAllowed && isCommonTaxCodeMarked)
        {
            ret = this.checkValidations();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOffsetTypeNotAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the form controls, depending on the offset account and the common sales tax
    /// code with the additional information check box marked.
    /// </summary>
    /// <param name="_offsetAccountType">
    /// The offset account type of the record.
    /// </param>
    /// <returns>
    /// true if the specified offset account type is of a type that is not allowed.
    /// </returns>
    /// <remarks>
    /// Enable or disables the form controls.
    /// </remarks>
    public static boolean isOffsetTypeNotAllowed(LedgerJournalACType _offsetAccountType)
    {
        // Customer - Ledger combination and vice versa
        // Fixed Asset - Ledger combination and vice versa
        // In that case, even though DIOT check box is marked,
        // all fields including operation type should be disabled and blank
        return (_offsetAccountType   == LedgerJournalACType::Cust
               || _offsetAccountType == LedgerJournalACType::FixedAssets);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOffsetTypeVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether either the account type or the offset account type is vendor.
    /// </summary>
    /// <param name="_offsetAccountType">
    /// The offset account type of the record.
    /// </param>
    /// <returns>
    /// true if either the account type or the offset account type is vendor.
    /// </returns>
    public static boolean isOffsetTypeVend(LedgerJournalACType _offsetAccountType)
    {
        return (_offsetAccountType == LedgerJournalACType::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOtherTypeNotAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the form controls, depending on the account type, offset account, and the
    /// common sales tax code with the additional information check box marked.
    /// </summary>
    /// <param name="_accountType">
    /// The account type of the record.
    /// </param>
    /// <param name="_offsetAccountType">
    /// The offset account type of the record.
    /// </param>
    /// <returns>
    /// true if the given account type is of a type that is not allowed.
    /// </returns>
    /// <remarks>
    /// Enable or disables the form controls.
    /// </remarks>
    public static boolean isOtherTypeNotAllowed(
        LedgerJournalACType _accountType,
        LedgerJournalACType _offsetAccountType)
    {
        // Customer - Ledger combination and vice versa
        // Fixed Asset - Ledger combination and vice versa
        // In that case, even though DIOT check box is marked,
        // all fields including operation type should be disabled and blank
        return (((_accountType          == LedgerJournalACType::Cust
               || _accountType          == LedgerJournalACType::FixedAssets)
               && _offsetAccountType    == LedgerJournalACType::Ledger)
               || (_accountType         == LedgerJournalACType::Ledger
               && (_offsetAccountType   == LedgerJournalACType::Cust
               || _offsetAccountType    == LedgerJournalACType::FixedAssets)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether either the account type or the offset account type is vendor.
    /// </summary>
    /// <param name="_accountType">
    /// The account type of the record.
    /// </param>
    /// <param name="_offsetAccountType">
    /// The offset account type of the record.
    /// </param>
    /// <returns>
    /// true if either the account type or the offset account type is vendor.
    /// </returns>
    public static boolean isVendType(
        LedgerJournalACType _accountType,
        LedgerJournalACType _offsetAccountType)
    {
        return (_accountType == LedgerJournalACType::Vend
                || _offsetAccountType == LedgerJournalACType::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteAdditionalInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete additional information while posting the journals when there is no common tax codes
    /// (DiotAddInfo_MX check box is marked) are not attached
    /// update ledgerJournalTrans.OperationType_MX field value to Blank.
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    /// Used to pass as parameter to method validateDeleteAdditionalInfo().
    /// </param>
    /// <returns>
    /// True if Operation type field is entered; False otherwise
    /// </returns>
    /// <remarks>
    /// Called from class LedgerJournalTransUpdate --> checkWhenPost method.
    /// </remarks>
    public static boolean validateDeleteAdditionalInfo(RefRecId _ledgerJournalTransRecId)
    {
        LedgerJournalType                   ledgerJournalType;
        DIOTAddlInfoForNoVendorLedger_MX    diotAddlInfoForNoVendorLedger;
        LedgerJournalTrans                  ledgerJournalTrans;
        boolean                             ok = true;

        ledgerJournalTrans  = LedgerJournalTrans::findRecId(_ledgerJournalTransRecId, true);
        ledgerJournalType   = LedgerJournalTable::find(ledgerJournalTrans.JournalNum).JournalType;

        if (ledgerJournalType == LedgerJournalType::VendInvoiceRegister)
        {
            ok = ledgerJournalTrans.checkOpertaionType_MX(ledgerJournalType);
        }

        if (ok && ! DIOTAdditionalInfoForNoVendor_MX::isCommonTaxCodeMarked(ledgerJournalTrans.TaxGroup, ledgerJournalTrans.TaxItemGroup))
        {
            ttsbegin;
            ledgerJournalTrans.updateOperationType_MX();

            select firstonly forupdate diotAddlInfoForNoVendorLedger
                where diotAddlInfoForNoVendorLedger.LedgerJournalTrans == ledgerJournalTrans.RecId;

            if (diotAddlInfoForNoVendorLedger)
            {
               diotAddlInfoForNoVendorLedger.delete();
            }
            ttscommit;
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>MX</CountryRegionCodes>
	<DeveloperDocumentation>@SYS329610</DeveloperDocumentation>
	<Label>@SYS315842</Label>
	<TableGroup>Transaction</TableGroup>
	<Extends>DIOTAdditionalInfoForNoVendor_MX</Extends>
	<Modules>APARShared</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DIOTAdditionalInfoForNoVendor_MX</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DIOTAdditionalInfoForNoVendor_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>DIOTAdditionalInfoLedgerJournalTrans_MX</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>