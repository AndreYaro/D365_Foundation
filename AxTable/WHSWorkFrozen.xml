<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkFrozen</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkFrozen extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFrozenWorkQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to create a work frozen record using a set of passed in fields
    /// </summary>
    /// <param name="_workId">
    /// The overpicking work id
    /// </param>
    /// <param name="_frozenWorkId">
    /// The work id of the work unit to be frozen by the overpick work unit
    /// </param>
    /// <param name="_inventTransId">
    /// The Lot Id of the frozen work, used to pick inventory
    /// </param>
    /// <param name="_inventDimId">
    /// The above location Dimension Id of the work being frozen
    /// </param>
    /// <param name="_handlingQtyFrozen">
    /// The handling quantity that is being frozen.
    /// </param>
    /// <param name="_handlingWeightToFreeze">
    /// The handling weight quantity that is being frozen.
    /// </param>
    /// <returns>
    /// The work frozen record created
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkFrozen createFrozenWorkQuantities(
        WHSWorkId			_workId,
        WHSWorkId			_frozenWorkId,
        InventTransId		_inventTransId,
        InventDimId			_inventDimId,
        InventHandlingQty	_handlingQtyFrozen,
        WHSTransWeight		_handlingWeightToFreeze)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightHandlingWeightLogic(funcName(), InventTransOrigin::findByInventTransId(_inventTransId).ItemId, _handlingWeightToFreeze))
        {
            return WHSWorkFrozen::createWorkFrozenQuantities(_workId, _frozenWorkId, _inventTransId, _inventDimId, _handlingQtyFrozen, _handlingWeightToFreeze);
        }

        return WHSWorkFrozen::createWorkFrozen(_workId, _frozenWorkId, _inventTransId, _inventDimId, _handlingQtyFrozen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkFrozenQuantities</Name>
				<Source><![CDATA[
    private static WHSWorkFrozen createWorkFrozenQuantities(
        WHSWorkId			_workId,
        WHSWorkId			_frozenWorkId,
        InventTransId		_inventTransId,
        InventDimId			_inventDimId,
        InventHandlingQty	_handlingQtyFrozen,
        WHSTransWeight		_handlingWeightToFreeze)
    {
        WHSWorkFrozen   workFrozen;

        ttsbegin;

        workFrozen.WorkId                   = _workId;
        workFrozen.FrozenWorkId             = _frozenWorkId;
        workFrozen.InventTransId            = _inventTransId;
        workFrozen.FrozenWorkInventDimId	= _inventDimId;
        workFrozen.Qty                      = _handlingQtyFrozen;
        workFrozen.TransactionWeight        = _handlingWeightToFreeze;
        workFrozen.insert();

        ttscommit;

        return workFrozen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkFrozen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to create a work frozen record using a set of passed in fields
    /// </summary>
    /// <param name="_workId">
    /// The overpicking work id
    /// </param>
    /// <param name="_frozenWorkId">
    /// The work id of the work unit to be frozen by the overpick work unit
    /// </param>
    /// <param name="_inventTransId">
    /// The Lot Id of the frozen work, used to pick inventory
    /// </param>
    /// <param name="_inventDimId">
    /// The above location Dimension Id of the work being frozen
    /// </param>
    /// <param name="_qtyFrozen">
    /// The quantity that is being frozen.
    /// </param>
    /// <returns>
    /// The work frozen record created
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    public static WHSWorkFrozen createWorkFrozen(
        WHSWorkId       _workId,
        WHSWorkId       _frozenWorkId,
        InventTransId   _inventTransId,
        InventDimId     _inventDimId,
        Qty             _qtyFrozen)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), InventTransOrigin::findByInventTransId(_inventTransId).ItemId);

        return WHSWorkFrozen::createWorkFrozenQuantities(_workId, _frozenWorkId, _inventTransId, _inventDimId, _qtyFrozen, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsWorkFrozen</c> record exists.
	/// </summary>
	/// <param name="_workId">
	/// Work id of the record.
	/// </param>
	/// <param name="_frozenWorkId">
	/// Frozen work id of the record.
	/// </param>
	/// <param name="_inventTransId">
	/// Inventory transaction id of the record.
	/// </param>
	/// <param name="_inventDimId">
	/// Dimension id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
        public static boolean exist(
        WHSWorkId       _workId,
        WHSWorkId       _frozenWorkId,
        InventTransId   _inventTransId,
        InventDimId     _inventDimId)
    {
        return (_workId && _frozenWorkId && _inventTransId && _inventDimId) &&
               (select firstonly RecId from whsWorkFrozen
                where whsWorkFrozen.WorkId                  == _workId
                &&    whsWorkFrozen.FrozenWorkId            == _frozenWorkId
                &&    whsWorkFrozen.InventTransId           == _inventTransId
                &&    whsWorkFrozen.FrozenWorkInventDimId   == _inventDimId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkFrozen</c> record with given parameters.
	/// </summary>
	/// <param name="_workId">
	/// Work id of the record.
	/// </param>
	/// <param name="_frozenWorkId">
	/// Frozen work id of the record.
	/// </param>
	/// <param name="_inventTransId">
	/// Inventory transaction id of the record.
	/// </param>
	/// <param name="_inventDimId">
	/// Dimension id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
        public static WHSWorkFrozen find(
        WHSWorkId       _workId,
        WHSWorkId       _frozenWorkId,
        InventTransId   _inventTransId,
        InventDimId     _inventDimId,
        boolean         _forupdate = false)
    {
        WHSWorkFrozen    workFrozen;

        if (_workId
        &&  _frozenWorkId
        &&  _inventTransId
        &&  _inventDimId)
        {
            workFrozen.selectForUpdate(_forupdate);

            select firstonly workFrozen
                where workFrozen.WorkId                             == _workId
                &&    workFrozen.FrozenWorkId                       == _frozenWorkId
                &&    workFrozen.InventTransId                      == _inventTransId
                &&    workFrozen.FrozenWorkInventDimId              == _inventDimId;
        }

        return workFrozen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndWriteFrozenWorkQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and add qty to a work frozen record or creates a work frozen record if it does not exist.
    /// </summary>
    /// <param name="_workId">
    /// The overpicking work id
    /// </param>
    /// <param name="_frozenWorkId">
    /// The work id of the work unit to be frozen by the overpick work unit
    /// </param>
    /// <param name="_inventTransId">
    /// The Lot Id of the frozen work, used to pick inventory
    /// </param>
    /// <param name="_inventDimId">
    /// The above location Dimension Id of the work being frozen
    /// </param>
    /// <param name="_qtyFrozen">
    /// The quantity in the handling unit that is being frozen.
    /// </param>
    /// <param name="_transWeight">
    /// The weight that is being frozen
    /// </param>
    /// <returns>
    /// The work frozen record updated or created.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkFrozen findAndWriteFrozenWorkQuantities(
        WHSWorkId           _workId,
        WHSWorkId           _frozenWorkId,
        InventTransId       _inventTransId,
        InventDimId         _inventDimId,
        InventHandlingQty   _qtyFrozen,
        WHSTransWeight      _transWeight)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightHandlingWeightLogic(funcName(), InventTransOrigin::findByInventTransId(_inventTransId).ItemId, _transWeight))
        {
            return WHSWorkFrozen::findAndWriteWorkFrozenQuantities(_workId,
                                    _frozenWorkId,
                                    _inventTransId,
                                    _inventDimId,
                                    _qtyFrozen,
                                    _transWeight);
        }

        return WHSWorkFrozen::findAndWriteWorkFrozen(_workId,
                                _frozenWorkId,
                                _inventTransId,
                                _inventDimId,
                                _qtyFrozen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndWriteWorkFrozenQuantities</Name>
				<Source><![CDATA[
    private static WHSWorkFrozen findAndWriteWorkFrozenQuantities(
        WHSWorkId           _workId,
        WHSWorkId           _frozenWorkId,
        InventTransId       _inventTransId,
        InventDimId         _inventDimId,
        InventHandlingQty   _qtyFrozen,
        WHSTransWeight      _transWeight)
    {
        WHSWorkFrozen   workFrozen;

        ttsbegin;

        workFrozen = WHSWorkFrozen::find(_workId, _frozenWorkId, _inventTransId, _inventDimId, true);

        if (workFrozen.recId)
        {
            workFrozen.Qty                  += _qtyFrozen;
            workFrozen.TransactionWeight    += _transWeight;
            workFrozen.update();
        }
        else
        {
            workFrozen.WorkId                   = _workId;
            workFrozen.FrozenWorkId             = _frozenWorkId;
            workFrozen.InventTransId            = _inventTransId;
            workFrozen.FrozenWorkInventDimId    = _inventDimId;
            workFrozen.Qty                      = _qtyFrozen;
            workFrozen.TransactionWeight        = _transWeight;
            workFrozen.insert();
        }

        ttscommit;

        return workFrozen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndWriteWorkFrozen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and add qty to a work frozen record or creates a work frozen record if it does not exist.
    /// </summary>
    /// <param name="_workId">
    /// The overpicking work id
    /// </param>
    /// <param name="_frozenWorkId">
    /// The work id of the work unit to be frozen by the overpick work unit
    /// </param>
    /// <param name="_inventTransId">
    /// The Lot Id of the frozen work, used to pick inventory
    /// </param>
    /// <param name="_inventDimId">
    /// The above location Dimension Id of the work being frozen
    /// </param>
    /// <param name="_qtyFrozen">
    /// The quantity that is being frozen.
    /// </param>
    /// <returns>
    /// The work frozen record updated or created.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    public static WHSWorkFrozen findAndWriteWorkFrozen(
        WHSWorkId       _workId,
        WHSWorkId       _frozenWorkId,
        InventTransId   _inventTransId,
        InventDimId     _inventDimId,
        Qty             _qtyFrozen)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), InventTransOrigin::findByInventTransId(_inventTransId).ItemId);

        return WHSWorkFrozen::findAndWriteWorkFrozenQuantities(_workId,
                                _frozenWorkId,
                                _inventTransId,
                                _inventDimId,
                                _qtyFrozen,
                                0); // weight is not relevant for non-cw enabled warehouse items
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNewWork</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves all <c>WHSWorkFrozen</c> records associated with a work header to a new work header.
    /// </summary>
    /// <param name="_origWorkId">
    ///    The Work ID the <c>WHSWorkFrozen</c> records are currently associated with.
    /// </param>
    /// <param name="_newWorkId">
    ///    The Work ID the <c>WHSWorkFrozen</c> records must be associated with.
    /// </param>
    [Hookable(false)]
    internal static void moveToNewWork(WHSWorkId        _origWorkId,
                                       WHSWorkId        _newWorkId)
    {
        if (!_origWorkId || !_newWorkId)
        {
            return;
        }

        WHSWorkFrozen workFrozen;

        ttsbegin;

        update_recordSet workFrozen
            setting WorkId = _newWorkId
            where workFrozen.WorkId == _origWorkId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFrozenLinksForWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears records, that are based on on passed work. 
    /// </summary>
    /// <param name = "_workId">WorkId to clear links to.</param>
    internal static void clearFrozenLinksForWork(WHSWorkId _workId)
    {
        if (_workId)
        {
            WHSWorkFrozen workFrozen;

            Microsoft.Dynamics.Ax.Xpp.PlatformExtensions.CommonExtensions::SetSqlDeleteIndexHint(workFrozen, indexStr(WHSWorkFrozen, WorkIdFrozenWorkIdx));

            delete_from workFrozen
                where workFrozen.WorkId == _workId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4502</DeveloperDocumentation>
	<FormRef>WHSWorkTable</FormRef>
	<Label>@WAX416</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FrozenWorkId</TitleField1>
	<TitleField2>WorkId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WorkIdFrozenWorkIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkIdFrozenWorkIdx</PrimaryIndex>
	<ReplacementKey>WorkIdFrozenWorkIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FrozenWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FrozenWorkInventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FrozenWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FrozenWorkInventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FrozenWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FrozenWorkInventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FrozenWorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<Label>@WAX417</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FrozenWorkInventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSTransWeight</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkIdFrozenWorkIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FrozenWorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FrozenWorkInventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FrozenWorkWorkIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FrozenWorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FrozenWorkInventDimId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Qty</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FrozenWorkInventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>FrozenWorkInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<SourceEDT>WHSWorkId</SourceEDT>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTableFrozen</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Frozen</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FrozenWorkId</Name>
					<SourceEDT>WHSWorkId</SourceEDT>
					<Field>FrozenWorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>