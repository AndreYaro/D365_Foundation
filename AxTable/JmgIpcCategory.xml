<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgIpcCategory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgIpcCategory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>JmgIpcCategory</c> record in the database.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// An indirect activity with the same ID exists.
    /// </exception>
    void insert()
    {
        if (JmgIpcActivity::findActivityId(this.Category))
            throw error("@SYS38700");

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stampType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the registration type that is associated with this <c>JmgIpcCategory</c> record.
    /// </summary>
    /// <param name="_set">
    /// true if the registration type must be updated; otherwise, false.
    /// </param>
    /// <param name="_value">
    /// The new value of the registration type.
    /// </param>
    /// <returns>
    /// The registration type that is associated with this <c>JmgIpcCategory</c> record.
    /// </returns>
    public edit JmgStampTypeCategory stampType(boolean _set, JmgStampTypeCategory _value)
    {
        JmgStampTypeCategory ret;
        if (_set)
        {
            switch (_value)
            {
                case JmgStampTypeCategory::Work:
                    this.Type = JmgStampTypeEnum::Work;
                    break;
                case JmgStampTypeCategory::Break:
                    this.Type = JmgStampTypeEnum::Break;
                    break;
                case JmgStampTypeCategory::EventCode:
                    this.Type = JmgStampTypeEnum::EventCode;
                    break;
                case JmgStampTypeCategory::OnCall:
                    this.Type = JmgStampTypeEnum::OnCall;
                    break;
                default:
                    this.Type = JmgStampTypeEnum::Work;
                    break;
            }
        }

        switch (this.Type)
        {
            case JmgStampTypeEnum::Work:
                ret = JmgStampTypeCategory::Work;
                break;
            case JmgStampTypeEnum::Break:
                ret = JmgStampTypeCategory::Break;
                break;
            case JmgStampTypeEnum::EventCode:
                ret = JmgStampTypeCategory::EventCode;
                break;
            case JmgStampTypeEnum::OnCall:
                ret = JmgStampTypeCategory::OnCall;
                break;
            default:
                ret = JmgStampTypeCategory::Work;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;
        JmgIpcActivity jmgIpcActivity;

        ret = super();

        if (ret)
        {
            if (this.orig().Type != this.Type)
            {
                select firstonly jmgIpcActivity
                    where jmgIpcActivity.Category == this.Category;
                if (jmgIpcActivity)
                {
                    ret = checkFailed("@SYS24792");
                }
            }
        }

        if (ret && (this.Type == JmgStampTypeEnum::Error ||
                    this.Type == JmgStampTypeEnum::Absence))
        {
            ret = checkFailed(strfmt("@SYS32810", new DictField(tablenum(JmgIpcCategory), fieldnum(JmgIpcCategory, Type)).label()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>JmgIpcCategory</c> record in the database based on the specified category ID.
    /// </summary>
    /// <param name="_jmgIpcCategoryId">
    /// The ID of the indirect category to find in the database.
    /// </param>
    /// <param name="_update">
    /// True if the record that is returned must be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>JmgIpcCategory</c> record.
    /// </returns>
    static JmgIpcCategory find(JmgIpcCategoryId _jmgIpcCategoryId, boolean _update = false)
    {
        JmgIpcCategory jmgIpcCategory;

        jmgIpcCategory.selectForUpdate(_update);

        select firstonly jmgIpcCategory
            where jmgIpcCategory.Category == _jmgIpcCategoryId;

        return jmgIpcCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SYS317251</DeveloperDocumentation>
	<Label>@SYS38379</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Category</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CatIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>CatIdx</PrimaryIndex>
	<ReplacementKey>CatIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgIpcActivity</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>JmgIpcActivity</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>stampType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Category</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgIpcCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgStampType</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>JmgStampTypeEnum</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CatIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>