<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMFundTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TAMFundTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        super();

        TAMFundCustCategory::updateRootBudgetAmount(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// If status is modified, check to be sure the distributed amount
    ///     and fund amount match.
    /// </summary>
    /// <param name="_fieldId">
    /// ID of field being modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId == fieldNum(TAMFundTable, Status))
        {
            if (this.Status == TAMFundStatus::Approved
                && this.TotalFundAmt != TAMFundCustCategory::getFundDistAmt(this.FundID))
            {
                warning ("@MCR26298");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        super();

        TAMFundCustCategory::updateRootBudgetAmount(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validate that the from date is less than the to date.
    /// </summary>
    /// <returns>
    /// true if the dates on the fund are valid; otherwise, false.
    /// </returns>
    boolean validateDates()
    {
        if ((this.ToDate < this.FromDate))
        {
            checkFailed(strFmt("@MCR25961", "@SYS80662", "@SYS24050"));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Do not allow the deletion of funds that
    ///     are assigned on trade promotions.
    /// </summary>
    /// <returns>
    /// true if the record can be deleted; false otherwise.
    /// </returns>
    public boolean validateDelete()
    {
        TAMPromotionFund    tamPromotionFund;
        boolean         ret;

        ret = super();
        // if this fund exist on a trade promotion, do not allow it
        // to be deleted.
        if (ret)
        {
            select firstOnly RecId from tamPromotionFund
                where tamPromotionFund.Fund == this.FundID;
            if (tamPromotionFund.RecId != 0)
            {
                checkFailed("@MCR26248");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Before writing the fund record, validate
    ///     that the to date does not come before the
    ///     from date.
    /// </summary>
    /// <returns>
    /// true if the record can be written; otherwise false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.validateDates();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Find a fund with the specified fund ID.
    /// </summary>
    /// <param name="_fundID">
    /// The fund ID of the fund to be found.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The fund record with the specified fund ID.
    /// </returns>
    public static TAMFundTable find(TAMFundID _fundID,
                               boolean _forUpdate = false)
    {
        TAMFundTable  tamFundTable;

        if (_forUpdate)
        {
            tamFundTable.selectForUpdate (_forUpdate);
        }

        tamFundTable.selectLocked(_forUpdate);

        select firstonly tamFundTable
            where tamFundTable.FundID == _fundID;

        return tamFundTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomerFunds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lists all funds the passed customer is a part of.
    /// </summary>
    /// <param name="_callingControl">
    /// The form control the query will filter.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account that will filter the drop down.
    /// </param>
    public static void lookupCustomerFunds(FormControl         _callingControl,
                                CustAccount  _custAccount)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    fundDataSource;
        QueryBuildDataSource    fundCustDataSource;
        CustTable               custTable = CustTable::find(_custAccount);

        sysTableLookup = SysTableLookup::newParameters(tableNum(TAMFundTable), _callingControl);
        sysTableLookup.addLookupfield(fieldNum(TAMFundTable, FundID));
        sysTableLookup.addLookupfield(fieldNum(TAMFundTable, Description));

        fundDataSource = query.addDataSource(tableNum(TAMFundTable));
        fundCustDataSource = fundDataSource.addDataSource(tableNum(TAMFundCustCategory));
        fundCustDataSource.addRange(fieldNum(TAMFundCustCategory, Customer)).value(SysQuery::value(custTable.RecId));
        fundCustDataSource.joinMode(JoinMode::InnerJoin);
        fundCustDataSource.addLink(fieldNum(TAMFundTable, FundID), fieldNum(TAMFundCustCategory, FundID));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFundBudgetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the total fund amount that the passed
    /// <c>TAMFundCustCategory</c> relates to.
    /// </summary>
    /// <param name="_tamFundCustCategory">
    /// The <c>TAMFundCustCateogry</c> record used to update the related
    /// <c>TAMFundTable</c> record.
    /// </param>
    public static void updateFundBudgetAmount(TAMFundCustCategory _tamFundCustCategory)
    {
        TAMFundTable tamFundTable = TAMFundTable::find(_tamFundCustCategory.FundID, true);

        if (tamFundTable)
        {
            ttsbegin;
            tamFundTable.TotalFundAmt = _tamFundCustCategory.BudgetedAmount;
            // Have to use doUpdate since this is called from TAMFundCustCategory insert/update
            tamFundTable.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFundBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the total planned merchandising event cost that has allocated to the funds related to the
    /// promotion have surpassed the total budgeted amount of the fund.
    /// </summary>
    /// <param name="_tamPromotionID">
    /// The <c>TAMPromotionId</c> of the promotion for which the related fund budgets should be validated.
    /// </param>
    public static void validateFundBudget(TAMPromotionID _tamPromotionID)
    {
        TAMMerchandisingEvent   tamMerchandisingEvent;
        TAMPromotionFund        tamPromotionFund;
        TAMFundTable            tamFundTable;
        AmountCur               totalMerchandiseCost;
        Map                     fundMap = new Map(Types::String, Types::Real);
        MapEnumerator           mapEnumerator;

        while select Fund, percent from tamPromotionFund
            join MerchandiseCost from tamMerchandisingEvent
                where tamMerchandisingEvent.MerchandisingEventID == tamPromotionFund.MerchandisingEventID
                && tamMerchandisingEvent.PromotionID == _tamPromotionID
        {
            if (fundMap.exists(tamPromotionFund.Fund))
            {
                totalMerchandiseCost = fundMap.lookup(tamPromotionFund.Fund);
            }

            fundMap.insert(tamPromotionFund.Fund, totalMerchandiseCost +
                tamMerchandisingEvent.MerchandiseCost * tamPromotionFund.Percent/100);

            totalMerchandiseCost = 0;
        }

        mapEnumerator = fundMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            tamFundTable = tamFundTable::find(mapEnumerator.currentKey());
            if (mapEnumerator.currentValue() > tamFundTable.TotalFundAmt)
            {
                warning(strFmt("@MCR4410348",
                            mapEnumerator.currentValue(), tamFundTable.TotalFundAmt, tamFundTable.FundId));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMPromotionsManagement</ConfigurationKey>
	<DeveloperDocumentation>@MCR25672</DeveloperDocumentation>
	<FormRef>TAMFundSetupMenu</FormRef>
	<Label>@MCR25672</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>FundID</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>Fund</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>Fund</PrimaryIndex>
	<ReplacementKey>Fund</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>custCategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Details</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalFundAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Usage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS176231</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalFundAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Details</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Usage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>custCategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryHierarchyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Details</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRNotes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FundID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMFundID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMFundStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalFundAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@MCR25690</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMFundType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Usage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRUsage</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Fund</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FundID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustHierarchyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>custCategoryHierarchy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRCustCategoryHierarchy</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>MCRCustCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>custCategoryHierarchy</Name>
					<Field>custCategoryHierarchy</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMFundUsage</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMFundUsage</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FundUsage</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FundUsage</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Usage</Name>
					<SourceEDT>MCRUsage</SourceEDT>
					<Field>Usage</Field>
					<RelatedField>Usage</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Usage</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>