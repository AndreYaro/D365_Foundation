<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStoreCashDeclarationTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailStoreCashDeclarationTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    /// <remarks>
    /// An error is thrown when you rename the record if the distribution type is other than
    /// <c>NoDistribution</c>.
    /// </remarks>
    public void renamePrimaryKey()
    {
        ;
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailStoreCashDeclarationTable</c> table by using the
    /// specified <c>parameter</c> value.
    /// </summary>
    /// <param name="_storeId">
    /// The store ID number.
    /// </param>
    /// <param name="_currency">
    /// The currency of the cash declaration.
    /// </param>
    /// <param name="_type">
    /// The type of the cash declaration.
    /// </param>
    /// <param name="_amount">
    /// The amount in transaction currency.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for an update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStoreCashDeclarationTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailStoreCashDeclarationTable find(RetailStoreId _storeId,
                                                    CurrencyCode _currency,
                                                    RetailCashType _type,
                                                    AmountCur _amount,
                                                    boolean _forUpdate = false)
    {
        RetailStoreCashDeclarationTable storeCashDeclaration;

        if (_storeId && _currency && _amount)
        { 
            storeCashDeclaration.selectForUpdate(_forUpdate);

            select firstonly storeCashDeclaration
                index hint storeIdx
                where storeCashDeclaration.StoreId  == _storeId
                   && storeCashDeclaration.Currency == _currency
                   && storeCashDeclaration.Type     == _type
                   && storeCashDeclaration.Amount   == _amount;
        }

        return storeCashDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfCashDeclarationInOpenJour_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is any open cash slip journal that uses cash declaration setup.
    /// </summary>
    /// <returns>
    /// False if there is any open cash slip journal; otherwise, true.
    /// </returns>
    private boolean checkIfCashDeclarationInOpenJour_RU()
    {
        RetailCashCollDeclarationJourTrans_RU   cashCollDeclarationJourTrans;
        LedgerJournalTrans_RCash                ledgerJournalTrans_RCash;
        LedgerJournalTrans                      ledgerJournalTrans;
        LedgerJournalTable                      ledgerJournalTable;
        boolean                                 ret = true;

        select firstonly JournalNum from ledgerJournalTrans
            where (  !this.currency
                   || ledgerJournalTrans.CurrencyCode                   == this.currency)
        exists join ledgerJournalTrans_RCash
            where ledgerJournalTrans_RCash.RefRecId                     == ledgerJournalTrans.RecId
               && ledgerJournalTrans_RCash.CashCollStoreId_RU           == this.storeId
        exists join cashCollDeclarationJourTrans
            where cashCollDeclarationJourTrans.LedgerJournalTrans_RCash == ledgerJournalTrans.RecId
               && cashCollDeclarationJourTrans.CashType                 == this.type
               && cashCollDeclarationJourTrans.DenominationAmount       == this.amount
        exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum                         == ledgerJournalTrans.JournalNum
               && ledgerJournalTable.Posted                             == NoYes::No;

        if (ledgerJournalTrans.JournalNum)
        {
            ret = checkFailed(strFmt("@SYP4881015", ledgerJournalTrans.JournalNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        #ISOCountryRegionCodes

        ret = super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ret = this.checkIfCashDeclarationInOpenJour_RU() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the data area id is valid for this cash declaration based on the store.
    /// </summary>
    /// <returns>True if the changes are valid; otherwise false.</returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
        ret = this.isDataAreaIdValid() && ret;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataAreaIdValid</Name>
				<Source><![CDATA[
    private boolean isDataAreaIdValid()
    {
        boolean ret = true;

        RetailStoreTable retailStoreTable;

        select firstOnly retailStoreTable
            where retailStoreTable.StoreNumber == this.storeId
            && retailStoreTable.inventLocationDataAreaId == this.DataAreaId;

        if (retailStoreTable.RecId == 0)
        {
            ret = checkFailed(strFmt("@Retail:CashDeclarationStoreNotFound", this.storeId, this.DataAreaId));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260394</DeveloperDocumentation>
	<FormRef>RetailStoreCashDeclarationTable</FormRef>
	<Label>@RET3220</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>type</TitleField1>
	<TitleField2>amount</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>storeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>BrickAndMortarStore</Modules>
	<PrimaryIndex>storeIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>storeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>includeInQuickPayShortcuts</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@RET3221</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashType</Name>
			<Label>@RET3222</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Store</Name>
			<Label>@RET3088</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>storeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>amount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>currency</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>storeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>type</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCashType</ExtendedDataType>
			<EnumType>RetailCoinNote</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>includeInQuickPayShortcuts</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<FeatureClass>RetailEnableUnifiedPaymentsExperienceInPOSFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>storeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>storeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>currency</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>amount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>storeId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>storeId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>