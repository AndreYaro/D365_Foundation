<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustHierarchy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustHierarchy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNextPriorityForCatalogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Next priority available for catalogs on this customer hierarchy.
    /// </summary>
    /// <returns>The Next catalog priority to be assigned to the current customer hierarchy.</returns>
    public int getNextPriorityForCatalogs()
    {
        CustHierarchyCatalog localHierarchyCatalogs;

        // Calculate Next available priority
        select maxof(priority) from localHierarchyCatalogs
            where localHierarchyCatalogs.CustHierarchyId == this.CustHierarchyId;

        return localHierarchyCatalogs.Priority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>OrganizationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to retrieve the Organization name.
    /// </summary>
    /// <returns>The organization name.</returns>
    public display str OrganizationName()
    {
        DirPartyTable organizationRecord = DirPartyTable::findRec(this.OrganizationParty);
        return organizationRecord.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SellerChannelId</Name>
				<Source><![CDATA[
    public display str SellerChannelId()
    {
        RetailChannelTable retailOnlineChannelTable = RetailChannelTable::findByRetailChannelId(this.SellerChannel);
        return retailOnlineChannelTable.RetailChannelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SellerChannelName</Name>
				<Source><![CDATA[
    public display str SellerChannelName()
    {
        RetailChannelTable retailOnlineChannelTable = RetailChannelTable::findByRetailChannelId(this.SellerChannel);
        OMOperatingUnit omOperatingUnit = OMOperatingUnit::find(retailOnlineChannelTable.OMOperatingUnitID, OMOperatingUnitType::RetailChannel);
        return omOperatingUnit.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the customer hierarchy can be deleted.
    /// </summary>
    /// <returns>True if the customer hierarchy can be deleted; otherwise, false.</returns>
    [Hookable(false)]
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        if (ret && this.existsActiveNode())
        {
            ret = checkFailed("@CustHierarchy:CustHierarchyDeleteErrorMessage");
        }

        if (ret && this.existsAssignedCatalogs())
        {
            ret = checkFailed("@Retail:CustHierarchyWithCatalogsDeleteErrorMessage");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsActiveNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the customer hierarchy has still active node.
    /// </summary>
    /// <returns>True if there is at least one active node; otherwise, false.</returns>
    private boolean existsActiveNode()
    {
        CustHierarchyNode custHierarchyNode;

        select firstonly RecId from custHierarchyNode
            where   custHierarchyNode.CustHierarchyId == this.CustHierarchyId
                &&  (!custHierarchyNode.VersionRemoved || custHierarchyNode.VersionAdded > custHierarchyNode.VersionRemoved);

        return custHierarchyNode.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAssignedCatalogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the customer hierarchy has assigned catalogs.
    /// </summary>
    /// <returns>True if there is at least one Catalog; otherwise, false.</returns>
    private boolean existsAssignedCatalogs()
    {
        CustHierarchyCatalog custHierarchyCatalog;

        select firstonly RecId from custHierarchyCatalog
            where   custHierarchyCatalog.CustHierarchyId == this.CustHierarchyId;

        return custHierarchyCatalog.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current active customer hierarchy version.
    /// </summary>
    /// <returns>The active customer hierarchy version.</returns>
    internal CustHierarchyVersion getActiveVersion()
    {
        return CustHierarchyVersion::getActiveVersion(this.CustHierarchyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByHierarchyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a customer hierarchy by its id.
    /// </summary>
    /// <param name = "_custHierarchyId">Hierarchy id.</param>
    /// <param name = "_forUpdate">Indication of a selection for update.</param>
    /// <param name = "_concurrencyModel">The concurrency model option to use when reading the record.</param>
    /// <returns>The customer hierarchy record if it exists.</returns>
    internal static CustHierarchy findByHierarchyId(CustHierarchyId _custHierarchyId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustHierarchy custHierarchy;

        if (_custHierarchyId)
        {
            custHierarchy.selectForUpdate(_forUpdate);

            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                custHierarchy.concurrencyModel(_concurrencyModel);
            }

            select firstonly custHierarchy
                where custHierarchy.CustHierarchyId == _custHierarchyId;
        }

        return custHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the customer hierarchy record.
    /// </summary>
    public void initValue()
    {
        super();

        if (this.CustHierarchyId == '')
        {
            // If the number sequence is continuous, it is necessary to allocate it inside a transaction scope.
            ttsbegin;

            NumberSeqScope scope = NumberSeqScopeFactory::createGlobalScope();
            NumberSequenceReference numReference = NumberSeqReference::findReference(extendedTypeNum(CustHierarchyId), scope);
            this.CustHierarchyId = NumberSeq::newGetNumFromId(numReference.NumberSequenceId).num();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new customer hierarchy record.
    /// </summary>
    /// <param name = "_hierarchyName">Name of the organization.</param>
    /// <param name = "_purpose">Hierarchy purpose.</param>
    /// <param name = "_organizationPartyRecId">Hierarchy organization party RecId.</param>
    /// <returns>The new customer hierarchy record.</returns>
    internal static CustHierarchy create(Name _hierarchyName, CustHierarchyPurpose _purpose, RecId _organizationPartyRecId)
    {
        CustHierarchy hierarchy;
        CustHierarchyVersion hierarchyVersion;
        
        hierarchy.initValue();
        hierarchy.Purpose = CustHierarchyPurpose::B2BOrganization;
        hierarchy.Name = _hierarchyName;
        hierarchy.OrganizationParty = _organizationPartyRecId;
        hierarchy.insert();

        return hierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new customer hierarchy and creates initial version for it.
    /// </summary>
    public void insert()
    {
        ttsbegin;

        CustHierarchyVersion::createFirstVersion(this.CustHierarchyId);

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes customer hierarchy and all related customer hierarchy versions.
    /// </summary>
    public void delete()
    {
        ttsbegin;

        super();

        CustHierarchyVersion::deleteAllVersions(this.CustHierarchyId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find CustHierarchy by RecId.
    /// </summary>
    /// <param name="_custHierarchyRecId">The RecId of CustHierarchy.</param>
    /// <param name="_forUpdate">Select the record for update or not.</param>
    /// <returns>The CustHierarchy record buffer.</returns>
    public static CustHierarchy find(RecId _custHierarchyRecId, boolean _forUpdate = false)
    {
        CustHierarchy custHierarchy;

        custHierarchy.selectForUpdate(_forUpdate);

        if (_custHierarchyRecId)
        {
            select firstonly custHierarchy
                where custHierarchy.RecId == _custHierarchyRecId;
        }

        return custHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSellerChannel</Name>
				<Source><![CDATA[
    public boolean hasSellerChannel()
    {
        return this.SellerChannel != '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@CustHierarchy:CustHierarchyDevDoc</DeveloperDocumentation>
	<FormRef>CustHierarchy</FormRef>
	<Label>@CustHierarchy:CustHierarchyLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>CustHierarchyId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>CustHierarchyId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>CustHierarchyId</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustHierarchyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Purpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrganizationParty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustHierarchyId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CustHierarchyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Purpose</Name>
			<Mandatory>Yes</Mandatory>
			<EnumType>CustHierarchyPurpose</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OrganizationParty</Name>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SellerChannel</Name>
			<ExtendedDataType>RetailChannelId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SellerChannelEmployeeAddressBook</Name>
			<ExtendedDataType>DirAddressBookRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustHierarchyId</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CustHierarchyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SellerChannel</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SellerChannel</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrganizationParty</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrganizationParty</Name>
					<Field>OrganizationParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SellerChannel</Name>
					<Field>SellerChannel</Field>
					<RelatedField>RetailChannelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirAddressBook</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DirAddressBook</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SellerChannelEmployeeAddressBook</Name>
					<Field>SellerChannelEmployeeAddressBook</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>