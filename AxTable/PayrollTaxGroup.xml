<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollTaxGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollTaxGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean canDelete ;

        canDelete  = super();

        if (canDelete )
        {
            //
            // If a tax group is enabled for posting definition, do not allow users to delete the tax group
            // and a warning is presented.
            //
            if (this.IsEnabledForPostingDefinition)
            {
                canDelete  = canDelete  && checkFailed("@SYS4009189");
            }
        }

        return canDelete ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean     isValid;
        DictEnum    taxCodeType = new DictEnum(enumName2Id(enumStr(PayrollTaxCodeType)));

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(payrollTaxGroup, GroupId):
                    //
                    // User defined GroupId cannot be the same as system-defined GroupId.
                    // Checks if the tax group name is one of the system-defined tax group names.
                    //
                    if (taxCodeType.symbol2Value(this.GroupId) != 255)
                    {
                        isValid = checkFailed(strFmt("@SYS4006087", this.GroupId));
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostingDefinitionChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the posting definition checkbox value is allowed to be changed or not and
    /// generates the detail warning messages if it cannot be changed
    /// </summary>
    /// <returns>
    /// true if posting definition checkbox can be changed; otherwise, false.
    /// </returns>
    public boolean validatePostingDefinitionChange()
    {
        boolean     allowChange;
        int         messageIdx;
        container   codeAndGroup;
        Array       taxCodelistMessages = new Array(Types::Container);

        if (this.IsEnabledForPostingDefinition == NoYes::No)
        {
            if (PayrollTaxGroup::canEnableForPostingDefinition(this.RecId, taxCodelistMessages))
            {
                allowChange = true;
            }
            else
            {
                warning("@SYS4005277");
                for (messageIdx = 1; messageIdx <= taxCodelistMessages.lastIndex(); messageIdx++)
                {
                    codeAndGroup = taxCodelistMessages.value(messageIdx);
                    warning(strFmt("%1%2%3", "@Payroll:TaxCodes1", "\t", strFmt("@SYS4005278", conPeek(codeAndGroup, 2), conPeek(codeAndGroup, 1))));
                }
            }
        }
        else if (this.IsEnabledForPostingDefinition == NoYes::Yes)
        {
            if (PayrollTaxGroup::canDisableForPostingDefinition(this.RecId))
            {
                allowChange = true;
            }
            else
            {
                warning("@SYS4005279");
            }
        }

        return allowChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisableForPostingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether posting definition can be disabled for a tax group.
    /// </summary>
    /// <param name="_currentTaxGroupRecId">
    /// The record ID of the <c>PayrollTaxGroup</c> record.
    /// </param>
    /// <returns>
    /// true if posting definition can be disabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Posting definition can be disabled for a tax group if there is no transaction posting definition defined using the tax group.
    /// Otherwise posting definition cannot be disabled.
    /// </remarks>
    public static boolean canDisableForPostingDefinition(PayrollTaxGroupRecId _currentTaxGroupRecId)
    {
        JournalizingDefinitionPayrollTrans journalizingDefinitionPayrollTrans;

        if (_currentTaxGroupRecId)
        {
            select firstOnly crossCompany RecId from journalizingDefinitionPayrollTrans
                where journalizingDefinitionPayrollTrans.Code == TableGroupAll::GroupId
                    && journalizingDefinitionPayrollTrans.SpecificGroup == _currentTaxGroupRecId
                    && (journalizingDefinitionPayrollTrans.LineType == PayrollPayStatementLineType::TaxContribution ||
                        journalizingDefinitionPayrollTrans.LineType == PayrollPayStatementLineType::TaxDeduction);
        }

        return _currentTaxGroupRecId && (journalizingDefinitionPayrollTrans.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableForPostingDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether posting definition can be enabled for a tax group.
    /// </summary>
    /// <param name="_currentTaxGroupRecId">
    /// The record ID of the <c>PayrollTaxGroup</c> record.
    /// </param>
    /// <param name="_listOfTaxCodes">
    /// An array for passing out a list of tax code(s) belonging to other posting definition enabled tax group(s).
    /// </param>
    /// <returns>
    /// true if posting definition can be enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Posting definition can be enabled for a tax group if there is no tax code of the tax group belonging to any other posting
    /// definition enabled tax group(s). Otherwise posting definition cannot be enabled.
    /// </remarks>
    public static boolean canEnableForPostingDefinition(PayrollTaxGroupRecId _currentTaxGroupRecId, Array _listOfTaxCodes)
    {
        PayrollTaxGroup         taxGroup;
        PayrollTaxGroupCode     taxGroupCode;
        PayrollTaxGroupCode     taxGroupCodeOtherGroups;
        PayrollTaxCode          taxCode;
        boolean                 canEnable = true;
        int                     taxCodeListIdx = 1;
        DictEnum                taxCodeType = new DictEnum(enumName2Id(enumStr(PayrollTaxCodeType)));
        PayrollTaxGroupId       taxGroupTypeSymbol;
        PayrollTaxCodeType      taxGroupTypeValue;
        container               codeAndGroup[];
        Set                     taxCodeTypesProcessed = new Set(Types::String);
        Set                     taxCodeTypesWithPostingDefEndabled = new Set(Types::String);

        if (PayrollTaxGroup::find(_currentTaxGroupRecId).IsImmutable == NoYes::No)
        {
            // Check if tax codes are in posting definition enabled user defined tax groups
            while select TaxCode from taxGroupCode
                where taxGroupCode.TaxGroup == _currentTaxGroupRecId
                    join RecId, Code from taxCode
                        where taxCode.RecId == taxGroupCode.TaxCode
                            join RecId from taxGroupCodeOtherGroups
                                where taxGroupCodeOtherGroups.TaxCode == taxGroupCode.TaxCode
                                    && taxGroupCodeOtherGroups.TaxGroup != _currentTaxGroupRecId
                                        join GroupId from taxGroup
                                            where taxGroup.RecId == taxGroupCodeOtherGroups.TaxGroup
                                                && taxGroup.IsEnabledForPostingDefinition == NoYes::Yes
                                                && taxGroup.IsImmutable == NoYes::No
            {
                codeAndGroup[taxCodeListIdx] += taxGroup.GroupId;
                codeAndGroup[taxCodeListIdx] += taxCode.Code;
                _listOfTaxCodes.value(taxCodeListIdx, codeAndGroup[taxCodeListIdx]);
                taxCodeListIdx++;
            }

            // Check if tax codes are in posting definition enabled system defined tax groups
            while select TaxCode from taxGroupCode
                where taxGroupCode.TaxGroup == _currentTaxGroupRecId
                    join RecId, Code, Type from taxCode
                        where taxCode.RecId == taxGroupCode.TaxCode
            {
                taxGroupTypeSymbol = taxCodeType.value2Symbol(taxCode.Type);

                if (!taxCodeTypesProcessed.in(taxGroupTypeSymbol))
                {
                    select firstonly RecId from taxGroup
                        where taxGroup.GroupId == taxGroupTypeSymbol
                            && taxGroup.IsEnabledForPostingDefinition == NoYes::Yes
                            && taxGroup.IsImmutable == NoYes::Yes;

                    taxCodeTypesProcessed.add(taxGroupTypeSymbol);

                    if (taxGroup.RecId)
                    {
                        taxCodeTypesWithPostingDefEndabled.add(taxGroupTypeSymbol);
                    }
                }

                if (taxCodeTypesWithPostingDefEndabled.in(taxGroupTypeSymbol))
                {
                    codeAndGroup[taxCodeListIdx] += taxGroupTypeSymbol;
                    codeAndGroup[taxCodeListIdx] += taxCode.Code;
                    _listOfTaxCodes.value(taxCodeListIdx, codeAndGroup[taxCodeListIdx]);
                    taxCodeListIdx++;
                }
            }

            if (conLen(codeAndGroup[1]) > 0)
            {
                canEnable = false;
            }
        }
        else
        {
            // Check if tax codes are in posting definition enabled user defined tax groups
            select firstonly taxGroup
                where taxGroup.RecId == _currentTaxGroupRecId;

            taxGroupTypeValue = taxCodeType.symbol2Value(taxGroup.GroupId);

            while select RecId, Code from taxCode
                where taxCode.Type == taxGroupTypeValue
                    join TaxCode from taxGroupCode
                        where taxGroupCode.TaxCode == taxCode.RecId
                            join RecId, GroupId from taxGroup
                                where taxGroup.RecId == taxGroupCode.TaxGroup
                                    && taxGroup.IsEnabledForPostingDefinition == NoYes::Yes
                                    && taxGroup.IsImmutable == NoYes::No
            {
                codeAndGroup[taxCodeListIdx] += taxGroup.GroupId;
                codeAndGroup[taxCodeListIdx] += taxCode.Code;
                _listOfTaxCodes.value(taxCodeListIdx, codeAndGroup[taxCodeListIdx]);
                taxCodeListIdx++;
            }

            if (conLen(codeAndGroup[1]) > 0)
            {
                canEnable = false;
            }
        }

        return (_currentTaxGroupRecId && canEnable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in the <c>PayrollTaxGroup</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_taxGroupRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollTaxGroupRecId _taxGroupRecId)
    {
        boolean ret = true;

        if (!PayrollTaxGroup::exist(_taxGroupRecId))
        {
            ret = checkFailed(strFmt(PayrollTaxGroup::txtNotExist(), tableStr(PayrollTaxGroup)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in the <c>PayrollTaxGroup</c> table.
    /// </summary>
    /// <param name="_taxGroupRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollTaxGroupRecId _taxGroupRecId)
    {
        return _taxGroupRecId && (select firstOnly RecId from payrollTaxGroup
            where PayrollTaxGroup.RecId == _taxGroupRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollTaxGroup</c> table based on a record ID value.
    /// </summary>
    /// <param name="_taxGroupRecId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollTaxGroup</c> table.
    /// </returns>
    public static PayrollTaxGroup find(
        PayrollTaxGroupRecId    _taxGroupRecId,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollTaxGroup payrollTaxGroup;

        payrollTaxGroup.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollTaxGroup.concurrencyModel(_concurrencyModel);
        }

        select firstOnly payrollTaxGroup
            where payrollTaxGroup.RecId == _taxGroupRecId;

        return payrollTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollTaxGroup</c> table by using the specified <c>Group</c>
    /// value.
    /// </summary>
    /// <param name="_taxGroupId">
    /// A <c>PayrollTaxGroupId</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PayrollTaxGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static PayrollTaxGroup findByTaxGroup(
        PayrollTaxGroupId   _taxGroupId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollTaxGroup payrollTaxGroup;

        if (strlen(_taxGroupId) > 0)
        {
            payrollTaxGroup.selectForUpdate(_forUpdate );
            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                payrollTaxGroup.concurrencyModel(_concurrencyModel);
            }

            select firstonly payrollTaxGroup
                where payrollTaxGroup.GroupId == _taxGroupId;
        }

        return payrollTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostingDefEnabledTaxGroupByTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a posting definition enabled record in the <c>PayrollTaxGroup</c> table using the given record ID
    /// value of a tax code.
    /// </summary>
    /// <param name="_taxCodeRecId">
    /// The record ID of the <c>PayrollTaxCode</c> table record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PayrollTaxGroup</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// A tax code cannot belong to more than one posting definition enabled tax group.
    /// </remarks>
    public static PayrollTaxGroup findPostingDefEnabledTaxGroupByTaxCode(
        PayrollTaxCodeRecId _taxCodeRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollTaxGroup         payrollTaxGroup;
        PayrollTaxGroupCode     payrollTaxGroupCode;
        PayrollTaxCode          payrollTaxCode;
        DictEnum                payrollTaxCodeType = new DictEnum(enumName2Id(enumStr(PayrollTaxCodeType)));
        PayrollTaxGroupId       taxGroupTypeSymbol;

        payrollTaxGroup.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollTaxGroup.concurrencyModel(_concurrencyModel);
        }

        select firstOnly payrollTaxGroup
            where payrollTaxGroup.IsEnabledForPostingDefinition == NoYes::Yes
                && payrollTaxGroup.IsImmutable == NoYes::No
                    join TaxCode, TaxGroup from payrollTaxGroupCode
                        where payrollTaxGroupCode.TaxGroup == payrollTaxGroup.RecId
                            && payrollTaxGroupCode.TaxCode == _taxCodeRecId;

        if (!payrollTaxGroup.RecId)
        {
            select firstonly RecId, Type from payrollTaxCode
                where payrollTaxCode.RecId == _taxCodeRecId;

            taxGroupTypeSymbol = payrollTaxCodeType.value2Symbol(payrollTaxCode.Type);

            select firstOnly payrollTaxGroup
                where payrollTaxGroup.IsEnabledForPostingDefinition == NoYes::Yes
                    && payrollTaxGroup.IsImmutable == NoYes::Yes
                    && payrollTaxGroup.GroupId == taxGroupTypeSymbol;
        }

        return payrollTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefPayrollTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the <c>PayrollTaxGroup</c> form for the specified tax group.
    /// </summary>
    /// <param name="_payrollTaxGroup">
    /// The <c>PayrollTaxGroup</c> record that is referenced by the caller.
    /// </param>
    /// <param name="_caller">
    /// The form object that is calling the <c>PayrollTaxGroup</c> form.
    /// </param>
    public static void jumpRefPayrollTaxGroup(PayrollTaxGroup _payrollTaxGroup, Object _caller)
    {
        Args    args;
        FormRun formRun;

        args = new Args(new DictTable(_payrollTaxGroup.TableId).formRef());
        args.caller(_caller);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.dataSource().findRecord(_payrollTaxGroup);
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPostingDefinitionTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>PayrollTaxGroup</c> table returning posting definition enabled tax groups.
    /// </summary>
    /// <param name="_formStringControl">
    /// The <c>FormStringControl</c> class object with which to perform the lookup.
    /// </param>
    public static void lookupPostingDefinitionTaxGroup(FormStringControl _formStringControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysTableLookup = SysTableLookup::newParameters(tablenum(PayrollTaxGroup), _formStringControl);

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(PayrollTaxGroup));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(PayrollTaxGroup, IsEnabledForPostingDefinition));
        queryBuildRange.value(queryValue(NoYes::Yes));

        sysTableLookup.addLookupfield(fieldnum(PayrollTaxGroup, GroupId));
        sysTableLookup.addLookupfield(fieldnum(PayrollTaxGroup, Description));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return  "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@SYS4008487</DeveloperDocumentation>
	<FormRef>PayrollTaxGroup</FormRef>
	<Label>@SYS4008486</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>GroupId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Payroll</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabledForPostingDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsImmutable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@Payroll:Overview1</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnabledForPostingDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsImmutable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollTaxGroupId</ExtendedDataType>
			<Label>@SYS7576</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollTaxGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEnabledForPostingDefinition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS4009186</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsImmutable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS4005271</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PayrollTaxGroup_AK1</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>