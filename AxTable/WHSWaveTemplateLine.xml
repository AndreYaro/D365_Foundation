<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveTemplateLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWaveTemplateLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WHSWaveTemplateName templateName;
        WHSWaveStep         deletedStep;

        templateName = this.WaveTemplateName;
        deletedStep = this.WaveStep;

        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }

        WHSWaveTemplateLine::reorderMethods(templateName, deletedStep);
        this.validateTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveStepDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps the line with the line after.
    /// </summary>
    void moveStepDown()
    {
        WHSWaveStep         curStep;
        WHSWaveStep         newStep;
        WHSWaveTemplateLine waveTemplateLine;

        ttsbegin;

        curStep = this.WaveStep;
        newStep = this.WaveStep + 1;

        // Intermidate update to step 1 million to prevent duplication of primary key.
        this.WaveStep = 1000000;
        this.update();

        select firstonly forupdate waveTemplateLine
            where waveTemplateLine.WaveStep          == newStep    &&
                  waveTemplateLine.WaveTemplateName  == this.WaveTemplateName;

        waveTemplateLine.WaveStep = curStep;
        if (!waveTemplateLine.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSWaveTemplateLine)));
        }
        else
        {
            waveTemplateLine.update();
        }

        this.WaveStep = newStep;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWaveStepCodeMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the wave step code is mandatory for the wave template line.
    /// </summary>
    /// <returns>true if the step code is mandatory for the line; false otherwise.</returns>
    private boolean isWaveStepCodeMandatory()
    {
        var enumValue = SysDictEnum::newName(enumStr(WHSPostMethodsBase)).symbol2Value(this.PostMethodName);
        
        return enumValue == WHSPostMethodsBase::containerization
            || enumValue == WHSPostMethodsBase::replenish
            || enumValue == WHSPostMethodsBase::waveLabelPrinting
            || enumValue == WHSPostMethodsBase::buildLoads
            || enumValue == WHSPostMethodsBase::sorting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTemplateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates wave template line.
    /// </summary>
    /// <param name = "_showInfo">
    /// Boolean indicating that errors are shown in case of failure.
    /// </param>
    /// <returns>true if the line is valid; otherwise false.</returns>
    public boolean validateTemplateLine(boolean _showInfo = true)
    {
        boolean ret = true;

        if (!this.WaveStepCode && this.isWaveStepCodeMandatory())
        {
            ret = this.validationError(_showInfo, strFmt("@WAX:WaveStepIsMandatryForWaveMethod_ErrorMessage", this.PostMethodName));
        }

        
        if (_showInfo)
        {
            var enumValue = SysDictEnum::newName(enumStr(WHSPostMethodsBase)).symbol2Value(this.PostMethodName);

            switch(enumValue)
            {
                case (WHSPostMethodsBase::replenish):
                    this.validateWaveStepReplenishmentTemplateExists();
                    break;
                case (WHSPostMethodsBase::containerization):
                    this.validateWaveStepContainerBuildExists();
                    break;
                case (WHSPostMethodsBase::buildLoads):
                    this.validateWaveStepLoadBuildingTemplateExists();
                    break;
                case (WHSPostMethodsBase::waveLabelPrinting):
                    this.validateWaveStepWaveLabelTemplateExists();
                    break;
            }           
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWaveStepLoadBuildingTemplateExists</Name>
				<Source><![CDATA[
    private void validateWaveStepLoadBuildingTemplateExists()
    {
        if (this.WaveStepCode != '' && !WHSLoadBuildTemplate::existsForWaveStepCode(this.WaveStepcode))
        {
            this.validationError(true, strFmt("@WAX:LoadBuildingTemplateWithWaveStepCodeDoesNotExist_WarningMessage", this.WaveStepCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWaveStepWaveLabelTemplateExists</Name>
				<Source><![CDATA[
    private void validateWaveStepWaveLabelTemplateExists()
    {
        if (this.WaveStepCode != '' && !WHSWaveLabelTemplate::existsForWaveStepCode(this.WaveStepCode))
        {
            this.validationError(true, strFmt("@WAX:WaveLabelTemplateWithWaveStepCodeDoesNotExist_WarningMessage", this.WaveStepCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWaveStepReplenishmentTemplateExists</Name>
				<Source><![CDATA[
    private void validateWaveStepReplenishmentTemplateExists()
    {
        if (this.WaveStepCode != '' && !WHSReplenishmentTemplate::existsForWaveStepCode(this.WaveStepCode))
        {
            this.validationError(true, strFmt("@WAX:ReplenishmentTemplateWithWaveStepCodeDoesNotExist_WarningMessage", this.WaveStepCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWaveStepContainerBuildExists</Name>
				<Source><![CDATA[
    private void validateWaveStepContainerBuildExists()
    {
        if (this.WaveStepCode != '' && !WHSContainerizationTable::existsForWaveStepCode(this.WaveStepCode))
        {
            this.validationError(true, strFmt("@WAX:ContainerBuildTemplateWithWaveStepCodeDoesNotExist_WarningMessage", this.WaveStepCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationError</Name>
				<Source><![CDATA[
    private boolean validationError(boolean _showInfo, str _error)
    {
        if (_showInfo)
        {
            checkFailed(_error);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            ret = this.validateTemplateLine();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveStepUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps the line with the line before.
    /// </summary>
    void moveStepUp()
    {
        WHSWaveStep         curStep;
        WHSWaveStep         newStep;
        WHSWaveTemplateLine waveTemplateLine;

        ttsbegin;

        curStep = this.WaveStep;
        newStep = this.WaveStep - 1;

        this.WaveStep = 1000000;
        this.update();

        select firstonly forupdate waveTemplateLine
            where waveTemplateLine.WaveStep          == newStep    &&
                  waveTemplateLine.WaveTemplateName  == this.WaveTemplateName;

        waveTemplateLine.WaveStep = curStep;
        if (!waveTemplateLine.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSWaveTemplateLine)));
        }
        else
        {
            waveTemplateLine.update();
        }

        this.WaveStep = newStep;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (WHSPostMethod::findByMethodName(this.PostMethodName).isBaseMethod())
        {
            ret = checkFailed("@WAX3077");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveTemplateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a wave template line with a method.
    /// </summary>
    /// <param name="_waveTemplateName">
    /// Name of the wave template.
    /// </param>
    /// <param name="_postMethod">
    /// Post method of the wave template.
    /// </param>
    public static void createWaveTemplateLine(WHSWaveTemplateName _waveTemplateName,
                                                 WHSPostMethod _postMethod)
    {
        WHSWaveTemplateLine     newWaveTemplateLine;
        WHSBaseWaveStepMethod   baseWaveStepMethod;
        int                     methodNewPosition;

        ttsbegin;

        if (WHSWaveTemplateTable::exist(_waveTemplateName))
        {
            baseWaveStepMethod = WHSWaveStepMethodFactory::newBaseMethodFromName(_postMethod.PostMethodName);

            // Base methods must be in the correct order
            if (baseWaveStepMethod && WHSBaseWaveStepMethod::retrieveSpecificOrderMethodPosition(baseWaveStepMethod.name()))
            {
                methodNewPosition = WHSWaveTemplateLine::getBaseWaveStepMethodPositionAndRemoveReplacementIfExists(baseWaveStepMethod, _waveTemplateName);
            }
            else
            {
                methodNewPosition = WHSWaveTemplateLine::getOptionalWaveStepMethodPosition(_waveTemplateName);
            }

            newWaveTemplateLine.PostMethodName   = _postMethod.PostMethodName;
            newWaveTemplateLine.WaveStep         = methodNewPosition;
            newWaveTemplateLine.WaveTemplateName = _waveTemplateName;
            newWaveTemplateLine.write();

            newWaveTemplateLine.validateTemplateLine(true);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOptionalWaveStepMethodPosition</Name>
				<Source><![CDATA[
    private static int getOptionalWaveStepMethodPosition(WHSWaveTemplateName _waveTemplateName)
    {
        WHSWaveTemplateLine waveTemplateLine;

        select firstonly waveTemplateLine
            order by waveTemplateLine.WaveStep desc
            where waveTemplateLine.WaveTemplateName == _waveTemplateName;

        return waveTemplateLine.WaveStep + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseWaveStepMethodPositionAndRemoveReplacementIfExists</Name>
				<Source><![CDATA[
    private static int getBaseWaveStepMethodPositionAndRemoveReplacementIfExists(WHSBaseWaveStepMethod _baseWaveStepMethod, WHSWaveTemplateName _waveTemplateName)
    {
        WHSWaveTemplateLine::removeMethod(_waveTemplateName, _baseWaveStepMethod.name());
        WHSPostMethodPos methodSpecificOrder = WHSBaseWaveStepMethod::retrieveSpecificOrderMethodPosition(_baseWaveStepMethod.name());

        WHSWaveTemplateLine waveTemplateLine;
        while select forupdate waveTemplateLine
            order by waveTemplateLine.WaveStep desc
            where waveTemplateLine.WaveTemplateName == _waveTemplateName
        {
            WHSBaseWaveStepMethod baseWaveStepMethod = WHSWaveStepMethodFactory::newBaseMethodFromName(waveTemplateLine.PostMethodName);
            if (baseWaveStepMethod && WHSBaseWaveStepMethod::retrieveSpecificOrderMethodPosition(baseWaveStepMethod.name())
                && WHSBaseWaveStepMethod::retrieveSpecificOrderMethodPosition(baseWaveStepMethod.name()) < methodSpecificOrder)
            {
                break;
            }

            waveTemplateLine.WaveStep++;
            waveTemplateLine.update();
        }
        return waveTemplateLine.WaveStep + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMethod</Name>
				<Source><![CDATA[
    private static void removeMethod(WHSWaveTemplateName _waveTemplateName, WHSPostMethodName _postMethodName)
    {
        WHSWaveTemplateLine templateLine;

        while select forupdate templateLine
            where templateLine.WaveTemplateName == _waveTemplateName
        {
            if (WHSCustomWaveStepMethod::isReplacementForBaseMethod(_postMethodName, templateLine.PostMethodName))
            {
                if (!WHSPostMethod::findByMethodName(_postMethodName).RepeatableStep)
                {
                    templateLine.delete();
                }
                return;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
        
        this.validateTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEvent(funcName(), this))
        {
            super();
        }
        
        this.validateTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTemplate</Name>
				<Source><![CDATA[
    private void validateTemplate()
    {
        WHSWaveTemplateTable waveTemplate = WHSWaveTemplateTable::find(this.WaveTemplateName, true);
        if (waveTemplate)
        {
            waveTemplate.Valid = waveTemplate.validateTemplate();
            waveTemplate.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsWaveTemplateLine</c> record exists.
    /// </summary>
    /// <param name="_waveTemplateName">
    /// Wave template name of the record.
    /// </param>
    /// <param name="_waveStep">
    /// Wave step of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSWaveTemplateName _waveTemplateName, WHSWaveStep _waveStep)
    {
        return (_waveTemplateName && _waveStep) &&
               (select firstonly whsWaveTemplateLine
                    where whsWaveTemplateLine.WaveTemplateName == _waveTemplateName  &&
                          whsWaveTemplateLine.WaveStep         == _waveStep).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByPostMethodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if template line exists for a given template name and post method name.
    /// </summary>
    /// <param name = "_waveTemplateName">The template name.</param>
    /// <param name = "_postMethodName">The post method name.</param>
    /// <returns>true if the post method nane exist for the line; false otherwise.</returns>
    [Hookable(false)]
    internal static boolean existByPostMethodName(WHSWaveTemplateName _waveTemplateName, WHSPostMethodName _postMethodName)
    {
        return (_waveTemplateName && _postMethodName) &&
               (select firstonly whsWaveTemplateLine
                    where whsWaveTemplateLine.WaveTemplateName == _waveTemplateName  &&
                          whsWaveTemplateLine.PostMethodName   == _postMethodName).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWaveTemplateLine</c> record with given parameters.
    /// </summary>
    /// <param name="_waveTemplateName">
    /// Wave template name of the record.
    /// </param>
    /// <param name="_waveStep">
    /// Wave step of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWaveTemplateLine find(WHSWaveTemplateName _waveTemplateName, WHSWaveStep _waveStep, boolean _forupdate = false)
    {
        WHSWaveTemplateLine waveTemplateLine;

        if (_waveTemplateName && _waveStep)
        {
            waveTemplateLine.selectForUpdate(_forupdate);

            select firstonly waveTemplateLine
                where waveTemplateLine.WaveTemplateName  == _waveTemplateName &&
                      waveTemplateLine.WaveStep          == _waveStep;
        }

        return waveTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWaveTemplateLine</c> record with a RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the wave template line.
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWaveTemplateLine findByRecId(
        RecId   _recId,
        boolean _forupdate = false)
    {
        WHSWaveTemplateLine waveTemplateLine;

        if (_recId)
        {
            waveTemplateLine.selectForUpdate(_forupdate);

            select firstonly waveTemplateLine
            where waveTemplateLine.Recid == _recId;
        }

        return waveTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrements the step number of the lines coming after a deleted step.
    /// </summary>
    /// <param name="_waveTemplateName">
    /// Name of the wave template.
    /// </param>
    /// <param name="_deletedStep">
    /// The step number of the deleted line.
    /// </param>
    public static void reorderMethods(WHSWaveTemplateName _waveTemplateName, WHSWaveStep _deletedStep)
    {
        WHSWaveTemplateLine waveTemplateLine;

        ttsbegin;

        // Reorder waveTemplateLines if template header exists (hasn't been deleted)
        if (WHSWaveTemplateTable::exist(_waveTemplateName))
        {
            while select forupdate waveTemplateLine
                order by waveTemplateLine.WaveStep asc
                where waveTemplateLine.WaveTemplateName == _waveTemplateName &&
                      waveTemplateLine.WaveStep         >  _deletedStep
            {
                --waveTemplateLine.WaveStep;
                waveTemplateLine.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextWaveStepName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the next wave step to run in a wave template.
    /// </summary>
    /// <returns>
    /// Returns the <c>WHSPostMethodName</c> of the next wave template line in the wave template.
    /// </returns>
    public WHSPostMethodName getNextWaveStepName()
    {
        WHSWaveTemplateLine nextTemplateLine;

        select firstOnly PostMethodName from nextTemplateLine
            order by WaveStep
            where nextTemplateLine.waveStep > this.waveStep
                && nextTemplateLine.WaveTemplateName == this.WaveTemplateName;

        return nextTemplateLine.PostMethodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastWaveStep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current wave step is the last step in the wave template.
    /// </summary>
    /// <returns>
    /// true, if the current record is the last wave template line in the wave template; otherwise, false.
    /// </returns>
    public boolean isLastWaveStep()
    {
        WHSWaveTemplateLine waveTemplateLine;

        select firstOnly RecId from waveTemplateLine
            where waveTemplateLine.WaveTemplateName == this.WaveTemplateName
            &&    waveTemplateLine.WaveStep         > this.WaveStep;

        return waveTemplateLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseTaskBasedProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current wave step should be run using task based processing
    /// </summary>
    /// <returns>
    /// true, if the wave should be run using task based processing; otherwise, false.
    /// </returns>
    public boolean shouldUseTaskBasedProcessing()
    {
        WHSWaveTemplateTable                waveTemplateTable;
        WHSWavePostMethodTaskConfiguration  postMethodTaskConfig;

        if (!WHSBaseWaveStepMethod::isTaskBasedProcessingAllowed(this.PostMethodName))
        {
            return false;
        }

        return WHSWavePostMethodTaskConfiguration::existsByWaveTemplateName(this.PostMethodName, this.WaveTemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWaveStepByRecId</Name>
				<Source><![CDATA[
    public static WHSWaveStep getWaveStepByRecId(RecId _recId)
    {
        return (select firstOnly WaveStep from WHSWaveTemplateLine
                where WHSWaveTemplateLine.RecId == _recId).WaveStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMethodBeRemoved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current method can be removed from <c>WHSWaveTemplateLine</c>.
    /// </summary>
    /// <returns>
    /// true, if the current method can be removed; otherwise, false.
    /// </returns>
    public final boolean canMethodBeRemoved()
    {
        WHSBaseWaveStepMethod baseWaveStepMethod;
        
        WHSWaveStepMethod waveStepMethod = WHSWaveStepMethodFactory::newMethodFromName(this.PostMethodName);
        if (waveStepMethod)
        {
            if (waveStepMethod is WHSBaseWaveStepMethod)
            {
                baseWaveStepMethod = waveStepMethod;
            }
            else if (waveStepMethod is WHSCustomWaveStepMethod)
            {
                WHSCustomWaveStepMethod customWaveStepMethod = waveStepMethod as WHSCustomWaveStepMethod;
                baseWaveStepMethod = customWaveStepMethod.baseMethod();

                if (baseWaveStepMethod 
                    && !baseWaveStepMethod.isOptional()
                    && WHSCustomWaveStepMethod::isReplacementForBaseMethod(baseWaveStepMethod.name(), this.PostMethodName))
                {
                    return true;
                }
            }
        }
        
        if (baseWaveStepMethod)
        {
            if (baseWaveStepMethod.isOptional())
            {
                return true;
            }
        
            return this.canMandatoryMethodBeRemoved(baseWaveStepMethod);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMandatoryMethodBeRemoved</Name>
				<Source><![CDATA[
    private boolean canMandatoryMethodBeRemoved(WHSBaseWaveStepMethod _baseWaveStepMethod)
    {
        WHSWaveTemplateLine waveTemplateLine;

        while select waveTemplateLine
            where waveTemplateLine.WaveTemplateName == this.WaveTemplateName
                && waveTemplateLine.WaveStep != this.WaveStep
        {
            if (WHSCustomWaveStepMethod::isReplacementForBaseMethod(_baseWaveStepMethod.name(), waveTemplateLine.PostMethodName))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMehodDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the display name of the method.
    /// </summary>
    /// <returns>
    /// The display name of the method.
    /// </returns>
    public display Name postMehodDisplayName()
    {
        WHSWaveStepMethod waveStepMethod = WHSWaveStepMethodFactory::newMethodFromName(this.PostMethodName);
        if (waveStepMethod)
        {
            return waveStepMethod.displayName();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        if (ret
            && _fieldIdToCheck == fieldNum(WHSWaveTemplateLine, WaveStepCode)
            && this.WaveStepCode) // the wave step code can always be blank
        {
            this.validateWaveStepCodeHasCorrectWaveStepType();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWaveStepCodeHasCorrectWaveStepType</Name>
				<Source><![CDATA[
    private boolean validateWaveStepCodeHasCorrectWaveStepType()
    {
        boolean ret = true;
        WHSPostMethod postMethod = WHSPostMethod::findByMethodName(this.PostMethodName);
        WHSWaveStepMethod waveStepMethod;

        if (postMethod.isBaseMethod())
        {
            waveStepMethod = WHSBaseWaveStepMethod::newFromName(postMethod.PostMethodName);
        }
        else
        {
            waveStepMethod = WHSCustomWaveStepMethod::newFromName(postMethod.PostMethodName);
        }

        if (!waveStepMethod.hasWaveStepCode())
        {
            ret = checkFailed(strFmt("@WAX:Error_WaveStepCodeAddedToNonEligibleTemplateLine", this.WaveStepCode));
        }

        if (ret && WHSWaveStepCodeTable::find(this.WaveStepCode).WaveStepType != waveStepMethod.waveStepType())
        {
            ret = checkFailed(strFmt("@WAX:Error_WaveStepCodeNotEligibleOnTemplate", this.WaveStepCode, waveStepMethod.waveStepType()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4477</DeveloperDocumentation>
	<FormRef>WHSWaveTemplateTable</FormRef>
	<Label>@WAX3074</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WaveTemplateName</TitleField1>
	<TitleField2>WaveStep</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>TemplateNameStepIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>TemplateNameStepIdx</PrimaryIndex>
	<ReplacementKey>TemplateNameStepIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveTemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveStep</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveStepCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveTemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveStep</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveTemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveStep</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveStepCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostMethodName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPostMethodName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WaveStep</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveStep</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveStepCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveStepCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveTemplateName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveTemplateName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateNameStepIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveTemplateName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WaveStep</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TemplateNamePostMethodNameIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveTemplateName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PostMethodName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PostMethodNameIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostMethodName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSPostMethod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSPostMethod</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostMethodName</Name>
					<SourceEDT>WHSPostMethodName</SourceEDT>
					<Field>PostMethodName</Field>
					<RelatedField>PostMethodName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWaveTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWaveTemplateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaveTemplateName</Name>
					<SourceEDT>WHSWaveTemplateName</SourceEDT>
					<Field>WaveTemplateName</Field>
					<RelatedField>WaveTemplateName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>