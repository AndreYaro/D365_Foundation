<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPosBatchTenderTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailPosBatchTenderTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrencyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code of tender or store.
    /// </summary>
    /// <returns>
    /// The currency code for a store.
    /// </returns>
    public display CurrencyCode getCurrencyName()
    {
        RetailStoreTable       storeTable;
        CurrencyCode        storeCurrency;
        CurrencyCode        tenderCurrency;
        ;

        // Only show a tenderCurreny if it is different from the store currency

        tenderCurrency = "";

        storeTable = RetailStoreTable::find(this.StoreId);

        if (storeTable)
        {
            storeCurrency = storeTable.Currency;

            if (storeCurrency != this.Currency)
            {
                tenderCurrency = this.Currency;
            }
        }

        return tenderCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTenderTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of tender type of current store.
    /// </summary>
    /// <returns>
    /// The tender type name.
    /// </returns>
    public display RetailTenderTypeName getTenderTypeName()
    {
        return RetailStoreTenderTypeTable::find(RetailStoreTable::find(this.StoreId).RecId, this.TenderTypeId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of counted, bank drop amounts.
    /// </summary>
    /// <returns>
    /// The total over amount of the transaction.
    /// </returns>
    public display Amount overAmount()
    {
        Amount overshort = 0;

        if (this.CountingRequired == true)
        {
            if (this.Overridden == NoYes::Yes)
            {
                overshort = this.OverrideDeclareTenderAmount + this.removeFromTenderAmount() - this.OverrideStartingAmount - this.OverrideAddToTenderAmount - (this.OverrideTenderedAmount - this.OverrideChangeAmount);
            }
            else
            {
                overshort = this.DeclareTenderAmount + this.removeFromTenderAmount() - this.StartingAmount - this.AddToTenderAmount - (this.TenderedAmount - this.ChangeAmount);
            }
            
        }

        return overshort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of counted, bank drop amounts  in transaction currency.
    /// </summary>
    /// <returns>
    /// The total over amount of the transaction in transaction currency.
    /// </returns>
    public display Amount overAmountCur()
    {
        Amount overshortCur = 0;

        if (this.CountingRequired == true)
        {
            if (this.Overridden == NoYes::Yes)
            {
                overshortCur = this.OverrideDeclareTenderAmountCur + this.removeFromTenderAmountCur() - this.OverrideStartingAmountCur - this.OverrideAddToTenderAmountCur - (this.OverrideTenderedAmountCur - this.OverrideChangeAmountCur);
            }
            else
            {
                overshortCur = this.DeclareTenderAmountCur + this.removeFromTenderAmountCur() - this.StartingAmountCur - this.AddToTenderAmountCur - (this.TenderedAmountCur - this.ChangeAmountCur);
            }
        }

        return overshortCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overShortAbsAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of counted, bank drop amounts in transaction currency.
    /// </summary>
    /// <returns>
    /// The total over amount of the transaction in transaction currency.
    /// </returns>
    public display Amount overShortAbsAmountCur()
    {
        ;

        return abs(this.overAmountCur());
    }

]]></Source>
			</Method>
			<Method>
				<Name>overShortLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a message based on the total amount.
    /// </summary>
    /// <returns>
    /// A string message that states that the amount is short or over.
    /// </returns>
    public display LabelType overShortLabel()
    {
        ;
        if (this.overAmountCur() >= 0)
        {
            return "@RET5412";
        }
        else
        {
            return "@RET5408";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromTenderAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of bank drop, safe drop and remove tender amount.
    /// </summary>
    /// <returns>
    /// The total remove from tender amount.
    /// </returns>
    public display Amount removeFromTenderAmount()
    {
        if (this.Overridden == NoYes::Yes)
        {
            return this.OverrideRemoveTenderAmount + this.OverrideBankDropAmount + this.OverrideSafeDropAmount;
        }
        else
        {
            return this.RemoveTenderAmount + this.BankDropAmount + this.SafeDropAmount;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromTenderAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of bank drop, safe drop and remove tender amount in transaction currency.
    /// </summary>
    /// <returns>
    /// The total remove from tender amount in transaction currency.
    /// </returns>
    public display Amount removeFromTenderAmountCur()
    {
        if (this.Overridden == NoYes::Yes)
        {
            return this.OverrideRemoveTenderAmountCur + this.OverrideBankDropAmountCur + this.OverrideSafeDropAmountCur;
        }
        else
        {
        return this.RemoveTenderAmountCur + this.BankDropAmountCur + this.SafeDropAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shiftAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the difference of tender amount and change amount.
    /// </summary>
    /// <returns>
    /// The difference of tender amount and change amount.
    /// </returns>
    public display Amount shiftAmountCur()
    {
        if (this.Overridden == NoYes::Yes)
        {
            return this.OverrideTenderedAmountCur - this.OverrideChangeAmountCur;
        }
        else
        {
            return this.TenderedAmountCur - this.ChangeAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addedToTenderAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of starting amount and floating entry amount.
    /// </summary>
    /// <returns>
    /// The sum of starting amount and floating entry amount.
    /// </returns>
    public display Amount addedToTenderAmountCur()
    {
        if (this.Overridden == NoYes::Yes)
        {
            return this.OverrideStartingAmountCur + this.OverrideAddToTenderAmountCur;
        }
        else
        {
            return this.StartingAmountCur + this.AddToTenderAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>declaredTenderAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the declared amount of tender, considers the overridden amount.
    /// </summary>
    /// <returns>
    /// The declared amount of tender.
    /// </returns>
    public display Amount declaredTenderAmountCur()
    {
        if (this.Overridden == NoYes::Yes)
        {
            return this.OverrideDeclareTenderAmountCur;
        }
        else
        {
            return this.DeclareTenderAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTenderLineBeVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether tender line can be visible in Z-report.
    /// </summary>
    /// <returns>
    /// A Boolean value that indicates whether tender line can be visible in Z-report or not.
    /// </returns>
    public display NoYes shouldTenderLineBeVisible()
    {
        if (this.addedToTenderAmountCur() != 0
            || this.shiftAmountCur() != 0
            || this.removeFromTenderAmountCur() != 0
            || this.declaredTenderAmountCur() != 0
            || this.overAmountCur() != 0
            || this.Count != 0)
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RetailPosBatchTenderTrans</c> table exists.
    /// </summary>
    /// <param name="_storeId">
    /// The ID value of the store.
    /// </param>
    /// <param name="_terminalId">
    /// The ID of the POS terminal.
    /// </param>
    /// <param name="_batchId">
    /// Identification of the POS batch.
    /// </param>
    /// <param name="_tenderTypeId">
    /// Identification of the tender type.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RetailStoreId      _storeId,
                                RetailTerminalId   _terminalId,
                                RetailPosBatchID   _batchId,
                                RetailTenderTypeId _tenderTypeId)
    {
        return _storeId && _terminalId && _batchId && _tenderTypeId && (select firstonly RecId from retailPosBatchTenderTrans
                                                                            where retailPosBatchTenderTrans.StoreId       == _storeId     &&
                                                                                  retailPosBatchTenderTrans.TerminalId    == _terminalId  &&
                                                                                  retailPosBatchTenderTrans.BatchID       == _batchId     &&
                                                                                  retailPosBatchTenderTrans.TenderTypeId  == _tenderTypeId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>RetailPosBatchTenderTrans</c> table.
    /// </summary>
    /// <param name="_storeId">
    /// The ID of the store.
    /// </param>
    /// <param name="_terminalId">
    /// The ID of the POS terminal.
    /// </param>
    /// <param name="_batchId">
    /// The ID of the POS batch.
    /// </param>
    /// <param name="_tenderTypeId">
    /// The ID of the tender type.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailPosBatchTenderTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailPosBatchTenderTrans find(RetailStoreId       _storeId,
                                              RetailTerminalId    _terminalId,
                                              RetailPosBatchID    _batchId,
                                              RetailTenderTypeId  _tenderTypeId,
                                              boolean          _forUpdate = false)
    {
        RetailPosBatchTenderTrans  rboPosBatchTenderTrans;
        ;

        rboPosBatchTenderTrans.selectForUpdate(_forUpdate);

        select firstonly rboPosBatchTenderTrans
            where rboPosBatchTenderTrans.StoreId        == _storeId      &&
                  rboPosBatchTenderTrans.TerminalId     == _terminalId   &&
                  rboPosBatchTenderTrans.BatchID        == _batchId      &&
                  rboPosBatchTenderTrans.TenderTypeId   == _tenderTypeId;

        return rboPosBatchTenderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStoreExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the exchange rate between the record currency code and the store one.
    /// </summary>
    /// <param name = "_storeCurrencyCode">Store currency code.</param>
    /// <returns>Exchange rate between current currency code and store one.</returns>
    internal ExchRate calculateStoreExchRate(CurrencyCode _storeCurrencyCode)
    {
        if (this.Currency == _storeCurrencyCode)
        {
            return 100;
        }

        if (this.TenderedAmountCur)
        {
            return RetailPosBatchTenderTrans::calculateAmountPercentage(this.TenderedAmount, this.TenderedAmountCur);
        }
        else if (this.AddToTenderAmountCur)
        {
            return RetailPosBatchTenderTrans::calculateAmountPercentage(this.AddToTenderAmount, this.AddToTenderAmountCur);
        }
        else if (this.BankDropAmountCur)
        {
            return RetailPosBatchTenderTrans::calculateAmountPercentage(this.BankDropAmount, this.BankDropAmountCur);
        }
        else if (this.ChangeAmountCur)
        {
            return RetailPosBatchTenderTrans::calculateAmountPercentage(this.ChangeAmount, this.ChangeAmountCur);
        }
        else if (this.DeclareTenderAmountCur)
        {
            return RetailPosBatchTenderTrans::calculateAmountPercentage(this.DeclareTenderAmount, this.DeclareTenderAmountCur);
        }
        else if (this.RemoveTenderAmountCur)
        {
            return RetailPosBatchTenderTrans::calculateAmountPercentage(this.RemoveTenderAmount, this.RemoveTenderAmountCur);
        }
        else if (this.SafeDropAmountCur)
        {
            return RetailPosBatchTenderTrans::calculateAmountPercentage(this.SafeDropAmount, this.SafeDropAmountCur);
        }
        else if (this.StartingAmountCur)
        {
            return RetailPosBatchTenderTrans::calculateAmountPercentage(this.StartingAmount, this.StartingAmountCur);
        }        
   
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmountPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the percentage value given two amounts.
    /// </summary>
    /// <param name = "amountPortion">First amount.</param>
    /// <param name = "amountWhole">Second amount.</param>
    /// <returns>Percentage value.</returns>
    internal static Amount calculateAmountPercentage(AmountMST amountPortion, AmountMST amountWhole)
    {
        if (amountWhole != 0)
        {
            return (amountPortion / amountWhole) * 100;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmountForExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount in a given currency based on the original amount, an exchange rate and the original currency.
    /// </summary>
    /// <param name = "tenderLineAmount">Tender line amount.</param>
    /// <param name = "exchRate">Exchange rate.</param>
    /// <param name = "fromCurrencyCode">Currency code from tender line amount.</param>
    /// <param name = "toCurrencyCode">Currency code for which the amount is being converted.</param>
    /// <returns>Tender line amount in the new currency.</returns>
    internal static Amount calculateAmountForExchangeRate(AmountMST tenderLineAmount, ExchRate exchRate, CurrencyCode fromCurrencyCode, CurrencyCode toCurrencyCode)
    {
        // No conversion if the unit is the same to avoid precision issues.
        if (fromCurrencyCode == toCurrencyCode)
        {
            return tenderLineAmount;
        }
        else
        {
            AmountMST amountOnExchRate = (tenderLineAmount * exchRate) / 100;

            return CurrencyExchangeHelper::amount(amountOnExchRate, toCurrencyCode);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260579</DeveloperDocumentation>
	<Label>@RET5078</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>BatchID</TitleField1>
	<TitleField2>TerminalId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>StoreTerminalBatchTenderTypeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>StoreTerminalBatchTenderTypeIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StoreId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TerminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangeAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Count</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountCur</Name>
			<Label>@SYS91963</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>removeFromTenderAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SafeDropAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddToTenderAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDropAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemoveTenderAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeclareTenderAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderedAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangeAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shiftAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amounts</Name>
			<Label>@SYS75670</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SafeDropAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>overAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddToTenderAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemoveTenderAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeclareTenderAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDropAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangeAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Counts</Name>
			<Label>@SYS81541</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Count</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StoreId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TerminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Origin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Replication</Name>
			<Label>@RET3213</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReplicationCounter</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TenderAmounts</Name>
			<Label>@SYS75670</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StoreId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TerminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountingRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddToTenderAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shiftAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>removeFromTenderAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeclareTenderAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>overAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Count</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AddToTenderAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RET5222</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AddToTenderAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@RET5222</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BankDropAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RET4543</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BankDropAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@RET4543</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPosBatchID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCardTypeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ChangeAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RET5077</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ChangeAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@RET5077</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Channel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Count</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Counter</ExtendedDataType>
			<Label>@RET5239</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CountingRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RET5221</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeclareTenderAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RET3370</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeclareTenderAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@RET3370</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Origin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailConnDistributionLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemoveTenderAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RET5240</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemoveTenderAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@RET5240</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ReplicationCounter</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReplicationCounter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SafeDropAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RET4599</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SafeDropAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@RET4599</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StartingAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RET260157</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StartingAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@RET260157</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TenderedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RET3346</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TenderedAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@RET3346</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TenderTypeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTenderTypeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TerminalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideAddToTenderAmountCur</Name>
			<ExtendedDataType>RetailOverrideAddToTenderAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideBankDropAmountCur</Name>
			<ExtendedDataType>RetailOverrideBankDropAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideChangeAmountCur</Name>
			<ExtendedDataType>RetailOverrideChangeAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideDeclareTenderAmountCur</Name>
			<ExtendedDataType>RetailOverrideDeclareTenderAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideRemoveTenderAmountCur</Name>
			<ExtendedDataType>RetailOverrideRemoveTenderAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideSafeDropAmountCur</Name>
			<ExtendedDataType>RetailOverrideSafeDropAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideStartingAmountCur</Name>
			<ExtendedDataType>RetailOverrideStartingAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideTenderedAmountCur</Name>
			<ExtendedDataType>RetailOverrideTenderedAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<ExtendedDataType>RetailPosBatchTenderTransNotes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideAddToTenderAmount</Name>
			<ExtendedDataType>RetailOverrideAddToTenderAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideBankDropAmount</Name>
			<ExtendedDataType>RetailOverrideBankDropAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideChangeAmount</Name>
			<ExtendedDataType>RetailOverrideChangeAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideDeclareTenderAmount</Name>
			<ExtendedDataType>RetailOverrideDeclareTenderAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideRemoveTenderAmount</Name>
			<ExtendedDataType>RetailOverrideRemoveTenderAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideSafeDropAmount</Name>
			<ExtendedDataType>RetailOverrideSafeDropAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideStartingAmount</Name>
			<ExtendedDataType>RetailOverrideStartingAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideTenderedAmount</Name>
			<ExtendedDataType>RetailOverrideTenderedAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Overridden</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RetailAreTenderLineAmountsOverridden</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StoreTerminalBatchTenderTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StoreId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TerminalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TenderTypeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CardTypeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Origin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReplicationCounter</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>Channel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailPosBatchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailPosBatchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreId</Name>
					<Field>StoreId</Field>
					<RelatedField>StoreId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TerminalId</Name>
					<Field>TerminalId</Field>
					<RelatedField>TerminalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BatchID</Name>
					<SourceEDT>RetailPosBatchID</SourceEDT>
					<Field>BatchID</Field>
					<RelatedField>BatchID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>StoreId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTenderTypeCardTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTenderTypeCardTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CardTypeId</Name>
					<SourceEDT>RetailCardTypeId</SourceEDT>
					<Field>CardTypeId</Field>
					<RelatedField>cardTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>cardTypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTenderTypeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTenderTypeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TenderTypeId</Name>
					<SourceEDT>RetailTenderTypeId</SourceEDT>
					<Field>TenderTypeId</Field>
					<RelatedField>tenderTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>tenderTypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TerminalId</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>TerminalId</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>terminalIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>