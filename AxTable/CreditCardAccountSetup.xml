<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardAccountSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CreditCardAccountSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CreditCardAccountSetup</c> table.
    /// </summary>
    /// <param name="_creditCardProcessorsId">
    /// The identifier of the credit card processor to check for existence.
    /// </param>
    /// <returns>
    /// True if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(CreditCardProcessorsId _creditCardProcessorsId)
    {
        boolean found = true;

        if (!CreditCardAccountSetup::exist(_creditCardProcessorsId))
        {
            found = checkFailed(strFmt(CreditCardAccountSetup::txtNotExist(), _creditCardProcessorsId));
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>CreditCardAccountSetup</c> table exists.
    /// </summary>
    /// <param name="_creditCardProcessorsId">
    /// The identifier of the credit card processor to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(CreditCardProcessorsId _creditCardProcessorsId)
    {
        return (select creditCardAccountSetup
                 where creditCardAccountSetup.CreditCardProcessors == _creditCardProcessorsId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardAccountSetup</c> table.
    /// </summary>
    /// <param name="_creditCardProcessorsId">
    /// The RecId of the credit card processor record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAccountSetup</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardAccountSetup find(
            CreditCardProcessorsId _creditCardProcessorsId,
            boolean _forUpdate = false,
            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CreditCardAccountSetup creditCardAccountSetup;

        creditCardAccountSetup.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            creditCardAccountSetup.concurrencyModel(_concurrencyModel);
        }

        if (_creditCardProcessorsId)
        {
            creditCardAccountSetup.selectForUpdate(_forUpdate);
            creditCardAccountSetup.selectLocked(_forUpdate);

            select firstonly creditCardAccountSetup
                where creditCardAccountSetup.CreditCardProcessors == _creditCardProcessorsId;
        }

        return creditCardAccountSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the active record in the <c>CreditCardAccountSetup</c> table.
    /// </summary>
    /// <returns>
    /// The active record in the <c>CreditCardAccountSetup</c> table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// No credit card processors are active.
    /// </exception>
    public static CreditCardAccountSetup findActive()
    {
        CreditCardAccountSetup creditCardAccountSetup;
        CreditCardProcessors creditCardProcessors;

        select creditCardAccountSetup
            exists join creditCardProcessors
            where creditCardProcessors.Active &&
                creditCardProcessors.RecId == creditCardAccountSetup.CreditCardProcessors;

        if (!creditCardAccountSetup)
        {
            throw error("@SYS116985");
        }
        return creditCardAccountSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS121339";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets inital value of a creditCardAccountSetup object. We want DisallowZeroAmount to be true by default.
    /// </summary>
    public void initValue()
    {
        super();

        this.DisallowZeroAmount = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        Global::handleEncryptedTablePreInsert(this);
        super();
        Global::handleEncryptedTablePostInsert(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        Global::handleEncryptedTablePreUpdate(this);
        super();
        Global::handleEncryptedTablePostUpdate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageEncryptionForSecureMerchantProperties</Name>
				<Source><![CDATA[
    public str manageEncryptionForSecureMerchantProperties(boolean _set, str _value)
    {
        return Global::editEncryptedField(this, _value, fieldNum(CreditCardAccountSetup, SecureMerchantProperties), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptionPurpose</Name>
				<Source><![CDATA[
    public str encryptionPurpose(FieldId _fieldId)
    {
        return _fieldId == fieldNum(CreditCardAccountSetup, SecureMerchantProperties) ? CreditCardPaymentProperties::CryptoPurpose : super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the deletion of the Credit card account setup.
    /// </summary>
    /// <returns>
    /// A boolean with the result of the validation.
    /// </returns>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();
    
        // Verify if the processor is not in use
        ret = ret && !CreditCardProcessors::isProcessorInUse(this.CreditCardProcessors);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CreditCard</ConfigurationKey>
	<DeveloperDocumentation>@SYS126892</DeveloperDocumentation>
	<FormRef>CreditCardProcessors</FormRef>
	<Label>@SYS116925</Label>
	<TableGroup>Parameter</TableGroup>
	<CacheLookup>Found</CacheLookup>
	<DataSharingType>Single</DataSharingType>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConnectorName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsTest</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressVerification</Name>
			<Label>@SYS327101</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressVerification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressVerificationVoidUnknown</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressVerificationLevel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CardVerificationCheck</Name>
			<Label>@SYS327068</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CardVerificationCheck</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardVerificationCheckAllowBlank</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConnectorName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TestMode</Name>
			<Label>@SYS80656</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsTest</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AddressVerification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardUseAddressVerification</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AddressVerificationLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CreditCardMSAVSDetailCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AddressVerificationVoidUnknown</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardAddressVerificationVoid</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CardVerificationCheck</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardUseCardVerificationCheck</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CardVerificationCheckAllowBlank</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardCVVAllowBlank</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConnectorName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardConnectorName</ExtendedDataType>
			<Label>@SYS4040000</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConnectorProperties</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardAccountConnectorProperties</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditCardProcessors</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardProcessorsId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardIsTestMode</ExtendedDataType>
			<EnumType>FalseTrue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisallowZeroAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardDisallowZeroCharge</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MerchantProperties</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardAccountConnectorProperties</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>SecureMerchantProperties</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EncryptedField</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CreditCardProcessors</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditCardProcessors</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CreditCardProcessors</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CreditCardProcessors</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditCardProcessors</Name>
					<Field>CreditCardProcessors</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>