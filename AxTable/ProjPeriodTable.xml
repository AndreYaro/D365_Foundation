<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPeriodTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCrossPeriod</Name>
				<Source><![CDATA[
    public boolean canCrossPeriod()
    {
        boolean   ret;

        switch (this.TimesheetFrequency)
        {
            case TSPeriodFrequency::Week,
                 TSPeriodFrequency::BiWeekly:
                ret = true;
            break;

            default:
                ret = false;
            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTSPerFreqToTSPerWeekMth</Name>
				<Source><![CDATA[
    private TSPerWeekMth convertTSPerFreqToTSPerWeekMth(TSTimesheetPeriodFrequency _timesheetPeriodFrequency)
    {
        switch (_timesheetPeriodFrequency)
        {
            case TSTimesheetPeriodFrequency::BiWeekly:
                return TSPerWeekMth::BiWeekly;
            case TSTimesheetPeriodFrequency::Week:
                return TSPerWeekMth::Week;
            case TSTimesheetPeriodFrequency::SemiMonthly:
                return TSPerWeekMth::SemiMonthly;
            case TSTimesheetPeriodFrequency::Month:
                return TSPerWeekMth::Month;
            default:
                return TSPerWeekMth::Week;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTSPerWeekMthToTSPerFreq</Name>
				<Source><![CDATA[
    private TSTimesheetPeriodFrequency convertTSPerWeekMthToTSPerFreq(TSPerWeekMth _periodFrequency)
    {
        switch (_periodFrequency)
        {
            case TSPerWeekMth::BiWeekly:
                return TSTimesheetPeriodFrequency::BiWeekly;
            case TSPerWeekMth::Week:
                return TSTimesheetPeriodFrequency::Week;
            case TSPerWeekMth::SemiMonthly:
                return TSTimesheetPeriodFrequency::SemiMonthly;
            case TSPerWeekMth::Month:
                return TSTimesheetPeriodFrequency::Month;
            default:
                return this.defaultTimesheetPeriodFrequency();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTimesheetPeriodFrequency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the default converted enumeration value of <c>TSPerWeekMth</c>.
    /// </summary>
    /// <returns>
    /// Returns the enumeration value of <c>TSTimesheetPeriodFrequency</c>.
    /// </returns>
    protected TSTimesheetPeriodFrequency defaultTimesheetPeriodFrequency()
    {
        return TSTimesheetPeriodFrequency::Week;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPeriodFrequency</Name>
				<Source><![CDATA[
    public edit TSPerWeekMth editPeriodFrequency(boolean _set, TSPerWeekMth _periodFrequency)
    {
        if (_set)
        {
            this.setPeriodFrequency(_periodFrequency);
        }

        return  this.getPeriodFrequency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTimesheetPeriodFrequency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit method used for Timesheet period types
    /// </summary>
    /// <param name="_set">
    /// Whether current value should be updated
    /// </param>
    /// <param name="_timesheetPeriodFrequency">
    /// The new value to set, if _set is equals to true
    /// </param>
    /// <returns>
    /// The stored value
    /// </returns>
    /// <remarks>
    /// None.
    /// </remarks>
    public edit TSTimesheetPeriodFrequency editTimesheetPeriodFrequency(boolean _set, TSTimesheetPeriodFrequency _timesheetPeriodFrequency)
    {
        if (_set)
        {
            this.setPeriodFrequency(this.convertTSPerFreqToTSPerWeekMth(_timesheetPeriodFrequency));
        }

        return this.convertTSPerWeekMthToTSPerFreq(this.getPeriodFrequency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeExist</Name>
				<Source><![CDATA[
    public boolean employeeExist()
    {
        ResourceSetup resourceSetup;

        return (select firstonly resourceSetup where resourceSetup.Period == this.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodFrequency</Name>
				<Source><![CDATA[
    public TSPerWeekMth getPeriodFrequency()
    {
        if (this.TimesheetFrequency == TSPeriodFrequency::None)
        {
            switch (this.TimeFrequency)
            {
                case PerDayWeekMthQtYr::Unlimited:
                    return TSPerWeekMth::Unlimited;

                case PerDayWeekMthQtYr::Day:
                    return TSPerWeekMth::Day;

                case PerDayWeekMthQtYr::Quarter:
                    return TSPerWeekMth::Quarter;

                case PerDayWeekMthQtYr::Year:
                    return TSPerWeekMth::Year;
            }
        }
        else
        {
            return this.convertTSPeriodFrequencyToTSPerWeekMth();
        }

        return TSPerWeekMth::Unlimited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTSPeriodFrequencyToTSPerWeekMth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the enumeration value of <c>TSPeriodFrequency</c> to enumeration value of <c>TSPerWeekMth</c>.
    /// </summary>
    /// <returns>
    /// Returns the enumeration value of <c>TSPerWeekMth</c>.
    /// </returns>
    [Wrappable(true)]
    protected final TSPerWeekMth convertTSPeriodFrequencyToTSPerWeekMth()
    {
        switch (this.TimesheetFrequency)
        {
            case TSPeriodFrequency::Week:
                return TSPerWeekMth::Week;

            case TSPeriodFrequency::BiWeekly:
                return TSPerWeekMth::BiWeekly;

            case TSPeriodFrequency::SemiMonthly:
                return TSPerWeekMth::SemiMonthly;

            case TSPeriodFrequency::Month:
                return TSPerWeekMth::Month;

            case TSPeriodFrequency::Period:
                return TSPerWeekMth::Period;
        }

        return TSPerWeekMth::Unlimited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.AutoSplitWeek  = NoYes::No;

        this.WeekStart      = ProjParameters::find().WeekStart;
        this.TimesheetFrequency = TSPeriodFrequency::Period;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTimesheetPeriod</Name>
				<Source><![CDATA[
    public boolean isTimesheetPeriod()
    {
        NoYes   ret;

        switch (this.TimesheetFrequency)
        {
            case TSPeriodFrequency::Week,
                 TSPeriodFrequency::BiWeekly,
                 TSPeriodFrequency::Month,
                 TSPeriodFrequency::SemiMonthly :
                ret = true;
            break;

            default:
                ret = false;
            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjPeriodTable,TimesheetFrequency) :
                switch (this.TimesheetFrequency)
                {
                    case TSPeriodFrequency::Week :
                        this.TimeFrequency = PerDayWeekMthQtYr::Week;
                        break;

                    case TSPeriodFrequency::BiWeekly :
                        this.TimeFrequency = PerDayWeekMthQtYr::Unlimited;
                        break;

                    case TSPeriodFrequency::SemiMonthly :
                        this.TimeFrequency = PerDayWeekMthQtYr::Unlimited;
                        break;

                    case TSPeriodFrequency::Month :
                        this.TimeFrequency = PerDayWeekMthQtYr::Month;
                        break;

                    case TSPeriodFrequency::Period :
                        this.TimeFrequency = PerDayWeekMthQtYr::Period;
                        break;

                    default :
                        break;  
                }

            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodsExist</Name>
				<Source><![CDATA[
    public boolean periodsExist()
    {;
        return (select firstonly projPeriodLine where projPeriodLine.PeriodId == this.PeriodId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceExist</Name>
				<Source><![CDATA[
    public boolean resourceExist()
    {
        ResourceSetup resourceSetup;

        return (select firstonly resourceSetup where resourceSetup.Period == this.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodFrequency</Name>
				<Source><![CDATA[
    public void setPeriodFrequency(TSPerWeekMth _periodFrequency)
    {
        switch (_periodFrequency)
        {
            case TSPerWeekMth::BiWeekly:
                this.TimeFrequency      = PerDayWeekMthQtYr::Unlimited;
                this.TimesheetFrequency = TSPeriodFrequency::BiWeekly;
                break;

            case TSPerWeekMth::Day:
                this.TimeFrequency      = PerDayWeekMthQtYr::Day;
                this.TimesheetFrequency = TSPeriodFrequency::None;
               break;

            case TSPerWeekMth::Month:
                this.TimeFrequency      = PerDayWeekMthQtYr::Month;
                this.TimesheetFrequency = TSPeriodFrequency::Month;
               break;

            case TSPerWeekMth::Period:
                this.TimeFrequency      = PerDayWeekMthQtYr::Period;
                this.TimesheetFrequency = TSPeriodFrequency::Period;
                break;

            case TSPerWeekMth::Quarter:
                this.TimeFrequency      = PerDayWeekMthQtYr::Quarter;
                this.TimesheetFrequency = TSPeriodFrequency::None;
               break;

            case TSPerWeekMth::SemiMonthly:
                this.TimeFrequency      = PerDayWeekMthQtYr::Unlimited;
                this.TimesheetFrequency = TSPeriodFrequency::SemiMonthly;
                break;

            case TSPerWeekMth::Unlimited:
                this.TimeFrequency      = PerDayWeekMthQtYr::Unlimited;
                this.TimesheetFrequency = TSPeriodFrequency::None;
                break;

            case TSPerWeekMth::Week:
                this.TimeFrequency      = PerDayWeekMthQtYr::Week;
                this.TimesheetFrequency = TSPeriodFrequency::Week;
               break;

            case TSPerWeekMth::Year:
                this.TimeFrequency      = PerDayWeekMthQtYr::Year;
                this.TimesheetFrequency = TSPeriodFrequency::None;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret;
        ;

        ret = super(p1);

        if (ret)
        {
            switch (p1)
            {
                case fieldnum(ProjPeriodTable,TimeFrequency) :
                    if (this.TimeFrequency != this.orig().TimeFrequency)
                    {
                        if ((select projPeriodLine where projPeriodLine.PeriodId == this.PeriodId).RecId)
                        {
                            return checkFailed("@SYS50575");
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ProjPeriodId _projPeriodId)
    {;
        if (_projPeriodId)
        {
            return (select projPeriodTable where projPeriodTable.PeriodId == _projPeriodId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjPeriodTable find(ProjPeriodId _periodId, boolean _forUpdate = false)
    {
        ProjPeriodTable   projPeriodTable = null;
        ;

        projPeriodTable.selectForUpdate(_forUpdate);

        if (_periodId)
        {
            select projPeriodTable where projPeriodTable.PeriodId == _periodId;
        }

        return projPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    public static ProjPeriodTable findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        ProjPeriodTable   projPeriodTable = null;

        projPeriodTable.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select projPeriodTable where projPeriodTable.RecId == _recId;
        }

        return projPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcRlookupPeriodCodesByTimeFrequ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup selection for period code based on a given period type.
    /// </summary>
    /// <param name="_formControl">
    /// The control for which lookup is performed.
    /// </param>
    /// <param name="_timeFrequency">
    /// A <c>Boolean</c> value that indicates day, week, month, quarter, or year.
    /// </param>
    public static void mcRlookupPeriodCodesByTimeFrequ (FormControl _formControl, PerDayWeekMthQtYr _timeFrequency)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        ;
        sysTableLookup = SysTableLookup::newParameters(tableNum(ProjPeriodTable), _formControl);
        sysTableLookup.addLookupfield(fieldNum(ProjPeriodTable, PeriodId));
        sysTableLookup.addLookupfield(fieldNum(ProjPeriodTable, Description));
        qbds = query.addDataSource(tableNum(ProjPeriodTable));
        qbds.addRange(fieldNum(ProjPeriodTable, TimeFrequency)).value(enum2str(_timeFrequency));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrNextPeriodTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next period end date after the specified period end date.
    /// </summary>
    /// <param name="_periodId">
    /// The period ID of the period line to examine.
    /// </param>
    /// <param name="_periodTo">
    /// The period end date before the period end date to be found.
    /// </param>
    /// <returns>
    /// The next period end date after the specified period end date.
    /// </returns>
    public static ProjPeriodTo mcrNextPeriodTo(ProjPeriodId _periodId, ProjPeriodTo _periodTo)
    {
        ProjPeriodLine  projPeriodLine;

        select firstonly reverse PeriodTo from projPeriodLine
            order by PeriodTo
            where projPeriodLine.PeriodId   == _periodId &&
                  projPeriodLine.PeriodTo >=  _periodTo;

        return projPeriodLine.PeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPeriodLineFromPeriodFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period line record for the period ID specified
    /// and a period from date after the specified period from date.
    /// </summary>
    /// <param name="_periodId">
    /// The period ID of the period line to examine.
    /// </param>
    /// <param name="_periodFrom">
    /// The period from date used to find the period line record.
    /// </param>
    /// <returns>
    /// The period line record for the period ID specified
    /// and a period from date after the specified period from date.
    /// </returns>
    public static ProjPeriodLine mcrPeriodLineFromPeriodFrom(ProjPeriodId _periodId, ProjPeriodFrom _periodFrom)
    {
        ProjPeriodLine  projPeriodLine;

        select PeriodFrom from projPeriodLine
            order by PeriodFrom
            where projPeriodLine.PeriodId   == _periodId &&
                  projPeriodLine.PeriodFrom >  _periodFrom;

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPeriodLineFromPeriodTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period line record for the period ID specified
    /// and a period from date after or equal to the specified period to date.
    /// </summary>
    /// <param name="_periodId">
    /// The period ID of the period line to examine.
    /// </param>
    /// <param name="_periodTo">
    /// The period to date used to find the period line record.
    /// </param>
    /// <returns>
    /// The period line record for the period ID specified
    /// and a period from date after or equal to the specified period to date.
    /// </returns>
    public static ProjPeriodLine mcrPeriodLineFromPeriodTo(ProjPeriodId _periodId, ProjPeriodTo _periodTo)
    {
        ProjPeriodLine  projPeriodLine;

        select PeriodFrom from projPeriodLine
            order by PeriodFrom
            where projPeriodLine.PeriodId   == _periodId
            &&  projPeriodLine.PeriodFrom >=  _periodTo;

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPeriod</Name>
				<Source><![CDATA[
    public static ProjPeriodFrom nextPeriod(ProjPeriodId periodId, ProjPeriodFrom periodFrom)
    {
        ProjPeriodLine  projPeriodLine;

        select PeriodFrom from projPeriodLine
            order by PeriodFrom
            where projPeriodLine.PeriodId   == periodId &&
                  projPeriodLine.PeriodFrom >= periodFrom;

        return projPeriodLine.PeriodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjPeriodTableQueryFilterByTimesheetPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query that returns all project periods that have the TimesheetFrequency field
    /// with a valid value for timesheets.
    /// </summary>
    /// <returns>Project periods that have the TimesheetFrequency field with a valid value for timesheets.</returns>
    public static Query getProjPeriodTableQueryFilterByTimesheetPeriods()
    {
        query query = new Query();
        QueryBuildDataSource projPeriodTableDs = query.addDataSource(tableNum(ProjPeriodTable));

        projPeriodTableDs.addRange(fieldNum(ProjPeriodTable, TimesheetFrequency)).value(TSQueryRangeUtil::validTimesheetFrequency());
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoSplitWeek</Name>
				<Source><![CDATA[
    public static boolean isAutoSplitWeek(ProjPeriodId _periodId)
    {
        ProjPeriodTable projPeriodTable;

        if (_periodId)
        {
            select firstonly AutoSplitWeek from projPeriodTable 
                where projPeriodTable.PeriodId == _periodId;
        }

        return projPeriodTable.AutoSplitWeek;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124947</DeveloperDocumentation>
	<Label>@SYS50475</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PeriodId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PeriodIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>PeriodIdx</PrimaryIndex>
	<ReplacementKey>PeriodIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjPeriodEmpl</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjPeriodEmpl</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjPeriodLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjPeriodLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjPeriodTimesheetWeek</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjPeriodTimesheetWeek</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeFrequency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PeriodFrequency</Name>
			<Label>@SYS50473</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editPeriodFrequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeFrequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimesheetFrequency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Timesheet</Name>
			<Label>@SYS138979</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoSplitWeek</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WeekStart</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoSplitWeek</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TSAutoSplitWeek</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS23329</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TimeFrequency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS50473</Label>
			<EnumType>PerDayWeekMthQtYr</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TimesheetFrequency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TSPeriodFrequency</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WeekStart</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TSWeekStart</ExtendedDataType>
			<EnumType>WeekDays</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PeriodIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PeriodId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>