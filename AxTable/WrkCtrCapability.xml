<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrCapability</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrCapability extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentResourceCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of resources that have the capability as of today.
    /// </summary>
    /// <returns>
    ///    The number of resources that have the capability as of today.
    /// </returns>
    public int currentResourceCount()
    {
        WrkCtrCapabilityResource    wrkCtrCapabilityResource;
        date                        selectDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        select validtimestate(selectDate) count(RecId) from wrkCtrCapabilityResource
            where wrkCtrCapabilityResource.Capability == this.RecId;

        return int642int(wrkCtrCapabilityResource.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        WrkCtrActivityCapabilityRequirement     wrkCtrActivityCapabilityRequirement;
        WrkCtrActivityRequirement               wrkCtrActivityRequirement;
        WrkCtrActivityRequirementSet            wrkCtrActivityRequirementSet;
        WrkCtrActivity                          wrkCtrActivity;
        WrkCtrProdRouteActivity                 wrkCtrProdRouteActivity;
        ProdTable                               prodTable;
        boolean                                 ret;

        ret = super();

        //Not allowed to delete if the capability is used as requirement, except if the requirement is on production order which has status = ended
        select firstonly RecId from wrkCtrActivityCapabilityRequirement
            where wrkCtrActivityCapabilityRequirement.Capability == this.RecId
            notexists join wrkCtrActivityRequirement
            exists join wrkCtrActivityRequirementSet
            exists join wrkCtrProdRouteActivity
            exists join wrkCtrActivity
            exists join prodTable
                      where wrkCtrActivityRequirement.RecId     == wrkCtrActivityCapabilityRequirement.ActivityRequirement
                         && wrkCtrActivityRequirementSet.RecId  == wrkCtrActivityRequirement.ActivityRequirementSet
                         && wrkCtrActivity.RecId                == wrkCtrActivityRequirementSet.Activity
                         && wrkCtrProdRouteActivity.Activity    == wrkCtrActivity.RecId
                         && prodTable.ProdId                    == wrkCtrProdRouteActivity.ProdId
                         && prodTable.DataAreaId                == wrkCtrProdRouteActivity.RouteDataAreaId
                         && prodTable.ProdStatus                == ProdStatus::Completed;

        if (wrkCtrActivityCapabilityRequirement.RecId)
        {
            ret = checkFailed(strfmt("@SYS134742","@SYS133090"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>WrkCtrCapability</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the capability to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>WrkCtrCapability</c> table; otherwise, an empty record.
    /// </returns>
    public static WrkCtrCapability find(RecId       _recId,
                                        boolean     _forUpdate = false)
    {
        WrkCtrCapability wrkCtrCapability;

        wrkCtrCapability.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly wrkCtrCapability
                where wrkCtrCapability.RecId == _recId;
        }

        return wrkCtrCapability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>WrkCtrCapability</c> record based on the name of the capability
    /// </summary>
    /// <param name="_wrkCtrCapabilityName">
    ///    The name of the capability to find
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the found record should be selected for update.
    /// </param>
    /// <returns>
    ///    A <c>WrkCtrCapability</c> record based on the name of the capability.
    /// </returns>
    public static WrkCtrCapability findName(WrkCtrCapabilityName _wrkCtrCapabilityName,
                                            boolean              _forUpdate = false)
    {
        WrkCtrCapability wrkCtrCapability;

        wrkCtrCapability.selectForUpdate(_forUpdate);

        if (_wrkCtrCapabilityName)
            select firstonly wrkCtrCapability
                where wrkCtrCapability.Name == _wrkCtrCapabilityName;

        return wrkCtrCapability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a form loopkup for a capability name.
    /// </summary>
    /// <param name="_ctrl">
    /// A <c>FormStringControl</c> control that the lookup should bind to.
    /// </param>
    static void lookupName(FormStringControl _ctrl)
    {
        Args       args;
        Object     formRun;

        args = new Args();
        args.name(formstr(WrkCtrCapabilityLookUp));

        formRun = classfactory.formRunClass(args);
        formRun.parmReturnFieldId(fieldnum(WrkCtrCapability, Name));
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(WrkCtrCapability, Description),
                [
                    fieldNum(WrkCtrCapability,Name )
                ]
            ]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WrkCtrCapability, Description):
                if (!this.Description && this.Name)
                {
                    this.Description = this.Name;
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS133079</DeveloperDocumentation>
	<Label>@SYS133077</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WrkCtrCapabilityResource</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrCapabilityResource</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrCapabilityDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrCapabilityName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>