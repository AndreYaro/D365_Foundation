<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpRetailProductAttributeMetadata</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpRetailProductAttributeMetadata extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>productAttributeMetadataByCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all product attribute metadata on a channel by a category
    /// </summary>
    /// <param name="_channel">
    /// Channel Id
    /// </param>
    /// <param name="_category">
    /// Category Id
    /// </param>
    /// <returns>
    /// A record cursor in the <c>TmpRetailProductAttributeMetadata</c> table; otherwise, an empty buffer.
    /// </returns>
    public static TmpRetailProductAttributeMetadata productAttributeMetadataByCategory(RefRecId _channel, RefRecId _category)
    {
        TmpRetailProductAttributeMetadata tmpRetailProductAttributeMetadata =
            TmpRetailProductAttributeMetadata::productAttributeMetadataByInternalOrgCat(RetailInternalOrganization::findByChannelId(_channel).RecId, _category);

        return tmpRetailProductAttributeMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productAttributeMetadataByInternalOrgCat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all product attribute metadata on a internal organization by a category.
    /// </summary>
    /// <param name="_internalOrgRecId">
    /// Internal org. record id.
    /// </param>
    /// <param name="_category">
    /// Category Id
    /// </param>
    /// <returns>
    /// A record cursor in the <c>TmpRetailProductAttributeMetadata</c> table; otherwise, an empty buffer.
    /// </returns>
    public static TmpRetailProductAttributeMetadata productAttributeMetadataByInternalOrgCat(RefRecId _internalOrgRecId, RefRecId _category)
    {
        EcoResCategory currentCategory = EcoResCategory::find(_category);

        int currentVersion = 0;

        TmpRetailProductAttributeMetadata tmpRetailProductAttributeMetadata;
        TmpRetailProductAttributeMetadata::addSharedAndInternalOrgAttributesForRoot(
            tmpRetailProductAttributeMetadata,
            _internalOrgRecId,
            currentCategory,
            currentVersion);

        TmpRetailProductAttributeMetadata::addCategoryAttributes(
            tmpRetailProductAttributeMetadata,
            _internalOrgRecId,
            currentCategory,
            currentVersion);

        return tmpRetailProductAttributeMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productAttributeMetadataByCatalogCat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all product attribute metadata on a catalog by a category.
    /// </summary>
    /// <param name="_catalogRefRecId">
    /// Catalog record id.
    /// </param>
    /// <param name="_category">
    /// Category Id
    /// </param>
    /// <returns>
    /// A record cursor in the <c>TmpRetailProductAttributeMetadata</c> table; otherwise, an empty buffer.
    /// </returns>
    public static TmpRetailProductAttributeMetadata productAttributeMetadataByCatalogCat(CatalogRefRecId _catalogRefRecId, RefRecId _category)
    {
        EcoResCategory currentCategory = EcoResCategory::find(_category);

        int currentVersion = 0;

        TmpRetailProductAttributeMetadata tmpRetailProductAttributeMetadata;
        TmpRetailProductAttributeMetadata::addSharedAndCatalogAttributesForRoot(
            tmpRetailProductAttributeMetadata,
            _catalogRefRecId,
            currentCategory,
            currentVersion);

        TmpRetailProductAttributeMetadata::addCategoryAttributes(
            tmpRetailProductAttributeMetadata,
            0,
            currentCategory,
            currentVersion,
            _catalogRefRecId);

        return tmpRetailProductAttributeMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpRetailProductAttributeMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a row into the TmpRetailProductAttributeMetadata table.
    /// </summary>
    /// <param name = "_tmpRetailProductAttributeMetadata">The table to be inserted</param>
    /// <param name = "_internalOrgRecId">Internal organization RecId to query RetailProdAttributeInternalOrgMetadata.</param>
    /// <param name = "_internalOrgId">Ancestor internal organization RecId.</param>
    /// <param name = "_categoryId">Category id for the attribute. 0 for non-category attribute.</param>
    /// <param name = "_attributeId">Attribute id.</param>
    /// <param name = "_attributeGroupId">Attribute group id.</param>
    /// <param name = "_attributeName">Attribute name.</param>
    /// <param name = "_attributeRelationType">Attribute relation type.</param>
    /// <param name = "_displayOrder">The display order of the attribute.</param>
    /// <param name = "_attributeGroupDisplayOrder">The display order of the attribute group.</param>
    /// <param name = "_catalogRefRecId">Catalog RecId.</param>
    private static void insertTmpRetailProductAttributeMetadata(
        TmpRetailProductAttributeMetadata _tmpRetailProductAttributeMetadata,
        RefRecId _internalOrgRecId,
        RefRecId _internalOrgId,
        RefRecId _categoryId,
        RefRecId _attributeId,
        EcoResAttributeGroupRefRecId _attributeGroupId,
        Name _attributeName,
        RetailProductAttributeRelationType _attributeRelationType,
        RetailDisplayOrder _displayOrder,
        RetailAttributeGroupDisplayOrder _attributeGroupDisplayOrder,
        CatalogRefRecId _catalogRefRecId = 0)
    {
        // find Attribute for a internal org from RetailProdAttribIntOrgMetadataCollapsed view.
        RetailProdAttribIntOrgMetadataCollapsed internalOrgMetadata = RetailProdAttribIntOrgMetadataCollapsed::findByInternalOrgAttribute(_internalOrgId, _attributeId);
        RetailProdAttributeCatalogMetadata catalogMetadata = RetailProdAttributeCatalogMetadata::findByIds(_catalogRefRecId, _attributeId);

        _tmpRetailProductAttributeMetadata.AncestorInternalOrg   = _internalOrgId;
        _tmpRetailProductAttributeMetadata.AncestorInternalOrgName = OMOperatingUnit::find(RetailInternalOrganization::find(
                                                                                           _tmpRetailProductAttributeMetadata.AncestorInternalOrg).InternalOrganization,
                                                                                           OMOperatingUnitType::OMAnyOU).Name;
        _tmpRetailProductAttributeMetadata.Category              = _categoryId;
        _tmpRetailProductAttributeMetadata.AttributeRelationType = _attributeRelationType;
        _tmpRetailProductAttributeMetadata.Attribute             = _attributeId;
        _tmpRetailProductAttributeMetadata.AttributeName         = _attributeName;
        _tmpRetailProductAttributeMetadata.AttributeGroup        = _attributeGroupId;

        _tmpRetailProductAttributeMetadata.Overridden = RetailProdAttributeInternalOrgMetadata::isMetadataOverridden(_internalOrgRecId, _attributeId);

        _tmpRetailProductAttributeMetadata.IncludeAttribute  = ((internalOrgMetadata.RecId > 0 || catalogMetadata.RecId > 0) ? NoYes::Yes : NoYes::No);
        _tmpRetailProductAttributeMetadata.IsRequired        = ((internalOrgMetadata.RecId > 0 || catalogMetadata.RecId > 0) ? (internalOrgMetadata.IsRequired || catalogMetadata.IsRequired) : NoYes::No);
        _tmpRetailProductAttributeMetadata.HostCatalog       = _catalogRefRecId;

        RetailAttributeMetadata retailAttributeMetadata = RetailAttributeMetadata::findByAttribute(_attributeId);

        if (internalOrgMetadata.RecId)
        {
            _tmpRetailProductAttributeMetadata.Metadata = internalOrgMetadata.Metadata;
            _tmpRetailProductAttributeMetadata.MetadataVersion = internalOrgMetadata.MetadataVersion;
        }
        else
        {
            _tmpRetailProductAttributeMetadata.Metadata = retailAttributeMetadata.Metadata;
            _tmpRetailProductAttributeMetadata.MetadataVersion = retailAttributeMetadata.MetadataVersion;
        }

        if (_tmpRetailProductAttributeMetadata.Metadata && _tmpRetailProductAttributeMetadata.MetadataVersion)
        {
            boolean isRefinableAttribute;

            if (_catalogRefRecId > 0)
            {
                RetailCatalogProdAttrMetadataHandler retailProdAttrMetadataHandler = new RetailCatalogProdAttrMetadataHandler();
                retailProdAttrMetadataHandler.deserialize(_tmpRetailProductAttributeMetadata.Metadata, _tmpRetailProductAttributeMetadata.MetadataVersion);
                isRefinableAttribute = retailProdAttrMetadataHandler.isRefinable();
            }
            else
            {
                RetailSPChannelProdAttrMetadataHandler retailProdAttrMetadataHandler = new RetailSPChannelProdAttrMetadataHandler();
                retailProdAttrMetadataHandler.deserialize(_tmpRetailProductAttributeMetadata.Metadata, _tmpRetailProductAttributeMetadata.MetadataVersion);
                isRefinableAttribute = retailProdAttrMetadataHandler.isRefinable();
            }

            _tmpRetailProductAttributeMetadata.FilterSettings = isRefinableAttribute &&
                                                                _tmpRetailProductAttributeMetadata.IncludeAttribute &&
                                                                RetailAttributeFilter::findByAttribute(_tmpRetailProductAttributeMetadata.Attribute);
        }

        _tmpRetailProductAttributeMetadata.AttributeDisplayOrder = _displayOrder;
        _tmpRetailProductAttributeMetadata.AttributeGroupDisplayOrder = _attributeGroupDisplayOrder;

        _tmpRetailProductAttributeMetadata.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSharedAndInternalOrgAttributesForRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds shared attributes and internal organization attributes to the TmpRetailProductAttributeMetadata table.
    /// </summary>
    /// <param name = "_tmpRetailProductAttributeMetadata">The table to be updated.</param>
    /// <param name = "_internalOrgRecId">Internal organization RecId.</param>
    /// <param name = "_currentCategory">The current category to identify whether it is root category.</param>
    /// <param name = "_currentVersion">Current metadata version.</param>
    private static void addSharedAndInternalOrgAttributesForRoot(
        TmpRetailProductAttributeMetadata _tmpRetailProductAttributeMetadata,
        RefRecId _internalOrgRecId,
        EcoResCategory _currentCategory,
        int _currentVersion)
    {
        boolean isRoot = _currentCategory.ParentCategory == 0;

        if (isRoot)
        {
            // Only if the category is the root node of the hierarchy
            // Add channel product attributes if the category is a root node in the category hierarchy

            // Add enrichment product attributes (Html, Image, Video) as standard product attributes
            RetailSharedParameters sharedParameter = RetailSharedParameters::find();
            EcoResAttribute enrichmentProductAttribute;
            EcoResAttributeGroupAttribute enrichmentProductAttributeGroupAttribute;

            if (sharedParameter.RecId > 0 && sharedParameter.ProductDefaultAttributeGroup > 0)
            {
                while select Attribute, AttributeGroup, RetailDisplayOrder from enrichmentProductAttributeGroupAttribute
                    where enrichmentProductAttributeGroupAttribute.AttributeGroup == sharedParameter.ProductDefaultAttributeGroup
                join RecId, Name from enrichmentProductAttribute
                    where enrichmentProductAttribute.RecId == enrichmentProductAttributeGroupAttribute.Attribute
                {
                    TmpRetailProductAttributeMetadata::insertTmpRetailProductAttributeMetadata(
                        _tmpRetailProductAttributeMetadata,
                        _internalOrgRecId,
                        _internalOrgRecId, // The ancestor internal organization RecId is same as the internal organization RecId.
                        0,
                        enrichmentProductAttribute.RecId,
                        enrichmentProductAttributeGroupAttribute.AttributeGroup,
                        enrichmentProductAttribute.Name,
                        RetailProductAttributeRelationType::StandardProduct,
                        enrichmentProductAttributeGroupAttribute.RetailDisplayOrder,
                        0 // The attribute group display order for default attribute group cannot be adjusted.
                        );
                }
            }

            // find InternalOrgAttributeGroup from view and create into temporary table.
            RetailInternalOrgAttributeGroupCollapsed retailInternalOrgAttributeGroupCollapsed;

            while select RecId, Name, AttributeModifier, AttributeType from enrichmentProductAttribute
            join Attribute, AttributeGroup, RetailDisplayOrder from enrichmentProductAttributeGroupAttribute
                where enrichmentProductAttribute.RecId == enrichmentProductAttributeGroupAttribute.Attribute
            join RecId, AncestorInternalOrg, Modifier, AttributeGroupDisplayOrder from retailInternalOrgAttributeGroupCollapsed
                where enrichmentProductAttributeGroupAttribute.AttributeGroup == retailInternalOrgAttributeGroupCollapsed.AttributeGroup
                    && retailInternalOrgAttributeGroupCollapsed.InternalOrganization == _internalOrgRecId
                    && retailInternalOrgAttributeGroupCollapsed.Modifier == RetailChannelAttributeModifier::Product
            {
                TmpRetailProductAttributeMetadata::insertTmpRetailProductAttributeMetadata(
                    _tmpRetailProductAttributeMetadata,
                    _internalOrgRecId,
                    retailInternalOrgAttributeGroupCollapsed.AncestorInternalOrg,
                    0,
                    enrichmentProductAttribute.RecId,
                    enrichmentProductAttributeGroupAttribute.AttributeGroup,
                    enrichmentProductAttribute.Name,
                    RetailProductAttributeRelationType::Channel,
                    enrichmentProductAttributeGroupAttribute.RetailDisplayOrder,
                    retailInternalOrgAttributeGroupCollapsed.AttributeGroupDisplayOrder);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSharedAndCatalogAttributesForRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds shared attributes and catalog attributes to the TmpRetailProductAttributeMetadata table.
    /// </summary>
    /// <param name = "_tmpRetailProductAttributeMetadata">The table to be updated.</param>
    /// <param name = "_catalogRefRecId">Catalog RecId.</param>
    /// <param name = "_currentCategory">The current category to identify whether it is root category.</param>
    /// <param name = "_currentVersion">Current metadata version.</param>
    private static void addSharedAndCatalogAttributesForRoot(
        TmpRetailProductAttributeMetadata _tmpRetailProductAttributeMetadata,
        CatalogRefRecId _catalogRefRecId,
        EcoResCategory _currentCategory,
        int _currentVersion)
    {
        boolean isRoot = _currentCategory.ParentCategory == 0;

        if (isRoot)
        {
            // Only if the category is the root node of the hierarchy
            // Add catalog product attributes if the category is a root node in the category hierarchy

            // Add enrichment product attributes (Html, Image, Video) as standard product attributes
            RetailSharedParameters sharedParameter = RetailSharedParameters::find();
            EcoResAttribute enrichmentProductAttribute;
            EcoResAttributeGroupAttribute enrichmentProductAttributeGroupAttribute;

            if (sharedParameter.RecId > 0 && sharedParameter.ProductDefaultAttributeGroup > 0)
            {
                while select Attribute, AttributeGroup, RetailDisplayOrder from enrichmentProductAttributeGroupAttribute
                    where enrichmentProductAttributeGroupAttribute.AttributeGroup == sharedParameter.ProductDefaultAttributeGroup
                join RecId, Name from enrichmentProductAttribute
                    where enrichmentProductAttribute.RecId == enrichmentProductAttributeGroupAttribute.Attribute
                {
                    TmpRetailProductAttributeMetadata::insertTmpRetailProductAttributeMetadata(
                        _tmpRetailProductAttributeMetadata,
                        0,
                        0, // The ancestor internal organization RecId is same as the internal organization RecId.
                        0,
                        enrichmentProductAttribute.RecId,
                        enrichmentProductAttributeGroupAttribute.AttributeGroup,
                        enrichmentProductAttribute.Name,
                        RetailProductAttributeRelationType::StandardProduct,
                        enrichmentProductAttributeGroupAttribute.RetailDisplayOrder,
                        0, // The attribute group display order for default attribute group cannot be adjusted.
                        _catalogRefRecId
                        );
                }
            }

            // find InternalOrgAttributeGroup from view and create into temporary table.
            //RetailInternalOrgAttributeGroupCollapsed retailInternalOrgAttributeGroupCollapsed;
            RetailCatalogAttributeGroup catalogAttributeGroup;

            while select RecId, Name, AttributeModifier, AttributeType from enrichmentProductAttribute
            join Attribute, AttributeGroup, RetailDisplayOrder from enrichmentProductAttributeGroupAttribute
                where enrichmentProductAttribute.RecId == enrichmentProductAttributeGroupAttribute.Attribute
            join RecId,  Modifier, DisplayOrder from catalogAttributeGroup
                where enrichmentProductAttributeGroupAttribute.AttributeGroup == catalogAttributeGroup.AttributeGroup
                    && catalogAttributeGroup.CatalogRefRecId == _catalogRefRecId
                    && catalogAttributeGroup.Modifier == EcoResAttributeModifier::Catalog
            {
                TmpRetailProductAttributeMetadata::insertTmpRetailProductAttributeMetadata(
                    _tmpRetailProductAttributeMetadata,
                    0,
                    0,
                    0,
                    enrichmentProductAttribute.RecId,
                    enrichmentProductAttributeGroupAttribute.AttributeGroup,
                    enrichmentProductAttribute.Name,
                    RetailProductAttributeRelationType::Catalog,
                    enrichmentProductAttributeGroupAttribute.RetailDisplayOrder,
                    catalogAttributeGroup.DisplayOrder,
                    _catalogRefRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCategoryAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds category attributes to the TmpRetailProductAttributeMetadata table.
    /// </summary>
    /// <param name = "_tmpRetailProductAttributeMetadata">The table to be updated.</param>
    /// <param name = "_internalOrgRecId">Internal organization RecId.</param>
    /// <param name = "_currentCategory">The current category.</param>
    /// <param name = "_currentVersion">Current metadata version.</param>
    /// <param name = "_catalogRefRecId">Catalog RecId.</param>
    private static void addCategoryAttributes(
        TmpRetailProductAttributeMetadata _tmpRetailProductAttributeMetadata,
        RefRecId _internalOrgRecId,
        EcoResCategory _currentCategory,
        int _currentVersion,
        CatalogRefRecId _catalogRefRecId = 0)
    {
        EcoResCategoryAttributeGroupAttrView categoryAttributeGroupAttrView;

        // Add category product attributes
        // Find the category product attributes based on the selected category,
        // including the inherited attributes if any.
        if (ProcCategoryModifier::find(_currentCategory.RecId).IsProductAttributesInherited == NoYes::No)
        {
            select categoryAttributeGroupAttrView
                where categoryAttributeGroupAttrView.Modifier == EcoResCategoryAttributeModifier::Product
                   && categoryAttributeGroupAttrView.Category == _currentCategory.RecId;
        }
        else
        {
            EcoResCategory nearestStopInheritAncestor = ProcCategoryModifier::getNearestAncestorWithInheritUnchecked(_currentCategory, fieldNum(ProcCategoryModifier, IsProductAttributesInherited));
            EcoResCategory ecoResCategory;
            select categoryAttributeGroupAttrView
                where categoryAttributeGroupAttrView.Modifier == EcoResCategoryAttributeModifier::Product
                exists join ecoResCategory
                    where ecoResCategory.RecId == categoryAttributeGroupAttrView.Category
                       && ecoResCategory.CategoryHierarchy == _currentCategory.CategoryHierarchy
                       && ecoResCategory.NestedSetLeft >= nearestStopInheritAncestor.NestedSetLeft
                       && ecoResCategory.NestedSetLeft <= _currentCategory.NestedSetLeft
                       && ecoResCategory.NestedSetRight >= _currentCategory.NestedSetRight
                       && ecoResCategory.NestedSetRight <= nearestStopInheritAncestor.NestedSetRight;
        }

        while (categoryAttributeGroupAttrView)
        {
            // Check whether the attribute has been already added as a channel or catalog product attribute
            if (( _internalOrgRecId > 0 && !RetailInternalOrgAttributeGroupCollapsed::isChannelAtribute(_internalOrgRecId, categoryAttributeGroupAttrView.Attribute, RetailChannelAttributeModifier::Product)) || 
                ( _catalogRefRecId  > 0 && !RetailCatalogAttributeGroup::isCatalogAtribute(_catalogRefRecId, categoryAttributeGroupAttrView.Attribute, EcoResAttributeModifier::Catalog)))
            {
                TmpRetailProductAttributeMetadata::insertTmpRetailProductAttributeMetadata(
                    _tmpRetailProductAttributeMetadata,
                    _internalOrgRecId,
                    _internalOrgRecId,
                    categoryAttributeGroupAttrView.Category,
                    categoryAttributeGroupAttrView.Attribute,
                    categoryAttributeGroupAttrView.AttributeGroup,
                    categoryAttributeGroupAttrView.AttributeName,
                    RetailProductAttributeRelationType::Category,
                    categoryAttributeGroupAttrView.AttributeDisplayOrder,
                    categoryAttributeGroupAttrView.AttributeGroupDisplayOrder,
                    _catalogRefRecId);
            }

            next categoryAttributeGroupAttrView;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@RET261229</Label>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AncestorInternalOrg</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInternalOrgRefRecId</ExtendedDataType>
			<Label>@REX1331</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AncestorInternalOrgName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
			<Label>@REX1331</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AttributeDisplayOrder</Name>
			<ExtendedDataType>RetailDisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttributeName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeGroup</Name>
			<ExtendedDataType>EcoResAttributeGroupRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AttributeGroupDisplayOrder</Name>
			<ExtendedDataType>RetailAttributeGroupDisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeRelationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailProductAttributeRelationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@REX1335</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FilterSettings</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYP4910021</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HostChannel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Retail:RetailCatalogMapAttributesInheritedFromCatalog</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeIsRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Metadata</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAttributeChannelMetadata</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MetadataVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelMetadataVersion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Overridden</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS98173</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HostCatalog</Name>
			<ExtendedDataType>CatalogRefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailInternalOrganization</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailInternalOrganization</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AncestorInternalOrg</Name>
					<Field>AncestorInternalOrg</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HostCatalog</Name>
					<Field>HostCatalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>