<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTillLayoutZoneReferenceLegacy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class RetailTillLayoutZoneReferenceLegacy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByLayoutSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTillLayoutZoneReferenceLegacy</c> table mapped for layout and size.
    /// </summary>
    /// <param name = "_layoutId">The layoutId.</param>
    /// <param name = "_sizeId">The SizeId.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>RetailTillLayoutZoneReferenceLegacy</c> table; otherwise, an empty record.</returns>
    public static RetailTillLayoutZoneReferenceLegacy findByLayoutSize(RetailLayoutId _layoutId, RetailSizeId _sizeId, boolean _forUpdate = false)
    {
        RetailTillLayoutZoneReferenceLegacy tillLayoutZoneReferenceLegacy;

        if (_layoutId)
        {
            if (_sizeId)
            {
                tillLayoutZoneReferenceLegacy.selectForUpdate(_forUpdate);

                select firstonly tillLayoutZoneReferenceLegacy
                where
                ((tillLayoutZoneReferenceLegacy.LayoutId == _layoutId) && (tillLayoutZoneReferenceLegacy.LayoutSizeId == _sizeId));
            }
        }

        return tillLayoutZoneReferenceLegacy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purgeObsoleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Purge the records that no longer have valid references.
    /// </summary>
    private static void purgeObsoleteRecords()
    {
        RetailTillLayoutZoneReferenceLegacy rtlZoneReferenceLegacy;
        RetailTillLayoutZoneReference rtlZoneReference;

        ttsbegin;

        // Purge all records in rtlZoneReferenceLegacy where the original master rtlZoneReference no longer exists
        delete_from rtlZoneReferenceLegacy
            notexists join rtlZoneReference where
            (rtlZoneReferenceLegacy.MasterZoneReference == rtlZoneReference.RecId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateDowngradeData_RetailTillLayoutZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicate data into <c>RetailTillLayoutZone</c> for AX2012 "downgrade" N-1 compatiblity.
    /// </summary>
    /// <returns>Number of records updated.</returns>
    private static int64 duplicateDowngradeData_RetailTillLayoutZone()
    {
        RetailTillLayoutZone rtlZone;
        RetailTillLayoutZoneReferenceLegacy rtlZoneReferenceLegacy;
        RetailTillLayoutSize rtlSize;
        RetailDeviceTypes eposDevice;
        RetailDeviceTypes mposDevice;
        boolean isEpos;
        boolean updateRequired;

        int64 updateCount = 0;

        if (isConfigurationkeyEnabled(configurationKeyNum(RetailCDXBackwardCompatibility)))
        {
            // This feature is only enabled for N-1 AX2012 legacy support

            eposDevice = RetailDeviceTypes::find(RetailDeviceTypeBase::EnterprisePOS);
            mposDevice = RetailDeviceTypes::find(RetailDeviceTypeBase::ModernPOS);

            ttsbegin;

            while select forupdate rtlZone
                outer join rtlZoneReferenceLegacy where (rtlZoneReferenceLegacy.MasterZoneReference == rtlZone.RecId)
                outer join rtlSize where (rtlZoneReferenceLegacy.LayoutSizeId == rtlSize.LayoutSizeId)
            {
                // Determine if this rtlZone should map to EPOS or MPOS
                updateRequired = false;
                isEpos = 
                    (rtlSize.RecId != 0) &&
                    (rtlZoneReferenceLegacy.RecId != 0) &&
                    (rtlSize.LayoutType == RetailLayoutType::EPOS);

                if (isEpos)
                {
                    if (rtlZone.DeviceTypeLegacy != eposDevice.RecId)
                    {
                        rtlZone.DeviceTypeLegacy = eposDevice.RecId;
                        updateRequired = true;
                    }
                }
                else
                {
                    if (rtlZone.DeviceTypeLegacy != mposDevice.RecId)
                    {
                        rtlZone.DeviceTypeLegacy = mposDevice.RecId;
                        updateRequired= true;
                    }
                }

                if (updateRequired)
                {
                    rtlZone.update();
                    updateCount += 1;
                }
            }

            ttscommit;
        }

        return updateCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateDowngradeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicate data into <c>RetailTillLayout</c> for AX2012 "downgrade" N-1 compatiblity.
    /// </summary>
    /// <returns>Number of records updated.</returns>
    public static int64 duplicateDowngradeData()
    {
        int64 updateCount = 0;
        int64 updateButtonCount = 0;
        int64 updateImageCount = 0;
        int64 updateReportCount = 0;
        RetailTillLayoutLegacy rtlLegacy;
        RetailTillLayoutButtonGridZone rtlButtonGridZone;
        RetailTillLayoutButtonGridZoneLegacy rtlButtonGridZoneLegacy;
        RetailTillLayoutImageZone rtlImageZone;
        RetailTillLayoutImageZoneLegacy rtlImageZoneLegacy;
        RetailTillLayoutReportZone rtlReportZone;
        RetailTillLayoutReportZoneLegacy rtlReportZoneLegacy;

        if (isConfigurationkeyEnabled(configurationKeyNum(RetailCDXBackwardCompatibility)))
        {

            ttsbegin;

            // Populate inherited table for RetailTillLayoutButtonGridZoneLegacy
            while select rtlButtonGridZone
                join rtlLegacy where
                    ((rtlButtonGridZone.LayoutId == rtlLegacy.ConfiguraitonLayoutId) &&
                    (rtlButtonGridZone.LayoutSizeId == rtlLegacy.ConfigurationSizeId))
            {
                // For each zoneReference - we need to create a version for legacy 2012 software using the re-mapped layout Id.
                rtlButtonGridZoneLegacy = RetailTillLayoutButtonGridZoneLegacy::findByZoneLayoutSize(rtlButtonGridZone.Zone, rtlLegacy.layoutId, rtlButtonGridZone.LayoutSizeId, true);

                if (rtlButtonGridZoneLegacy.RecId == 0)
                {   // Inserting record for the first time...
                    rtlButtonGridZoneLegacy.ButtonGridId = rtlButtonGridZone.ButtonGridId;

                    rtlButtonGridZoneLegacy.MasterZoneReference = rtlButtonGridZone.RecId;
                    rtlButtonGridZoneLegacy.ConfigurationLayoutId = rtlButtonGridZone.LayoutId;
                    rtlButtonGridZoneLegacy.LayoutSizeId = rtlButtonGridZone.LayoutSizeId;
                    rtlButtonGridZoneLegacy.Zone = rtlButtonGridZone.Zone;
                    rtlButtonGridZoneLegacy.InstanceRelationType = rtlButtonGridZone.InstanceRelationType;
                    
                    rtlButtonGridZoneLegacy.LayoutId = rtlLegacy.layoutId;
                    
                    rtlButtonGridZoneLegacy.insert();
                    updateButtonCount += 1;
                }
                else if (rtlButtonGridZoneLegacy.ButtonGridId != rtlButtonGridZone.ButtonGridId)
                {   // Updating existing record
	                rtlButtonGridZoneLegacy.ButtonGridId = rtlButtonGridZone.ButtonGridId;

                    rtlButtonGridZoneLegacy.update();
                    updateButtonCount += 1;
                }
            }

            // Populate inherited table for RetailTillLayoutImageZone
            while select rtlImageZone
                join rtlLegacy where
                    ((rtlImageZone.LayoutId == rtlLegacy.ConfiguraitonLayoutId) &&
                    (rtlImageZone.LayoutSizeId == rtlLegacy.ConfigurationSizeId))
            {
                // For each zoneReference - we need to create a version for legacy 2012 software using the re-mapped layout Id.
                rtlImageZoneLegacy = RetailTillLayoutImageZoneLegacy::findByZoneLayoutSize(rtlImageZone.Zone, rtlLegacy.layoutId, rtlImageZone.LayoutSizeId, true);

                if (rtlImageZoneLegacy.RecId == 0)
                {	// Inserting record for the first time...
                    rtlImageZoneLegacy.PictureId = rtlImageZone.PictureId;
                    
                    rtlImageZoneLegacy.MasterZoneReference = rtlImageZone.RecId;
                    rtlImageZoneLegacy.ConfigurationLayoutId = rtlImageZone.LayoutId;
                    rtlImageZoneLegacy.LayoutSizeId = rtlImageZone.LayoutSizeId;
                    rtlImageZoneLegacy.Zone = rtlImageZone.Zone;
                    rtlImageZoneLegacy.InstanceRelationType = rtlImageZone.InstanceRelationType;
                    
                    rtlImageZoneLegacy.LayoutId = rtlLegacy.layoutId;
                    
                    rtlImageZoneLegacy.insert();
                    updateImageCount += 1;
                }
                else if (rtlImageZoneLegacy.PictureId != rtlImageZone.PictureId)
                {
                    rtlImageZoneLegacy.PictureId = rtlImageZone.PictureId;
                    
                    // Updating existing record
                    rtlImageZoneLegacy.update();
                    updateImageCount += 1;
                }
            }

            // Populate inherited table for RetailTillLayoutReportZone
            while select rtlReportZone
                join rtlLegacy where
                    ((rtlReportZone.LayoutId == rtlLegacy.ConfiguraitonLayoutId) &&
                    (rtlReportZone.LayoutSizeId == rtlLegacy.ConfigurationSizeId))
            {
                // For each zoneReference - we need to create a version for legacy 2012 software using the re-mapped layout Id.
                rtlReportZoneLegacy = RetailTillLayoutReportZoneLegacy::findByZoneLayoutSize(rtlReportZone.Zone, rtlLegacy.layoutId, rtlReportZone.LayoutSizeId, true);

                if (rtlReportZoneLegacy.RecId == 0)
                {	// Inserting record for the first time...
                    rtlReportZoneLegacy.Report = rtlReportZone.Report;
                    
                    rtlReportZoneLegacy.MasterZoneReference = rtlReportZone.RecId;
                    rtlReportZoneLegacy.ConfigurationLayoutId = rtlReportZone.LayoutId;
                    rtlReportZoneLegacy.LayoutSizeId = rtlReportZone.LayoutSizeId;
                    rtlReportZoneLegacy.Zone = rtlReportZone.Zone;
                    rtlReportZoneLegacy.InstanceRelationType = rtlReportZone.InstanceRelationType;
                    
                    rtlReportZoneLegacy.LayoutId = rtlLegacy.layoutId;
                    
                    rtlReportZoneLegacy.insert();
                    updateReportCount += 1;
                }
                else if (rtlReportZoneLegacy.Report != rtlReportZone.Report)
                {
                    rtlReportZoneLegacy.Report = rtlReportZone.Report;
                    
                    // Updating existing record
                    rtlReportZoneLegacy.update();
                    updateReportCount += 1;
                }
            }

            updateCount = updateButtonCount + updateImageCount + updateReportCount;

            RetailTillLayoutZoneReferenceLegacy::purgeObsoleteRecords();
            RetailTillLayoutZoneReferenceLegacy::duplicateDowngradeData_RetailTillLayoutZone();
 
            ttscommit;
        }

        return updateCount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RetailCDXBackwardCompatibility</ConfigurationKey>
	<DeveloperDocumentation>@REX4160661</DeveloperDocumentation>
	<Label>@REX4160660</Label>
	<TitleField1>LayoutId</TitleField1>
	<TitleField2>Zone</TitleField2>
	<Abstract>Yes</Abstract>
	<CacheLookup>Found</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>BrickAndMortarStore</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Zone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Zone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LayoutId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Zone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LayoutSizeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutSizeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfigurationLayoutId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MasterZoneReference</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LayoutZoneIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Zone</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LayoutId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ConfigurationLayoutZoneIdxCopy</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Zone</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfigurationLayoutId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LayoutSizeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTillLayout</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailTillLayoutLegacy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LayoutId</Name>
					<SourceEDT>RetailLayoutId</SourceEDT>
					<Field>LayoutId</Field>
					<RelatedField>layoutId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LayoutIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTillLayoutZone</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTillLayoutZone</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Zone</Name>
					<Field>Zone</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTillLayoutSize</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailTillLayoutSize</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LayoutSizeId</Name>
					<Field>LayoutSizeId</Field>
					<RelatedField>LayoutSizeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTillLayoutZoneReference</Name>
			<RelatedTable>RetailTillLayoutZoneReference</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MasterZoneReference</Name>
					<Field>MasterZoneReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>