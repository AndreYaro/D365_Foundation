<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlanReference extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkControllingOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the controlling organization is valid.
    /// </summary>
    /// <returns>
    /// true if the controlling organization is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkControllingOrganization()
    {
        boolean     result = true;

        if (this.PlanType == PlanTypes::ProductionFlow)
        {
            if (!OMOperatingUnit::find(this.ControllingOrganization,OMOperatingUnitType::OMValueStream))
            {
                result = checkFailed("@SYS310011");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the legal entity is valid.
    /// </summary>
    /// <returns>
    /// true if the legal entity is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkLegalEntity()
    {
        return this.validateField(fieldnum(PlanReference,LegalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,this.LegalEntity))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        LeanProductionFlowReference   leanProductionFlowReference;

        super();

        ttsbegin;

        leanProductionFlowReference = LeanProductionFlowReference::findPlanReference(this.RecId);

        if (!leanProductionFlowReference)
        {
            leanProductionFlowReference.PlanReference = this.RecId;
            leanProductionFlowReference.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,this.LegalEntity))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>plan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a plan for this reference with the specified version number.
    /// </summary>
    /// <param name="_planVersionNum">
    /// The version number of the plan.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>Plan</c> table; otherwise an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan plan(
        PlanVersionNum _planVersionNum,
        boolean        _forUpdate = false)
    {
        return Plan::findVersionNum(this.RecId, _planVersionNum, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean result;

        result = super(_fieldIdToCheck);

        if (result)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(PlanReference,LegalEntity):
                    if (this.LegalEntity != CompanyInfo::current())
                    {
                        result = checkFailed("@SYS332729");
                    }
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean result;

        result =    super()
                 && this.checkLegalEntity()
                 && this.checkControllingOrganization();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>PlanReference</c> table exists.
    /// </summary>
    /// <param name="_planReferenceRefRecId">
    /// The record ID of the <c>PlanReference</c> table for which to check.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(PlanReferenceRefRecId _planReferenceRefRecId)
    {
        return    _planReferenceRefRecId
               && (select firstonly RecId from planReference
                    where planReference.RecId == _planReferenceRefRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PlanReference</c> table.
    /// </summary>
    /// <param name="_planReferenceRefRecId">
    /// The record ID of the <c>PlanReference</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PlanReference</c> table; otherwise, an empty record.
    /// </returns>
    public static PlanReference find(
        PlanReferenceRefRecId _planReferenceRefRecId,
        boolean               _forUpdate = false)
    {
        PlanReference    planReference;

        if (_planReferenceRefRecId)
        {
            planReference.selectForUpdate(_forUpdate);

            select firstonly planReference
                where planReference.RecId == _planReferenceRefRecId;
        }

        return planReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PlanReference</c> table.
    /// </summary>
    /// <param name="_planName">
    /// The plan name of the <c>PlanReference</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PlanReference</c> table; otherwise, an empty record.
    /// </returns>
    public static PlanReference findPlanName(
        PlanName _planName,
        boolean  _forUpdate = false)
    {
        PlanReference    planReference;

        if (_planName)
        {
            planReference.selectForUpdate(_forUpdate);

            select firstonly planReference
                where planReference.PlanName == _planName;
        }

        return planReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PlanReference</c> table.
    /// </summary>
    /// <param name="_planPlanActivity">
    /// The record ID of the <c>PlanPlanActivity</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PlanReference</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanReference findPlanPlanActivity(
        PlanActivityRefRecId _planPlanActivity,
        boolean              _forUpdate = false)
    {
        PlanPlanActivity    planPlanActivity;
        PlanReference       planReference;
        Plan                plan;

        if (_planPlanActivity)
        {
            planReference.selectForUpdate(_forUpdate);

            select firstonly planReference
                exists join plan
                    where plan.PlanReference == planReference.RecId
                exists join planPlanActivity
                    where planPlanActivity.Plan  == plan.RecId
                       && planPlanActivity.RecId == _planPlanActivity;
        }

        return planReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPlanType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform a lookup filtered by the <c>PlanType</c> field.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object that the lookup will be bound to.
    /// </param>
    /// <param name="_planType">
    /// The <c>PlanTypes</c> enum value used to filter the lookup by.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity value used to filter the lookup by; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupPlanType(
        FormControl _formControl,
        PlanTypes   _planType,
        LegalEntity _legalEntity = CompanyInfo::current())
    {
        QueryBuildDataSource    qbdsPlanReference;
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();

        if (_formControl)
        {
            sysTableLookup    = SysTableLookup::newParameters (tablenum(PlanReference),_formControl);
            qbdsPlanReference = query.addDataSource(tablenum(PlanReference));

            qbdsPlanReference.addRange(fieldnum(PlanReference,PlanType)).value(queryValue(_planType));

            if (_legalEntity)
            {
                qbdsPlanReference.addRange(fieldnum(PlanReference,LegalEntity)).value(queryValue(_legalEntity));
            }

            sysTableLookup.parmQuery(query);
            sysTableLookup.addLookupfield(fieldnum(PlanReference,PlanName));
            if (_planType == PlanTypes::ProductionFlow)
            {
                sysTableLookup.setLabel("@SYS131941");
            }
            sysTableLookup.addLookupfield(fieldnum(PlanReference,PlanDescription));

            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS328830</DeveloperDocumentation>
	<FormRef>LeanProductionFlow</FormRef>
	<Label>@SYS152558</Label>
	<SingularLabel>@SYS152559</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>PlanName</TitleField1>
	<TitleField2>PlanDescription</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>PlanNameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LeanProductionFlowReference</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanProductionFlowReference</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>Plan</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>Plan</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PlanActivity</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PlanActivity</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Organization</Name>
			<Label>@SYS38151</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControllingOrganization</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Plan</Name>
			<Label>@SYS152561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@SYS152611</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ControllingOrganization</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>OMOperatingUnitRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlanDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanDescription</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlanName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PlanType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>PlanTypes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ControllingOrganization</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMOperatingUnit</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ControllingOrganization</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlanReference</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ControllingOrganization</Name>
					<Field>ControllingOrganization</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_PlanReference</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LegalEntity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlanReference</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>