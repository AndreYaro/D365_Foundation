<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransOriginProdBomOwnershipChangeJournalTransLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransOriginProdBomOwnershipChangeJournalTransLink extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByProductionBOMLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transactions originator link for a production BOM line.
    /// </summary>
    /// <param name="_productionBOMLineDataAreaId">The value of the <c>dataAreaId</c> field in the <c>ProdBOM</c> table.</param>
    /// <param name="_productionBOMLineInventTransId">The value of the <c>InventTransId</c> field in the <c>ProdBOM</c> table.</param>
    /// <returns>An inventory transactions originator link.</returns>
    public static InventTransOriginProdBomOwnershipChangeJournalTransLink findByProductionBOMLine(
        DataAreaId          _productionBOMLineDataAreaId,
        InventTransId       _productionBOMLineInventTransId)
    {
        InventTransOriginProdBomOwnershipChangeJournalTransLink     inventTransOriginProdBomOwnershipChangeJournalTransLink;

        if (_productionBOMLineDataAreaId
            && _productionBOMLineInventTransId)
        {
            InventTransOriginProdBOM inventTransOriginProductionBOMLine;

            select firstonly inventTransOriginProdBomOwnershipChangeJournalTransLink
                join inventTransOriginProductionBOMLine
                where inventTransOriginProdBomOwnershipChangeJournalTransLink.ProductionBOMLine == inventTransOriginProductionBOMLine.InventTransOrigin
                   && inventTransOriginProductionBOMLine.ProdBOMInventTransId == _productionBOMLineInventTransId
                   && inventTransOriginProductionBOMLine.ProdBOMDataAreaId    == _productionBOMLineDataAreaId;
        }

        return inventTransOriginProdBomOwnershipChangeJournalTransLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory transactions originator link for an inventory journal line.
    /// </summary>
    /// <param name = "_inventJournalTrans">The inventory ownership change journal line.</param>
    public static void updateJournalInventTransOrigin(InventJournalTrans _inventJournalTrans)
    {
        if (_inventJournalTrans)
        {
            InventTransOriginProdBomOwnershipChangeJournalTransLink     inventTransOriginProdBomOwnershipChangeJournalTransLink;
            InventTransOriginJournalTrans                               inventTransOriginJournalTrans = InventTransOriginJournalTrans::findByJournal(
                                                                                                            _inventJournalTrans.DataAreaId,
                                                                                                            _inventJournalTrans.JournalId,
                                                                                                            _inventJournalTrans.LineNum);

            update_recordset inventTransOriginProdBomOwnershipChangeJournalTransLink
                setting JournalLineInventTransOrigin = inventTransOriginJournalTrans.InventTransOrigin
                    where inventTransOriginProdBomOwnershipChangeJournalTransLink.JournalLine == _inventJournalTrans.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory owner dimension on inventory transactions for production BOM lines associated to the inventory ownership change journal line.
    /// </summary>
    /// <param name = "_inventJournalTrans">The inventory ownership change journal line.</param>
    public static void updateDimensions(InventJournalTrans _inventJournalTrans)
    {
        if (_inventJournalTrans)
        {
            InventTransOriginProdBomOwnershipChangeJournalTransLink     inventTransOriginProdBomOwnershipChangeJournalTransLink;
            InventTransOriginJournalTrans                               inventTransOriginJournalTrans;
            InventTransOriginProdBOM                                    inventTransOriginProductionBOMLine;
            ProdBOM                                                     productionBOMLine;
            InventQty                                                   ownershipChangeInventoryQuantity = _inventJournalTrans.Qty;

            while select productionBOMLine
                order by productionBOMLine.RawMaterialDate
                join inventTransOriginProductionBOMLine
                    where inventTransOriginProductionBOMLine.ProdBOMDataAreaId      == productionBOMLine.DataAreaId
                       && inventTransOriginProductionBOMLine.ProdBOMInventTransId   == productionBOMLine.InventTransId
                join inventTransOriginProdBomOwnershipChangeJournalTransLink
                    where inventTransOriginProductionBOMLine.InventTransOrigin      == inventTransOriginProdBomOwnershipChangeJournalTransLink.ProductionBOMLine
                join inventTransOriginJournalTrans
                    where inventTransOriginJournalTrans.InventTransOrigin           == inventTransOriginProdBomOwnershipChangeJournalTransLink.JournalLineInventTransOrigin
                       && inventTransOriginJournalTrans.InventJournalDataAreaId     == _inventJournalTrans.DataAreaId
                       && inventTransOriginJournalTrans.InventJournalId             == _inventJournalTrans.JournalId
                       && inventTransOriginJournalTrans.InventJournalLineNum        == _inventJournalTrans.LineNum
            {
                // Handle inventory transactions linked to picking list journal lines
                ProdJournalBOM prodJournalBom;

                while select forupdate prodJournalBom
                    where prodJournalBom.InventTransId == productionBOMLine.InventTransId
                {
                    InventQty changedQuantity = InventTransOriginProdBomOwnershipChangeJournalTransLink::changeDimensions(_inventJournalTrans, prodJournalBom, ownershipChangeInventoryQuantity);

                    // If all the quantity to be consumed has changed dimensions, also change the owner on the line
                    if (changedQuantity == prodJournalBom.InventConsump)
                    {
                        InventDim journalBomInventDim = prodJournalBom.inventDim();
                        journalBomInventDim.InventOwnerId_RU = _inventJournalTrans.toInventDim().InventOwnerId_RU;
                        journalBomInventDim = InventDim::findOrCreate(journalBomInventDim);

                        prodJournalBom.InventDimId = journalBomInventDim.inventDimId;
                        prodJournalBom.update();
                    }

                    ownershipChangeInventoryQuantity -= changedQuantity;
                }

                // Handle inventory transactions not linked to picking list journal lines
                ownershipChangeInventoryQuantity -= InventTransOriginProdBomOwnershipChangeJournalTransLink::changeDimensions(_inventJournalTrans, productionBOMLine, ownershipChangeInventoryQuantity);
            }

            if (ownershipChangeInventoryQuantity)
            {
                info(strfmt("@Consignment:Message_InventOwnershipChangeJournalLineQtyTooLarge", _inventJournalTrans.LineNum, ownershipChangeInventoryQuantity));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeDimensions</Name>
				<Source><![CDATA[
    private static InventQty changeDimensions(
        InventJournalTrans  _inventJournalTrans,
        Common              _record,
        InventQty           _remainingQuantity)
    {
        InventDim fromInventDim = _inventJournalTrans.inventDim();
        InventDim toInventDim = _inventJournalTrans.toInventDim();

        InventDimParm inventDimParmFrom;
        inventDimParmFrom.initFromInventDim(fromInventDim);

        InventMovement movement = InventMovement::construct(_record);
        InventQty productionBOMLineInventoryQuantity = InventTransOriginProdBomOwnershipChangeJournalTransLink::movementInventoryQuantity(movement, fromInventDim);
        InventQty dimensionChangeInventoryQuantity = min(abs(productionBOMLineInventoryQuantity), _remainingQuantity);

        var inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParametersIssuesOrderedByStatusIssue(
            movement,
            fromInventDim,
            inventDimParmFrom,
            toInventDim,
            -dimensionChangeInventoryQuantity);

        inventUpd_ChangeDimension.parmAllowAutoReserveDim(false);
        inventUpd_ChangeDimension.updateNow();

        return dimensionChangeInventoryQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of inventory quantities from inventory transactions for a given movement and inventory dimensions.
    /// </summary>
    /// <param name = "_movement">An inventory movement for either a production picking list journal line, or for a production BOM line.</param>
    /// <param name = "_fromInventDim">The inventory dimensions for which to find the inventory quantity.</param>
    /// <returns>The sum of inventory quantity for the given criteria.</returns>
    private static InventQty movementInventoryQuantity(InventMovement _movement, InventDim _fromInventDim)
    {
        InventTrans inventTrans;
        InventDim   inventDim;

        InventDimParm inventDimParmFrom;
        inventDimParmFrom.initFromInventDim(_fromInventDim);

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin == _movement.inventTransOriginId()
                && inventTrans.TransChildType   == _movement.transChildType()
                && inventTrans.TransChildRefId  == _movement.transChildRefId()
            #inventDimExistsJoin(inventTrans.inventDimId, inventDim, _fromInventDim, inventDimParmFrom);

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByOwnershipChangeJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a inventory transactions originator link for an inventory ownership change journal line exists.
    /// </summary>
    /// <param name="_ownershipChangeJournalLine">The ID of the inventory ownership change journal line.</param>
    /// <returns>true if the inventory transactions originator link exists; otherwise, false.</returns>
    public static boolean existByOwnershipChangeJournalLine(RefRecId _ownershipChangeJournalLine)
    {
        if (!_ownershipChangeJournalLine)
        {
            return false;
        }

        return (select firstonly RecId from InventTransOriginProdBomOwnershipChangeJournalTransLink
                    where InventTransOriginProdBomOwnershipChangeJournalTransLink.JournalLine == _ownershipChangeJournalLine).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ConsignmentInbound</ConfigurationKey>
	<DeveloperDocumentation>@Consignment:Developer_InventTransOriginProdBomOwnershipChangeJournalTransLink</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@Consignment:Table_InventTransOriginProdBomOwnershipChangeJournalTransLink</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>JournalLineInventTransOrigin</TitleField1>
	<TitleField2>ProductionBOMLine</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>ProductionBOMLineJournalLineJournalLineInventTransOriginIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductionBOMLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalLineInventTransOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalLineInventTransOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductionBOMLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalLineInventTransOriginIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalLineInventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductionBOMLineJournalLineJournalLineInventTransOriginIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductionBOMLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalLineInventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventJournalTrans_JournalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalLine</Name>
					<Field>JournalLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalLineInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransOrigin_JournalLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalLineInventTransOrigin</Name>
					<Field>JournalLineInventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductionBOMLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransOrigin_ProductionBOMLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductionBOMLine</Name>
					<Field>ProductionBOMLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>