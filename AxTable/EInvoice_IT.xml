<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoice_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
public class EInvoice_IT extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the electronic invoice.
    /// </summary>
    /// <returns>
    /// The description of the electronic invoice.
    /// </returns>
    public str description()
    {
        str ret;
        CustInvoiceJour custInvoiceJour;
        ProjInvoiceJour projInvoiceJour;
        VendInvoiceJour vendInvoiceJour;

        Common invoice = this.getInvoiceRecord();

        switch (invoice.TableId)
        {
            case tablenum(CustInvoiceJour):
                custInvoiceJour = invoice;
                ret = strfmt('%1 %2', custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceDate);
                break;

            case tablenum(ProjInvoiceJour):
                projInvoiceJour = invoice;
                ret = strfmt('%1 %2', projInvoiceJour.ProjInvoiceId, projInvoiceJour.InvoiceDate);
                break;

            case tablenum(VendInvoiceJour):
                vendInvoiceJour = invoice;
                ret = strfmt('%1 %2', vendInvoiceJour.InvoiceId, vendInvoiceJour.InvoiceDate);
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXMLOutgoing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the outgoing eInvoice XML.
    /// </summary>
    /// <param name="_userId">
    /// The Id of the user who creates the outgoing eInvoice XML; optional.
    /// </param>
    public void createXMLOutgoing(UserId _userId = this.CreatedBy)
    {
        try
        {
            this.generateXML();
        }
        catch
        {
            EInvoiceUpdate_IT::newFrom(this)
                .status(EInvoiceStatus_IT::CreatedFailed)
                .update();
        }

        if (this.Status == EInvoiceStatus_IT::Created && !prmIsDefault(_userId))
        {
            ttsbegin;
            EInvoice_IT einvoice = EInvoice_IT::find(this.RecId, true);
            einvoice.xmlOutgoingCreatedBy = _userId;

            if (FeatureStateProvider::IsFeatureEnabled(BusinessDocumentMoveEinvoiceXmlToAttachmentsFeature::instance()))
            {
                str name = strFmt('%1%2', EInvoiceConstants_IT::XMLOutgoing, EInvoiceConstants_IT::XMLExtension);
                using (System.IO.Stream stream = new System.IO.MemoryStream(System.Text.Encoding::UTF8.GetBytes(this.XMLOutgoing)))
                {
                    DocumentManagement::attachFile(
                        tableNum(EInvoice_IT),
                        this.RecId,
                        this.DataAreaId,
                        DocuType::typeFile(),
                        stream,
                        System.IO.Path::GetFileName(name),
                        System.Web.MimeMapping::GetMimeMapping(name),
                        System.IO.Path::GetFileNameWithoutExtension(name));
                }
                einvoice.XMLOutgoing = null;
                einvoice.Moved = NoYes::Yes;
            }
            einvoice.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNextFileName</Name>
				<Source><![CDATA[
    private void generateNextFileName()
    {
        if (!this.getEInvoiceTransmissionName())
        {
            EInvoiceUpdate_IT::newFrom(this)
            .eInvoiceFileName(EInvoice_IT::nextEInvoiceFileName())
            .eInvoiceTransmissionName (EInvoice_IT::nextEInvoiceTransmissionName())
            .update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoiceTransmissionName</Name>
				<Source><![CDATA[
    private EInvoiceTransmissionName_IT getEInvoiceTransmissionName()
    {
        return this.EInvoiceTransmissionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachOutgoingXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>EInvoice_IT</c> record's "OutgoingXML" field.
    /// </summary>
    /// <param name = "_transformedXML">Generated XML.</param>
    /// <param name = "_userId">Id of user, that created report.</param>
    public void attachOutgoingXML(XML _transformedXML, UserId _userId = this.CreatedBy)
    {
        UserId creatingUser = _userId ? _userId : curUserId();
        EInvoiceUpdate_IT::newFrom(this)
                .xmlOutgoing(_transformedXML, creatingUser, DateTimeUtil::utcNow())
                .update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXML</Name>
				<Source><![CDATA[
    private XML generateXML()
    {
        System.IO.Stream stream;
        ERFormatMappingId eRFormatMappingId;
        System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();
        ERModelDefinitionParamsUIActionComposite parameters;

        Common invoice = this.getInvoiceRecord();
        [eRFormatMappingId, parameters] = this.getERFormatMappingAndFillParameters(invoice.RecId, invoice.TableId);

        ERIFormatMappingRun formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(eRFormatMappingId);
        formatMappingRun.withParameter(parameters);
        formatMappingRun.withIntegrationPoint(new ERIntegrationPointFactory().WithTableRecordsIntegrationPoint(tableId2Name(invoice.TableId)).ToIntegrationPoint());

        ERIFileDestinationFactoryHost factoryHost = ERCast::asObject(formatMappingRun) as ERIFileDestinationFactoryHost;

        if (factoryHost)
        {
            this.generateNextFileName();
            ERIFileDestinationFactory fileDestinationFactory = factoryHost.getFileDestinationFactory();
            factoryHost.setFileDestinationFactory(EinvoiceInMemoryDestinationFactory_IT::construct(fileDestinationFactory, this));
            formatMappingRun.run();
        }

        this.reread();
        return this.xmlOutgoing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the outgoing XML into the folder specified by the user.
    /// </summary>
    public void exportXML()
    {
        if (this.Status != EInvoiceStatus_IT::New && this.Status != EInvoiceStatus_IT::CreatedFailed)
        {
            this.saveXML(this.getFileName());
        }
        else
        {
            info(strFmt('%1 %2: %3', "@SYP4881701", this.description(), strfmt("@SYS117566", this.Status)));
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice TableId and RecId.
    /// </summary>
    public Common getInvoiceRecord()
    {
        EInvoiceRefCust_IT eInvoiceRefCust;

        select firstonly eInvoiceRefCust
            where eInvoiceRefCust.EInvoice == this.RecId;

        TableId invoiceTableId;
        RecId invoiceRecId;

        if (eInvoiceRefCust)
        {
            invoiceTableId = tablenum(CustInvoiceJour);
            invoiceRecId = eInvoiceRefCust.Invoice;
        }
        else
        {
            EInvoiceRefVend_IT eInvoiceRefVend;

            select firstonly eInvoiceRefVend
                where eInvoiceRefVend.EInvoice == this.RecId;

            if (eInvoiceRefVend)
            {
                invoiceTableId = tablenum(VendInvoiceJour);
                invoiceRecId = eInvoiceRefVend.Invoice;
            }
        }

        if (!invoiceRecId)
        {
            EInvoiceRefProj_IT eInvoiceRefProj;

            select firstonly eInvoiceRefProj
                where eInvoiceRefProj.EInvoice == this.RecId;

            if (eInvoiceRefProj)
            {
                invoiceTableId = tablenum(ProjInvoiceJour);
                invoiceRecId = eInvoiceRefProj.Invoice;
            }
        }

        Common invoice;

        if (invoiceRecId)
        {
            invoice = new SysDictTable(invoiceTableId).makeRecord();
            select firstonly invoice
                where invoice.RecId == invoiceRecId;
        }
        else
        {
            throw error('@AccountsPayable:CouldNotFindInvoice');
        }

        return invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns appropriate name of the XML file.
    /// </summary>
    /// <returns>
    /// Name for the generated XML file.
    /// </returns>
    public EInvoiceFileName_IT getFileName()
    {
        return this.EInvoiceFileName + EInvoiceConstants_IT::XMLExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the electronic invoice XML to file.
    /// </summary>
    /// <param name="_fileName">
    /// The file name to save the XML into.
    /// </param>
    private void saveXML(str _fileName)
    {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        System.IO.StreamWriter writer = new System.IO.StreamWriter(stream);

        System.Xml.XmlDocument xmlDocument = new System.Xml.XmlDocument();

        xmlDocument.LoadXml(this.XMLOutgoingSigned ? this.getXMLOutgoingSigned() : this.getXMLOutgoing());

        writer.Write(this.formatXml(xmlDocument));
        writer.Flush();
        stream.Position = 0;
        File::SendFileToUser(stream, _fileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXml</Name>
				<Source><![CDATA[
    private str formatXml(System.Xml.XmlDocument xml)
    {
        System.Text.Encoding encoding = System.Text.Encoding::UTF8;

        System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
        System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
        xmlWriterSettings.Encoding = new System.Text.UTF8Encoding(false);
        xmlWriterSettings.ConformanceLevel = System.Xml.ConformanceLevel::Document;
        xmlWriterSettings.Indent = true;

        using (System.Xml.XmlWriter writer = System.Xml.XmlWriter::Create(memoryStream, xmlWriterSettings))
        {
            xml.Save(writer);
        }

        return encoding.GetString(memoryStream.ToArray());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendXMLOutgoing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the electronic invoice XML.
    /// </summary>
    public void sendXMLOutgoing()
    {
        try
        {
            this.saveXML(this.getFileName());

            EInvoiceUpdate_IT::newFrom(this)
                .status(EInvoiceStatus_IT::SendOK)
                .update();
        }
        catch
        {
            EInvoiceUpdate_IT::newFrom(this)
                .status(EInvoiceStatus_IT::SendFailed)
                .update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>signXMLOutgoing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the digital signature to the outgoing eInvoice XML.
    /// </summary>
    /// <param name="_userId">
    /// The Id of the user who signs the outgoing eInvoice XML; optional.
    /// </param>
    public void signXMLOutgoing(UserId _userId = this.CreatedBy)
    {
        UserId usedId = _userId ? _userId : curUserId();

        try
        {
            XmlCertificate xmlCertificate = XmlCertificate::findActiveXmlCertificate(usedId);
            XMLDocument xmlDocument = XMLDocument::newXml(this.getXMLOutgoing());
            TransDateTime timeStamp;

            timeStamp = XmlSignatureManager::xmlNode(xmlDocument)
                .withXMLCertificate(xmlCertificate)
                .withURIBlank()
                .withTimestamp()
                .sign()
                .parmTimeStamp();

            if (FeatureStateProvider::IsFeatureEnabled(BusinessDocumentMoveEinvoiceXmlToAttachmentsFeature::instance()))
            {
                EInvoiceUpdate_IT::newFrom(this)
                    .xmlOutgoingSigned(null, usedId, timeStamp, xmlCertificate.getDigitalCertificateSubject())
                    .status(EInvoiceStatus_IT::SignOK)
                    .update();

                ttsbegin;
                str name = strFmt('%1%2', EInvoiceConstants_IT::XMLOutgoingSigned, EInvoiceConstants_IT::XMLExtension);
                using (System.IO.Stream stream = new System.IO.MemoryStream(System.Text.Encoding::UTF8.GetBytes(xmlDocument.xml())))
                {
                    DocumentManagement::attachFile(
                        tableNum(EInvoice_IT),
                        this.RecId,
                        this.DataAreaId,
                        DocuType::typeFile(),
                        stream,
                        System.IO.Path::GetFileName(name),
                        System.Web.MimeMapping::GetMimeMapping(name),
                        System.IO.Path::GetFileNameWithoutExtension(name));
                }

                EInvoice_IT einvoice = EInvoice_IT::find(this.RecId, true);
                einvoice.MovedSigned = NoYes::Yes;
                einvoice.doUpdate();
                ttscommit;
            }
            else
            {
                EInvoiceUpdate_IT::newFrom(this)
                    .xmlOutgoingSigned(xmlDocument.xml(), usedId, timeStamp, xmlCertificate.getDigitalCertificateSubject())
                    .status(EInvoiceStatus_IT::SignOK)
                    .update();
            }
            
        }
        catch
        {
            EInvoiceUpdate_IT::newFrom(this)
            .xmlOutgoingSigned('', '', DateTimeUtil::minValue(), '')
            .status(EInvoiceStatus_IT::SignFailed)
            .update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the electronic invoice header record.
    /// </summary>
    /// <param name="_eInvoiceRecId">
    /// The record ID of the electronic invoice header record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The electronic invoice header record.
    /// </returns>
    public static EInvoice_IT find(RefRecId _eInvoiceRecId, boolean _forUpdate = false)
    {
        EInvoice_IT eInvoice;

        if (_forUpdate)
        {
            eInvoice.selectForUpdate(true);
        }

        select firstonly eInvoice
            where eInvoice.RecId == _eInvoiceRecId;

        return eInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new electronic invoice header record for the customer invoice.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The customer invoice journal header.
    /// </param>
    /// <param name="_force">
    /// A boolean value, indicating that the eInvoice must be created despite the customer setup; optional.
    /// </param>
    /// <param name="_status">
    /// The status of the new eInvoice; optional.
    /// </param>
    /// <returns>
    /// The new electronic invoice header record.
    /// </returns>
    public static EInvoice_IT newCustInvoice(CustInvoiceJour _custInvoiceJour, boolean _force  = false, EInvoiceStatus_IT _status = EInvoiceStatus_IT::New)
    {
        EInvoice_IT eInvoice;
        EInvoiceRefCust_IT eInvoiceRef;

        if (_custInvoiceJour.RecId  &&
            (_force || _custInvoiceJour.custTable_InvoiceAccount().EInvoiceRegister_IT))
        {
            ttsBegin;

            eInvoice.Status = _status;
            eInvoice.newCustInvoiceMEI(_custInvoiceJour);
            eInvoice.newCustInvoiceDelegate(_custInvoiceJour, eInvoice);
            eInvoice.insert();

            eInvoiceRef.Invoice = _custInvoiceJour.RecId;
            eInvoiceRef.EInvoice = eInvoice.RecId;
            eInvoiceRef.insert();

            ttsCommit;

            info(strfmt("@SYP4881714", _custInvoiceJour.InvoiceId, _custInvoiceJour.InvoiceDate));
        }

        return eInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustInvoiceMEI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate method to allow additional actions before the creation of customer invoice.
    /// </summary>
    /// <param name = "_custInvoiceJour">Customer invoice journal buffer.</param>
    [SysObsolete('Use the delegate newCustInvoiceDelegate instead.', false, 26\01\2022)]
    delegate void newCustInvoiceMEI(CustInvoiceJour _custInvoiceJour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustInvoiceDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate method to allow additional actions before the creation of customer invoice.
    /// </summary>
    /// <param name = "_custInvoiceJour">Customer invoice journal buffer.</param>
    /// <param name = "_eInvoice">Electronic invoice buffer.</param>
    delegate void newCustInvoiceDelegate(CustInvoiceJour _custInvoiceJour, EInvoice_IT _eInvoice)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new electronic invoice header record for the vendor invoice.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The vendor invoice journal header.
    /// </param>
    /// <param name="_force">
    /// A boolean value, indicating that the eInvoice must be created despite the customer setup; optional.
    /// </param>
    /// <param name="_status">
    /// The status of the new eInvoice; optional.
    /// </param>
    /// <returns>
    /// The new electronic invoice header record.
    /// </returns>
    public static EInvoice_IT newVendInvoice(VendInvoiceJour _vendInvoiceJour, boolean _force  = false, EInvoiceStatus_IT _status = EInvoiceStatus_IT::New)
    {
        EInvoice_IT eInvoice;
        EInvoiceRefVend_IT eInvoiceRef;

        if (_vendInvoiceJour.RecId  &&
            (_force || _vendInvoiceJour.vendTable_InvoiceAccount().EInvoiceRegister_IT))
        {
            ttsBegin;

            eInvoice.Status = _status;
            eInvoice.newVendInvoiceMEI(_vendInvoiceJour);
            eInvoice.newVendInvoiceDelegate(_vendInvoiceJour, eInvoice);
            eInvoice.insert();

            eInvoiceRef.Invoice = _vendInvoiceJour.RecId;
            eInvoiceRef.EInvoice = eInvoice.RecId;
            eInvoiceRef.insert();

            ttsCommit;

            info(strfmt("@SYP4881714", _vendInvoiceJour.InvoiceId, _vendInvoiceJour.InvoiceDate));
        }

        return eInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendInvoiceMEI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate method to allow additional actions before the creation of vendor invoice.
    /// </summary>
    /// <param name = "_vendInvoiceJour">Vendor invoice journal buffer.</param>
    [SysObsolete('Use the delegate newVendInvoiceDelegate instead.', false, 26\01\2022)]
    delegate void newVendInvoiceMEI(VendInvoiceJour _vendInvoiceJour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVendInvoiceDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate method to allow additional actions before the creation of vendor invoice.
    /// </summary>
    /// <param name = "_vendInvoiceJour">Vendor invoice journal buffer.</param>
    /// <param name = "_eInvoice">Electronic invoice buffer.</param>
    delegate void newVendInvoiceDelegate(VendInvoiceJour _vendInvoiceJour, EInvoice_IT _eInvoice)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new electronic invoice header record for the project invoice.
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// The project invoice journal header.
    /// </param>
    /// <param name="_force">
    /// A boolean value, indicating that the eInvoice must be created despite the customer setup; optional.
    /// </param>
    /// <param name="_status">
    /// The status of the new eInvoice; optional.
    /// </param>
    /// <returns>
    /// The new electronic invoice header record.
    /// </returns>
    public static EInvoice_IT newProjInvoice(ProjInvoiceJour _projInvoiceJour, boolean _force  = false, EInvoiceStatus_IT _status = EInvoiceStatus_IT::New)
    {
        EInvoice_IT eInvoice;
        EInvoiceRefProj_IT eInvoiceRef;

        if (_projInvoiceJour.RecId  &&
            (_force || CustTable::find(_projInvoiceJour.InvoiceAccount).EInvoiceRegister_IT))
        {
            ttsBegin;

            eInvoice.Status = _status;
            eInvoice.newProjInvoiceMEI(_projInvoiceJour);
            eInvoice.newProjInvoiceDelegate(_projInvoiceJour, eInvoice);
            eInvoice.insert();

            eInvoiceRef.Invoice = _projInvoiceJour.RecId;
            eInvoiceRef.EInvoice = eInvoice.RecId;
            eInvoiceRef.insert();

            ttsCommit;

            info(strfmt("@SYP4881715", _projInvoiceJour.ProjInvoiceId, _projInvoiceJour.InvoiceDate));
        }

        return eInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjInvoiceMEI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate method to allow additional actions before the creation of project invoice.
    /// </summary>
    /// <param name = "_projInvoiceJour">Project invoice journal buffer.</param>
    [SysObsolete('Use the delegate newProjInvoiceDelegate instead.', false, 26\01\2022)]
    delegate void newProjInvoiceMEI(ProjInvoiceJour _projInvoiceJour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjInvoiceDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate method to allow additional actions before the creation of project invoice.
    /// </summary>
    /// <param name = "_projInvoiceJour">Project invoice journal buffer.</param>
    /// <param name = "_eInvoice">Electronic invoice buffer.</param>
    delegate void newProjInvoiceDelegate(ProjInvoiceJour _projInvoiceJour, EInvoice_IT _eInvoice)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextEInvoiceFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate invoice file name.
    /// </summary>
    /// <returns>Invoice file name.</returns>
    public static EInvoiceFileName_IT nextEInvoiceFileName()
    {
        container countryRegionCodes = SysDictType::newName(extendedTypeStr(EInvoiceFileName_IT)).getCountryRegionCodes();
        NumberSequenceReference numberSequenceReference;
        EInvoiceFileName_IT eInvoiceFileName;

        void setupError()
        {
            throw error(strfmt("@SYS28626", NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype).referenceLabelForDisplay()));
        }

        if (!countryRegionCodes || SysCountryRegionCode::isLegalEntityInCountryRegion(countryRegionCodes))
        {
            numberSequenceReference = EInvoiceParameters_IT::numRefEInvoiceFileName();
            if (!numberSequenceReference || !numberSequenceReference.NumberSequenceId)
            {
                setupError();
            }

            eInvoiceFileName = NumberSeq::newGetNum(numberSequenceReference).num();
            if (!eInvoiceFileName)
            {
                setupError();
            }
        }

        return eInvoiceFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextEInvoiceTransmissionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate invoice transmission name.
    /// </summary>
    /// <returns>Invoice transmission name.</returns>
    public static EInvoiceTransmissionName_IT nextEInvoiceTransmissionName()
    {
        container countryRegionCodes = SysDictType::newName(extendedTypeStr(EInvoiceTransmissionName_IT)).getCountryRegionCodes();
        NumberSequenceReference numberSequenceReference;

        EInvoiceTransmissionName_IT eInvoiceTransmissionName;

        void setupError()
        {
            throw error(strfmt("@SYS28626",
            NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype).referenceLabelForDisplay()));
        }

        if (!countryRegionCodes || SysCountryRegionCode::isLegalEntityInCountryRegion(countryRegionCodes))
        {
            numberSequenceReference = EInvoiceParameters_IT::numRefEInvoiceTransmissionName();
            if (!numberSequenceReference || !numberSequenceReference.NumberSequenceId)
            {
                setupError();
            }

            eInvoiceTransmissionName = NumberSeq::newGetNum(numberSequenceReference).num();
            if (!eInvoiceTransmissionName)
            {
                setupError();
            }
        }

        return eInvoiceTransmissionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInvoicesCust</Name>
				<Source><![CDATA[
    public static container selectInvoicesCust(FormDatasource _dsCust)
    {
        Query query = new Query(querystr(EInvoiceSelect_IT));
        query.dataSourceTable(tableNum(ProjInvoiceJour)).enabled(false);

        QueryRun queryRun = new QueryRun(query);
        int custInvoicetableNum = tableNum(CustInvoiceJour);

        int custInvoiceCount = 0;

        if (queryRun.prompt())
        {
            ttsBegin;

            while (queryRun.next())
            {
                if (queryRun.changed(custInvoicetableNum))
                {
                    if (EInvoice_IT::newCustInvoice(queryRun.get(custInvoicetableNum), true, EInvoiceStatus_IT::CreatedFailed).RecId)
                    {
                        custInvoiceCount++;
                    }
                }
            }

            ttsCommit;
        }

        if (custInvoiceCount)
        {
            _dsCust.executeQuery();
        }
        else
        {
            info("@SYS107537");
        }

        return [custInvoiceCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInvoicesProj</Name>
				<Source><![CDATA[
    public static container selectInvoicesProj(FormDatasource  _dsProj)
    {
        Query query = new Query(querystr(EInvoiceSelect_IT));
        query.dataSourceTable(tableNum(CustInvoiceJour)).enabled(false);

        QueryRun queryRun = new QueryRun(query);
        int projInvoicetableNum = tableNum(ProjInvoiceJour);

        int projInvoiceCount = 0;

        if (queryRun.prompt())
        {
            ttsBegin;

            while (queryRun.next())
            {
                if (queryRun.changed(projInvoicetableNum))
                {
                    if (EInvoice_IT::newProjInvoice(queryRun.get(projInvoicetableNum), true, EInvoiceStatus_IT::CreatedFailed).RecId)
                    {
                        projInvoiceCount++;
                    }
                }
            }

            ttsCommit;
        }

        if (projInvoiceCount)
        {
            _dsProj.executeQuery();
        }
        else
        {
            info("@SYS107537");
        }

        return [projInvoiceCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInvoicesVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all new vendor invoices and creates electronic invoices for every found record.
    /// </summary>
    /// <param name = "_dsVend">
    /// Form data source for vendor invoices.
    /// </param>
    /// <returns>
    /// Number of created electronic invoices.
    /// </returns>
    internal static container selectInvoicesVend(FormDatasource _dsVend)
    {
        Query query = new Query(querystr(EInvoiceSelect_IT));
        query.dataSourceTable(tableNum(CustInvoiceJour)).enabled(false);
        query.dataSourceTable(tableNum(ProjInvoiceJour)).enabled(false);
        query.dataSourceTable(tableNum(VendInvoiceJour)).enabled(true);

        QueryRun queryRun = new QueryRun(query);
        int vendInvoicetableNum = tableNum(VendInvoiceJour);

        int vendInvoiceCount = 0;

        if (queryRun.prompt())
        {
            ttsBegin;

            while (queryRun.next())
            {
                if (queryRun.changed(vendInvoicetableNum))
                {
                    if (EInvoice_IT::newVendInvoice(queryRun.get(vendInvoicetableNum), true, EInvoiceStatus_IT::CreatedFailed).RecId)
                    {
                        vendInvoiceCount++;
                    }
                }
            }

            ttsCommit;
        }

        if (vendInvoiceCount)
        {
            _dsVend.executeQuery();
        }
        else
        {
            info("@SYS107537");
        }

        return [vendInvoiceCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for a corresponding to <c>CustInvoiceJour</c> or <c>ProjInvoiceJour</c> record of <c>Einvoice_IT</c>.
    /// </summary>
    /// <param name = "_recId">
    /// Id of journal record for which assumed to find an <c>Einvoice_IT</c>.
    /// </param>
    /// <param name = "_tableId">
    /// Table id of desired invoice journal.
    /// </param>
    /// <param name = "_forUpdate">
    /// A boolean value, indicating that cursor for the record should be returned updatable.
    /// </param>
    /// <returns>
    /// Cursor to the <c>EInvoice_IT</c> record corresponding to specified invoice and empty if there is no such record.
    /// </returns>
    public static EInvoice_IT findByInvoice(RecId _recId, TableId _tableId, boolean _forUpdate = false)
    {
        RefRecId refRecid;
        EInvoice_IT eInvoice;

        switch (_tableId)
        {
            case tableNum(CustInvoiceJour):
                EInvoiceRefCust_IT eInvoiceRefCust;
                select firstonly EInvoice from eInvoiceRefCust 
                    where eInvoiceRefCust.Invoice == _recId
                    exists join eInvoice
                        where eInvoice.RecId == eInvoiceRefCust.EInvoice;
                refRecid = eInvoiceRefCust.EInvoice;
                break;

            case tableNum(ProjInvoiceJour):
                EInvoiceRefProj_IT eInvoiceRefProj;
                select firstonly EInvoice from eInvoiceRefProj 
                    where eInvoiceRefProj.Invoice == _recId
                    exists join eInvoice
                        where eInvoice.RecId == eInvoiceRefProj.EInvoice;
                refRecid = eInvoiceRefProj.EInvoice;
                break;

            case tableNum(VendInvoiceJour):
                EInvoiceRefVend_IT eInvoiceRefVend;
                select firstonly EInvoice from eInvoiceRefVend 
                    where eInvoiceRefVend.Invoice == _recId
                    exists join eInvoice
                        where eInvoice.RecId == eInvoiceRefVend.EInvoice;
                refRecid = eInvoiceRefVend.EInvoice;
                break;

            default:
                break;
        }

        EInvoice_IT einvoiceIt = EInvoice_IT::find(refRecid, _forUpdate);

        return einvoiceIt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERFormatMappingAndFillParameters</Name>
				<Source><![CDATA[
    private container getERFormatMappingAndFillParameters(RecId _recId, TableId _tableId)
    {
        SalesParameters salesParameters = SalesParameters::find();
        ERFormatMappingId eRFormatMappingId;
        ERModelDefinitionParamsUIActionComposite parameters = new ERModelDefinitionParamsUIActionComposite();
        ERModelDefinitionDatabaseContext context = new ERModelDefinitionDatabaseContext();
        context.addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curExt());

        switch (_tableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = this.getInvoiceRecord();

                if (!custInvoiceJour.CustVendInvoiceJour::validateERParameters(custInvoiceJour.InvoiceAmountMST))
                {
                    throw error("@SYS345627");
                }

                eRFormatMappingId = EInvoiceGenerationDataContract::getERFormatMappingId(tableNum(CustInvoiceJour), custInvoiceJour.InvoiceAmountMST < 0);
                context.addValue(_tableId, fieldNum(CustInvoiceJour, RecId), _recId);
                break;

            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJour = this.getInvoiceRecord();

                if (!projInvoiceJour.CustVendInvoiceJour::validateERParameters(projInvoiceJour.InvoiceAmount))
                {
                    throw error("@SYS345627");
                }

                eRFormatMappingId = EInvoiceGenerationDataContract::getERFormatMappingId(tableNum(ProjInvoiceJour), projInvoiceJour.InvoiceAmount < 0);
                context.addValue(_tableId, fieldNum(ProjInvoiceJour, RecId), _recId);
                break;

            case tableNum(VendInvoiceJour):
                VendInvoiceJour vendInvoiceJour = this.getInvoiceRecord();

                if (!vendInvoiceJour.CustVendInvoiceJour::validateERParameters(vendInvoiceJour.InvoiceAmountMST))
                {
                    throw error("@SYS345627");
                }

                eRFormatMappingId = EInvoiceGenerationDataContract::getERFormatMappingId(tableNum(VendInvoiceJour), vendInvoiceJour.InvoiceAmountMST < 0);
                context.addValue(_tableId, fieldNum(VendInvoiceJour, RecId), _recId);
                break;

            default:
                throw error("@GEE12120");
        }

        parameters.add(context);

        return [eRFormatMappingId, parameters];
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportXMLToSharePoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates XML for specified <c>CustInvoiceJour</c> or <c>ProjInvoiceJour</c> record, signs it and stores at Sharepoint specified in Electronic reporting destination.
    /// </summary>
    /// <param name = "_recId">
    /// Id of journal record for which assumed to find an <c>Einvoice_IT</c>.
    /// </param>
    /// <param name = "_tableId">
    /// Table id of desired invoice journal.
    /// </param>
    public static void exportXMLToSharePoint(RecId _recId, TableId _tableId)
    {
        if (!BusinessDocumentParameters::isFeatureEnabled(EInvoicingFeaturesConstants::ExportInvoicesFeaturesFatturaPA))
        {
            EInvoice_IT eInvoiceIt = EInvoice_IT::findByInvoice(_recId, _tableId);

            if (eInvoiceIt)
            {
                ERFormatMappingId eRFormatMappingId;
                ERModelDefinitionParamsUIActionComposite parameters;

                [eRFormatMappingId, parameters] = eInvoiceIt.getERFormatMappingAndFillParameters(_recId, _tableId);

                EInvoiceContext_IT eInvoiceContext = EInvoiceContext_IT::current();
                if (!eInvoiceContext
                 || !eInvoiceContext.parmCheckERDestinationExists()
                 || ERFormatDestinationTable::findByFormatMapping(eRFormatMappingId))
                {
                    ERIFormatMappingRun formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(eRFormatMappingId);
                    formatMappingRun.withParameter(parameters);
                    formatMappingRun.withIntegrationPoint(new ERIntegrationPointFactory().WithTableRecordsIntegrationPoint(tableId2Name(_tableId)).ToIntegrationPoint());

                    ERIFileDestinationFactoryHost factoryHost = ERCast::asObject(formatMappingRun) as ERIFileDestinationFactoryHost;

                    if (factoryHost)
                    {
                        eInvoiceIt.generateNextFileName();
                        ERIFileDestinationFactory fileDestinationFactory = factoryHost.getFileDestinationFactory();
                        factoryHost.setFileDestinationFactory(EinvoiceDestinationFactory_IT::construct(fileDestinationFactory, eInvoiceIt));
                        formatMappingRun.run();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXMLOutgoing</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public display XMLOutgoing getXMLOutgoing()
    {           
        XMLOutgoing xml;
        
        if (this.Moved)
        {
            xml = this.readFile(this.getDocuRef(EInvoiceConstants_IT::XMLOutgoing));
        }
        else
        {
            xml = this.XMLOutgoing;
        }
        
        return xml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeXMLAttached</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void removeXMLAttached(Description _name)
    {
        DocuRef docuRef = this.getDocuRef(_name, true);
        
        if (docuRef)
        {
            docuRef.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXMLOutgoingSigned</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public display XMLOutgoingSigned getXMLOutgoingSigned()
    {      
        XMLOutgoingSigned xml;
        
        if (this.MovedSigned)
        {
            xml = this.readFile(this.getDocuRef(EInvoiceConstants_IT::XMLOutgoingSigned));
        }
        else
        {
            xml = this.XMLOutgoingSigned;    
        }
        
        return xml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocuRef</Name>
				<Source><![CDATA[
    private DocuRef getDocuRef(Description _name, boolean _forUpdate = false)
    {        
        DocuRef docuRef;
        
        docuRef.selectForUpdate(_forUpdate);

        select firstonly  docuRef
            where docuRef.RefCompanyId == this.DataAreaId
               && docuRef.RefTableId == this.TableId
               && docuRef.RefRecId == this.RecId
               && docuRef.Name == _name;
     
        return docuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    private XML readFile(DocuRef _docuRef)
    {
        DocuValue docuValue;
        str accessToken;
        XML xml;
        DocuPath downloadUrl;
        Microsoft.Dynamics.AX.Framework.FileManagement.IDocumentStorageProvider storageProvider;       
        System.IO.StreamReader strFromStream;
        
        if (_docuRef.isValueAttached())
        {
            docuValue = _docuRef.docuValue();
            
            if (docuValue.Path)
            {
                downloadUrl = docuValue.Path;
            }

            if (!downloadUrl || docuValue.Type == DocuValueType::Others)
            {
                accessToken = DocumentManagement::createAccessToken(_docuRef);
                downloadUrl = Microsoft.Dynamics.AX.Framework.FileManagement.URLBuilderUtilities::GetDownloadUrl(docuValue.FileId, accessToken);
            }

            if (downloadUrl)
            {   
                storageProvider = docuValue.getStorageProvider();
                var docContents = storageProvider.GetFile(docuValue.createLocation());
                strFromStream = new System.IO.StreamReader(docContents.Content);
                xml = strFromStream.ReadToEnd();                
            }
        }
       
        return xml;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IT,ES</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4881751</DeveloperDocumentation>
	<Label>@SYS341123</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RegistrationID</TitleField1>
	<TitleField2>Status</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<Modules>EInvoice</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EInvoiceRefProj_IT</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EInvoiceRefProj_IT</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EInvoiceRefCust_IT</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EInvoiceRefCust_IT</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EInvoiceRefVend_IT</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EInvoiceRefVend_IT</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ElectronicInvoice</Name>
			<Label>@SYS341996</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceFileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceTransmissionName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>XMLOutgoing</Name>
			<Label>@SYP4881719</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>getXMLOutgoing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XMLOutgoingCreatedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XMLOutgoingCreatedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>XMLOutgoingSigned</Name>
			<Label>@SYP4881734</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>getXMLOutgoingSigned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XMLOutgoingSignedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XMLOutgoingSignedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>XMLOutgoingSignedCertificateSubject</Name>
			<Label>@SYS32306</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertSubj</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>XMLOutgoingSignedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SYS138247</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertSubj</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DigitalCertificateSubject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceFileName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EInvoiceFileName_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceTransmissionName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EInvoiceTransmissionName_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RegistrationDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYP4881702</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegistrationID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EInvoiceID_IT</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EInvoiceStatus_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>XMLOutgoing</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>XML</ExtendedDataType>
			<Label>@SYP4881719</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>XMLOutgoingCreatedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SYP4881687</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>XMLOutgoingCreatedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS59617</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>XMLOutgoingSigned</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>XML</ExtendedDataType>
			<Label>@SYP4881734</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>XMLOutgoingSignedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYP4881733</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Moved</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MovedSigned</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MovedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RegistrationDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Moved</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MovedSigned</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>