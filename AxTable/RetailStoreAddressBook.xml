<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStoreAddressBook</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailStoreAddressBook extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressBooks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the containers holding the <c>RecID</c> and name values of the <c>DirAddressBook</c>
    /// table.
    /// </summary>
    /// <param name="_storeRecId">
    /// The reference of the <c>RetailStoreAddressBook</c> record to find.
    /// </param>
    /// <param name="_addressBookType">
    /// The type of the <c>RetailStoreAddressBook</c> record to find.
    /// </param>
    /// <returns>
    /// The containers holding the <c>RecId</c> and name values of the <c>DirAddressBook</c> table.
    /// </returns>
    public container addressBooks(RefRecId _storeRecId, RetailAddressBookType _addressBookType)
    {
        container                      addressBookIds, addressBookNames;
        DirAddressBook                 dirAddressBook;
        RetailStoreAddressBook         retailStoreAddressBook;
        ;
        while select AddressBook, StoreRecId, AddressBookType from retailStoreAddressBook
            join RecId, Name from dirAddressBook
                where retailStoreAddressBook.AddressBook == dirAddressBook.RecId &&
                      retailStoreAddressBook.StoreRecId == _storeRecId &&
                      retailStoreAddressBook.AddressBookType == _addressBookType

        {
            addressBookIds += dirAddressBook.RecId;
            addressBookNames += dirAddressBook.Name;
        }

        return [addressBookIds, addressBookNames];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAddressBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>RetailStoreAddressBook</c> table.
    /// </summary>
    /// <param name="_storeRecId">
    /// The reference of the <c>RetailStoreAddressBook</c> record to find.
    /// </param>
    /// <param name="_name">
    /// The name of the address books record to find.
    /// </param>
    /// <param name="_addressBookType">
    /// The type of the <c>RetailStoreAddressBook</c> record to find.
    /// </param>
    public void insertAddressBook(RefRecId _storeRecId, DirAddressBookName _name, RetailAddressBookType _addressBookType)
    {
        DirAddressBook dirAddressBook;
        ;

        select Name, RecId from dirAddressBook where dirAddressBook.Name == _name;

        if (!RetailStoreAddressBook::find(_storeRecId, dirAddressBook.RecId, _addressBookType) && _name)
        {
            this.StoreRecId  = _storeRecId;
            this.AddressBook = dirAddressBook.RecId;
            this.AddressBookType = _addressBookType;
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailStoreAddressBook</c> table by using the specified
    /// <c>parameter</c> value.
    /// </summary>
    /// <param name="_storeRecId">
    /// The reference of the <c>RetailStoreAddressBook</c> record to find.
    /// </param>
    /// <param name="_addressBookRecId">
    /// The reference of the <c>RetailStoreAddressBook</c> record to find.
    /// </param>
    /// <param name="_addressBookType">
    /// The type of the <c>RetailStoreAddressBook</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailStoreAddressBook</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailStoreAddressBook find(RefRecId _storeRecId,
                                                      DirAddressBookRecId _addressBookRecId,
                                                      RetailAddressBookType _addressBookType,
                                                      boolean _forupdate = false)
    {
        RetailStoreAddressBook retailStoreAddressBook;

        if (_storeRecId && _addressBookRecId)
        {
            retailStoreAddressBook.selectForUpdate(_forupdate);
            select firstonly retailStoreAddressBook
                where retailStoreAddressBook.StoreRecId == _storeRecId &&
                      retailStoreAddressBook.AddressBook == _addressBookRecId &&
                      retailStoreAddressBook.AddressBookType == _addressBookType;
        }
        return retailStoreAddressBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAddressBooks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>RetailStoreAddressBook</c> table by using the specific <c>parameter</c> value.
    /// </summary>
    /// <param name="_storeRecId">
    /// The reference of the <c>RetailStoreAddressBook</c> record to update
    /// </param>
    /// <param name="_addresses">
    /// The values of the <c>RetailStoreAddressBook</c> record to update or insert
    /// </param>
    /// <param name="_addressBookType>
    /// The type of the <c>RetailStoreAddressBook</c> record to insert
    /// </param>
    public static void updateAddressBooks(RefRecId _storeRecId, Set _addresses, RetailAddressBookType _addressBookType)
    {
        DirAddressBook addressBook;
        RetailStoreAddressBook retailStoreAddressBook;
        if (_storeRecId && _addresses)
        {
            ttsbegin;
            while select forupdate retailStoreAddressBook
                    where retailStoreAddressBook.StoreRecId == _storeRecId &&
                            retailStoreAddressBook.AddressBookType == _addressBookType
            {
                select firstonly Name from addressBook where addressBook.RecId == retailStoreAddressBook.AddressBook;

                // If the existing address is in the new list, delete from selectedAddresses
                // so that selectedAddresses leftover will get inserted later,
                // or else delete the existing address from the database.
                if (_addresses.in(addressBook.Name))
                {
                    _addresses.remove(addressBook.Name);
                }
                else
                {
                    retailStoreAddressBook.delete();
                }
            }

            // Insert selected addressed that are not found in database.
            SetEnumerator selectedAddressEnumerator = _addresses.getEnumerator();
            while (selectedAddressEnumerator.moveNext())
            {
                retailStoreAddressBook.insertAddressBook(_storeRecId, selectedAddressEnumerator.current(), _addressBookType);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260393</DeveloperDocumentation>
	<Label>@RET5841</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>StoreRecId</TitleField1>
	<TitleField2>AddressBook</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>BrickAndMortarStore</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StoreRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressBook</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressBookType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressBook</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressBookType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressBook</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DirAddressBookRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AddressBookType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailAddressBookType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StoreRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StoreRecIdAddressBookIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StoreRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AddressBookType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AddressBook</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AddressBookStoreRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AddressBook</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StoreRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AddressBookTypeStoreRecidIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AddressBookType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StoreRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AddressBook</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirAddressBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirAddressBook</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressBook</Name>
					<Field>AddressBook</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreRecId</Name>
					<Field>StoreRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>