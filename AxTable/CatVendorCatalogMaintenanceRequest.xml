<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorCatalogMaintenanceRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatVendorCatalogMaintenanceRequest extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approvedProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the property name.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CatVendorTotalApprovedProducts</c> data type.
    /// </returns>
    display CatVendorTotalApprovedProducts approvedProducts()
    {
        CatVendorProductCandidate   catVendorProductCandidate;

        select count(RecId) from catVendorProductCandidate where
        catVendorProductCandidate.CatalogMaintenanceRequest == this.RecId
        && catVendorProductCandidate.Status == CatVendorProductStatus::Approved;

        return catVendorProductCandidate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    public boolean canSubmit()
    {
        CatVendorProductCandidate       catVendorProductCandidate;
        select firstonly RecId from catVendorProductCandidate
                where catVendorProductCandidate.CatalogMaintenanceRequest == this.RecId
                && catVendorProductCandidate.Status == CatVendorProductStatus::NotSubmitted;

        return this.WorkflowStatus == CatMaintenanceRequestWfStatus::NotSubmitted &&
               this.LastImportStatus != CatVendorImportStatus::Failed  && catVendorProductCandidate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the property name.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>str</c> data type.
    /// </returns>
    display Integer getImage()
    {
        return this.LastImportStatus + 890;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUploadedBy</Name>
				<Source><![CDATA[
    display CatVendorCatalogUploadedBy getUploadedBy()
    {
        return this.CreatedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUploadedDate</Name>
				<Source><![CDATA[
    display CatVendorCatalogCMRUploadedDate getUploadedDate()
    {
        return DateTimeUtil::date(this.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectedProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the property name.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CatVendorTotalRejectedProducts</c> data type.
    /// </returns>
    display CatVendorTotalRejectedProducts rejectedProducts()
    {
        CatVendorProductCandidate   catVendorProductCandidate;

        select count(RecId) from catVendorProductCandidate where
        catVendorProductCandidate.CatalogMaintenanceRequest == this.RecId
        && catVendorProductCandidate.Status == CatVendorProductStatus::Rejected;

        return catVendorProductCandidate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the property name.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>CatVendorTotalProducts</c> data type.
    /// </returns>
    display CatVendorTotalProducts totalProducts()
    {
        CatVendorProductCandidate   catVendorProductCandidate;

        select count(RecId) from catVendorProductCandidate where
        catVendorProductCandidate.CatalogMaintenanceRequest == this.RecId;

        return catVendorProductCandidate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the table fields.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    An instance of <c>FieldId</c> data type.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean         ret;

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CatVendorCatalogMaintenanceRequest, PriceValidFromDate) :
                    if (this.PriceValidToDate && this.PriceValidFromDate > this.PriceValidToDate)
                    {
                        // From date can be null.
                        // if to date is provided, then from date can not be greater than to date.
                        ret = checkFailed("@SYS131360");
                    }
                    break;

                case fieldNum(CatVendorCatalogMaintenanceRequest, PriceValidToDate) :
                    // To date can be null.
                    if (this.PriceValidToDate && this.PriceValidToDate < DateTimeUtil::date(DateTimeUtil::getSystemDateTime()) )
                    {
                        // if To date is provided, it can not be less than today.
                        return checkFailed("@SYS334865");
                    }
                    if (this.PriceValidFromDate && this.PriceValidToDate && this.PriceValidFromDate > this.PriceValidToDate)
                    {
                        // if to and from dates are provided, then today must be greater than or equal to from date.
                        return checkFailed("@SYS131360");
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorparty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the property name of a <c>dirPartyTable</c> record.
    /// </summary>
    /// <returns>
    /// The name of the <c>dirPartyTable</c> record.
    /// </returns>
    display CatVendorName vendorparty()
    {
        CatVendorCatalog  catVendorCatalog;
        CatVendorCatalogMaintenanceRequest catVendorCatalogMaintenanceRequest;
        DirPartyTable  dirPartyTable;

        select firstonly VendorCatalog from catVendorCatalogMaintenanceRequest
        where catVendorCatalogMaintenanceRequest.RecId == this.RecId;

        select firstonly VendorParty from catVendorCatalog
        where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog;

        select firstonly Name from dirPartyTable
        where dirPartyTable.RecId == catVendorCatalog.VendorParty;

        return dirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCatalog</Name>
				<Source><![CDATA[
    public static CatVendorCatalogMaintenanceRequest createCatalog( CatVendorCatalogName catalogName,
                                                                    RefRecId vendorParty,
                                                                    CatVendorCatalogDescription catalogDecription,
                                                                    Filename fileName,
                                                                    CatVendorCatalogCMRFileSize fileSize,
                                                                    CatVendorDate validFrom,
                                                                    CatVendorDate validTo,
                                                                    boolean isNew,
                                                                    CatVendorCatalogFileUploadType _catalogFileUploadType,
                                                                    CatVendorCategoryHierarchyType _categoryHierarchyType = CatVendorCategoryHierarchyType::Procurement)
    {
        CatVendorCatalog                    catVendorCatalog;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        utcdatetime                         currentDateTime;

        currentDateTime = DateTimeUtil::getSystemDateTime();

        ttsbegin;
        catVendorCatalog = CatVendorCatalog::find(vendorParty, catalogName, true);

        if (catVendorCatalog)
        {
            if (isNew)
            {
                throw error("@SYS305442");
            }
        }
        else
        {
            catVendorCatalog.clear();
            catVendorCatalog.Description        = catalogDecription;
            catVendorCatalog.Name               = catalogName;
            catVendorCatalog.VendorParty        = vendorParty;
            catVendorCatalog.insert();
        }

        catVendorCatalogMaintenanceRequest.VendorCatalog                = catVendorCatalog.RecId;
        catVendorCatalogMaintenanceRequest.FileName                     = fileName;
        catVendorCatalogMaintenanceRequest.FileSize                     = fileSize;
        catVendorCatalogMaintenanceRequest.LastImportStatus             = CatVendorImportStatus::New;
        catVendorCatalogMaintenanceRequest.PriceValidFromDate           = validFrom;
        catVendorCatalogMaintenanceRequest.PriceValidToDate             = validTo;
        catVendorCatalogMaintenanceRequest.UploadType                   = _catalogFileUploadType;
        catVendorCatalogMaintenanceRequest.CategoryHierarchyType        = _categoryHierarchyType;
        catVendorCatalogMaintenanceRequest.UploadDateTime				= DateTimeUtil::getSystemDateTime();
        catVendorCatalogMaintenanceRequest.insert();
        ttscommit;

        return catVendorCatalogMaintenanceRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record with the given <c>RefRecId</c> _vendorCatalog.
    /// </summary>
    /// <param  name='_vendorCatalog'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the <c>boolean</c> data type.
    /// </param>
    /// <param  name='_concurrencyModel'>
    /// An instance of the <c>ConcurrencyModel</c> data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatVendorCatalogMaintenanceRequest</c> data type.
    /// </returns>
    public static CatVendorCatalogMaintenanceRequest find(RefRecId            _vendorCatalog,
                                                          boolean             _forUpdate = false,
                                                          ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;

        if (_vendorCatalog)
        {
            if (_forUpdate)
            {
                catVendorCatalogMaintenanceRequest.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    catVendorCatalogMaintenanceRequest.concurrencyModel(_concurrencyModel);
                }
            }

            catVendorCatalogMaintenanceRequest.selectLocked(_forUpdate);

            select firstonly catVendorCatalogMaintenanceRequest where catVendorCatalogMaintenanceRequest.VendorCatalog == _vendorCatalog;
        }

        return catVendorCatalogMaintenanceRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static CatVendorCatalogMaintenanceRequest findRecId(
        RecId   _recId,
        boolean _update = false )
    {
        CatVendorCatalogMaintenanceRequest cmr;

        if (_recId)
        {
            cmr.selectForUpdate(_update);

            select firstonly cmr
                where cmr.RecId == _recId;
        }
        return cmr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUploadDateTime</Name>
				<Source><![CDATA[
    public static CatVendorCatalogMaintenanceRequest findByUploadDateTime(
        utcdatetime _uploadDateTime,
        boolean _update = false )
    {
        CatVendorCatalogMaintenanceRequest cmr;

        cmr.selectForUpdate(_update);

        select firstonly cmr
                where cmr.UploadDateTime == _uploadDateTime;

        return cmr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductCandidatePerLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retail: Gets the product candicate(including distinct product or product master or product variant) availability status in legal entities.
    /// </summary>
    /// <param name="_catVendorCatalogMaintenanceRequestID">
    /// ID of <c>CatVendorCatalogMaintenanceRequest</c> table record.
    /// </param>
    /// <returns>
    /// <c>CatVendorCatalogProductPerCompany</c> table temporary buffer.
    /// </returns>
    public static CatVendorCatalogProductPerCompany getProductCandidatePerLegalEntity(RefRecId _catVendorCatalogMaintenanceRequestID)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
    CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorCatalog                    catVendorCatalog;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        CatVendorReleaseCatalog             catVendorReleaseCatalog;
        CatVendorCatalogProductPerCompany   catVendorCatalogProductPerCompany;
        InventTable                         inventTable;
        CompanyInfo                         companyInfo;

        catVendorCatalogProductPerCompany.setTmp();
        while select VendorParty from catVendorCatalog
            join Catalog,LegalEntity from catVendorReleaseCatalog
                where catVendorReleaseCatalog.Catalog == catVendorCatalog.RecId
            join RecId from catVendorCatalogMaintenanceRequest
                where catVendorCatalogMaintenanceRequest.VendorCatalog == catVendorReleaseCatalog.Catalog
                    && catVendorCatalogMaintenanceRequest.RecId == _catVendorCatalogMaintenanceRequestID
            join RecId,VendorProductCode from catVendorProductCandidate
                where catVendorProductCandidate.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRequest.RecId
            join DataArea from companyInfo
                where companyInfo.RecId == catVendorReleaseCatalog.LegalEntity
            join firstonly EcoResProduct from catVendorApprovedProduct
                where catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty
                            && catVendorApprovedProduct.VendorProductCode == catVendorProductCandidate.VendorProductCode
                            && catVendorApprovedProduct.ProductSubtype == catVendorProductCandidate.ProductSubtype
                            && catVendorApprovedProduct.ConfigurationName == catVendorProductCandidate.ConfigurationName
                            && catVendorApprovedProduct.SizeName == catVendorProductCandidate.SizeName
                            && catVendorApprovedProduct.ColorName == catVendorProductCandidate.ColorName
                            && catVendorApprovedProduct.StyleName == catVendorProductCandidate.StyleName
        {
            inventTable = InventTable::findByProductInCompany(catVendorApprovedProduct.EcoResProduct, companyInfo.DataArea);

            catVendorCatalogProductPerCompany.IsReleased                = inventTable? NoYes::Yes : NoYes::No;
            catVendorCatalogProductPerCompany.CatVendorProductCandidate = catVendorProductCandidate.RecId;
            catVendorCatalogProductPerCompany.Company                   =  companyInfo.DataArea;
            catVendorCatalogProductPerCompany.insert();
        }
            return catVendorCatalogProductPerCompany;
        }

]]></Source>
			</Method>
			<Method>
				<Name>getProductPerLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product availability status in legal entities.
    /// </summary>
    /// <param name="_catVendorCatalogMaintenanceRequestID">
    /// The record ID of the <c>CatVendorCatalogMaintenanceRequest</c> record.
    /// </param>
    /// <returns>
    /// The <c>CatVendorCatalogProductPerCompany</c> buffer.
    /// </returns>
    public static CatVendorCatalogProductPerCompany getProductPerLegalEntity(RefRecId _catVendorCatalogMaintenanceRequestID)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
    CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorCatalog                    catVendorCatalog;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        CatVendorReleaseCatalog             catVendorReleaseCatalog;
        CatVendorCatalogProductPerCompany   catVendorCatalogProductPerCompany;
        InventTable                         inventTable;
        CompanyInfo                         companyInfo;

        catVendorCatalogProductPerCompany.setTmp();
        while select VendorParty from catVendorCatalog
            join Catalog,LegalEntity from catVendorReleaseCatalog
                where catVendorReleaseCatalog.Catalog == catVendorCatalog.RecId
            join RecId from catVendorCatalogMaintenanceRequest
                where catVendorCatalogMaintenanceRequest.VendorCatalog == catVendorReleaseCatalog.Catalog
                    && catVendorCatalogMaintenanceRequest.RecId == _catVendorCatalogMaintenanceRequestID
            join RecId,VendorProductCode from catVendorProductCandidate
                where catVendorProductCandidate.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRequest.RecId
            join DataArea from companyInfo
                where companyInfo.RecId == catVendorReleaseCatalog.LegalEntity
            join firstonly EcoResProduct from catVendorApprovedProduct
                where catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty
                            && catVendorApprovedProduct.VendorProductCode == catVendorProductCandidate.VendorProductCode

        {
            inventTable = InventTable::findByProductInCompany(catVendorApprovedProduct.EcoResProduct, companyInfo.DataArea);

            catVendorCatalogProductPerCompany.IsReleased                = inventTable? NoYes::Yes : NoYes::No;
            catVendorCatalogProductPerCompany.CatVendorProductCandidate = catVendorProductCandidate.RecId;
            catVendorCatalogProductPerCompany.Company                   =  companyInfo.DataArea;
            catVendorCatalogProductPerCompany.insert();
        }
            return catVendorCatalogProductPerCompany;
        }

]]></Source>
			</Method>
			<Method>
				<Name>setLastImportStatus</Name>
				<Source><![CDATA[
        static void setLastImportStatus(RecId                   _cmrRecId,
                                 CatVendorImportStatus   _catVendorImportStatus)
    {
        CatVendorCatalogMaintenanceRequest   catVendorCatalogMaintenanceRequest;

        ttsbegin;

        catVendorCatalogMaintenanceRequest = CatVendorCatalogMaintenanceRequest::findRecId(_cmrRecId, true);
        catVendorCatalogMaintenanceRequest.LastImportStatus = _catVendorImportStatus;

        catVendorCatalogMaintenanceRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendCatalogImport</ConfigurationKey>
	<DeveloperDocumentation>@SYS324398</DeveloperDocumentation>
	<Label>@SYS129657</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FileName</TitleField1>
	<TitleField2>LastImportStatus</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>CatVendorCatalogUploadDateTime</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CatVendorCatalogImportEventLog</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendorCatalogImportEventLog</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatVendorProductCandidate</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendorProductCandidate</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastImportStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceValidFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceValidToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorCatalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileSize</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UploadDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastImportStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceValidFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceValidToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorCatalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UploadType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Filename</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FileSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatVendorCatalogCMRFileSize</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LastImportStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CatVendorImportStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PriceValidFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatVendorDate</ExtendedDataType>
			<Label>@SYS191429</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PriceValidToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatVendorDate</ExtendedDataType>
			<Label>@SYS191431</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UploadType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CatVendorCatalogFileUploadType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorCatalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS183670</Label>
			<EnumType>CatMaintenanceRequestWfStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>UploadDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatVendorDateTime</ExtendedDataType>
			<Label>@SYS309954</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CategoryHierarchyType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CatVendorCategoryHierarchyType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CatVendorCatalogIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorCatalog</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CatVendorCatalogUploadDateTime</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UploadDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatVendorCatalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatVendorCatalog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatVendorCatalog</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CatVendorCatalog_CatVendorCatalogMaintenanceRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorCatalog</Name>
					<Field>VendorCatalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>