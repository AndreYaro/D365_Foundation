<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRInstallmentPlanSalesTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRInstallmentPlanSalesTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInstallmentPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the payment schedule for the selected installment plan.
    /// </summary>
    /// <param name="_salesTable">
    /// <c>SalesTable</c> the select installment relates to; optional.
    /// </param>
    public void createInstallmentPlan(SalesTable _salesTable = null)
    {
        MCRInstallmentBilling           mcrInstallmentBilling;

        if (!_salesTable)
        {
            _salesTable = SalesTable::find(this.SalesId);
        }

        mcrInstallmentBilling = new MCRInstallmentBilling(_salesTable);
        mcrInstallmentBilling.copyInstallmentPlan(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInstPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Breaks the links to the Installment Plan and deletes child records.
    /// </summary>
    public void deleteInstPlan()
    {
        SalesTable                      salesTable = SalesTable::find(this.SalesId, true);

        // Break the link with the sales table
        salesTable.PaymentSched = '';

        ttsbegin;
        if (salesTable.validateWrite())
        {
            salesTable.update();
        }
        else
        {
            throw error("@SYS21628");
        }
        ttscommit;

        // Delete the related CustPaymSched record
        CustPaymSched::deleteCustPaymSched(salesTable.TableId, salesTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInstallmentTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of all the schedule lines tied to the passed sales order.
    /// </summary>
    /// <returns>
    /// The total installment billing Amount.
    /// </returns>
    public display AmountCur displayInstallmentTotal()
    {
        return this.sumTotalAmount(SalesTable::find(this.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMaxOrderValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and displays the maximum order value allow
    ///     for the related schedule.
    /// </summary>
    /// <returns>
    /// Maximum order value for related schedule.
    /// </returns>
    public display MCRMaxOrdervalue displayMaxOrderValue()
    {
        return PaymSched::find(this.PaymSchedId).mcrMaxOrderValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMinOrderValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and displays the minimum order value allow
    ///     for the related schedule.
    /// </summary>
    /// <returns>
    /// Minimum order value for related schedule.
    /// </returns>
    public display MCRMinOrderValue displayMinOrderValue()
    {
        return PaymSched::find(this.PaymSchedId).mcrMinOrderValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalPostedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sums the posted amount of the related payments for the current plan.
    /// </summary>
    /// <returns>
    ///     Sum of the posted payments.
    /// </returns>
    public AmountCur getTotalPostedAmount()
    {
        MCRPaymSchedLink mcrPaymSchedLink;
        MCRCustPaymTable mcrCustPaymTable;

        select sum(PostedAmount) from mcrCustPaymTable
            exists join mcrPaymSchedLink
                where mcrPaymSchedLink.PlanTableRecId == this.RecId
                   && mcrPaymSchedLink.CustTransOpenRefRecId != 0
                   && mcrPaymSchedLink.CustPaymRefRecId == mcrCustPaymTable.RecId;

        return mcrCustPaymTable.PostedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are any payments.
    /// </summary>
    /// <returns>
    /// true if one payment is tied to any of the schedule lines; otherwise, false.
    /// </returns>
    public boolean hasAnyPayments()
    {
        MCRPaymSchedLink mcrPaymSchedLink;

        select firstonly RecId from mcrPaymSchedLink
            where mcrPaymSchedLink.PlanTableRecId == this.RecId
               && mcrPaymSchedLink.CustPaymRefRecId;

        if (mcrPaymSchedLink)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBeenInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if any <c>MCRPaymSchedLink</c> records are marked as invoiced.
    /// </summary>
    /// <returns>
    ///     true if any <c>MCRPaymSchedLink</c> records are marked as invoiced.
    /// </returns>
    public boolean hasBeenInvoiced()
    {
        MCRPaymSchedLink mcrPaymSchedLink;

        // Link records are generated when the custTransOpen record is generated
        // existence of one indicates invoicing has happened
        select firstonly RecId from mcrPaymSchedLink
            where mcrPaymSchedLink.PlanTableRecId == this.RecId;

        if (mcrPaymSchedLink)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        MCRSalesTableShipping   mcrSalesTableShipping;
        super();

        // If orders paid on installment are required to be ship complete,
        // set the flag on the related order.
        if (MCROrderParameters::find().InstallmentShipComplete)
        {
            ttsbegin;
            mcrSalesTableShipping = MCRSalesTableShipping::findSalesId(this.SalesId, true);

            // If the sales table shipping record has not been created yet, assign the salesTable field
            // to the recId of the related order
            if (!mcrSalesTableShipping)
            {
                mcrSalesTableShipping.SalesTable = SalesTable::find(this.SalesId).RecId;
            }

            mcrSalesTableShipping.ShipComplete = NoYes::Yes;
            if (mcrSalesTableShipping.validateWrite())
            {
                mcrSalesTableShipping.selectForUpdate(true);
                mcrSalesTableShipping.write();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of all the schedule lines tied to the passed sales order.
    /// </summary>
    /// <param name="_record">
    /// The <c>SalesTable</c> record or a <c>CustInvoiceJour</c> record.
    /// </param>
    /// <returns>
    /// The total installment billing Amount.
    /// </returns>
    public AmountCur sumTotalAmount(Common _record)
    {
        AmountCur           totalIBAmount;
        CustPaymSched       custPaymSched;

        custPaymSched = CustPaymSched::mcrFindByRefExtTableRecID(_record.TableId, _record.RecId);
        totalIBAmount = CustPaymSchedLine::mcrGetTotalOfScheduleLines(custPaymSched.RecId);

        return totalIBAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.hasBeenInvoiced()
            || this.hasAnyPayments())
        {
            ret = checkFailed("@MCR10674");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDownPaymentPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calcuates the percent of the down payment.
    /// </summary>
    /// <param name="_salesOrderTotal">
    /// Sales order total.
    /// </param>
    /// <param name="_downPaymAmt">
    /// The down payment amount requested for calculation.
    /// </param>
    /// <returns>
    /// Calculated down payment percent.
    /// </returns>
    /// <remarks>
    /// While settling partial invoices it is important to know if there was a down payment.
    /// </remarks>
    public static Percent calculateDownPaymentPercent(AmountCur _salesOrderTotal, AmountCur _downPaymAmt)
    {
        Percent downPaymentPercent;
        // Ensure there is no divide by zero.
        if (_salesOrderTotal != 0)
        {
            downPaymentPercent = (100 * abs(_downPaymAmt))/_salesOrderTotal;
        }

        return downPaymentPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether and installment plan sales table record exists for a specific sales ID.
    /// </summary>
    /// <param name="_salesId">
    /// The Sales ID required to find the installment plan.
    /// </param>
    /// <returns>
    /// true if installment plan exist; otherwise, false.
    /// </returns>
    public static boolean existSalesId(SalesId _salesId)
    {
        MCRInstallmentPlanSalesTable mcrInstallmentPlanSalesTable;

        select firstonly RecId from mcrInstallmentPlanSalesTable
                    where mcrInstallmentPlanSalesTable.SalesId == _salesId;

        return mcrInstallmentPlanSalesTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>MCRInstallmentPlanSalesTable</c> record.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID of the <c>SalesTable</c> record.
    /// </param>
    /// <param name="_paymSchedId">
    /// The payment schedule ID of the <c>PaymSched</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An installment billing sales table record.
    /// </returns>
    public static MCRInstallmentPlanSalesTable find(  SalesId   _salesId,
                                    PaymSchedId _paymSchedId,
                                    boolean  _forUpdate = false)
    {
        MCRInstallmentPlanSalesTable   mcrInstallmentPlanSalesTable;

        if (MCRInstallmentPlanSalesTable::installmentEnabled())
        {
            if (_paymSchedId && _salesId)
            {
                mcrInstallmentPlanSalesTable.selectForUpdate(_forUpdate);

                select firstonly mcrInstallmentPlanSalesTable
                    where mcrInstallmentPlanSalesTable.SalesId == _salesId
                    &&    mcrInstallmentPlanSalesTable.PaymSchedId == _paymSchedId;
            }
        }

        return mcrInstallmentPlanSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>MCRInstallmentPlanSalesTable</c> record
    /// based on the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The installment plan sales table <c>recId</c>.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An installment billing sales table record.
    /// </returns>
    public static MCRInstallmentPlanSalesTable findRecId(RecId _recId,
                                                        boolean _forUpdate = false )
    {
        MCRInstallmentPlanSalesTable mcrInstallmentPlanSalesTable;

        if (MCRInstallmentPlanSalesTable::installmentEnabled())
        {
            mcrInstallmentPlanSalesTable.selectForUpdate(_forUpdate);

            if (_recId)
            {
                select firstonly mcrInstallmentPlanSalesTable
                    where mcrInstallmentPlanSalesTable.RecId == _recId;
            }
        }

        return mcrInstallmentPlanSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>MCRInstallmentPlanSalesTable</c> record.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID of the <c>SalesTable</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An installment billing sales table record.
    /// </returns>
    public static MCRInstallmentPlanSalesTable findSalesId(  SalesId   _salesId,
                                              boolean   _forUpdate = false)
    {
        MCRInstallmentPlanSalesTable   mcrInstallmentPlanSalesTable;

        if (MCRInstallmentPlanSalesTable::installmentEnabled())
        {
            if (_salesId)
            {
                mcrInstallmentPlanSalesTable.selectForUpdate(_forUpdate);

                select firstonly mcrInstallmentPlanSalesTable
                    where mcrInstallmentPlanSalesTable.SalesId == _salesId;
            }
        }

        return mcrInstallmentPlanSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>installmentEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the installment billing configuration key is enabled.
    /// </summary>
    /// <returns>
    /// true if the installment billing configuration key is enabled; otherwise, false.
    /// </returns>
    public static boolean installmentEnabled()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRInstallmentBilling)))
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRInstallmentBilling</ConfigurationKey>
	<DeveloperDocumentation>@SYS23033</DeveloperDocumentation>
	<Label>@SYS23033</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PaymSchedId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SalesId_Idx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSchedId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSchedId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSchedId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FlexNumInstallments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FlexPlan</Name>
			<Label>@MCR30821</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FlexNumInstallments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSchedId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanDates</Name>
			<Label>@MCR30828</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Qualifiers</Name>
			<Label>@MCR30831</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Totals</Name>
			<Label>@MCR30830</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidPayMethods</Name>
			<Label>@MCR30829</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS67267</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FlexNumInstallments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRFlexNumInstallments</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSchedId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesId_Idx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymSchedId</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSchedId</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymSchedId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>