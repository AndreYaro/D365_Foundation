<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorProductCandidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatVendorProductCandidate extends common
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>productDimensionFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for a product dimension.
    /// </summary>
    /// <param name = "_inventProductDimension">A product dimension field.</param>
    /// <returns>Field Id on <c>CatVendorProductCandidate</c> table.</returns>
    public static FieldId productDimensionFieldId(InventProductDimension _inventProductDimension)
    {
        return _inventProductDimension.fieldIdInTable(tableStr(CatVendorProductCandidate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    public boolean canSubmit()
    {
        return this.Status == CatVendorProductStatus::NotSubmitted && this.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAttributesValueChanged</Name>
				<Source><![CDATA[
    display boolean isAttributesValueChanged()
    {
        CatVendorTextValue                  catVendorTextValue;
        CatVendorIntValue                   catVendorIntValue;
        CatVendorFloatValue                 catVendorFloatValue;
        CatVendorDateTimeValue              catVendorDateTimeValue;
        CatVendorBooleanValue               catVendorBooleanValue;
        CatVendProdCandidateAttributeValue  catVendProdCandidateAttributeValue;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorCatalog                    catVendorCatalog;
        EcoResProduct                       ecoResProduct;
        EcoResTextValue                     ecoResTextValue;
        EcoResBooleanValue                  ecoResBooleanValue;
        EcoResFloatValue                    ecoResFloatValue;
        EcoResIntValue                      ecoResIntValue;
        EcoResDateTimeValue                 ecoResDateTimeValue;
        EcoResProductInstanceValue          ecoResProductInstanceValue;
        EcoResAttributeValue                ecoResAttributeValue;
        EcoResValue                         ecoResValue;
        boolean                             isAttributesValueChanged = false;

        while select catVendProdCandidateAttributeValue
            where catVendProdCandidateAttributeValue.CatVendorProductCandidate == this.RecId
            join VendorProductCode, DirPartyTable, EcoResProduct from catVendorApprovedProduct where catVendorApprovedProduct.VendorProductCode == this.VendorProductCode
            join RecId, VendorCatalog from catVendorCatalogMaintenanceRequest where catVendorCatalogMaintenanceRequest.RecId == this.CatalogMaintenanceRequest
            join RecId, VendorParty from catVendorCatalog where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog
                && catVendorCatalog.IsDeleted == NoYes::No
                && catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty
            join RecId from ecoResProduct where ecoResProduct.RecId == catVendorApprovedProduct.EcoResProduct
            join RecId, Product from ecoResProductInstanceValue where ecoResProductInstanceValue.Product == ecoResProduct.RecId
            join InstanceValue, Attribute, Value from ecoResAttributeValue where ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
                && ecoResAttributeValue.Attribute == catVendProdCandidateAttributeValue.EcoResAttribute
            join ecoResValue where ecoResValue.RecId == ecoResAttributeValue.Value
        {
            switch (catVendProdCandidateAttributeValue.getInstanceRelationType())
            {
                case tablestr(CatVendorTextValue):
                    catVendorTextValue = catVendProdCandidateAttributeValue as CatVendorTextValue;
                    ecoResTextValue = ecoResValue as EcoResTextValue;

                    if (catVendorTextValue.TextValue != ecoResTextValue.TextValue)
                    {
                        isAttributesValueChanged = true;
                    }
                    break;

                case tablestr(CatVendorIntValue):
                    catVendorIntValue = catVendProdCandidateAttributeValue as CatVendorIntValue;
                    ecoResIntValue = ecoResValue as EcoResIntValue;

                    if (catVendorIntValue.IntValue != ecoResIntValue.IntValue)
                    {
                        isAttributesValueChanged = true;
                    }
                    break;

                case tablestr(CatVendorFloatValue):
                    catVendorFloatValue = catVendProdCandidateAttributeValue as CatVendorFloatValue;
                    ecoResFloatValue = ecoResValue as EcoResFloatValue;

                    if (catVendorFloatValue.FloatValue != ecoResFloatValue.FloatValue)
                    {
                        isAttributesValueChanged = true;
                    }
                    break;

                case tablestr(CatVendorDateTimeValue):
                    catVendorDateTimeValue = catVendProdCandidateAttributeValue as CatVendorDateTimeValue;
                    ecoResDateTimeValue = ecoResValue as EcoResDateTimeValue;

                    if (catVendorDateTimeValue.DateTimeValue != ecoResDateTimeValue.DateTimeValue)
                    {
                        isAttributesValueChanged = true;
                    }
                    break;

                case tablestr(CatVendorBooleanValue):
                    catVendorBooleanValue = catVendProdCandidateAttributeValue as CatVendorBooleanValue;
                    ecoResBooleanValue = ecoResValue as EcoResBooleanValue;

                    if (catVendorBooleanValue.BooleanValue != ecoResBooleanValue.BooleanValue)
                    {
                        isAttributesValueChanged = true;
                    }
                    break;
            }

            if (isAttributesValueChanged)
            {
                break;
            }
        }

        return isAttributesValueChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDescriptionChanged</Name>
				<Source><![CDATA[
    display boolean isDescriptionChanged()
    {
        CatVendorApprovedProduct            catVendorApprovedProduct;
        EcoResProductTranslation            ecoResProductTranslation;
        CatVendorCatalog                    catVendorCatalog;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductTextTranslation     catVendorProductTextTranslation;
        boolean                             isDescriptionChanged = false;

        select count(RecId) from catVendorProductTextTranslation
            where catVendorProductTextTranslation.ProductCandidate == this.RecId
        exists join catVendorApprovedProduct
            where catVendorApprovedProduct.VendorProductCode == this.VendorProductCode
        exists join catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.RecId == this.CatalogMaintenanceRequest
        exists join catVendorCatalog
            where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog
            && catVendorCatalog.IsDeleted == NoYes::No
            && catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty
        exists join ecoResProductTranslation
            where ecoResProductTranslation.Product == catVendorApprovedProduct.EcoResProduct
            && ecoResProductTranslation.LanguageId == catVendorProductTextTranslation.Language
            && catVendorProductTextTranslation.Description != ecoResProductTranslation.Description;

        if (catVendorProductTextTranslation.RecId != 0)
        {
            isDescriptionChanged = true;
        }

        return isDescriptionChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceChanged</Name>
				<Source><![CDATA[
    display boolean isPriceChanged()
    {
        CatVendorApprovedProduct            catVendorApprovedProduct;
        InventTable                         inventTable;
        PriceDiscTable                      priceDiscTable;
        CatVendorCatalog                    catVendorCatalog;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidatePrice      catVendorProductCandidatePrice;
        boolean                             isPriceChanged = false;

        while select crosscompany VendorProductCandidate, CurrencyCode, Price from catVendorProductCandidatePrice
            where catVendorProductCandidatePrice.VendorProductCandidate == this.RecId
            join VendorProductCode, DirPartyTable, EcoResProduct from catVendorApprovedProduct where catVendorApprovedProduct.VendorProductCode == this.VendorProductCode
            join RecId, VendorCatalog from catVendorCatalogMaintenanceRequest where catVendorCatalogMaintenanceRequest.RecId == this.CatalogMaintenanceRequest
            join RecId, VendorParty from catVendorCatalog where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog
                && catVendorCatalog.IsDeleted == NoYes::No
                && catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty
            join Product, ItemId from inventTable where inventTable.Product == catVendorApprovedProduct.EcoResProduct
            join maxof(Amount) from priceDiscTable where priceDiscTable.ItemRelation == inventTable.ItemId && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
            && priceDiscTable.Currency == catVendorProductCandidatePrice.CurrencyCode && priceDiscTable.Amount != catVendorProductCandidatePrice.Price
        {
            isPriceChanged = true;
            break;
        }

        return isPriceChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markProductToRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the product so that it will be released to legal entities.
    /// </summary>
    /// <remarks>
    /// Creates or updates data in a <c>CatVendorCatalogProductPerCompany</c> table.
    /// </remarks>
    public void markProductToRelease()
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorCatalogProductPerCompany   catVendorCatalogProductPerCompany;
        CatVendorReleaseCatalog             catVendorReleaseCatalog;
        CatVendorCatalog                    catVendorCatalog;
        CompanyInfo                         companyInfo;

        ttsBegin;
        while select VendorCatalog from catVendorCatalogMaintenanceRequest
                    where catVendorCatalogMaintenanceRequest.RecId == this.CatalogMaintenanceRequest
                join RecId from catVendorCatalog
                    where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog
                join LegalEntity,Release from catVendorReleaseCatalog
                    where catVendorReleaseCatalog.Catalog == catVendorCatalog.RecId
                join DataArea from companyInfo
                    where companyInfo.RecId == catVendorReleaseCatalog.LegalEntity
        {
            catVendorCatalogProductPerCompany = CatVendorCatalogProductPerCompany::find(this.RecId,companyInfo.DataArea,true);
            if (catVendorCatalogProductPerCompany)
            {
                catVendorCatalogProductPerCompany.IsMarkedForRelease = catVendorReleaseCatalog.Release;
                catVendorCatalogProductPerCompany.update();
            }
            else
            {
                catVendorCatalogProductPerCompany.CatVendorProductCandidate = this.RecId;
                catVendorCatalogProductPerCompany.Company = companyInfo.DataArea;
                catVendorCatalogProductPerCompany.IsMarkedForRelease = catVendorReleaseCatalog.Release;
                catVendorCatalogProductPerCompany.insert();
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record in the <c>CatVendorProductCandidate</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// An instance of the <c>RecId</c> data type.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Standard Method on the table.
    /// </remarks>
    static boolean exist(recId  _recId)
    {
        if (!_recId)
            return false;

        return (select firstonly RecId from catVendorProductCandidate
                    index hint recId
                    where catVendorProductCandidate.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the table
    /// </summary>
    /// <param name="recId">
    ///    A record ID.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An instance of the <c>ConcurrencyModel</c> data type.
    /// </param>
    /// <returns>
    ///    An instance of the <c>CatVendorProductCandidate</c> data type.
    /// </returns>
    /// <remarks>
    ///    Standard method on the table.
    /// </remarks>
    static CatVendorProductCandidate find(recId           recId,
                                          boolean          _forUpdate = false,
                                          ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CatVendorProductCandidate  catVendorProductCandidate;

        if (recId)
        {
            if (_forUpdate)
            {
                catVendorProductCandidate.selectForUpdate (_forUpdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                    catVendorProductCandidate.concurrencyModel(_concurrencyModel);
            }
            catVendorProductCandidate.selectLocked    (_forUpdate);

            select firstonly catVendorProductCandidate
            index hint recId
                where catVendorProductCandidate.RecId == recId;
        }

        return catVendorProductCandidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowState</Name>
				<Source><![CDATA[
    static void setWorkflowState(recId                   _candidateRecId,
                                 CatVendorProductStatus   _catVendorProductStatus)
    {
        CatVendorProductCandidate   catVendorProductCandidate;

        ttsbegin;

        catVendorProductCandidate = CatVendorProductCandidate::find(_candidateRecId, true);
        catVendorProductCandidate.Status = _catVendorProductStatus;

        catVendorProductCandidate.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountProductsPerCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of products for a given catalog.
    /// </summary>
    /// <param name="_candidateRecId">
    /// The <c>RecId</c> value of the <c>CatVendorProductCandidate</c> record.
    /// </param>
    /// <returns>
    /// Count of the products in the given catalog.
    /// </returns>
    static int getCountProductsPerCatalog(recId _candidateRecId)
    {
        CatVendorProductCandidate catVendorProductCandidate;

        if (_candidateRecId)
        {
            select count(RecId) from catVendorProductCandidate
                where catVendorProductCandidate.CatalogMaintenanceRequest == _candidateRecId;
        }

        return int642int(catVendorProductCandidate.recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountApprovedProductsPerCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of approved products for a given catalog.
    /// </summary>
    /// <param name="_candidateRecId">
    /// The <c>RecId</c> value of the <c>CatVendorProductCandidate</c> record.
    /// </param>
    /// <returns>
    /// Count of the approved products for the given catalog.
    /// </returns>
    static int getCountApprovedProductsPerCatalog(recId _candidateRecId)
    {
        CatVendorProductCandidate catVendorProductCandidate;

        if (_candidateRecId)
        {
            select count(RecId) from catVendorProductCandidate
                where catVendorProductCandidate.CatalogMaintenanceRequest   == _candidateRecId
                      && catVendorProductCandidate.Status                   == CatVendorProductStatus::Approved;
       }

        return int642int(catVendorProductCandidate.recId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendCatalogImport</ConfigurationKey>
	<DeveloperDocumentation>@SYS324396</DeveloperDocumentation>
	<Label>@SYS134870</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VendorProductCode</TitleField1>
	<TitleField2>Status</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>CatVendorCatalogMaintenanceRequestIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CatVendorCatalogProductPerCompany</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendorCatalogProductPerCompany</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatVendorProductCandidateImage</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendorProductCandidateImage</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatVendorProductCandidatePrice</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendorProductCandidatePrice</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatVendorProductTextTranslation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendorProductTextTranslation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatVendProdCandidateAttributeValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendProdCandidateAttributeValue</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatVendorProductCandidateDefaultOrderSettings</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogMaintenanceRequest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorProductCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SearchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BarCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductSubtype</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogMaintenanceRequest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorProductCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColorName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigurationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SizeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StyleName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BarCode</Name>
			<Label>@RET3053</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BarCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogMaintenanceRequest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorProductCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SearchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductSubtype</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StyleName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigurationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SizeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColorName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ActionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CatProductActionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BarCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>ItemBarCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogMaintenanceRequest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ColorName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>EcoResColorName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfigurationName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>EcoResConfigurationName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DimensionGroupName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>EcoResProductDimensionGroupName</ExtendedDataType>
			<Label>@RET260160</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductSubtype</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<EnumType>EcoResProductSubtype</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SearchName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductSearchName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SizeName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>EcoResSizeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CatVendorProductStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StyleName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>EcoResStyleName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorProductCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDisplayProductNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CatVendorCatalogMaintenanceRequestIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductSubtype</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CatalogMaintenanceRequest</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendorProductCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ColorName</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfigurationName</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SizeName</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StyleName</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatVendorCatalogMaintenanceRequest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatVendorCatalogMaintenanceRequest</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatVendorCatalogMaintenanceRequest</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CatVendorCatalogMaintenanceRequest_CatVendorProductCandidate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CatalogMaintenanceRequest</Name>
					<Field>CatalogMaintenanceRequest</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategory_CatVendorProductCandidate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>