<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductEntityIdentifierCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductEntityIdentifierCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>EcoResProductEntityIdentifierCode</c> table.
    /// </summary>
    /// <param name = "_id">The code ID.</param>
    /// <param name = "_type">The code type.</param>
    /// <param name = "_name">The code name.</param>
    /// <param name = "_description">The code description.</param>
    /// <param name = "_extCodeTableRecId">The external code table rec ID.</param>
    /// <param name = "_barcodeSetupRecId">The barcode setup table rec ID.</param>
    /// <returns>The created <c>EcoResProductEntityIdentifierCode</c> record.</returns>
    public static EcoResProductEntityIdentifierCode create(
                                EcoResProductEntityIdentifierCodeId             _id,
                                EcoResProductEntityIdentifierCodeType           _type,
                                EcoResProductEntityIdentifierCodeName           _name,
                                EcoResProductEntityIdentifierCodeDescription    _description,
                                ExtCodeTableRecId                               _extCodeTableRecId = 0,
                                BarcodeSetupRecId                               _barcodeSetupRecId = 0)
    {
        EcoResProductEntityIdentifierCode code;

        if (!EcoResProductEntityIdentifierCode::exists(_id, _type))
        {
            ttsbegin;

            code.Id = _id;
            code.Type = _type;
            code.Name = _name;
            code.Description = _description;
            code.ExtCodeTable = _extCodeTableRecId;
            code.BarcodeSetup = _barcodeSetupRecId;

            code.insert();

            ttscommit;
        }

        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBarcodeSetupCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>EcoResProductEntityIdentifierCode</c> record which is related to the specified <c>BarcodeSetup</c> record.
    /// </summary>
    /// <param name = "_barcodeSetup">The barcode setup record.</param>
    /// <remarks>The identifier code table holds copies of the barcode setup table. Any update to the barcode setup table must result
    /// in update to the related identifier code record.</remarks>
    public static void updateBarcodeSetupCode(BarcodeSetup _barcodeSetup)
    {
        ttsbegin;

        EcoResProductEntityIdentifierCode code = EcoResProductEntityIdentifierCode::findByBarcode(_barcodeSetup.RecId, true);
        
        if (code && !code.isNameAndDescriptionSame(enum2Value(_barcodeSetup.barcodeType), _barcodeSetup.description))
        {
            code.Name = enum2Value(_barcodeSetup.barcodeType);
            code.Description = _barcodeSetup.description;
            code.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExternalReferenceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>EcoResProductEntityIdentifierCode</c> record which is related to the specified <c>ExtCodeTable</c> record.
    /// </summary>
    /// <param name = "_extCodeTable">The external code table record.</param>
    /// <remarks>The identifier code table holds copies of the external code table. Any update to the external code table must result
    /// in update to the related identifier code record.</remarks>
    public static void updateExternalReferenceCode(ExtCodeTable _extCodeTable)
    {
        ttsbegin;

        EcoResProductEntityIdentifierCode code = EcoResProductEntityIdentifierCode::findByExtCodeTable(_extCodeTable.RecId, true);
        
        if (code && !code.isNameAndDescriptionSame(_extCodeTable.ExtCodeCode, _extCodeTable.ExtCodeDescription))
        {
            code.Name = _extCodeTable.ExtCodeCode;
            code.Description = _extCodeTable.ExtCodeDescription;
            code.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNameAndDescriptionSame</Name>
				<Source><![CDATA[
    private boolean isNameAndDescriptionSame(EcoResProductEntityIdentifierCodeName _name, EcoResProductEntityIdentifierCodeDescription _description)
    {
        return this.Name == _name && this.Description == _description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record in the <c>EcoResProductEntityIdentifierCode</c> already exists.
    /// </summary>
    /// <param name = "_id">The code id.</param>
    /// <param name = "_type">The code type.</param>
    /// <returns>True if a record already exists; otherwise, false.</returns>
    public static boolean exists(EcoResProductEntityIdentifierCodeId _id, EcoResProductEntityIdentifierCodeType _type)
    {
        EcoResProductEntityIdentifierCode code;

        select firstonly RecId from code
            where code.Id == _Id
                && code.Type == _type;

        return code.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current record.
    /// </summary>
    /// <param name = "_name">The new name.</param>
    /// <param name = "_description">The new description.</param>
    public void updateRecord(
                        EcoResProductEntityIdentifierCodeName           _name,
                        EcoResProductEntityIdentifierCodeDescription    _description)
    {
        if (this.Name != _name || this.Description != _description)
        {
            ttsbegin;

            this.selectForUpdate(true);
            this.Name = _name;
            this.Description = _description;

            this.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EcoResProductEntityIdentifierCode</c> table.
    /// </summary>
    /// <param name = "_id">The code ID.</param>
    /// <param name = "_type">The code type.</param>
    /// <param name = "_selectForUpdate">True if the record needs to be selected for update; otherwise false.</param>
    /// <returns>The <c>EcoResProductEntityIdentifierCode</c> record that was found, if any.</returns>
    public static EcoResProductEntityIdentifierCode find(
                    EcoResProductEntityIdentifierCodeId         _id, 
                    EcoResProductEntityIdentifierCodeType       _type,
                    boolean                                     _selectForUpdate = false)
    {
        EcoResProductEntityIdentifierCode code;

        if (_id && _type)
        {
            code.selectForUpdate(_selectForUpdate);

            select firstonly code
                where code.Id == _id
                    && code.Type == _type;
        }
       
        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EcoResProductEntityIdentifierCode</c> table.
    /// </summary>
    /// <param name = "_type">The code type.</param>
    /// <param name = "_selectForUpdate">True if the record needs to be selected for update; otherwise false.</param>
    /// <returns>The <c>EcoResProductEntityIdentifierCode</c> record that was found, if any.</returns>
    public static EcoResProductEntityIdentifierCode findByType(EcoResProductEntityIdentifierCodeType _type, boolean _selectForUpdate = false)
    {
        EcoResProductEntityIdentifierCode code;

        if (_type)
        {
            code.selectForUpdate(_selectForUpdate);

            select firstonly code
                where code.Type == _type;
        }
       
        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EcoResProductEntityIdentifierCode</c> table.
    /// </summary>
    /// <param name = "_recId">The rec ID.</param>
    /// <param name = "_selectForUpdate">True if the record needs to be selected for update; otherwise false.</param>
    /// <returns>The <c>EcoResProductEntityIdentifierCode</c> record that was found, if any.</returns>
    public static EcoResProductEntityIdentifierCode findByRecId(EcoResProductEntityIdentifierCodeRecId _recId, boolean _selectForUpdate = false)
    {
        EcoResProductEntityIdentifierCode code;

        if (_recId)
        {
            code.selectForUpdate(_selectForUpdate);

            select firstonly code
                where code.RecId == _recId;
        }
       
        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EcoResProductEntityIdentifierCode</c> table.
    /// </summary>
    /// <param name = "_barcodeSetupRecId">The barcode setup table rec ID.</param>
    /// <param name = "_selectForUpdate">True if the record needs to be selected for update; otherwise false.</param>
    /// <returns>The <c>EcoResProductEntityIdentifierCode</c> record that was found, if any.</returns>
    public static EcoResProductEntityIdentifierCode findByBarcode(BarcodeSetupRecId _barcodeSetupRecId, boolean _selectForUpdate = false)
    {
        EcoResProductEntityIdentifierCode code;

        if (_barcodeSetupRecId)
        {
            code.selectForUpdate(_selectForUpdate);

            select firstonly code
                where code.BarcodeSetup == _barcodeSetupRecId;
        }
       
        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByExtCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EcoResProductEntityIdentifierCode</c> table.
    /// </summary>
    /// <param name = "_extCodeTableRecId">The external code table rec ID.</param>
    /// <param name = "_selectForUpdate">True if the record needs to be selected for update; otherwise false.</param>
    /// <returns></returns>
    public static EcoResProductEntityIdentifierCode findByExtCodeTable(ExtCodeTableRecId _extCodeTableRecId, boolean _selectForUpdate = false)
    {
        EcoResProductEntityIdentifierCode code;

        if (_extCodeTableRecId)
        {
            code.selectForUpdate(_selectForUpdate);

            select firstonly code
                where code.ExtCodeTable == _extCodeTableRecId;
        }
       
        return code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(EcoResProductEntityIdentifierCode, Type):
                    if (!this.isTypeValid())
                    {
                        ret = checkFailed(strFmt("@SCM:EcoResProductEntityIdentifierCodeWithSameTypeAlreadyExists", enum2Str(this.Type)));
                    }
                    break;
                default:
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTypeValid</Name>
				<Source><![CDATA[
    private boolean isTypeValid()
    {
        boolean ret = true;

        switch (this.Type)
        {
            case EcoResProductEntityIdentifierCodeType::Barcode,
                EcoResProductEntityIdentifierCodeType::ExternalReference:
                    ret = true;
                    break;
            default:
                if (!this.RecId)
                {
                    if (EcoResProductEntityIdentifierCode::findByType(this.Type).RecId)
                    {
                        ret = false;
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<Label>@SCM:EcoResProductEntityIdentifierCodes</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Id</TitleField1>
	<TitleField2>Type</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>CodeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductEntityIdentifierScope</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Id</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Id</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductEntityIdentifierCodeDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Id</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductEntityIdentifierCodeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductEntityIdentifierCodeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>EcoResProductEntityIdentifierCodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExtCodeTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExtCodeTableRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BarcodeSetup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BarcodeSetupRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Id</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExtCodeTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ExtCodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtCodeTable</Name>
					<Field>ExtCodeTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BarcodeSetup</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BarcodeSetup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BarcodeSetup</Name>
					<Field>BarcodeSetup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>