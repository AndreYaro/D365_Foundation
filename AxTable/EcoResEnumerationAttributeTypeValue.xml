<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResEnumerationAttributeTypeValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResEnumerationAttributeTypeValue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        EcoResTextValue     textValue;
        EcoResIntValue      intValue;

        _visitor.visitStart(this);

        textValue = EcoResTextValue::find(this.Value);

        // verify value has been found
        if (textValue.RecId == 0)
        {
            intValue = EcoResIntValue::find(this.Value);
            if (intValue.RecId == 0)
            {
                throw error(Error::missingRecord(tableId2name(textValue.TableId)));
            }

            intValue.accept(_visitor);
        }
        else
        {
            textValue.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the position of this record with the position of the specified record enumeration domain
    /// value.
    /// </summary>
    /// <param name="_enumAttributeTypeValue">
    /// The enumeration domain value to which to compare the current position.
    /// </param>
    /// <returns>
    /// -1 if the position of this record is less than the position of the given record enumeration domain
    /// value; 0 if the positions are the same; 1 if the position of this record is larger than the
    /// position of the given record enumeration domain value.
    /// </returns>
    /// <remarks>
    /// To compare the actual values and not the positions, use the <c>compareTo</c> method on the values
    /// that are stored in the <c>Value</c> fields.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// This record and the given record are not comparable as they do not belong in the same domain.
    /// </exception>
    public int compareTo(EcoResEnumerationAttributeTypeValue _enumAttributeTypeValue)
    {
        int ret;

        if (this.AttributeType != _enumAttributeTypeValue.AttributeType)
        {
            throw error("@SYS152881");
        }

        if (this.OrdinalNumber < _enumAttributeTypeValue.OrdinalNumber)
        {
            ret = -1;
        }
        else if (this.OrdinalNumber > _enumAttributeTypeValue.OrdinalNumber)
        {
            ret = 1;
        }
        else
        {
            ret = 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSolverValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Associates the solver values with enumeration values.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the value.
    /// </param>
    /// <param name="_solverValue">
    ///    The solver value.
    /// </param>
    /// <returns>
    ///    A solver value.
    /// </returns>
    /// <remarks>
    ///    This method is used by the Product Configuration module to associate solver values with enumeration
    ///    values.
    /// </remarks>
    public edit PCSolverValue editSolverValue(boolean _set, PCSolverValue _solverValue)
    {
        PCSolverTextValue solverTextValue;

        ttsbegin;

        solverTextValue = PCSolverTextValue::findByTextValue(this.Value, _set);

        if (_set)
        {
            if (solverTextValue.Value != queryValue(_solverValue))
            {
                //first make sure that the value is not used somewhere in a model
                if (PCModelingLibrary::isUsedAsDefaultValue(this))
                {
                    error("@SYS339490");
                }
                else
                {
                    solverTextValue.Value = _solverValue;

                    // check if the EcoResAttribute record has been committed
                    if (this.RecId <= 0)
                    {
                        error("@SYS313132");
                    }
                    else
                    {
                        solverTextValue.TextValue = this.Value;

                        if (solverTextValue.validateWrite())
                        {
                            solverTextValue.write();
                        }
                    }
                }
            }
        }
        ttscommit;

        return solverTextValue.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductConfigurationValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values to be set for use in the product configuration.
    /// </summary>
    /// <param name="_domain">
    /// A record in the <c>EcoResAttributeType</c> table.
    /// </param>
    /// <param name="_value">
    /// A record in the <c>EcoResValue</c> table.
    /// </param>
    public void initProductConfigurationValues(EcoResAttributeType _domain, EcoResValue _value)
    {
        this.AttributeType = _domain.RecId;
        this.Value  = _value.RecId;

        this.setNextOrdinalNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOfSameAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the domain of this record is the same as the domain of the given record enumeration
    ///    domain value.
    /// </summary>
    /// <param name="_enumAttributeTypeValue">
    ///    The enumeration domain value to which to compare the domain.
    /// </param>
    /// <returns>
    ///    true if the domains are the same; otherwise, false.
    /// </returns>
    public boolean isOfSameAttributeType(EcoResEnumerationAttributeTypeValue _enumAttributeTypeValue)
    {
        return (this.AttributeType == _enumAttributeTypeValue.AttributeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases the display order for an enumeration value.
    /// </summary>
    /// <remarks>
    /// The enumeration display order of the next highest enumeration value must be similarly decreased.
    /// </remarks>
    public void moveDown()
    {
        EcoResEnumerationAttributeTypeValue swapEcoResEnumerationAttributeTypeValue;

        swapEcoResEnumerationAttributeTypeValue = EcoResEnumerationAttributeTypeValue::findByOrdinalNumberHigherThan(this.AttributeType, this.OrdinalNumber, true);
        if (swapEcoResEnumerationAttributeTypeValue)
        {
            this.swapOrdinalNumber(swapEcoResEnumerationAttributeTypeValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decreases the display order for an enumeration value.
    /// </summary>
    /// <remarks>
    /// The enumeration display order of the next lowest enumeration value must be similarly increased.
    /// </remarks>
    public void moveUp()
    {
        EcoResEnumerationAttributeTypeValue swapEcoResEnumerationAttributeTypeValue;

        swapEcoResEnumerationAttributeTypeValue = EcoResEnumerationAttributeTypeValue::findByOrdinalNumberLowerThan(this.AttributeType, this.OrdinalNumber, true);
        if (swapEcoResEnumerationAttributeTypeValue)
        {
            this.swapOrdinalNumber(swapEcoResEnumerationAttributeTypeValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextOrdinalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ordinal number to the next available value for the associated <c>EcoResAttributeType</c>
    /// table.
    /// </summary>
    public void setNextOrdinalNumber()
    {
        EcoResEnumerationAttributeTypeValue tmpEnumValue;

        if (this.AttributeType == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        select maxof(OrdinalNumber) from tmpEnumValue
            where tmpEnumValue.AttributeType == this.AttributeType;

        this.OrdinalNumber = tmpEnumValue.OrdinalNumber + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapOrdinalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps the ordinal number with the ordinal number of the <c>EcoResEnumerationAttributeTypeValue</c>
    /// record that is passed to the method.
    /// </summary>
    /// <param name="_newEcoResEnumerationAttributeTypeValue">
    /// The <c>EcoResEnumerationAttributeTypeValue</c> record for which to swap original numbers.
    /// </param>
    private void swapOrdinalNumber(EcoResEnumerationAttributeTypeValue _newEcoResEnumerationAttributeTypeValue)
    {
        int newOrdinalNumber;

        ttsbegin;
        newOrdinalNumber = _newEcoResEnumerationAttributeTypeValue.OrdinalNumber;
        _newEcoResEnumerationAttributeTypeValue.OrdinalNumber = this.OrdinalNumber;
        this.OrdinalNumber = 0;
        this.selectForUpdate(true);
        this.update();
        _newEcoResEnumerationAttributeTypeValue.update();
        this.OrdinalNumber = newOrdinalNumber;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeTypeAndValue2EnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an attribute type and its value to an enumeration value.
    /// </summary>
    /// <param name="_attributeType">
    /// A record ID for an attribute type.
    /// </param>
    /// <param name="_ecoResValue">
    /// An attribute value.
    /// </param>
    /// <returns>
    /// An enumeration value.
    /// </returns>
    public static int attributeTypeAndValue2EnumValue(RefRecId _attributeType, EcoResValue _ecoResValue)
    {
        // default to invalid enum value
        int enumValue = 255;
        EcoResAttributeType attributeType =
            EcoResAttributeType::find(_attributeType);

        EcoResValue givenEcoResValue = _ecoResValue;

        EcoResEnumerationAttributeTypeValue enumTypeValue;
        EcoResValue ecoResValue;

        if (attributeType.IsEnumeration)
        {
            while select OrdinalNumber from enumTypeValue
                join ecoResValue
                where enumTypeValue.AttributeType == _attributeType
                   && enumTypeValue.Value == ecoResValue.RecId
            {
                // if enum value matches given value
                if (ecoResValue.compareTo(givenEcoResValue) == 0)
                {
                    return enumTypeValue.OrdinalNumber;
                }
            }
        }

        return enumValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAttributeValuesFromEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an attribute value record based on an enumeration value.
    /// </summary>
    /// <param name="_enumId">
    /// An enumeration value.
    /// </param>
    /// <param name="_attributeType">
    /// A record ID for an attribute type.
    /// </param>
    public static void createAttributeValuesFromEnum(EnumId _enumId, RefRecId _attributeType)
    {
        DictEnum dictEnum = new DictEnum(_enumId);
        EcoResTextValue textValue;
        EcoResEnumerationAttributeTypeValue enumerationValues;
        int i;

        ttsbegin;
        for (i=0; i<dictEnum.values(); i++)
        {
            int ordinalNumber = dictEnum.index2Value(i);
            if (EcoResEnumerationAttributeTypeValue::findByOrdinalNumber(_attributeType, ordinalNumber).RecId == 0)
            {
                textValue.TextValue = dictEnum.index2Symbol(i);
                textValue.insert();
                enumerationValues.AttributeType = _attributeType;
                enumerationValues.Value = textValue.RecId;
                enumerationValues.OrdinalNumber = ordinalNumber;
                enumerationValues.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>EcoResEnumerationAttributeTypeValue</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResEnumerationAttributeTypeValue::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForAttributeTypeWithSolverValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the specified attribute type has an attribute type value with solver value provided.
    /// </summary>
    /// <param name = "_attributeTypeRecId">
    ///    The record ID of the attribute type to check.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existForAttributeTypeWithSolverValue(RefRecId _attributeTypeRecId)
    {
        EcoResEnumerationAttributeTypeValue enumAttributeTypeValue;
        PCSolverTextValue solverTextValue;

        select firstonly RecId from enumAttributeTypeValue 
            where enumAttributeTypeValue.AttributeType == _attributeTypeRecId
            exists join solverTextValue where solverTextValue.TextValue == enumAttributeTypeValue.Value;

        return enumAttributeTypeValue.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResEnumerationAttributeTypeValue</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResEnumerationAttributeTypeValue</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResEnumerationAttributeTypeValue find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResEnumerationAttributeTypeValue    ecoResEnumerationAttributeTypeValue;

        ecoResEnumerationAttributeTypeValue.selectForUpdate(_forupdate);

        if (_recId)
        {
            select firstonly ecoResEnumerationAttributeTypeValue
                where ecoResEnumerationAttributeTypeValue.RecId == _recId;
        }

        return ecoResEnumerationAttributeTypeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOrdinalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResEnumerationAttributeTypeValue</c> table by domain and
    /// ordinal number.
    /// </summary>
    /// <param name="_ecoResAttributeTypeRecId">
    /// The record ID of the <c>ecoResAttributeType</c> record for which to find the enumeration value.
    /// </param>
    /// <param name="_ordinalNumber">
    /// The ordinal number for which to find the enumeration value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>EcoResEnumerationAttributeTypeValue</c> table if found; otherwise, an empty
    /// buffer.
    /// </returns>
    public static EcoResEnumerationAttributeTypeValue findByOrdinalNumber(RefRecId _ecoResAttributeTypeRecId, int _ordinalNumber,
        boolean _forUpdate = false)
    {
        EcoResEnumerationAttributeTypeValue ecoResEnumerationAttributeTypeValue;

        ecoResEnumerationAttributeTypeValue.selectForUpdate(_forUpdate);

        select firstonly ecoResEnumerationAttributeTypeValue
            where ecoResEnumerationAttributeTypeValue.AttributeType == _ecoResAttributeTypeRecId
                && ecoResEnumerationAttributeTypeValue.OrdinalNumber == _ordinalNumber;

        return ecoResEnumerationAttributeTypeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOrdinalNumberHigherThan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next <c>EcoResEnumerationAttributeTypeValue</c> record after the given ordinal number for
    /// the given domain.
    /// </summary>
    /// <param name="_ecoResAttributeTypeRecId">
    /// The record ID of the <c>ecoResAttributeType</c> record for which to find the enumeration value.
    /// </param>
    /// <param name="_ordinalNumber">
    /// The ordinal number to find the next enumeration value for.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>EcoResEnumerationAttributeTypeValue</c> table if found; otherwise, an empty
    /// buffer.
    /// </returns>
    public static EcoResEnumerationAttributeTypeValue findByOrdinalNumberHigherThan(RefRecId _ecoResAttributeTypeRecId, int _ordinalNumber,
        boolean _forUpdate = false)
    {
        EcoResEnumerationAttributeTypeValue ecoResEnumerationAttributeTypeValue;

        ecoResEnumerationAttributeTypeValue.selectForUpdate(_forUpdate);

        select firstonly ecoResEnumerationAttributeTypeValue
            order by ecoResEnumerationAttributeTypeValue.OrdinalNumber asc
            where ecoResEnumerationAttributeTypeValue.AttributeType == _ecoResAttributeTypeRecId
                && ecoResEnumerationAttributeTypeValue.OrdinalNumber > _ordinalNumber;

        return ecoResEnumerationAttributeTypeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOrdinalNumberLowerThan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous <c>EcoResEnumerationAttributeTypeValue</c> record after the given ordinal number
    /// for the given domain.
    /// </summary>
    /// <param name="_ecoResAttributeTypeRecId">
    /// The record ID of the <c>ecoResAttributeType</c> record for which to find the enumeration value.
    /// </param>
    /// <param name="_ordinalNumber">
    /// The ordinal number for which to find the previous enumeration value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>EcoResEnumerationAttributeTypeValue</c> table if found; otherwise, an empty
    /// buffer.
    /// </returns>
    public static EcoResEnumerationAttributeTypeValue findByOrdinalNumberLowerThan(RefRecId _ecoResAttributeTypeRecId, int _ordinalNumber,
        boolean _forUpdate = false)
    {
        EcoResEnumerationAttributeTypeValue ecoResEnumerationAttributeTypeValue;

        ecoResEnumerationAttributeTypeValue.selectForUpdate(_forUpdate);

        select firstonly ecoResEnumerationAttributeTypeValue
            order by ecoResEnumerationAttributeTypeValue.OrdinalNumber desc
            where ecoResEnumerationAttributeTypeValue.AttributeType == _ecoResAttributeTypeRecId
                && ecoResEnumerationAttributeTypeValue.OrdinalNumber < _ordinalNumber;

        return ecoResEnumerationAttributeTypeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicate</Name>
				<Source><![CDATA[
	/// <summary>
    ///   Check if there is any duplicate enumeration type value.
    /// </summary>
    /// <param name = "_textValue">
    ///   The enumeration value string.
	/// </param>
    /// <returns>
    ///  true if there is duplicate enumeration type value; else, false.
	/// </returns>
    public boolean checkDuplicate(str _textValue)
    {
        boolean ret = true;

        if (this.existDuplicate(_textValue))
        {
            ret = checkFailed("@KB_4341763:DuplicateAttributeEnumerationValueMessage");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Check if any duplicate enumeration type value exists.
    /// </summary>
    /// <param name = "_textValue">
    ///   The enumeration value string.
	/// </param>
    /// <returns>
    ///  true if there is duplicate enumeration type value; else, false.
	/// </returns>
	internal boolean existDuplicate(str _textValue)
    {
        EcoResEnumerationAttributeTypeValue enumTypeValueDuplicate;
        EcoResTextValue                     enumValueDuplicate;

        select firstonly RecId from enumTypeValueDuplicate
            where enumTypeValueDuplicate.AttributeType == this.AttributeType
               && enumTypeValueDuplicate.RecId         != this.RecId
            exists join enumValueDuplicate
                where enumValueDuplicate.RecId       == enumTypeValueDuplicate.Value
                   && enumValueDuplicate.TextValue   == _textValue;

        return (enumTypeValueDuplicate.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS152862</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResAttributeType</FormRef>
	<Label>@SYS152861</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Value</TitleField1>
	<TitleField2>OrdinalNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>AttributeTypeValue</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResValue</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrdinalNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrdinalNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS333319</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OrdinalNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS40283</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AttributeTypeOrdinalNumber</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AttributeType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrdinalNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AttributeTypeValue</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AttributeType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Value</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AttributeType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttributeType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>AttributeType</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>Domain_EcoResEnumerationAttributeTypeValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeType</Name>
					<Field>AttributeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Value</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Value</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Value_EcoResEnumerationAttributeTypeValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Value</Name>
					<Field>Value</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>