<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustEntryCertificateJour_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustEntryCertificateJour_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method shows if the certificate can be deleted.
    /// </summary>
    /// <returns>
    ///    True if the certificate can be deleted, false othewise.
    /// </returns>
    boolean canBeDeleted()
    {
        return   this.IsThirdParty
            && ! this.docAttached()
            && (select firstonly RecId from CustEntryCertificateInvoiceLink_W
                    where CustEntryCertificateInvoiceLink_W.EntryCertificateJourRefRecId == this.RecId).RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDocumentDesc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the description of the source document for the current certificate.
    /// </summary>
    /// <returns>
    ///    The description of the source document for the current certificate.
    /// </returns>

    public Description deliveryDocumentDesc()
    {
        switch (this.SourceRefTableId)
        {
            case tableNum(CustPackingSlipJour):
                return strfmt("@SYS76498", "@SYS11549", CustPackingSlipJour::findRecId(this.SourceRefRecId).PackingSlipId);

            case tableNum(custInvoiceJour):
                return strfmt("@SYS76498", "@SYS14204", CustInvoiceJour::findRecId(this.SourceRefRecId).InvoiceId);

            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>docAttached</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method shows if there are any documents attached to the certificate.
    /// </summary>
    /// <returns>
    ///    NoYes::Yes, if there are documents attached to the certificate, NoYes::No othewise.
    /// </returns>

    display EntryCertificateDocAttached_W docAttached()
    {
        DocuRef     docuRef;

        select firstonly RecId from docuRef
            where docuRef.RefCompanyId  == this.dataAreaId
               && docuRef.RefTableId    == this.TableId
               && docuRef.RefRecId      == this.RecId;

        return docuRef.RecId == 0 ? NoYes::No : NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryEntryCertificateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the query which can be used to run through all the lines of the current certificate.
    /// </summary>
    /// <returns>
    ///    The query which can be used to run through all the lines of the current certificate.
    /// </returns>
    Query queryEntryCertificateTrans()
    {
        Query   tradeLoopTrans;

        tradeLoopTrans = new TradeLoopTrans(this,tablenum(CustEntryCertificateTrans_W)).buildQuery();

        return tradeLoopTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns the language in which the report should be shown.
    /// </summary>
    /// <returns>
    ///    The language in which the report should be shown.
    /// </returns>
    public LanguageId reportLanguageId()
    {
        container   con = ['de'];

        return  confind(con, this.LanguageId) ? this.LanguageId : 'en-us';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        ret = ret && this.canBeDeleted();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the entry certificate based on the customer invoice.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///    Customer invoice based on which the certificate has to be created.
    /// </param>
    /// <returns>
    ///    The ID of the created certificate.
    /// </returns>
    public static EntryCertificateId_W constructFromInvoice(CustInvoiceJour  _custInvoiceJour)
    {
        #ISOCountryRegionCodes

        CustEntryCertificateJour_W      entryCertificateJour;
        CustEntryCertificateTrans_W     entryCertificateTrans;
        CustInvoiceTrans                custInvoiceTrans;
        QueryRun                        custInvoiceTransQuery;
        Qty                             qty;
        boolean                         allQtyIsIncluded = true;
        SysInfoAction_Formrun           sysInfoAction_Formrun;

        const str LocalizationFeatureReference = 'EUR-00009';
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());

        ttsbegin;

        custInvoiceTransQuery = new QueryRun(_custInvoiceJour.queryCustInvoiceTrans());

        while (custInvoiceTransQuery.next())
        {
            custInvoiceTrans = custInvoiceTransQuery.get(tablenum(CustInvoiceTrans));

            if (custInvoiceTrans.inventTable().ItemType == ItemType::Item)
            {
                qty = min(CustEntryCertificateJour_W::getAvailPhysicalQty(custInvoiceTrans.InventTransId),
                          custInvoiceTrans.Qty);

                if (qty)
                {
                    if (! entryCertificateJour)
                    {
                        entryCertificateJour.clear();
                        entryCertificateJour.initValue();
                        entryCertificateJour.IsThirdParty           = NoYes::No;
                        entryCertificateJour.EntryCertificateId     = NumberSeq::newGetNum(CustParameters::numRefEntryCertificateId_W()).num();
                        entryCertificateJour.SourceRefTableId       = _custInvoiceJour.TableId;
                        entryCertificateJour.SourceRefRecId         = _custInvoiceJour.RecId;
                        entryCertificateJour.CustAccount            = _custInvoiceJour.OrderAccount;
                        entryCertificateJour.LanguageId             = _custInvoiceJour.LanguageId;
                        entryCertificateJour.DeliveryPostalAddress  = _custInvoiceJour.DeliveryPostalAddress;
                        entryCertificateJour.InvoiceId              = _custInvoiceJour.InvoiceId;
                        entryCertificateJour.SalesId                = _custInvoiceJour.SalesId;
                        entryCertificateJour.insert();
                    }

                    if (qty != custInvoiceTrans.Qty)
                    {
                        allQtyIsIncluded = false;
                    }

                    entryCertificateTrans.clear();
                    entryCertificateTrans.initValue();
                    entryCertificateTrans.initFromEntryCertificateJour(entryCertificateJour);
                    entryCertificateTrans.ItemId        = custInvoiceTrans.ItemId;
                    entryCertificateTrans.Name          = custInvoiceTrans.Name;
                    entryCertificateTrans.Qty           = qty;
                    entryCertificateTrans.SalesUnit     = custInvoiceTrans.SalesUnit;
                    entryCertificateTrans.InventTransId = custInvoiceTrans.InventTransId;
                    entryCertificateTrans.insert();
                }
            }
        }

        ttscommit;

        if (entryCertificateJour)
        {
            sysInfoAction_Formrun = SysInfoAction_Formrun::newFormname(formstr(CustEntryCertificateJour_W));
            sysInfoAction_Formrun.parmCallerBuffer(entryCertificateJour);
            info(strfmt("@SYS4004139", entryCertificateJour.EntryCertificateId), '', sysInfoAction_Formrun);
        }
        else
        {
            warning(strfmt("@SYS4004141", _custInvoiceJour.InvoiceId));
        }

        if (! allQtyIsIncluded)
        {
            warning(strfmt("@SYS4004142", entryCertificateJour.EntryCertificateId, _custInvoiceJour.InvoiceId));
        }

        return entryCertificateJour.EntryCertificateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the entry certificate based on the customer packing slip.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    ///    Customer packing slip based on which the certificate has to be created.
    /// </param>
    /// <returns>
    ///    The ID of the created certificate.
    /// </returns>
    public static EntryCertificateId_W constructFromPackingSlip(CustPackingSlipJour    _custPackingSlipJour)
    {
        #ISOCountryRegionCodes

        CustEntryCertificateJour_W  entryCertificateJour;
        CustEntryCertificateTrans_W entryCertificateTrans;
        CustPackingSlipTrans        custPackingSlipTrans;
        QueryRun                    custPackingSlipTransQuery;
        Qty                         qty;
        SysInfoAction_Formrun       sysInfoAction_Formrun;

        const str LocalizationFeatureReference = 'EUR-00009';
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());

        ttsbegin;

        custPackingSlipTransQuery = new QueryRun(_custPackingSlipJour.queryCustPackingSlipTrans());

        while (custPackingSlipTransQuery.next())
        {
            custPackingSlipTrans = custPackingSlipTransQuery.get(tablenum(CustPackingSlipTrans));

            if (custPackingSlipTrans.inventTable().ItemType == ItemType::Item)
            {
                qty = min(CustEntryCertificateJour_W::getAvailPhysicalQty(custPackingSlipTrans.InventTransId),
                          custPackingSlipTrans.Qty);

                if (qty)
                {
                    if (! entryCertificateJour)
                    {
                        entryCertificateJour.clear();
                        entryCertificateJour.initValue();
                        entryCertificateJour.IsThirdParty           = NoYes::No;
                        entryCertificateJour.EntryCertificateId     = NumberSeq::newGetNum(CustParameters::numRefEntryCertificateId_W()).num();
                        entryCertificateJour.SourceRefTableId       = _custPackingSlipJour.TableId;
                        entryCertificateJour.SourceRefRecId         = _custPackingSlipJour.RecId;
                        entryCertificateJour.CustAccount            = _custPackingSlipJour.OrderAccount;
                        entryCertificateJour.LanguageId             = _custPackingSlipJour.LanguageId;
                        entryCertificateJour.DeliveryPostalAddress  = _custPackingSlipJour.DeliveryPostalAddress;
                        entryCertificateJour.PackingSlipId          = _custPackingSlipJour.PackingSlipId;
                        entryCertificateJour.SalesId                = _custPackingSlipJour.SalesId;
                        entryCertificateJour.insert();
                    }

                    entryCertificateTrans.clear();
                    entryCertificateTrans.initValue();
                    entryCertificateTrans.initFromEntryCertificateJour(entryCertificateJour);
                    entryCertificateTrans.ItemId        = custPackingSlipTrans.ItemId;
                    entryCertificateTrans.Name          = custPackingSlipTrans.Name;
                    entryCertificateTrans.Qty           = qty;
                    entryCertificateTrans.SalesUnit     = custPackingSlipTrans.SalesUnit;
                    entryCertificateTrans.InventTransId = custPackingSlipTrans.InventTransId;
                    entryCertificateTrans.insert();
                }
            }
        }

        ttscommit;

        if (entryCertificateJour)
        {
            sysInfoAction_Formrun = SysInfoAction_Formrun::newFormname(formstr(CustEntryCertificateJour_W));
            sysInfoAction_Formrun.parmCallerBuffer(entryCertificateJour);
            info(strfmt("@SYS4004139", entryCertificateJour.EntryCertificateId), '', sysInfoAction_Formrun);
        }
        else
        {
            warning(strfmt("@SYS4004140", _custPackingSlipJour.PackingSlipId));
        }

        return entryCertificateJour.EntryCertificateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryCertificateCountryRegionCodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns container with ISO country region codes in which entry certificate functionality is supported.
    /// </summary>
    /// <returns>
    ///    Container with ISO country region codes in which entry certificate functionality is supported.
    /// </returns>
    static container entryCertificateCountryRegionCodes()
    {
        #ISOCountryRegionCodes

        return [#isoAT, #isoBE, #isoCZ, #isoDK, #isoEE, #isoFI, #isoFR, #isoDE, #isoHU, #isoIE,
                #isoIT, #isoLV, #isoLT, #isoNL, #isoPL, #isoES, #isoSE, #isoGB, #isoIN];
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>CustEntryCertificateJour_W</c> table.
    /// </summary>
    /// <param name="_entryCertificateId">
    ///    ID of the certificate to find.
    /// </param>
    /// <param name="_custAccount">
    ///    Customer account.
    /// </param>
    /// <param name="_update">
    ///    Shows if the record should be selected for update.
    /// </param>
    /// <returns>
    ///    The record found in the <c>CustEntryCertificateJour_W</c> table.
    /// </returns>
    public static CustEntryCertificateJour_W find(EntryCertificateId_W _entryCertificateId, CustAccount _custAccount, boolean _update = false)
    {
        CustEntryCertificateJour_W  entryCertificateJour;
        entryCertificateJour.selectForUpdate(_update);

        if (_entryCertificateId && _custAccount)
        {
            select firstonly entryCertificateJour
                where entryCertificateJour.EntryCertificateId == _entryCertificateId
                   && entryCertificateJour.CustAccount == _custAccount;
        }

        return entryCertificateJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>CustEntryCertificateJour_W</c> table by record id.
    /// </summary>
    /// <param name="_recId">
    ///    ID of the certificate to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    Shows if the record should be selected for update.
    /// </param>
    /// <returns>
    ///    The record found in the <c>CustEntryCertificateJour_W</c> table.
    /// </returns>
    static CustEntryCertificateJour_W findRecId(recId    _recId,
                                                boolean  _forUpdate = false)
    {
        CustEntryCertificateJour_W  entryCertificateJour;

        if (_recId)
        {
            entryCertificateJour.selectForUpdate(_forUpdate);

            select firstonly entryCertificateJour
                where entryCertificateJour.RecId == _recId;
        }
        return entryCertificateJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailPhysicalQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the available quantity which can be included in the certificate.
    /// </summary>
    /// <param name="_inventTransId">
    ///    <c>LOT id</c> of the sales order line.
    /// </param>
    /// <returns>
    ///    The available quantity which can be included in the certificate.
    /// </returns>
    public static Qty getAvailPhysicalQty(InventTransId     _inventTransId)
    {
        Qty deliveredQty = (select sum(QtyPhysical) from CustInvoiceTrans
            where CustInvoiceTrans.InventTransId == _inventTransId).QtyPhysical;

        deliveredQty += (select sum(Qty) from CustPackingSlipTrans
            where CustPackingSlipTrans.InventTransId == _inventTransId).Qty;

        CustEntryCertificateJour_W  entryCertificateJour;
        CustEntryCertificateTrans_W entryCertificateTrans;
        select sum(Qty) from entryCertificateTrans
            where entryCertificateTrans.InventTransId == _inventTransId
        exists join entryCertificateJour
            where entryCertificateJour.RecId    == entryCertificateTrans.EntryCertificateJourRefRecId
               && entryCertificateJour.Status   != EntryCertificateStatus_W::Cancelled;

        return deliveredQty - entryCertificateTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInvoiceIdQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates query for lookup of invoices to which the <c>Entry certificate journal</c> may be linked.
    /// </summary>
    /// <param name = "_entryCertificateJour">
    ///    The <c>Entry certificate journal</c> which is being linked to the invoice.
    /// </param>
    /// <returns>
    ///    <c>Query</c> with records to which <c>Entry certificate journal</c> was linked.
    /// </returns>
    public static Query lookupInvoiceIdQuery(CustEntryCertificateJour_W _entryCertificateJour)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsCustInvoiceJour = query.addDataSource(tableNum(CustInvoiceJour));
        qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, InvoiceAccount)).value(queryValue(_entryCertificateJour.CustAccount));

        QueryBuildDataSource qbdsCustInvoiceJour_W = qbdsCustInvoiceJour.addDataSource(tableNum(CustInvoiceJour_W));
        qbdsCustInvoiceJour_W.relations(true);
        qbdsCustInvoiceJour_W.joinMode(JoinMode::ExistsJoin);
        qbdsCustInvoiceJour_W.addRange(fieldNum(CustInvoiceJour_W, EntryCertificateReceiptStatus_W)).value(queryValue(EntryCertificateReceiptStatus_W::Required));

        QueryBuildDataSource qbdsCustInvoiceTrans = qbdsCustInvoiceJour.addDataSource(tableNum(CustInvoiceTrans));
        qbdsCustInvoiceTrans.relations(true);
        qbdsCustInvoiceTrans.joinMode(JoinMode::ExistsJoin);

        if (!_entryCertificateJour.IsThirdParty)
        {
            QueryBuildDataSource qbdsEntryCertificateTrans = qbdsCustInvoiceTrans.addDataSource(tableNum(CustEntryCertificateTrans_W));
            qbdsEntryCertificateTrans.joinMode(JoinMode::ExistsJoin);
            qbdsEntryCertificateTrans.addLink(fieldNum(CustInvoiceTrans, InventTransId), fieldNum(CustEntryCertificateTrans_W, InventTransId));
            qbdsEntryCertificateTrans.addRange(fieldNum(CustEntryCertificateTrans_W, EntryCertificateJourRefRecId)).value(queryValue(_entryCertificateJour.RecId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs lookup of invoices to which the <c>Entry certificate journal</c> may be linked.
    /// </summary>
    /// <param name = "_ctrl">
    ///    FormStringControl on which the lookup has to be overridden.
    /// </param>
    /// <param name = "_entryCertificateJour">
    ///    The <c>Entry certificate journal</c> which is being linked to the invoice.
    /// </param>
    /// <returns>
    ///    <c>CustInvoiceJour</c> record to which <c>Entry certificate journal</c> was linked.
    /// </returns>
    public static CustInvoiceJour lookupInvoiceId(FormStringControl             _ctrl,
                                                  CustEntryCertificateJour_W    _entryCertificateJour)
    {
        CustInvoiceJour custInvoiceJour;

        TableLookup_RU tableLookup = TableLookup_RU::newParameters(tableNum(CustInvoiceJour), _ctrl);
        tableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceId), true);
        tableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceDate));
        tableLookup.parmQuery(CustEntryCertificateJour_W::lookupInvoiceIdQuery(_entryCertificateJour));

        tableLookup.performFormLookup();
        if (tableLookup.getFoundCursor())
        {
            custInvoiceJour = tableLookup.getFoundCursor();
        }
        return custInvoiceJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>AT,BE,CZ,DK,EE,FI,FR,DE,HU,IE,IT,LV,LT,NL,PL,ES,SE,GB</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4004111</DeveloperDocumentation>
	<FormRef>CustEntryCertificateJour_W</FormRef>
	<Label>@SYS4004110</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>EntryCertificateId</TitleField1>
	<TitleField2>CustAccount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>IdAccountIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>IdAccountIdx</PrimaryIndex>
	<ReplacementKey>IdAccountIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntryCertificateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsThirdParty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntryCertificateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsThirdParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntryCertificateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingSlipId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>docAttached</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntryCertificateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EntryCertificateId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@SYS14204</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsThirdParty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsThirdPartyEntryCertificate_W</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingSlipId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@SYS11549</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EntryCertificateStatus_W</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IdAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EntryCertificateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRefTableId</Name>
					<Field>SourceRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRefRecId</Name>
					<Field>SourceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPackingSlipJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPackingSlipJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRefTableId</Name>
					<Field>SourceRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRefRecId</Name>
					<Field>SourceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_EntryCertificateJour_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>