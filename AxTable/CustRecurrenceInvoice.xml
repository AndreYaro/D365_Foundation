<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRecurrenceInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustRecurrenceInvoice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementDocumentTitle_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns document title for selected agreement
    /// </summary>
    /// <returns>
    /// Document title for selected agreement
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display AgreementDocumentTitle agreementDocumentTitle_RU()
    {
        return SalesAgreementHeaderExt_RU::salesAgreementHeader(this.AgreementHeaderExt_RU).DocumentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs checks of agreement selected
    /// </summary>
    /// <returns>
    /// True if check suceed;otherwise false
    /// </returns>
    public boolean checkAgreement_RU()
    {
        SalesAgreementHeader salesAgreementHeader;
        boolean ok = true;

        if (this.AgreementHeaderExt_RU)
        {
            salesAgreementHeader = SalesAgreementHeaderExt_RU::salesAgreementHeader(this.AgreementHeaderExt_RU);

            if (!salesAgreementHeader.canReleaseAgreement())
            {
                ok = checkFailed("@SYS103075");
            }

            if (salesAgreementHeader.CustAccount != this.CustTable)
            {
                ok = checkFailed(strFmt("@SYS112224",
                    salesAgreementHeader.SalesNumberSequence, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active status of the <c>CustRecurrenceInvoice</c> table.
    /// </summary>
    /// <param name="_custRecurrenceInvoice">
    /// The <c>CustRecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The active status of the <c>CustRecurrenceInvoice</c> table.
    /// </returns>
    public display CustRecurrenceIsActive displayIsActive(CustRecurrenceInvoice _custRecurrenceInvoice)
    {
        // Due to the fact that the column name of the Active field is named IsStopped, it is necessary
        // to "flip" the value since they have different meanings. This change came in too late in the
        // Ax 2012 release to absorb the data model change.

        return _custRecurrenceInvoice.IsStopped ? NoYesCombo::No : NoYesCombo::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Edits the active status of the <c>CustRecurrenceInvoice</c> table.
    /// </summary>
    /// <param name="_set">
    /// True if the value is to be persisted, false otherwise.
    /// </param>
    /// <param name="_custRecurrenceInvoice">
    /// The <c>CustRecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The active status of the <c>CustRecurrenceInvoice</c> table.
    /// </returns>
    public edit CustRecurrenceIsActive editIsActive(boolean _set, CustRecurrenceIsActive _isStopped)
    {
        // Due to the fact that the column name of the Active field is named IsStopped, it is necessary
        // to "flip" the value since they have different meanings. This change came in too late in the
        // Ax 2012 release to absorb the data model change.

        if (_set)
        {
            this.IsStopped = _isStopped ? NoYesCombo::No : NoYesCombo::Yes;
        }

        return this.displayIsActive(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLastGenerationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last generation date of the <c>CustRecurrenceInvoice</c> setup table.
    /// </summary>
    /// <param name="_custRecurrenceInvoice">
    /// The <c>CustRecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The last generation date of <c>CustRecurrenceInvoice</c> setup table.
    /// </returns>
    public display TransDate displayLastGenerationDate(CustRecurrenceInvoice _custRecurrenceInvoice)
    {
        RecurrenceInvoice recurrenceInvoice;
        TransDate maxRecurrenceInvoiceDate, maxLastGenerationDate;
        CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;

        maxLastGenerationDate = CustRecurrenceInvoice::recurrenceInvoiceLastGenerationDate(_custRecurrenceInvoice);

        select RecId from recurrenceInvoice
            where recurrenceInvoice.CustRecurrenceInvoice == _custRecurrenceInvoice.RecId &&
            recurrenceInvoice.RecurrenceInvoiceDate == maxLastGenerationDate
        join InvoiceDate from custRecurrenceInvoiceGroup
            where custRecurrenceInvoiceGroup.RecId == recurrenceInvoice.CustRecurrenceInvoiceGroup &&
            custRecurrenceInvoiceGroup.GenerationDate == recurrenceInvoice.RecurrenceInvoiceDate;

        maxRecurrenceInvoiceDate = custRecurrenceInvoiceGroup.InvoiceDate;

        return maxRecurrenceInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNextGenerationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next generation date of <c>CustRecurrenceInvoice</c> setup table.
    /// </summary>
    /// <param name="_custRecurrenceInvoice">
    /// The <c>CustRecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The next generation date of <c>CustRecurrenceInvoice</c> setup table.
    /// </returns>
    public display TransDate displayNextGenerationDate(CustRecurrenceInvoice _custRecurrenceInvoice)
    {
        return CustRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(_custRecurrenceInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalNumberOfInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total number of invoices generated for a <c>CustRecurrenceInvoice</c> setup table.
    /// </summary>
    /// <param name="_custRecurrenceInvoice">
    /// The <c>CustRecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The total recurrence invoices.
    /// </returns>
    public display Counter displayTotalNumberOfInvoice(CustRecurrenceInvoice _custRecurrenceInvoice)
    {
        return CustRecurrenceInvoice::numOfRecurrenceInvoice(_custRecurrenceInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesAgreementHeader_RU</Name>
				<Source><![CDATA[
    private void initFromSalesAgreementHeader_RU(SalesAgreementHeader _salesAgreementHeader)
    {
        this.CurrencyCode = _salesAgreementHeader.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the standard <c>modifiedField</c> method and performs additional initialization.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field that has been modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        super(_fieldId);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            switch (_fieldId)
            {
                case fieldNum(CustRecurrenceInvoice, CustTable):
                    this.AgreementHeaderExt_RU = 0;
                    break;
                case fieldNum(CustRecurrenceInvoice, AgreementHeaderExt_RU):
                    this.setAgreement_RU();
                    break;
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes record with data from agreement
    /// </summary>
    public void setAgreement_RU()
    {
        if (this.AgreementHeaderExt_RU)
        {
            this.initFromSalesAgreementHeader_RU(
                SalesAgreementHeaderExt_RU::salesAgreementHeader(this.AgreementHeaderExt_RU));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean valid = super();

        if (valid && CustRecurrenceInvoice::numOfRecurrenceInvoice(this) > 0)
        {
            valid = checkFailed("@SYS318899");
        }
        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        AmountCur totalRecurrenceInvoiceAmount;
        AmountCur totalTemplateLineAmount;
        DialogButton dialogButton;
        boolean valid = super(_fieldIdToCheck);
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        if (valid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CustRecurrenceInvoice, StartDate):
                    if (CustRecurrenceInvoice::numOfRecurrenceInvoice(this) > 0)
                    {
                        valid = checkFailed("@SYS318898");
                    }
                    break;

                case fieldNum(CustRecurrenceInvoice, EndDate):
                    if (this.EndDate != dateNull() && this.EndDate <= CustRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(this))
                    {
                        valid = checkFailed("@SYS328739");
                    }
                    else if (this.EndDate != dateNull() && this.EndDate < CustRecurrenceInvoice::getNextGenerationDate(this.StartDate, this.Interval * 2, this.RecurrencePattern) && hasGUI())
                    {
                        dialogButton = Box::yesNo("@SYS318896", DialogButton::No);

                        valid = dialogButton == DialogButton::Yes;
                    }
                    else if (this.IsStopped == NoYesCombo::Yes && this.EndDate >= CustRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(this))
                    {
                        this.IsStopped = NoYesCombo::No;
                    }
                    break;

                case fieldNum(CustRecurrenceInvoice, CeilingAmount):
                    totalRecurrenceInvoiceAmount = CustRecurrenceInvoice::sumRecurrenceInvoiceAmount(this, this.CurrencyCode);
                    totalTemplateLineAmount = CustInvoiceLineTemplate::totalTemplateAmountIncTax(this.CustInvoiceTemplate);

                    if (this.CeilingAmount && this.CeilingAmount < totalTemplateLineAmount)
                    {
                        valid = checkFailed("@SYS327568");
                    }
                    else if (this.CeilingAmount && totalRecurrenceInvoiceAmount && this.CeilingAmount <= totalRecurrenceInvoiceAmount)
                    {
                        valid = checkFailed(strFmt("@SYS327567", totalRecurrenceInvoiceAmount));
                    }
                    break;
                // <GEERU>
                case fieldNum(CustRecurrenceInvoice, AgreementHeaderExt_RU):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        valid = this.checkAgreement_RU();
                    }
                    break;
                // </GEERU>
            }
        }
        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record occurs in the <c>CustRecurrenceInvoice</c> table.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _custRecurrenceInvoiceRecId)
    {
        boolean exist = true;

        if (!CustRecurrenceInvoice::exist(_custRecurrenceInvoiceRecId))
        {
            exist = checkFailed(strFmt(CustRecurrenceInvoice::txtNotExist(), _custRecurrenceInvoiceRecId));
        }

        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>CustRecurrenceInvoice</c> table exists.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceRecId">
    /// The <c>RecId</c> value of the <c>CustRecurrenceInvoice</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _custRecurrenceInvoiceRecId)
    {
        return (select firstonly RecId from custRecurrenceInvoice
                 where custRecurrenceInvoice.RecId == _custRecurrenceInvoiceRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>CustRecurrenceInvoice</c> table.
    /// </summary>
    /// <param name="_custRecurrenceInvoiceRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to select the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>CustRecurrenceInvoice</c> table buffer.
    /// </returns>
    public static CustRecurrenceInvoice find(
            recId _custRecurrenceInvoiceRecId,
            boolean _forupdate = false,
            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustRecurrenceInvoice custRecurrenceInvoice;

        custRecurrenceInvoice.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custRecurrenceInvoice.concurrencyModel(_concurrencyModel);
        }

        select firstonly custRecurrenceInvoice
            where custRecurrenceInvoice.RecId == _custRecurrenceInvoiceRecId;

        return custRecurrenceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntervalLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the interval label for a given RecurrencePattern
    /// </summary>
    /// <param name="_recurrencePattern">
    /// A recurrence pattern
    /// </param>
    /// <returns>
    /// A string that identifies the interval.
    /// </returns>
    public static LabelString getIntervalLabel(RecurrencePattern _recurrencePattern)
    {
        switch (_recurrencePattern)
        {
            case RecurrencePattern::Daily:
                return "@SYS314611";
            case RecurrencePattern::Weekly:
                return "@SYS314612";
            case RecurrencePattern::Monthly:
                return "@SYS314613";
            case RecurrencePattern::Yearly:
                return "@SYS314614";
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextGenerationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next generation date based on interval and recurrence pattern.
    /// </summary>
    /// <param name="_startDate">
    /// The next generation date of <c>CustRecurrenceInvoice</c> record.
    /// </param>
    /// <param name="_interval">
    /// The interval of <c>CustRecurrenceInvoice</c> record.
    /// </param>
    /// <param name="_recurrencePattern">
    /// The recurrence pattern of the <c>CustRecurrenceInvoice</c> record.
    /// </param>
    /// <returns>
    /// The next generation date of the <c>CustRecurrenceInvoice</c> record.
    /// </returns>
    public static TransDate getNextGenerationDate(TransDate _startDate,
                                                    Integer _interval,
                                                    RecurrencePattern _recurrencePattern)
    {
        utcdatetime generationDate = DateTimeUtil::newDateTime(_startDate, 0);
        utcdatetime nextGenerationDate;

        switch (_recurrencePattern)
        {
            case RecurrencePattern::Daily:
                nextGenerationDate = DateTimeUtil::addDays(generationDate, _interval);
                break;
            case RecurrencePattern::Weekly:
                nextGenerationDate = DateTimeUtil::addDays(generationDate, _interval * 7);
                break;
            case RecurrencePattern::Monthly:
                nextGenerationDate = DateTimeUtil::addMonths(generationDate, _interval);
                break;
            case RecurrencePattern::Yearly:
                nextGenerationDate = DateTimeUtil::addYears(generationDate, _interval);
                break;
        }

        return DateTimeUtil::date(nextGenerationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfRecurrenceInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the total number of recurrence generated for a single <c>CustRecurrenceInvoice</c> invoice setup.
    /// </summary>
    /// <param name="_custRecurrenceInvoice">
    /// The record id of <c>CustRecurrenceInvoice</c> table.
    /// </param>
    /// <returns>
    /// The total recurrence invoices.
    /// </returns>
    public static Counter numOfRecurrenceInvoice(CustRecurrenceInvoice _custRecurrenceInvoice)
    {
        int result = 0;

        if (_custRecurrenceInvoice)
        {
            result = any2int((select count(RecId) from recurrenceInvoice
                                where recurrenceInvoice.CustRecurrenceInvoice == _custRecurrenceInvoice.RecId).RecId);
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurrenceInvoiceLastGenerationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last generation date of a <c>CustRecurrenceInvoice</c> setup table, based on which is the
    /// maximum date of the setup.
    /// </summary>
    /// <param name="_custRecurrenceInvoice">
    /// The <c>CustRecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The last generation date of a <c>CustRecurrenceInvoice</c> setup table, based on which is the
    /// maximum date of the setup.
    /// </returns>
    public static TransDate recurrenceInvoiceLastGenerationDate(CustRecurrenceInvoice _custRecurrenceInvoice)
    {
        return RecurrenceInvoice::maxRecurrenceInvoiceDate(_custRecurrenceInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurrenceInvoiceNextGenerationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next generation date of <c>CustRecurrenceInvoice</c> setup table.
    /// </summary>
    /// <param name="_custRecurrenceInvoice">
    /// The <c>CustRecurrenceInvoice</c> table buffer.
    /// </param>
    /// <returns>
    /// The next generation date of <c>CustRecurrenceInvoice</c> setup table.
    /// </returns>
    public static TransDate recurrenceInvoiceNextGenerationDate(CustRecurrenceInvoice _custRecurrenceInvoice)
    {
        TransDate nextGenerationDate;
        TransDate maxRecurrenceInvoiceDate;

        maxRecurrenceInvoiceDate = RecurrenceInvoice::maxRecurrenceInvoiceDate(_custRecurrenceInvoice);

        if (maxRecurrenceInvoiceDate == dateNull())
        {
             nextGenerationDate = _custRecurrenceInvoice.StartDate;
        }
        else
        {
            nextGenerationDate = CustRecurrenceInvoice::getNextGenerationDate(
                    maxRecurrenceInvoiceDate,
                    _custRecurrenceInvoice.Interval,
                    _custRecurrenceInvoice.RecurrencePattern);
        }

        return nextGenerationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumRecurrenceInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the recurrence amount for a single <c>CustRecurrenceInvoice</c> invoice setup.
    /// </summary>
    /// <param name="_custRecurrenceInvoice">
    /// The record id of <c>CustRecurrenceInvoice</c> table.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code for conversion of amount to the currency code.
    /// </param>
    /// <returns>
    /// The total recurrence invoice amount.
    /// </returns>
    public static AmountCur sumRecurrenceInvoiceAmount(
            CustRecurrenceInvoice _custRecurrenceInvoice,
            CurrencyCode _currencyCode)
    {
        AmountCur totalRecurrenceInvoiceAmount;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        CustInvoiceTable custInvoiceTable;
        RecurrenceInvoice recurrenceInvoice;
        CustTrans custTrans;
        #EECountryRegionCodes
        #ISOCountryRegionCodes
        boolean countryRegion_EEU = SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU);
        boolean countryRegion_BR = BrazilParameters::isEnabled();
        boolean countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        boolean countryRegionConsolidated = SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion();
        boolean countryRegion_ES = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]);

        while select CustInvoiceTable, CustRecurrenceInvoice
            from recurrenceInvoice
            join custInvoiceTable
                where recurrenceInvoice.CustRecurrenceInvoice == _custRecurrenceInvoice.RecId &&
                        recurrenceInvoice.CustInvoiceTable == custInvoiceTable.RecId
            outer join AmountCur from custTrans
                where custInvoiceTable.Posted &&
                       custInvoiceTable.InvoiceAccount == custTrans.AccountNum &&
                       custInvoiceTable.InvoiceDate == custTrans.TransDate &&
                       custInvoiceTable.InvoiceId == custTrans.Invoice
        {
            if (custInvoiceTable.Posted)
            {
                totalRecurrenceInvoiceAmount +=
                    CurrencyExchangeHelper::curAmount2CurAmount(custTrans.AmountCur, custInvoiceTable.CurrencyCode, _currencyCode);
            }
            else
            {
                custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
                // Passing the country region flags to the calc method so we don't end up calling the SysCountryRegionCode::isLegalEntityInCountryRegion method repeatedly for multiple invoices.
                custFreeInvoiceCalcTotals.calc(0, false, countryRegion_EEU, countryRegion_BR, countryRegion_IN, countryRegionConsolidated, countryRegion_ES);
                totalRecurrenceInvoiceAmount += CurrencyExchangeHelper::curAmount2CurAmount(custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount(), custInvoiceTable.CurrencyCode, _currencyCode);
            }
        }

        return totalRecurrenceInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS314203</DeveloperDocumentation>
	<FormRef>CustRecurrenceInvoice</FormRef>
	<Label>@SYS314605</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>CustTable</TitleField1>
	<TitleField2>CustInvoiceTemplate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CeilingAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrencePattern</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Interval</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CeilingAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrencePattern</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Interval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDefaultFromCustomer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsStopped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastRecurrenceGenerationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement_RU</Name>
			<Label>@SYS15240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementHeaderExt_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>agreementDocumentTitle_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS314826</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CeilingAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillingClassification</Name>
			<Label>@SPS690</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustBillingClassification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS80104</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Pattern</Name>
			<Label>@SYS86395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrencePattern</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Interval</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecurrenceDate</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastRecurrenceGenerationDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecurrenceStartDate</Name>
			<Label>@SYS35856</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayNextGenerationDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementHeaderExt_RU</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AgreementHeaderExtRecId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CeilingAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurPositive</ExtendedDataType>
			<Label>@SYS314826</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingClassification</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS690</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInvoiceTemplate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS177200</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustTable</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@SYS177328</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS314181</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Interval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS41392</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsStopped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRecurrenceIsActive</ExtendedDataType>
			<EnumType>NoYesCombo</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastRecurrenceGenerationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS314841</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecurrencePattern</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RecurrencePattern</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS314180</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseDefaultFromCustomer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS314829</Label>
			<EnumType>CustRecurrenceInvoiceDefaultType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInvoiceTemplateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustInvoiceTemplate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IsStoppedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsStopped</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementHeaderExt_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementHeaderExt_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementHeaderExt_RU</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>AgreementHeaderExt_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementHeaderExt_RU</Name>
					<Field>AgreementHeaderExt_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingClassification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBillingClassification</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingClassification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingClassification_CustRecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingClassification</Name>
					<Field>CustBillingClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTemplate_CustRecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceTemplate</Name>
					<Field>CustInvoiceTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTable_CustRecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTable</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>