<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCouponCodeTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCouponCodeTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCouponLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>RetailCouponCodeTable</c> record.
    /// </summary>
    /// <param name="retailCouponNumber">
    /// The coupon Code to find by.
    /// </param>
    /// <param name="update">
    ///  A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>RetailCouponCodeTable</c> record if found; otherwise, <c>null</c>.
    /// </returns>
    public static RetailCouponCodeTable findCouponLine(RetailCouponNumber retailCouponNumber, boolean update = false)
    {
        RetailCouponCodeTable  retailCouponCodeTable;

        retailCouponCodeTable.selectForUpdate(update);

        if (retailCouponNumber)
        {
            select firstonly retailCouponCodeTable
                where retailCouponCodeTable.CouponNumber == retailCouponNumber;
        }

        return retailCouponCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupActiveCoupons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for coupons that are active and not void.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormStringControl</c> control that the lookup should attach to.
    /// </param>
    public static void lookupActiveCoupons(FormControl _formControl)
    {
        RetailCouponCodeTable::buildActiveCouponsSysTableLookup(_formControl).performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupActiveCouponsNonUsage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for coupons that are active, not void and are non usage based.
    /// </summary>
    /// <param name = "_formControl">
    /// The <c>FormStringControl</c> control that the lookup should attach to.
    /// </param>
    /// <param name = "mcrOrderStopped">
    /// The mcrOrderStopped control if all active coupons needs to be shown or only non usage coupons.
    /// </param>
    public static void lookupActiveCouponsNonUsage(FormControl _formControl, NoYes mcrOrderStopped)
    {
        // If orderCompletion field is Yes then call the existing lookup for active coupons.
        if (mcrOrderStopped == NoYes::Yes)
        {
            RetailCouponCodeTable::lookupActiveCoupons(_formControl);
        }
         else
        {
            SysTableLookup          sysTableLookup = RetailCouponCodeTable::buildActiveCouponsSysTableLookup(_formControl);
            Query                   query = sysTableLookup.parmQuery();
            QueryBuildDataSource    queryBuildDataSource = query.dataSourceTable(tableNum(RetailCouponCodeTable));
            QueryBuildDataSource    queryBuildDataSourceCoupons = queryBuildDataSource.addDataSource(tableNum(RetailCoupon));

            queryBuildDataSourceCoupons.relations(true);
            queryBuildDataSourceCoupons.addRange(fieldNum(RetailCoupon, UsageLimit)).value(int2Str(0));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActiveCouponsSysTableLookup</Name>
				<Source><![CDATA[
    private static SysTableLookup buildActiveCouponsSysTableLookup(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(RetailCouponCodeTable), _formControl);
        sysTableLookup.addLookupfield(fieldNum(RetailCouponCodeTable, CouponCodeId));
        sysTableLookup.addLookupfield(fieldNum(RetailCouponCodeTable, CouponCode));
        sysTableLookup.addLookupfield(fieldNum(RetailCouponCodeTable, CouponNumber));
        sysTableLookup.addLookupMethod(tableMethodStr(RetailCouponCodeTable, displayCouponDesc));

        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(RetailCouponCodeTable));
        queryBuildDataSource.addRange(fieldNum(RetailCouponCodeTable, Status))
            .value(SysQuery::value(enum2str(RetailCouponStatus::Active)));
        
        sysTableLookup.parmQuery(query);
        
        return sysTableLookup;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetNextCouponCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next available coupon code identifier.
    /// </summary>
    /// <returns>
    /// The next available coupon code identifier.
    /// </returns>
    public static RetailCouponCodeId GetNextCouponCodeId()
    {
        RetailCouponCodeId newCouponCodeId = '';
        NumberSeq  numberSeq;

        numberSeq = NumberSeq::newGetNum(RetailParameters::numRefCouponCodeId());
        newCouponCodeId = numberSeq.num();
        numberSeq.used();

        return newCouponCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCouponDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the description of the related coupon.
    /// </summary>
    /// <returns>
    /// The description for the related coupon.
    /// </returns>
    public display RetailDescriptionEx2 displayCouponDesc()
    {
        RetailCoupon  retailCoupon;
        RetailCouponCodeTable retailCouponCodeTable;

        select firstonly retailCoupon
            join retailCouponCodeTable
            where retailCouponCodeTable.CouponNumber == retailCoupon.CouponNumber
            && retailCoupon.CouponNumber == this.CouponNumber;

        return retailCoupon.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailCouponCodeTable</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is inserted into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public void insert()
    {
        ttsbegin;

        if (this.CouponCode)
        {
            this.BarCode = RetailCouponHelper::createBarCode(this.CouponCode);
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>RetailCouponCodeTable</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is inserted into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public void update()
    {
        ttsbegin;

        if (this.CouponCode != this.orig().CouponCode)
        {
            this.BarCode = RetailCouponHelper::createBarCode(this.CouponCode);
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCouponCodeStatusInBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update CouponCode status related to its Coupon status in batch.
    /// </summary>
    /// <param name = "retailCouponNumber">The related CouponNumber.</param>
    /// <param name = "status">The status to be updated.</param>
    public static void updateCouponCodeStatusInBatch(RetailCouponNumber retailCouponNumber, RetailCouponStatus status)
    {
        RetailCouponCodeTable retailCouponCodeTable;

        // As update() method is overridden, we need to explicitly set skipDataMethods(true) to ensure update_recordset will not fallback to row by row.
        // We use a flight (enabled by default) to control it in case there is extension overrding update() method and preferred not to be skipped.
        boolean shouldSkipDataMethods = RetailPricingSkipDataMethodsWhenUpdatingCouponCodeStatusFlight::instance().isEnabled();
        retailCouponCodeTable.skipDataMethods(shouldSkipDataMethods);

        ttsBegin;

        update_recordset retailCouponCodeTable
            setting Status = status
            where retailCouponCodeTable.CouponNumber == retailCouponNumber;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCouponCodeStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update CouponCode status related to its Coupon status.
    /// </summary>
    /// <param name = "retailCouponNumber">the related CouponNumber</param>
    /// <param name = "status">the status to be updated</param>
    /// <param name = "isUpdateAll">
    ///    A value indicating whether we need to
    ///    validate if another coupon line with the same coupon code is active.
    /// </param>
    [SysObsolete('Parameter isUpdateAll is obsolete and no longer in use. Use updateCouponCodeStatusInBatch() instead.', false, 18\05\2022)]
    public static void updateCouponCodeStatus(RetailCouponNumber retailCouponNumber,
                                                RetailCouponStatus status,
                                                boolean isUpdateAll = true)
    {
        RetailCouponCodeTable retailCouponCodeTable;

        ttsBegin;

        while select forUpdate retailCouponCodeTable
            where retailCouponCodeTable.CouponNumber == retailCouponNumber
        {
            if (RetailCouponCodeTable::isExistCouponCode(retailCouponCodeTable.CouponCode, retailCouponNumber))
            {
                error(strFmt("@RetailDiscount:CouponCodeDuplicateError", retailCouponCodeTable.CouponCode));
            }
            else
            {
                retailCouponCodeTable.Status = status;
                retailCouponCodeTable.doUpdate();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbyCouponCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>RetailCouponCodeTable</c> table by using the coupon code ID.
    /// </summary>
    /// <param name="_couponCodeId">
    /// The value of the coupon code ID.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailCouponCodeTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailCouponCodeTable findbyCouponCodeId(RetailCouponCodeId _couponCodeId)
    {
        RetailCouponCodeTable retailCouponCodeTable;

        select firstonly retailCouponCodeTable where retailCouponCodeTable.CouponCodeId == _couponCodeId;

        return retailCouponCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxValidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the maximum valid date from Coupon Codes
    /// </summary>
    /// <param name = "retailCouponNumber">the related CouponNumber</param>
    /// <returns>the maximum date</returns>
    public static date getMaxValidDate(RetailCouponNumber retailCouponNumber)
    {
        RetailCouponCodeTable retailCouponCodeTable;

        retailCouponCodeTable.selectForUpdate(false);

        if (retailCouponNumber)
        {
            select maxof(ValidTo)
                from retailCouponCodeTable
                where retailCouponCodeTable.CouponNumber == retailCouponNumber;
        }

        return retailCouponCodeTable.ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinValidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the minimum valid date from Coupon Codes
    /// </summary>
    /// <param name = "retailCouponNumber">the related CouponNumber</param>
    /// <returns>the minimum date</returns>
    public static date getMinValidDate(RetailCouponNumber retailCouponNumber)
    {
        RetailCouponCodeTable retailCouponCodeTable;

        retailCouponCodeTable.selectForUpdate(false);

        if (retailCouponNumber)
        {
            select minof(ValidFrom)
                from retailCouponCodeTable
                where retailCouponCodeTable.CouponNumber == retailCouponNumber;
        }

        return retailCouponCodeTable.ValidFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCouponLineWithDateNotNull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>RetailCouponCodeTable</c> record without empty date
    /// </summary>
    /// <param name = "couponNumber">the related coupon number</param>
    /// <returns><c>RetailCouponCodeTable</c> record if found; otherwise null</returns>
    public static RetailCouponCodeTable findCouponLineWithDateNotNull(RetailCouponNumber couponNumber)
    {
        RetailCouponCodeTable  retailCouponCodeTable;

        retailCouponCodeTable.selectForUpdate(false);

        if (couponNumber)
        {
            select firstonly retailCouponCodeTable
                where retailCouponCodeTable.CouponNumber == couponNumber
                    && retailCouponCodeTable.ValidFrom != Global::dateNull()
                    && retailCouponCodeTable.ValidFrom != Global::dateNull();
        }

        return retailCouponCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCouponCodeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update coupon code date range
    /// </summary>
    /// <param name = "couponNumber">the related coupon number</param>
    /// <param name = "validFrom">start date from the header</param>
    /// <param name = "validTo">end date from the header</param>
    /// <param name = "isUpdateOnlyDateNull">true/false value to update only null dates</param>
    public static void updateCouponCodeDate(RetailCouponNumber couponNumber,
                                                date validFrom,
                                                date validTo,
                                                boolean isUpdateOnlyDateNull = false)
    {
        RetailCouponCodeTable retailCouponCodeTable;

        retailCouponCodeTable.selectForUpdate(true);

        ttsBegin;
                 
        while select forUpdate retailCouponCodeTable
            where retailCouponCodeTable.CouponNumber == couponNumber
        {
            if (isUpdateOnlyDateNull)
            {
                if (retailCouponCodeTable.ValidFrom == Global::dateNull())
                {
                    retailCouponCodeTable.ValidFrom = validFrom;
                }

                if (retailCouponCodeTable.ValidTo == Global::dateNull())
                {
                    retailCouponCodeTable.ValidTo = validTo;
                }
            }
            else
            {
                retailCouponCodeTable.ValidFrom = validFrom;
                retailCouponCodeTable.ValidTo = validTo;
            }
            
            retailCouponCodeTable.doUpdate();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExistCouponCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there is any coupon code has already activated.
    /// </summary>
    /// <param name = "couponCode">Coupon code to be checked.</param>
    /// <param name = "couponNumber">The coupon number we are checking the coupon code for.</param>
    /// <param name = "status">The status to be checked.</param>
    /// <returns>A value indicating whether a coupon code exists.</returns>
    public static boolean isExistCouponCode(RetailCouponCode couponCode,
                                                RetailCouponNumber couponNumber,
                                                RetailCouponStatus status = RetailCouponStatus::Active)
    {
        RetailCouponCodeTable retailCouponCodeTable;

        select count(RecId) from retailCouponCodeTable
            where retailCouponCodeTable.CouponCode == couponCode
            && retailCouponCodeTable.CouponNumber != couponNumber;

        boolean ret = (retailCouponCodeTable.RecId > 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the coupon line is valid.
    /// </summary>
    /// <returns>A value indicating whether the coupon line is valid.</returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.Status == RetailCouponStatus::Active)
            {

                if (!RetailCouponHelper::isAssociatedDiscountValid(RetailCoupon::find(this.CouponNumber).DiscountOfferId))
                {
                    return checkFailed(strFmt("@RetailPricing:CouponCodeAssociatedDiscountInvalid", this.CouponCodeId));
                }
            }

            boolean isCouponNumberChanged = this.CouponNumber != this.orig().CouponNumber;
            boolean isCouponCodeChanged = this.CouponCode != this.orig().CouponCode;

            if ((isCouponNumberChanged || isCouponCodeChanged) // Validate only when necessary.
                && RetailCouponCodeTable::isExistCouponCode(this.CouponCode, this.CouponNumber))
            {
                return checkFailed(strFmt("@RetailDiscount:CouponCodeDuplicateError", this.CouponCode));
            }

            if (isCouponCodeChanged // Validate only when necessary.
                && subStr(this.CouponCode, 1, 1) == '0')
            {
                return checkFailed("@RetailDiscount:CouponCodeStartsWithZeroError");
            }

            if (this.ValidFrom != Global::dateNull() && this.ValidTo != Global::dateNull())
            {
                if (this.ValidFrom > this.ValidTo)
                {
                    return checkFailed("@Retail:RetailDateRangeWarning");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates before delete.
    /// </summary>
    /// <returns>true when delete is allowed; otherwise, false.</returns>
    public boolean validateDelete()
    {
        boolean ret = true;

        if (this.Status == RetailCouponStatus::Active)
        {
            ret = checkFailed("@RetailDiscount:DeleteActiveCouponCodeError");
        }
        
        ret = ret && super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailCoupon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiate from and to dates from given coupon header.
    /// </summary>
    /// <param name = "_retailCoupon">The coupon header.</param>
    [Wrappable(false)]
    public void initFromRetailCoupon(RetailCoupon _retailCoupon)
    {
        this.ValidFrom = _retailCoupon.ValidFrom;
        this.ValidTo = _retailCoupon.ValidTo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@Retail:RetailCouponCodeTable</Label>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>CommerceCustomers</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CouponCodeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCouponCodeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CouponNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCouponNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CouponCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCouponCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailCouponStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Barcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBarCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsLegacyDiscountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailCouponCodeTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CouponCodeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RetailCouponNumberIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CouponCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CouponNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RetailCouponRelationship</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailCoupon</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CouponNumber</Name>
					<Field>CouponNumber</Field>
					<RelatedField>CouponNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>