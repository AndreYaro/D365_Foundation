<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdNotificationSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdNotificationSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        SysDictClass notificationGenerator = new SysDictClass(className2Id(this.ClassName));
        ProdINotificationRule generator = notificationGenerator.makeObject();

        generator.initializeParameterRecord(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNotificationSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates notification setup records based on notification generation classes created in the application
    /// One record is created for every class that implements the <c>ProdINotificationGenerator</c> interface
    /// </summary>
    public static void createNotificationSetup()
    {
        ProdNotificationSetup notificationSetup;

        delete_from notificationSetup;

        ListIterator iterator = ProdNotificationSetup::getNotificationClassListIterator();

        while (iterator.more())
        {
            var classId = iterator.value();
            if (classId != className2Id(classStr(ProdINotificationRule)))
            {
                var className = classId2Name(classId);

                SysDictClass dictClass = new SysDictClass(classId);
                ProdINotificationRule ruleClass = dictClass.makeObject();

                notificationSetup.Name = ruleClass.parmName();
                notificationSetup.Description = ruleClass.parmDescription();
                notificationSetup.ClassName = className;
                notificationSetup.insert();
            }
            iterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotificationClassListIterator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discovers all classes implementing the <c>ProdINotificationGenerator</c> interface
    /// </summary>
    /// <returns>An iterator containing all the discovered classes</returns>
    public static ListIterator getNotificationClassListIterator()
    {
        SysDictClass dictClass = new SysDictClass(className2Id(classStr(ProdINotificationRule)));

        List notificationClassList = dictClass.implementedBy(true);

        return new ListIterator(notificationClassList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to show/change subscriptions to a notification setup
    /// </summary>
    public edit boolean subscribe(boolean _set, boolean _value)
    {
        boolean value = _value;
        ProdNotificationSetupSubscription notificationSetupSubscription;

        if (_set)
        {
            notificationSetupSubscription = ProdNotificationSetupSubscription::find(this.RecId, curUserId(), true);
            if (value)
            {
                if (notificationSetupSubscription.RecId == 0)
                {
                    notificationSetupSubscription.ProdNotificationSetup = this.RecId;
                    notificationSetupSubscription.UserId = curUserId();
                    notificationSetupSubscription.insert();
                }
            }
            else
            {
                if (notificationSetupSubscription.RecId != 0)
                {
                    ttsbegin;
                    notificationSetupSubscription.delete();
                    ttscommit;
                }
            }
        }
        else
        {
            notificationSetupSubscription = ProdNotificationSetupSubscription::find(this.RecId, curUserId());
            return (notificationSetupSubscription.RecId != 0);
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SCM:ProdNotificationSetupDevDoc</DeveloperDocumentation>
	<Label>@SCM:NotificationSetup</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductionControl</Modules>
	<ReplacementKey>ProdNotificationNameIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProdNotificationParameterBase</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClassName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClassName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClassName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdNotificationRuleName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdNotificationRuleDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClassName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysClassName</ExtendedDataType>
			<Label>@SCM:ProdNotificationRuleDefinition</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProdNotificationNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ClassName</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>