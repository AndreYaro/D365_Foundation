<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjItemTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjItemTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustVersion</Name>
				<Source><![CDATA[
    public ProjItemAdjustVersion adjustVersion()
    {
        return any2int((select count(RecId) from projItemTrans
                    where projItemTrans.InventTransId   == this.InventTransId &&
                          projItemTrans.ProjAdjustRefId == this.ProjAdjustRefId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    SalesAmount costAmount(
        ProjItemTrans    projItemTrans,
        TransDate        ledgerFromDate,
        TransDate        ledgerToDate
        )
    {
        return projStatement::newProjItemTrans(projItemTrans,ledgerFromDate,ledgerToDate).c120_Consumption_Item();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountTotal</Name>
				<Source><![CDATA[
    display ProjCostAmount costAmountTotal()
    {
        DictTable dictTableProjItemTransCost;

        dictTableProjItemTransCost = new DictTable(tableNum(ProjItemTransCost));

        if (dictTableProjItemTransCost.rights() >= AccessType::View)
        {
            return (select sum(AmountMST) from projItemTransCost
                    where projItemTransCost.InventTransId   == this.InventTransId   &&
                          projItemTransCost.ProjAdjustRefId == this.ProjAdjustRefId).AmountMST;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    display CostPrice costPrice()
    {
        ProjTrans   projTrans;

        projTrans = ProjTrans::newProjItemTrans(this);

        return CurrencyExchangeHelper::price(projTrans.transCostMST() / (projTrans.qty() ? projTrans.qty() : 1), projTrans.currencyIdCost());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCostAmount</Name>
				<Source><![CDATA[
    public display SalesAmount displayCostAmount()
    {
        return this.costAmount(this, dateNull(), dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesAmount</Name>
				<Source><![CDATA[
    public display SalesAmount displaySalesAmount()
    {
        return this.salesAmount(this, dateNull(), dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceList</Name>
				<Source><![CDATA[
    public List fundingSourceList(Voucher _excludedVoucher = '')
    {
        ProjItemTransCost       projItemTransCost;
        Map                     fundingList;
        List                    fundingSourceAllocation;
        AmountCur               totalTrxAmount;
        AmountCur               amountToMap;
        MapEnumerator           mapEnumerator;
        ProjSplitAllocation     allocation;
        boolean                 firstRecord = true;

        fundingList = new Map(Types::Int64, Types::Real);
        fundingSourceAllocation = new List(Types::Class);

        while select LineAmount, FundingSource from projItemTransCost
            where projItemTransCost.InventTransId == this.InventTransId &&
                projItemTransCost.ProjAdjustRefId == this.ProjAdjustRefId &&
                projItemTransCost.ProjInventAdjust == NoYes::No &&
                (!_excludedVoucher || projItemTransCost.Voucher != _excludedVoucher)
        {
            totalTrxAmount = totalTrxAmount + projItemTransCost.LineAmount;
            amountToMap = projItemTransCost.LineAmount;
            if (fundingList.exists(projItemTransCost.FundingSource))
            {
                amountToMap = fundingList.lookup(projItemTransCost.FundingSource) + amountToMap;
                fundingList.remove(projItemTransCost.FundingSource);
            }
            fundingList.insert(projItemTransCost.FundingSource, amountToMap);
        }

        mapEnumerator = fundingList.getEnumerator();
        while ( mapEnumerator.moveNext() )
        {
            if (totalTrxAmount != 0.00)
            {
                allocation = ProjSplitAllocation::construct( mapEnumerator.currentKey(),
                                                                mapEnumerator.currentValue()/totalTrxAmount * 100,
                                                                0,
                                                                firstRecord ? NoYes::Yes : NoYes::No );
            }
            else
            {
                allocation = ProjSplitAllocation::construct( mapEnumerator.currentKey(),
                                                                100,
                                                                0,
                                                                firstRecord ? NoYes::Yes : NoYes::No );
            }
            fundingSourceAllocation.addEnd( allocation );
            firstRecord = false;
        }

        return fundingSourceAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        #isoCountryRegionCodes

        NumberSeq   numberSeq;
        ProjItemTransCost projItemTransCost;

        ttsbegin;

        if (!this.ProjTransId)
        {
            numberSeq           = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase());
            this.ProjTransId    = numberSeq.num();
        }

        if (!this.Txt)
        {
            if (this.ItemId)
            {
                this.Txt = InventTable::find(this.ItemId).defaultProductName();
            }
            else if (this.VendInvoiceTransRecId)
            {
                this.Txt = VendInvoiceTrans::findRecId(this.VendInvoiceTransRecId).Name;
            }
        }

        select sum(LineAmount)
        from projItemTransCost
        where projItemTransCost.InventTransId == this.InventTransId &&
            projItemTransCost.ProjAdjustRefId == this.ProjAdjustRefId;
        this.TotalCostAmountCur = projItemTransCost.LineAmount;

        if (FeatureStateProvider::isFeatureEnabled(ProjProjectTransactionsListPageVendFeature::instance()) && this.VendInvoiceTransRecId)
        {
            ProjVendInvoiceVendorInfo vendorInfo = ProjVendInvoiceVendorInfo::newFromVendorInvoiceTransRecId(this.VendInvoiceTransRecId);

            this.VendorAccount = vendorInfo.getVendorAccount();
            this.VendorName = vendorInfo.getVendorName();
        }

        super();

        ProjPostedTransTable::initFromItemTrans(this);

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            this.SysExtensionSerializerMap::postInsert();

            if (this.ProjTransId != this.ProjTransIdRef)
            {
                TransTaxInformationHelper::copyTransTaxInformation(ProjItemTrans::find(this.ProjTransIdRef), this);
            }
        }
        // </GTE>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean _forupdate = false)
    {
        return InventDim::find(this.InventDimId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(ItemId itemId = this.ItemId, boolean _forUpdate = false)
    {
        return InventTable::find(itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    display ProjInvoiced invoiced()
    {
        return ProjTrans::newProjItemTrans(this).invoiced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    display ProjInvoiceId invoiceId()
    {
        return ProjTrans::newProjItemTrans(this).invoiceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    display ProjLedgerAccruedAmount ledgerSalesAmount()
    {
        DictTable dictTableProjItemTransSale;

        dictTableProjItemTransSale = new DictTable(tableNum(ProjItemTransSale));

        if (dictTableProjItemTransSale.rights() >= AccessType::View)
        {
            return (select sum(LedgerSalesAmount) from projItemTransSale
                    where projItemTransSale.ProjTransId == this.ProjTransId).LedgerSalesAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    display SalesLineAmount lineAmount()
    {
        DictTable dictTableProjItemTransSale;

        dictTableProjItemTransSale = new DictTable(tableNum(ProjItemTransSale));

        if (dictTableProjItemTransSale.rights() >= AccessType::View)
        {
            return (select sum(LineAmount) from projItemTransSale
                    where projItemTransSale.ProjTransId == this.ProjTransId).LineAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProjItemTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>ProjItemTransTaxExtensionIN</c> table
    /// </summary>
    /// <param name="_projItemTransTaxExtensionIN">
    /// ProjItemTransTaxExtensionIN is packed.
    /// </param>
    public void packProjItemTrans_IN(ProjItemTransTaxExtensionIN _projItemTransTaxExtensionIN)
    {
        _projItemTransTaxExtensionIN.ProjItemTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_projItemTransTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceStatus</Name>
				<Source><![CDATA[
    public display ProjInvoiceStatus projInvoiceStatus()
    {
        ProjInvoiceStatus projInvoiceStatus = ProjInvoiceStatus::None;
  
        // Adjusted transactions
        ProjItemTransSale adjustedTransaction;
        select firstonly RecId from adjustedTransaction
                where adjustedTransaction.ProjTransId == this.ProjTransId &&
                        adjustedTransaction.TransStatus == ProjTransStatus::Adjusted;
        if (adjustedTransaction)
        {
            projInvoiceStatus = ProjInvoiceStatus::Adjusted;
        }
        else
        {
            ProjTable projTable = ProjTable::find(this.ProjId);
            if (ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projTable, ProjTransType::Item))
            {
                ProjFundingSource projFundingSource;
                boolean	hasOnHold = false;
            
                if ((this.TransactionOrigin == ProjOrigin::SalesOrder) || (ProjLineProperty::find(this.LinePropertyId).ToBeInvoiced == NoYes::Yes))
                {
                    ProjItemTransSale invoiced;
                    select firstonly RecId from invoiced
                        where invoiced.ProjTransId == this.ProjTransId &&
                            (invoiced.TransStatus == ProjTransStatus::Invoiced ||
                            invoiced.TransStatus == ProjTransStatus::MarkedCreditnote ||
                            invoiced.TransStatus == ProjTransStatus::CreditnoteProposal);

                    // For performance, Only search for OnHold if some of the transaction has been invoice
                    ProjItemTransSale onHoldFunding;
                    if (invoiced)
                    {
                        select firstonly RecId from onHoldFunding where
                                onHoldFunding.ProjTransId == this.ProjTransId
                            join RecId from projFundingSource
                                where projFundingSource.RecId == onHoldFunding.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource;
                    }

                    ProjItemTransSale chargeable;
                    select firstonly RecId from chargeable
                        where chargeable.ProjTransId == this.ProjTransId &&
                            (chargeable.TransStatus == ProjTransStatus::Posted ||
                            chargeable.TransStatus == ProjTransStatus::InvoiceProposal)
                        join RecId from projFundingSource
                            where projFundingSource.RecId == chargeable.FundingSource &&
                                (projFundingSource.FundingType == ProjFundingType::Customer ||
                                projFundingSource.FundingType == ProjFundingType::Grant);

                    if (invoiced.RecId && chargeable.RecId)
                    {
                        if (onHoldFunding)
                        {
                            projInvoiceStatus = ProjInvoiceStatus::PartiallyInvoicedWithOnhold;
                        }
                        else
                        {
                            projInvoiceStatus = ProjInvoiceStatus::PartiallyInvoiced;
                        }
                    }
                    else if (invoiced.RecId && !chargeable.RecId)
                    {
                        if (onHoldFunding)
                        {
                            projInvoiceStatus = ProjInvoiceStatus::FullyInvoicedWithOnhold;
                        }
                        else
                        {
                            projInvoiceStatus = ProjInvoiceStatus::FullyInvoiced;
                        }
                    }
                    else if (!invoiced.RecId && chargeable.RecId)
                    {
                        projInvoiceStatus = ProjInvoiceStatus::Chargeable;

                        // The check against billing rules is delayed to this point as it is an expensive operation
                        if (!ProjInvoiceTable::isBillingRuleInvoiceable(this.ProjId, this.CategoryId, this.psaContractLineNum, ProjTransType::Item))
                        {
                            projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                        }
                    }
                    else if (!invoiced.RecId && !chargeable.RecId)
                    {
                        projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                    }
                }
                else
                {
                    projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                }
            }
            else
            {
                // Transactions are not invoiceable for Fixed Price, Investment, Time, Cost projects
                projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
            }
        }

        return projInvoiceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemTransSaleFirst</Name>
				<Source><![CDATA[
    public ProjItemTransSale projItemTransSaleFirst()
    {
        ProjItemTransSale projItemTransSale;

        select firstonly projItemTransSale where projItemTransSale.ProjTransId ==this.ProjTransId;

        return projItemTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ProjItemTransTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>ProjItemTransTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public ProjItemTransTaxExtensionIN projItemTransTaxExtensionIN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjItemTransTaxExtensionIN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemTransView_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a view associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>ProjItemTransView_IN</c>.
    /// </returns>
    public ProjItemTransView_IN projItemTransView_IN()
    {
        ProjItemTransView_IN projItemTransView_IN;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projItemTransView_IN.initProjItemTrans(this);

            // If the view doesn't have a RecId then it will assume
            // this is an insert scenario when it isn't.  So we will
            // let the view borrow the RecId from the projItemTrans.  Since
            // no writes are done using this view this will work okay.
            projItemTransView_IN.RecId = this.RecId;
            return projItemTransView_IN;
        }

        return projItemTransView_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable(boolean _update = false)
    {
        return ProjTable::find(this.ProjId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    display ProjProposal proposal()
    {
        return ProjTrans::newProjItemTrans(this).proposal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    display ProjProposalId proposalId()
    {
        return ProjTrans::newProjItemTrans(this).proposalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    SalesAmount salesAmount(
        ProjItemTrans    projItemTrans,
        TransDate        ledgerFromDate,
        TransDate        ledgerToDate
        )
    {
        return projStatement::newProjItemTrans(projItemTrans,ledgerFromDate,ledgerToDate).a100_Total_Revenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    display SalesPrice salesPrice()
    {
        AmountCur   transTurnover;
        ProjTrans   projTrans;
        ProjItemTransSale   projItemTransSale;
        SalesPrice          salesPrice;

        select count(RecId), sum(SalesPrice) from projItemTransSale
            where projItemTransSale.ProjTransId == this.ProjTransId;

        // Multiple funding sources exist
        if (projItemTransSale.RecId > 1)
        {
            transTurnover = this.transTurnover();
            projTrans = ProjTrans::newProjItemTrans(this);
            salesPrice = CurrencyExchangeHelper::price(transTurnover / (projTrans.qty() ? projTrans.qty() : 1), projTrans.currencyIdSales());
        }
        else
        {
            salesPrice = projItemTransSale.SalesPrice;
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    display ProjCost transCost()
    {
        return ProjTrans::newProjItemTrans(this).transCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTurnover</Name>
				<Source><![CDATA[
	/// <summary>
	/// Returns the revenue for a transaction.
	/// </summary>
	/// <param name="_transID">
	/// Transaction ID for turnover amount.
	/// </param>
	/// <param name="_isConsiderCredit">
	/// Indicates whether credit note transactions are to be considered.
	/// </param>
	/// <returns>
	/// An <c>AmountCur</c> data type that represents the revenue for the transaction.
	/// </returns>
	/// <remarks>
	/// The revenue is calculated as quantity multiplied by the sales price. The revenue amount that is
	/// returned is in the currency of the transaction.
	/// </remarks>
	protected ProjTurnover getTurnover(ProjItemTransId _transID, boolean _isConsiderCredit = true)
	{
        ProjItemTransSale   projItemTransSale;
        ProjTrans           projTransSale;
        AmountCur           transTurnover;

        while select projItemTransSale
            where projItemTransSale.ProjTransId == _transID &&
                (!projItemTransSale.wipPeriod || (projItemTransSale.wipPeriod && projItemTransSale.TransStatus != ProjTransStatus::Adjusted)) &&
                (_isConsiderCredit            || (!_isConsiderCredit && projItemTransSale.TransStatus != ProjTransStatus::MarkedCreditnote))

        {
            projTransSale = ProjTrans::newProjItemTransSale(this, projItemTransSale);
            transTurnover += CurrencyExchangeHelper::amount((projTransSale.qty() ? projTransSale.qty() : 1) * projTransSale.salesPrice(), projTransSale.currencyIdSales());
        }

        return transTurnover;
	}

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the revenue for a transaction.
    /// </summary>
    /// <param name="_isConsiderCredit">
    /// Indicates whether credit note transactions are to be considered.
    /// </param>
    /// <returns>
    /// An <c>AmountCur</c> data type that represents the revenue for the transaction.
    /// </returns>
    /// <remarks>
    /// The revenue is calculated as quantity multiplied by the sales price. The revenue amount that is
    /// returned is in the currency of the transaction.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    display ProjTurnover transTurnover(boolean _isConsiderCredit = true)
    {
        return this.getTurnover(this.ProjTransId, _isConsiderCredit);
	}

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #isoCountryRegionCodes

        super();

        ProjPostedTransTable::updateFromProjItemTrans(this);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postUpdate();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        boolean             ret;

        ret = super();

        if (ret)
        {
            ret  = projValCheckTrans.validateMandatory(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountDisplayCache</Name>
				<Source><![CDATA[
    static container costAmountDisplayCache(
        container   _conprojItemTrans,
        container   _conprojItemTransSalesAmount,
        TransDate   _ledgerFromDate,
        TransDate   _ledgerToDate)
    {
        ProjItemTrans    projItemTrans;
        Set              setprojItemTrans;
        Map              mapprojItemTransSalesAmount;
        SetIterator      si;

        if (_conprojItemTrans)
        {
            setprojItemTrans = Set::create(_conprojItemTrans);
        }
        if (_conprojItemTransSalesAmount)
        {
            mapprojItemTransSalesAmount = Map::create(_conprojItemTransSalesAmount);
        }
        si = new SetIterator(setprojItemTrans);
        si.begin();
        while (si.more())
        {
            projItemTrans = ProjItemTrans::find(si.value());
            mapprojItemTransSalesAmount.insert(si.value(), projItemTrans.costAmount(projItemTrans,_ledgerFromDate,_ledgerToDate));
            si.next();
        }

        return mapprojItemTransSalesAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountTotalStatic</Name>
				<Source><![CDATA[
    public static AmountMST costAmountTotalStatic(InventTransId _inventTransId, ProjAdjustRefId _projAdjustRefId)
    {
        return (select sum(AmountMST) from projItemTransCost
                    where projItemTransCost.InventTransId   == _inventTransId   &&
                          projItemTransCost.ProjAdjustRefId == _projAdjustRefId).AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(InventTransId  _transId,
                         PackingSlipId  _packingSlipId)
    {
        return _transId &&   (select projItemTrans
                                where projItemTrans.InventTransId  == _transId       &&
                                      projItemTrans.PackingSlipId  == _packingSlipId
                             ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProjTransId</Name>
				<Source><![CDATA[
    static boolean existProjTransId(
        ProjTransIdBase  _transId)
    {
        return _transId &&   (select projItemTrans
                                where projItemTrans.ProjTransId  == _transId
                             ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjItemTrans find(ProjItemTransId _transId, boolean _forUpdate = false)
    {
        ProjItemTrans    projItemTrans = null;

        projItemTrans.selectForUpdate(_forUpdate);

        if (_transId)
        {
            select projItemTrans where projItemTrans.ProjTransId == _transId;
        }

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendInvoiceTransRecId</Name>
				<Source><![CDATA[
    public static ProjItemTrans findByVendInvoiceTransRecId(RefRecId _refRecId, boolean _forUpdate = false)
    {
        ProjItemTrans    projItemTrans = null;

        projItemTrans.selectForUpdate(_forUpdate);

        if (_refRecId)
        {
            select projItemTrans where projItemTrans.VendInvoiceTransRecId == _refRecId;
        }

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvent</Name>
				<Source><![CDATA[
    public static ProjItemTrans findInvent(InventTransId _transId, ProjAdjustRefId _projAdjustRefId, boolean _forUpdate     = false)
    {
        ProjItemTrans    projItemTrans = null;

        projItemTrans.selectForUpdate(_forUpdate);

        if (_transId && _projAdjustRefId)
        {
            select projItemTrans
                where projItemTrans.InventTransId   == _transId         &&
                      projItemTrans.ProjAdjustRefId == _projAdjustRefId;
        }
        else
        {
            if (_transId)
            {
                select projItemTrans where projItemTrans.InventTransId == _transId;
            }
        }

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromAdjustment</Name>
				<Source><![CDATA[
    public static ProjItemTrans initTransFromAdjustment(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate)
    {
        // <GIN>
        ProjItemTransTaxExtensionIN     projItemTransTaxExtensionIN;
        TaxInventVATCommodityCode_IN    taxInventVATCommodityCode;
        // </GIN>
        ProjItemTrans                   projItemTrans;
        boolean                         isStocked = ProjItemTrans::isStocked(_tmpProjAdjustmentCreate.InventTransId);
        ProjItemTrans                   origProjItemTrans = ProjItemTrans::find(_tmpProjAdjustmentCreate.TransID);

        projItemTrans.ProjTransId       = ProjParameters::newTransId();
        projItemTrans.ProjTransIdRef    = origProjItemTrans.ProjTransIdRef;

        projItemTrans.ProjId            = _tmpProjAdjustmentCreate.ProjId;
        projItemTrans.ActivityNumber    = _tmpProjAdjustmentCreate.ActivityNumber;
        projItemTrans.TransDate         = _tmpProjAdjustmentCreate.Transdate;
        projItemTrans.ItemId            = _tmpProjAdjustmentCreate.ItemId;
        if (isStocked)
        {
            projItemTrans.InventDimId   = InventTrans::findTransId(_tmpProjAdjustmentCreate.InventTransId).InventDimId;
        }
        else
        {
            projItemTrans.InventDimId   = _tmpProjAdjustmentCreate.InventDimId;
        }
        projItemTrans.InventTransId     = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        projItemTrans.LedgerDimension   = _tmpProjAdjustmentCreate.LedgerDimension;
        projItemTrans.Txt               = _tmpProjAdjustmentCreate.Txt;
        projItemTrans.CategoryId        = _tmpProjAdjustmentCreate.CategoryId;
        projItemTrans.CurrencyId        = _tmpProjAdjustmentCreate.CurrencyId;
        projItemTrans.DefaultDimension  = _tmpProjAdjustmentCreate.DefaultDimension;
        projItemTrans.LinePropertyId    = _tmpProjAdjustmentCreate.LinePropertyId;
        projItemTrans.TaxGroupId        = _tmpProjAdjustmentCreate.TaxgroupId;
        projItemTrans.TaxItemGroupId    = _tmpProjAdjustmentCreate.TaxItemGroupId;
        projItemTrans.Qty               = _tmpProjAdjustmentCreate.Qty;
        projItemTrans.PackingSlipId     = _tmpProjAdjustmentCreate.PackingSlipId;
        projItemTrans.SalesUnit         = _tmpProjAdjustmentCreate.SalesUnit;

        projItemTrans.TransactionOrigin     = origProjItemTrans.TransactionOrigin;
        projItemTrans.VendInvoiceTransRecId = origProjItemTrans.VendInvoiceTransRecId;

        if (FeatureStateProvider::isFeatureEnabled(ProjProjectTransactionsListPageVendFeature::instance()))
        {
            projItemTrans.VendorAccount = origProjItemTrans.VendorAccount;
            projItemTrans.VendorName = origProjItemTrans.VendorName;
        }

        projItemTrans.psaProjOrigTransId    = _tmpProjAdjustmentCreate.psaProjOrigTransId;

        ProjItemTrans::populatePSAContractLineNum(projItemTrans);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            projItemTransTaxExtensionIN = projItemTrans.projItemTransTaxExtensionIN();

            projItemTransTaxExtensionIN.AssessableValueTransactionCurrency  = _tmpProjAdjustmentCreate.AssessableValue_IN;
            projItemTransTaxExtensionIN.MaximumRetailPrice                  = _tmpProjAdjustmentCreate.MaximumRetailPrice_IN;
            projItemTransTaxExtensionIN.tcsGroup                            = _tmpProjAdjustmentCreate.tcsGroup_IN;
            projItemTransTaxExtensionIN.tdsGroup                            = _tmpProjAdjustmentCreate.tdsGroup_IN;

            projItemTrans.packProjItemTrans_IN(projItemTransTaxExtensionIN);
        }
        // </GIN>

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromInventJournal</Name>
				<Source><![CDATA[
    public static ProjItemTrans initTransFromInventJournal(InventJournalTrans  _inventJournalTrans)
    {
        // <GIN>
        ProjItemTransTaxExtensionIN         projItemTransTaxExtensionIN;
        InventJournalTransTaxExtensionIN    inventJournalTransTaxExtensionIN;
        // </GIN>
        ProjItemTrans   projItemTrans;
        InventTable     inventTable;

        // <GEEHU>
        #ISOCountryRegionCodes
        // </GEEHU>

        projItemTrans.ProjTransId       = _inventJournalTrans.ProjTransId;
        projItemTrans.ProjTransIdRef    = _inventJournalTrans.ProjTransId;

        projItemTrans.ProjId            = _inventJournalTrans.ProjId;
        projItemTrans.ActivityNumber    = _inventJournalTrans.ActivityNumber;
        projItemTrans.CategoryId        = _inventJournalTrans.ProjCategoryId;

        projItemTrans.CurrencyId        = _inventJournalTrans.ProjSalesCurrencyId;
        projItemTrans.LinePropertyId    = _inventJournalTrans.ProjLinePropertyId;
        projItemTrans.TaxGroupId        = _inventJournalTrans.ProjTaxGroupId;
        projItemTrans.TaxItemGroupId    = _inventJournalTrans.ProjTaxItemGroupId;

        projItemTrans.InventTransId     = _inventJournalTrans.InventTransId;
        projItemTrans.DefaultDimension  = _inventJournalTrans.DefaultDimension;
        projItemTrans.Qty               = _inventJournalTrans.Qty;
        projItemTrans.ItemId            = _inventJournalTrans.ItemId;

        // Determine Langauge Id to use for txt
        LanguageId languageId;
        ProjTable projTable = ProjTable::find(projItemTrans.ProjId);
        if (projTable.ProjInvoiceProjId)
        {
            languageId = ProjInvoiceTable::getLanguageId(projTable.ProjInvoiceProjId);
        }
        else
        {
            languageId = CompanyInfo::languageId();
        }

        inventTable = InventTable::find(projItemTrans.ItemId);
        projItemTrans.InventDimId = InventTrans::findTransId(_inventJournalTrans.InventTransId).InventDimId;
        if (inventTable)
        {
            projItemTrans.Txt = inventTable.productName(languageId, projItemTrans.InventDimId);
        }

        if (projItemTrans.Txt == '')
        {
            projItemTrans.Txt = _inventJournalTrans.itemName();
        }

        projItemTrans.TransDate         = _inventJournalTrans.TransDate;
        projItemTrans.PackingSlipId     = '';

        projItemTrans.SalesUnit     = _inventJournalTrans.ProjUnitID;

        projItemTrans.TransactionOrigin = ProjOrigin::ItemJournal;

        ProjItemTrans::populatePSAContractLineNum(projItemTrans);

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            projItemTrans.IntrastatFulfillmentDate_HU    = _inventJournalTrans.IntrastatFulfillmentDate_HU;
        }
        // </GEEHU>

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            projItemTransTaxExtensionIN         = projItemTrans.projItemTransTaxExtensionIN();
            inventJournalTransTaxExtensionIN    = InventJournalTransTaxExtensionIN::findByinventJournalTrans(_inventJournalTrans.RecId);

            projItemTransTaxExtensionIN.AssessableValueTransactionCurrency  = inventJournalTransTaxExtensionIN.AssessableValueTransactionCurrency;
            projItemTransTaxExtensionIN.MaximumRetailPrice                  = inventJournalTransTaxExtensionIN.MaximumRetailPrice;
            projItemTransTaxExtensionIN.tcsGroup                            = inventJournalTransTaxExtensionIN.tcsGroup;
            projItemTransTaxExtensionIN.tdsGroup                            = inventJournalTransTaxExtensionIN.tdsGroup;
            projItemTransTaxExtensionIN.ServiceEventGroup                   = inventJournalTransTaxExtensionIN.ServiceEventGroup;
            projItemTrans.packProjItemTrans_IN(projItemTransTaxExtensionIN);
        }
        // </GIN>

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromInventUpd_Financial</Name>
				<Source><![CDATA[
    public static ProjItemTrans initTransFromInventUpd_Financial(InventUpd_Financial financial)
    {
        ProjItemTrans   projItemTrans;

        InventMovement inventMovement = financial.movement();

        if (ProjItemTrans::existProjTransId(inventMovement.projTransId()) || ProjTable::find(inventMovement.projId()).UseBudgeting)
        {
            projItemTrans.ProjTransId   = ProjParameters::newTransId();
        }
        else
        {
            projItemTrans.ProjTransId   = inventMovement.projTransId();
        }

        projItemTrans.ProjTransIdRef    = inventMovement.projTransId();
        projItemTrans.ProjId            = inventMovement.projId();
        projItemTrans.ActivityNumber    = inventMovement.activityNumber();
        projItemTrans.CategoryId        = inventMovement.projCategoryId();

        projItemTrans.CurrencyId        = inventMovement.projSalesCurrencyId();
        projItemTrans.LinePropertyId    = inventMovement.projLinePropertyId();
        projItemTrans.TaxGroupId        = inventMovement.projTaxGroupId();
        projItemTrans.TaxItemGroupId    = inventMovement.projTaxItemGroupId();

        projItemTrans.DefaultDimension  = inventMovement.defaultDimension();
        projItemTrans.Qty               = financial.updFinancialUnit();

        projItemTrans.ItemId            = inventMovement.itemId();
        projItemTrans.InventDimId       = inventMovement.inventDimId();
        InventTable inventTable         = InventTable::find(projItemTrans.ItemId);
        projItemTrans.Txt               = inventTable.itemName(inventMovement.inventdim());

        projItemTrans.TransDate         = financial.parmLedgerVoucher().lastTransDate();
        projItemTrans.PackingSlipId     = '';

        projItemTrans.TransactionOrigin = inventMovement.projTransactionOrigin();

        projItemTrans = ProjItemTrans::calculateProjItemSalesQty(projItemTrans, inventTable, inventMovement);

        ProjItemTrans::populatePSAContractLineNum(projItemTrans);

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePSAContractLineNum</Name>
				<Source><![CDATA[
    private static void populatePSAContractLineNum(ProjItemTrans _projItemTrans)
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            ProjInvoiceProjId contractId = ProjTable::find(_projItemTrans.ProjId).ProjInvoiceProjId;
            if (contractId)
            {
                _projItemTrans.PSAContractLineNum = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineNumForTransType(_projItemTrans.ProjId, contractId, ProjTransType::Item);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProjItemSalesQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the project item sales quantity for purchase order scenario.
    /// </summary>
    /// <param name="_projItemTrans">
    /// A buffer of the <c>ProjItemTrans</c> table.
    /// </param>
    /// <param name="_inventTable">
    /// A buffer of the <c>InventTable</c> table.
    /// </param>
    /// <param name="_inventMovement">
    /// A buffer of the <c>InventMovement</c> table.
    /// </param>
    /// <returns>
    /// The table buffer <c>ProjItemTrans</c> associated with the current record.
    /// </returns>
    private static ProjItemTrans calculateProjItemSalesQty(ProjItemTrans _projItemTrans, InventTable _inventTable, InventMovement _inventMovement)
    {
        if (_projItemTrans.TransactionOrigin == ProjOrigin::PurchaseOrder)
        {
            PurchLine purchLine = PurchLine::findProjectItemTransId(_projItemTrans.ProjTransIdRef);

            _projItemTrans.SalesUnit = purchLine.ProjSalesUnitId;

            if (_projItemTrans.SalesUnit != purchLine.PurchUnit)
            {
                _projItemTrans.SalesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_inventTable.ItemId,
																												_projItemTrans.InventDimId,
																												_projItemTrans.Qty, 
																												purchLine.PurchUnit,
																												_projItemTrans.SalesUnit, 
																												NoYes::Yes);
                                                                         
            }
            else
            {
                _projItemTrans.SalesQty = _projItemTrans.Qty;
            }
        }
        else
        {
            _projItemTrans.SalesUnit = _inventMovement.transUnitId();
            _projItemTrans.SalesQty = _projItemTrans.Qty;
        }

        return _projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromInventUpd_Physical</Name>
				<Source><![CDATA[
    public static ProjItemTrans initTransFromInventUpd_Physical(InventUpd_Physical _physical, LedgerVoucher _ledgerVoucher)
    {
        ProjItemTrans   projItemTrans;

        InventMovement inventMovement = _physical.movement();

        if (ProjItemTrans::existProjTransId(inventMovement.projTransId()) || ProjTable::find(inventMovement.projId()).UseBudgeting)
        {
            projItemTrans.ProjTransId       = ProjParameters::newTransId();
        }
        else
        {
            projItemTrans.ProjTransId       = inventMovement.projTransId();
        }

        projItemTrans.ProjTransIdRef    = inventMovement.projTransIdRef();

        projItemTrans.ProjId            = inventMovement.projId();
        projItemTrans.ActivityNumber    = inventMovement.activityNumber();
        projItemTrans.CategoryId        = inventMovement.projCategoryId();

        projItemTrans.CurrencyId        = inventMovement.projSalesCurrencyId();
        projItemTrans.LinePropertyId    = inventMovement.projLinePropertyId();
        projItemTrans.TaxGroupId        = inventMovement.projTaxGroupId();
        projItemTrans.TaxItemGroupId    = inventMovement.projTaxItemGroupId();

        projItemTrans.DefaultDimension  = inventMovement.defaultDimension();
        projItemTrans.Qty               = -_physical.updPhysicalUnit();

        projItemTrans.ItemId            = inventMovement.itemId();
        projItemTrans.InventDimId       = inventMovement.inventDimId();
        InventTable inventTable         = InventTable::find(projItemTrans.ItemId);
        projItemTrans.Txt               = inventTable.itemName(inventMovement.inventdim());

        projItemTrans.TransDate         = _ledgerVoucher.lastTransDate();
        projItemTrans.PackingSlipId     = '';

        projItemTrans.SalesUnit     = inventMovement.transUnitId();

        projItemTrans.TransactionOrigin = ProjOrigin::ProductionConsumed;

        ProjItemTrans::populatePSAContractLineNum(projItemTrans);

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromInvoiceItem</Name>
				<Source><![CDATA[
    public static ProjItemTrans initTransFromInvoiceItem(
        ProjInvoiceItem _projInvoiceItem)
    {
        ProjItemTrans   projItemTrans;

        projItemTrans.InventTransId     = _projInvoiceItem.InventTransId;

        projItemTrans.CategoryId        = _projInvoiceItem.CategoryId;
        projItemTrans.CurrencyId        = _projInvoiceItem.CurrencyId;
        projItemTrans.DefaultDimension  = _projInvoiceItem.DefaultDimension;
        projItemTrans.ProjId            = _projInvoiceItem.ProjId;
        projItemTrans.ActivityNumber    = _projInvoiceItem.ActivityNumber;
        projItemTrans.Qty               = _projInvoiceItem.Qty;
        projItemTrans.TaxGroupId        = _projInvoiceItem.TaxGroupId;
        projItemTrans.TaxItemGroupId    = _projInvoiceItem.TaxItemGroupId;
        projItemTrans.SalesUnit         = _projInvoiceItem.SalesUnit;
        projItemTrans.ItemId            = _projInvoiceItem.ItemId;
        projItemTrans.InventDimId       = _projInvoiceItem.InventDimId;

        projItemTrans.Txt               = _projInvoiceItem.Txt;
        projItemTrans.TransDate         = _projInvoiceItem.InvoiceDate;

        projItemTrans.PackingSlipId     = '';
        projItemTrans.LinePropertyId    = SalesLine::findInventTransId(_projInvoiceItem.InventTransId).ProjLinePropertyId;

        projItemTrans.TransactionOrigin = ProjOrigin::SalesOrder;

        ProjItemTrans::populatePSAContractLineNum(projItemTrans);

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromPackingSlip</Name>
				<Source><![CDATA[
    public static ProjItemTrans initTransFromPackingSlip(CustPackingSlipTrans _custPackingSlipTrans, TransDate _transDate, SalesQty _qty)
    {
        ProjItemTrans   projItemTrans;
        SalesLine       salesLine   = _custPackingSlipTrans.salesLine();
        // <GIN>
        SalesLine_IN                salesLine_IN;
        ProjItemTransTaxExtensionIN projItemTransTaxExtensionIN;
        // </GIN>

        if (ProjItemTrans::existProjTransId(salesLine.ProjTransId) || ProjTable::find(salesLine.ProjId).UseBudgeting)
        {
            projItemTrans.ProjTransId       = ProjParameters::newTransId();
        }
        else
        {
            projItemTrans.ProjTransId       = salesLine.ProjTransId;
        }

        projItemTrans.ProjTransIdRef    = salesLine.ProjTransId;
        projItemTrans.CategoryId        = salesLine.ProjCategoryId;
        projItemTrans.CurrencyId        = salesLine.CurrencyCode;
        projItemTrans.DefaultDimension  = salesLine.DefaultDimension;
        projItemTrans.ProjId            = salesLine.ProjId;
        projItemTrans.ActivityNumber    = salesLine.ActivityNumber;
        projItemTrans.LinePropertyId    = salesLine.ProjLinePropertyId;
        projItemTrans.Txt               = salesLine.Name;
        projItemTrans.TransDate         = _transDate;
        projItemTrans.TaxGroupId        = salesLine.TaxGroup;
        projItemTrans.TaxItemGroupId    = salesLine.TaxItemGroup;
        projItemTrans.ItemId            = salesLine.ItemId;
        projItemTrans.InventDimId       = salesLine.InventDimId;
        projItemTrans.InventTransId     = salesLine.InventTransId;
        projItemTrans.LedgerDimension   = salesLine.LedgerDimension;

        projItemTrans.Qty               = _qty;
        projItemTrans.SalesQty          = _qty;
        // If sales type is item requirement and initiated from purchase order product receipt,
        // updating packing slip from the vendor packing slip.
        if (SalesTable::find(_custPackingSlipTrans.SalesId).SalesType==SalesType::ItemReq)
        {
            VendPackingSlipTrans vendPackingSlipTrans;

            select firstonly PackingSlipId from vendPackingSlipTrans
                where vendPackingSlipTrans.InventTransId == salesLine.InventRefTransId
                   && vendPackingSlipTrans.ItemId == projItemTrans.ItemId
                   && vendPackingSlipTrans.Ordered == _custPackingSlipTrans.Ordered
                   && vendPackingSlipTrans.RemainInvent == _custPackingSlipTrans.RemainInvent
                   && vendPackingSlipTrans.Remain == _custPackingSlipTrans.Remain
                   && vendPackingSlipTrans.Qty != salesLine.QtyOrdered;

            if (vendPackingSlipTrans.PackingSlipId)
            {
                projItemTrans.PackingSlipId = vendPackingSlipTrans.PackingSlipId;
            }
            else
            {
                projItemTrans.PackingSlipId = '';
            }

            if (salesLine.canItemReqBeCancelled())
            {
                projItemTrans.TransIdPackSlip = strFmt(ProjConstants::ItemReqPackingSlipIdFormat, _custPackingSlipTrans.PackingSlipId, real2int(salesLine.LineNum));
            }
        }
        else
        {
            projItemTrans.PackingSlipId     = _custPackingSlipTrans.PackingSlipId;
        }

        projItemTrans.SalesUnit         = salesLine.SalesUnit;

        projItemTrans.TransactionOrigin = ProjOrigin::ItemRequirement;

        ProjItemTrans::populatePSAContractLineNum(projItemTrans);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            projItemTransTaxExtensionIN     = projItemTrans.projItemTransTaxExtensionIN();
            salesLine_IN                    = SalesLine_IN::findBySalesLine(salesLine.RecId);

            projItemTransTaxExtensionIN.AssessableValueTransactionCurrency = SalesParmLine::findRecId(_custPackingSlipTrans.ParmLine).salesParmLine_IN().AssessableValueTransactionCurrency;
            projItemTransTaxExtensionIN.MaximumRetailPrice          	    = salesLine_IN.MaximumRetailPrice;
            projItemTransTaxExtensionIN.tdsGroup                    	    = salesLine_IN.tdsGroup;
            projItemTransTaxExtensionIN.tcsGroup                    	    = salesLine_IN.tcsGroup;
            projItemTrans.packProjItemTrans_IN(projItemTransTaxExtensionIN);
        }
        // <GIN>

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromProdBOMTransProj</Name>
				<Source><![CDATA[
    public static ProjItemTrans initTransFromProdBOMTransProj(ProdBOMTransProj  _prodBOMTransProj)
    {
        ProjItemTrans   projItemTrans;

        projItemTrans.ProjTransId       = _prodBOMTransProj.ProjTransId;
        projItemTrans.ProjTransIdRef    = _prodBOMTransProj.ProjTransId;

        projItemTrans.ProjId            = _prodBOMTransProj.ProjId;
        projItemTrans.ActivityNumber    = _prodBOMTransProj.ActivityNumber;
        projItemTrans.CategoryId        = _prodBOMTransProj.ProjCategoryId;

        projItemTrans.CurrencyId        = _prodBOMTransProj.ProjSalesCurrencyId;
        projItemTrans.LinePropertyId    = _prodBOMTransProj.ProjLinePropertyId;
        projItemTrans.TaxGroupId        = _prodBOMTransProj.ProjTaxGroupId;
        projItemTrans.TaxItemGroupId    = _prodBOMTransProj.ProjTaxItemGroupId;

        projItemTrans.InventTransId     = _prodBOMTransProj.InventTransId;

        projItemTrans.DefaultDimension  = _prodBOMTransProj.DefaultDimension;
        projItemTrans.Qty               = _prodBOMTransProj.inventConsumpFromInventory(false);
        projItemTrans.Txt               = _prodBOMTransProj.itemName();

        projItemTrans.ItemId            = _prodBOMTransProj.ItemId;
        projItemTrans.InventDimId       = InventTrans::findTransId(_prodBOMTransProj.InventTransId).InventDimId;

        projItemTrans.TransDate         = _prodBOMTransProj.TransDate;
        projItemTrans.PackingSlipId     = '';

        projItemTrans.SalesUnit     = _prodBOMTransProj.ProjSalesCurrencyId;

        projItemTrans.TransactionOrigin = ProjOrigin::ProductionConsumed;

        ProjItemTrans::populatePSAContractLineNum(projItemTrans);

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromProdInvent</Name>
				<Source><![CDATA[
    public static ProjItemTrans initTransFromProdInvent(ProdTableProj  _prodTableProj, InventTransId   _inventTransId)
    {
        ProjItemTrans   projItemTrans;
        ProdTable       prodTable = ProdTable::find(_prodTableProj.ProdId);

        projItemTrans.ProjTransId       = _prodTableProj.ProjTransId;
        projItemTrans.ProjTransIdRef    = _prodTableProj.ProjTransId;

        projItemTrans.ProjId            = prodTable.ProjId;
        projItemTrans.ActivityNumber    = prodTable.ActivityNumber;
        projItemTrans.CategoryId        = _prodTableProj.ProjCategoryId;

        projItemTrans.CurrencyId        = _prodTableProj.ProjSalesCurrencyId;
        projItemTrans.LinePropertyId    = _prodTableProj.ProjLinePropertyId;
        projItemTrans.TaxGroupId        = _prodTableProj.ProjTaxGroupId;
        projItemTrans.TaxItemGroupId    = _prodTableProj.ProjTaxItemGroupId;

        projItemTrans.InventTransId     = _inventTransId;
        projItemTrans.DefaultDimension  = projItemTrans.DefaultDimension;
        switch (_prodTableProj.Type)
        {
            case ProjItemTypeProdTable::ErrorQuantity:
                projItemTrans.Qty = prodTable.qtyError();
                break;
            case ProjItemTypeProdTable::Overdelivery:
                projItemTrans.Qty = prodTable.overDelivery();
                break;
            case ProjItemTypeProdTable::Underconsumed:
                projItemTrans.Qty = _prodTableProj.Qty;
                break;
        }
        projItemTrans.Txt               = prodTable.itemName();

        projItemTrans.ItemId            = prodTable.ItemId;
        projItemTrans.InventDimId       = InventTrans::findTransId(prodTable.InventTransId).InventDimId;

        projItemTrans.TransDate         = _prodTableProj.TransDate;
        projItemTrans.PackingSlipId     = '';

        projItemTrans.SalesUnit     = _prodTableProj.ProjSalesUnitId;

        projItemTrans.TransactionOrigin = ProjOrigin::ProductionConsumed;

        ProjItemTrans::populatePSAContractLineNum(projItemTrans);

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a source document line item is for a stocked product.
    /// </summary>
    /// <param name="_inventTransId">
    /// The lot ID of the source document line item.
    /// </param>
    /// <returns>
    /// True if source document line item is for a stocked product; otherwise, false.
    /// </returns>
    public static boolean isStocked(InventTransId _inventTransId)
    {
        boolean isStocked;

        isStocked = (InventTransOrigin::findByInventTransId(_inventTransId).RecId ? true : false);

        return isStocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefTransId</Name>
				<Source><![CDATA[
    static void jumpRefTransId(
        Common  common,
        Object  object,
        str     parm = '')
    {
        Args args = new Args();
        args.record(common);
        args.caller(object);
        args.parm(parm);

        new MenuFunction(menuitemDisplayStr(ProjTransItem), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projQueryValueInventTransId</Name>
				<Source><![CDATA[
    public static str projQueryValueInventTransId(InventTransId _inventTransId, ItemId _itemId)
    {
        str                 s;
        InventRefTransId    inventRefTransId;
        InventTransOriginId inventTransOriginId;

        s = '(';
        s += '((' + fieldStr(InventTransOrigin,InventTransId)+' == \"'+_inventTransId+'\"))';

        inventTransOriginId = InventTransOrigin::findMarkingRefInventTransOrigin(InventTransOrigin::findByInventTransId(_inventTransId).RecId, _itemId, true);
        inventRefTransId = InventTransOrigin::find(inventTransOriginId).InventTransId;
        if (inventRefTransId)
        {
            s += ' || ';
            s += '((' +fieldStr(InventTransOrigin,InventTransId)+' == \"'+inventRefTransId+'\"))';
        }

        s +=')';

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaFindProjItemTrans</Name>
				<Source><![CDATA[
    // Description    : Find a split transaction after it has been created
    public static ProjItemTrans psaFindProjItemTrans(ProjItemTransId _projItemTransId,
                                                Qty             _qty)
    {
        ProjItemTrans   projItemTrans;

        select firstonly projItemTrans
            where projItemTrans.psaProjOrigTransId == _projItemTransId
                && projItemTrans.Qty                == _qty;

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountDisplayCache</Name>
				<Source><![CDATA[
    public static container salesAmountDisplayCache(
        container   _conprojItemTrans,
        container   _conprojItemTransSalesAmount,
        TransDate   _ledgerFromDate,
        TransDate   _ledgerToDate)
    {
        ProjItemTrans    projItemTrans;
        Set              setprojItemTrans;
        Map              mapprojItemTransSalesAmount;
        SetIterator      si;

        if (_conprojItemTrans)
        {
            setprojItemTrans = Set::create(_conprojItemTrans);
        }
        if (_conprojItemTransSalesAmount)
        {
            mapprojItemTransSalesAmount = Map::create(_conprojItemTransSalesAmount);
        }

        si = new SetIterator(setprojItemTrans);
        si.begin();
        while (si.more())
        {
            projItemTrans = ProjItemTrans::find(si.value());
            mapprojItemTransSalesAmount.insert(si.value(), projItemTrans.salesAmount(projItemTrans,_ledgerFromDate,_ledgerToDate));
            si.next();
        }

        return mapprojItemTransSalesAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitNeverLedger</Name>
				<Source><![CDATA[
    public static void splitNeverLedger(InventTransId _inventTransId, ProjAdjustRefId _projAdjustRefId, Voucher _voucher = '')
    {
        ProjItemTrans       projItemTrans;
        ProjItemTrans       projItemTransUpdate;
        ProjItemTransCost   projItemTransCostDelete;
        ProjItemTransCost   projItemTransCostNew;
        ProjItemTransSale   projItemTransSale;
        SalesLineAmount     lineAmount;
        real                percentOfSale;
        ProjTrans           projTransHeader;
        ProjFundingEngine   projFundingEngine;
        Map                 newProjItemTransCost;
        MapEnumerator       enumerateMap;
        ProjLedger          projLedger;
        ProjTotalCostAmount projTotalCostAmount;
        ProjTransPosting    projTransPosting;
        boolean             updateTotalCostAmountCur = false;

        SalesLineAmount calcLineAmount(ProjItemTransSale _projItemTransSale)
        {
            return PriceDisc::price2Amount(
                _projItemTransSale.SalesPrice,
                projItemTrans.inventTable().salesPriceUnit(),
                0,
                (projItemTrans.Qty ? projItemTrans.Qty : 1),
                0,
                0,
                0,
                projItemTrans.CurrencyId,
                0,
                false);
        }

        projItemTrans = ProjItemTrans::findInvent(_inventTransId, _projAdjustRefId);

        while select projItemTransSale where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
        {
            lineAmount += calcLineAmount(projItemTransSale);
        }

        delete_from projTransPosting
            where projTransPosting.TransId == projItemTrans.ProjTransId &&
                  projTransPosting.PostingType == LedgerPostingType::ProjNeverLedger &&
                  (!_voucher || projTransPosting.Voucher == _voucher);

        while select forupdate projItemTransCostDelete
            where projItemTransCostDelete.InventTransId == projItemTrans.InventTransId &&
            projItemTransCostDelete.ProjAdjustRefId == projItemTrans.ProjAdjustRefId &&
            projItemTransCostDelete.LedgerStatusCost == ProjLedgerStatus::Never
        {
            updateTotalCostAmountCur = true;
            if ((!_voucher) || (_voucher && projItemTransCostDelete.Voucher == _voucher))
            {
                if (lineAmount != 0)
                {
                    while select projItemTransSale where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                    {
                        percentOfSale = calcLineAmount(projItemTransSale) / lineAmount;

                        projItemTransCostNew.clear();
                        projItemTransCostNew.data(projItemTransCostDelete);
                        projItemTransCostNew.RecId = 0;
                        projItemTransCostNew.AmountMST = CurrencyExchangeHelper::amount(projItemTransCostDelete.AmountMST * percentOfSale);
                        projItemTransCostNew.LineAmount = CurrencyExchangeHelper::amount(projItemTransCostDelete.LineAmount * percentOfSale);
                        projItemTransCostNew.FundingSource = projItemTransSale.FundingSource;
                        projTotalCostAmount += projItemTransCostNew.LineAmount;
                        projItemTransCostNew.insert();

                        projLedger = ProjLedger::newInventCostAdjust(projItemTransCostNew.ProjId,projItemTransCostNew.InventTransId,projItemTransCostNew.ProjAdjustRefId,
                                                                          projItemTrans.TransactionOrigin,true);
                        projLedger.parmfundingSourceID(projItemTransCostNew.FundingSource);

                        if (projLedger)
                        {
                            ProjLedgerUpdate::newNeverLedger(projLedger,
                                                            LedgerPostingType::ProjNeverLedger,
                                                            projItemTrans.DefaultDimension,
                                                            projItemTransCostDelete.Voucher,
                                                            projItemTransCostDelete.LedgerTransdate,
                                                            projItemTransCostNew.AmountMST).insert();
                        }
                    }
                }
                else
                {
                    // Allocate by cost amount
                    if (projItemTransCostDelete.AmountMST != 0)
                    {
                        projTransHeader = ProjTrans::newProjItemTrans(projItemTrans);
                        projFundingEngine = ProjFundingEngine::construct(projTransHeader, projItemTransCostDelete.AmountMST , 0);

                        if ( projFundingEngine.allocate())
                        {
                            newProjItemTransCost = projFundingEngine.parmCostDistributions();
                            enumerateMap = new MapEnumerator(newProjItemTransCost);
                            while (enumerateMap.moveNext())
                            {
                                projItemTransCostNew.clear();
                                projItemTransCostNew.data(projItemTransCostDelete);
                                projItemTransCostNew.RecId = 0;
                                projItemTransCostNew.AmountMST = CurrencyExchangeHelper::amount(enumerateMap.currentValue());
                                projItemTransCostNew.LineAmount = CurrencyExchangeHelper::amount(enumerateMap.currentValue());
                                projItemTransCostNew.FundingSource = enumerateMap.currentKey();
                                projTotalCostAmount += projItemTransCostNew.LineAmount;
                                projItemTransCostNew.insert();

                                projLedger      = ProjLedger::newInventCostAdjust(projItemTransCostNew.ProjId,projItemTransCostNew.InventTransId,projItemTransCostNew.ProjAdjustRefId,
                                                                                  projItemTrans.TransactionOrigin,true);
                                projLedger.parmfundingSourceID(projItemTransCostNew.FundingSource);

                                if (projLedger)
                                {
                                    ProjLedgerUpdate::newNeverLedger(projLedger,
                                                                    LedgerPostingType::ProjNeverLedger,
                                                                    projItemTrans.DefaultDimension,
                                                                    projItemTransCostDelete.Voucher,
                                                                    projItemTransCostDelete.LedgerTransdate,
                                                                    projItemTransCostNew.AmountMST).insert();
                                }
                            }
                        }
                        else
                        {
                            throw Global::error("@SYS136842");
                        }
                    }
                }

                projItemTransCostDelete.delete();
            }
            else
            {
                projTotalCostAmount += projItemTransCostDelete.LineAmount;
            }
        }

        if (updateTotalCostAmountCur)
        {
            projItemTransUpdate = ProjItemTrans::findInvent(_inventTransId, _projAdjustRefId, true);
            projItemTransUpdate.TotalCostAmountCur = projTotalCostAmount;
            projItemTransUpdate.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionOriginToItemType</Name>
				<Source><![CDATA[
    public static ProjItemType transactionOriginToItemType(ProjOrigin _projOrigin)
    {
        ProjItemType itemType;

        switch (_projOrigin)
        {
            case ProjOrigin::ItemJournal:
                itemType = ProjItemType::InventJournal;
                break;
            case ProjOrigin::PurchaseOrder:
                itemType = ProjItemType::PurchOrder;
                break;
            case ProjOrigin::VendorInvoice:
                itemType = ProjItemType::VendorInvoice;
                break;
            case ProjOrigin::ItemRequirement:
                itemType = ProjItemType::Project;
                break;
            case ProjOrigin::SalesOrder:
                itemType = ProjItemType::SalesOrder;
                break;
            case ProjOrigin::ProductionConsumed:
                itemType = ProjItemType::ProdLine;
                break;
            case ProjOrigin::ProductionFinished:
                itemType = ProjItemType::Production;
                break;
            case ProjOrigin::BeginningBalance:
                itemType = ProjItemType::BeginningBalance;
                break;
        }
        return itemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceTotal</Name>
				<Source><![CDATA[
    display ProjTotalCostAmount costPriceTotal()
    {
        ProjTrans   projTrans;

        projTrans = ProjTrans::newProjItemTrans(this);

        return CurrencyExchangeHelper::amount( (projTrans.transCostMST()), projTrans.currencyIdCost());
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxEngineProjItemTransHeader</c> object.
    /// </summary>
    /// <returns>
    /// The <c>TaxEngineProjItemTransHeader</c> object.
    /// </returns>
    public TaxEngineProjItemTransHeader salesPurchJournalTable()
    {
        ProjProposalJour projProposalJour;
        ProjProposalItem projProposalItem;

        select firstOnly RecId from projProposalJour
            join RecId from projProposalItem
                where projProposalItem.ProposalId == projProposalJour.ProposalId
                    && projProposalItem.ProjTransId == this.ProjTransId;

        return TaxEngineProjItemTransHeader::findOrCreateByProjProposalJour(projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionReturned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the related inventory transaction affected physical on-hand and was returned.
    /// </summary>
    /// <returns>
    /// True if the transaction was returned, partially or completely, false otherwise.
    /// </returns>
    public boolean isTransactionReturned()
    {
        if (!this.InventTransId)
        {
            return false;
        }

        InventTransOrigin inventTransOrigin;
        InventTrans inventTrans;

        select firstonly RecId
        from inventTransOrigin
            where inventTransOrigin.InventTransId == this.InventTransId
        join RecId from inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            && inventTrans.StatusIssue != StatusIssue::None
            && inventTrans.StatusIssue <= StatusIssue::Picked
            && inventTrans.ReturnInventTransOrigin != 0;

        return inventTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124997</DeveloperDocumentation>
	<FormRef>ProjTransItem</FormRef>
	<Label>@SYS50258</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProjDateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>TransIdx</PrimaryIndex>
	<ReplacementKey>TransIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingSlipId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costAmountTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPriceTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS14204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>proposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>invoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Items</Name>
			<Label>@SYS15649</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingSlipId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjAdjustRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemType</Name>
			<Label>@SYS26398</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAProjOrigTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAContractLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>lineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ledgerSalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS80400</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherPackingSlip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdjRefTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<Label>@SYS115827</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Label>@SYS83514</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCorrection</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerCorrection</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingSlipId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PackingSlipId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjAdjustRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjAdjustRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransIdRef</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
			<Label>@SYS71999</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAContractLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAProjOrigTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAProjOrigTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalCostAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTotalCostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalSalesAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTotalSalesAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransactionOrigin</ExtendedDataType>
			<EnumType>ProjOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
			<Label>@SYS13566</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoucherPackingSlip</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransactionVoucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorAccount</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorName</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>VendName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubcontractLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSubcontractLine</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionGroupId</Name>
			<ExtendedDataType>ProjTransactionGroupId</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransIdPackSlip</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjTransIdPackSlip</ExtendedDataType>
			<Label>@Proj:TransIdPackSlip</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PackingSlipId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AdjRefTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AdjRefTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInvoiceTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumber</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjTransIdRef</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjTransIdRef</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjTransId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransactionGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdPackSlipIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransIdPackSlip</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjAdjustRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Qty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherPackingSlipIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>VoucherPackingSlip</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ProjProposalTransMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransTxt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PSAProjTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Amount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyId</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsReleased</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsRetained</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePropertyId</MapField>
					<MapFieldTo>LinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesQty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroupId</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroupId</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionOrigin</MapField>
					<MapFieldTo>TransactionOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransStatus</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjItemTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim_1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjItemTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjItemTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemIdSmall</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_ProjItemTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans_AdjRefTransId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjItemTrans_AdjRefTransId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjItemTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdjRefTransId</Name>
					<SourceEDT>ProjItemTransId</SourceEDT>
					<Field>AdjRefTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans_ProjTransIdRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjItemTrans_ProjTransIdRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjItemTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransIdRef</Name>
					<SourceEDT>ProjItemTransId</SourceEDT>
					<Field>ProjTransIdRef</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjItemTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAContractLineItems</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PSAContractLineItems</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAContractLineNum</Name>
					<SourceEDT>PSAContractLineNum</SourceEDT>
					<Field>PSAContractLineNum</Field>
					<RelatedField>ContractLineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContractLineNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnit</Name>
					<Field>SalesUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>TaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjItemTrans</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceTrans</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceTransRecId</Name>
					<Field>VendInvoiceTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorAccount</Name>
					<Field>VendorAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirPartyTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorName</Name>
					<Field>VendorName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>