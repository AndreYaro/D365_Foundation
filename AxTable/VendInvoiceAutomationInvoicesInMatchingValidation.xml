<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationInvoicesInMatchingValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceAutomationInvoicesInMatchingValidation extends common
{
    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>waitOnRetry</Name>
				<Source><![CDATA[
    private static int waitOnRetry()
    {
        // Generates a random wait time between retries to ensure that any conflicting threads attempt retries on different intervals.
        return RandomGenerate::construct().randomInt(50, 1000);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMatchingValidationRecordsFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a given set of invoices into the automatic matching validation work table,
    /// ensuring that these invoices are not picked up by other automatic matching validation processes.
    /// </summary>
    /// <param name = "_invoicesToInsert">
    /// A temp table containing invoice RecIds to be inserted.
    /// </param>
    internal static void insertMatchingValidationRecordsFor(VendInvoiceAutomationInvoiceTmp _invoicesToInsert)
    {
        int waitOnRetry = VendInvoiceAutomationInvoicesInMatchingValidation::waitOnRetry();
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        VendInvoiceAutomationInvoicesInMatchingValidation invoicesStagedForAutoMatchingValidation;
        VendInvoiceAutomationInstrumentationMatchingValidationActivities instrumentationMatchingValidationActivities =
            VendInvoiceAutomationInstrumentationMatchingValidationActivities::createFromLoggerName(
            tableStr(VendInvoiceAutomationInvoicesInMatchingValidation));

        using (var activityContext = instrumentationMatchingValidationActivities.insertMatchingValidationRecordsReadyContext())
        {
            VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties = VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(activityContext);

            try
            {
                ttsbegin;

                invoicesStagedForAutoMatchingValidation.skipDataMethods(true);
                invoicesStagedForAutoMatchingValidation.skipDatabaseLog(true);
                invoicesStagedForAutoMatchingValidation.skipEvents(true);

                insert_recordset invoicesStagedForAutoMatchingValidation(VendInvoiceRecId, VendInvoiceDataAreaId)
                select VendInvoiceRecId, VendInvoiceDataAreaId from _invoicesToInsert;

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                int currentRetryCount = xSession::currentRetryCount();

                if (currentRetryCount >= #RetryNum)
                {
                    errorProperties.deadLockProperty(_invoicesToInsert.VendInvoiceRecId);
                }
                else
                {
                    sleep(currentRetryCount * waitOnRetry);
                    retry;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                errorProperties.duplicateKeyProperty(_invoicesToInsert.VendInvoiceRecId);
            }
            catch (errorException)
            {
                errorProperties.exceptionProperty( _invoicesToInsert.VendInvoiceRecId, errorException.ToString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMatchingValidationRecordsFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all given invoices from the automatic matching validation work table, freeing up these invoices
    /// to be picked up by a future matching validation process if applicable.
    /// </summary>
    /// <param name = "_invoicesToRemove">
    /// A temp table containing invoice RecIds to remove.
    /// </param>
    internal static void removeMatchingValidationRecordsFor(VendInvoiceAutomationInvoiceTmp _invoicesToRemove)
    {
        int waitOnRetry = VendInvoiceAutomationInvoicesInMatchingValidation::waitOnRetry();
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        VendInvoiceAutomationInvoicesInMatchingValidation invoicesInMatchingValidation;
        VendInvoiceAutomationInstrumentationMatchingValidationActivities instrumentationMatchingValidationActivities =
            VendInvoiceAutomationInstrumentationMatchingValidationActivities::createFromLoggerName(
            tableStr(VendInvoiceAutomationInvoicesInMatchingValidation));

        using (var activityContext = instrumentationMatchingValidationActivities.removeMatchingValidationRecordsContext())
        {
            VendInvoiceAutomationInstrumentationDbErrorProperties errorProperties = VendInvoiceAutomationInstrumentationDbErrorProperties::constructFromActivityContext(activityContext);

            try
            {
                ttsbegin;
            
                invoicesInMatchingValidation.skipDataMethods(true);
                invoicesInMatchingValidation.skipDatabaseLog(true);
                invoicesInMatchingValidation.skipEvents(true);

                delete_from invoicesInMatchingValidation
                exists join _invoicesToRemove
                    where _invoicesToRemove.VendInvoiceRecId == invoicesInMatchingValidation.VendInvoiceRecId
                        && _invoicesToRemove.VendInvoiceDataAreaId == invoicesInMatchingValidation.VendInvoiceDataAreaId;

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                int currentRetryCount = xSession::currentRetryCount();

                if (currentRetryCount >= #RetryNum)
                {
                    errorProperties.deadLockProperty(_invoicesToRemove.VendInvoiceRecId);
                }
                else
                {
                    sleep(currentRetryCount * waitOnRetry);
                    retry;
                }
            }
            catch (errorException)
            {
                errorProperties.exceptionProperty(_invoicesToRemove.VendInvoiceRecId, errorException.ToString());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@AccountsPayable:VendInvoiceAutomationInvoicesInMatchingValidationHelpText</DeveloperDocumentation>
	<Label>@AccountsPayable:VendInvoiceAutomationInvoicesInMatchingValidationLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>VendInvoiceRecId</TitleField1>
	<Visibility>Internal</Visibility>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceRecId</Name>
			<ExtendedDataType>VendInvoiceInfoTableRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceDataAreaId</Name>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendInvoiceRecId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>