<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCostPriceExpense</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCostPriceExpense extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret;

        ret = super(p1);

        switch (p1)
        {
            case(fieldNum(ProjCostPriceExpense, CategoryId)):
                if (this.CategoryId)
                {
                    if (ProjCategory::find(this.CategoryId).CategoryType != ProjCategoryType::Cost)
                    {
                        return checkFailed(strFmt("@SYS56468",ProjTransType::Cost));
                    }
                }

            case(fieldNum(ProjCostPriceExpense, Resource)):
                ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);
                break;

            case(fieldNum(ProjCostPriceExpense, PSAProjInvoiceProjId)):
                if (this.PSAProjInvoiceProjId)
                {
                    ret = ret && ProjInvoiceTable::validateContractAgainstCustomer(this.PSAProjInvoiceProjId, this.PSACustAccount);
                }
                break;

            case(fieldNum(ProjCostPriceExpense, ProjId)):
                if (this.ProjId)
                {
                    ret = ret && ProjTable::validateProjectAgainstContractOrCustomer(this.PSAProjInvoiceProjId, this.PSACustAccount, this.ProjId);
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPriceParametersForFind</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a <c>ProjPriceParameters</c> parameter class based on the signature of <c>ProjCostPriceExepense::find</c>
    /// </summary>
    /// <param name = "_projId">Project ID to search with (<c>parmProjId</c>).</param>
    /// <param name = "_resource">Resource record ID to search with (<c>parmResourceRecId</c>).</param>
    /// <param name = "_categoryId">Category ID to search with (<c>parmResourceCategoryId</c>).</param>
    /// <param name = "_transDate">Transaction date to search with (<c>parmTransDate</c>).</param>
    /// <param name = "_spsaCustAccount">Customer account to search with (<c>parmCustAccount</c>).</param>
    /// <param name = "_spsaProjInvoiceProjId">Project invoice ID to search with (<c>parmProjInvoiceProjId</c>).</param>
    /// <param name = "_spsaPriceGroupId">Price group ID to search with (<c>parmProjPriceGroupId</c>).</param>
    /// <returns>A parameter class for use with <c>ProjCostPriceExpense::find</c></returns>A></returns>
	public static ProjPriceParameters constructPriceParametersForFind(
        ProjId              _projId,
        ResourceRecId       _resource,
        ProjCategoryId      _categoryId,
        TransDate           _transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        CustAccount         _spsaCustAccount = "",
        ProjInvoiceProjId   _spsaProjInvoiceProjId = "",
        ProjPriceGroupID    _spsaPriceGroupId = "")
    {
        ProjPriceParameters priceParams = ProjPriceParameters::construct();
        priceParams.parmProjId(_projId);
        priceParams.parmResourceRecId(_resource);
        priceParams.parmProjCategoryId(_categoryId);
        priceParams.parmTransDate(_transDate);
        priceParams.parmCustAccount(_spsaCustAccount);
        priceParams.parmProjInvoiceProjId(_spsaProjInvoiceProjId);
        priceParams.parmProjPriceGroupID(_spsaPriceGroupId);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a project expense cost price record.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>ProjPriceParameters</c> containing the search criteria.</param>
    /// <param name = "_forUpdate>Whether to select the record for update.</param>
    /// <returns>A <c>ProjCostPriceExpense</c> record.</returns>
    [Replaceable]
    public static ProjCostPriceExpense findByPriceParameters(ProjPriceParameters _parameters, boolean _forUpdate = false)
    {
        ProjCostPriceExpense projCostPriceExpense = null;

        projCostPriceExpense.selectForUpdate(_forUpdate);

        select firstonly reverse projCostPriceExpense
            where projCostPriceExpense.ProjId      == _parameters.parmProjId()     &&
                  projCostPriceExpense.Resource    == _parameters.parmResourceRecId()  &&
                  projCostPriceExpense.CategoryId  == _parameters.parmProjCategoryId() &&
                  projCostPriceExpense.psaCustAccount          == _parameters.parmCustAccount()       &&
                  projCostPriceExpense.psaProjInvoiceProjId    == _parameters.parmProjInvoiceProjId() &&
                  projCostPriceExpense.psaPriceGroupId         == _parameters.parmProjPriceGroupID()      &&
                  projCostPriceExpense.TransDate   <= _parameters.parmTransDate();

        return projCostPriceExpense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
    /// Find a project expense cost price record.
    /// </summary>
    /// <param name = "_projId">Project ID to search with.</param>
    /// <param name = "_resource">Resource record ID to search with.</param>
    /// <param name = "_categoryId">Category ID to search with.</param>
    /// <param name = "_transDate">Transaction date to search with.</param>
    /// <param name = "_spsaCustAccount">Customer account to search with.</param>
    /// <param name = "_spsaProjInvoiceProjId">Project invoice ID to search with.</param>
    /// <param name = "_spsaPriceGroupId">Price group ID to search with.</param>
    /// <param name = "_forUpdate">Whether to select the record for update.</param>
    /// <returns>A <c>ProjCostPriceExpense</c> record.</returns>
	[SysObsolete("This method has been made obsolete, please use ProjCostPriceExpense::findByPriceParameters instead for extensibility.", false, 02\08\2018)]
    public static ProjCostPriceExpense find(
        ProjId              _projId,
        ResourceRecId       _resource,
        ProjCategoryId      _categoryId,
        TransDate           _transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        CustAccount         _spsaCustAccount = "",
        ProjInvoiceProjId   _spsaProjInvoiceProjId = "",
        ProjPriceGroupID    _spsaPriceGroupId = "",
        boolean             _forUpdate = false)
    {
        ProjPriceParameters priceParams = ProjCostPriceExpense::constructPriceParametersForFind(_projId, _resource, _categoryId, _transDate, _spsaCustAccount, _spsaProjInvoiceProjId, _spsaPriceGroupId);
        return ProjCostPriceExpense::findByPriceParameters(priceParams, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPriceParametersForFindCostPrice</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a <c>ProjPriceParameters</c> instance based on the signature of <c>ProjCostPriceExpense::findCostPrice</c>.
    /// </summary>
    /// <param name = "_projId">Project ID to search with (<c>parmProjId</c>).</param>
    /// <param name = "_resource">Resource record ID to search with (<c>parmResourceRecId</c>).</param>
    /// <param name = "_categoryID">Category ID to search with (<c>parmProjCategoryId</c>).</param>
    /// <param name = "_transDate">Transaction date to search with (<c>parmTransDate</c>).</param>
    /// <param name = "_projInvoiceProjId">Project invoice ID to search with (<c>parmProjInvoiceProjId</c>).</param>
    /// <param name = "_custAccount">Customer account to search with (<c>parmCustAccount</c>).</param>
    /// <returns>A <c>ProjPriceParameters</c> instance for use with <c>ProjCostPriceExpense::findCostPriceByPriceParameters</c></returns>
    public static ProjPriceParameters constructPriceParametersForFindCostPrice(
        ProjId              _projId,
        ResourceRecId       _resource,
        ProjCategoryId      _categoryID,
        TransDate           _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjInvoiceProjId   _projInvoiceProjId ='',
        CustAccount         _custAccount = '')
    {
        ProjPriceParameters priceParams = ProjPriceParameters::construct();
        priceParams.parmProjId(_projId);
        priceParams.parmResourceRecId(_resource);
        priceParams.parmProjCategoryId(_categoryID);
        priceParams.parmTransDate(_transDate);
        priceParams.parmProjInvoiceProjId(_projInvoiceProjId);
        priceParams.parmCustAccount(_custAccount);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostPriceByPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find project expense cost prices.
    /// </summary>
    /// <param name = "_parameters">An instance of ProjPriceParameters containing the search criteria.</param>
    /// <returns>The cost price.</returns>
    [Replaceable]
    public static CostPrice findCostPriceByPriceParameters(ProjPriceParameters _parameters)
    {
        ProjPriceParameters priceParams;
        ProjCostPriceExpense projCostPriceExpense;
        ProjId projId = _parameters.parmProjId();
        ProjInvoiceProjId projInvoiceProjId = _parameters.parmProjInvoiceProjId();
        CustAccount custAccount = _parameters.parmCustAccount();

        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(tableStr(ProjCostPriceExpense));

        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(tableStaticMethodStr(ProjCostPriceExpense, findCostPriceByPriceParameters)))
        {

            if (projId)
            {
                if (!custAccount)
                {
                    custAccount = ProjTable::find(projId).CustAccount;
                }
                if (!projInvoiceProjId)
                {
                    projInvoiceProjId = ProjTable::find(projId).ProjInvoiceProjId;
                }
            }

            int loopCount = 0;
            int findCount = 0;

            do
            {
                loopCount++;

                if (projId && _parameters.parmResourceRecId() && _parameters.parmProjCategoryId())
                {
                    findCount++;
                    priceParams = ProjCostPriceExpense::constructPriceParametersForFind(projId, _parameters.parmResourceRecId(), _parameters.parmProjCategoryId(), _parameters.parmTransDate());
                    projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                }

                if (!projCostPriceExpense)
                {
                    if (projId && _parameters.parmResourceRecId())
                    {
                        findCount++;
                        priceParams = ProjCostPriceExpense::constructPriceParametersForFind(projId, _parameters.parmResourceRecId(), '', _parameters.parmTransDate());
                        projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                    }

                    if (!projCostPriceExpense)
                    {
                        if (projId && _parameters.parmProjCategoryId())
                        {
                            findCount++;
                            priceParams = ProjCostPriceExpense::constructPriceParametersForFind(projId, 0, _parameters.parmProjCategoryId(), _parameters.parmTransDate());
                            projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                        }
                        if (!projCostPriceExpense)
                        {
                            if (projId)
                            {
                                findCount++;
                                priceParams = ProjCostPriceExpense::constructPriceParametersForFind(projId, 0, '', _parameters.parmTransDate());
                                projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                            }

                            if (!projCostPriceExpense)
                            {
                                if (projInvoiceProjId && _parameters.parmResourceRecId() && _parameters.parmProjCategoryId())
                                {
                                    findCount++;
                                    priceParams = ProjCostPriceExpense::constructPriceParametersForFind('',_parameters.parmResourceRecId(),_parameters.parmProjCategoryId(),_parameters.parmTransDate(),'',projInvoiceProjId);
                                    projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                }
                                if (!projCostPriceExpense)
                                {
                                    if (projInvoiceProjId && _parameters.parmResourceRecId())
                                    {
                                        findCount++;
                                        priceParams = ProjCostPriceExpense::constructPriceParametersForFind('',_parameters.parmResourceRecId(),'',_parameters.parmTransDate(),'',projInvoiceProjId);
                                        projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                    }
                                    if (!projCostPriceExpense)
                                    {
                                        if (projInvoiceProjId && _parameters.parmProjCategoryId())
                                        {
                                            findCount++;
                                            priceParams = ProjCostPriceExpense::constructPriceParametersForFind('', 0, _parameters.parmProjCategoryId(), _parameters.parmTransDate(),'',projInvoiceProjId);
                                            projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                        }
                                        if (!projCostPriceExpense)
                                        {
                                            if (projInvoiceProjId)
                                            {
                                                findCount++;
                                                priceParams = ProjCostPriceExpense::constructPriceParametersForFind('',0,'',_parameters.parmTransDate(),'',projInvoiceProjId);
                                                projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                            }
                                            if (!projCostPriceExpense)
                                            {
                                                if (custAccount && _parameters.parmResourceRecId() && _parameters.parmProjCategoryId())
                                                {
                                                    findCount++;
                                                    priceParams = ProjCostPriceExpense::constructPriceParametersForFind('',_parameters.parmResourceRecId(),_parameters.parmProjCategoryId(),_parameters.parmTransDate(),custAccount);
                                                    projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                                }
                                                if (!projCostPriceExpense)
                                                {
                                                    if (custAccount && _parameters.parmResourceRecId())
                                                    {
                                                        findCount++;
                                                        priceParams = ProjCostPriceExpense::constructPriceParametersForFind('',_parameters.parmResourceRecId(),'',_parameters.parmTransDate(),custAccount);
                                                        projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                                    }
                                                    if (!projCostPriceExpense)
                                                    {
                                                        if (custAccount && _parameters.parmProjCategoryId())
                                                        {
                                                            findCount++;
                                                            priceParams = ProjCostPriceExpense::constructPriceParametersForFind('', 0, _parameters.parmProjCategoryId(), _parameters.parmTransDate(),custAccount);
                                                            projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                                        }
                                                        if (!projCostPriceExpense)
                                                        {
                                                            if (custAccount)
                                                            {
                                                                findCount++;
                                                                priceParams = ProjCostPriceExpense::constructPriceParametersForFind('',0,'',_parameters.parmTransDate(),custAccount);
                                                                projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                                            }

                                                            if (!projCostPriceExpense)
                                                            {
                                                                if (_parameters.parmResourceRecId() && _parameters.parmProjCategoryId())
                                                                {
                                                                    findCount++;
                                                                    priceParams = ProjCostPriceExpense::constructPriceParametersForFind('', _parameters.parmResourceRecId(), _parameters.parmProjCategoryId(), _parameters.parmTransDate());
                                                                    projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                                                }
                                                                if (!projCostPriceExpense)
                                                                {
                                                                    if (_parameters.parmResourceRecId())
                                                                    {
                                                                        findCount++;
                                                                        priceParams = ProjCostPriceExpense::constructPriceParametersForFind('', _parameters.parmResourceRecId(), '', _parameters.parmTransDate());
                                                                        projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                                                    }

                                                                    if (!projCostPriceExpense)
                                                                    {
                                                                        if (_parameters.parmProjCategoryId() && _parameters.parmProjPriceGroupID())
                                                                        {
                                                                            findCount++;
                                                                            priceParams = ProjCostPriceExpense::constructPriceParametersForFind('', 0, _parameters.parmProjCategoryId(), _parameters.parmTransDate(), '', '', _parameters.parmProjPriceGroupID());
                                                                            projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                                                        }
                 
                                                                        if (!projCostPriceExpense && _parameters.parmProjCategoryId())
                                                                        {
                                                                            findCount++;
                                                                            priceParams = ProjCostPriceExpense::constructPriceParametersForFind('', 0, _parameters.parmProjCategoryId(), _parameters.parmTransDate());
                                                                            projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                                                        }

                                                                        if (!projCostPriceExpense)
                                                                        {
                                                                            findCount++;
                                                                            priceParams = ProjCostPriceExpense::constructPriceParametersForFind('', 0, '', _parameters.parmTransDate());
                                                                            projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                projId  = ProjTable::find(projId).ParentId;

                if (projId && !projCostPriceExpense.ProjId)
                {
                    findCount++;
                    priceParams = ProjCostPriceExpense::constructPriceParametersForFind(ProjId, _parameters.parmResourceRecId(), _parameters.parmProjCategoryId(), _parameters.parmTransDate());
                    projCostPriceExpense = ProjCostPriceExpense::findByPriceParameters(priceParams);
                }
            }
            while (!projCostPriceExpense && projId); // End - Do / While

            activityContext.addCustomProperty('loopCount', any2Str(loopCount));
            activityContext.addCustomProperty('findCount', any2Str(findCount));
            activityContext.addCustomProperty('projCostPriceExpense.RecId', any2Str(projCostPriceExpense.RecId));
        }

        return projCostPriceExpense.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostPrice</Name>
				<Source><![CDATA[
	/// <summary>
    /// Find project expense cost prices.
    /// </summary>
    /// <param name = "_projId">Project ID to search with.</param>
    /// <param name = "_resource">Resource record ID to search with.</param>
    /// <param name = "_categoryID">Category ID to search with.</param>
    /// <param name = "_transDate">Transaction date to search with.</param>
    /// <param name = "_projInvoiceProjId">Project invoice ID to search with.</param>
    /// <param name = "_custAccount">Customer account to search with.</param>
    /// <returns>The cost price.</returns>
	[SysObsolete("This method has been made obsolete, please use ProjCostPriceExpense::findCostPriceByPriceParameters instead for extensibility.", false, 02\08\2018)]
    public static CostPrice findCostPrice(
        ProjId              _projId,
        ResourceRecId       _resource,
        ProjCategoryId      _categoryID,
        TransDate           _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjInvoiceProjId   _projInvoiceProjId ='',
        CustAccount         _custAccount = '')
    {
        ProjPriceParameters priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(_projId, _resource, _categoryID, _transDate, _projInvoiceProjId, _custAccount);
        return ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
	/// <summary>
    /// Called when a buffer is inserted as a new record.
    /// This is overriden to ensure that the ExtensionHash field is calculated before insertion into the database.
    /// </summary>
    public void insert()
    {
        // Compute the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjCostPriceExpense::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
	/// <summary>
    /// Called when a buffer is updated in a transaction.
    /// This is override to ensure that the ExtensionHash field is calculated before insertion into the database.
    /// </summary>
    public void update()
    {
        // Update the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjCostPriceExpense::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enumerates extension fields of this table, by registering them with the '_hashCalculator' object.
    /// This is the the intended CoC extension point for table extensions to register fields included in the hash.
    /// </summary>
    public static void getExtensionFields(ProjExtensionHashCalculator _hashCalculator)
    {
        // ex: _hashCalculator.addExtensionField(fieldNum(ProjCostPriceExpense, MyCustomField), defaultFieldValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124881</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>ProjCostPriceExpense</FormRef>
	<Label>@SYS92919</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>ProjId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProjEmplCatDateIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSACustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAPriceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSACustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAPriceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DEL_EmplId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects60</ConfigurationKey>
			<ExtendedDataType>DEL_EmplId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DEL_PSAWrkCtrId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects60</ConfigurationKey>
			<ExtendedDataType>PSAWrkCtrId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSACustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAPriceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPriceGroupID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS50168</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtensionHash</Name>
			<ExtendedDataType>ProjExtensionHash</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjEmplCatDateIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSACustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSAPriceGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExtensionHash</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSACustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>PSACustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscGroup_ProjCostPriceExpense</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAPriceGroupId</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<Field>PSAPriceGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjCategory_ProjCostPriceExpense</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>PSAProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjTable_ProjCostPriceExpense</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>