<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollWorkPeriod extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isLastWorkPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>PayrollWorkPeriod</c> PeriodEndDate is the oldest work period in the cycle.
    /// </summary>
    /// <param name="_workPeriod">
    /// The <c>PayrollWorkPeriod</c> PeriodEndDate to be checked.
    /// </param>
    /// <returns>
    /// true if the <c>PayrollWorkPeriod</c> PeriodEndDate is the last pay period in the cycle, otherwise, false.
    /// </returns>
    public boolean isLastWorkPeriod(PayrollWorkPeriodRecId _workPeriod)
    {
        PayrollWorkPeriod    workPeriod;
        boolean             ret = false;

        // Get the period related to the current Cycle
        select firstonly RecId from workPeriod
            order PeriodEndDate desc
            where workPeriod.WorkCycle == this.WorkCycle;

        ret = workPeriod.RecId ==_workPeriod;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>PayrollWorkPeriod</c> table; if not, an error.
    /// message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollWorkPeriodRecId _recId)
    {
        boolean ret = true;

        if (!PayrollWorkPeriod::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollWorkPeriod::txtNotExist(), tableId2name(tableNum(PayrollWorkPeriod))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyTimeZoneWorkPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the period end date by converting it in the time zone of the logged in company.
    /// </summary>
    /// <param name="_workPeriodRecId">
    /// The work period record Id.
    /// </param>
    /// <returns>
    ///  The work period end date.
    /// </returns>
    public static date companyTimeZoneWorkPeriodDate(PayrollWorkPeriodRecId _workPeriodRecId)
    {
        TransDate       periodDate;

        periodDate = PayrollWorkPeriod::find(_workPeriodRecId).PeriodEndDate;

        return DateTimeUtil::date(DateTimeUtil::newDateTime(periodDate, 0, DateTimeUtil::getCompanyTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PayrollWorkPeriod</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists, otherwise false.
    /// </returns>
    static boolean exist(RefRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollWorkPeriod
                    where payrollWorkPeriod.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCycleAndStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PayrollWorkPeriod</c> table exists.
    /// </summary>
    /// <param name="_cycleId">
    /// The <c>PayrollFLSACycleid</c> of the <c>PayrollWorkPeriod</c> table to search.
    /// </param>
    /// <param name="_periodStart">
    /// The start date of the period to check existence for.
    /// </param>
    /// <returns>
    /// true if the specified record exists, otherwise false.
    /// </returns>
    static boolean existByCycleAndStartDate(PayrollWorkCycleRecId _cycleId, PeriodStart _periodStart)
    {
        return (select firstonly RecId from payrollWorkPeriod
                    where payrollWorkPeriod.PeriodStartDate == _periodStart
                        && payrollWorkPeriod.WorkCycle == _cycleId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PayrollWorkPeriod</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PayrollWorkPeriod</c> table; otherwise, an empty record.
    /// </returns>
    static PayrollWorkPeriod find(
    PayrollWorkPeriodRecId   _recId,
    boolean                  _forUpdate = false,
    ConcurrencyModel         _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkPeriod  workPeriod;

        workPeriod.selectForUpdate (_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            workPeriod.concurrencyModel(_concurrencyModel);
        }

        select firstonly workPeriod
            where workPeriod.RecId == _recId;

        return workPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCycleAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PayrollWorkPeriod</c> table.
    /// </summary>
    /// <param name="_cycleRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_trandate">
    /// The date of the pay period to check for existence.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PayrollWorkPeriod</c> table; otherwise, an empty record.
    /// </returns>
    static PayrollWorkPeriod findByCycleAndDate(
    PayrollWorkCycleRecId   _cycleRecId,
    TransDate               _trandate,
    boolean                 _forUpdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkPeriod workPeriod;

        workPeriod.selectForUpdate (_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            workPeriod.concurrencyModel(_concurrencyModel);
        }

        if (_trandate)
        {
            select firstonly workPeriod
                where workPeriod.WorkCycle == _cycleRecId
                    && workPeriod.PeriodStartDate <= _trandate
                    && workPeriod.PeriodEndDate >= _trandate;
        }

        return workPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCycleAndStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tinds the specified record in the <c>PayrollWorkPeriod</c> table.
    /// </summary>
    /// <param name="_cycleRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_periodStart">
    /// The start date of the period to check for existence.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PayrollWorkPeriod</c> table; otherwise, an empty record.
    /// </returns>
    static PayrollWorkPeriod findByCycleAndStartDate(
    PayrollWorkCycleRecId   _cycleRecId,
    PeriodStart             _periodStart,
    boolean                 _forUpdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkPeriod workPeriod;

        workPeriod.selectForUpdate (_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            workPeriod.concurrencyModel(_concurrencyModel);
        }

        if (_periodStart)
        {
            select firstonly workPeriod
                where workPeriod.WorkCycle == _cycleRecId
                    && workPeriod.PeriodStartDate == _periodStart;
        }

        return workPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkPeriodDuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the day period between start and end dates are valid
    /// against the DaysPerPeriod in <c>PayrollWorkCycls</c>.
    /// </summary>
    /// <returns>
    /// true if the <c>PayrollWorkPeriod</c> has start and end dates that are
    /// valid against the DaysPerPeriod in <c>PayrollWorkCycls</c>; otherwise, false.
    /// </returns>
    public boolean validateWorkPeriodDuration()
    {
        boolean ret = true;
        PayrollWorkCycle payrollWorkCycle;

        select firstonly payrollWorkCycle where payrollWorkCycle.RecId == this.WorkCycle;

        if (this.PeriodEndDate - this.PeriodStartDate + 1 != payrollWorkCycle.DaysPerPeriod)
        {
            ret = checkFailed(strFmt("@Payroll:PayrollWorkPeriodRangeViolation",this.PeriodStartDate, this.PeriodEndDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePiorAdjacentPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the <c>PayrollWorkPeriod</c> has a prior, adjacent work period for
    /// its <c>PayrollWorkCycle</c>.
    /// </summary>
    /// <returns>
    /// true if the <c>PayrollWorkPeriod</c> has a prior, adjacent period;
    /// otherwise, false.
    /// </returns>
    public boolean validatePiorAdjacentPeriod()
    {
        boolean ret = true;
        PayrollWorkPeriod anyWorkPeriod;

        select firstonly anyWorkPeriod
            where anyWorkPeriod.WorkCycle == this.WorkCycle
                && anyWorkPeriod.PeriodStartDate != this.PeriodStartDate;

        if (anyWorkPeriod.RecId != 0)
        {
            // Determine if there is a work period adjacent and prior to this one
            PayrollWorkPeriod workPeriodOther;

            select firstOnly workPeriodOther
                    where workPeriodOther.WorkCycle == this.WorkCycle
                        && workPeriodOther.PeriodEndDate == this.PeriodStartDate - 1;

            if (workPeriodOther.RecId == 0)
            {
                ret = checkFailed(strFmt("@Payroll:PayrollWorkPeriodGapViolation",this.PeriodStartDate, this.PeriodEndDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorkCycleDateInPayPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PayrollWorkPeriod</c> table.
    /// </summary>
    /// <param name="_cycleRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_trandate">
    /// The date of the work period to check for existence.
    /// </param>
    /// <param name="_payPeriodStartDate">
    /// The start date of the pay period to check for existence.
    /// </param>
    /// <param name="_payPeriodEndDate">
    /// The end date of the pay period to check for existence.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PayrollWorkPeriod</c> table; otherwise, an empty record.
    /// </returns>
    static PayrollWorkPeriod findByWorkCycleDateInPayPeriod(
    PayrollWorkCycleRecId   _cycleRecId,
    TransDate               _trandate,
    TransDate               _payPeriodStartDate,
    TransDate               _payPeriodEndDate,
    boolean                 _forUpdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkPeriod workPeriod;

        workPeriod.selectForUpdate (_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            workPeriod.concurrencyModel(_concurrencyModel);
        }

        if (_trandate)
        {
            select firstonly workPeriod
                where workPeriod.WorkCycle == _cycleRecId
                    && workPeriod.PeriodStartDate <= _trandate
                    && workPeriod.PeriodEndDate >= _trandate
                    && workPeriod.PeriodEndDate <= _payPeriodEndDate
                    && workPeriod.PeriodEndDate >= _payPeriodStartDate;
        }

        return workPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS329226";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollworkperiodTableContainsGeneratedPeriodsAssociatedT</DeveloperDocumentation>
	<Label>@Payroll:WorkPeriod</Label>
	<TitleField1>PeriodStartDate</TitleField1>
	<TitleField2>PeriodComment</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Payroll</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS176231</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCycle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCycle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Periods</Name>
			<Label>@Payroll:EnterWorkPeriodDetails</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollWorkPeriodComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodEndDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PeriodEnd</ExtendedDataType>
			<Label>@Payroll:PeriodEndDate1</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodStartDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PeriodStart</ExtendedDataType>
			<Label>@Payroll:PeriodStartDate</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkCycle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PeriodStartDate</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PeriodStartDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollWorkCycle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PayrollWorkCycle</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkCycle</Name>
					<Field>WorkCycle</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>