<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWHTTransGeneralJournalAccountEntry_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWHTTransGeneralJournalAccountEntry_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID for the <c>LedgerDimensionAccount</c> record that is associated with this record.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// The <c>GeneralJournalAccountEntry</c> record; optional.
    /// </param>
    /// <returns>
    /// A record ID of the <c>LedgerDimensionAccount</c> record that is associated with this record.
    /// </returns>
    public LedgerDimensionAccount getLedgerDimension(GeneralJournalAccountEntry _generalJournalAccountEntry = null)
    {
        LedgerDimensionAccount ledgerDimension;

        if (this.GeneralJournalAccountEntry)
        {
            if (!_generalJournalAccountEntry)
            {
                ledgerDimension = GeneralJournalAccountEntry::find(this.GeneralJournalAccountEntry).LedgerDimension;
            }
            else
            {
                ledgerDimension = _generalJournalAccountEntry.LedgerDimension;
            }
        }
        else
        {
            ledgerDimension = this.LedgerDimension;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>TaxWHTTransGeneralJournalAccountEntry</c> table.
    /// </summary>
    /// <param name="_transferId">
    /// The transfer id.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The ledger rec id.
    /// </param>
    public static void create(RefRecId _transferId, LedgerRecId _ledgerRecId)
    {
        AccountingDistribution                      taxAccountingDistribution;
        TaxTransRelationshipType                    taxTransRelationshipTypeValue;
        TaxWHTTransGeneralJournalAccountEntry_IN    taxWHTTransGeneralJournalAccountEntry;
        SourceDocumentLine                          sourceDocumentLine;
        TaxWithholdTrans_IN                         taxWithholdTrans;
        SubledgerJournalAccountEntry                subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution    subledgerJournalAccountEntryDistribution;
        SubledgerJournalEntry                       subledgerJournalEntry;
        AccountingEvent                             accountingEvent;

        // Tax direction - Non-use tax
        taxTransRelationshipTypeValue = TaxTransRelationshipType::Tax;
        insert_recordset taxWHTTransGeneralJournalAccountEntry(GeneralJournalAccountEntry, LedgerDimension, TaxWithholdTrans, TaxWHTTransRelationship)
            select subledgerJournalEntry
                where subledgerJournalEntry.TransferId  == _transferId &&
                    subledgerJournalEntry.Ledger == _ledgerRecId
            join GeneralJournalAccountEntry, LedgerDimension  from subledgerJournalAccountEntry
                group by GeneralJournalAccountEntry, LedgerDimension
                where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId &&
                    subledgerJournalAccountEntry.PostingType == LedgerPostingType::Tax
            join accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
            join sourceDocumentLine
                where sourceDocumentLine.SourceDocumentHeader == accountingEvent.SourceDocumentHeader
            join RecId, taxTransRelationshipTypeValue from taxWithholdTrans
                group by RecId
                where taxWithholdTrans.SourceDocumentLine == sourceDocumentLine.RecId &&
                    (
                        (!subledgerJournalAccountEntry.IsCorrection &&
                            ((subledgerJournalAccountEntry.Side == DebitCredit::Debit && taxWithholdTrans.TaxWithholdAmount > 0 ) ||
                            (subledgerJournalAccountEntry.Side == DebitCredit::Credit && taxWithholdTrans.TaxWithholdAmount < 0))
                        )
                        ||
                        (subledgerJournalAccountEntry.IsCorrection &&
                            ((subledgerJournalAccountEntry.Side ==DebitCredit::Debit && taxWithholdTrans.TaxWithholdAmount < 0 ) ||
                            (subledgerJournalAccountEntry.Side ==DebitCredit::Credit && taxWithholdTrans.TaxWithholdAmount > 0))
                        )
                    )
            // need to restrict subledgerJournalAccountEntry records to those associated with same source document line
            // as taxWithholdTrans is associated with
            exists join subledgerJournalAccountEntryDistribution
                where subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
            exists join taxAccountingDistribution
                where taxAccountingDistribution.RecId == subledgerJournalAccountEntryDistribution.AccountingDistribution &&
                    taxAccountingDistribution.SourceDocumentLine == taxWithholdTrans.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the instance exist.
    /// </summary>
    /// <param name="_recId">
    /// The rec id.
    /// </param>
    /// <returns>
    /// Returns true if the instance exist.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        TaxWHTTransGeneralJournalAccountEntry_IN taxWHTTransGeneralJournalAccountEntry;

        select firstonly
            RecId
        from
            taxWHTTransGeneralJournalAccountEntry
        where
            taxWHTTransGeneralJournalAccountEntry.RecId == _recId;

        return taxWHTTransGeneralJournalAccountEntry != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxWHTTransGeneralJournalAccountEntry_IN</c> table.
    /// </summary>
    /// <param name="_taxWHTTransRecId">
    /// The reference record ID of the <c>TaxWHTTransGeneralJournalAccountEntry_IN</c> record to find.
    /// </param>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The general journal account entry reference record ID of the <c>TaxWHTTransGeneralJournalAccountEntry_IN</c> record to find; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>TaxWHTTransGeneralJournalAccountEntry_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxWHTTransGeneralJournalAccountEntry_IN find(
        RefRecId    _taxWHTTransRecId,
        RefRecId    _generalJournalAccountEntryRecId = 0,
        boolean     _forUpdate = false)
    {
        TaxWHTTransGeneralJournalAccountEntry_IN taxWHTTransGeneralJournalAccountEntry;

        taxWHTTransGeneralJournalAccountEntry.selectForUpdate(_forUpdate);

        select firstonly taxWHTTransGeneralJournalAccountEntry
            where taxWHTTransGeneralJournalAccountEntry.TaxWithholdTrans           == _taxWHTTransRecId
               && taxWHTTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == _generalJournalAccountEntryRecId;

        return taxWHTTransGeneralJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTaxWHTTransGeneralJourAccEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates <c>TaxTransGeneralJournalAccountEntry</c> records for the specified source document.
    /// </summary>
    /// <param name="_sourceDocumentHeaderId">
    /// The identity of the <c>SourceDocumentHeader</c> record for the tax transaction.
    /// </param>
    /// <remarks>
    /// Use this method to create the <c>TaxWHTTransGeneralJournalAccountEntry_IN</c> record when the subledger journal entries for
    /// the tax source document has been transferred to the ledger prior to the tax transaction records are created.
    /// </remarks>
    public static void generateTaxWHTTransGeneralJourAccEntry(SourceDocumentHeaderRecId _sourceDocumentHeaderId)
    {
        SubledgerJournalEntry                       localSubledgerJournalEntry;
        AccountingEvent                             localAccountingEvent;
        SubledgerJournalAccountEntry                localSubledgerJournalAccountEntry;
        TaxWHTTransGeneralJournalAccountEntry_IN    localTaxWHTTransGeneralJournalAccountEntry;

        if (_sourceDocumentHeaderId)
        {
            while select TransferId, Ledger from localSubledgerJournalEntry
                group by TransferId, Ledger
                where localSubledgerJournalEntry.Status == SubledgerJournalEntryStatus::Transferred &&
                    localSubledgerJournalEntry.TransferId != 0
                join RecId from localAccountingEvent
                    where localSubledgerJournalEntry.AccountingEvent == localAccountingEvent.RecId &&
                        localAccountingEvent.State == AccountingEventState::Complete &&
                        localAccountingEvent.SourceDocumentHeader == _sourceDocumentHeaderId
                // skip those that have already been processed. This can happen when a document has multiple submissions
                // (e.g. purch req with multiple lines that are submitted independently
                join RecId from localSubledgerJournalAccountEntry
                    where localSubledgerJournalAccountEntry.SubledgerJournalEntry == localSubledgerJournalEntry.RecId &&
                        localSubledgerJournalAccountEntry.GeneralJournalAccountEntry != 0 &&
                        localSubledgerJournalAccountEntry.PostingType == LedgerPostingType::Tax
                notexists join localTaxWHTTransGeneralJournalAccountEntry
                    where localTaxWHTTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == localSubledgerJournalAccountEntry.GeneralJournalAccountEntry

            {
                // Establish the relationship between the TaxWithholdTrans_IN and the GeneralJournalAccountEntry because
                // The taxWithholdTrans's source document has been processed and the amounts have been posted/transferred
                // to the ledger, but the relationship between the TaxWithholdTrans_IN and the GeneralJournalAccountEntry
                // has not been established yet.
                TaxWHTTransGeneralJournalAccountEntry_IN::create(localSubledgerJournalEntry.TransferId, localSubledgerJournalEntry.Ledger);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionForTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID for the <c>LedgerDimensionAccount</c> record that is associated with this record.
    /// </summary>
    /// <param name="_taxTransRecId">
    /// The record ID of the <c>TaxTrans</c> record.
    /// </param>
    /// <param name="_taxTransRelationshipType">
    /// The type of record.
    /// </param>
    /// <returns>
    /// The record ID of the <c>LedgerDimensionAccount</c> record that is associated with this record.
    /// </returns>
    static public LedgerDimensionAccount getLedgerDimensionForTaxWithholdTrans(RefRecId _taxTransRecId, TaxTransRelationshipType _taxTransRelationshipType)
    {
        TaxWHTTransGeneralJournalAccountEntry_IN    taxLink;
        GeneralJournalAccountEntry                  generalJournalAccountEntry;

        select firstonly * from taxLink
            where taxLink.TaxWithholdTrans          == _taxTransRecId &&
                  taxLink.TaxWHTTransRelationship   == _taxTransRelationshipType
        join LedgerDimension from generalJournalAccountEntry
            where generalJournalAccountEntry.RecId  == taxLink.GeneralJournalAccountEntry;

        return taxLink.getLedgerDimension(generalJournalAccountEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePostedLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reversing links for all the associated <c>GeneralJournalAccountEntry</c> records.
    /// </summary>
    /// <param name="_originalGeneralJournalAccountEntryRecId">
    /// The record ID of the original <c>GeneralJournalAccountEntry</c> record.
    /// </param>
    /// <param name="_taxWHTransOldAndNewRecId">
    /// A map that contains the old <c>TaxWithholdTrans_IN</c> record ID as the key and the new <c>TaxWithholdTrans_IN</c> record
    /// ID as the value.
    /// </param>
    /// <param name="_newLedgerVoucherTransObject">
    /// The <c>LedgerVoucherTransObject</c> object that is processing the reversal.
    /// </param>
    /// <returns>
    /// A map that indicates which <c>TaxWHTTransRelationship</c> values were created in the
    /// <c>TaxWHTTransGeneralJournalAccountEntry_IN</c> record.
    /// </returns>
    public static Map reversePostedLinks(
        GeneralJournalAccountEntryRecId _originalGeneralJournalAccountEntryRecId,
        Map _taxWHTransOldAndNewRecId,
        LedgerVoucherTransObject _newLedgerVoucherTransObject)
    {
        Map type = new Map(Types::Enum, Types::Integer);
        type.insert(TaxTransRelationshipType::Tax, false);
        type.insert(TaxTransRelationshipType::TransactionLineAccount, false);
        type.insert(TaxTransRelationshipType::UseTaxPayable, false);

        TaxWHTTransGeneralJournalAccountEntry_IN taxLink;
        while select TaxWithholdTrans,TaxWHTTransRelationship from taxLink
            where taxLink.GeneralJournalAccountEntry == _originalGeneralJournalAccountEntryRecId
        {
            type.insert(taxLink.TaxWHTTransRelationship, true);

            if (_taxWHTransOldAndNewRecId.exists(taxLink.TaxWithholdTrans))
            {
                _newLedgerVoucherTransObject.addTaxWHTTransRelationship_IN(
                    _taxWHTransOldAndNewRecId.lookup(taxLink.TaxWithholdTrans),
                    taxLink.TaxWHTTransRelationship,
                    _newLedgerVoucherTransObject.parmAccountingCurrencyAmount(),
                    _newLedgerVoucherTransObject.parmTransactionCurrencyAmount());
            }
        }
        return type;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS222005</DeveloperDocumentation>
	<Label>@GLS222004</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TaxWithholdTrans</TitleField1>
	<TitleField2>GeneralJournalAccountEntry</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Tax</Modules>
	<ReplacementKey>TaxWHTTransIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS318724</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWHTTransRelationship</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GeneralJournalAccountEntry</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWHTTransRelationship</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxTransRelationshipType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxWHTTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GeneralJournalAccountEntryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GeneralJouranlAccountEntry</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>GeneralJournalAccountEntry</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GeneralJournalAccountEntry</Name>
					<Field>GeneralJournalAccountEntry</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdTrans</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>TaxWithholdTrans_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdTrans</Name>
					<Field>TaxWithholdTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>