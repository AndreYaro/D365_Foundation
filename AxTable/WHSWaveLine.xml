<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWaveLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WHSShipmentTable    shipmentTable;
        WHSWaveLine         waveLine;

        ttsbegin;

        select forupdate shipmentTable
            where shipmentTable.ShipmentId == this.ShipmentId;

        // If shimpent table hasn't been deleted then update it's waveId field.
        if (shipmentTable)
        {
            select count(RecId) from waveLine
                where waveLine.ShipmentId    == shipmentTable.ShipmentId &&
                      waveLine.RecId         != this.RecId;

            switch (waveLine.RecId)
            {
                case 0: // If shipment is only related to no wavelines then set status back to open
                    // Don't remove site and warehouse fields from wave.
                    // If the wave is being executed the wave will get stuck as the allocating wave for the warehouse.
                    shipmentTable.WaveId = '';
                    if (!shipmentTable.validateWrite())
                    {
                        throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSShipmentTable)));
                    }
                    else
                    {
                        shipmentTable.update();
                    }
                    break;

                case 1: // If shipment is related to 1 other wave then set waveId on shipment
                    select firstonly WaveId from waveLine
                        where waveLine.ShipmentId    == shipmentTable.ShipmentId &&
                              waveLine.RecId         != this.RecId;

                    shipmentTable.WaveId = waveLine.WaveId;
                    if (!shipmentTable.validateWrite())
                    {
                        throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSShipmentTable)));
                    }
                    else
                    {
                        shipmentTable.update();
                    }
                    break;

                default: // If shipment is related to more than one waveLines then do nothing.
                    break;
            }
        }

        WHSWaveTable waveTable = WHSWaveTable::find(this.WaveId);

        if (WHSWaveUnprocessedPendingAllocationWaveLineDeleteLoggingContext::currentLogWaveLineDeleteDataParameter())
        {
            WHSInstrumentationLogger logger = waveLine.instrumentationLogger();

            using(var waveLineActivityContext = logger.waveLineActivities().waveLineDelete())
            {
                logger.logRecordInformation(waveTable);
                logger.logRecordInformation(shipmentTable);
            }
        }

        super();

        if (waveTable.WaveStatus == WHSWaveStatus::Released
            && waveTable.existWaveLines()
            && WHSWaveTable::canWaveBeShipped(waveTable.WaveId))
        {
            WHSWaveTable::updateWaveStatus(waveTable.WaveId, WHSWaveStatus::Shipped);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal WHSInstrumentationLogger instrumentationLogger()
    {
        WHSInstrumentationLogger logger;
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(tableStr(WHSWaveLine));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWHSShipmentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the record from a <c>WHSShipmentTable</c> record.
    /// </summary>
    /// <param name="_shipmentTable">
    /// The record to be used to initialize.
    /// </param>
    void initFromWHSShipmentTable(WHSShipmentTable _shipmentTable)
    {
        this.ShipmentId      = _shipmentTable.ShipmentId;
        this.LoadId          = _shipmentTable.LoadId;
        this.OrderNum        = _shipmentTable.OrderNum;
        this.WorkTransType   = _shipmentTable.WorkTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWithoutBatchValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the wave line without validating the wave is in a batch process.
    /// </summary>
    [Hookable(false)]
    internal void insertWithoutBatchValidation()
    {
        try
        {
            this.SkipBatchValidation = true;

            this.insert();
        }
        finally
        {
            this.SkipBatchValidation = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        WHSShipmentTable    shipmentTable;
        WHSWaveLine         waveLine;

        super();

        ttsbegin;

        select firstonly forupdate shipmentTable
            where shipmentTable.ShipmentId == this.ShipmentId;

        select RecId from waveLine
            where waveLine.ShipmentId == shipmentTable.ShipmentId &&
                  waveLine.RecId         != this.RecId;

        shipmentTable.WaveId = waveLine.RecId ? '' : this.WaveId;
        shipmentTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (WHSWaveTable::find(this.WaveId).inBatch())
        {
            ret = checkFailed("@WAX3219");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromWaveIdAndShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWaveLine</c> record for a shipment.
    /// </summary>
    /// <param name="_waveId">
    /// Id of the <c>WHSWaveTable</c> record that the line will be associated.
    /// </param>
    /// <param name="_shipmentTable">
    /// The shipment record to be added to wave.
    /// </param>
    /// <param name="_showError">
    /// Boolean indicating that errors are shown in case of failure.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if WHS not enabled in warehouse.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if load of the shipment is invalid.
    /// </exception>
    public static void createFromWaveIdAndShipment(
        WHSWaveId        _waveId,
        WHSShipmentTable _shipmentTable,
        boolean          _showError = false)
    {
        WHSWaveLine::createFromWaveIdAndShipmentUsingLock(_waveId, _shipmentTable, _showError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromWaveIdAndShipmentUsingLock</Name>
				<Source><![CDATA[
    private static void createFromWaveIdAndShipmentUsingLock(
        WHSWaveId        _waveId,
        WHSShipmentTable _shipmentTable,
        boolean          _showError)
    {
        using (var waveLockManager = WHSWaveLockManager::newStandard())
        {
            if (waveLockManager.tryLockForShipmentWaveLineCreation(_shipmentTable.ShipmentId, 0))
            {
                WHSWaveLine::createFromWaveIdAndShipmentInternal(_waveId, _shipmentTable, _showError);

                waveLockManager.releaseForShipmentWaveLineCreation(_shipmentTable.ShipmentId);
            }
            else
            {
                throw error(strFmt("@WAX:ShipmentWaveLineCreationLockFailureError", _shipmentTable.ShipmentId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromWaveIdAndShipmentInternal</Name>
				<Source><![CDATA[
    private static void createFromWaveIdAndShipmentInternal(
        WHSWaveId        _waveId,
        WHSShipmentTable _shipmentTable,
        boolean          _showError)
    {
        if (!InventLocation::find(_shipmentTable.InventLocationId).whsEnabled)
        {
            throw error("@WAX4081");
        }

        if (_shipmentTable.whsLoadTable().Invalid)
        {
            throw error(strFmt("@WAX5525",_shipmentTable.LoadId,_waveId));
        }
        
        WHSWaveLine     waveLine;
        WHSWaveTable    waveTable;

        select firstonly waveLine
            exists join waveTable
                where waveLine.WaveId   == waveTable.WaveId
                &&  waveLine.ShipmentId == _shipmentTable.ShipmentId
                &&  (waveLine.WaveId    == _waveId || waveTable.WaveStatus < WHSWaveStatus::Held);

        if (waveLine.RecId == 0)
        {
            ttsbegin;

            waveTable = WHSWaveTable::find(_waveId, true);

            if (waveTable &&
                waveTable.validateWaveAssignment(_shipmentTable.ShipmentId, _showError) &&
                WHSWaveTemplateTable::validateWaveTemplate(WHSWaveTemplateType::Shipping, waveTable, _shipmentTable.ShipmentId, _showError))
            {
                waveLine.WaveId  = _waveId;
                waveLine.initFromWHSShipmentTable(_shipmentTable);
                waveLine.insert();

                if (waveTable.InventSiteId != _shipmentTable.InventSiteId || waveTable.InventLocationId != _shipmentTable.InventLocationId)
                {
                    waveTable.InventSiteId      = _shipmentTable.InventSiteId;
                    waveTable.InventLocationId  = _shipmentTable.InventLocationId;
                    waveTable.update();
                }
            }

            ttscommit;
        }
        else if (_showError)
        {
            warning(strFmt("@WAX2174", _shipmentTable.ShipmentId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsWaveLine</c> record exists.
    /// </summary>
    /// <param name="_waveId">
    /// Id of the wave.
    /// </param>
    /// <param name="_shipmentId">
    /// Id of the shipment.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    static boolean exist(WHSWaveId _waveId, WHSShipmentId _shipmentId)
    {
        return _waveId && _shipmentId &&
            (select firstonly RecId from whsWaveLine
                 where whsWaveLine.WaveId        == _waveId &&
                       whsWaveLine.ShipmentId    == _shipmentId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that a record exists for a specified shipment Id.
    /// </summary>
    /// <param name="_shipmentId">
    ///     The shipment to validate for.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise false.
    /// </returns>
    public static boolean existsForShipmentId(WHSShipmentId _shipmentId)
    {
        return (select firstonly RecId from whsWaveLine
                    where whsWaveLine.ShipmentId == _shipmentId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWaveLine</c> record with given parameters.
    /// </summary>
    /// <param name="_waveId">
    /// Id of the wave.
    /// </param>
    /// <param name="_shipmentId">
    /// Id of the shipment.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWaveLine find(WHSWaveId        _waveId,
                                   WHSShipmentId    _shipmentId,
                                   boolean          _forupdate = false)
    {
        WHSWaveLine    waveLine;

        if (_waveId && _shipmentId)
        {
            waveLine.selectForUpdate(_forupdate);

            select firstonly waveLine
                where waveLine.WaveId        == _waveId      &&
                      waveLine.ShipmentId    == _shipmentId;
        }

        return waveLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWaveLine</c> record by id.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWaveLine findRecId(RefRecId    _recId,
                                        boolean     _forupdate = false)
    {
        WHSWaveLine    waveLine;

        if (_recId)
        {
            waveLine.selectForUpdate(_forupdate);

            select firstonly waveLine
                where waveLine.RecId == _recId;
        }

        return waveLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalLoadLinesNotWithAllQuantityOnWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of load lines included in the shipment related to the current wave line
    /// and for which the inventory quantity is different than the work created quantity.
    /// </summary>
    /// <returns>The number of load lines.</returns>
    public int totalLoadLinesNotWithAllQuantityOnWork()
    {
        WHSLoadLine loadLine;

        select count(RecId) from loadLine
            where loadLine.ShipmentId == this.ShipmentId
                && loadLine.WorkCreatedQty != loadLine.InventQty;

        return int642int(loadLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduledShipmentDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the scheduled shipping date time of the current wave line.
    /// </summary>
    /// <returns>The scheduled shipping date time of the related load table if there is one or the pick up date of the related shipment table</returns>
    public TransDateTime scheduledShipmentDateTime()
    {
        TransDateTime       scheduledDateTime;
        WHSLoadTable        loadTable;

        loadTable = WHSLoadTable::find(this.LoadId);

        if (loadTable.LoadSchedShipUTCDateTime)
        {
            scheduledDateTime = loadTable.LoadSchedShipUTCDateTime;
        }
        else
        {
            WHSShipmentTable shipmentTable = WHSShipmentTable::find(this.ShipmentId);

            scheduledDateTime = DateTimeUtil::newDateTime(shipmentTable.displayPickUpDate(), 0, shipmentTable.timeZoneSite());
        }

        return scheduledDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4481</DeveloperDocumentation>
	<Label>@WAX1493</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>WaveId</TitleField1>
	<TitleField2>OrderNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ShipmentIdWaveId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ShipmentIdWaveId</PrimaryIndex>
	<ReplacementKey>ShipmentIdWaveId</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipBatchValidation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveLineSkipBatchValidation</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ShipmentIdWaveId</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShipmentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShipmentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipmentId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>WorkTransType</Name>
					<Field>WorkTransType</Field>
					<ValueStr>WHSWorkTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderNum</Name>
					<Field>OrderNum</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TransferOrderIssue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransferOrderIssue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>WorkTransType</Name>
					<Field>WorkTransType</Field>
					<ValueStr>WHSWorkTransType::TransferIssue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderNum</Name>
					<Field>OrderNum</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TransferOrderReceipt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransferOrderReceipt</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>WorkTransType</Name>
					<Field>WorkTransType</Field>
					<ValueStr>WHSWorkTransType::TransferReceipt</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderNum</Name>
					<Field>OrderNum</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadId</Name>
					<SourceEDT>WHSLoadId</SourceEDT>
					<Field>LoadId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<SourceEDT>WHSShipmentId</SourceEDT>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWaveTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWaveTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaveId</Name>
					<SourceEDT>WHSWaveId</SourceEDT>
					<Field>WaveId</Field>
					<RelatedField>WaveId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>