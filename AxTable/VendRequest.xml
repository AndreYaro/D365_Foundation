<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendRequest extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acceptAgreementText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that represents the terms and conditions agreement check box text.
    /// </summary>
    /// <returns>
    /// The terms and conditions agreement check box text.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendRequestAgreementText acceptAgreementText()
    {
        return this.configuration().AcceptAgreementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that represents the terms and conditions agreement text.
    /// </summary>
    /// <returns>
    /// The terms and conditions agreement text.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendRequestAgreementText agreementText()
    {
        return this.configuration().AgreementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the action menus of the enterprise portal toolbar for editing and viewing the
    ///    vendor request should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the vendor request can be edited by the user; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean allowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the approval form for the vendor request as a string.
    /// </summary>
    /// <returns>
    /// The approval form menu item.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public menuItemNameDisplay approvalMenuItem()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChangeVendPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the name of the party for a vendor for a vendor request can be modified.
    /// </summary>
    /// <returns>
    ///    true if the name of the vendor can be changed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The default for vendor requests is to return false.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canChangeVendPartyName()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the vendor request can be submitted by the user.
    /// </summary>
    /// <param name="_workflowType">
    ///   The name of the workflow template.
    /// </param>
    /// <returns>
    ///    true if the workflow can be submitted by the user; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        boolean ret;

        ret = this.VendRequestWorkflowState == VendRequestWorkflowState::NotSubmitted;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor request configuration profile.
    /// </summary>
    /// <returns>
    /// The vendor request configuration.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendRequestProfile configuration()
    {
        VendRequestProfile vendRequestProfile;

        // This method is abstract.
        return vendRequestProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactProfessionalTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the professional title of the contact for the vendor that is associated with the request.
    /// </summary>
    /// <returns>
    ///    The professional title of the contact.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display DirNameProfessionalTitle contactProfessionalTitle()
    {
        return DirPerson::find(this.ContactParty).ProfessionalTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDirPartyRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Associates a contact person to the vendor for a request.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createDirPartyRelationship()
    {
        DirPartyRelationship        relation;
        DirRelationshipTypeTable    typeTable;

        typeTable = DirRelationshipTypeTable::findBySystemType(DirSystemRelationshipType::ProspectiveVendorContact);
        if (typeTable.RecId == 0)
        {
            ttsbegin;
            typeTable.clear();
            typeTable.RelationshipTypeId    = enum2str(DirSystemRelationshipType::ProspectiveVendorContact);
            typeTable.SystemType            = DirSystemRelationshipType::ProspectiveVendorContact;
            typeTable.Description           = typeTable.RelationshipTypeId;
            typeTable.ChildPartyType        = DirPartyType::Person;
            typeTable.ParentPartyType       = DirPartyType::Organization;
            typeTable.insert();
            ttscommit;
        }

        if (!DirPartyRelationship::exist(typeTable.RelationshipTypeId, this.VendParty, this.ContactParty))
        {
            ttsbegin;
            relation.clear();
            relation.ParentParty        = this.VendParty;
            relation.ChildParty         = this.ContactParty;
            relation.RelationshipTypeId = typeTable.RelationshipTypeId;
            relation.ValidFrom          = DateTimeUtil::utcNow();
            relation.ValidTo            = DateTimeUtil::maxValue();
            relation.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the reason code.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    ///    The new reason code when the <paramref name="set" /> parameter is <paramref name="true" />;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit ReasonCode editReasonCode(boolean set, ReasonCode _reasonCode)
    {
        ReasonCode      reasonCode = strLRTrim(_reasonCode);
        int64           originalReasonRefRecID;
        FormDataSource  formDataSource;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonRef == 0)
            {
                this.ReasonRef = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                if (reasonCode != '')
                {
                    //
                    //The reasonCode value is not blank.
                    // Save the current ReasonRefRecID for comparison.
                    //
                    originalReasonRefRecID = this.ReasonRef;
                    this.ReasonRef = ReasonTableRef::updateCode(reasonCode, this.ReasonRef);

                    if (this.ReasonRef == originalReasonRefRecID)
                    {
                        //
                        // The reason code has changed but the referenced record ID has not.
                        // Get the current FormDataSource and set forceWrite() to true so that
                        // data validation (validateWrite()) is performed on the updated reason code.
                        //
                        formDataSource = FormDataUtil::getFormDataSource(this);
                        if (formDataSource)
                        {
                            formDataSource.forceWrite(true);
                        }
                    }
                }
                else
                {
                    // The reasonCode is blank.
                    this.ReasonRef = ReasonTableRef::updateCode(reasonCode, this.ReasonRef);
                }
            }

            // Update the reason comment with the default comment value for the updated reason code.
            // A blank reasonCode will result in a blank comment because a blank reasonCode
            // will return an empty reasonTable buffer.
            this.editReasonComment(true, ReasonTable::find(_reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.ReasonRef).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the reason comment.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that indicates whether the reason comment is set.
    /// </param>
    /// <param name="_reasonComment">
    ///    The new reason comment when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit ReasonComment editReasonComment(boolean set, ReasonComment _reasonComment)
    {
        ReasonComment reasonComment = _reasonComment;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonRef == 0)
            {
                this.ReasonRef = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.ReasonRef = ReasonTableRef::updateComment(reasonComment, this.ReasonRef);
            }
        }
        else
        {
            reasonComment = ReasonTableRef::find(this.ReasonRef).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeRequestorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the employee name of the user who requested a new vendor.
    /// </summary>
    /// <returns>
    /// The name of the employee who requested for the new vendor.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display VendRequestRequestorName employeeRequestorName()
    {
        // CreatedBy isn't populated until the record is inserted
        userId createByUserId = this.CreatedBy != '' ? this.CreatedBy : curUserId();

        return DirPerson::find(DirPersonUser::find(createByUserId).PersonParty).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeRequestorTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the employee title of the user who requested for a new vendor.
    /// </summary>
    /// <returns>
    /// The title of the employee who requested for the new vendor.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendRequestRequestorTitle employeeRequestorTitle()
    {
        // CreatedBy isn't populated until the record is inserted
        userId createByUserId = this.CreatedBy != '' ? this.CreatedBy : curUserId();

        return HcmTitle::find(HcmWorkerTitle::findByWorker(HcmWorker::userId2Worker(createByUserId)).Title).TitleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeSponsoredByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the employee name of the user who the request was created on behalf of.
    /// </summary>
    /// <returns>
    ///    The employee name of the user who the request was created on behalf of.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display VendRequestSponsoredByName employeeSponsoredByName()
    {
        return HcmWorker::worker2Name(this.SponsoredBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeSponsoredByTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the employee title of the user who the request was created on behalf of.
    /// </summary>
    /// <returns>
    ///    The employee title of the user who the request was created on behalf of.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendRequestSponsorTitle employeeSponsoredByTitle()
    {
        return HcmTitle::find(HcmWorkerTitle::findByWorker(this.SponsoredBy).Title).TitleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether there is at least one document attached to the vendor request.
    /// </summary>
    /// <returns>
    ///    true if the vendor request has documents; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display VendRequestHasDocuments hasDocuments()
    {
        DocuRef docuRef;

        select firstonly RecId from docuRef
            where docuRef.RefCompanyId == this.DataAreaId
                && docuRef.RefTableId   == this.TableId
                && docuRef.RefRecId     == this.RecId;

        return docuRef.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.SponsoredBy = HcmWorker::findByPerson(DirPersonUser::current().PersonParty).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionnaireCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether there were any questionnaires that were not completed.
    /// </summary>
    /// <returns>
    ///    A <c>VendRequestQuestionnairesCompleted</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    If there are outstanding questionnaires, this method will return the <c>NoYes::No</c> enumeration
    ///    value; if all questionnaires are completed, it will return the <c>NoYES::Yes</c> enumeration value;
    ///    otherwise, it returns the <c>Not required</c> enumeration value.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendRequestQuestionnaireCompleted questionnaireCompleted()
    {
        VendQuestionnaire                   vendQuestionnaireCheck;
        VendRequestQuestionnaireCompleted   result = VendRequestQuestionnairesCompleted::NotRequired;
        boolean                             hasQuestionnaire;

        select  firstonly RecId from    vendQuestionnaireCheck
            where vendQuestionnaireCheck.VendorRequest == this.RecId;

        hasQuestionnaire = vendQuestionnaireCheck.RecId != 0;

        if (hasQuestionnaire)
        {
            // Checking for unanswered questionnaires
            select  firstonly RecId from    vendQuestionnaireCheck
                where vendQuestionnaireCheck.VendorRequest == this.RecId
                    && vendQuestionnaireCheck.QuestionnaireResponse == "";

            result = vendQuestionnaireCheck.RecId == 0 ? VendRequestQuestionnairesCompleted::Yes : VendRequestQuestionnairesCompleted::No;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the document status of the vendor request record regardless of the instance entity type.
    /// </summary>
    /// <returns>
    /// The text value of the document request status.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display VendRequestDocumentStatusText requestStatus()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the classification type of the vendor request, regardless of the subtype of the
    ///    <c>VendRequest</c> table.
    /// </summary>
    /// <returns>
    ///    An enumeration value that represents the classification type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendRequestInstanceEntityType requestTypeName()
    {
        VendRequestInstanceEntityType entityType;

        return entityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPendingReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the status of the vendor request to pending reviewed.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setPendingReview()
    {
        this.VendRequestWorkflowState = VendRequestWorkflowState::PendingCompletion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReviewed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the status of the vendor request to reviewed.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setReviewed()
    {
        this.VendRequestWorkflowState = VendRequestWorkflowState::Complete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAcceptAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the terms and conditions agreement check box should be
    /// displayed.
    /// </summary>
    /// <returns>
    /// true if the terms and conditions agreement check box should be displayed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display boolean showAcceptAgreement()
    {
        return this.configuration().ShowAcceptAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the terms and conditions should be displayed.
    /// </summary>
    /// <returns>
    /// true if the terms and conditions agreement text or check box are displayed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display boolean showAgreement()
    {
        VendRequestProfile configuration = this.configuration();

        return configuration.ShowAcceptAgreement || configuration.ShowAgreementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAgreementText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the terms and conditions text should be displayed.
    /// </summary>
    /// <returns>
    /// true if the terms and conditions agreement text should be displayed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display boolean showAgreementText()
    {
        return this.configuration().ShowAgreementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRequestorName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the requestor name from a <c>Requestor</c> field.
    /// </summary>
    /// <returns>
    ///    A string the represents the user name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Name showRequestorName()
    {
        Name                ret = '';
        DirPersonUser       dirPersonUser;

        select PersonParty from dirPersonUser
            where dirPersonUser.User == this.CreatedBy;

        if (dirPersonUser.PersonParty)
        {
            ret = DirPerson::find(dirPersonUser.PersonParty).Name;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVendorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the vendor name for account number on a record.
    /// </summary>
    /// <returns>
    /// A string that represents a Vendor name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display VendRequestVendorName showVendorName()
    {
        Name ret = '';

        if (this.AccountNum)
        {
            ret = VendTable::find(this.AccountNum).name();
        }
        else if (this is VendRequestCompany)
        {
            ret = DirPartyTable::findRec(this.VendParty).Name;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submittingUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the User ID of the sponsor of the new vendor request.
    /// </summary>
    /// <returns>
    /// The User ID of the new vendor request sponsor.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public userId submittingUserId()
    {
        userId userId;

        if (this.SponsoredBy == 0)
        {
            userId = this.CreatedBy;
        }
        else
        {
            userId = DirPersonUserEx::worker2UserId(this.SponsoredBy);
        }

        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        return ret && this.VendRequestWorkflowState == VendRequestWorkflowState::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a workflow.
    /// </summary>
    /// <remarks>
    /// This is an abstract method.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void workflowCancel()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCategoriesFromRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>VendRequestCateory</c> table from a <c>VendRequestCategory</c> record of a vendor
    ///    request.
    /// </summary>
    /// <param name="_vendRequestRecId">
    ///    The record ID of a <c>VendRequest</c> record.
    /// </param>
    /// <remarks>
    ///    Called when a vendor request with categories is approved through the workflow framework.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void addCategoriesFromRequest(VendRequestRecId _vendRequestRecId)
    {
        VendRequestCategory             vendRequestCategory;
        VendRequestCategory             requestCategoryOperatingUnit;
        VendProcurementCategoryStatus   vendProcurementCategoryStatus;
        VendRequest                     vendRequest;
        VendCategory                    vendCategory;

        if  (_vendRequestRecId)
        {
            select  AccountNum, RecId
            from    vendRequest
            where   vendRequest.RecId == _vendRequestRecId;

            if  (vendRequest.RecId)
            {
                while select Category from vendRequestCategory group by Category
                    where vendRequestCategory.VendRequest     == _vendRequestRecId
                        && vendRequestCategory.VendorConfirmed == VendRequestVendorConfirmed::Yes
                {
                    if  (!VendCategory::exist(vendRequest.AccountNum,vendRequestCategory.Category,vendRequestCategory.DataAreaId))
                    {
                        vendCategory.Category       = vendRequestCategory.Category;
                        vendCategory.VendorAccount  = vendRequest.AccountNum;
                        vendCategory.VendorDataArea = vendRequest.DataAreaId;
                        vendCategory.insert();
                    }

                    while select RecId, OperatingUnit, ValidFrom, ValidTo, CategoryStatus from requestCategoryOperatingUnit
                        where requestCategoryOperatingUnit.VendRequest == _vendRequestRecId
                            && requestCategoryOperatingUnit.Category == vendRequestCategory.Category
                            && requestCategoryOperatingUnit.OperatingUnit != 0
                    {
                        if (VendProcurementCategoryStatus::exist(
                            requestCategoryOperatingUnit.OperatingUnit,
                            vendCategory.RecId,
                            requestCategoryOperatingUnit.ValidFrom))
                        {
                            vendProcurementCategoryStatus.VendorCategory        = vendCategory.RecId;
                            vendProcurementCategoryStatus.OperatingUnit         = requestCategoryOperatingUnit.OperatingUnit;
                            vendProcurementCategoryStatus.ValidFrom             = requestCategoryOperatingUnit.ValidFrom;
                            vendProcurementCategoryStatus.ValidTo               = requestCategoryOperatingUnit.ValidTo;
                            vendProcurementCategoryStatus.VendorCategoryStatus  = requestCategoryOperatingUnit.CategoryStatus;
                            vendProcurementCategoryStatus.insert();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHasCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the category request has at least one category.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the vendor request item to check.
    /// </param>
    /// <returns>
    /// True if request can be approved; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkHasCategories(recId _recId)
    {
        VendRequestCategory vendRequestCategory;
        boolean             ret = true;

        // Check that at least one category is present
        select firstonly RecId from vendRequestCategory
            where vendRequestCategory.VendRequest == _recId;

        if  (!vendRequestCategory.RecId)
        {
            // At least one category has to be present to approve the request
            ret = checkFailed("@SYS342697");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendorQuestionnaireStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all the questionnaires for a vendor have been sent a response.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>VendRequest</c> record for which to check the status.
    /// </param>
    /// <param name="_vendorParty">
    /// The record ID of the <c>DirPartyTable</c> record of the vendor for which to check the status.
    /// </param>
    /// <returns>
    /// true if all of the questionnaires have been sent a response; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkVendorQuestionnaireStatus(recId _recId, recId _vendorParty)
    {
        VendQuestionnaire questionnaire;
        KMCollection      questionnaireDefinition;
        boolean           ret = true;

        // Find all unanswered questionnaire related to the vendor request that the vendor will respond to.
        while select RecId from questionnaire
            join Description from questionnaireDefinition
                where questionnaire.VendorRequest == _recId
                    && questionnaire.VendorParty == _vendorParty
                    && questionnaire.QuestionnaireResponse == ''
                    && questionnaire.QuestionnaireDefinition == questionnaireDefinition.KmCollectionId
                    && questionnaire.QuestionnaireDataArea == curext()
        {
            // Complete '%1' questionnaire.
            ret = checkFailed(strFmt("@SYS329984", questionnaireDefinition.Description));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendRequest</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>VendRequest</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendRequest</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendRequest find( recId _recId, boolean _forUpdate = false )
    {
        VendRequest vendRequest;

        vendRequest.selectForUpdate(_forUpdate);

        select firstonly vendRequest
            where vendRequest.RecId == _recId;

        return vendRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendorParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendRequest</c> table that is based on the party for the
    /// vendor.
    /// </summary>
    /// <param name="_partyRecId">
    /// The record ID of the <c>DirPartyTable</c> table to find.
    /// </param>
    /// <returns>
    /// A record in the <c>VendRequest</c> table; otherwise, an empty record.
    /// </returns>
    public static VendRequest findByVendorParty(DirPartyRecId _partyRecId)
    {
        VendRequest vendRequest;

        if (_partyRecId != 0)
        {
            select firstonly vendRequest
                where vendRequest.VendParty == _partyRecId;
        }

        return vendRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestQuestionnaires</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates questionnaires for the vendor or prospective vendor to complete for the vendor request.
    /// </summary>
    /// <param name="_vendRequest">
    /// A <c>VendRequest</c> table buffer.
    /// </param>
    /// <remarks>
    /// This method will retrieve the required questionnaire for each category that is associated to the
    /// vendor request as wells as questionnaires from the vendor request configurations form based on the
    /// request type.Unanswered questionnaires that are no longer required are deleted.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateRequestQuestionnaires(VendRequest _vendRequest)
    {
        ProcCategoryAdministrationActivity  categoryActivity;
        UnitofWork                          unitofWork = new UnitofWork();
        VendRequestCategory                 vendRequestCategory;
        VendQuestionnaire                   vendQuestionnaire;
        Array                               categoryQuestionnaires;
        Set                                 requestQuestionnaires = new Set(Types::String);
        SetEnumerator                       questionnaires;
        KMCollectionId                      kmCollectionId;
        KMCollection                        kmCollection;
        int                                 i, questionnaireCount;
        VendRequestCompany                  vendRequestCompany;
        VendFieldMetadataGroupType          vendRequestProfileType;
        VendRequestProfile                  vendRequestProfile;
        VendRequestProfileQuestionnaire     vendRequestProfileQuestionnaire;

        vendRequestCompany = _vendRequest as VendRequestCompany;

        if (_vendRequest is VendRequestCompany)
        {
            categoryActivity = ProcCategoryAdministrationActivity::Vendoronboarding;

            if (vendRequestCompany.IsExtension)
            {
                vendRequestProfileType = VendFieldMetadataGroupType::VendRequestExtensionProfile;
            }
            else
            {
                vendRequestProfileType = VendFieldMetadataGroupType::VendRequestProfile;
            }

            vendRequestProfile = VendRequestProfileHelper::findVendRequestProfile(
                vendRequestProfileType,
                DirParty::primaryPostalAddress(_vendRequest.VendParty).CountryRegionId);

            while select QuestionnaireDef
                from vendRequestProfileQuestionnaire
                where vendRequestProfileQuestionnaire.Company == _vendRequest.DataAreaId
                && vendRequestProfileQuestionnaire.VendRequestProfile == vendRequestProfile.RecId
            {
                requestQuestionnaires.add(vendRequestProfileQuestionnaire.QuestionnaireDef);
            }
        }
        else
        {
            categoryActivity = ProcCategoryAdministrationActivity::Forvendormanagement;
        }

        // Determine the questionnaires bases on the categories for the request.
        while select Category
            from vendRequestCategory
            where vendRequestCategory.VendRequest == _vendRequest.RecId
            && vendRequestCategory.VendorConfirmed != VendRequestVendorConfirmed::No
        {
            categoryQuestionnaires = EcoResCategory::getProcCategoryQuestionnaires(
                vendRequestCategory.Category,
                categoryActivity,
                CompanyInfo::current());

            questionnaireCount = categoryQuestionnaires.lastIndex() + 1;
            for (i = 1; i < questionnaireCount; i++)
            {
                kmCollection = categoryQuestionnaires.value(i);
                if  (!requestQuestionnaires.in(kmCollection.KmCollectionId))
                {
                    requestQuestionnaires.add(kmCollection.KmCollectionId);
                }
            }
        }

        // Add the request questionnaires that are required but not currently associated to the request.
        questionnaires = requestQuestionnaires.getEnumerator();
        while (questionnaires.moveNext())
        {
            kmCollectionId = questionnaires.current();
            if  (!VendQuestionnaire::exist(_vendRequest.RecId, kmCollectionId, _vendRequest.VendParty))
            {
                vendQuestionnaire.clear();
                vendQuestionnaire.VendorRequest = _vendRequest.RecId;
                vendQuestionnaire.VendorParty = _vendRequest.VendParty;
                vendQuestionnaire.QuestionnaireDataArea = curext();
                vendQuestionnaire.QuestionnaireDefinition = kmCollectionId;
                unitofWork.insertonSaveChanges(vendQuestionnaire);
            }
        }

        // Remove unanswered questionnaires not required
        while select vendQuestionnaire
            where vendQuestionnaire.VendorRequest == _vendRequest.RecId
            && vendQuestionnaire.VendorParty == _vendRequest.VendParty
            && vendQuestionnaire.QuestionnaireResponse == ''
        {
            if  (!requestQuestionnaires.in(vendQuestionnaire.QuestionnaireDefinition))
            {
                unitofWork.deleteonSaveChanges(vendQuestionnaire);
            }
        }

        unitofWork.saveChanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>webLookupBlockedVendors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query to use for lookups on the <c>AccountNum</c> field on the enterprise portal pages.
    /// </summary>
    /// <returns>
    ///    A query that will be used in the building of the <c>VendTable</c> lookup field on the enterprise
    ///    portal vendor request status change add and edit pages.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Query webLookupBlockedVendors()
    {
        Query                   query         = new Query();
        QueryBuildDataSource    qbdsVendTable;
        QueryBuildDataSource    qbdsDirPartyTable;
        VendBlockedReleaseDate  releasedDate = DateTimeUtil::addDays(DateTimeUtil::utcNow(),1);

        qbdsVendTable = query.addDataSource(tableNum(VendTable));

        qbdsDirPartyTable = qbdsVendTable.addDataSource(tableNum(DirPartyTable));
        qbdsDirPartyTable.joinMode(JoinMode::ExistsJoin);
        qbdsDirPartyTable.addLink(fieldNum(VendTable, Party), fieldNum(DirPartyTable, RecId));

        qbdsVendTable.addRange(fieldNum(VendTable,Blocked)).value(queryValue(CustVendorBlocked::Invoice));
        qbdsVendTable.addRange(fieldNum(VendTable,Blocked)).value(queryValue(CustVendorBlocked::All));
        qbdsVendTable.addRange(fieldNum(VendTable,Blocked)).value(queryValue(CustVendorBlocked::Payment));
        qbdsVendTable.addRange(fieldNum(VendTable,Blocked)).value(queryValue(CustVendorBlocked::Requisition));
        qbdsVendTable.addRange(fieldNum(VendTable,Blocked)).value(queryValue(CustVendorBlocked::PurchOrder));
        qbdsVendTable.addRange(fieldNum(VendTable,BlockedReleaseDate)).value(queryValue(''));
        qbdsVendTable.addRange(fieldNum(VendTable,BlockedReleaseDate)).value(strFmt( '%1 > %2',
                                                        fieldStr(VendTable,BlockedReleaseDate),
                                                        releasedDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>webLookupContactPartyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to use for look ups on the contact party field on the Enterprise Portal pages.
    /// </summary>
    /// <param name="_vendParty">
    /// The vendor party record ID for which to build a look up.
    /// </param>
    /// <returns>
    /// A query to use when building the look up field on the Enterprise Portal Vendor Request add and edit
    /// pages.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Query webLookupContactPartyQuery(recId _vendParty)
    {
        Query                   query = new Query();
        QueryBuildDataSource    personNameDataSource;
        QueryBuildDataSource    personDataSource;
        QueryBuildDataSource    dirPartyRelationshipDataSource;
        QueryBuildRange         range;

        personNameDataSource = query.addDataSource(tableNum(DirPersonName));
        personDataSource = personNameDataSource.addDataSource(tableNum(DirPerson));
        personDataSource.joinMode(JoinMode::InnerJoin);
        personDataSource.addLink(fieldNum(DirPersonName, Person), fieldNum(DirPerson, RecId));

        if (_vendParty != 0)
        {
            dirPartyRelationshipDataSource = personNameDataSource.addDataSource(tableNum(DirPartyRelationship));
            dirPartyRelationshipDataSource.addLink(fieldNum(DirPersonName, Person), fieldNum(DirPartyRelationship, ChildParty));

            dirPartyRelationshipDataSource.joinMode(JoinMode::ExistsJoin);
            range = dirPartyRelationshipDataSource.addRange(fieldNum(DirPartyRelationship, ParentParty));
            range.value(queryValue(_vendParty));
        }
        else
        {
            range = personDataSource.addRange(fieldNum(DirPerson, RecId));
            range.value(queryValue(0));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>webLookupOnBehalfOfQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query for lookups on the requester field on the enterprise portal pages.
    /// </summary>
    /// <returns>
    ///    A query that will be used in building a lookup field on the add and edit pages of the enterprise
    ///    portal vendor request.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Query webLookupOnBehalfOfQuery()
    {
        Query                   query               = new Query();
        QueryBuildDataSource    qbdsHcmEmployment;
        QueryBuildDataSource    qbdsHcmWorker;
        QueryBuildRange         qbr;

        qbdsHcmWorker       = query.addDataSource(tableNum(HcmWorker));
        qbdsHcmEmployment   = qbdsHcmWorker.addDataSource(tableNum(HcmEmployment));
        qbdsHcmEmployment.joinMode(JoinMode::InnerJoin);
        qbdsHcmEmployment.addLink(fieldNum(HcmWorker, RecId), fieldNum(HcmEmployment, Worker));
        qbr = qbdsHcmEmployment.addRange(fieldNum(HcmEmployment, LegalEntity));
        qbr.status(RangeStatus::Hidden);
        qbr.value(queryValue(CompanyInfo::current()));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS317733</DeveloperDocumentation>
	<FormRef>VendRequestNVJForm</FormRef>
	<Label>@SYS324508</Label>
	<ListPageRef>VendRequestListPage</ListPageRef>
	<SingularLabel>@SYS130380</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>VendRequestNumber</TitleField1>
	<TitleField2>VendParty</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Obsolete</Modules>
	<ReplacementKey>VendRequestNumberIdx</ReplacementKey>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRequestNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendParty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRequestNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contact</Name>
			<Label>@SYS14559</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactJobTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EntityType</Name>
			<Label>@SYS93418</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NVJ</Name>
			<Label>@SYS130365</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompletedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SponsoredBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusinessJustification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Preparer</Name>
			<Label>@SYS132198</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>employeeRequestorName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employeeRequestorTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProspectiveProfile</Name>
			<Label>@SYS130796</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProspectiveProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RejectionInformation</Name>
			<Label>@SYS191364</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Request</Name>
			<Label>@SYS130390</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRequestNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employeeRequestorName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employeeRequestorTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employeeSponsoredByName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employeeSponsoredByTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RequestedBy</Name>
			<Label>@sys132957</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>showRequestorName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>showVendorName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Requester</Name>
			<Label>@SYS130492</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SponsoredBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employeeSponsoredByTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Sponsor</Name>
			<Label>@SYS130492</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>employeeSponsoredByName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employeeSponsoredByTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorInformation</Name>
			<Label>@SYS137195</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendParty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowState</Name>
			<Label>@SYS110684</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRequestWorkflowState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptChecked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AcceptChecked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestAcceptChecked</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BusinessJustification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestJustificationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CompletedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestCompletionDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactJobTitle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestJobTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ContactParty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestContactPartyRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProspectiveProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestProspectiveProfileRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestReasonRef</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SponsoredBy</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS131316</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendParty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestVendPartyRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendRequestNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendRequestWorkflowState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendRequestWorkflowState</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendRequestNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendRequestNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendRequestProspectiveProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProspectiveProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendRequestBusinessJustificationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BusinessJustification</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContactPartyTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContactParty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendPartyTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendParty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReasonTableRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReasonRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SponsoredBy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BusinessJustification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendRequestBusinessJustification</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendRequestBusinessJustification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendRequestBusinessJustification_VendRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusinessJustification</Name>
					<Field>BusinessJustification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactParty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPerson</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DirPerson_VendRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactParty</Name>
					<Field>ContactParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirAddressBookParty</Name>
			<RelatedTable>DirAddressBookPartyAllView</RelatedTable>
			<RelatedTableRole>DirAddressBookPartyAllView</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendRequest</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendParty</Name>
					<Field>VendParty</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PersonTitleTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PersonTitleTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactJobTitle</Name>
					<SourceEDT>VendRequestJobTitle</SourceEDT>
					<Field>ContactJobTitle</Field>
					<RelatedField>Title</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProspectiveProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendRequestProspectiveProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendRequestProspectiveProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendRequestProspectiveProfile_VendRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProspectiveProfile</Name>
					<Field>ProspectiveProfile</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef_1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReasonTableRef_VendRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRef</Name>
					<Field>ReasonRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendParty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DirPartyTable_VendRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendParty</Name>
					<Field>VendParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Worker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_VendRequest</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SponsoredBy</Name>
					<Field>SponsoredBy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>