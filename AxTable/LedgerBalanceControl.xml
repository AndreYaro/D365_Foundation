<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerBalanceControl extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountName</Name>
				<Source><![CDATA[
    display Name accountName()
    {
        return MainAccount::getLocalizedName(this.MainAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceAfter</Name>
				<Source><![CDATA[
    AmountMST balanceAfter(LedgerJournalId ledgerJournalId)
    {
        return this.balanceBefore() + this.movement(ledgerJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceBefore</Name>
				<Source><![CDATA[
    display AmountMST balanceBefore()
    {
        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        TransDate fromDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        TransDate toDate = LedgerFiscalCalendar::findFiscalYearEndDateByDate(calendarRecId,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        MainAccount mainAccount;

        mainAccount = MainAccount::find(this.MainAccount);
        return mainAccount.calculateBalance(fromDate, toDate, FiscalPeriodType::Opening);
    }

]]></Source>
			</Method>
			<Method>
				<Name>movement</Name>
				<Source><![CDATA[
    AmountMST movement(LedgerJournalId _ledgerJournalId)
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        AmountMST                           amountMST;
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueView;

        while select sum(AmountCurCredit), sum(AmountCurDebit)
                from ledgerJournalTrans
                group by Company, CurrencyCode, ExchRate, TransDate, JournalNum
                where ledgerJournalTrans.JournalNum == _ledgerJournalId
                join DisplayValue from dimensionAttributeLevelValueView
                where dimensionAttributeLevelValueView.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                    && dimensionAttributeLevelValueView.ValueCombinationRecId == ledgerJournalTrans.LedgerDimension
                    && dimensionAttributeLevelValueView.DisplayValue == MainAccount::find(this.MainAccount).MainAccountId
        {
            if (ledgerJournalTrans.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::current()))
            {
                amountMST += ledgerJournalTrans.AmountCurDebit - ledgerJournalTrans.AmountCurCredit;
            }
            else
            {
                amountMST += ledgerJournalTrans.calcDebitMST() - ledgerJournalTrans.calcCreditMST();
            }
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementOtherJournals</Name>
				<Source><![CDATA[
    AmountMST movementOtherJournals(LedgerJournalId _ledgerJournalId, LedgerJournalACType _accountType)
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerJournalTable                  ledgerJournalTable;
        AmountMST                           amountMST;
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueView;

        while select sum(AmountCurCredit), sum(AmountCurDebit)
            from  ledgerJournalTrans
            group by Company, CurrencyCode, ExchRate, LedgerDimension, OffsetLedgerDimension, TransDate, JournalNum
            where ledgerJournalTrans.JournalNum        != _ledgerJournalId
            join DisplayValue from dimensionAttributeLevelValueView
            where dimensionAttributeLevelValueView.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                && (dimensionAttributeLevelValueView.ValueCombinationRecId == ledgerJournalTrans.LedgerDimension
                    || dimensionAttributeLevelValueView.ValueCombinationRecId == ledgerJournalTrans.OffsetLedgerDimension)
                && dimensionAttributeLevelValueView.DisplayValue == MainAccount::find(this.MainAccount).MainAccountId
            join  JournalNum from ledgerJournalTable
            where ledgerJournalTable.JournalNum  == ledgerJournalTrans.JournalNum &&
                  !ledgerJournalTable.Posted

        {
            if (LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(ledgerJournalTrans.LedgerDimension) == this.MainAccount)
            {
                if (ledgerJournalTrans.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::current()))
                {
                    amountMST += ledgerJournalTrans.AmountCurDebit - ledgerJournalTrans.AmountCurCredit;
                }
                else
                {
                    amountMST += ledgerJournalTrans.calcDebitMST() - ledgerJournalTrans.calcCreditMST();
                }
            }

            if (LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension) == this.MainAccount)
            {
                if (ledgerJournalTrans.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::current()))
                {
                    amountMST -= ledgerJournalTrans.AmountCurDebit - ledgerJournalTrans.AmountCurCredit;
                }
                else
                {
                    amountMST -= ledgerJournalTrans.calcDebitMST() - ledgerJournalTrans.calcCreditMST();
                }
            }
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _mainAccountRecId)
    {
        boolean ret = true;
        ;

        if (!LedgerBalanceControl::exist(_mainAccountRecId))
        {
            ret = checkFailed(strfmt(LedgerBalanceControl::txtNotExist(), _mainAccountRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _mainAccountRecId )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     ledgerBalanceControl
                 where
                     ledgerBalanceControl.MainAccount == _mainAccountRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static LedgerBalanceControl find(
        RecId _mainAccountRecId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerBalanceControl ledgerBalanceControl;
        ;

        ledgerBalanceControl.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerBalanceControl.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            ledgerBalanceControl
            where
            ledgerBalanceControl.MainAccount == _mainAccountRecId;

        return ledgerBalanceControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS9779";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS125899</DeveloperDocumentation>
	<FormRef>LedgerBalanceControl</FormRef>
	<Label>@SYS24912</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>MainAccount</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>MainAccountIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>MainAccountIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MainAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MainAccountRecId</ExtendedDataType>
			<Label>@SYS135766</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MainAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MainAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MainAccount</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MainAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MainAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MainAccount_LedgerBalanceControl</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MainAccount</Name>
					<Field>MainAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>