<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashDisc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CashDisc extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        LedgerCache::clearScope(LedgerCacheScope::DiscountMainAccountDimensionListProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    public AmountCur discAmount(
        CurrencyCode currencyCode, // Currency of the base amount
        AmountCur amountCur)       // Base amount to calculate cash discount from
    {
        return CurrencyExchangeHelper::amount(amountCur * this.Percent / 100, currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmountOnInvoice</Name>
				<Source><![CDATA[
    public AmountCur discAmountOnInvoice(
        CurrencyCode currencyCode, // Currency of base amount
        AmountCur amountCur,       // Base amount for calc. cash discount amount
        DiscPct cashDiscPercent)   // Cash discount applied in the invoice
    {
        return CurrencyExchangeHelper::amount(amountCur * cashDiscPercent / 100, currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discDate</Name>
				<Source><![CDATA[
    public DiscDate discDate(TransDate transDate)
    {
        TransDate discDate;

        discDate = this.determineDiscDateForDiscountMethod(transDate);

        if (this.NumOfMonths)
        {
            discDate = dateMthFwd(discDate, this.NumOfMonths);
            if (this.DiscMethod == NetCurrent::CurrentMth
                    || this.DiscMethod == NetCurrent::CurrentQuart
                    || this.DiscMethod == NetCurrent::CurrentYear)
            {
                discDate = endmth(discDate);
            }
        }

        discDate += this.NumOfDays;

        return discDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDiscDateForDiscountMethod</Name>
				<Source><![CDATA[
    protected DiscDate determineDiscDateForDiscountMethod(TransDate _transDate)
    {
        TransDate discDate;

        PreferredLocale locale = new xSession().preferredLocale();

        switch (this.DiscMethod)
        {
            case NetCurrent::Net:
                discDate = _transDate;
                break;

            case NetCurrent::CurrentMth:
                discDate = endMth(_transDate);
                break;

            case NetCurrent::CurrentQuart:
                discDate = dateEndQtr(_transDate);
                break;

            case NetCurrent::CurrentYear:
                discDate = nextYr(_transDate - dayOfYr(_transDate));
                break;

            case NetCurrent::CurrentWeek:
                discDate = DateTimeUtil::getEndOfWeekDate(locale, _transDate);
                break;
        }
        return discDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        LedgerCache::clearScope(LedgerCacheScope::DiscountMainAccountDimensionListProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        if (this.PaidLedgerDimension != this.orig().PaidLedgerDimension)
        {
            LedgerCache::clearScope(LedgerCacheScope::DiscountMainAccountDimensionListProvider);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret;

        ret = super(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldNum(CashDisc, PaidLedgerDimension):
                    ret = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.PaidLedgerDimension).MainAccountId);
                    break;

                case fieldNum(CashDisc, ReceivedLedgerDimension):
                    ret = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.ReceivedLedgerDimension).MainAccountId);
                    break;

                case fieldNum(CashDisc, Percent):
                    if (this.Percent > 100)
                    {
                        ret = checkFailed("@SYS27359");
                    }
                    break;

                case fieldNum(CashDisc, CashDiscCodeNext):
                    ret = CashDisc::checkIteration(this.CashDiscCode, this.CashDiscCodeNext);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (this.DiscountOffsetMethod_PSN == DiscountOffsetMethod::AccountReceived && !this.ReceivedLedgerDimension)
            {
                ret = checkFailed(strfmt("@SPS1913", "@SYS433"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    public static AmountCur cashDiscAmount(
        CashDiscCode cashDiscCode,
        CurrencyCode currencyCode,
        AmountCur baseAmount,
        AmountCur amountExclVat,
        ModuleCustVend custVend,
        DiscPct cashDiscPercent = 0)
    {
        CashDisc cashDisc = CashDisc::find(cashDiscCode);

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());

            if (cashDiscPercent)
            {
                return cashDisc.discAmountOnInvoice(
                    currencyCode,
                    LedgerJournalCashDiscService::baseAmountCashDisc(
                        custVend,
                        amountExclVat,
                        baseAmount - amountExclVat,
                        cashDiscPercent),
                    cashDiscPercent);
            }
            else
            {
                return 0;
            }
        }
        else if (cashDisc)
        {
            return cashDisc.discAmount(
                currencyCode,
                LedgerJournalCashDiscService::baseAmountCashDisc(
                    custVend,
                    amountExclVat,
                    baseAmount - amountExclVat,
                    cashDisc.Percent));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cash discount amount.
    /// </summary>
    /// <param name="cashDiscCode">
    /// The cash disc code.
    /// </param>
    /// <param name="currencyCode">
    /// The currency code of base amount.
    /// </param>
    /// <param name="baseAmount">
    /// The Incl tax amount.
    /// </param>
    /// <param name="amountExclVat">
    /// The Excl tax amount.
    /// </param>
    /// <param name="custVend">
    /// The customer or vendor module.
    /// </param>
    /// <param name="cashDiscPercent">
    /// The cash disc percent; optional.
    /// </param>
    /// <param name="_noneTaxamount">
    /// The none tax amount; optional.
    /// </param>
    /// <returns>
    /// The cash discount amount.
    /// </returns>
    public static AmountCur cashDiscAmount_IN(
        CashDiscCode cashDiscCode,
        CurrencyCode currencyCode,
        AmountCur baseAmount,
        AmountCur amountExclVat,
        ModuleCustVend custVend,
        DiscPct cashDiscPercent = 0,
        AmountCur _noneTaxamount = 0)
    {
        CashDisc cashDisc;

        cashDisc = CashDisc::find(cashDiscCode);

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            if (cashDiscPercent)
            {
                return cashDisc.discAmountOnInvoice(
                    currencyCode,
                    LedgerJournalCashDiscService::baseAmountCashDisc(
                        custVend,
                        amountExclVat,
                        baseAmount - amountExclVat - _noneTaxamount,
                        cashDiscPercent),
                    cashDiscPercent);
            }
        }
        else if (cashDisc)
        {
            return cashDisc.discAmount(
                currencyCode,
                LedgerJournalCashDiscService::baseAmountCashDisc(
                    custVend,
                    amountExclVat,
                    baseAmount - amountExclVat - _noneTaxamount,
                    cashDisc.Percent));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDate</Name>
				<Source><![CDATA[
    public static CashDiscdate cashDiscDate(
        CashDiscCode _discCode,
        CashDiscdate _discDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return  _discCode ? CashDisc::find(_discCode).discDate(_discDate) : dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscTxt</Name>
				<Source><![CDATA[
    public static CashDiscFreeTxt cashDiscTxt(
        CashDiscCode _cashDiscCode,
        TransDate _transDate,
        CashDiscVat _cashDiscVat,
        AmountCur _amountInclVAT,
        AmountCur _amountExclVAT,
        CurrencyCode _currencyCode,
        CashDiscdate _cashDiscdate,
        DiscAmount _cashDiscAmount,
        LanguageId _languageId,
        ModuleCustVend _custVend = ModuleCustVend::Cust)
    {
        Label label;
        boolean first = true;
        CashDiscdate cashDiscdate;
        CashDisc cashDisc;
        DiscAmount cashDiscAmount;
        str singleDateCashDiscTxt;
        str multiDateCashDiscTxt;
        str cashDiscTxt;
        str labelSingleCashDisc;
        str labelGrantedInTermDiscount;
        str labelBeforeFirst;
        str labelBeforeOther;

        label = new Label(_languageId);

        if (_languageId)
        {
            labelSingleCashDisc = label.extractString(literalstr("@SYS24359"));
            labelGrantedInTermDiscount = label.extractString(literalstr("@SYS62050"));
            labelBeforeFirst = label.extractString(literalstr("@SYS62051"));
            labelBeforeOther = label.extractString(literalstr("@SYS62052"));
        }
        else
        {
            labelSingleCashDisc = "@SYS24359";
            labelGrantedInTermDiscount = "@SYS62050";
            labelBeforeFirst = "@SYS62051";
            labelBeforeOther = "@SYS62052";
        }

        if (_cashDiscCode && _transDate)
        {
            for (cashDisc = CashDisc::find(_cashDiscCode);
                 cashDisc;
                 cashDisc = CashDisc::find(cashDisc.CashDiscCodeNext))
            {
                if (!first || !_cashDiscdate)
                {
                    cashDiscdate = cashDisc.discDate(_transDate);
                    cashDiscAmount = CashDisc::cashDiscAmount(
                        cashDisc.CashDiscCode,
                        _currencyCode,
                        _amountInclVAT,
                        _amountExclVAT,
                        _custVend);
                }
                else
                {
                    cashDiscdate = _cashDiscdate;
                    cashDiscAmount = _cashDiscAmount;
                }

                if (first)
                {
                    singleDateCashDiscTxt = strfmt(labelSingleCashDisc, strFmtByLanguage(_languageId, '{0:d}', cashDiscdate), strFmtByLanguage(_languageId, '{0:N}', cashDiscAmount), _currencyCode);
                    multiDateCashDiscTxt = strfmt(labelBeforeFirst, strFmtByLanguage(_languageId, '{0:N}', cashDiscAmount), _currencyCode, strFmtByLanguage(_languageId, '{0:d}', cashDiscdate));
                }
                else
                {
                    singleDateCashDiscTxt = '';
                    multiDateCashDiscTxt += strfmt(labelBeforeOther, strFmtByLanguage(_languageId, '{0:N}', cashDiscAmount), _currencyCode, strFmtByLanguage(_languageId, '{0:d}', cashDiscdate));
                }

                first = false;
            }
        }

        if (!first)
        {
            if (singleDateCashDiscTxt)
            {
                cashDiscTxt = singleDateCashDiscTxt;
            }
            else
            {
                cashDiscTxt = strfmt(labelGrantedInTermDiscount, multiDateCashDiscTxt);
            }
        }

        return cashDiscTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CashDiscCode cashDiscCode)
    {
        boolean ret = true;

        if (!CashDisc::exist(cashDiscCode))
        {
            ret = checkFailed(strFmt(CashDisc::txtNotExist(), cashDiscCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIteration</Name>
				<Source><![CDATA[
    public static boolean checkIteration(CashDiscCode _cashDiscCodeOrig, CashDiscCode _cashDiscCodeNext)
    {
        if (_cashDiscCodeOrig == _cashDiscCodeNext)
        {
            return checkFailed("@SYS25609");
        }

        if (_cashDiscCodeNext)
        {
            return CashDisc::checkIteration(_cashDiscCodeOrig, CashDisc::find(_cashDiscCodeNext).CashDiscCodeNext);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CashDiscCode cashDiscCode)
    {
        boolean found;

        found = (select firstonly RecId from cashDisc
            where cashDisc.CashDiscCode == cashDiscCode).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>CashDisc</c> table exists.
    /// </summary>
    /// <param name="_company">
    ///    The company ID of the cash discount record to check for existence.
    /// </param>
    /// <param name="_cashDiscCode">
    ///    The cash discount ID of the cash discount record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByCompany(CompanyId _company, CashDiscCode _cashDiscCode)
    {
        boolean found;

        changecompany(_company)
        {
            found = CashDisc::exist(_cashDiscCode);
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CashDisc find(
        CashDiscCode _cashDiscCode,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CashDisc cashDisc;

        cashDisc.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            cashDisc.concurrencyModel(_concurrencyModel);
        }

        select firstonly cashDisc
            where cashDisc.CashDiscCode == _cashDiscCode;

        return cashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CashDisc</c> table.
    /// </summary>
    /// <param name="_company">
    ///    The company ID of the cash discount record.
    /// </param>
    /// <param name="_cashDiscCode">
    ///    The cash discount ID of the cash discount record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A concurrency model to use; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CashDisc</c> table; otherwise, an empty record.
    /// </returns>
    public static CashDisc findByCompany(
        CompanyId _company,
        CashDiscCode _cashDiscCode,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CashDisc cashDisc;

        changecompany(_company)
        {
            cashDisc = CashDisc::find(_cashDiscCode, _forUpdate, _concurrencyModel);
        }

        return cashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCashDisc</Name>
				<Source><![CDATA[
    public static void lookupCashDisc(FormStringControl _stringControl, str _filterStr, CompanyId _company)
    {
        Args e;
        CompanyId company;
        FormRun formRun;

        company = _company;

        if (company == '')
        {
            company = curext();
        }

        changecompany(company)
        {
            e = new Args();
            e.name(formStr(CashDiscLookup));
            e.lookupField(fieldNum(CashDisc, CashDiscCode));
            e.lookupValue(_filterStr);
            e.caller(_stringControl);

            formRun = classfactory.formRunClass(e);
            formRun.init();

            _stringControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCashDiscCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the cash discount code lookup form.
    /// </summary>
    /// <param name="_formStringControl">
    ///    The calling forms information.
    /// </param>
    /// <param name="_companyId">
    ///    The ID of the company that the currencies to display are defined in; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The company sent in does not exist.
    /// </exception>
    public static void lookupCashDiscCode(FormStringControl _formStringControl, CompanyId _companyId = curext())
    {
        Args args;
        CompanyId companyId;
        FormRun formRun;

        // The following block is needed for the case that intercompany transactions is disabled and someone passes
        // in an empty string.
        if (_companyId == '')
        {
            companyId = curext();
        }
        else
        {
            companyId = _companyId;

            if (!xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666", companyId));
            }
        }

        changecompany(companyId)
        {
            args = new Args();
            args.name(formStr(CashDiscLookup));
            args.caller(_formStringControl);
            args.lookupField(fieldNum(CashDisc, CashDiscCode));
            args.lookupValue(_formStringControl.text());

            formRun = classfactory.formRunClass(args);
            formRun.init();

            _formStringControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paidLedgerDimension</Name>
				<Source><![CDATA[
    public static LedgerDimensionDefaultAccount paidLedgerDimension(CashDiscCode _cashDiscCode)
    {
        return CashDisc::find(_cashDiscCode).PaidLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedLedgerDimension</Name>
				<Source><![CDATA[
    public static LedgerDimensionDefaultAccount receivedLedgerDimension(CashDiscCode _cashDiscCode)
    {
        return CashDisc::find(_cashDiscCode).ReceivedLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    public static FreeTxt txt(
        CashDiscCode cashDiscCode,
        LanguageId languageId = CompanyInfo::languageId())
    {
        CashDisc cashDisc = CashDisc::find(cashDiscCode);

        LanguageTxt languageTxt = LanguageTxt::find(
            cashDisc.TableId,
            cashDisc.RecId,
            languageId);

        return languageTxt.Txt ? languageTxt.Txt : cashDisc.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS14967";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS127169</DeveloperDocumentation>
	<FormRef>CashDisc</FormRef>
	<Label>@SYS4376</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CashDiscCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CodeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Bank</Modules>
	<PrimaryIndex>CodeIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LanguageTxt</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LanguageTxt</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfMonths</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivedLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivedLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiscMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfMonths</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS3881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaidLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivedLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountOffsetMethod_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscCodeNext</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCodeNext</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
			<Label>@SYS59091</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DiscMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NetCurrent</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DiscountOffsetMethod_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>DiscountOffsetMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumOfDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PositiveDays</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumOfMonths</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PositiveMonths</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaidLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS4501</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReceivedLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS433</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CashDiscCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReceivedLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReceivedLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaidLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PaidLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCodeNext</Name>
					<SourceEDT>CashDiscCode</SourceEDT>
					<Field>CashDiscCodeNext</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaidLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PaidLedgerDimension_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CashDisc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaidLedgerDimension</Name>
					<Field>PaidLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReceivedLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ReceivedLedgerDimension_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CashDisc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceivedLedgerDimension</Name>
					<Field>ReceivedLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>