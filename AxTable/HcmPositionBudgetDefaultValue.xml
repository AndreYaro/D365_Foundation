<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionBudgetDefaultValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionBudgetDefaultValue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>futureRecordExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a future-dated record that corresponds to the current record exists.
    /// </summary>
    /// <returns>
    ///    true if a future record exists; otherwise, false.
    /// </returns>
    public boolean futureRecordExists()
    {
        boolean futureRecordExists = false;
        utcdatetime maxDateValue = DateTimeUtil::maxValue();
        utcdatetime futureFromDate;
        HcmPositionBudgetDefaultValue hcmPositionBudgetDefaultValue;

        if (this.RecId && this.ValidTo < maxDateValue)
        {
            futureFromDate = (DateTimeUtil::addSeconds(this.ValidTo, 1));

            select firstonly ValidTimeState(futureFromDate, maxDateValue) RecId from hcmPositionBudgetDefaultValue
                where hcmPositionBudgetDefaultValue.Position == this.Position
                && hcmPositionBudgetDefaultValue.LegalEntity == this.LegalEntity;

            futureRecordExists = (hcmPositionBudgetDefaultValue.RecId != 0);
        }

        return futureRecordExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmPositionBudgetDefaultValue</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmPositionBudgetDefaultValueRecId _recId)
    {
        boolean ret = true;

        if (!HcmPositionBudgetDefaultValue::exist(_recId))
        {
            ret = checkFailed(strFmt(HcmPositionBudgetDefaultValue::txtNotExist(), tableStr(HcmPositionBudgetDefaultValue)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmPositionBudgetDefaultValue</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(HcmPositionBudgetDefaultValueRecId _recId)
    {
        utcdatetime validFrom, validTo;
        validFrom = DateTimeUtil::minValue();
        validTo   = DateTimeUtil::maxValue();

        return _recId && (select firstonly ValidTimeState(validFrom, validTo) RecId from hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionBudgetDefaultValue</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>HcmPositionBudgetDefaultValue</c> record.
    /// </returns>
    public static HcmPositionBudgetDefaultValue find(
    HcmPositionBudgetDefaultValueRecId       _recId,
    boolean                                  _forUpdate = false,
    ConcurrencyModel                         _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionBudgetDefaultValue hcmPositionBudgetDefaultValue;
        utcdatetime validFrom, validTo;
        validFrom = DateTimeUtil::minValue();
        validTo   = DateTimeUtil::maxValue();

        hcmPositionBudgetDefaultValue.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionBudgetDefaultValue.concurrencyModel(_concurrencyModel);
        }

        select firstonly ValidTimeState(validFrom, validTo) hcmPositionBudgetDefaultValue
             where hcmPositionBudgetDefaultValue.RecId == _recId;

        return hcmPositionBudgetDefaultValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPositionLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionBudgetDefaultValue</c> table that is based on the specified
    /// <c>Position</c> and <c>LegalEntity</c> values.
    /// </summary>
    /// <param name="_position">
    /// The value of the <c>Position</c> field to find.
    /// </param>
    /// <param name="_legalEntity">
    /// The value of the <c>LegalEntity</c> field to find.
    /// </param>
    /// <param name="_validFrom">
    /// A <c>ValidFrom</c> field value.
    /// </param>
    /// <param name="_validTo">
    /// A <c>ValidTo</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record or multiple records from the <c>HcmPositionBudgetDefaultValue</c> table; otherwise, an
    /// empty record.
    /// </returns>
    public static HcmPositionBudgetDefaultValue findByPositionLegalEntity(
    HcmPositionRecId        _position,
    CompanyInfoRecId        _legalEntity,
    utcdatetime             _validFrom = DateTimeUtil::utcNow(),
    utcdatetime             _validTo   = _validFrom,
    boolean                 _forUpdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionBudgetDefaultValue hcmPositionBudgetDefaultValue;

        hcmPositionBudgetDefaultValue.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionBudgetDefaultValue.concurrencyModel(_concurrencyModel);
        }

        if (_position && _legalEntity)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.Position == _position &&
                    hcmPositionBudgetDefaultValue.LegalEntity == _legalEntity;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.Position == _position &&
                    hcmPositionBudgetDefaultValue.LegalEntity == _legalEntity;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.Position == _position &&
                    hcmPositionBudgetDefaultValue.LegalEntity == _legalEntity;
            }
        }

        return hcmPositionBudgetDefaultValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTimeState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionBudgetDefaultValue</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_validFrom">
    /// A <c>ValidFrom</c> field value.
    /// </param>
    /// <param name="_validTo">
    /// A <c>ValidTo</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>HcmPositionBudgetDefaultValue</c> record.
    /// </returns>
    /// <remarks>
    /// This method tries to get the record and is an expensive operation.
    /// </remarks>
    public static HcmPositionBudgetDefaultValue findByTimeState(
    HcmPositionBudgetDefaultValueRecId              _recId,
    utcdatetime                                     _validFrom = DateTimeUtil::utcNow(),
    utcdatetime                                     _validTo   = _validFrom,
    boolean                                         _forUpdate = false,
    ConcurrencyModel                                _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionBudgetDefaultValue hcmPositionBudgetDefaultValue;

        hcmPositionBudgetDefaultValue.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionBudgetDefaultValue.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.RecId == _recId;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.RecId == _recId;
            }
            else
            {
                select firstonly ValidTimeState(_validFrom, _validTo) hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.RecId == _recId;
            }
        }

        return hcmPositionBudgetDefaultValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveByTimeState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the record that corresponds to a specified record ID value is active as of the
    /// specified date time values.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <param name="_validFrom">
    /// A <c>ValidFrom</c> field value.
    /// </param>
    /// <param name="_validTo">
    /// A <c>ValidTo</c> field value.
    /// </param>
    /// <returns>
    /// true if the record is active as of specified date time values; otherwise, false .
    /// </returns>
    public static boolean isActiveByTimeState(
        HcmPositionBudgetDefaultValueRecId _recId,
        utcdatetime _validFrom = DateTimeUtil::utcNow(),
        utcdatetime _validTo   = _validFrom)
    {
        HcmPositionBudgetDefaultValue hcmPositionBudgetDefaultValue;

        if (_recId)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly RecId from hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.RecId == _recId;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) RecId from hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.RecId == _recId;
            }
            else
            {
                select firstonly ValidTimeState(_validFrom, _validTo) RecId from hcmPositionBudgetDefaultValue
                    where hcmPositionBudgetDefaultValue.RecId == _recId;
            }
        }

        return _recId && hcmPositionBudgetDefaultValue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS190023</DeveloperDocumentation>
	<Label>@GLS190024</Label>
	<TitleField1>Position</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>PositionBudgetDefaultIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>UtcDateTime</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidTimeState</Name>
			<Label>@SYS8280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<Label>@SYS322242</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Position</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PositionBudgetDefaultIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Position</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Position</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmPosition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Position</Name>
					<Field>Position</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>