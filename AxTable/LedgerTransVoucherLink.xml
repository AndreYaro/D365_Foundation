<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransVoucherLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerTransVoucherLink extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrCreateParentVoucherLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a <c>LedgerTransVoucherLink</c> table record for a voucher.
    /// </summary>
    /// <param name = "_parentVoucher">The parent voucher.</param>
    /// <param name = "_parentTransDate">The parent voucher transaction date.</param>
    /// <param name = "_parentCompany">The parent company.</param>
    /// <returns>The <c>LedgerTransVoucherLink</c> table record.</returns>
    public static LedgerTransVoucherLink findOrCreateParentVoucherLink(Voucher _parentVoucher, TransDate _parentTransDate, CompanyId _parentCompany = curExt())
    {
        LedgerTransVoucherLink ledgerTransVoucherLink = LedgerTransVoucherLink::findVoucherLink(_parentVoucher, _parentTransDate, _parentCompany);

        // check if a record for the parent already exists
        RecId voucherGroupId = ledgerTransVoucherLink.VoucherGroupId;

        if (voucherGroupId == 0)
        {
            changecompany(_parentCompany)
            {
                ledgerTransVoucherLink.clear();

                // The parent link record is the start of a voucher group
                ledgerTransVoucherLink.Voucher = _parentVoucher;
                ledgerTransVoucherLink.TransDate = _parentTransDate;
                ledgerTransVoucherLink.insert();

                // The record ID of the parent link record is used as the voucher group ID
                voucherGroupId = ledgerTransVoucherLink.RecId;

                // Setting the parent link record's voucher group ID requires an update after the insert
                ledgerTransVoucherLink.selectForUpdate(true);
                ledgerTransVoucherLink.VoucherGroupId = voucherGroupId;
                ttsbegin;
                ledgerTransVoucherLink.update();
                ttscommit;
            }
        }

        return ledgerTransVoucherLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentVoucherGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current voucher group id for the voucher if it has been defined.
    /// </summary>
    /// <param name = "_voucherGroupId">The voucher group id.</param>
    /// <param name = "_voucher">The voucher.</param>
    /// <param name = "_transDate">The transaction date.</param>
    /// <returns>The previous voucher group id if already defined; otherwise, 0.</returns>
    /// <remarks>
    /// The method will create the <c>LedgerTransVoucherLink</c> table record of the provided
    /// voucher if it does not exist.
    /// </remarks>
    public static RecId getCurrentVoucherGroupId(RecId _voucherGroupId, Voucher _voucher, TransDate _transDate)
    {
        LedgerTransVoucherLink ledgerTransVoucherLink;
        RecId previousVoucherGroupId;

        select firstonly ledgerTransVoucherLink
            where ledgerTransVoucherLink.Voucher == _voucher &&
                ledgerTransVoucherLink.TransDate == _transDate;

        if (ledgerTransVoucherLink)
        {
            // Store the current voucher group id, which will be used to determine if the current voucher group
            // needs to be "re-grouped" with the parent voucher
            previousVoucherGroupId = ledgerTransVoucherLink.VoucherGroupId;
        }
        else
        {
            // Don't create double vouchers
            ledgerTransVoucherLink.clear();
            ledgerTransVoucherLink.VoucherGroupId = _voucherGroupId;
            ledgerTransVoucherLink.Voucher = _voucher;
            ledgerTransVoucherLink.TransDate = _transDate;

            ledgerTransVoucherLink.insert();
        }

        return previousVoucherGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherLinkParentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the existing voucher group id to the new parent voucher's group, to establish the relationship
    /// between the new parent voucher and the existing voucher relationships.
    /// </summary>
    /// <param name = "_previousVoucherGroupId">The previous voucher group id.</param>
    /// <param name = "_voucherGroupId">The current voucher group id.</param>
    public static void updateVoucherLinkParentGroup(RecId _previousVoucherGroupId, RecId _voucherGroupId)
    {
        LedgerTransVoucherLink ledgerTransVoucherLink;

        if (_previousVoucherGroupId &&
            _previousVoucherGroupId != _voucherGroupId)
        {
            update_recordset ledgerTransVoucherLink
                setting VoucherGroupId = _voucherGroupId
                    where ledgerTransVoucherLink.VoucherGroupId == _previousVoucherGroupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDebitTotalForVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the debit total for a specific monetary standard of the current voucher and date.
    /// </summary>
    /// <returns>
    /// The debit total for a specific monetary standard.
    /// </returns>
    /// <remarks>
    /// This total includes only transactions with debit amounts.
    /// </remarks>
    public display AmountMST displayDebitTotalForVoucher()
    {
        return GeneralJournalEntry_Extension::getAccountingCurrencyBalanceForVoucherDate(
            this.Voucher,
            this.DataAreaId,
            this.TransDate,
            DebitCredit::Debit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the record already exists for a given voucher.
    /// </summary>
    /// <param name="_relatedVoucher">
    /// The number of the related voucher.
    /// </param>
    /// <param name="_relatedTransDate">
    /// The transaction date of the related voucher.
    /// </param>
    /// <param name="_relatedCompany">
    /// The company of the related voucher.
    /// </param>
    /// <returns>
    /// true if the link exists for the specified voucher; otherwise, false.
    /// </returns>
    public static boolean exist(Voucher _relatedVoucher, TransDate _relatedTransDate, CompanyId _relatedCompany = curExt())
    {
        LedgerTransVoucherLink link;

        if (strlen(_relatedVoucher) == 0 || _relatedTransDate == dateNull())
        {
            return false;
        }

        select firstonly crosscompany RecId from link
            where (link.Voucher == _relatedVoucher
                && link.TransDate == _relatedTransDate
                && link.DataAreaId == _relatedCompany);

        return link != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForRelatedVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether links exist for the specified related voucher.
    /// </summary>
    /// <param name="_relatedVoucher">
    /// The number of the related voucher.
    /// </param>
    /// <param name="_relatedTransDate">
    /// The transaction date of the related voucher.
    /// </param>
    /// <param name="_relatedCompany">
    /// The company of the related voucher.
    /// </param>
    /// <param name="_restrictCompany">
    /// Restrict to current company; optional.
    /// </param>
    /// <returns>
    /// true if the voucher has related links; otherwise, false.
    /// </returns>
    public static boolean existForRelatedVoucher(Voucher _relatedVoucher, TransDate _relatedTransDate, CompanyId _relatedCompany = curExt(), boolean _restrictCompany = false)
    {
        RecId voucherGroupId;
        LedgerTransVoucherLink link;

        if (strlen(_relatedVoucher) == 0 || _relatedTransDate == dateNull())
        {
            return false;
        }

        voucherGroupId = LedgerTransVoucherLink::findVoucherGroupId(_relatedVoucher, _relatedTransDate, _relatedCompany);
        if (voucherGroupId == 0)
        {
            // voucher group not found
            return false;
        }

        if (_restrictCompany)
        {
            select firstonly RecId from link
            where link.VoucherGroupId == voucherGroupId
                && (link.Voucher != _relatedVoucher
                || link.TransDate != _relatedTransDate);
        }
        else
        {
            select firstonly crosscompany RecId from link
            where link.VoucherGroupId == voucherGroupId
                && (link.Voucher != _relatedVoucher
                || link.TransDate != _relatedTransDate
                || link.DataAreaId != _relatedCompany);
        }

        return link != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LedgerTransVoucherLink</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the link record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LedgerTransVoucherLink</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerTransVoucherLink find(RecId _recId, boolean _forUpdate = false)
    {
        LedgerTransVoucherLink link;

        link.selectForUpdate(_forUpdate);

        if (_recId != 0)
        {
            select firstonly crosscompany * from link
                where link.RecId == _recId;
        }

        return link;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the voucher group ID for the specified voucher and transaction date.
    /// </summary>
    /// <param name="_voucher">
    /// The number of the voucher.
    /// </param>
    /// <param name="_voucherTransDate">
    /// The transaction date of the voucher.
    /// </param>
    /// <param name="_voucherCompany">
    /// The company of the voucher; optional.
    /// </param>
    /// <returns>
    /// The voucher group ID of the specified voucher and transaction date.
    /// </returns>
    /// <remarks>
    /// The voucher group ID ties a group of related vouchers together.
    /// </remarks>
    public static RecId findVoucherGroupId(Voucher _voucher, TransDate _voucherTransDate, CompanyId _voucherCompany = curExt())
    {
        return LedgerTransVoucherLink::findVoucherLink(_voucher, _voucherTransDate, _voucherCompany).VoucherGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the voucher link record for the specified voucher and transaction date.
    /// </summary>
    /// <param name="_voucher">
    /// The number of the voucher.
    /// </param>
    /// <param name="_voucherTransDate">
    /// The transaction date of the voucher.
    /// </param>
    /// <param name="_voucherCompany">
    /// The company of the voucher; optional.
    /// </param>
    /// <returns>
    /// The voucher link record of the specified voucher and transaction date.
    /// </returns>
    public static LedgerTransVoucherLink findVoucherLink(Voucher _voucher, TransDate _voucherTransDate, CompanyId _voucherCompany = curExt())
    {
        LedgerTransVoucherLink link;

        if (strlen(_voucher) > 0 && _voucherTransDate != dateNull())
        {
            select firstonly crosscompany VoucherGroupId from link
               where link.Voucher == _voucher
                    && link.TransDate == _voucherTransDate
                    && link.DataAreaId == _voucherCompany;
        }

        return link;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerTransVoucherLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between parent and its related voucher.
    /// </summary>
    /// <param name="_parentVoucher">The number of the parent voucher.</param>
    /// <param name="_parentTransDate">The transaction date of the parent voucher.</param>
    /// <param name="_relatedVoucher">The number of the related voucher.</param>
    /// <param name="_relatedTransDate">The transaction date of the related voucher.</param>
    internal static void createLedgerTransVoucherLink(Voucher _parentVoucher, TransDate _parentTransDate, Voucher _relatedVoucher, TransDate _relatedTransDate)
    {
        RecId voucherGroupId = LedgerTransVoucherLink::findOrCreateParentVoucherLink(_parentVoucher, _parentTransDate).RecId;
        LedgerTransVoucherLink::getCurrentVoucherGroupId(voucherGroupId, _relatedVoucher, _relatedTransDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS127139</DeveloperDocumentation>
	<Label>@SYS112560</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>VoucherGroupIdIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VoucherGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VoucherGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VoucherGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysInt64</ExtendedDataType>
			<Label>@SYS112559</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherGroupIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VoucherGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherTransDate</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>