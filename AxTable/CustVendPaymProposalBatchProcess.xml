<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalBatchProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendPaymProposalBatchProcess extends common
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustVendPaymProposalBatchProcess</c> table.
    /// </summary>
    /// <param name = "_ledgerJournalId">Identifies the payment journal.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>CustVendPaymProposalBatchProcess</c> table; otherwise, an empty record.</returns>
    public static CustVendPaymProposalBatchProcess find(LedgerJournalId _ledgerJournalId, boolean _forUpdate = false)
    {
        CustVendPaymProposalBatchProcess custVendPaymProposalBatchProcess;

        if (_ledgerJournalId)
        {
            custVendPaymProposalBatchProcess.selectForUpdate(_forUpdate);

            select firstonly custVendPaymProposalBatchProcess
                where custVendPaymProposalBatchProcess.JournalId == _ledgerJournalId;
        }

        return custVendPaymProposalBatchProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the state of the payment proposal batch process.
    /// </summary>
    /// <param name = "_ledgerJournalId">Identifies the payment journal.</param>
    /// <param name = "_state">Identifies the new state.</param>
    public static void changeState(LedgerJournalId _ledgerJournalId, CustVendPaymProposalBatchProcessState _state)
    {
        CustVendPaymProposalBatchProcess custVendPaymProposalBatchProcess;

        if (_ledgerJournalId)
        {
            ttsbegin;
            custVendPaymProposalBatchProcess = CustVendPaymProposalBatchProcess::find(_ledgerJournalId, true);

            if (custVendPaymProposalBatchProcess)
            {
                custVendPaymProposalBatchProcess.State = _state;
                custVendPaymProposalBatchProcess.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeTargetState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the target state of the payment proposal batch process.
    /// </summary>
    /// <param name = "_ledgerJournalId">Identifies the payment journal.</param>
    /// <param name = "_targetState">Identifies the new target state.</param>
    /// <param name = "_batchJobId">Identifies the batch job.</param>
    public static void changeTargetState(
        LedgerJournalId _ledgerJournalId, 
        CustVendPaymProposalBatchProcessState _targetState,
        RefRecId _batchJobId)
    {
        CustVendPaymProposalBatchProcess custVendPaymProposalBatchProcess;

        if (_ledgerJournalId)
        {
            ttsbegin;
            custVendPaymProposalBatchProcess = CustVendPaymProposalBatchProcess::find(_ledgerJournalId, true);

            if (custVendPaymProposalBatchProcess)
            {
                custVendPaymProposalBatchProcess.TargetState = _targetState;
                CustVendPaymProposalBatchProcess.BatchJobId = _batchJobId;
                custVendPaymProposalBatchProcess.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeBatch</Name>
				<Source><![CDATA[
    internal static void changeBatch(LedgerJournalId _ledgerJournalId, RefRecId _batchJobId)
    {
        if (_ledgerJournalId)
        {
            ttsbegin;
            CustVendPaymProposalBatchProcess custVendPaymProposalBatchProcess = CustVendPaymProposalBatchProcess::find(_ledgerJournalId, true);

            if (custVendPaymProposalBatchProcess)
            {
                CustVendPaymProposalBatchProcess.BatchJobId = _batchJobId;
                custVendPaymProposalBatchProcess.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the current state of the payment proposal batch process.
    /// </summary>
    /// <param name = "_ledgerJournalId">Identifies the payment journal.</param>
    /// <returns>The current state.</returns>
    public static CustVendPaymProposalBatchProcessState findState(LedgerJournalId _ledgerJournalId)
    {
        return CustVendPaymProposalBatchProcess::find(_ledgerJournalId).State;
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    /// <summary>
    /// The start of the payment proposal batch process.
    /// </summary>
    /// <param name = "_ledgerJournalId">Identifies the payment journal.</param>
    /// <param name = "_targetState">Identifies the target state.</param>
    /// <param name = "_targetState">Identifies the batch.</param>
    public static void start(
        LedgerJournalId _ledgerJournalId, 
        CustVendPaymProposalBatchProcessState _targetState,
        RefRecId _batchJobId)
    {
        CustVendPaymProposalBatchProcess custVendPaymProposalBatchProcess;

        if (_ledgerJournalId)
        {
            custVendPaymProposalBatchProcess = CustVendPaymProposalBatchProcess::find(_ledgerJournalId, true);

            custVendPaymProposalBatchProcess.JournalId = _ledgerJournalId;
            custVendPaymProposalBatchProcess.State = CustVendPaymProposalBatchProcessState::CreatingProposalLines;
            custVendPaymProposalBatchProcess.TargetState = _targetState;
            custVendPaymProposalBatchProcess.BatchJobId = _batchJobId;
            custVendPaymProposalBatchProcess.write();

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@CashManagement:CustVendPaymProposalBatchProcessDeveloperDocumentation</DeveloperDocumentation>
	<Label>@CashManagement:CustVendPaymProposalBatchProcessLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerJournalType</Name>
			<EnumType>LedgerJournalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleCustVend</Name>
			<EnumType>ModuleCustVend</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeInvoicesFromOtherCompanies</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreatePaymPerInvoiceCompany</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LimitPaymCreationToLedgerCompanyOnly</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultOffsetAccountType</Name>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultOffsetAccount</Name>
			<ExtendedDataType>LedgerJournalAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultOffsetLedgerDimension</Name>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChangePaymMode</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanUseSpecTransSetBasedInsert</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanUseCustVendPaymProposalLineSetBasedInsert</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>State</Name>
			<Label>@CashManagement:PaymentProposalCurrentState</Label>
			<EnumType>CustVendPaymProposalBatchProcessState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<Label>@SYS93706</Label>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TargetState</Name>
			<Label>@CashManagement:PaymentProposalTargetState</Label>
			<EnumType>CustVendPaymProposalBatchProcessState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchJobId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalId</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultOffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultOffsetLedgerDimension</Name>
					<Field>DefaultOffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>