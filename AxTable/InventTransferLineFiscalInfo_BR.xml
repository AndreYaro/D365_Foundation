<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferLineFiscalInfo_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransferLineFiscalInfo_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fromFiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR fromFiscalEstablishment()
    {
        FiscalEstablishmentInventSite_BR    fiscalEstablishmentInventSite;
        InventSite                          inventSite;
        InventLocation                      inventLocation;
        FiscalEstablishment_BR              fiscalEstablishment;
        InventTransferTable                 inventTransferTable;

        select fiscalEstablishment
            exists join fiscalEstablishmentInventSite
                where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
            exists join inventSite
                where inventSite.SiteId == fiscalEstablishmentInventSite.InventSite
            exists join inventLocation
                where inventLocation.InventSiteId == inventSite.SiteId
            exists join inventTransferTable
                where inventTransferTable.InventLocationIdFrom == inventLocation.InventLocationId
                    && inventTransferTable.TransferId == this.InventTransferTable;

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getICMSSTTaxationCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds taxation code of ICMS-ST tax.
    /// </summary>
    /// <returns>
    /// Taxation code of ICMS-ST tax.
    /// </returns>
    public TaxationCode_BR getICMSSTTaxationCode_BR()
    {
        boolean icmsOverrideICMSSTTaxationCode = BrazilParameters::find().ICMSOverrideICMSSTTaxationCode == NoYes::Yes;
        TaxOnItem taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.ReceiveTaxItemGroup, this.ReceiveTaxGroup, TaxType_BR::ICMSST);

        if (taxOnItem.TaxationCodeTable_BR && icmsOverrideICMSSTTaxationCode)
        {
            taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.ReceiveTaxItemGroup, this.ReceiveTaxGroup, TaxType_BR::ICMS);
        }

        TaxationCode_BR taxationCode = TaxationCodeTable_BR::findRecId(taxOnItem.TaxationCodeTable_BR).TaxationCode;

        return taxationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReceiveICMSSTTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current line has ICMS-ST tax.
    /// </summary>
    /// <returns>
    /// True if current line has ICMS-ST tax; otherwise false.
    /// </returns>
    public boolean hasReceiveICMSSTTax_BR()
    {
        TaxOnItem taxOnItem = TaxOnItem::getTaxOnItemByGroupsAndType_BR(this.ReceiveTaxItemGroup, this.ReceiveTaxGroup, TaxType_BR::ICMSST);
        return TaxOnItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.setFiscalDocumentTexts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimShip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the shipment <c>IventDim</c> record.
    /// </summary>
    /// <returns>
    ///     The <c>InventDim</c>.
    /// </returns>
    public InventDim inventDimShip()
    {
        return this.InventTransferLine().inventDimShip();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the invent location type of transfer order.
    /// </summary>
    /// <param name = "_updateType">Update type.</param>
    /// <returns>The account type of transfer order.</returns>
    protected CustVendType_BR inventLocationType(InventTransferUpdateType _updateType)
    {
        InventLocation inventLocation;
        CustVendType_BR toInventLocationType;

        switch (this.InventTransferLine().inventTransferTable().inventTransferTableFiscalInfo_BR().InventTransferOrderType)
        {
            case InventTransferOrderType_BR::FiscalEstablishmentTransfer :
            case InventTransferOrderType_BR::FiscalEstablishmentReturn :
                toInventLocationType = CustVendType_BR::FiscalEstablishment;
                break;

            case InventTransferOrderType_BR::ThirdPartyTransfer :
            case InventTransferOrderType_BR::ThirdPartyReturn :
                if (_updateType == InventTransferUpdateType::Shipment)
                {
                    inventLocation = InventLocation::find(this.InventTransferLine().inventTransferTable().InventLocationIdTo);
                }
                else
                {
                    inventLocation = InventLocation::find(this.InventTransferLine().inventTransferTable().InventLocationIdFrom);
                }

                if (inventLocation.VendAccount)
                {
                    toInventLocationType = CustVendType_BR::Vendor;
                }
                else
                {
                    toInventLocationType = CustVendType_BR::Customer;
                }
                break;
        }

        return toInventLocationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines invent location type account.
    /// </summary>
    /// <param name = "_updateType">Update type.</param>
    /// <returns>Account type.</returns>
    protected CustVendAC inventLocationTypeId(InventTransferUpdateType _updateType)
    {
        CustVendAC      inventLocationTypeId;
        InventLocation  inventLocation;

        switch (this.InventTransferLine().inventTransferTable().inventTransferTableFiscalInfo_BR().InventTransferOrderType)
        {
            case InventTransferOrderType_BR::FiscalEstablishmentTransfer :
            case InventTransferOrderType_BR::FiscalEstablishmentReturn :
                if (_updateType == InventTransferUpdateType::Shipment)
                {
                    inventLocationTypeId = this.toFiscalEstablishment().FiscalEstablishmentId;
                }
                else
                {
                    inventLocationTypeId = this.fromFiscalEstablishment().FiscalEstablishmentId;
                }
                break;

            case InventTransferOrderType_BR::ThirdPartyTransfer :
                inventLocation = InventLocation::find(this.InventTransferLine().inventTransferTable().InventLocationIdTo);
                inventLocationTypeId = inventLocation.VendAccount ? inventLocation.VendAccount : inventLocation.CustAccount_BR;
                break;
            case InventTransferOrderType_BR::ThirdPartyReturn :
                inventLocation = InventLocation::find(this.InventTransferLine().inventTransferTable().InventLocationIdFrom);
                inventLocationTypeId = inventLocation.VendAccount ? inventLocation.VendAccount : inventLocation.CustAccount_BR;
                break;
        }

        return inventLocationTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>inventTransferLine</c> record related to the <c>InventTransferTableFiscalInfo_BR</c>.
    /// </summary>
    /// <returns>
    ///     The <c>inventTransferLine</c> record.
    /// </returns>
    public inventTransferLine inventTransferLine()
    {
        FormDataSource      parentDataSource;
        FormDataSource      dataSource;
        InventTransferLine  inventTransferLine;

        if (!FormDataUtil::isFormDataSource(this))
        {
            select inventTransferLine
                where inventTransferLine.RecId == this.InventTransferLine;
        }
        else
        {
            parentDataSource = FormDataUtil::getFormDataSource(this);

            if (!parentDataSource.isBaseDataSource())
            {
                dataSource = parentDataSource.joinSourceDataSource();

                if (dataSource.cursor().TableId == tableNum(InventTransferLine))
                {
                    inventTransferLine = dataSource.cursor();
                }
            }
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    private ItemId itemId()
    {
        return this.InventTransferLine().ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any necessary initialization or validation when the given field is modified
    /// </summary>
    /// <param name="_fieldId">
    /// The field which was modified
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventTransferLineFiscalInfo_BR, ShipCFOPTable_BR) :
                this.setShipTaxGroupsFromCFOP();

                if (this.InventTransferLine)
                {
                    this.setFiscalDocumentTexts();
                }
                break;

            case fieldNum(InventTransferLineFiscalInfo_BR, ReceiveCFOPTable_BR) :
                this.setReceiveTaxGroupsFromCFOP();
                break;

            case fieldNum(InventTransferLineFiscalInfo_BR, ShipPrice) :
                this.setShipPriceModifiedManually();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipPriceModifiedManually</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set PriceChangedManually and fill ReceivePrice for fiscal establishments.
    /// </summary>
    public void setShipPriceModifiedManually()
    {
        this.PriceChangedManually = NoYes::Yes;

        if (this.toFiscalEstablishment())
        {
            this.ReceivePrice = this.ShipPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the transaction type of transfer order.
    /// </summary>
    /// <returns>Transaction type of transfer order.</returns>
    protected SalesPurchTrntype_BR orderTransactionType()
    {
        SalesPurchTrntype_BR transactionType;

        switch (this.InventTransferLine().inventTransferTable().inventTransferTableFiscalInfo_BR().InventTransferOrderType)
        {
            case InventTransferOrderType_BR::FiscalEstablishmentTransfer :
            case InventTransferOrderType_BR::FiscalEstablishmentReturn :
                transactionType = SalesPurchTrntype_BR::FiscalEstablishmentTransfer;
                break;

            case InventTransferOrderType_BR::ThirdPartyTransfer :
            case InventTransferOrderType_BR::ThirdPartyReturn :
                transactionType = SalesPurchTrntype_BR::ThirdPartyTransfer;
                break;
        }

        return transactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalDocumentTexts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attach fiscal document texts to the transfer line.
    /// </summary>
    private void setFiscalDocumentTexts()
    {
        FiscalDocumentTextUpdate_BR fiscalDocumentTextUpdate;

        if (this.InventTransferLine().inventTransferTable().inventTransferTableFiscalInfo_BR().InventTransferOrderType != InventTransferOrderType_BR::WarehouseTransfer)
        {
            fiscalDocumentTextUpdate = FiscalDocumentTextUpdate_BR::newFromRecord(this.InventTransferLine());
            fiscalDocumentTextUpdate.updateTexts(FiscalDocumentTextType_BR::CFOP);
            fiscalDocumentTextUpdate.updateTexts(FiscalDocumentTextType_BR::Inventory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the transfer price based on inventory cost and included taxes
    /// </summary>
    public void setPriceFromInventDim()
    {
        TaxValue taxValue;
        InventDimParm inventDimParm;

        if (!this.PriceChangedManually)
        {
            taxValue = Tax::getIncludedTaxPct_BR(this.ShipTaxGroup, this.ShipTaxItemGroup) / 100;

            inventDimParm.InventSiteIdFlag = NoYes::Yes;

            this.ShipPrice = CurrencyExchangeHelper::price(InventOnHand::newItemDim(this.itemId(), this.inventDimShip(), inventDimParm).costPricePcs(true) / (1 - taxValue), CompanyInfoHelper::standardCurrency());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReceiveTaxGroupsFromCFOP</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the tax groups from tax matrix configuration.
    /// </summary>
    public void setReceiveTaxGroupsFromCFOP()
    {
        TaxGroup                        taxGroup;
        TaxItemGroup                    taxItemGroup;
        CFOPTableRecId_BR               cfopTableRecId;
        FiscalEstablishmentGroup_BR     fiscalEstablishmentGroup;

        cfopTableRecId = this.ReceiveCFOPTable_BR;
        fiscalEstablishmentGroup = this.toFiscalEstablishment().fiscalEstablishmentGroup();

        [taxGroup, taxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(cfopTableRecId,
                                                                               0,
                                                                               this.orderTransactionType(),
                                                                               this.inventLocationType(InventTransferUpdateType::Receive),
                                                                               this.inventLocationTypeId(InventTransferUpdateType::Receive),
                                                                               this.itemId(),
                                                                               fiscalEstablishmentGroup);

        this.ReceiveTaxGroup      = taxGroup     ? taxGroup     : this.ReceiveTaxGroup;
        This.ReceiveTaxItemGroup  = taxItemGroup ? taxItemGroup : This.ReceiveTaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipDefaultCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default ship CFOP and initialize the tax groups from tax matrix
    /// </summary>
    public void setShipDefaultCFOP_BR()
    {
        this.ShipCFOPTable_BR = CFOPValidation_BR::construct(this).getDefaultCFOP();

        this.setShipTaxGroupsFromCFOP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipTaxGroupsFromCFOP</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the tax groups from tax matrix configuration.
    /// </summary>
    public void setShipTaxGroupsFromCFOP()
    {
        TaxGroup                        taxGroup;
        TaxItemGroup                    taxItemGroup;
        boolean                         taxGroupsChanged;
        CFOPTableRecId_BR               cfopTableRecId;
        FiscalEstablishmentGroup_BR     fiscalEstablishmentGroup;

        cfopTableRecId      = this.ShipCFOPTable_BR;
        fiscalEstablishmentGroup = this.fromFiscalEstablishment().fiscalEstablishmentGroup();

        [taxGroup, taxItemGroup] = TaxesMatrix_BR::findTaxGroupAndTaxItemGroup(cfopTableRecId,
                                                                               0,
                                                                               this.orderTransactionType(),
                                                                               this.inventLocationType(InventTransferUpdateType::Shipment),
                                                                               this.inventLocationTypeId(InventTransferUpdateType::Shipment),
                                                                               this.itemId(),
                                                                               fiscalEstablishmentGroup);

        if (this.ShipTaxGroup != taxGroup || this.ShipTaxItemGroup != taxItemGroup)
        {
            taxGroupsChanged = true;
        }

        this.ShipTaxGroup      = taxGroup     ? taxGroup     : this.ShipTaxGroup;
        This.ShipTaxItemGroup  = taxItemGroup ? taxItemGroup : This.ShipTaxItemGroup;

        if (taxGroupsChanged)
        {
            this.setPriceFromInventDim();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR toFiscalEstablishment()
    {
        FiscalEstablishmentInventSite_BR    fiscalEstablishmentInventSite;
        InventSite                          inventSite;
        InventLocation                      inventLocation;
        FiscalEstablishment_BR              fiscalEstablishment;
        InventTransferTable                 inventTransferTable;

        select fiscalEstablishment
            exists join fiscalEstablishmentInventSite
                where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
            exists join inventSite
                where inventSite.SiteId == fiscalEstablishmentInventSite.InventSite
            exists join inventLocation
                where inventLocation.InventSiteId == inventSite.SiteId
            exists join inventTransferTable
                where inventTransferTable.InventLocationIdTo == inventLocation.InventLocationId
                    && inventTransferTable.TransferId == this.InventTransferTable;

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        CFOPTableRecId_BR origShipCFOPRecID = this.orig().ShipCFOPTable_BR;
        if (TaxInventTransferLineFiscalInfoEntityUpdateCFOPFlight::instance().isEnabled())
        {
            super();
            if (this.ShipCFOPTable_BR != origShipCFOPRecID)
            {
                this.setFiscalDocumentTexts();
            }
        }
        else
        {
            if (this.ShipCFOPTable_BR != origShipCFOPRecID)
            {
                this.setFiscalDocumentTexts();
            }
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                     ret = true;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventTransferLineFiscalInfo_BR, ShipCFOPTable_BR) :
                if (this.ShipCFOPTable_BR)
                {
                    ret = CFOPValidation_BR::construct(this).checkCFOP();
                }
                else
                {
                    ret = checkFailed(strFmt("@SYS26332", fieldPName(CFOPTable_BR, cfopId)));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Select the <c>InventTransferLineFiscalInfo_BR</c> record for the given <c>InventTransferLine</c> recId and InventTransferUpdateType
    /// </summary>
    /// <param name="_inventTransferLineRecId">
    ///     The <c>InventTransferLine</c> recId.
    /// </param>
    /// <returns>
    ///     The <c>InventTransferLineFiscalInfo_BR</c> record.
    /// </returns>
    public static InventTransferLineFiscalInfo_BR findByInventTransferLine(RecId _inventTransferLineRecId)
    {
        InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo;

        select inventTransferLineFiscalInfo
            where inventTransferLineFiscalInfo.InventTransferLine == _inventTransferLineRecId;

        return inventTransferLineFiscalInfo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS222369</DeveloperDocumentation>
	<Label>@SYS78296</Label>
	<TitleField1>InventTransferTable</TitleField1>
	<TitleField2>InventTransferLine</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransferTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransferLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipTaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCFOPTable_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipTaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCFOPTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveTaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveCFOPTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivePrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransferTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransferLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransferLine</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS78296</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransferTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceChangedManually</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReceiveCFOPTable_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CFOPTableRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceivePrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiveTaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiveTaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShipCFOPTable_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CFOPTableRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ShipPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipTaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipTaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransferLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransferLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CFOPTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipCFOPTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransferTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransferTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>InventTransferLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>InventTransferLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTransferLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransferLine</Name>
					<Field>InventTransferLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransferTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransferTable</Name>
					<Field>InventTransferTable</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransferIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReceiveCFOPTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFOPTable_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReceiveCFOPTable_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceiveCFOPTable_BR</Name>
					<Field>ReceiveCFOPTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReceiveTaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReceiveTaxGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceiveTaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>ReceiveTaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReceiveTaxItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReceiveTaxItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceiveTaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>ReceiveTaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCFOPTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFOPTable_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ShipCFOPTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipCFOPTable_BR</Name>
					<Field>ShipCFOPTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ShipTaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ShipTaxGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipTaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>ShipTaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ShipTaxItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ShipTaxItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipTaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>ShipTaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>