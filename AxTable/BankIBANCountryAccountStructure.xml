<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankIBANCountryAccountStructure</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankIBANCountryAccountStructure extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByCountryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <t>BankIBANCountryAccountStructure</t> record with a given country code.
    /// </summary>
    /// <param name = "_countryCode">The country code of the desired record.</param>
    /// <param name = "_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>A <t>BankIBANCountryAccountStructure</t> record.</returns>
    public static BankIBANCountryAccountStructure findByCountryCode(BankIBANCountryCode _countryCode, boolean _forUpdate = false)
    {
        // Check that country specific account structures have been loaded
        if (!BankIBANCountryAccountStructure::haveCountryAccountStructuresBeenLoaded())
        {
            // If not, generate them from the XML resource
            BankIBANCountryAccountStructureGenerator::generateIBANAccountStructuresFromXML();
        }

        BankIBANCountryAccountStructure countryAccountStructure;

        countryAccountStructure.selectForUpdate(_forUpdate);

        select firstonly countryAccountStructure
            where countryAccountStructure.CountryCode == _countryCode;

        return countryAccountStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCountryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that a given country code corresponds to an existing <t>BankIBANCountryAccountStructure</t> record.
    /// </summary>
    /// <param name = "_countryCode">The country code.</param>
    /// <returns>true if a <t>BankIBANCountryAccountStructure</t> is found; otherwise, false.</returns>
    public static boolean isValidCountryCode(BankIBANCountryCode _countryCode)
    {
        BankIBANCountryAccountStructure matchingAccountStructure;

        select firstonly RecId from matchingAccountStructure
            where matchingAccountStructure.CountryCode == _countryCode;
        
        return matchingAccountStructure.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveCountryAccountStructuresBeenLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if country specific account structures have been loaded.
    /// </summary>
    /// <returns>true if account structures have been loaded; otherwise, false.</returns>
    public static boolean haveCountryAccountStructuresBeenLoaded()
    {
        BankIBANCountryAccountStructure countryAccountStructure;

        select firstonly RecId from countryAccountStructure;

        return countryAccountStructure.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveCountryRoutingStructuresBeenLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if country specific account structures have been loaded.
    /// </summary>
    /// <returns>true if account structures have been loaded; otherwise, false.</returns>
    public static boolean haveCountryRoutingStructuresBeenLoaded()
    {
        BankIBANCountryAccountStructure countryAccountStructure;

        select firstonly RecId from countryAccountStructure
            where countryAccountStructure.RoutingLength != 0
               || countryAccountStructure.RoutingStart != 0;

        return countryAccountStructure.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@CashManagement:BankIBANCountryAccountStructure</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>Country</TitleField1>
	<TitleField2>CountryCode</TitleField2>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Country</Name>
			<ExtendedDataType>BankIBANCountry</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryCode</Name>
			<ExtendedDataType>BankIBANCountryCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Length</Name>
			<ExtendedDataType>BankIBANCountryStructureLength</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AccountStart</Name>
			<ExtendedDataType>BankIBANCountryAccountStart</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AccountLength</Name>
			<ExtendedDataType>BankIBANCountryAccountLength</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RoutingStart</Name>
			<ExtendedDataType>BankIBANCountryRoutingStart</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RoutingLength</Name>
			<ExtendedDataType>BankIBANCountryRoutingLength</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CountryCodeIndex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CountryCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>