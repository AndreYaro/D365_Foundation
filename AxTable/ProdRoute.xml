<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdRoute extends common
{
    #Define.OprNumAdd(10)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the activity that represents this record.
    /// </summary>
    /// <returns>
    /// The record ID of the activity that represents this record.
    /// </returns>
    public RefRecId activity()
    {
        WrkCtrProdRouteActivity wrkCtrProdRouteActivity;

        select firstonly Activity from wrkCtrProdRouteActivity
            where wrkCtrProdRouteActivity.ProdId            == this.ProdId
               && wrkCtrProdRouteActivity.OprNum            == this.OprNum
               && wrkCtrProdRouteActivity.OprPriority       == this.OprPriority
               && wrkCtrProdRouteActivity.RouteDataAreaId   == this.DataAreaId;

        return wrkCtrProdRouteActivity.Activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first activity requirement set that represents this record.
    /// </summary>
    /// <returns>
    /// The first activity requirement set that represents this record.
    /// </returns>
    public WrkCtrActivityRequirementSet activityRequirementSet()
    {
        WrkCtrProdRouteActivity         wrkCtrProdRouteActivity;
        WrkCtrActivityRequirementSet    wrkCtrActivityRequirementSet;

        select firstonly wrkCtrActivityRequirementSet
            exists join wrkCtrProdRouteActivity
            where wrkCtrProdRouteActivity.ProdId            == this.ProdId
               && wrkCtrProdRouteActivity.OprNum            == this.OprNum
               && wrkCtrProdRouteActivity.OprPriority       == this.OprPriority
               && wrkCtrProdRouteActivity.RouteDataAreaId   == this.DataAreaId
               && wrkCtrActivityRequirementSet.Activity     == wrkCtrProdRouteActivity.Activity;

        return wrkCtrActivityRequirementSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOperationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the operation status can be modified.
    /// </summary>
    /// <returns>
    /// true if the operation status can be modified; otherwise, false.
    /// </returns>
    public boolean checkOperationStatus()
    {
        if (!this.isOprStatusModified())
        {
            return true;
        }

        if (!this.prodTable().status().checkAllowEditOperationStatus())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    public boolean checkValid()
    {
        if (!this.RecId)
        {
            return checkFailed("@SYS25302");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        ProdTable        prodTable = this.prodTable();
        
        prodTable.status().deletingProdRoute(this);

        if (this.isProjMethodConsumed())
        {
            this.projCostControlUpdate(ProjCommittedCostUpdateAction::Delete);
        }

        super();

        if (Global::isConfigurationkeyEnabled(configurationkeynum(Jmgjob)))
        {
            JmgJobTable::synchronizeProdRoute(this, true);
        }

        prodTable = this.prodTable(true);

        if (prodTable)
        {
            prodTable.status().setBackStatus();
            prodTable.doUpdate();
        }

        prodTable.status().deletingProdRoute(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the resource that is used on the production route.
    /// </summary>
    /// <returns>
    /// The ID of the resource that is used on a production route.
    /// </returns>
    public display WrkCtrIdDisplay displayWrkCtrId()
    {
        var scheduledResources = this.scheduledResources();

        if (scheduledResources.empty())
        {
            return "";
        }
        else if (scheduledResources.elements() > 1)
        {
            return "@SYS134532";
        }

        var scheduledResourcesEnumerator = scheduledResources.getEnumerator();
        scheduledResourcesEnumerator.moveNext();

        var wrkCtrId = scheduledResourcesEnumerator.current();

        return wrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWrkCtrLoadPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the resource load percentage.
    /// </summary>
    /// <returns>
    /// The resource load percentage.
    /// </returns>
    public display WrkCtrLoadPct displayWrkCtrLoadPct()
    {
        return this.activityRequirementSet().LoadPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWrkCtrName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the resource that is used on the production route.
    /// </summary>
    /// <returns>
    /// The name of the resource that is used on a production route.
    /// </returns>
    public display WrkCtrName displayWrkCtrName()
    {
        var scheduledResources = this.scheduledResources();

        if (scheduledResources.elements() > 1)
        {
            return "@SYS134532";
        }

        var scheduledResourcesEnumerator = scheduledResources.getEnumerator();

        WrkCtrId wrkCtrId;
        if (scheduledResourcesEnumerator.moveNext())
        {
            wrkCtrId = scheduledResourcesEnumerator.current();
        }

        return WrkCtrTable::find(wrkCtrId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWrkCtrNumOf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity of resources that is required for the operation.
    /// </summary>
    /// <returns>
    /// The quantity of resources that is required for the operation.
    /// </returns>
    public display WrkCtrRequirementQuantity displayWrkCtrNumOf()
    {
        return this.activityRequirementSet().Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWrkCtrType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the resource to use on the production route.
    /// </summary>
    /// <returns>
    /// The type of the resource to use on a production route.
    /// </returns>
    public display WrkCtrTypeDisplay displayWrkCtrType()
    {
        var scheduledResources = this.scheduledResources();

        if (scheduledResources.elements() == 1)
        {
            var scheduledResourcesEnumerator = scheduledResources.getEnumerator();
            scheduledResourcesEnumerator.moveNext();
            var wrkCtrId = scheduledResourcesEnumerator.current();
            return enum2str(WrkCtrTable::find(wrkCtrId).WrkCtrType);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource that has been scheduled or assigned as the requirement for the current record.
    /// </summary>
    /// <param name="_getScheduled">
    /// A Boolean value that indicates whether to get the scheduled resource for this record.
    /// </param>
    /// <param name="_findFirstApplicable">
    /// A Boolean value that indicates whether to get the first applicable resource for this record if
    /// no resource has been assigned.
    /// </param>
    /// <param name="_searchFromDate">
    /// The first date to search for resources on; optional.
    /// </param>
    /// <param name="_searchToDate">
    /// The last date to search for resources on; optional.
    /// </param>
    /// <param name="_inventSiteId">
    /// The ID of the site to search for resources on. If blank the search is not limited to resources on a specific site.
    /// </param>
    /// <param name="_findCostingResource">
    /// A <c>Boolean</c> value that indicates whether to get the costing resource for this record.
    /// </param>
    /// <param name="_findGroupForMultipleResource">
    /// A <c>Boolean</c> value that indicates whether to get the resource group when the quantity of resources required are greater than one.
    /// </param>
    /// <returns>
    /// A <c>WrkCtrTable</c> record that satisfies the search criteria.
    /// </returns>
    public WrkCtrTable getResource(
        boolean         _getScheduled                   = true,
        boolean         _findFirstApplicable            = false,
        TransDate       _searchFromDate                 = dateNull(),
        TransDate       _searchToDate                   = maxDate(),
        InventSiteId    _inventSiteId                   = '',
        boolean         _findCostingResource            = false,
        boolean         _findGroupForMultipleResource   = false)
    {
        WrkCtrTable                     wrkCtrTable;
        WrkCtrCapRes                    wrkCtrCapRes;
        WrkCtrActivityRequirementSet    wrkCtrActivityRequirementSet = this.activityRequirementSet();

        if (_getScheduled)
        {
            select firstonly wrkCtrTable
                exists join wrkCtrCapRes
                where wrkCtrCapRes.WrkCtrId     == wrkCtrTable.WrkCtrId
                   && wrkCtrCapRes.RefId        == this.ProdId
                   && wrkCtrCapRes.RefType      == WrkCtrCapRefType::Production
                   // When RefType is production order, PlanVersion should be zero.
                   && wrkCtrCapRes.PlanVersion  == 0
                   && wrkCtrCapRes.OprNum       == this.OprNum
                   && wrkCtrCapRes.OprPriority  == this.OprPriority;
        }

        // Get the costing resource if none is found
        if (!wrkCtrTable.RecId && _findCostingResource && this.WrkCtrIdCost)
        {
            wrkCtrTable = WrkCtrTable::find(this.WrkCtrIdCost);
        }

        if (_searchFromDate == dateNull())
        {
            if (this.FromDate)
            {
                _searchFromDate = this.FromDate;
            }
            else
            {
               _searchFromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }

        if (!wrkCtrTable.RecId)
        {
            if (_findGroupForMultipleResource &&
                wrkCtrActivityRequirementSet.Quantity > 1)
            {
                wrkCtrTable = this.activityRequirementSet().firstApplicableResourceGroup( _searchFromDate,
                                                                                          _searchToDate,
                                                                                          _inventSiteId).wrkCtrTable();
            }
            else
            {
                // get resource/resource group set as requirement
                wrkCtrTable = wrkCtrActivityRequirementSet.resourceRequirement();
                if (!wrkCtrTable)
                {
                    wrkCtrTable = WrkCtrActivityRequirementSet.resourceGroupRequirement().wrkCtrTable();
                }

                // get first applicable if no resource is assigned
                if (!wrkCtrTable.RecId && _findFirstApplicable)
                {
                    wrkCtrTable = this.activityRequirementSet().firstApplicableResource(  _searchFromDate,
                                                                                          _searchToDate,
                                                                                          _inventSiteId);
                }
            }
        }
        else
        {
            if (_findGroupForMultipleResource &&
                wrkCtrActivityRequirementSet.Quantity > 1 &&
                wrkCtrTable.WrkCtrType != WrkCtrType::Group)
            {
                // Find the resource group that the resource is associated to
                wrkCtrTable = WrkCtrTable::resourceGroup(wrkCtrTable.WrkCtrId, _searchFromDate, _searchToDate).wrkCtrTable();
            }
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimension</Name>
				<Source><![CDATA[
    private void initDimension(WrkCtrTable wrkCtrTable)
    {
        date todaysDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
        WrkCtrTable wrkCtrTableGroup;
        ProdTable prodTable = this.prodTable();

        if (wrkCtrTable.RecId)
        {
            this.DefaultDimension = this.mergeDimension(wrkCtrTable.DefaultDimension, this.DefaultDimension);

            if (wrkCtrTable.IsIndividualResource)
            {
                wrkCtrTableGroup = WrkCtrTable::resourceGroup(wrkCtrTable.WrkCtrId, todaysDate, todaysDate).wrkCtrTable();
                this.DefaultDimension = this.mergeDimension(this.DefaultDimension, wrkCtrTableGroup.DefaultDimension);
            }
        }

        this.DefaultDimension = this.mergeDimension(this.DefaultDimension, prodTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionWrkCtrTable</Name>
				<Source><![CDATA[
    public void initDimensionWrkCtrTable()
    {
        date todaysDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
        WrkCtrTable wrkCtrTable = this.getResource(true, false, todaysDate, todaysDate, '', false, true);
        this.initDimension(wrkCtrTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBaseOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record buffer from a base operation relation.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> value of the activity of the base operation relation.
    /// </returns>
    public RefRecId initFromBaseOperation()
    {
        ProdTable       prodTable= this.prodTable();
        RouteOpr        routeOpr;
        InventDim       inventDim;

        RefRecId        activity = 0;

        if (this.OprId && !this.RecId)
        {
            inventDim = prodTable.inventDim();

            routeOpr = Route::findRouteOpr(
                prodTable.ItemId,
                inventDim.ConfigId,
                prodTable.RouteId,
                this.OprId,
                inventDim.InventSiteId);

            if (routeOpr.RecId)
            {
                this.RouteOprMap::initFromRouteOprMap(routeOpr);

                this.DefaultDimension = this.mergeDimension(prodTable.DefaultDimension);
                activity = routeOpr.activity();
            }

            this.RouteOprRefRecId = routeOpr.RecId;
        }

        return activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPhantom</Name>
				<Source><![CDATA[
    public void initFromPhantom(
        BOMMap      _phantomBOM,
        ProdRoute   _phantomProdRoute,
        OprNum      _routeOprNum,
        OprNum      _routeOprNumNext,
        Level       _routelevel,
        OprNum      _oprNumOffset,
        Factor      _phantomUnitFactor
        )
    {
        this.Level         = _routelevel        + _phantomProdRoute.Level;
        this.OprNum        = _routeOprNum       + _oprNumOffset;

        this.OprNumNext    = _routeOprNumNext   ? _routeOprNumNext   + _oprNumOffset : _phantomProdRoute.OprNum;
        this.ProcessPerQty = _phantomBOM.RecId && _phantomBOM.bomQty()  ? this.ProcessPerQty / abs(_phantomBOM.bomQty()) / _phantomUnitFactor   : this.ProcessPerQty;
        this.AccError      = this.AccError * (_phantomProdRoute.AccError ? _phantomProdRoute.AccError : 1);
        this.PhantomBOMFactor = _phantomBOM.bomQty() * _phantomUnitFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    public void initFromProdTable(ProdTable _prodTable)
    {
        this.ProdId             = _prodTable.ProdId;
        this.DefaultDimension   = this.copyDimension(_prodTable.DefaultDimension);
        this.ProcessPerQty      = 1;
        this.ToHours            = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqRouteRouteOpr</Name>
				<Source><![CDATA[
    void initFromReqRouteRouteOpr(
        ReqRoute    _reqRoute,
        RouteOpr    _routeOpr
        )
    {
        if (! _routeOpr.RecId)
        {
            throw error("@SYS25493");
        }

        this.RouteOprMap::initFromRouteOprMap(_routeOpr);

        this.RouteOprRefRecId   = _reqRoute.RouteOprRefRecId;
        this.OprPriority        = _reqRoute.OprPriority;
        this.OprId              = _reqRoute.OprId;
        this.OprNum             = _reqRoute.OprNum;
        this.OprNumNext         = _reqRoute.OprNumNext;
        this.ErrorPct           = _reqRoute.ErrorPct;
        this.AccError           = _reqRoute.AccError;
        this.Level              = _reqRoute.Level;
        this.FromDate           = _reqRoute.FromDate;
        this.ToDate             = _reqRoute.ToDate;
        this.FromTime           = _reqRoute.FromTime;
        this.ToTime             = _reqRoute.ToTime;
        this.LinkType           = _reqRoute.LinkType;

        if (isConfigurationkeyEnabled(configurationKeyNum(Jmgjob)))
        {
            this.JobPayType     = Route::findRecId(_reqRoute.RouteRefRecId).JobPayType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRoute</Name>
				<Source><![CDATA[
    public void initFromRoute(
        Route                       route,
        ItemId                      itemId,
        EcoResItemConfigurationName configId,
        InventSiteId                siteId)
    {
        RouteOpr routeOpr;

        if (! itemId)
        {
            throw error("@SYS16661");
        }

        routeOpr = route.routeOpr(itemId, configId, siteId, routeOpr);

        if (! routeOpr.RecId)
        {
            throw error(strFmt("@SYS22152",route.OprNum,itemId));
        }

        this.RouteMap::initFromRouteMap(route);
        this.RouteOprMap::initFromRouteOprMap(routeOpr);

        if (this.ErrorPct == 0)
        {
            if (this.RecId)
            {
                this.ErrorPct = this.getResource(false).ErrorPct;
            }
            else
            {
                this.ErrorPct = routeOpr.getResource().ErrorPct;
            }
        }

        this.OverlapQty         = routeOpr.TransferBatch;
        this.RouteOprRefRecId   = routeOpr.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRouteRouteOpr</Name>
				<Source><![CDATA[
    public void initFromRouteRouteOpr(
        Route      route,
        RouteOpr   routeOpr
        )
    {
        this.RouteMap::initFromRouteMap(route);
        this.RouteOprMap::initFromRouteOprMap(routeOpr);

        if (this.ErrorPct == 0)
        {
            if (this.RecId)
            {
                this.ErrorPct = this.getResource(false).ErrorPct;
            }
            else
            {
                this.ErrorPct = routeOpr.getResource().ErrorPct;
            }
        }

        this.RouteOprRefRecId = routeOpr.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this record from the values in a <c>WrkCtrTable</c> buffer.
    /// </summary>
    /// <param name="_wrkCtrId">
    /// The ID of a <c>WrkCtrTable</c> buffer to initialize from.
    /// </param>
    public void initFromWrkCtrId(WrkCtrId  _wrkCtrId)
    {
        WrkCtrTable     wrkCtrTable;

        if (_wrkCtrId)
        {
            wrkCtrTable = WrkCtrTable::find(_wrkCtrId);

            if (wrkCtrTable)
            {
                if (wrkCtrTable.WrkCtrType== WrkCtrType::Vendor)
                {
                    this.RouteType = RouteOprType::Vendor;
                }
                else
                {
                    this.RouteType = RouteOprType::Standard;
                }

                this.initDimension(wrkCtrTable);

                this.ErrorPct               = wrkCtrTable.ErrorPct;

                if (wrkCtrTable.RouteGroupId)
                {
                    this.RouteGroupId           = wrkCtrTable.RouteGroupId;
                }

                this.SetUpCategoryId        = wrkCtrTable.SetUpCategoryId;
                this.ProcessCategoryId      = wrkCtrTable.ProcessCategoryId;
                this.QtyCategoryId          = wrkCtrTable.QtyCategoryId;
                this.WrkCtrIdCost           = wrkCtrTable.WrkCtrId;

                if (wrkCtrTable.IsIndividualResource)
                {
                    this.QueueTimeBefore        = wrkCtrTable.QueueTimeBefore;
                    this.SetupTime              = wrkCtrTable.SetupTime;
                    this.ProcessTime            = wrkCtrTable.ProcessTime;
                    this.ProcessPerQty          = wrkCtrTable.ProcessPerQty;
                    this.TranspTime             = wrkCtrTable.TranspTime;
                    this.QueueTimeAfter         = wrkCtrTable.QueueTimeAfter;
                    this.ToHours                = wrkCtrTable.ToHours;
                    this.TransferBatch          = wrkCtrTable.TransferBatch;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ToHours          = 1;
        this.ProcessPerQty    = 1;
        this.FormulaFactor1   = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        ProdTable   prodTable = this.prodTable();

        prodTable.status().insertingProdRoute(this);

        if (this.isProjMethodConsumed())
        {
            this.projCostControlUpdate();
        }

        this.type().setBackStatus();

        if (this.OprPriority)
        {
            this.LinkType = SchedJobLinkType::None;
        }

        if (Global::isConfigurationkeyEnabled(configurationkeynum(Jmgjob)))
        {
            if (this.JobPayType == JmgJobPayTypeEnum::Empty)
            {
                this.JobPayType    = JmgJobPayTypeEnum::Hours;
            }
            if (JmgProdParameters::find().StampLevel == JmgStampLevel::Route)
            {
                this.JobIdSetup    = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
                this.JobIdProcess  = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
            }

            JmgJobTable::synchronizeProdRoute(this);
        }

        super();

       
        //Insert activity
        WrkCtrActivity                  wrkCtrActivity;
        wrkCtrActivity.EntityType = WrkCtrActivityType::ProdRoute;
        wrkCtrActivity.insert();

        WrkCtrProdRouteActivity         wrkCtrProdRouteActivity;
        wrkCtrProdRouteActivity.Activity = wrkCtrActivity.RecId;
        wrkCtrProdRouteActivity.ProdId = this.ProdId;
        wrkCtrProdRouteActivity.OprNum = this.OprNum;
        wrkCtrProdRouteActivity.OprPriority = this.OprPriority;
        wrkCtrProdRouteActivity.RouteDataAreaId = this.DataAreaId;
        wrkCtrProdRouteActivity.insert();

        //Add requirement set
        WrkCtrActivityRequirementSet    wrkCtrActivityRequirementSet;

        wrkCtrActivityRequirementSet.initValue();
        wrkCtrActivityRequirementSet.Activity = wrkCtrActivity.RecId;
        wrkCtrActivityRequirementSet.insert();

        prodTable = this.prodTable();

        if (prodTable.BackorderStatus > this.BackorderStatus)
        {
            prodTable = this.prodTable(true);
            prodTable.BackorderStatus = this.BackorderStatus;
            prodTable.doUpdate();
        }

        prodTable.status().insertedProdRoute(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWithoutJobCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the <c>ProdRoute</c> record without automatically creating route jobs.
    /// </summary>
    public void insertWithoutJobCreation()
    {
        try
        {
            this.skipJobCreation = NoYes::Yes;
            this.insert();
        }
        finally
        {
            this.skipJobCreation = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes whether the current operation is a starting route operation.
    /// </summary>
    /// <returns>
    /// true if the record contains a starting operation; otherwise, false.
    /// </returns>
    public boolean isFirstOpr()
    {
        ProdRoute   prodRoutePrev;
        ProdRoute   prodRoute;

        select firstonly OprNum from prodRoute
            order by OprNum
            where   prodRoute.ProdId            == this.ProdId
        notexists join prodRoutePrev
            where   prodRoutePrev.OprNumNext    == prodRoute.OprNum
                &&  prodRoutePrev.ProdId        == this.ProdId;

        return prodRoute.OprNum == this.OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOprStatusModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the operation status has been modified.
    /// </summary>
    /// <returns>
    /// true if the operation status has been modified; otherwise, false.
    /// </returns>
    public boolean isOprStatusModified()
    {
        ProdRoute   prodRoute_Orig = this.orig();

        return  (this.OprStartedUp  != prodRoute_Orig.OprStartedUp  ||
                 this.OprFinished   != prodRoute_Orig.OprFinished);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessCategoryMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the ProcessCategoryId field is mandatory for this record
    /// </summary>
    /// <returns>
    /// true if ProcessCategoryId is mandatory; false otherwise
    /// </returns>
    /// <remarks>
    /// If Process Time is not required to be posted, then the ProcessQtyId field is not required
    /// </remarks>
    public boolean isProcessCategoryMandatory()
    {
        return this.isProjMethodConsumed() && this.routeGroup().CalcProc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjMethodConsumed</Name>
				<Source><![CDATA[
    public boolean isProjMethodConsumed()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        return (this.prodTable().isProjMethodConsumed() ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQtyCategoryMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the QtyCategoryId field is mandatory for this record
    /// </summary>
    /// <returns>
    /// true if QtyCategoryId is mandatory; false otherwise
    /// </returns>
    /// <remarks>
    /// If the corresponding quantity is not required to be posted, then the QtyCategoryId field is not required
    /// </remarks>
    public boolean isQtyCategoryMandatory()
    {
        return this.isProjMethodConsumed() && this.routeGroup().CalcQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSetupCategoryMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the SetupCategoryId field is mandatory for this record
    /// </summary>
    /// <returns>
    /// true if SetupCategoryId is mandatory; false otherwise
    /// </returns>
    /// <remarks>
    /// If Setup Time is not required to be posted, then the SetupQtyId field is not required
    /// </remarks>
    public boolean isSetupCategoryMandatory()
    {
        return this.isProjMethodConsumed() && this.routeGroup().CalcSetUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>materialConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes whether material is consumed in a specified job.
    /// </summary>
    /// <param name="_prodRoute">
    /// A <c>ProdRoute</c> table buffer that specifies the route for which to test for material consumption.
    /// </param>
    /// <returns>
    /// An image constant if the material is consumed; otherwise, 0.
    /// </returns>
    public display ImageRes materialConsumption(ProdRoute _prodRoute)
    {
        #ResAppl

        boolean         ret = false;
        ProdBOM         prodBOMtmp;

        select firstonly prodBOMtmp
            where   prodBOMtmp.ProdId == _prodRoute.ProdId &&
                    prodBOMtmp.OprNum == _prodRoute.OprNum;
        if (prodBOMtmp)
        {
            ret = true;
        }
        else
        {
            ret = false;
        }
        return ret ? #ImageItem : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a field on the current record.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the modified field.
    /// </param>
    /// <param name="_arrayIndex">
    /// The index in the array of the modified value in when an array field is being modified; optional.
    /// </param>
    public void modifiedFieldValue(
        FieldName _fieldName,
        int       _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        if (_fieldName == fieldStr(RouteOpr, WrkCtrIdCost))
        {
            if (FormDataUtil::isFormDataSource(this)
                && this.WrkCtrIdCost
                && Box::yesNo(strFmt("@SYS301004",this.WrkCtrIdCost),DialogButton::Yes) == DialogButton::Yes)
            {
                this.initFromWrkCtrId(this.WrkCtrIdCost);
                FormDataUtil::getFormDataSource(this).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRouteJobsBeCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether route jobs must be created when creating the route.
    /// </summary>
    /// <returns>
    /// true, if route jobs must be created; otherwise, false.
    /// </returns>
    public boolean mustRouteJobsBeCreated()
    {
        return this.OprNum && !this.skipJobCreation && this.prodTable().RouteJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRouteJobsBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the production route jobs must be updated when updating the production route.
    /// </summary>
    /// <param name = "_prodRouteOrig">
    /// The original production route record being updated.
    /// </param>
    /// <returns>
    /// true, if production route jobs must be updated; otherwise, false.
    /// </returns>
    public boolean mustRouteJobsBeUpdated(ProdRoute _prodRouteOrig)
    {
        if (this.OprNum             != _prodRouteOrig.OprNum           ||
            this.OprNumNext         != _prodRouteOrig.OprNumNext       ||
            this.QueueTimeBefore    != _prodRouteOrig.QueueTimeBefore  ||
            this.SetupTime          != _prodRouteOrig.SetupTime        ||
            this.ProcessTime        != _prodRouteOrig.ProcessTime      ||
            this.ProcessPerQty      != _prodRouteOrig.ProcessPerQty    ||
            this.TranspTime         != _prodRouteOrig.TranspTime       ||
            this.QueueTimeAfter     != _prodRouteOrig.QueueTimeAfter   ||
            this.ToHours            != _prodRouteOrig.ToHours          ||
            this.OverlapQty         != _prodRouteOrig.OverlapQty       ||
            this.LinkType           != _prodRouteOrig.LinkType         ||
            this.PropertyId         != _prodRouteOrig.PropertyId       ||
            this.RouteGroupId       != _prodRouteOrig.RouteGroupId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextOperation</Name>
				<Source><![CDATA[
    public ProdRoute nextOperation(boolean _forUpdate = false)
    {
        ProdRoute prodRouteNext;

        prodRouteNext.selectForUpdate(_forUpdate);

        select firstonly prodRouteNext
            index hint NumNextIdx
            where prodRouteNext.ProdId   == this.ProdId  &&
                  prodRouteNext.OprNum   == this.OprNumNext;

        return prodRouteNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationName</Name>
				<Source><![CDATA[
    public display RouteOprName operationName()
    {
        return RouteOprTable::find(this.OprId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight estimated quantity.
    /// </summary>
    /// <returns>
    /// The catch weight estimated quantity.
    /// </returns>
    public PdsCWCalcQty pdsCWCalcQty()
    {
        return PdsCatchWeight::cwQty(this.prodTable().ItemId, this.CalcQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the total reported error quantity from the operation.
    /// </summary>
    /// <returns>
    /// The total reported error quantity from the operation.
    /// </returns>
    public display PdsCWBatchErr pdsCWQtyError()
    {
        return ProdRouteTrans::pdsCWQtyErrorOpr(this.ProdId, this.OprNum, this.OprPriority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyGood</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the total reported good quantity from the operation.
    /// </summary>
    /// <returns>
    /// The total reported good quantity from the operation.
    /// </returns>
    public display PdsCWBatchGood pdsCWQtyGood()
    {
        return ProdRouteTrans::pdsCWQtyGoodOpr(this.ProdId, this.OprNum, this.OprPriority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedQtyError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight reported error quantity for the operation.
    /// </summary>
    /// <returns>
    /// The catch weight reported error quantity for the operation.
    /// </returns>
    public display PdsCWBatchErr pdsCWReportedQtyError()
    {
        return ProdRouteTrans::pdsCWQtyErrorOpr(this.ProdId,this.OprNum,this.OprPriority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedQtyGood</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight reported good quantity for the operation.
    /// </summary>
    /// <returns>
    /// The catch weight reported good quantity for the operation.
    /// </returns>
    public display PdsCWBatchGood pdsCWReportedQtyGood()
    {
        return ProdRouteTrans::pdsCWQtyGoodOpr(this.ProdId,this.OprNum,this.OprPriority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>primary</Name>
				<Source><![CDATA[
    public ProdRoute primary(boolean _forUpdate = false)
    {
        ProdRoute prodRouteTmp;

        if (this.OprPriority == RouteOprPriority::Primary)
        {
            return this;
        }

        prodRouteTmp = ProdRoute::find(this.ProdId, this.OprNum, RouteOprPriority::Primary, _forUpdate);
        if (!prodRouteTmp.RecId)
        {
            throw error(strFmt("@SYS17639",this.OprNum));
        }

        return prodRouteTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteProj</Name>
				<Source><![CDATA[
    public ProdRouteProj prodRouteProj(
        ItemCalcType    _calcType,
        boolean         _forUpdate = false)
    {
        return ProdRouteProj::find(this.ProdId, this.OprNum, this.OprPriority, _calcType, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    public ProdTable prodTable(boolean _forUpdate = false)
    {
        return ProdTable::find(this.ProdId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodUnitId</Name>
				<Source><![CDATA[
    public display ProdUnitId prodUnitId()
    {
        WrkCtrTable wrkCtrTable = this.getResource();

        return WrkCtrTable::resourceGroup(wrkCtrTable.WrkCtrId,this.FromDate,this.ToDate).ProdUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodUnitInputWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the input warehouse for the current route operation.
    /// </summary>
    /// <returns>
    /// The input warehouse.
    /// </returns>
    public display InventLocationIdInput prodUnitInputWarehouse()
    {
        return ProdUnitTable::find(this.prodUnitId()).InputInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostControlUpdate</Name>
				<Source><![CDATA[
    public void projCostControlUpdate(ProjCommittedCostUpdateAction _action=ProjCommittedCostUpdateAction::Unknown)
    {
        CostControlPostingHour  costControlPostingHour;
        ProdRouteProj    prodRouteProj;

        prodRouteProj=this.prodRouteProj(ItemCalcType::Process);
        costControlPostingHour = CostControlPosting::newCostControlPostingHour(this,prodRouteProj);
        costControlPostingHour.run(_action);

        prodRouteProj=this.prodRouteProj(ItemCalcType::Setup);
        costControlPostingHour = CostControlPosting::newCostControlPostingHour(this,prodRouteProj);
        costControlPostingHour.run(_action);

        prodRouteProj=this.prodRouteProj(ItemCalcType::Qty);
        costControlPostingHour = CostControlPosting::newCostControlPostingHour(this,prodRouteProj);
        costControlPostingHour.run(_action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable(boolean _forUpdate = false)
    {
        return this.prodTable().projTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyError</Name>
				<Source><![CDATA[
    public display ProdReportedError qtyError()
    {
        return ProdRouteTrans::qtyErrorOpr(this.ProdId, this.OprNum, this.OprPriority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyGood</Name>
				<Source><![CDATA[
    public display ProdReportedGood qtyGood()
    {
        return ProdRouteTrans::qtyGoodOpr(this.ProdId, this.OprNum, this.OprPriority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyGoodByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total good quantity initiated by the specified worker.
    /// </summary>
    /// <param name = "_worker"> Worker recID </param>
    /// <returns>
    /// Returns the total good quantity initiated by a specific worker.
    /// </returns>
    [Hookable(false)]
    internal ProdReportedGood qtyGoodByWorker(JmgWorkerRecId _worker)
    {
        return ProdRouteTrans::qtyGoodOprByWorker(this.ProdId, this.OprNum, this.OprPriority, _worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReportedByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total reported quantity initiated by the specified worker.
    /// </summary>
    /// <param name = "_worker"> Worker recID </param>
    /// <returns>
    /// Returns the total reported quantity initiated by a specific worker.
    /// </returns>
    [Hookable(false)]
    internal ProdReportedGood qtyReportedByWorker(JmgWorkerRecId _worker)
    {
        return ProdRouteTrans::qtyReportedOprByWorker(this.ProdId, this.OprNum, this.OprPriority, _worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReportedByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total catch weight reported quantity initiated by the specified worker.
    /// </summary>
    /// <param name = "_worker"> Worker recID </param>
    /// <returns>
    /// Returns the total catch weight reported quantity initiated by a specific worker.
    /// </returns>
    [Hookable(false)]
    internal PdsCWBatchGood pdsCWQtyReportedByWorker(JmgWorkerRecId _worker)
    {
        return ProdRouteTrans::pdsCWQtyReportedOprByWorker(this.ProdId, this.OprNum, this.OprPriority, _worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyHours</Name>
				<Source><![CDATA[
    public display ProdReportedHours qtyHours()
    {
        return (select sum(Hours) from prodRouteTrans
                    where prodRouteTrans.TransRefId   == this.ProdId                  &&
                          prodRouteTrans.TransRefType == ProdTransRefType::Production &&
                          prodRouteTrans.OprNum       == this.OprNum                  &&
                          prodRouteTrans.OprPriority  == this.OprPriority             &&
                          prodRouteTrans.TransType    == ProdRouteTransType::Time).Hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves and returns the status of the associated quality orders.
    /// </summary>
    /// <returns>
    ///    The current quality order status.
    /// </returns>

    public display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        return InventQualityOrderTable::referenceDocumentStatusDisplay(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedHours</Name>
				<Source><![CDATA[
    public display ProdReportedHours reportedHours()
    {
        return (ProdRouteTrans::hoursOpr(this.ProdId,this.OprNum,this.OprPriority));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedQtyError</Name>
				<Source><![CDATA[
    public display ProdRouteReportedError reportedQtyError()
    {
        return (ProdRouteTrans::qtyErrorOpr(this.ProdId,this.OprNum,this.OprPriority));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedQtyGood</Name>
				<Source><![CDATA[
    public display ProdRouteReportedGood reportedQtyGood()
    {
        return (ProdRouteTrans::qtyGoodOpr(this.ProdId,this.OprNum,this.OprPriority));
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeGroup</Name>
				<Source><![CDATA[
    public RouteGroup routeGroup(boolean _forUpdate = false)
    {
        return RouteGroup::find(this.RouteGroupId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeOpr</Name>
				<Source><![CDATA[
    public RouteOprMap routeOpr(ItemId itemId)
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduledResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the IDs of the resources that are used on the production route.
    /// </summary>
    /// <returns>
    /// The collection of the IDs of the resources that are used on a production route.
    /// </returns>
    public Set scheduledResources()
    {
        WrkCtrCapRes    wrkCtrCapRes;
        Set             scheduledResources = new Set(Types::String);

        while select WrkCtrId from wrkCtrCapRes
            group by WrkCtrId
            where wrkCtrCapRes.RefId        == this.ProdId
               && wrkCtrCapRes.RefType      == WrkCtrCapRefType::Production
               // When RefType is production order, PlanVersion should be zero.
               && wrkCtrCapRes.PlanVersion  == 0
               && wrkCtrCapRes.OprNum       == this.OprNum
               && wrkCtrCapRes.OprPriority  == this.OprPriority
        {
             scheduledResources.add(wrkCtrCapRes.WrkCtrId);
        }

        return scheduledResources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usedResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Set with resource IDs that are used on the production route.
    /// </summary>
    /// <returns>
    /// A Set with resource IDs that are used on the production route.
    /// </returns>
    public Set usedResources()
    {
        ProdRouteTrans prodRouteTrans;
        Set            usedResources = new Set(Types::String);

        while select WrkCtrId from prodRouteTrans
            group by WrkCtrId
            where prodRouteTrans.TransRefType == ProdTransRefType::Production
                && prodRouteTrans.TransRefId   == this.ProdId
                && prodRouteTrans.OprNum       == this.OprNum
                && prodRouteTrans.OprPriority  == this.OprPriority
                && prodRouteTrans.Cancelled    == NoYes::No
        {
            usedResources.add(prodRouteTrans.WrkCtrId);
        }

        return usedResources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusImage</Name>
				<Source><![CDATA[
    public display container statusImage()
    {
        if (!this.RecId)
        {
            return conNull();
        }

        if (this.OprFinished)
        {
            return ImageReference::constructForSymbol(ImageReferenceSymbol::Done).pack();
        }

        if (this.OprStartedUp)
        {
            return ImageReference::constructForSymbol(ImageReferenceSymbol::Processing).pack();
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusTxt</Name>
				<Source><![CDATA[
    public str statusTxt()
    {
        if (!this.RecId)
        {
            return '';
        }

        if (this.OprFinished)
        {
            return "@SYS89788";
        }
        else if (this.OprStartedUp)
        {
            return "@SYS89787";
        }

        return "@SYS89789";
    }

]]></Source>
			</Method>
			<Method>
				<Name>toHours</Name>
				<Source><![CDATA[
    public InventFactor toHours()
    {
        return this.RouteOprMap::toHours();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toTimeEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculate the to time of the production route based on the capacity reservations.
    /// </summary>
    /// <returns>
    ///  The to time of the production route.
    /// </returns>
    /// <remarks>
    ///  Used when route line is operation scheduled and rescheduling of the single operation is needed, shouldn't be used for other purposes.
    /// </remarks>
    public Seconds toTimeEstimated()
    {
        WrkCtrCapRes        wrkCtrCapRes;
        WrkCtrCapacitySum   capacitySum;

        Seconds             endTime;
        Seconds             maxEndTime;
        Seconds             fromTime;
        Seconds             toTime;
        Seconds             capDefined;
        real                capPrSec;
        real                wrkCtrWithCap;
        WrkCtrActivityRequirementSet wrkCtrActivityRequirementSet = this.activityRequirementSet();

        if (this.ToTime || this.prodTable().SchedStatus!= ProdSchedStatus::OperationScheduled)
        {
            return this.ToTime;
        }

        if (!wrkCtrActivityRequirementSet.Quantity)
        {
            return ProdMultiScheduling::maxSeconds();
        }

        while select sum(WrkCtrSec), WrkCtrId from wrkCtrCapRes group by WrkCtrId
              // When RefType is production order, PlanVersion should be zero.
              where wrkCtrCapRes.PlanVersion == 0                                &&
                    wrkCtrCapRes.RefType     == WrkCtrCapRefType::Production     &&
                    wrkCtrCapRes.RefId       == this.ProdId                      &&
                    wrkCtrCapRes.OprNum      == this.OprNum                      &&
                    wrkCtrCapRes.TransDate   == this.ToDate                      &&
                    wrkCtrCapRes.OprPriority == RouteOprPriority::Primary
        {
            if (!wrkCtrCapRes.WrkCtrSec)
                continue;

            capacitySum = new WrkCtrCapacitySum(false,false);
            capacitySum.find(wrkCtrCapRes.WrkCtrId, this.ToDate);

            fromTime        = capacitySum.rec_FromTime();
            toTime          = capacitySum.rec_ToTime();
            wrkCtrWithCap   = capacitySum.rec_numOfWithCap();

            if (! wrkCtrWithCap || (toTime-fromTime) <= 0)
                continue;

            capDefined = real2int(capacitySum.rec_Capacity()/wrkCtrWithCap);
            capPrSec   = capDefined / (toTime - fromTime);

            if (capPrSec && wrkCtrActivityRequirementSet.Quantity && wrkCtrActivityRequirementSet.LoadPercent)
            {
                endTime = fromTime + real2int(((wrkCtrCapRes.WrkCtrSec/wrkCtrActivityRequirementSet.Quantity)/capPrSec)/(wrkCtrActivityRequirementSet.LoadPercent/100));
                if (endTime > maxEndTime)
                {
                    maxEndTime = endTime;
                }
            }
        }

        return maxEndTime ? maxEndTime : ProdMultiScheduling::maxSeconds();
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    public ProdRouteType type()
    {
        return ProdRouteType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        ProdRoute   prodRoute_Orig = this.orig();
        ProdTable   prodTable = this.prodTable();

        prodTable.status().updatingProdRoute(this);

        if (this.isProjMethodConsumed())
        {
            this.projCostControlUpdate();
        }

        this.type().setBackStatus();

        if (this.OprPriority)
        {
            this.LinkType = SchedJobLinkType::None;
        }

        if (this.ProdId         != prodRoute_Orig.ProdId ||
            this.OprNum         != prodRoute_Orig.OprNum ||
            this.OprPriority    != prodRoute_Orig.OprPriority)
        {
            WrkCtrProdRouteActivity wrkCtrProdRouteActivity;
            
            update_recordset wrkCtrProdRouteActivity
                setting ProdId          = this.ProdId,
                        OprNum          = this.OprNum,
                        OprPriority     = this.OprPriority
                where   wrkCtrProdRouteActivity.ProdId          == prodRoute_Orig.ProdId
                     && wrkCtrProdRouteActivity.OprNum          == prodRoute_Orig.OprNum
                     && wrkCtrProdRouteActivity.OprPriority     == prodRoute_Orig.OprPriority
                     && wrkCtrProdRouteActivity.RouteDataAreaId == this.DataAreaId;
        }

        super();

        if (Global::isConfigurationkeyEnabled(configurationkeynum(Jmgjob)))
        {
            JmgJobTable::synchronizeProdRoute(this);
        }

        prodTable = this.prodTable();

        prodTable.status().updatedProdRoute(this, prodRoute_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCheckFlag</Name>
				<Source><![CDATA[
    public void updateCheckFlag()
    {
        ProdTable prodTable = this.prodTable(true);

        if (! prodTable.CheckRoute && prodTable)
        {
            prodTable.CheckRoute= NoYes::Yes;
            prodTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean  validateDelete(boolean calledFromStatus= false)
    {
        if (this.isTmp())
        {
            return true;
        }

        if (!calledFromStatus)
        {
            return this.prodTable().status().validateDeleteProdRoute(this);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        FieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ProdRoute, SetUpCategoryId)   :
                if (ret && this.prodTable().isProjMethodConsumed())
                    ret = ret && ProdRoute::checkProjCategoryId(this.SetUpCategoryId);
                break;

            case fieldStr(ProdRoute, ProcessCategoryId) :
                if (ret && this.prodTable().isProjMethodConsumed())
                    ret = ret && ProdRoute::checkProjCategoryId(this.ProcessCategoryId);
                break;

            case fieldStr(ProdRoute, QtyCategoryId)     :
                if (ret && this.prodTable().isProjMethodConsumed())
                    ret = ret && ProdRoute::checkProjCategoryId(this.QtyCategoryId);
                break;

            case fieldStr(ProdRoute, OprStartedUp)      :
            case fieldStr(ProdRoute, OprFinished)       :
                    ret = ret && this.checkOperationStatus();
                break;

            default:
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProject</Name>
				<Source><![CDATA[
    public boolean validateProject()
    {
        boolean     ret = true;
        RouteGroup  routeGroup = this.routeGroup();

        if (ret &&
            ((routeGroup.CalcSetUp && !this.SetUpCategoryId) ||
             (routeGroup.CalcProc  && !this.ProcessCategoryId) ||
             (routeGroup.CalcQty   && !this.QtyCategoryId)))
        {
            ret = checkFailed("@SYS76856");
        }

        if (routeGroup.CalcSetUp)
        {
            ret = ret && ProdRoute::checkProjCategoryId(this.SetUpCategoryId);
            ret = ret && ProjJournalTransMapForm::construct(this.prodRouteProj(ItemCalcType::Setup), this).validateWritePost();
        }

        if (routeGroup.CalcProc)
        {
            ret = ret && ProdRoute::checkProjCategoryId(this.ProcessCategoryId);
            ret = ret && ProjJournalTransMapForm::construct(this.prodRouteProj(ItemCalcType::Process), this).validateWritePost();
        }

        if (routeGroup.CalcQty)
        {
            ret = ret && ProdRoute::checkProjCategoryId(this.QtyCategoryId);
            ret = ret && ProjJournalTransMapForm::construct(this.prodRouteProj(ItemCalcType::Qty), this).validateWritePost();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean  validateWrite(boolean _calledFromStatus = false)
    {
        boolean ret;

        if (!_calledFromStatus)
        {
            return this.prodTable().status().validateWriteProdRoute(this);
        }

        ret = super();

        if (ret && this.prodTable().isProjMethodConsumed())
        {
            ret = ret && ProdRoute::checkProjCategoryId(this.SetUpCategoryId);
            ret = ret && ProdRoute::checkProjCategoryId(this.ProcessCategoryId);
            ret = ret && ProdRoute::checkProjCategoryId(this.QtyCategoryId);
        }

        ret = ret && this.checkOperationStatus();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accError</Name>
				<Source><![CDATA[
    public static Percent accError(
        ProdId    prodId,
        OprNum     oprNum
        )
    {
        Percent tmpAcc;

        if (oprNum)
        {
            tmpAcc = (select firstonly prodRoute
                            index hint NumOprNumIdx
                            where prodRoute.ProdId          == prodId &&
                                  prodRoute.OprNum          == oprNum &&
                                  prodRoute.OprPriority     == RouteOprPriority::Primary).AccError;
        }
        if (!tmpAcc)
        {
            tmpAcc = ProdRoute::findFirst(prodId).AccError;
        }

        return tmpAcc > 0 ? tmpAcc : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsRouteReportedFinished</Name>
				<Source><![CDATA[
    public static boolean checkIsRouteReportedFinished(ProdId _prodId)
    {
        ProdRoute        prodRoute;
        RouteGroup      routeGroup;

        boolean ok = true;

        while select OprNum, OprPriority from prodRoute
            index hint NumOprNumIdx
            where prodRoute.ProdId           == _prodId      &&
                  prodRoute.OprFinished      == NoYes::No
        exists join routeGroup
            where routeGroup.RouteGroupId       == prodRoute.RouteGroupId &&
                  routeGroup.ReportFinishOpr    == NoYes::Yes
        {
             ok = checkFailed(strFmt("@SYS8370",prodRoute.OprNum,prodRoute.OprPriority));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategoryId</Name>
				<Source><![CDATA[
    public static boolean checkProjCategoryId(ProjCategoryId _projCategoryId)
    {
        boolean         ret = true;
        ProjCategory    projCategory;

        if (_projCategoryId)
        {
            projCategory = ProjCategory::find(_projCategoryId);
            if (!projCategory)
            {
                ret = checkFailed(strFmt("@SYS109367", _projCategoryId));
            }
            else
            {
                if (projCategory.CategoryType != ProjCategoryType::Hour)
                    ret = checkFailed(strFmt("@SYS54897",_projCategoryId));
                ret = ret && projCategory.validateIfInactiveAllowed();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(
        ProdId               _prodId,
        OprNum               _oprNum,
        RouteOprPriority     _oprPriority)
    {
        return _oprNum && (select firstonly prodRoute
                index hint NumOprNumIdx
                where prodRoute.ProdId           == _prodId       &&
                      prodRoute.OprNum           == _oprNum       &&
                      prodRoute.OprPriority      == _oprPriority
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    static boolean exists(ProdId _prodId)
    {
        if (_prodId)
            return (select firstonly RecId from prodRoute
                where prodRoute.ProdId == _prodId).RecId ? true : false;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record with the specified record ID exists in the database.
    /// </summary>
    /// <param name="_recId">
    /// The record ID to check.
    /// </param>
    /// <returns>
    /// true if a record exists with the provided record ID; otherwise, false.
    /// </returns>
    public static boolean existRecId(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from prodRoute
                    where prodRoute.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether a secondary operation exists.
    /// </summary>
    /// <param name="_prodId">
    ///     The production order ID of the secondary operation.
    /// </param>
    /// <param name="_oprNum">
    ///     The secondary operation number.
    /// </param>
    /// <returns>
    ///     true if the secondary operation exists; otherwise, false.
    /// </returns>
    public static boolean existSecondary(
        ProdId    _prodId,
        OprNum    _oprNum)
    {
        return _oprNum && (select firstonly prodRoute
                            index hint NumOprNumIdx
                            where   prodRoute.ProdId        == _prodId                      &&
                                    prodRoute.OprNum        == _oprNum                      &&
                                    prodRoute.OprPriority   != RouteOprPriority::Primary
                          ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProdRoute find(
        ProdId               _prodId,
        OprNum               _oprNum,
        RouteOprPriority     _oprPriority,
        boolean              _forUpdate = false)
    {
        ProdRoute prodRoute;

        prodRoute.selectForUpdate(_forUpdate);

        if (_oprNum)
            select firstonly prodRoute
                index hint NumOprNumIdx
                where prodRoute.ProdId           == _prodId       &&
                      prodRoute.OprNum           == _oprNum       &&
                      prodRoute.OprPriority      == _oprPriority;

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOprId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the <c>ProdRoute</c> table to find the specified <c>ProdRoute</c> record.
    /// </summary>
    /// <param name="_prodId">
    ///    The production ID to which the <c>ProdRoute</c><c>ProdId</c> field corresponds.
    /// </param>
    /// <param name="_oprNum">
    ///    The operation number to which <c>ProdRoute</c><c>OprNum</c> field corresponds.
    /// </param>
    /// <param name="_oprId">
    ///    The operator ID to which <c>ProdRoute</c><c>OprId</c> field corresponds.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether to read the record for updating; optional.
    /// </param>
    /// <returns>
    ///    A <c>ProdRoute</c> buffer.
    /// </returns>
    /// <remarks>
    ///    This is a public method that is used to find records.
    /// </remarks>
    public static ProdRoute findByOprId(
        ProdId               _prodId,
        OprNum               _oprNum,
        RouteOprId           _oprId,
        boolean              _forUpdate = false)
    {
        ProdRoute prodRoute;
        prodRoute.selectForUpdate(_forUpdate);

        if (_oprNum)
            select firstonly prodRoute
            where prodRoute.ProdId           == _prodId  &&
                  prodRoute.OprNum           == _oprNum  &&
                  prodRoute.OprId            == _oprId;

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    public static ProdRoute findFirst(
        ProdId   _prodId,
        boolean  _forUpdate = false)
    {
        ProdRoute prodRoute;

        if (_prodId)
        {
            prodRoute.selectForUpdate(_forUpdate);

            select firstonly prodRoute
                index hint NumOprNumIdx
                order by Level desc, OprNum
                where prodRoute.ProdId      == _prodId                  &&
                      prodRoute.OprPriority == RouteOprPriority::Primary;
        }

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJobId</Name>
				<Source><![CDATA[
    public static ProdRoute findJobId(
        JmgJobId _prodJobId,
        boolean  _forUpdate = false
        )
    {
        ProdRoute prodRoute;

        if (_prodJobId)
        {
            prodRoute.selectForUpdate(_forUpdate);

            select firstonly prodRoute
                where prodRoute.JobIdProcess == _prodJobId;

            if (!prodRoute)
            {
                prodRoute.selectForUpdate(_forUpdate);
                select firstonly prodRoute
                    where prodRoute.JobIdSetup   == _prodJobId;
            }
        }

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLast</Name>
				<Source><![CDATA[
    public static ProdRoute findLast(
        ProdId    _prodId,
        boolean   _forUpdate = false)
    {
        ProdRoute prodRoute;

        if (_prodId)
        {
            prodRoute.selectForUpdate(_forUpdate);

            select firstonly prodRoute
                index hint NumOprNumIdx
                order by Level, OprNum desc
                where prodRoute.ProdId      == _prodId                  &&
                      prodRoute.OprPriority == RouteOprPriority::Primary;
        }

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPhantomBOMFirst</Name>
				<Source><![CDATA[
    public static ProdRoute findPhantomBOMFirst(
        ProdId      _prodId,
        OprNum      _oprNumPhantom,
        OprNum      _oprNumBOM, // Incl oprNumOffset
        OprNum      _oprNumFirst,
        ProdRoute   _prodRouteLast
        )
    {
        ProdRoute   phantomProdRoute;

        if (_oprNumPhantom)
        {
            if (_prodRouteLast.OprNum == _oprNumPhantom)
            {
                return _prodRouteLast;
            }

            phantomProdRoute = ProdRoute::find(_prodId,_oprNumPhantom,RouteOprPriority::Primary);
        }

        if (! phantomProdRoute.RecId && _oprNumBOM)
        {
            if (_prodRouteLast.OprNum == _oprNumBOM)
            {
                return _prodRouteLast;
            }

            phantomProdRoute = ProdRoute::find(_prodId,_oprNumBOM,RouteOprPriority::Primary);
        }

        if (! phantomProdRoute.RecId && _oprNumFirst)
        {
            if (_prodRouteLast.OprNum == _oprNumFirst)
            {
                return _prodRouteLast;
            }

            phantomProdRoute = ProdRoute::find(_prodId,_oprNumFirst,RouteOprPriority::Primary);
        }

        return phantomProdRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static ProdRoute findRecId(
        RecId       _recId,
        boolean     _forUpdate = false)
    {
        ProdRoute prodRoute;

        if (_recId)
        {
            prodRoute.selectForUpdate(_forUpdate);

            select firstonly prodRoute
                where prodRoute.RecId == _recId;
        }

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestOprNum</Name>
				<Source><![CDATA[
    public static OprNum highestOprNum(
        ProdId _prodId,
        OprNum _oprNum = 0)
    {
        return (select maxof(OprNum) from prodRoute
                    where prodRoute.ProdId == _prodId
                      && (prodRoute.OprNum <= _oprNum || !_oprNum)
                ).OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastOprNum</Name>
				<Source><![CDATA[
    public static OprNum lastOprNum(ProdId _prodId)
    {
        return (select prodRoute
                    where prodRoute.ProdId       == _prodId &&
                          prodRoute.OprNumNext   == 0).OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOprId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for the <c>OprId</c> values that match the given parameters for a given form
    /// control.
    /// </summary>
    /// <param name="_formControl">
    /// A <c>FormControl</c> reference to the form control that uses the lookup.
    /// </param>
    /// <param name="_prodId">
    /// A <c>ProdId</c> value to match.
    /// </param>
    /// <param name="_oprNum">
    /// An <c>OprNum</c> value to match.
    /// </param>
    public static void lookupOprId(FormControl _formControl, ProdId _prodId, OprNum _oprNum)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(ProdRoute), _formControl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(ProdRoute));
        QueryBuildRange      queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(ProdRoute, OprId));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(ProdRoute, ProdId));
        queryBuildRange.value(queryValue(_prodId));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(ProdRoute, OprNum));
        queryBuildRange.value(queryValue(_oprNum));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOprNum</Name>
				<Source><![CDATA[
    public static void lookupOprNum(
        FormIntControl  _ctrl,
        ProdId          _prodId,
        Common          _common = null
        )
    {
        Args       args;
        FormRun    formRun;

        args = new Args();
        args.name(formStr(ProdRouteOprNumLookUp));
        args.parm(_prodId);
        args.caller(_ctrl);
        args.record(_common);
        formRun = classfactory.formRunClass(args);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestRemainStatus</Name>
				<Source><![CDATA[
    public static ProdBackStatus lowestRemainStatus(ProdId _prodId)
    {
        return (select minof(BackorderStatus) from prodRoute
                    where prodRoute.ProdId == _prodId).BackorderStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportOprAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports a specific production operation as finished.
    /// </summary>
    /// <param name="_prodId">
    /// The production order ID to which the operation belongs.
    /// </param>
    /// <param name="_oprNum">
    /// The operation number to report as finished; optional.
    /// </param>
    /// <param name="_onlySecondary">
    /// A Boolean value that indicates whether only operations with secondary priority should be reported
    /// as finished.
    /// </param>
    /// <param name="_reverse">
    /// A Boolean value that specifies whether the operation status should be reverted to the previous
    /// status; optional.
    /// </param>
    public static void reportOprAsFinished(
        ProdId    _prodId,
        OprNum    _oprNum         = 0,
        boolean   _onlySecondary  = false,
        boolean   _reverse        = false)
    {
        ProdRoute   prodRoute;

        ttsbegin;

        InventQualityManagementBlockHandler::blockRouteOprReportFinished(_prodId, _oprNum, _onlySecondary, _reverse);

        InventQualityManagementCreateHandler::createRouteOprReportFinishedAfter(_prodId, _oprNum, _onlySecondary, _reverse);

        // do not call skipDataMethods, since update() needs to be called

        update_recordset prodRoute
            setting OprFinished = _reverse ? NoYes::No : NoYes::Yes
            where prodRoute.ProdId          ==  _prodId                                                         &&
                 ((prodRoute.OprNum         ==  _oprNum)                                    || !_oprNum)        &&
                 ((prodRoute.OprPriority    != RouteOprPriority::Primary && _onlySecondary) || !_onlySecondary) &&
                 (((prodRoute.OprFinished   == NoYes::No)                                   && !_reverse)       ||
                  ((prodRoute.OprFinished   == NoYes::Yes)                                  &&  _reverse));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startUpOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Begins specific production operations.
    /// </summary>
    /// <param name="_prodId">
    /// The production order ID to which the operations belong.
    /// </param>
    /// <param name="_fromOprNum">
    /// The operation number from which to start the operations.
    /// </param>
    /// <param name="_toOprNum">
    /// The operation number to which to start operations.
    /// </param>
    /// <param name="_onlySecondary">
    /// A Boolean value that indicates whether to only start operations with secondary priority.
    /// </param>
    /// <param name="_reverse">
    /// A Boolean value that specifies whether to revert the operation status to the previous status;
    /// optional.
    /// </param>
    public static void startUpOpr(
        ProdId     _prodId,
        OprNum     _fromOprNum,
        OprNum     _toOprNum,
        boolean    _onlySecondary  = false,
        boolean    _reverse        = false)
    {
        ProdRoute   prodRoute;

        ttsbegin;

        InventQualityManagementCreateHandler::createRouteOprReportFinishedBeforeRange(_prodId, _fromOprNum, _toOprNum, _onlySecondary, _reverse);

        prodRoute.skipDataMethods(true);

        update_recordset prodRoute
            setting OprStartedUp = _reverse ? NoYes::No : NoYes::Yes
            where prodRoute.ProdId          ==  _prodId                                                                 &&
                  prodRoute.OprNum          >=  _fromOprNum                                                             &&
                 (prodRoute.OprNum          <=  _toOprNum                                       ||  !_toOprNum)         &&
                 ((prodRoute.OprPriority    !=  RouteOprPriority::Primary   && _onlySecondary)  ||  !_onlySecondary)    &&
                 ((!prodRoute.OprStartedUp                                  &&  !_reverse)                              ||
                  (prodRoute.OprStartedUp                                   &&  _reverse));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOprStatusFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the operation status on all related records when a manual change of the operation status is
    /// performed on the <c>ProdRoute</c> form.
    /// </summary>
    /// <param name="_prodRoute">
    /// The <c>ProdRoute</c> table buffer with a changed operation status.
    /// </param>
    public static void updateOprStatusFromForm(ProdRoute _prodRoute)
    {
        ProdRoute   prodRoute_Orig = _prodRoute.orig();

        if (!_prodRoute.isOprStatusModified())
        {
            return;
        }

        if (_prodRoute.OprPriority != RouteOprPriority::Primary)
        {
            return;
        }

        ttsbegin;

        // Start selected
        if (!prodRoute_Orig.OprStartedUp && _prodRoute.OprStartedUp)
        {
            // start secondary operations
            ProdRoute::startUpOpr(_prodRoute.ProdId,
                                  _prodRoute.OprNum,
                                  _prodRoute.OprNum,
                                  true);

            // start jobs
            ProdRouteJob::startUpJob(_prodRoute.ProdId,
                                     _prodRoute.OprNum,
                                     _prodRoute.OprNum);
        }

        // Report as finished selected
        if (!prodRoute_Orig.OprFinished && _prodRoute.OprFinished)
        {
            // report secondary operations as finished
            ProdRoute::reportOprAsFinished(_prodRoute.ProdId,
                                           _prodRoute.OprNum,
                                           true);

            // report jobs as finished
            ProdRouteJob::reportJobAsFinished(_prodRoute.ProdId,
                                              _prodRoute.OprNum);
        }

        // Report as finished unselected
        if (prodRoute_Orig.OprFinished && !_prodRoute.OprFinished)
        {
            // reverse secondary finished operations
            ProdRoute::reportOprAsFinished(_prodRoute.ProdId,
                                           _prodRoute.OprNum,
                                           true,
                                           true);

            // in this case, jobs should not be reversed since some of them may actually be completed
        }

        // Start unselected
        if (prodRoute_Orig.OprStartedUp && !_prodRoute.OprStartedUp)
        {
            // reverse secondary started operations
            ProdRoute::startUpOpr(_prodRoute.ProdId,
                                  _prodRoute.OprNum,
                                  _prodRoute.OprNum,
                                  true,
                                  true);

            // reverse started jobs
            ProdRouteJob::startUpJob(_prodRoute.ProdId,
                                     _prodRoute.OprNum,
                                     _prodRoute.OprNum,
                                     true);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReNumberLevelNum</Name>
				<Source><![CDATA[
    private static container updateReNumberLevelNum(OprNum _oprNumNext, OprNum _oprNumLast, OprNum _oprNum, Map _mapOprNumNext, Map _mapOprLevel, Map _mapOprNum, RouteLevel _level)
    {
        if (!_mapOprNumNext.exists(_oprNumNext))
        {
            return [_oprNum, _level];
        }

        ListIterator oprNumIterator = new ListIterator(_mapOprNumNext.lookup(_oprNumNext));
        while (oprNumIterator.more())
        {
            _level++;

            _oprNumLast = oprNumIterator.value();

            _mapOprLevel.insert(_oprNumLast, _level);

            _mapOprNum.insert  (_oprNumLast, _oprNum);
            _oprNum -= #oprNumAdd;

            [_oprNum, _level] = ProdRoute::updateReNumberLevelNum(_oprNumLast, _oprNumLast, _oprNum, _mapOprNumNext, _mapOprLevel, _mapOprNum, _level);

            oprNumIterator.next();
        }

        return [_oprNum, _level];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReNumberOprNum</Name>
				<Source><![CDATA[
    public static void updateReNumberOprNum(ProdId _prodId)
    {
        ProdTable prodTable = ProdTable::find(_prodId);
        if (!prodTable.checkValid(_prodId))
        {
            throw error("@SYS18447");
        }

        if (!prodTable.status().isBefore(ProdStatus::Released))
        {
            return;
        }

        if ((select prodRouteTrans
                where prodRouteTrans.TransRefId  == _prodId
                  && prodRouteTrans.TransRefType == ProdTransRefType::Production).RecId)
        {
            return;
        }

        if ((select prodJournalRoute
                where prodJournalRoute.ProdId == _prodId).RecId)
        {
            return;
        }

        ProdRoute prodRoute;
        OprNum oprNum;
        OprNum oprNumLast;
        OprNum oprNumHighest;

        RouteParameters routeParameters = RouteParameters::find();
        Map mapOprNum = new Map(Types::Integer,Types::Integer);
        Map mapOprLevel = new Map(Types::Integer, Types::Integer);
        RouteLevel level = 0;

        ttsbegin;

        if (routeParameters.Network)
        {
            while select OprNum from prodRoute
                order by Level desc,OprNum desc
                where prodRoute.ProdId == _prodId
            {
                if (prodRoute.OprNum != oprNumLast)
                {
                    oprNumLast  = prodRoute.OprNum;
                    oprNum     += #oprNumAdd;
                }

                mapOprNum.insert(prodRoute.OprNum,oprNum);

                oprNumHighest = max(oprNumHighest, max(oprNum, oprNumLast));
            }
        }
        else 
        {
            Map mapOprNumNext = new Map(Types::Integer, Types::Class);
            List listOprNum;

            //Not allowed to make complex network, so order the route lineary

            while select OprNum, OprNumNext from prodRoute
                order by OprNum
                where prodRoute.ProdId == _prodId
            {
                if (prodRoute.OprNum == oprNumLast)
                {
                    continue;
                }

                oprNumLast = prodRoute.OprNum;

                if (mapOprNumNext.exists(prodRoute.OprNumNext))
                {
                    listOprNum = mapOprNumNext.lookup(prodRoute.OprNumNext);
                }
                else
                {
                    listOprNum = new List(Types::Integer);
                }

                listOprNum.addStart(prodRoute.OprNum);
                mapOprNumNext.insert(prodRoute.OprNumNext, listOprNum);

                oprNumHighest += #oprNumAdd;
                oprNumHighest  = max(oprNumHighest, oprNumLast);
            }

            oprNum = oprNumHighest;

            ProdRoute::updateReNumberLevelNum(0, oprNumLast, oprNum, mapOprNumNext, mapOprLevel, mapOprNum, level);
        }

        ProdRoute::updateProdRoute(_prodId, mapOprNum, mapOprLevel, oprNumHighest, routeParameters);

        ProdRoute::updateProdRouteWithHighest(_prodId, oprNumHighest);

        ProdRoute::updateProdBOM(_prodId, mapOprNum);

        ProdRoute::updateProdRouteJob(_prodId, mapOprNum);

        ProdRoute::updateWrkCtrCapRes(_prodId, mapOprNum);

        SelectableDataArea currentCompanyDataArea = getCompany(tableNum(ProdRoute), CompanyInfo::find().DataArea);

        ProdRoute::updateWrkCtrProdRouteActivityWithMap(_prodId, currentCompanyDataArea, mapOprNum, oprNumHighest);

        ProdRoute::updateWrkCtrProdRouteActivity(_prodId, currentCompanyDataArea, oprNumHighest);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewCacheBufferFromProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ProdRoute</c> record ready to be used with the <c>RecordViewCache></c> class.
    /// </summary>
    /// <param name = "_prodId">The ProdId to scope the cache for.</param>
    /// <param name = "_forupdate">A Boolean indicating if the record should be selected for update; optional.</param>
    /// <returns>A <c>ProdRoute</c> record.</returns>
    public static ProdRoute viewCacheBufferFromProdId(ProdId _prodId, boolean _forupdate = false)
    {
        ProdRoute   prodRoute;

        prodRoute.selectForUpdate(_forupdate);

        select nofetch prodRoute where prodRoute.ProdId == _prodId;

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current operation is an ending route operation.
    /// </summary>
    /// <returns>
    /// true if the record contains an ending operation; otherwise, false.
    /// </returns>
    public boolean isLastOpr()
    {
        return this.OprNumNext == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceForLastOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource that is set up as the requirement for the last route in a production order.
    /// </summary>
    /// <param name="_prodId">
    /// The production order Id.
    /// </param>
    /// <param name="_searchOnDate">
    /// The first date to search for resources on; optional.
    /// </param>
    /// <param name="_inventSiteId">
    /// The ID of the site to search for resources on. If blank the search is not limited to resources on a specific site; optional.
    /// </param>
    /// <returns>
    /// A <c>WrkCtrTable</c> record that satisfies the search criteria.
    /// </returns>
    /// <remarks>
    /// If there are no routes, it returns an empty resource.
    /// </remarks>
    public static WrkCtrTable getResourceForLastOperation(
        ProdId          _prodId,
        TransDate       _searchOnDate                   = dateNull(),
        InventSiteId    _inventSiteId                   = '')
    {
        WrkCtrTable     ret;
        ProdRoute       prodRoute = ProdRoute::findLast(_prodId);

        if (prodRoute)
        {
            ret = prodRoute.getResource(
                true,
                true,
                _searchOnDate,
                _searchOnDate,
                _inventSiteId,
                false,
                true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScheduledResourceForLastOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource that has been scheduled or assigned as the requirement for the last route in a production order.
    /// </summary>
    /// <param name="_prodId">
    /// The production order Id.
    /// </param>
    /// <param name="_searchOnDate">
    /// The first date to search for resources on; optional.
    /// </param>
    /// <param name="_inventSiteId">
    /// The ID of the site to search for resources on. If blank the search is not limited to resources on a specific site; optional.
    /// </param>
    /// <returns>
    /// A <c>WrkCtrTable</c> record that satisfies the search criteria.
    /// </returns>
    public static WrkCtrTable getScheduledResourceForLastOperation(
        ProdId          _prodId,
        TransDate       _searchOnDate                   = dateNull(),
        InventSiteId    _inventSiteId                   = '')
    {
        return ProdRoute::findLast(_prodId).getResource(
            true,
            false,
            _searchOnDate,
            _searchOnDate,
            _inventSiteId,
            false,
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWrkCtrCapRes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>WrkCtrCapRes</c> operation number information according to the map.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID of the operation.
    /// </param>
    /// <param name = "_mapOprNum">
    /// The map saves the operation number information.
    /// </param>
    private static void updateWrkCtrCapRes(ProdId _prodId, Map _mapOprNum)
    {
        WrkCtrCapRes wrkCtrCapRes;

        List recordList = new List(Types::Record);

        while select wrkCtrCapRes
			index hint RefIdx
			where wrkCtrCapRes.RefType     == WrkCtrCapRefType::Production
               // When RefType is production order, PlanVersion should be zero.
			   && wrkCtrCapRes.PlanVersion == 0
			   && wrkCtrCapRes.RefId       == _prodId
        {
            recordList.addEnd(wrkCtrCapRes);
        }

        ListEnumerator le = recordList.getEnumerator();

        while (le.moveNext())
        {
            wrkCtrCapRes = le.current();
            wrkCtrCapRes.selectForUpdate(true);

            if (_mapOprNum.exists(wrkCtrCapRes.OprNum))
            {
                wrkCtrCapRes.OprNum  = _mapOprNum.lookup(wrkCtrCapRes.OprNum);
            }
            else
            {
                wrkCtrCapRes.OprNum  = 0;
            }

            wrkCtrCapRes.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdRouteWithHighest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>ProdRoute</c> operation number information with highest number.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID of the operation.
    /// </param>
    /// <param name = "_oprNumHighest">
    /// Current saved highest operation number.
    /// </param>
    private static void updateProdRouteWithHighest(ProdId _prodId, OprNum _oprNumHighest)
    {
        ProdRoute prodRoute;

        List recordList = new List(Types::Record);

        while select prodRoute
            index hint NumOprNumIdx
            order by RecId
            where prodRoute.ProdId == _prodId
        {
            recordList.addEnd(prodRoute);
        }

        ListEnumerator le = recordList.getEnumerator();

        while (le.moveNext())
        {
            prodRoute = le.current();
            prodRoute.selectForUpdate(true);

            prodRoute.OprNum = prodRoute.OprNum - _oprNumHighest;

            if (prodRoute.OprNumNext)
            {
                prodRoute.OprNumNext = prodRoute.OprNumNext - _oprNumHighest;
            }

            prodRoute.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>ProdRouteJob</c> operation number information according to the map.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID of the operation.
    /// </param>
    /// <param name = "_mapOprNum">
    /// The map saves the operation number information.
    /// </param>
    private static void updateProdRouteJob(ProdId _prodId, Map _mapOprNum)
    {
        List recordList = new List(Types::Record);
        ProdRouteJob  prodRouteJob;

        while select prodRouteJob
			index hint ProdOprIdx
            where prodRouteJob.ProdId == _prodId
        {
            recordList.addEnd(prodRouteJob);
        }

        ListEnumerator le = recordList.getEnumerator();

        while (le.moveNext())
        {
            prodRouteJob = le.current();
            prodRouteJob.selectForUpdate(true);

            if (_mapOprNum.exists(prodRouteJob.OprNum))
            {
                prodRouteJob.OprNum = _mapOprNum.lookup(prodRouteJob.OprNum);
            }
            else
            {
                prodRouteJob.OprNum = 0;
            }

            prodRouteJob.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>ProdRoute</c> operation number information according to the map.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID of the operation.
    /// </param>
    /// <param name = "_mapOprNum">
    /// The map saves the operation number information.
    /// </param>
    /// <param name = "_mapOprLevel">
    /// The map saves the operation level information.
    /// </param>
    /// <param name = "_oprNumHighest">
    /// Current saved highest operation number.
    /// </param>
    /// <param name = "_routeParameters">
    /// The setup of the route consumes in the production order.
    /// </param>
    private static void updateProdRoute(ProdId _prodId, Map _mapOprNum, Map _mapOprLevel, OprNum _oprNumHighest, RouteParameters _routeParameters)
    {
        ProdRoute prodRoute;

        List recordList = new List(Types::Record);

        while select prodRoute
            order by RecId
            where prodRoute.ProdId == _prodId
        {
            recordList.addEnd(prodRoute);
        }

        ListEnumerator le = recordList.getEnumerator();

        while (le.moveNext())
        {
            prodRoute = le.current();
            prodRoute.selectForUpdate(true);

            if (!_mapOprNum.exists(prodRoute.OprNum))
            {
                throw error("@SYS75220");
            }

            if (!_routeParameters.Network)
            {
                prodRoute.Level = _mapOprLevel.lookup(prodRoute.OprNum);
            }

            prodRoute.OprNum = _mapOprNum.lookup(prodRoute.OprNum) + _oprNumHighest;

            if (prodRoute.OprNumNext)
            {
                if (!_mapOprNum.exists(prodRoute.OprNumNext))
                {
                    throw error(strFmt("@SYS25611",prodRoute.OprNum));
                }

                if (_routeParameters.Network)
                {
                    prodRoute.OprNumNext = _mapOprNum.lookup(prodRoute.OprNumNext) + _oprNumHighest;
                }
                else
                {
                    prodRoute.OprNumNext = prodRoute.OprNum + #oprNumAdd;
                }
            }

            prodRoute.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>ProdBOM</c> operation number information according to the map.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID of the operation.
    /// </param>
    /// <param name = "_mapOprNum">
    /// The map saves the operation number information.
    /// </param>
    private static void updateProdBOM(ProdId _prodId, Map _mapOprNum)
    {
        ProdBOM prodBOM;

        List recordList = new List(Types::Record);

        while select prodBOM
			index hint NumIdx
			where prodBOM.ProdId == _prodId
			   && prodBOM.OprNum != 0
        {
            recordList.addEnd(prodBOM);
        }

        ListEnumerator le = recordList.getEnumerator();

        while (le.moveNext())
        {
            prodBOM = le.current();
            prodBOM.selectForUpdate(true);

            if (_mapOprNum.exists(prodBOM.OprNum))
            {
                prodBOM.OprNum = _mapOprNum.lookup(prodBOM.OprNum);
            }
            else
            {
                prodBOM.OprNum = 0;
            }

            prodBOM.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWrkCtrProdRouteActivityWithMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>WrkCtrProdRouteActivity</c> records related to the production order with the map information.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order id of the operation.
    /// </param>
    /// <param name = "_dataAreaId">
    /// The current company information of the record.
    /// </param>
    /// <param name = "_mapoprnum">
    /// The map saves the operation number information.
    /// </param>
    /// <param name = "_oprNumHighest">
    /// Current saved highest operation number.
    /// </param>
    static void updateWrkCtrProdRouteActivityWithMap(ProdId _prodId, SelectableDataArea _dataAreaId, Map _mapOprNum, OprNum _oprNumHighest)
    {
        WrkCtrProdRouteActivity wrkCtrProdRouteActivity;
        List recordList = new List(Types::Record);
            
        while select wrkCtrProdRouteActivity
            order by RecId
            where wrkCtrProdRouteActivity.ProdId          == _prodId
               && wrkCtrProdRouteActivity.RouteDataAreaId == _dataAreaId
        {
            recordList.addEnd(wrkCtrProdRouteActivity);
        }

        ListEnumerator le = recordList.getEnumerator();

        while (le.moveNext())
        {
            wrkCtrProdRouteActivity = le.current();
            wrkCtrProdRouteActivity.selectForUpdate(true);

            if (_mapOprNum.exists(wrkCtrProdRouteActivity.OprNum))
            {
                wrkCtrProdRouteActivity.OprNum = _mapOprNum.lookup(wrkCtrProdRouteActivity.OprNum) + _oprNumHighest;
            }
            else
            {
                wrkCtrProdRouteActivity.OprNum = 0;
            }
            wrkCtrProdRouteActivity.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWrkCtrProdRouteActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the <c>WrkCtrprodRouteActivity</c> records.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID of the operation.
    /// </param>
    /// <param name = "_dataAreaId">
    /// Current company information of the record.
    /// </param>
    /// <param name = "_oprNumHighest">
    /// Current saved highest operation number.
    /// </param>
    static void updateWrkCtrProdRouteActivity(ProdId _prodId, SelectableDataArea _dataAreaId, OprNum _oprNumHighest)
    {
        WrkCtrProdRouteActivity wrkCtrProdRouteActivity;
        List recordList = new List(Types::Record);

        while select wrkCtrProdRouteActivity
            order by RecId
            where wrkCtrProdRouteActivity.ProdId          == _prodId
               && wrkCtrProdRouteActivity.RouteDataAreaId == _dataAreaId
        {
            recordList.addEnd(wrkCtrProdRouteActivity);
        }
        
        ListEnumerator le = recordList.getEnumerator();

        while (le.moveNext())
        {
            wrkCtrProdRouteActivity = le.current();
            wrkCtrProdRouteActivity.selectForUpdate(true);

            wrkCtrProdRouteActivity.OprNum -= _oprNumHighest;
            wrkCtrProdRouteActivity.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllPreviousOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all operations that are before the initial operation.
    /// </summary>
    /// <param name="_prodId">
    /// The production order number.
    /// </param>
    /// <param name="_oprNum">
    /// The operation number.
    /// </param>
    /// <param name="_includeCurrentOprNum">
    /// true if current operation number must be included to the results; otherwise, false.
    /// </param>
    /// <returns>
    /// Returns Set of OprNum with all operations before the initial operation, 
    /// including operation number that has been passed.
    /// </returns>
    [Hookable(false)]
    internal static Set findAllPreviousOperations(ProdId _prodId, OprNum _oprNum, boolean _includeCurrentOprNum = true)
    {
        boolean isDetectCycleInPrevOprFlightEnabled = ProdRouteDetectCycleInPreviousOperationsFlight::instance().isEnabled();
        
        void findAllOperationsBeforeCurrentOperation(Set _oprNumSet, OprNum _currentOprNum)
        {
            ProdRoute prevProdRoute;
            Set       allRelatedOprNum = new Set(_oprNumSet.typeId());

            while select ProdId, OprNum, OprNumNext from prevProdRoute
                    where prevProdRoute.ProdId      == _prodId
                       && prevProdRoute.OprPriority == RouteOprPriority::Primary
                       && prevProdRoute.OprNumNext  == _currentOprNum
            {
                if (_oprNumSet.in(prevProdRoute.OprNum) && isDetectCycleInPrevOprFlightEnabled)
                {
                    throw error(strFmt("@SCM:CycleInProdRoutesDetectedError", prevProdRoute.ProdId, prevProdRoute.OprNum, prevProdRoute.OprNumNext));
                }
                else
                {
                    allRelatedOprNum.add(prevProdRoute.OprNum);
                }
            }

            SetEnumerator seOprNum = allRelatedOprNum.getEnumerator();
            while (seOprNum.moveNext())
            {
                OprNum curOprNum = seOprNum.current();
                _oprNumSet.add(curOprNum);
                findAllOperationsBeforeCurrentOperation(_oprNumSet, curOprNum);
            }
        }

        // the initial operation
        Set oprNumSet = new Set(typeOf(_oprNum));

        if (_includeCurrentOprNum)
        {
            oprNumSet.add(_oprNum);
        }

        // find all operations that are before the initial operation
        findAllOperationsBeforeCurrentOperation(oprNumSet, _oprNum);

        return oprNumSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousOperationsForQuantityValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the previous operations for quantity validation.
    /// </summary>
    /// <param name="_prodId">
    /// The production order number.
    /// </param>
    /// <param name="_oprNum">
    /// The operation number.
    /// </param>
    /// <param name="_onlyPrimaryOperations">
    /// true if the list only should include primary operations; otherwise false.
    /// </param>
    /// <returns>
    /// A list of <c>ProdRoute</c> records with the previous operations for quantity validation.
    /// </returns>
    [Hookable(false)]
    internal static List getPreviousOperationsForQuantityValidation(
        ProdId  _prodId,
        OprNum  _oprNum,
        boolean _onlyPrimaryOperations)
    {
        boolean isStampLevelJob = JmgProdParameters::find().StampLevel == JmgStampLevel::Job;
        List previousOperationList = new List(Types::Record);

        ProdRoute prevOperation;
        while select prevOperation
               where prevOperation.ProdId      == _prodId
                  && prevOperation.OprNumNext  == _oprNum
                  && (prevOperation.OprPriority == RouteOprPriority::Primary || !_onlyPrimaryOperations)
        {
            if (isStampLevelJob)
            {
                if (ProdRouteJob::isOperationJobControlled(prevOperation.ProdId, prevOperation.OprNum))
                {
                    previousOperationList.addEnd(prevOperation);
                }
                else
                {
                    previousOperationList.appendList(ProdRoute::getPreviousOperationsForQuantityValidation(prevOperation.ProdId, prevOperation.OprNum, _onlyPrimaryOperations));
                }
            }
            else
            {
                previousOperationList.addEnd(prevOperation);
            }
        }

        return previousOperationList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFromDateTimeWithUserTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns from date and time of the production route with applied user's timezone offset
    /// </summary>
    /// <param name = "_prodRoute">The production route for which information is required</param>
    /// <returns>String conversion of from date and time of the production route with applied user's timezone offset</returns>
    [SysClientCacheDataMethod(true), Hookable(false)]
    internal display str displayFromDateTimeWithUserTimeZone(ProdRoute _prodRoute)
    {
        return ProdTimeZoneHelper::composeDateTimeWithUserTimeZone(_prodRoute.FromDate, _prodRoute.FromTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayToDateTimeWithUserTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns to date and time of the production route with applied user's timezone offset
    /// </summary>
    /// <param name = "_prodRoute">The production route for which information is required</param>
    /// <returns>String conversion of to date and time of the production route with applied user's timezone offset</returns>
    [SysClientCacheDataMethod(true), Hookable(false)]
    internal display str displayToDateTimeWithUserTimeZone(ProdRoute _prodRoute)
    {
        return ProdTimeZoneHelper::composeDateTimeWithUserTimeZone(_prodRoute.ToDate, _prodRoute.ToTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProdRouting</ConfigurationKey>
	<DeveloperDocumentation>@SYS124173</DeveloperDocumentation>
	<Label>@SYS23045</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>OprNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>NumOprNumIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProdCalcTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProdCalcTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProdRouteJob</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProdRouteJob</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProdRouteProj</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProdRouteProj</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrCapRes</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrCapRes</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrProdRouteActivity</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrProdRouteActivity</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OprNumNext</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SetupTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Formula</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SetUpCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedSetup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessPerQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SetupTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprFinished</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Balance</Name>
			<Label>@SYS101236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BackorderStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionCalculation</Name>
			<Label>@SYS22165</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Formula</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormulaFactor1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrIdCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostCategories</Name>
			<Label>@SYS13371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SetUpCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyCategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateScheduled</Name>
			<Label>@SYS22158</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Deleted</Name>
			<Label>@SYS4197</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Estimation</Name>
			<Label>@SYS16377</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcSetUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcProc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Finish</Name>
			<Label>@SYS22170</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OprStartedUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprFinished</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedSetup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedProcess</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobIdProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobIdSetup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Operation</Name>
			<Label>@SYS101237</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNumNext</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinkType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConstantReleased</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overlap</Name>
			<Label>@SYS6473</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferBatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverlapQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Piecework</Name>
			<Label>@sys711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JobPayType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QualityManagement</Name>
			<Label>@SYS113616</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Route</Name>
			<Label>@SYS4190</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteOprRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Times</Name>
			<Label>@SYS98438</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueueTimeBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SetupTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessPerQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TranspTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QueueTimeAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToHours</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkCenter</Name>
			<Label>@SYS10597</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayWrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayWrkCtrType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayWrkCtrName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>prodUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>prodUnitInputWarehouse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayWrkCtrNumOf</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayWrkCtrLoadPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateScheduledTimezone</Name>
			<Label>@SYS22158</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayFromDateTimeWithUserTimeZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayToDateTimeWithUserTimeZone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SetUpCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteCostCategoryIdSetup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccError</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteAccErrorPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BackorderStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdBackStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CalcProc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeProcess</ExtendedDataType>
			<Label>@SYS605</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CalcQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprQtyToOpr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CalcSetUp</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeSetup</ExtendedDataType>
			<Label>@SYS101240</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConstantReleased</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdConstantReleased</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ErrorPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteErrorPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExecutedProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdExecutedPctProcess</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExecutedSetup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdExecutedPctSetup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Formula</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@FieldDescriptions_ProductionControl:Route_ConsumptionCalculation_Formula_HelpText</HelpText>
			<EnumType>RouteFormula</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FormulaFactor1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteFormulaFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FromTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdShop</ConfigurationKey>
			<ExtendedDataType>SchedFromTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobIdProcess</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgJobId</ExtendedDataType>
			<Label>@SYS39110</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobIdSetup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgJobId</ExtendedDataType>
			<Label>@SYS39111</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobPayType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>JmgJobPayType</ExtendedDataType>
			<EnumType>JmgJobPayTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LinkType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SchedJobLinkType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OprFinished</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdFinishedOpr</ExtendedDataType>
			<Label>@SYS9576</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OprId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNumNext</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNumNext</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OprPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RouteOprPriority</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OprStartedUp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4695</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverlapQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprQtyOverlap</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PhantomBOMFactor</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Factor</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProcessCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteCostCategoryIdProcess</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProcessPerQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprQtyProcessNumOf</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProcessTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeProcess</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QtyCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteCostCategoryIdQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QueueTimeAfter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeQueueAfter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QueueTimeBefore</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeQueueBefore</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RouteOprRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RouteOprRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RouteType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RouteOprType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SetupTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeSetup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ToHours</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteHourFactor</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ToTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProdShop</ConfigurationKey>
			<ExtendedDataType>SchedToTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransferBatch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprQtyTransferBatch</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TranspTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprTimeTransport</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrIdCost</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrIdCost</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipJobCreation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumOprNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumNextIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprNumNext</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumRemainIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BackorderStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OperationIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>OprId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Processjobidx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JobIdProcess</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SetupJobidx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JobIdSetup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>RouteMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNumNext</MapField>
					<MapFieldTo>OprNumNext</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Level</MapField>
					<MapFieldTo>Level</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccError</MapField>
					<MapFieldTo>AccError</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprPriority</MapField>
					<MapFieldTo>OprPriority</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ErrorPct</MapField>
					<MapFieldTo>ErrorPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinkType</MapField>
					<MapFieldTo>LinkType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefId</MapField>
					<MapFieldTo>ProdId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PlanVersion</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobPayType</MapField>
					<MapFieldTo>JobPayType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>RouteOprMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QueueTimeBefore</MapField>
					<MapFieldTo>QueueTimeBefore</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SetupTime</MapField>
					<MapFieldTo>SetupTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProcessTime</MapField>
					<MapFieldTo>ProcessTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProcessPerQty</MapField>
					<MapFieldTo>ProcessPerQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TranspTime</MapField>
					<MapFieldTo>TranspTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QueueTimeAfter</MapField>
					<MapFieldTo>QueueTimeAfter</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverlapQty</MapField>
					<MapFieldTo>OverlapQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ToHours</MapField>
					<MapFieldTo>ToHours</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SetUpCategoryId</MapField>
					<MapFieldTo>SetUpCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProcessCategoryId</MapField>
					<MapFieldTo>ProcessCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyCategoryId</MapField>
					<MapFieldTo>QtyCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RouteType</MapField>
					<MapFieldTo>RouteType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PropertyId</MapField>
					<MapFieldTo>PropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RouteGroupId</MapField>
					<MapFieldTo>RouteGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FormulaFactor1</MapField>
					<MapFieldTo>FormulaFactor1</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Formula</MapField>
					<MapFieldTo>Formula</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransferBatch</MapField>
					<MapFieldTo>TransferBatch</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrIdCost</MapField>
					<MapFieldTo>WrkCtrIdCost</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CostResource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS301002</EntityRelationshipRole>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Resource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrIdCost</Name>
					<Field>WrkCtrIdCost</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProdRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventReq</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124174</EntityRelationshipRole>
			<RelatedTable>ReqTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NetRequirement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>RefType_Extern</Name>
					<RelatedField>RefType</RelatedField>
					<ValueStr>ReqRefType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>RefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdRoute</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS123434</EntityRelationshipRole>
			<RelatedTable>ProdRoute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionRoute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprNum</Name>
					<Field>OprNum</Field>
					<RelatedField>OprNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprPriority</Name>
					<Field>OprPriority</Field>
					<RelatedField>OprPriority</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdRouteProj</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS124175</EntityRelationshipRole>
			<RelatedTable>ProdRouteProj</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectProductionRoute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprPriority</Name>
					<Field>OprPriority</Field>
					<RelatedField>OprPriority</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprNum</Name>
					<Field>OprNum</Field>
					<RelatedField>OprNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123670</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionOrder</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>QuantityCostCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RouteCostCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>QuantityCostCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QtyCategoryId</Name>
					<SourceEDT>RouteCostCategoryIdQty</SourceEDT>
					<Field>QtyCategoryId</Field>
					<RelatedField>CostCategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdCategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteGroupId</Name>
					<Field>RouteGroupId</Field>
					<RelatedField>RouteGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RouteGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteOpr</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteOpr</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteOprRefRecId</Name>
					<Field>RouteOprRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteOprTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteOprTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprId</Name>
					<Field>OprId</Field>
					<RelatedField>OprId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OprIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RuntimeCostCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RouteCostCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RuntimeCostCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcessCategoryId</Name>
					<SourceEDT>RouteCostCategoryIdProcess</SourceEDT>
					<Field>ProcessCategoryId</Field>
					<RelatedField>CostCategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdCategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SetupCostCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RouteCostCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SetupCostCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProdRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SetUpCategoryId</Name>
					<SourceEDT>RouteCostCategoryIdSetup</SourceEDT>
					<Field>SetUpCategoryId</Field>
					<RelatedField>CostCategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdCategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PropertyId</Name>
					<Field>PropertyId</Field>
					<RelatedField>PropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PropertyIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DocuRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DocuRef</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RefRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>RefTableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>dataAreaId</Name>
					<Field>dataAreaId</Field>
					<RelatedField>RefCompanyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>