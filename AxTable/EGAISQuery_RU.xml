<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISQuery_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EGAISQuery_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the EGAIS document type corresponding to the current EGAIS query type.
    /// </summary>
    /// <returns>
    ///    The EGAIS document type corresponding to the EGAIS query type.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The EGAIS query type cannot be converted to the EGAIS document type.
    /// </exception>
    public EGAISDocumentType_RU documentType()
    {
        switch (this.QueryType)
        {
            case EGAISQueryType_RU::QueryClients:
                return EGAISDocumentType_RU::QueryClients;

            case EGAISQueryType_RU::QueryAP:
                return EGAISDocumentType_RU::QueryAP;

            case EGAISQueryType_RU::QueryRests:
                return EGAISDocumentType_RU::QueryRests;

            case EGAISQueryType_RU::QueryFormA:
                return EGAISDocumentType_RU::QueryFormA;

            case EGAISQueryType_RU::QueryFormB:
                return EGAISDocumentType_RU::QueryFormB;

            default:
                throw error(strfmt("@EGAIS:UnknownTypeOfQuery", this.QueryType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the current query has parameters which have to be included in the outgoing document.
    /// </summary>
    /// <returns>
    ///    true, if the current query has parameters which have to be included in the outgoing document; otherwise, false.
    /// </returns>
    public boolean hasParameters()
    {
        return this.QueryType == EGAISQueryType_RU::QueryClients
        || this.QueryType == EGAISQueryType_RU::QueryAP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.StatusIssue    = EGAISQueryStatusIssue_RU::Created;
        this.QueryType      = EGAISQueryType_RU::QueryClients;
        this.ParameterName  = EGAISQueryParameterName_RU::FSRARID;
        this.Version        = EGAISDocumentVersion_RU::Version2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EGAISQuery_RU, QueryType):
            switch (this.QueryType)
                {
                    case EGAISQueryType_RU::QueryClients:
                        this.ParameterName = EGAISQueryParameterName_RU::FSRARID;
                        break;

                    case EGAISQueryType_RU::QueryAP:
                        this.ParameterName = EGAISQueryParameterName_RU::AlcCode;
                        break;

                    case EGAISQueryType_RU::QueryRests:
                        this.ParameterName = EGAISQueryParameterName_RU::None;
                        this.ParameterValue = '';
                        break;

                    case EGAISQueryType_RU::QueryFormA,
                     EGAISQueryType_RU::QueryFormB:
                    this.ParameterName = EGAISQueryParameterName_RU::InformRegId;
                        break;

                    default:
                        this.ParameterName = EGAISQueryParameterName_RU::None;
                        break;
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret;
        TaxRegistration     taxRegistrationINN;
        TransDate           transDate;
        DirPartyLocation    dirPartyLocation;
        DirPartyView        dirPartyView;
        TaxRegistrationLegislationTypes legislationTypeINN;

        ret = super();

        if (this.ParameterName == EGAISQueryParameterName_RU::INN)
        {
            ret = CompanyInfoHelper::checkInn_RU(this.ParameterValue) && ret;

            if (ret)
            {
                transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

                select firstonly validTimeState(transDate) RecId, DirPartyLocation from taxRegistrationINN
                    where taxRegistrationINN.RegistrationNumber == this.ParameterValue
                join Party from dirPartyLocation
                    where dirPartyLocation.RecId == taxRegistrationINN.DirPartyLocation
                exists join dirPartyView
                    where dirPartyView.Party == dirPartyLocation.Party
                       && (   dirPartyView.RoleType == DirPartyRoleType::Customer
                           || dirPartyView.RoleType == DirPartyRoleType::Vendor)
                exists join legislationTypeINN
                    where legislationTypeINN.TaxRegistrationTypeApplicabilityRule == taxRegistrationINN.TaxRegistrationTypeApplicabilityRule
                       && legislationTypeINN.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN;

                if (!taxRegistrationINN.RecId)
                {
                    ret = checkFailed(strFmt("@EGAIS:ThereIsNoCustomerOrVendorWithInn", this.ParameterValue));
                }
            }
        }

        if (this.hasParameters())
        {
            if (this.ParameterName == EGAISQueryParameterName_RU::None)
            {
                ret = checkFailed(strFmt("@GLS103654", "@EGAIS:ParameterName"));
            }

            if (!this.ParameterValue)
            {
                ret = checkFailed(strFmt("@GLS103654", "@SYS131692"));
            }
        }

        if (   (this.QueryType == EGAISQueryType_RU::QueryClients  && this.ParameterName != EGAISQueryParameterName_RU::FSRARID && this.ParameterName != EGAISQueryParameterName_RU::INN)
        || (this.QueryType == EGAISQueryType_RU::QueryAP       && this.ParameterName != EGAISQueryParameterName_RU::AlcCode && this.ParameterName != EGAISQueryParameterName_RU::INN)
        || (this.QueryType == EGAISQueryType_RU::QueryRests    && this.ParameterName != EGAISQueryParameterName_RU::None)
        || (this.QueryType == EGAISQueryType_RU::QueryFormA    && this.ParameterName != EGAISQueryParameterName_RU::InformRegId)
        || (this.QueryType == EGAISQueryType_RU::QueryFormB    && this.ParameterName != EGAISQueryParameterName_RU::InformRegId))
        {
            ret = checkFailed("@EGAIS:WrongCombinationOfQueryTypeAndParameterName");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReplyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>EGAISQuery_RU</c> table for the specific EGAIS reply identifier.
    /// </summary>
    /// <param name="_replyId">
    ///    EGAIS reply identifier.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EGAISQuery_RU</c> table.
    /// </returns>
    public static EGAISQuery_RU findByReplyId(
    EGAISReplyId_RU _replyId,
    boolean         _forUpdate = false)
    {
        EGAISQuery_RU   query;

        if (_replyId)
        {
            if (_forUpdate)
            {
                query.selectForUpdate(_forUpdate);
            }

            select firstonly query
            index hint ReplyIdx
            where query.ReplyId == _replyId;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static EGAISQuery_RU findRecId(RecId      _recId,
                               boolean    _forUpdate = false)
    {
        EGAISQuery_RU   query;

        if (_recId)
        {
            query.selectForUpdate(_forUpdate);

            select firstonly query
            where query.RecId == _recId;
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@EGAIS:TheEgaisquery_ruTableContainsInformationAboutTheQu</DeveloperDocumentation>
	<FormRef>EGAISQuery_RU</FormRef>
	<Label>@EGAIS:EgaisQueries</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>QueryType</TitleField1>
	<TitleField2>StatusIssue</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>EGAIS</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParameterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParameterValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParameterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParameterValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EGAIS</Name>
			<Label>@EGAIS:Egais</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReplyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParameterName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParameterValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BranchId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>BranchId_RU</ExtendedDataType>
			<HelpText>@EGAIS:SeparateDivisionOnBehalfOfWhichTheRequestWillBeSen</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ParameterName</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>EGAISQueryParameterName_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParameterValue</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>EGAISQueryParameterValue_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QueryType</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>EGAISQueryType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReplyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>EGAISReplyId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatusIssue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>EGAISQueryStatusIssue_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Version</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>EGAISDocumentVersion_RU</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReplyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReplyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Branches_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Branches_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BranchId</Name>
					<Field>BranchId</Field>
					<RelatedField>BranchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>