<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementLineBankDocumentInformation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankStatementLineBankDocumentInformation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBankStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from a bank statement line.
    /// </summary>
    /// <param name="_statementLine">
    /// The bank statement line used to initialize.
    /// </param>
    public void initFromBankStatementLine(BankStmtISOReportEntry _statementLine)
    {
        BankStmtISOAccountStatement statement;

        statement = _statementLine.getStatement();

        this.BankStmtISOReportEntry = _statementLine.RecId;

        this.BankTransType = BankStatementTransactionTypeMapping::findByAccountAndTransCode(
            _statementLine.getAccountId(),
            _statementLine.ProprietaryBankTransactionCode).BankTransType;
        if (this.BankTransType)
        {
            this.OffsetLedgerDimension = BankTransType::find(this.BankTransType).LedgerDimension;
        }
        this.TransactionTxt                 = _statementLine.EntryReference;
        this.AccountingDistributionTemplate = statement.AccountingDistributionTemplate;
        this.DefaultDimension               = statement.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        //Remove tax uncommitted
        if (this.TaxItemGroup               != this.orig().TaxItemGroup
            ||  this.TaxGroup               != this.orig().TaxGroup
            ||  this.DefaultDimension       != this.orig().DefaultDimension
            ||  this.OffsetLedgerDimension  != this.orig().OffsetLedgerDimension
            ||  this.AccountingDistributionTemplate != this.orig().AccountingDistributionTemplate)
        {
            TaxUncommitted::deleteForDocumentLine(tableNum(BankStmtISOReportEntry), this.BankStmtISOReportEntry);
        }

        super();

        BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(this.BankStmtISOReportEntry);

        if (!statementLine.hasTax())
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(statementLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankStatementLineBankDocumentInformation</c> record that has a specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A currency model.
    /// </param>
    /// <returns>
    /// A <c>BankStatementLineBankDocumentInformation</c> record.
    /// </returns>
    public static BankStatementLineBankDocumentInformation find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankStatementLineBankDocumentInformation bankStatementLineBankDocumentInformation;

        bankStatementLineBankDocumentInformation.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankStatementLineBankDocumentInformation.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankStatementLineBankDocumentInformation
            where bankStatementLineBankDocumentInformation.RecId == _recId;

        return bankStatementLineBankDocumentInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReportEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankStatementLineBankDocumentInformation</c> record that has a specified record ID.
    /// </summary>
    /// <param name="_reportEntryId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A currency model.
    /// </param>
    /// <returns>
    /// A <c>BankStatementLineBankDocumentInformation</c> record.
    /// </returns>
    public static BankStatementLineBankDocumentInformation findByReportEntry(
        RefRecId            _reportEntryId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankStatementLineBankDocumentInformation bankStatementLineBankDocumentInformation;

        bankStatementLineBankDocumentInformation.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankStatementLineBankDocumentInformation.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankStatementLineBankDocumentInformation
            where bankStatementLineBankDocumentInformation.BankStmtISOReportEntry == _reportEntryId;

        return bankStatementLineBankDocumentInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineBankDocumentInformationByTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BankStatementLineBankDocumentInformation</c> record with <c>BankStatementLinePostInformationTmp</c>.
    /// </summary>
    /// <param name="_lineInfoTmp">The tmp table buffer obtaining the posting information.</param>
    internal void updateLineBankDocumentInformationByTmp(BankStatementLinePostInformationTmp _lineInfoTmp)
    {
        ttsBegin;
        if (_lineInfoTmp)
        {
            this.selectForUpdate(true);
            this.AccountingDistributionTemplate = _lineInfoTmp.AccountingDistributionTemplate;
            this.BankTransType = _lineInfoTmp.BankTransType;
            this.DefaultDimension = _lineInfoTmp.DefaultDimension;
            this.OffsetLedgerDimension = _lineInfoTmp.OffsetLedgerDimension;
            this.TaxGroup = _lineInfoTmp.TaxGroup;
            this.TaxItemGroup = _lineInfoTmp.TaxItemGroup;
            this.TransactionTxt = _lineInfoTmp.TransactionTxt;
            this.FinTag = _lineInfoTmp.FinTag;
            this.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineBankDocumentInformationByTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates statement line bank document information by tmp table.
    /// </summary>
    /// <param name="_statementLineRecId">The RecId of statement line that to be created posting info to.</param>
    /// <param name="_tmpInfo">The tmp record that contains the line bank document information.</param>
    /// <returns> The record of statement line bank document information.</returns>
    internal static BankStatementLineBankDocumentInformation createLineBankDocumentInformationByTmp(RecId _statementLineRecId, BankStatementLinePostInformationTmp _tmpInfo)
    {
        BankStatementLineBankDocumentInformation bankStatementLineBankDocInformation = BankStatementLineBankDocumentInformation::findByReportEntry(_statementLineRecId);
        if (bankStatementLineBankDocInformation.RecId)
        {
            throw error("@Bank:StatementLineCannotSelectedForVoucherPostingError");
        }
        bankStatementLineBankDocInformation.BankStmtISOReportEntry = _statementLineRecId;
        bankStatementLineBankDocInformation.AccountingDistributionTemplate = _tmpInfo.AccountingDistributionTemplate;
        bankStatementLineBankDocInformation.BankTransType = _tmpInfo.BankTransType;
        bankStatementLineBankDocInformation.DefaultDimension = _tmpInfo.DefaultDimension;
        bankStatementLineBankDocInformation.OffsetLedgerDimension = _tmpInfo.OffsetLedgerDimension;
        bankStatementLineBankDocInformation.TaxGroup = _tmpInfo.TaxGroup;
        bankStatementLineBankDocInformation.TaxItemGroup = _tmpInfo.TaxItemGroup;
        bankStatementLineBankDocInformation.TransactionTxt = _tmpInfo.TransactionTxt;
        bankStatementLineBankDocInformation.FinTag = _tmpInfo.FinTag;
        bankStatementLineBankDocInformation.insert();
        return bankStatementLineBankDocInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineBankDocumentInformationByMatchRulePostingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates statement line bank document information by match rule posting info.
    /// </summary>
    /// <param name="_statementLineRecId">The RecId of statement line that to be created posting info to.</param>
    /// <param name="_matchRulePostingInfo">The related posting info that contains the line bank document information.</param>
    /// <returns> The record of statement line bank document information.</returns>
    internal static BankStatementLineBankDocumentInformation createLineBankDocumentInformationByMatchRulePostingInfo(RecId _statementLineRecId, BankReconciliationMatchRule_PostingInfo _matchRulePostingInfo)
    {
        ttsbegin;

        BankStatementLineBankDocumentInformation bankStatementLineBankDocInformation = BankStatementLineBankDocumentInformation::findByReportEntry(_statementLineRecId, true);
        if (!bankStatementLineBankDocInformation.RecId)
        {
            bankStatementLineBankDocInformation.BankStmtISOReportEntry = _statementLineRecId;
        }
        bankStatementLineBankDocInformation.BankTransType = _matchRulePostingInfo.BankTransType;
        bankStatementLineBankDocInformation.DefaultDimension = _matchRulePostingInfo.DefaultDimension;
        bankStatementLineBankDocInformation.OffsetLedgerDimension = _matchRulePostingInfo.OffsetLedgerDimension;
        bankStatementLineBankDocInformation.TaxGroup = _matchRulePostingInfo.TaxGroup;
        bankStatementLineBankDocInformation.TaxItemGroup = _matchRulePostingInfo.TaxItemGroup;
        bankStatementLineBankDocInformation.TransactionTxt = _matchRulePostingInfo.TransactionTxt;
        bankStatementLineBankDocInformation.AccountingDistributionTemplate = _matchRulePostingInfo.AccountingDistributionTemplate;
        bankStatementLineBankDocInformation.write();

        ttscommit;

        return bankStatementLineBankDocInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLineBankDocumentInformationByStatementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the statement line bank document information.
    /// </summary>
    /// <param name="_statementLine">The statement line that to be deleted its line posting info.</param>
    internal static void deleteLineBankDocumentInformationByStatementLine(BankStmtISOReportEntry _statementLine)
    {
        if (!_statementLine.allowUpdatePostingInfo())
        {
            throw error("@Bank:StatementLineCannotUpdateError");
        }
        ttsbegin;
        BankStatementLineBankDocumentInformation bankStatementLineBankDocInformation = BankStatementLineBankDocumentInformation::findByReportEntry(_statementLine.RecId, true);
        if (bankStatementLineBankDocInformation.RecId)
        {
            bankStatementLineBankDocInformation.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS221277</DeveloperDocumentation>
	<Label>@GLS221274</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>BankTransType</TitleField1>
	<TitleField2>TransactionTxt</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bank</Name>
			<Label>@SYS7439</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankTransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS110288</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax</Name>
			<Label>@SYS333961</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransactionDetail</Name>
			<Label>@GLS221275</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankStmtISOReportEntry</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankTransactionType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Label>@GLS221276</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionTxt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankStmtLineTransactionTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankStmtISOReportEntryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankStmtISOReportEntry</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankStmtISOReportEntry</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankStmtISOReportEntry</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankStmtISOReportEntry</Name>
					<Field>BankStmtISOReportEntry</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankTransactionType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankTransType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankTransType</Name>
					<Field>BankTransType</Field>
					<RelatedField>BankTransType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransType</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankStatementLineBankDocumentInformation_FinTag</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>