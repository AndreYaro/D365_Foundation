<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SIGProdStatusChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SIGProdStatusChange extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the status change record with a production order record.
    /// </summary>
    /// <param name="_prodTable">
    ///    The <c>ProdTable</c> record to use to initialize this record.
    /// </param>
    /// <param name="_newStatus">
    ///    The status to set.
    /// </param>
    public void initProdTable(ProdTable _prodTable, ProdStatus _newStatus = 0)
    {
        this.ProdId = _prodTable.ProdId;
        this.ItemId = _prodTable.ItemId;
        if (prmisdefault(_newStatus))
        {
            this.PreviousStatus = _prodTable.orig().ProdStatus;
            this.NewStatus = _prodTable.ProdStatus;
            this.packProdTable(_prodTable.orig());
        }
        else
        {
            this.PreviousStatus = _prodTable.ProdStatus;
            this.NewStatus = _newStatus;
            this.packProdTable(_prodTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdTable</c> record into the <c>OrigProdTable</c> field.
    /// </summary>
    /// <param name="_prodTable">
    ///    The <c>ProdTable</c> record to pack.
    /// </param>
    public void packProdTable(ProdTable _prodTable)
    {
        SysDictTable    dictTable = new SysDictTable(tablenum(ProdTable));
        DictField       dictField;
        fieldId         fieldId;
        int             i;

        this.OrigProdTable = connull();
        for (i = 1; i <= dictTable.fieldCnt(); i++)
        {
            fieldId = dictTable.fieldCnt2Id(i);
            if (fieldId)
            {
                dictField = new SysDictField(dictTable.id(),fieldId);
                if (!dictField.isSystem())
                {
                    this.OrigProdTable += [[fieldId,_prodTable.(fieldId)]];
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <c>ProdTable</c> record from the <c>OrigProdTable</c> field.
    /// </summary>
    /// <returns>
    ///    The restored <c>ProdTable</c> record.
    /// </returns>
    public ProdTable unpackProdTable()
    {
        #define.FieldIdIdx(1)
        #define.FieldValueIdx(2)

        ProdTable   prodTable;
        container   field;
        int         i;

        for (i = 1; i <= conlen(this.OrigProdTable); i++)
        {
            field = conpeek(this.OrigProdTable,i);
            prodTable.(conpeek(field,#FieldIdIdx)) = conpeek(field,#FieldValueIdx);
        }

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>SIGProdStatusChange</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    True if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is part of the standard table signature and is required by best practice rules.
    /// </remarks>
    public static boolean exist(RefRecId _recId)
    {
        return _recId
               && (select sigProdStatusChange
                       where sigProdStatusChange.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SIGProdStatusChange</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>SIGProdStatusChange</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    This method is part of the standard table signature and is required by best practice rules.
    /// </remarks>
    public static SIGProdStatusChange find(
        RefRecId    _recId,
        boolean     _forUpdate = false)
    {
        SIGProdStatusChange change;

        if (!prmisdefault(_forUpdate))
        {
            change.selectForUpdate(_forUpdate);
        }

        select firstonly change
            where change.RecId == _recId;

        return change;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SIG</ConfigurationKey>
	<DeveloperDocumentation>@SYS330965</DeveloperDocumentation>
	<Label>@SYS138151</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>NewStatus</TitleField2>
	<AosAuthorization>UpdateDelete</AosAuthorization>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>SystemAdministration</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviousStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProdTable</Name>
			<Label>@SYS89639</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigProdTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StatusChange</Name>
			<Label>@SYS138156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PreviousStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NewStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS138152</Label>
			<EnumType>ProdStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>OrigProdTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SIGPackedProdTable</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PreviousStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS138153</Label>
			<EnumType>ProdStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<ExtendedDataType>ProdId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SIGProdStatusChange</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProdTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SIGProdStatusChange</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<SourceEDT>ProdId</SourceEDT>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>