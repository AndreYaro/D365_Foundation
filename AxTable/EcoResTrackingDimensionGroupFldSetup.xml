<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResTrackingDimensionGroupFldSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResTrackingDimensionGroupFldSetup extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditAllowBlankIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsAllowBlankIssueEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <param name="_trackingDimensionGroup">
    ///    An <c>EcoResTrackingDimensionGroup</c> table buffer.
    /// </param>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditAllowBlankIssue(EcoResTrackingDimensionGroup _trackingDimensionGroup = null)
    {
        if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU))
        {
            return false;
        }
        if (this.IsPrimaryStockingEnabled || this.IsFinancialInventoryEnabled)
        {
            return false;
        }
        if (this.DimensionFieldId == fieldNum(InventDim, InventSerialId) && _trackingDimensionGroup.CaptureSerial != WHSWhenToCapture::None)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditAllowBlankReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsAllowBlankReceiptEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <param name="_trackingDimensionGroup">
    ///    An <c>EcoResTrackingDimensionGroup</c> table buffer.
    /// </param>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditAllowBlankReceipt(EcoResTrackingDimensionGroup _trackingDimensionGroup = null)
    {
        if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU))
        {
            return false;
        }
        if (this.IsPrimaryStockingEnabled || this.IsFinancialInventoryEnabled || this.IsSalesProcessActivated)
        {
            return false;
        }
        if (this.DimensionFieldId == fieldNum(InventDim, InventSerialId) && _trackingDimensionGroup.CaptureSerial != WHSWhenToCapture::None)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCoveragePlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsCoveragePlanByDimensionEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditCoveragePlan()
    {
        if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU) && !this.isInventoryProfileActive())
        {
            return false;
        }

        return !this.IsSalesProcessActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditFinancialInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsFinancialInventoryEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditFinancialInvent()
    {
        if (this.IsSalesProcessActivated)
        {
            return false;
        }

        if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU) && !this.isInventoryProfileActive())
        {
            return false;
        }

        // <GEERU>
        return this.DimensionFieldId != fieldNum(InventDim, InventProfileId_RU);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditPhysicalInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>PhysicalInvent</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditPhysicalInvent()
    {
        // <GEERU>
        if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU))
        {
            return false;
        }
        // </GEERU>
        return !(this.IsPrimaryStockingEnabled || this.IsSalesProcessActivated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditPrimaryStocking_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsPrimaryStockingEnabled</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditPrimaryStocking_RU()
    {
        if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU) && !this.isInventoryProfileActive())
        {
            return false;
        }

        return (!(this.DimensionFieldId == fieldNum(InventDim, InventProfileId_RU)) &&
                !this.IsSalesProcessActivated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditPurchPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>PurchasePrice</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditPurchPrice()
    {
        if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU) && !this.isInventoryProfileActive())
        {
            return false;
        }

        return !this.IsSalesProcessActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>SalesPrice</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditSalesPrice()
    {
        if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU) && !this.isInventoryProfileActive())
        {
            return false;
        }

        return !this.IsSalesProcessActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditSalesProcessActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsSalesProcessActivated</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditSalesProcessActivated()
    {
        return (this.DimensionFieldId == fieldNum(InventDim, InventSerialId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditTransfer_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>Transfer</c> field can be edited for a dimension.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditTransfer_RU()
    {
        return !this.IsSalesProcessActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedActiveDimensions_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsActive</c> field is correctly set up for related dimensions.
    /// </summary>
    /// <returns>
    ///    true if the setup complies to the rules; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that the active Owner dimension has an active Inventory profile dimension.
    /// </remarks>
    public boolean checkRelatedActiveDimensions_RU()
    {
        EcoResTrackingDimensionGroupFldSetup    dimSetupRequired;
        EcoResTrackingDimensionGroupFldSetup    dimSetupRelated;
        List                                    listDimRules = new List(Types::Container);
        ListEnumerator                          leDimRules;
        int                                     dimField;
        int                                     dimFieldRequired;

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return true;
        }

        // active Owner requires active Profile
        listDimRules.addEnd([fieldNum(InventDim, InventOwnerId_RU), fieldNum(InventDim, InventProfileId_RU)]);

        leDimRules = listDimRules.getEnumerator();

        while (leDimRules.moveNext())
        {
            [dimField, dimFieldRequired] = leDimRules.current();

            if (this.IsActive && this.DimensionFieldId == dimField)
            {
                dimSetupRequired = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.TrackingDimensionGroup, dimFieldRequired);
                if (dimSetupRequired.RecId && ! dimSetupRequired.IsActive)
                {
                    return checkFailed(strFmt("@SYS98482", this.fieldName(), dimSetupRequired.fieldName()));
                }
            }

            if (! this.IsActive && this.DimensionFieldId == dimFieldRequired)
            {
                dimSetupRelated = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.TrackingDimensionGroup, dimField);
                if (dimSetupRelated.RecId && dimSetupRelated.IsActive)
                {
                    return checkFailed(strFmt("@SYS98483", this.fieldName(), dimSetupRelated.fieldName()));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes a record and calls a method to flush the cache.
    /// </summary>
    public void delete()
    {
        ttsbegin;

        super();
        EcoResStorageDimGroupSetupCache::clearCache();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a display name for a dimension.
    /// </summary>
    /// <returns>
    ///    A string that contains the display name of a dimension.
    /// </returns>
    display EcoResProductDimensionName fieldName()
    {
        DictField                   dictField;

        if (!this.RecId)
        {
            return '';
        }

        dictField               = new DictField(tableNum(InventDim), this.DimensionFieldId);

        if (!dictField.configurationKeyId() || isConfigurationkeyEnabled(dictField.configurationKeyId()))
        {
            return fieldId2pname(tableNum(InventDim), this.DimensionFieldId);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTrackingDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the buffer from an <c>EcoResTrackingDimensionGroup</c> table buffer.
    /// </summary>
    /// <param name="_trackingDimensionGroup">
    ///    An <c>EcoResTrackingDimensionGroup</c> table buffer.
    /// </param>
    public void initFromTrackingDimensionGroup(EcoResTrackingDimensionGroup _trackingDimensionGroup)
    {
        this.TrackingDimensionGroup = _trackingDimensionGroup.RecId;

        if (this.DimensionFieldId == fieldNum(InventDim, InventSerialId) && _trackingDimensionGroup.CaptureSerial != WHSWhenToCapture::None)
        {
            this.IsAllowBlankIssueEnabled = NoYes::Yes;

            if (!this.IsSalesProcessActivated)
            {
                this.IsAllowBlankReceiptEnabled = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the buffer with default values.
    /// </summary>
    /// <remarks>
    ///    The <c>DimensionFieldId</c> field should be set before calling this method.
    /// </remarks>
    public void initValue()
    {
        this.IsAllowBlankReceiptEnabled         = NoYes::No;
        this.IsAllowBlankIssueEnabled           = NoYes::No;

        //Set default values for the inventory profile dimension
        if (this.DimensionFieldId == fieldNum(InventDim, InventProfileId_RU))
        {
            this.IsPrimaryStockingEnabled       = NoYes::Yes;
            this.IsFinancialInventoryEnabled    = NoYes::Yes;
            this.IsPhysicalInventoryEnabled     = NoYes::Yes;
            this.IsInheritInventTransfer_RU     = NoYes::Yes;
        }
        //Set default values for the inventory owner dimension
        else if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU))
        {
            this.IsFinancialInventoryEnabled    = NoYes::Yes;
            this.IsPhysicalInventoryEnabled     = NoYes::Yes;
            this.IsInheritInventTransfer_RU     = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record and calls a method to flush the cache.
    /// </summary>
    public void insert()
    {
        ttsbegin;

        super();

        this.updateTrackingDimensionGroup(null);

        EcoResTrackingDimGroupSetupCache::clearCache();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EcoResStorageDimensionGroupFldSetup, IsActive):
             // <GEERU>
                if (!this.checkRelatedActiveDimensions_RU())
                {
                    this.IsActive = this.orig().IsActive;
                }
            // </GEERU>
                break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPhysicalInventoryEnabled):
                if (this.IsFinancialInventoryEnabled && !this.IsPhysicalInventoryEnabled)
                {
                    this.IsPhysicalInventoryEnabled = NoYes::Yes;
                }
                break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsAllowBlankIssueEnabled):
                if (this.IsAllowBlankIssueEnabled && this.IsFinancialInventoryEnabled)
                {
                    this.IsAllowBlankIssueEnabled = NoYes::No;
                }
                break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsAllowBlankReceiptEnabled):
                if (this.IsAllowBlankReceiptEnabled && this.IsFinancialInventoryEnabled)
                {
                    this.IsAllowBlankReceiptEnabled = NoYes::No;
                }
            case fieldNum(EcoResTrackingDimensionGroupFldSetup,IsSalesProcessActivated):
                if (this.IsSalesProcessActivated)
                {
                    this.IsInheritInventTransfer_RU = NoYes::No;
                }
                break;
        }

        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a record and calls a method to flush the cache.
    /// </summary>
    public void update()
    {
        EcoResTrackingDimensionGroupFldSetup orig = this.orig();

        super();

        this.updateTrackingDimensionGroup(orig);

        EcoResTrackingDimGroupSetupCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrackingDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tracking dimension group.
    /// </summary>
    /// <param name="_orig">
    ///    Original value of the record.
    /// </param>
    private void updateTrackingDimensionGroup(EcoResTrackingDimensionGroupFldSetup _orig)
    {
        EcoResTrackingDimensionGroup ecoResTrackingDimensionGroup;

        if (this.IsSalesProcessActivated && ! _orig.IsSalesProcessActivated)
        {
            //Ensure parent row has IsSerialNumberControlEnabled set to true and CaptureSerial set to 'None'
            ecoResTrackingDimensionGroup = EcoResTrackingDimensionGroup::find(this.TrackingDimensionGroup, NoYes::Yes);
            if (ecoResTrackingDimensionGroup &&
                (ecoResTrackingDimensionGroup.IsSerialNumberControlEnabled != NoYes::Yes ||
                 ecoResTrackingDimensionGroup.CaptureSerial != WHSWhenToCapture::None))
            {
                ecoResTrackingDimensionGroup.IsSerialNumberControlEnabled = NoYes::Yes;
                ecoResTrackingDimensionGroup.CaptureSerial = WHSWhenToCapture::None;
                ecoResTrackingDimensionGroup.IsSerialAtConsumptionEnabled = NoYes::No;
                ecoResTrackingDimensionGroup.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a specific tracking dimension is active.
    /// </summary>
    /// <param name = "_dimensionFieldId">
    ///    Tracking dimension field ID.
    /// </param>
    /// <returns>true if the dimension field is active; otherwise, false.</returns>
    public boolean isDimensionActive(FieldId _dimensionFieldId)
    {
        EcoResTrackingDimensionGroupFldSetup fieldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.TrackingDimensionGroup, _dimensionFieldId);

        return fieldSetup.IsActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchOrSerialDimensionActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if serial number or batch number tracking dimension is active.
    /// </summary>
    /// <returns>true if serial number or batch number tracking dimension is active; otherwise, false.</returns>
    public boolean isBatchOrSerialDimensionActive()
    {
        return this.isDimensionActive(fieldNum(InventDim, InventSerialId))
            || this.isDimensionActive(fieldNum(InventDim, InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryOwnerActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory owner tracking dimension is active on the current tracking dimension group.
    /// </summary>
    /// <returns>true if the inventory owner tracking dimension is active; otherwise, false.</returns>
    public boolean isInventoryOwnerActive()
    {
        return this.isDimensionActive(fieldNum(InventDim, InventOwnerId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        EcoResTrackingDimensionGroupItem    trackingDimGroupItem;
        EcoResTrackingDimensionGroupProduct trackingDimGroupProduct;
        EcoResStorageDimensionGroupItem     storageDimGroupItem;
        EcoResStorageDimensionGroupProduct  storageDimGroupProduct;
        EcoResStorageDimensionGroup         storageDimensionGroup;

        boolean isTrackingDimGroupWHSItem()
        {
            select firstonly RecId from trackingDimGroupItem
                where trackingDimGroupItem.TrackingDimensionGroup == this.TrackingDimensionGroup
                exists join storageDimGroupItem
                    where storageDimGroupItem.ItemId == trackingDimGroupItem.ItemId
                    exists join storageDimensionGroup
                        where storageDimensionGroup.RecId                   == storageDimGroupItem.StorageDimensionGroup
                        &&    storageDimensionGroup.IsWarehouseWHSEnabled   == NoYes::Yes;

            return trackingDimGroupItem.RecId != 0;
        }

        boolean isTrackingDimGroupWHSProduct()
        {
            select firstonly RecId from trackingDimGroupProduct
                where trackingDimGroupProduct.TrackingDimensionGroup == this.TrackingDimensionGroup
                exists join storageDimGroupProduct
                    where storageDimGroupProduct.Product == trackingDimGroupProduct.Product
                    exists join storageDimensionGroup
                        where storageDimensionGroup.RecId                   == storageDimGroupProduct.StorageDimensionGroup
                        &&    storageDimensionGroup.IsWarehouseWHSEnabled   == NoYes::Yes;

            return trackingDimGroupProduct.RecId != 0;
        }

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (fieldExt2Id(_fieldIdToCheck))
            {
                case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsAllowBlankIssueEnabled):
                    if (this.IsAllowBlankIssueEnabled)
                    {
                        if (!WHSInvent::whsIsBlankIssueReceiptAllowed(this.DimensionFieldId))
                        {
                            if (isTrackingDimGroupWHSItem())
                            {
                                ret = checkFailed(strFmt("@WAX5657", this.fieldName()));
                            }

                            if (ret)
                            {
                                if (isTrackingDimGroupWHSProduct())
                                {
                                    ret = checkFailed(strFmt("@WAX5657", this.fieldName()));
                                }
                            }
                        }
                    }
                    break;
                case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsAllowBlankReceiptEnabled):
                    if (this.IsAllowBlankReceiptEnabled)
                    {
                        if (!WHSInvent::whsIsBlankIssueReceiptAllowed(this.DimensionFieldId))
                        {
                            if (isTrackingDimGroupWHSItem())
                            {
                                ret = checkFailed(strFmt("@WAX5657", this.fieldName()));
                            }

                            if (ret)
                            {
                                if (isTrackingDimGroupWHSProduct())
                                {
                                    ret = checkFailed(strFmt("@WAX5657", this.fieldName()));
                                }
                            }
                        }
                    }
                    break;
                case fieldNum (EcoResTrackingDimensionGroupFldSetup, IsPhysicalInventoryEnabled):
                    if (!this.IsPhysicalInventoryEnabled)
                    {
                        if (isTrackingDimGroupWHSItem())
                        {
                            ret = checkFailed("@WAX5384");
                        }

                        if (ret)
                        {
                            if (isTrackingDimGroupWHSProduct())
                            {
                                ret = checkFailed("@WAX5384");
                            }
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                                 ret;
        EcoResTrackingDimensionGroupFldSetup    origDimFieldSetup = this.orig();

        if (this.RecId
            && (   this.IsAllowBlankReceiptEnabled  != origDimFieldSetup.IsAllowBlankReceiptEnabled
                || this.IsAllowBlankIssueEnabled    != origDimFieldSetup.IsAllowBlankIssueEnabled
                || this.IsActive                    != origDimFieldSetup.IsActive
                || this.IsFinancialInventoryEnabled != origDimFieldSetup.IsFinancialInventoryEnabled
                || this.IsPhysicalInventoryEnabled  != origDimFieldSetup.IsPhysicalInventoryEnabled
                || this.IsPrimaryStockingEnabled    != origDimFieldSetup.IsPrimaryStockingEnabled))
        {
            // record changed -> consistency check is not entering
            if (EcoResTrackingDimensionGroup::find(this.TrackingDimensionGroup).isUsedByItemWithTransactions())
            {
                this.data(origDimFieldSetup);
                return checkFailed("@SYS97796");
            }
        }

        ret = this.validateWriteInventoryOwnerUsage();

        if (!ret)
        {
            return ret;
        }

        ret = super();

        if (ret && this.IsSalesProcessActivated)
        {
            if (EcoResProductInventoryDimensionGroups::doesCWItemExistForTrackingDimensionGroup(this.TrackingDimensionGroup))
            {
                error("@SYS4050062");
                ret = false;
            }
        }

        ret = ret && this.checkFieldConstraint(this.IsActive, this.IsSalesProcessActivated, NoYes::No, "@SYS14584", "@SYS4050060");
        ret = ret && this.checkFieldConstraint(this.IsSalesProcessActivated, this.IsActive, NoYes::No, "@SYS4050060", "@SYS14584");

        ret = ret && this.checkFieldConstraint(this.IsPrimaryStockingEnabled, this.IsAllowBlankIssueEnabled, NoYes::No, "@SYS54751", "@SYS70095");
        ret = ret && this.checkFieldConstraint(this.IsFinancialInventoryEnabled, this.IsAllowBlankIssueEnabled, NoYes::No, "@SYS54438", "@SYS70095");

        ret = ret && this.checkFieldConstraint(this.IsSalesProcessActivated, this.IsAllowBlankReceiptEnabled, NoYes::No, "@SYS4050060", "@SYS70096");
        ret = ret && this.checkFieldConstraint(this.IsPrimaryStockingEnabled, this.IsAllowBlankReceiptEnabled, NoYes::No, "@SYS54751", "@SYS70096");
        ret = ret && this.checkFieldConstraint(this.IsFinancialInventoryEnabled, this.IsAllowBlankReceiptEnabled, NoYes::No, "@SYS54438", "@SYS70096");

        ret = ret && this.checkFieldConstraint(this.IsSalesProcessActivated, this.IsCoveragePlanByDimensionEnabled, NoYes::No, "@SYS4050060", "@SYS68834");

        ret = ret && this.checkFieldConstraint(this.IsSalesProcessActivated, this.IsFinancialInventoryEnabled, NoYes::No, "@SYS4050060", "@SYS54438");

        ret = ret && this.checkFieldConstraint(this.IsSalesProcessActivated, this.IsPhysicalInventoryEnabled, NoYes::No, "@SYS4050060", "@SYS23942");
        ret = ret && this.checkFieldConstraint(this.IsPrimaryStockingEnabled, this.IsPhysicalInventoryEnabled, NoYes::Yes, "@SYS54751", "@SYS23942");

        ret = ret && this.checkFieldConstraint(this.IsSalesProcessActivated, this.IsPrimaryStockingEnabled, NoYes::No, "@SYS4050060", "@SYS54751");

        ret = ret && this.checkFieldConstraint(this.IsSalesProcessActivated, this.IsPurchPriceSearchEnabled, NoYes::No, "@SYS4050060", "@SYS70101");

        ret = ret && this.checkFieldConstraint(this.IsSalesProcessActivated, this.IsSalesPriceSearchEnabled, NoYes::No, "@SYS4050060", "@SYS70103");

        if (this.DimensionFieldId == fieldNum(InventDim, InventProfileId_RU))
        {
            ret = ret && this.checkFieldConstraint(this.IsActive, this.IsCoveragePlanByDimensionEnabled, NoYes::Yes, "@SYS14584", "@SYS68834");
        }

        // The form may have unsaved data in the parent DS buffer, failing this validation. In that case, validateWrite will be called separately on that DS.
        if (this.DimensionFieldId == fieldNum(InventDim,InventSerialId) && !FormDataUtil::getFormDataSource(this))
        {
            EcoResTrackingDimensionGroup trackingDimensionGroup = EcoResTrackingDimensionGroup::find(this.TrackingDimensionGroup);

            NoYes captureSerialSet = trackingDimensionGroup.CaptureSerial == WHSWhenToCapture::None ? NoYes::No : NoYes::Yes;

            ret = ret && this.checkFieldConstraint(captureSerialSet, this.IsAllowBlankIssueEnabled, NoYes::Yes, "@WAX2098", "@SYS70095");

            NoYes allowBlankReceiptEnabledExpected = this.IsSalesProcessActivated ? NoYes::No : NoYes::Yes;
            ret = ret && this.checkFieldConstraint(captureSerialSet, this.IsAllowBlankReceiptEnabled, allowBlankReceiptEnabledExpected, "@WAX2098", "@SYS70096");

            ret = ret && this.checkFieldConstraint(this.IsSalesProcessActivated, trackingDimensionGroup.IsSerialNumberControlEnabled, NoYes::Yes, "@SYS4050060", "@SYS68709");
        }

        if (this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU) && this.IsActive && !this.isInventoryProfileActive())
        {
            ret = ret & this.checkMandatoryFlagValue(fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPhysicalInventoryEnabled), NoYes::Yes);
            ret = ret & this.checkMandatoryFlagValue(fieldNum(EcoResTrackingDimensionGroupFldSetup, IsFinancialInventoryEnabled), NoYes::Yes);
            ret = ret & this.checkMandatoryFlagValue(fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPrimaryStockingEnabled), NoYes::No);
            ret = ret & this.checkMandatoryFlagValue(fieldNum(EcoResTrackingDimensionGroupFldSetup, IsCoveragePlanByDimensionEnabled), NoYes::No);
            ret = ret & this.checkMandatoryFlagValue(fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPurchPriceSearchEnabled), NoYes::No);
            ret = ret & this.checkMandatoryFlagValue(fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesPriceSearchEnabled), NoYes::No);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteInventoryOwnerUsage</Name>
				<Source><![CDATA[
    private boolean validateWriteInventoryOwnerUsage()
    {
        boolean ret = true;

        ret = ret && this.validateWriteNoCatchWeightOwnerItem();
        ret = ret && this.validateWriteNoBatchOrSerialOwnerItem();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteNoCatchWeightOwnerItem</Name>
				<Source><![CDATA[
    private boolean validateWriteNoCatchWeightOwnerItem()
    {
        boolean ret = true;

        if (!this.orig().IsActive && this.IsActive
            && this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU))
        {
            var trackingDimGroup = this.trackingDimensionGroup();

            if (trackingDimGroup.isUsedByCatchWeightItemInNonRussianCompany())
            {
                this.data(this.orig());
                ret = checkFailed(strFmt("@Consignment:MessageValidation_ActiveOwnerTrackingDimensionGroup_CW", trackingDimGroup.Name));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteNoBatchOrSerialOwnerItem</Name>
				<Source><![CDATA[
    private boolean validateWriteNoBatchOrSerialOwnerItem()
    {
        boolean ret = true;

        ret = ret && this.validateWriteBatchOrSerialActivatedNoOwnerItem();
        ret = ret && this.validateWriteInventoryOwnerActivatedNoBatchOrSerialItem();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteBatchOrSerialActivatedNoOwnerItem</Name>
				<Source><![CDATA[
    private boolean validateWriteBatchOrSerialActivatedNoOwnerItem()
    {
        boolean ret = true;

        if (!this.orig().IsActive && this.IsActive
            && (this.DimensionFieldId == fieldNum(InventDim, InventBatchId) || this.DimensionFieldId == fieldNum(InventDim, InventSerialId))
            && this.isInventoryOwnerActive() && this.trackingDimensionGroup().isUsedByItemInNonRussianCompany())
        {
            this.data(this.orig());
            ret = checkFailed("@Consignment:MessageValidation_TrackingDimensionGroup_ActiveDimensions");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteInventoryOwnerActivatedNoBatchOrSerialItem</Name>
				<Source><![CDATA[
    private boolean validateWriteInventoryOwnerActivatedNoBatchOrSerialItem()
    {
        boolean ret = true;

        if (!this.orig().IsActive && this.IsActive
            && this.DimensionFieldId == fieldNum(InventDim, InventOwnerId_RU)
            && this.isBatchOrSerialDimensionActive() && this.trackingDimensionGroup().isUsedByItemInNonRussianCompany())
        {
            this.data(this.orig());
            ret = checkFailed("@Consignment:MessageValidation_TrackingDimensionGroup_ActiveDimensions");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMandatoryFlagValue</Name>
				<Source><![CDATA[
    private boolean checkMandatoryFlagValue(FieldId _fieldId, NoYes _mandatoryValue)
    {
        if (_mandatoryValue != this.(_fieldId))
        {
            return checkFailed(strFmt("@SYS78966", fieldId2PName(this.TableId, _fieldId)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFieldConstraint</Name>
				<Source><![CDATA[
    public boolean checkFieldConstraint(NoYes constrainingfield, NoYes constrainedField, NoYes constraintValue, str constrainingFieldName, str constrainedFieldName)
    {
        if (constrainingfield == NoYes::Yes && constrainedField != constraintValue)
        {
            switch (constraintValue)
            {
                case NoYes::No: return checkFailed(strFmt("@SCM:EcoResDimensionGroupConstraintNegativeError", constrainedFieldName, constrainingFieldName, this.fieldName()));
                case NoYes::Yes: return checkFailed(strFmt("@SCM:EcoResDimensionGroupConstraintPositiveError", constrainedFieldName, constrainingFieldName, this.fieldName()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimensionGroupFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an <c>EcoResTrackingDimensionGroupFldSetup</c> record that uses a
    ///    <c>EcoResTrackingDimensionGroup</c> record ID and the dimension field ID as the key.
    /// </summary>
    /// <param name="_trackingDimensionGroup">
    ///    An <c>EcoResTrackingDimensionGroup</c> record ID to use as a filter.
    /// </param>
    /// <param name="_dimensionFieldId">
    ///    A dimension field ID to use as a filter.
    /// </param>
    /// <param name="_update">
    ///    A Boolean value that indicates whether a buffer is selected for update.
    /// </param>
    /// <returns>
    ///    An <c>EcoResTrackingDimensionGroupFldSetup</c> table buffer.
    /// </returns>
    static public EcoResTrackingDimensionGroupFldSetup findByDimensionGroupFieldId(
        EcoResTrackingDimensionGroupRecId   _trackingDimensionGroup,
        int                                 _dimensionFieldId,
        boolean                             _update = false)
    {
        EcoResTrackingDimensionGroupFldSetup    ecoResTrackingDimensionGroupFldSetup;

        ecoResTrackingDimensionGroupFldSetup.selectForUpdate(_update);

        if (_trackingDimensionGroup && _dimensionFieldId)
        {
            select firstonly ecoResTrackingDimensionGroupFldSetup
                where ecoResTrackingDimensionGroupFldSetup.TrackingDimensionGroup   == _trackingDimensionGroup
                   && ecoResTrackingDimensionGroupFldSetup.DimensionFieldId         == _dimensionFieldId;
        }

        return ecoResTrackingDimensionGroupFldSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsActive</Name>
				<Source><![CDATA[
    private void defaultIsActive()
    {
        if (this.IsSalesProcessActivated == NoYes::Yes)
        {
            this.IsActive = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsAllowBlankIssueEnabled</Name>
				<Source><![CDATA[
    private void defaultIsAllowBlankIssueEnabled()
    {
        if (this.IsFinancialInventoryEnabled == NoYes::Yes || this.IsPrimaryStockingEnabled == NoYes::Yes)
        {
            this.IsAllowBlankIssueEnabled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsAllowBlankReceiptEnabled</Name>
				<Source><![CDATA[
    private void defaultIsAllowBlankReceiptEnabled()
    {
        if (this.IsFinancialInventoryEnabled == NoYes::Yes || this.IsPrimaryStockingEnabled == NoYes::Yes || this.IsSalesProcessActivated == NoYes::Yes)
        {
            this.IsAllowBlankReceiptEnabled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsCoveragePlanByDimensionEnabled</Name>
				<Source><![CDATA[
    private void defaultIsCoveragePlanByDimensionEnabled()
    {
        if (this.IsSalesProcessActivated == NoYes::Yes)
        {
            this.IsCoveragePlanByDimensionEnabled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsFinancialInventoryEnabled</Name>
				<Source><![CDATA[
    private void defaultIsFinancialInventoryEnabled()
    {
        if (this.IsSalesProcessActivated == NoYes::Yes)
        {
            this.IsFinancialInventoryEnabled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsPhysicalInventoryEnabled</Name>
				<Source><![CDATA[
    private void defaultIsPhysicalInventoryEnabled()
    {
        if (this.IsSalesProcessActivated == NoYes::Yes)
        {
            this.IsPhysicalInventoryEnabled = NoYes::No;
        }
        else if (this.IsFinancialInventoryEnabled == NoYes::Yes || this.IsPrimaryStockingEnabled == NoYes::Yes)
        {
            this.IsPhysicalInventoryEnabled = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsPrimaryStockingEnabled</Name>
				<Source><![CDATA[
    private void defaultIsPrimaryStockingEnabled()
    {
        if (this.IsSalesProcessActivated == NoYes::Yes)
        {
            this.IsPrimaryStockingEnabled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsPurchPriceSearchEnabled</Name>
				<Source><![CDATA[
    private void defaultIsPurchPriceSearchEnabled()
    {
        if (this.IsSalesProcessActivated == NoYes::Yes)
        {
            this.IsPurchPriceSearchEnabled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsSalesPriceSearchEnabled</Name>
				<Source><![CDATA[
    private void defaultIsSalesPriceSearchEnabled()
    {
        if (this.IsSalesProcessActivated == NoYes::Yes)
        {
            this.IsSalesPriceSearchEnabled = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsSalesProcessActivated</Name>
				<Source><![CDATA[
    private void defaultIsSalesProcessActivated()
    {
        if (this.IsActive == NoYes::Yes)
        {
            this.IsSalesProcessActivated = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsActive),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated)]],
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsAllowBlankIssueEnabled),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsFinancialInventoryEnabled), fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPrimaryStockingEnabled)]],
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsAllowBlankReceiptEnabled),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsFinancialInventoryEnabled), fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPrimaryStockingEnabled), fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated)]],
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsCoveragePlanByDimensionEnabled),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated)]],
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsFinancialInventoryEnabled),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated)]],
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPhysicalInventoryEnabled),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsFinancialInventoryEnabled), fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPrimaryStockingEnabled), fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated)]],
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPrimaryStockingEnabled),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated)]],
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPurchPriceSearchEnabled),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated)]],
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesPriceSearchEnabled),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated)]],
            [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated),
                [fieldNum(EcoResTrackingDimensionGroupFldSetup, IsActive)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsActive): this.defaultIsActive(); break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsAllowBlankIssueEnabled): this.defaultIsAllowBlankIssueEnabled(); break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsAllowBlankReceiptEnabled): this.defaultIsAllowBlankReceiptEnabled(); break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsCoveragePlanByDimensionEnabled): this.defaultIsCoveragePlanByDimensionEnabled(); break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsFinancialInventoryEnabled): this.defaultIsFinancialInventoryEnabled(); break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPhysicalInventoryEnabled): this.defaultIsPhysicalInventoryEnabled(); break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPrimaryStockingEnabled): this.defaultIsPrimaryStockingEnabled(); break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsPurchPriceSearchEnabled): this.defaultIsPurchPriceSearchEnabled(); break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesPriceSearchEnabled): this.defaultIsSalesPriceSearchEnabled(); break;
            case fieldNum(EcoResTrackingDimensionGroupFldSetup, IsSalesProcessActivated): this.defaultIsSalesProcessActivated(); break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the tracking dimension group for the field.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    The tracking dimension group for the field.
    /// </returns>
    public EcoResTrackingDimensionGroup trackingDimensionGroup(boolean _forUpdate = false)
    {
        return EcoResTrackingDimensionGroup::find(this.TrackingDimensionGroup, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryProfileActive</Name>
				<Source><![CDATA[
    private boolean isInventoryProfileActive()
    {
        var profileField = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.TrackingDimensionGroup, fieldNum(InventDim, InventProfileId_RU));
        return profileField.IsActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS312251</DeveloperDocumentation>
	<FormRef>EcoResTrackingDimensionGroup</FormRef>
	<Label>@SYS312252</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TrackingDimensionGroup</TitleField1>
	<TitleField2>DimensionFieldId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TrackingDimensionGroupFieldSetupIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>TrackingDimensionGroupFieldSetupIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackingDimensionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowBlankReceiptEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowBlankIssueEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrackingDimensionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inherit_RU</Name>
			<Label>@SYS40134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsInheritInventTransfer_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSalesProcessActivated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPrimaryStockingEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowBlankReceiptEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAllowBlankIssueEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPhysicalInventoryEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsFinancialInventoryEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCoveragePlanByDimensionEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPurchPriceSearchEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSalesPriceSearchEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsInheritInventTransfer_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DimensionFieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<RelatedTable>InventDim</RelatedTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAllowBlankIssueEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimAllowBlankIssue</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAllowBlankReceiptEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimAllowBlankReceipt</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCoveragePlanByDimensionEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimCovPrDimension</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsFinancialInventoryEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimFinancialInvent</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsInheritInventTransfer_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimInheritInventTransfer_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPhysicalInventoryEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimPhysicalInvent</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPrimaryStockingEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimPrimaryStocking</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPurchPriceSearchEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimPriceDiscPurch</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSalesPriceSearchEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimPriceDiscSales</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSalesProcessActivated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductDimSalesProcess</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TrackingDimensionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TrackingDimensionGroupFieldSetupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TrackingDimensionGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DimensionFieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TrackingDimensionGroupFieldSetupSortIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TrackingDimensionGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResTrackingDimensionGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>EcoResTrackingDimensionGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResTrackingDimensionGroup</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResTrackingDimensionGroup_EcoResTrackingDimensionGroupFldSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TrackingDimensionGroup</Name>
					<Field>TrackingDimensionGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>