<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountThreshold</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDiscountThreshold extends RetailPeriodicDiscount
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method copies the data from the original record and updates the current record in the <c>RetailDiscountThreshold</c> table.
    /// Updates record in the <c>RetailGroupMemberLine</c> and creates the new records in the <c>RetailDiscountThresholdTiers</c> and
    /// <c>RetailPeriodicDiscountLine</c> tables
    /// </summary>
    /// <param name="_original">
    /// Table buffer of the <c>RetailDiscountThreshold</c>.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws error if the record exists in <c>RetailDiscountThresholdTiers</c> table.
    /// </exception>
    public void copyFrom(RetailDiscountThreshold _original)
    {
        RetailPeriodicDiscountLine   retailPeriodicDiscountLine;
        RetailPeriodicDiscountLine   retailPeriodicDiscountLineNew;

        RetailDiscountThresholdTiers     retailThresholdDiscountTiers;
        RetailDiscountThresholdTiers     retailThresholdDiscountTiersNew;

        boolean copyThresholdApplyingFlightEnabled = RetailDiscountThresholdCopyThresholdApplyingLineFlight::instance().isEnabled();

        ttsbegin;
        this.copyDiscountOfferInfo(_original);
        // update Threshold discount related field
        this.CountNonDiscountItems = _original.CountNonDiscountItems;
        this.update();

        while select retailPeriodicDiscountLine
            where retailPeriodicDiscountLine.OfferId == _original.OfferId
                && (!copyThresholdApplyingFlightEnabled || retailPeriodicDiscountLine.IsDiscountApplyingLine == NoYes::No)
        {
            retailPeriodicDiscountLineNew.clear();
            retailPeriodicDiscountLineNew.data(retailPeriodicDiscountLine);
            retailPeriodicDiscountLineNew.initValue();
            retailPeriodicDiscountLineNew.OfferId = this.OfferId;
            retailPeriodicDiscountLineNew.insert();

            retailPeriodicDiscountLineNew.copyGroupMemberLineInternal(retailPeriodicDiscountLine.groupMemberLine(), true);
            retailPeriodicDiscountLineNew.copyRetailDiscountApplicabilityRuleInternal(retailPeriodicDiscountLine);
        }

        while select retailThresholdDiscountTiers
            where retailThresholdDiscountTiers.OfferId == _original.OfferId
        {
            retailThresholdDiscountTiersNew.clear();
            retailThresholdDiscountTiersNew.data(retailThresholdDiscountTiers);
            retailThresholdDiscountTiersNew.OfferId = this.OfferId;
            retailThresholdDiscountTiersNew.insert();

            if (copyThresholdApplyingFlightEnabled)
            {
                retailThresholdDiscountTiersNew.copyDiscountLineThresholdApplying(retailThresholdDiscountTiers);
            }
        }

        this.copyDiscountPriceGroups(_original.OfferId);
        ttscommit;

        this.refreshDS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.PeriodicDiscountType = RetailDiscountOfferTypeBase::Threshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRBODiscountOfferTableEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property for the data source fields.
    /// </summary>
    /// <param name="_enabled">
    /// A Boolean value that indicates whether the data source is editable.
    /// </param>
    public void setRBODiscountOfferTableEnabled(boolean _enabled)
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            this.setTableFieldsEnabled(FormDataUtil::getFormDataSource(this), this.TableId, _enabled);
            this.setRBODiscountOfferParentTableEnabled(_enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>RetailDiscountThreshold</c> table.
    /// </summary>
    /// <param name="_offerId">
    /// The offer number of the discount.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailDiscountThreshold</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailDiscountThreshold find(RetailThresholdDiscountId _offerId, boolean _forUpdate = false)
    {
        RetailDiscountThreshold discountThreshold;

        if (_offerId)
        {
            discountThreshold.selectForUpdate(_forUpdate);

            select firstonly discountThreshold where discountThreshold.OfferId == _offerId;
        }

        return discountThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the discount can be enabled.
    /// </summary>
    /// <returns>
    /// true if the discount can be enabled; otherwise, false.
    /// </returns>
    public boolean validateEnable()
    {
        RetailDiscountThresholdTiers     discountThresholdTiers;
        RetailDiscountValue              previousValue = 0.00;
        RetailThresholdDiscountMethod    previousTireType;
        boolean                          ret;

        ret = super();

        if (ret && this.Status == RetailDisabledEnabled::Enabled)
        {
            // Missing tier
            select firstonly RecId, DiscountMethod from discountThresholdTiers
                order by AmountThreshold
                where discountThresholdTiers.OfferId == this.OfferId;

            if (!discountThresholdTiers.RecId)
            {
                Message::Add(MessageSeverity::Warning, "@Retail:ThresholdDiscountTierMissing");
                return false;
            }

            previousTireType = discountThresholdTiers.DiscountMethod;

            // duplicate tiers
            while select count(RecId) from discountThresholdTiers
                group by AmountThreshold
                where discountThresholdTiers.OfferId == this.OfferId
            {
                if (discountThresholdTiers.RecId >= 2)
                {
                    Message::Add(MessageSeverity::Warning, "@Retail:ThresholdDiscountDupTier");
                    return false;
                }
            }

            // higher qty higher discount
            while select * from discountThresholdTiers
                order by AmountThreshold
                where discountThresholdTiers.OfferId == this.OfferId
                && discountThresholdTiers.DiscountMethod != RetailThresholdDiscountMethod::DiscountApplyingLines
            {
                // higher tier has same type as previous tier
                ret = this.isHigherTierHasMoreDiscount(previousTireType, discountThresholdTiers.DiscountMethod, previousValue, discountThresholdTiers.DiscountValue, discountThresholdTiers.AmountThreshold);

                if (!ret)
                {
                    Message::Add(MessageSeverity::Warning, "@Retail:ThresholdDiscountTier");
                    return ret;
                }

                previousValue = discountThresholdTiers.DiscountValue;
                previousTireType = discountThresholdTiers.DiscountMethod;
            }

            if (ret && this.hasProductInBothQualifyingAndApplyingLines())
            {
                Message::Add(MessageSeverity::Warning, "@RetailDiscount:ProductInBothDiscountLinesAndApplyingLinesWarning");
            }

            if (ret && this.hasProductInMultipleApplyingLines())
            {
                Message::Add(MessageSeverity::Warning, "@RetailDiscount:ProductInMultipleApplyingLinesWarning");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProductInBothQualifyingAndApplyingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if same product is included by both the qualifying lines and the appling lines.
    /// </summary>
    /// <returns>True if some product is included by both the qualifying lines and the appling lines.</returns>
    protected boolean hasProductInBothQualifyingAndApplyingLines()
    {
        // Same product included in both qualifying lines and applying lines.
        if (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::Threshold)
        {
            RetailPeriodicDiscountLine discountLineToValidate;
            RetailGroupMemberLine groupMemberLineToValidate, groupMemberLine;
            RetailDiscountLineThresholdApplying applyingLine;
            RetailDiscountThresholdTiers tier;

            // For every discount line, check if another discount line applies to the same product.
            while select discountLineToValidate
            where discountLineToValidate.OfferId == this.OfferId
                && discountLineToValidate.LineType == RetailDiscountLineIncludeExcludeTypeBase::Include
                && discountLineToValidate.IsDiscountApplyingLine == NoYes::No
            {
                groupMemberLineToValidate = discountLineToValidate.groupMemberLine();

                while select applyingLine
                where applyingLine.OfferId == this.OfferId
                    && applyingLine.LineType == RetailDiscountLineIncludeExcludeTypeBase::Include
                    && applyingLine.IsDiscountApplyingLine == NoYes::Yes
                join tier where applyingLine.Tier == tier.RecId && tier.DiscountMethod == RetailThresholdDiscountMethod::DiscountApplyingLines
                {
                    groupMemberLine = applyingLine.groupMemberLine();

                    if (RetailGroupMemberLine::isSubset(groupMemberLineToValidate, groupMemberLine))
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProductInMultipleApplyingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if same product is included by multiple appling lines in some tier.
    /// </summary>
    /// <returns>True if some product is included by multiple lines.</returns>
    protected boolean hasProductInMultipleApplyingLines()
    {
        if (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::Threshold)
        {
            RetailGroupMemberLine groupMemberLineToValidate, groupMemberLine;
            RetailDiscountLineThresholdApplying applyingLineToValidate, applyingLine;
            RetailDiscountThresholdTiers tier;

            // For each tier with discount method DiscountApplyingLines.
            while select RecId from tier
            where tier.OfferId == this.OfferId
                && tier.DiscountMethod == RetailThresholdDiscountMethod::DiscountApplyingLines
            {
                while select applyingLineToValidate
                where applyingLineToValidate.OfferId == this.OfferId
                    && applyingLineToValidate.LineType == RetailDiscountLineIncludeExcludeTypeBase::Include
                    && applyingLineToValidate.Tier == tier.RecId
                {
                    groupMemberLineToValidate = applyingLineToValidate.groupMemberLine();

                    while select applyingLine
                    where applyingLine.OfferId == this.OfferId
                        && applyingLine.LineType == RetailDiscountLineIncludeExcludeTypeBase::Include
                        && applyingLine.LineNum != applyingLineToValidate.LineNum // Different line number
                        && applyingLine.Tier == tier.RecId
                    {
                        groupMemberLine = applyingLine.groupMemberLine();

                        if (RetailGroupMemberLine::isSubset(groupMemberLineToValidate, groupMemberLine))
                        {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHigherTierHasMoreDiscount</Name>
				<Source><![CDATA[
    private boolean isHigherTierHasMoreDiscount(RetailThresholdDiscountMethod preDiscountType,
                                                RetailThresholdDiscountMethod currentDiscountType,
                                                RetailDiscountValue preDiscountValue,
                                                RetailDiscountValue currentDiscountValue,
                                                Amount  currentThreshold)
    {
        if (currentThreshold <= 0.00)
        {
            return false;
        }

        if (currentDiscountType != preDiscountType)
        {
            // convert value to same as current tier's discount type
            preDiscountValue = currentDiscountType == RetailThresholdDiscountMethod::PercentOff ? (preDiscountValue/currentThreshold)*100 : (preDiscountValue/100) * currentThreshold;
        }

        return currentDiscountValue >= preDiscountValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX1160</DeveloperDocumentation>
	<Label>@REX1158</Label>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>RetailPeriodicDiscount</Extends>
	<Modules>Merchandising</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailDiscountThresholdTiers</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailDiscountThresholdTiers</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountNonDiscountItems</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CountNonDiscountItems</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@REX1157</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailPeriodicDiscount1_102563</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailPeriodicDiscount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>