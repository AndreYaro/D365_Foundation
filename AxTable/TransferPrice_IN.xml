<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransferPrice_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TransferPrice_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkConfig</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the config ID.
    /// </summary>
    /// <returns>
    /// Returns true if gets the record otherwise false.
    /// </returns>
    public boolean checkConfig()
    {
        if (InventTable::checkConfig(this.ItemId, this.inventDim().ConfigId))
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfigFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to check the config ID.
    /// </summary>
    /// <returns>
    /// Returns true if gets the record otherwise false.
    /// </returns>
    public boolean checkConfigFields()
    {
        if (!this.inventDim().ConfigId)
            return checkFailed("@SYS24767");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to check the product dimensions.
    /// </summary>
    /// <returns>
    /// Returns true if gets the record otherwise false.
    /// </returns>
    public boolean checkItemDim()
    {
        return InventTable::checkProductDimensions(this.ItemId, this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization using the specified item.
    /// </summary>
    /// <param name="_inventTable">
    /// The item to use for initialization.
    /// </param>
    public void initFromInventTable(InventTable _inventTable)
    {
        InventDimParm   inventDimParm;
        InventDim       inventDim = this.inventDim();

        InventDimGroupSetup::newItemId(_inventTable.ItemId).inventDimParmActiveProductDimension(inventDimParm);

        inventDimParm.InventLocationIdFlag = true;
        inventDim.clearNotSelectedDim(inventDimParm);

        _inventTable.initStandardProductDimensions(inventDim);

        this.InventDimId        = InventDim::findOrCreate(inventDim).InventDimId;

        this.ItemId             = _inventTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a instance of <c>InventDim</c>.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A instance of <c>InventDim</c>.
    /// </returns>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a instance of <c>InventTable</c>.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A instance of <c>InventTable</c>.
    /// </returns>
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to display the ItemName.
    /// </summary>
    /// <returns>
    /// Returns the name of the Item.
    /// </returns>
    display ItemNameDisplay itemName()
    {
        InventDim inventDim = this.inventDim();

        this.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field Name of the field to modify.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field.
    /// </param>
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(TransferPrice_IN, ItemId):
               this.initFromInventTable(InventTable::find(this.ItemId));
               break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferPriceItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the Item price form Table else default with zero.
    /// </summary>
    /// <param name="_itemId">
    /// The unique id of the item.
    /// </param>
    /// <returns>
    /// Returns the price of Item.
    /// </returns>
    public real transferPriceItem(ItemId _itemId)
    {
        TransferPrice_IN    itemPrice;
        ;

        select firstonly itemPrice
            where itemPrice.ItemId == _itemId;

        if (itemPrice)
        {
            return itemPrice.Price;
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        if (! super())
            return false;

        if (this.FromWarehouseCode == FromWarehouseCode_IN::Table  && ! this.FromWarehouse )
        {
            return checkFailed(strfmt("@SYS26332", "@SYS25253"));
        }
        else if (this.ToWarehouseCode == FromWarehouseCode_IN::Table  && !this.ToWarehouse )
        {
            return checkFailed(strfmt("@SYS26332", "@SYS8519"));
        }

        if ((this.FromDate && !this.ToDate) || (this.ToDate && !this.FromDate))
        {
            return checkFailed(strfmt("@SYS22087"));
        }
        else if (this.FromDate > this.ToDate)
        {
            return checkFailed(strfmt("@SYS16982"));
        }

        if (! this.checkItemDim())
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TransferPrice_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then select the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value to define the concurrency of the table.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TransferPrice_IN</c> table.
    /// </returns>
    public static TransferPrice_IN find(RefRecId            _recId,
                                        boolean             _forupdate = false,
                                        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TransferPrice_IN transferPrice;

        transferPrice.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            transferPrice.concurrencyModel(_concurrencyModel);
        }

        select firstonly transferPrice
            where transferPrice.RecId == _recId;

        return transferPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TransferPrice_IN</c> table for the specified Item id.
    /// </summary>
    /// <param name="_itemId">
    /// The record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then select the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TransferPrice_IN</c> table.
    /// </returns>
    public static TransferPrice_IN findByItemId(ItemId     _itemId,
                                                boolean    _forUpdate = false)
    {
        TransferPrice_IN transferPrice;

        transferPrice.selectForUpdate(_forUpdate);

        if (_itemId)
        {
            select firstonly transferPrice
                index hint ItemDimIdx
                where transferPrice.ItemId == _itemId;
        }

        return transferPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find the transfer price based on the combination.
    /// </summary>
    /// <param name="_transferId">
    /// A Id of the <c>InventTransferTable</c>
    /// </param>
    /// <param name="_itemId">
    /// A unique Id of the item.
    /// </param>
    /// <param name="_inventDimId">
    /// A Id of the <c>inventDim</c> table.
    /// </param>
    /// <param name="_inventDim">
    /// A buffer of the <c>InventDim</c> table
    /// </param>
    /// <returns>
    /// Returns the buffer of the <c> TransferPrice_IN </c> table.
    /// </returns>
    public static TransferPrice_IN  getTransferPrice_IN(InventTransferId    _transferId,
                                                        ItemId              _itemId,
                                                        InventDimId         _inventDimId,
                                                        InventDim           _inventDim)
    {
        TransferPrice_IN    transPrice;
        InventDimId         inventDimIdLoc;
        InventTransferTable inventtransferTableLoc;

        inventtransferTableLoc = InventTransferTable::find(_transferId);

        select firstonly transPrice
            where transPrice.ItemId             == _itemId
               && transPrice.TransferPriceDimId == _inventDimId;

        _inventDim.InventLocationId      = inventtransferTableLoc.InventLocationIdFrom;
        inventDimIdLoc                  = InventDim::findOrCreate(_inventDim).InventDimId;

        select firstonly transPrice
            where transPrice.FromWarehouse  == inventtransferTableLoc.InventLocationIdFrom
               && transPrice.ToWarehouse    == inventtransferTableLoc.InventLocationIdTo
               && transPrice.ItemId         == _itemId
               && transPrice.FromDate       <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.ToDate         >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.InventDimId    == inventDimIdLoc;

            if (transPrice)
            {
                return transPrice;
            }

        select firstonly transPrice
            where transPrice.FromWarehouse  == inventtransferTableLoc.InventLocationIdFrom
               && transPrice.ToWarehouse    == inventtransferTableLoc.InventLocationIdTo
               && transPrice.ItemId         == _itemId
               && transPrice.FromDate       <= dateNull()
               && transPrice.ToDate         >= dateNull()
               && transPrice.InventDimId    == inventDimIdLoc;
            if (transPrice)
            {
                return transPrice;
            }

        select firstonly transPrice
            where transPrice.FromWarehouse   == inventtransferTableLoc.InventLocationIdFrom
               && transPrice.ToWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ItemId          == _itemId
               && transPrice.FromDate        <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.ToDate          >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.InventDimId     == inventDimIdLoc;
            if (transPrice)
            {
                return transPrice;
            }

        select firstonly transPrice
            where transPrice.FromWarehouse   == inventtransferTableLoc.InventLocationIdFrom
               && transPrice.ToWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ItemId          == _itemId
               && transPrice.FromDate        <= dateNull()
               && transPrice.ToDate          >= dateNull()
               && transPrice.InventDimId     == inventDimIdLoc;

            if (transPrice)
            {
                return transPrice;
            }

        InventDimParm inventDimCriteria = InventDimParm::allProductDim();
        InventDimParm allowNoBlanks;
        InventDim     inventDimLoc;

        boolean useWMSLocationFilter = false;

        // Find InventDim for non-empty site ID, then get transfer price by that InventDim
        if (_inventDim.InventSiteId != '')
        {
            // Find InventDim for specific site ID, then get transfer price by that InventDim
            select firstonly inventDimLoc
                index hint ProductDimIdx
                where #InventDimRanges(inventDimLoc, _inventDim, inventDimCriteria, allowNoBlanks)
                    && inventDimLoc.InventLocationId == ''
                    && inventDimLoc.InventSiteId ==  _inventDim.InventSiteId
                    && inventDimLoc.InventBatchId == _inventDim.InventBatchId
                    && ((!useWMSLocationFilter && inventDimLoc.wmsLocationId == '')
                       || (useWMSLocationFilter && inventDimLoc.wmsLocationId == _inventDim.wmsLocationId))
                    && inventDimLoc.InventSerialId == _inventDim.InventSerialId;

            transPrice = TransferPrice_IN::getTransferPriceWhenFromWarehouseIsAll(
                _itemId,
                inventTransferTableLoc.InventLocationIdTo,
                inventDimLoc.inventDimId);

            if (transPrice)
            {
                return transPrice;
            }
        }

        // Find InventDim for empty site ID, then get transfer price by that InventDim
        select firstonly inventDimLoc
            index hint ProductDimIdx
            where #InventDimRanges(inventDimLoc, _inventDim, inventDimCriteria, allowNoBlanks) &&
                  inventDimLoc.InventLocationId    == ''                              &&
                  inventDimLoc.InventSiteId        == ''                              &&
                  inventDimLoc.InventBatchId       == _inventDim.InventBatchId        &&
                  ((!useWMSLocationFilter && inventDimLoc.wmsLocationId  == '') ||
                   (useWMSLocationFilter && inventDimLoc.wmsLocationId  == _inventDim.wmsLocationId)) &&
                  inventDimLoc.InventSerialId      == _inventDim.InventSerialId;

        transPrice = TransferPrice_IN::getTransferPriceWhenFromWarehouseIsAll(
                _itemId,
                inventTransferTableLoc.InventLocationIdTo,
                inventDimLoc.inventDimId);

        return transPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferPriceWhenFromWarehouseIsAll</Name>
				<Source><![CDATA[
    private static TransferPrice_IN getTransferPriceWhenFromWarehouseIsAll(
        ItemId _itemId,
        InventLocationIdTo _inventLocationIdTo,
        InventDimId _inventDimId)
    {
        TransferPrice_IN transPrice;
        select firstonly transPrice
            where transPrice.FromWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ToWarehouse == _inventLocationIdTo
               && transPrice.ItemId == _itemId
               && transPrice.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.InventDimId == _inventDimId;

        if (transPrice)
        {
            return transPrice;
        }

        select firstonly transPrice
            where transPrice.FromWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ToWarehouse == _inventLocationIdTo
               && transPrice.ItemId == _itemId
               && transPrice.FromDate <= dateNull()
               && transPrice.ToDate >= dateNull()
               && transPrice.InventDimId == _inventDimId;

        if (transPrice)
        {
            return transPrice;
        }

        select firstonly transPrice
            where transPrice.FromWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ToWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ItemId == _itemId
               && transPrice.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
               && transPrice.InventDimId == _inventDimId;

        if (transPrice)
        {
            return transPrice;
        }

        select firstonly transPrice
            where transPrice.FromWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ToWarehouseCode == FromWarehouseCode_IN::All
               && transPrice.ItemId == _itemId
               && transPrice.FromDate <= dateNull()
               && transPrice.ToDate >= dateNull()
               && transPrice.InventDimId == _inventDimId;

        return transPrice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64168</DeveloperDocumentation>
	<Label>@SYS26377</Label>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ItemDimIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromWarehouse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToWarehouse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS81213</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS14428</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodPriceTrans_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferPriceDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Location</Name>
			<Label>@SYS80395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromWarehouseCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToWarehouse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromWarehouse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToWarehouseCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS24050</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromWarehouse</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Label>@SYS25253</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FromWarehouseCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS5934</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>FromWarehouseCode_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventBatchId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Location</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MethodPriceTrans_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MethodPriceTrans_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SerialNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
			<Label>@SYS35904</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToWarehouse</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Label>@SYS8519</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ToWarehouseCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS5933</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>FromWarehouseCode_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferPriceDimId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Label>@SYS26377</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemDimIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromWarehouse</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToWarehouse</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FromInventLocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FromWarehouse</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ToInventLocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ToWarehouse</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransferPriceInventDimIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransferPriceDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FromInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation_TransferPrice_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromWarehouse</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>FromWarehouse</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventBatch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventBatch</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemIdBase</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>itemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBatchId</Name>
					<SourceEDT>InventBatchId</SourceEDT>
					<Field>InventBatchId</Field>
					<RelatedField>inventBatchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDimId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventDim_1_TransferPrice_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSerial</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSerial</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemIdBase</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SerialNumber</Name>
					<SourceEDT>InventSerialId</SourceEDT>
					<Field>SerialNumber</Field>
					<RelatedField>InventSerialId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable_1_TransferPrice_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ToInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocation_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation_1_TransferPrice_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToWarehouse</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>ToWarehouse</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransferPriceInventDimId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim_2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventDim_2_TransferPrice_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferPriceDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>TransferPriceDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Unit</Name>
					<Field>Unit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>