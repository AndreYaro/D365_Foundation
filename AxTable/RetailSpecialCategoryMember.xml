<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSpecialCategoryMember</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailSpecialCategoryMember extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDeleteProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks the record into table <c>RetailSpecialCategoryMember</c> for an product.
    /// </summary>
    /// <param name="_product">
    /// The given value of product id.
    /// </param>
    /// <param name="_variant">
    /// The given value of variant id.
    /// </param>
    /// <returns>
    /// true if exactly 1-record found; otherwise false.
    /// </returns>
    public boolean canDeleteProductCategory(RecId _product, RecId _variant = 0)
    {
        boolean deleteProductCategory = false;
        RetailSpecialCategoryMember specialCategoryMemeberLocal;
        RetailGroupMemberLine   groupMemeberLineLocal;

        select count(RecId) from specialCategoryMemeberLocal
            where specialCategoryMemeberLocal.Category == this.Category
            join product from groupMemeberLineLocal
                where groupMemeberLineLocal.RecId == specialCategoryMemeberLocal.RetailGroupMember &&
                    groupMemeberLineLocal.Product == _product &&
                    groupMemeberLineLocal.Variant == _variant;

        if (specialCategoryMemeberLocal.RecId == 1)
        {
            deleteProductCategory = true;
        }

        return deleteProductCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containedRetailLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the given category and those that contain it as potentially in need of updates in the lookup
    /// table.
    /// </summary>
    [SysObsolete('containedRetailLineChanged is no longer used to maintain lookup table.', false, 31\03\2019)]
    public void containedRetailLineChanged()
    {
        // Obsolete. No Actions.
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from <c>RetailSpecialCategoryMember</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, unprocessed entries are removed from the distribution list.
    /// </remarks>
    public void delete()
    {
        RetailGroupMemberLine   groupMemberLine;

        groupMemberLine = RetailGroupMemberLine::find(this.RetailGroupMember);

        ttsBegin;

        this.deleteProductCategory(groupMemberLine);

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.RetailGroupMember = RetailGroupMemberLine::createRetailGroupMemberV2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailSpecialCategoryMember</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is inserted into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public void insert()
    {
        if (!this.RetailGroupMember)
        {
            this.RetailGroupMember = RetailGroupMemberLine::createRetailGroupMemberV2();
        }

        RetailGroupMemberLine   groupMemberLine;
        groupMemberLine = RetailGroupMemberLine::find(this.RetailGroupMember);

        ttsBegin;

        super();

        if (groupMemberLine.Category && !groupMemberLine.Product && !groupMemberLine.Variant)
        {
            this.deleteReferencedCategoryHierarchy(groupMemberLine.Category);
        }

        // Check RetailGroupMemberLine for category and product.
        if (this.Category && groupMemberLine.Product)
        {
            // Check EcoResProductCategory for ecorescategory and product.
            if (!EcoResProductCategory::findByProductIdAndCategoryId(groupMemberLine.Variant ? groupMemberLine.Variant : groupMemberLine.Product, this.Category))
            {
                // Insert the record into EcoResProductCategory to link assigned product with the category.
                EcoResProductCategory::insertEcoResProductCategory(EcoResCategory::find(this.Category),
                                                                   EcoResProduct::find(groupMemberLine.Variant ? groupMemberLine.Variant : groupMemberLine.Product));
            }
        }

        ttsCommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>IsMemberLineEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record selected for table <c>RetailGroupMemberLine</c> is empty.
    /// </summary>
    /// <returns>
    /// true if the record does not have the values; otherwise false.
    /// </returns>
    public boolean IsMemberLineEmpty()
    {
        boolean ret;
        RetailGroupMemberLine memberLine = RetailGroupMemberLine::find(this.RetailGroupMember);

        if (memberLine.IsEmptyRow())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in <c>RetailSpecialCategoryMember</c> table and also update the product information in <c>RetailGroupMemberLine</c> table.
    /// </summary>
    /// <param name="_categoryId">
    /// The given value of category Id.
    /// </param>
    /// <param name="_memberLineProductId">
    /// The given value for Product id.
    /// </param>
    public static void addProductLine(EcoResCategoryId _categoryId, EcoResDistinctProductRecId _memberLineProductId)
    {
        RetailGroupMemberLine       groupMemberLine;
        RetailSpecialCategoryMember categoryMember;

        categoryMember = RetailSpecialCategoryMember::findByMemberLine(_categoryId, 0, _memberLineProductId, 0);
        if (!categoryMember)
        {
            ttsBegin;

            categoryMember.initValue();
            categoryMember.Category = _categoryId;
            categoryMember.insert();

            groupMemberLine = RetailGroupMemberLine::find(categoryMember.RetailGroupMember, true);
            groupMemberLine.Product = _memberLineProductId;

            groupMemberLine.update();

            // Delete RetailSpecialCategoryMember if record does not exist into EcoResProductCategory for selected Product & Category.
            if (!EcoResProductCategory::findByProductIdAndCategoryId(groupMemberLine.Product, categoryMember.Category))
            {
                delete_from categoryMember where categoryMember.RetailGroupMember == groupMemberLine.RecId;
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductVariantLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in <c>RetailSpecialCategoryMember</c> table and also update the variant information in <c>RetailGroupMemberLine</c> table.
    /// </summary>
    /// <param name="_categoryId">
    /// The given value of category Id.
    /// </param>
    /// <param name="_memberLineVariant">
    /// The given value for variant id.
    /// </param>
    public static void addProductVariantLine(EcoResCategoryId _categoryId, EcoResDistinctProductVariantRecId _memberLineVariant)
    {
        RetailGroupMemberLine       groupMemberLine;
        RetailSpecialCategoryMember categoryMember;

        categoryMember = RetailSpecialCategoryMember::findByMemberLine(_categoryId, 0, 0, _memberLineVariant);

        if (!categoryMember)
        {
            ttsBegin;

            categoryMember.initValue();
            categoryMember.Category = _categoryId;
            categoryMember.insert();
            groupMemberLine = RetailGroupMemberLine::find(categoryMember.RetailGroupMember, true);

            groupMemberLine.Variant     = _memberLineVariant;
            groupMemberLine.CategoryHierarchy = EcoResCategory::find(_categoryId).CategoryHierarchy;

            groupMemberLine.update();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTmpProductsToAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record into <c>RetailGroupMemberLine</c> table corresponding to <c>RetailSpecialCategoryMember</c>.
    /// </summary>
    /// <param name="_tmpInventTable">
    ///  A record buffer of <c>TmpInventTable</c> table.
    /// </param>
    /// <param name="_callerEcoResCategory">
    ///  A record buffer of <c>EcoResCategory</c> table.
    /// </param>
    /// <param name="_createLinesFromProductsToAdd">
    ///  An instance of <c>RetailCreateLinesFromProductsToAdd</c> class.
    /// </param>
    public static void createFromTmpProductsToAdd(TmpRetailProductsToAdd _tmpInventTable,
                                                EcoResCategory _callerEcoResCategory,
                                                RetailCreateLinesFromProductsToAdd _createLinesFromProductsToAdd = null)
    {
        int64   lineRecId;
        RetailSpecialCategoryMember categoryMember;
        RetailGroupMemberLine       categoryMemberLine;
        MapIterator     mapLinesIterator;
        Set lineSet = new Set(Types::Int64);
        Map mapLines;

        if (_createLinesFromProductsToAdd)
        {
            mapLines = _createLinesFromProductsToAdd.mapLines(); //retrieves all the loaded lines to Add product
        }

        ttsbegin;

        while select * from _tmpInventTable
        {
            try
            {
                if (mapLines && mapLines.exists(_tmpInventTable.RecId)) //check wheather the line already exists on Add product
                {
                    lineRecID = mapLines.lookup(_tmpInventTable.RecId); //find special category record ID through keyvalue.

                    select RecId, RetailGroupMember from categoryMember
                        where categoryMember.RecId == lineRecID
                    join forUpdate categoryMemberLine
                        where categoryMemberLine.RecId== categoryMember.RetailGroupMember;

                    if (categoryMember.RecId &&
                        (categoryMemberLine.Variant != _tmpInventTable.EcoResDistinctProductVariant))
                    {
                        if (categoryMember.validateWrite())
                        {
                            categoryMemberLine.Variant = _tmpInventTable.EcoResDistinctProductVariant;
                            categoryMemberLine.update();
                        }
                        else
                        {
                            throw error("@RET490477") ;
                        }
                    }
                }
                else if (_tmpInventTable.EcoResDistinctProductVariant)
                {
                    RetailSpecialCategoryMember::addProductVariantLine(_callerEcoResCategory.RecId, _tmpInventTable.EcoResDistinctProductVariant);
                }
                else
                {
                    RetailSpecialCategoryMember::addProductLine(_callerEcoResCategory.RecId, _tmpInventTable.EcoResProduct);
                }

                lineSet.add(categoryMember.RecId);
            }
            catch (Exception::Error)
            {
                lineSet.add(categoryMember.RecId);
                checkFailed("@SYS18447");
            }
        }

        ttscommit;

        if (mapLines)
        {
            // add lines which are selected on the Add product form .
            mapLinesIterator = new MapIterator(mapLines);

            while (mapLinesIterator.more())
            {
                try
                {
                    if (!lineSet.in(mapLinesIterator.value()))
                    {
                        select forUpdate categoryMember
                            where categoryMember.RecId == mapLinesIterator.value()
                        join categoryMemberLine
                            where categoryMemberLine.RecId== categoryMember.RetailGroupMember;

                        setPrefix(strFmt("@SYS24300", categoryMemberLine.Product));

                        if (categoryMember.validateDelete())
                        {
                            categoryMember.delete();
                        }
                        else
                        {
                            throw error("@RET490478");
                        }
                    }
                }
                catch (Exception::Error)
                {
                    checkFailed("@SYS18447");
                }

                mapLinesIterator.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByMemberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in <c>RetailSpecialCategoryMember</c> table based on the category Id, product Id and variant Id passed as parameter.
    /// </summary>
    /// <param name="_specialCategoryId">
    /// The given value for special category Id
    /// </param>
    /// <param name="_memberLineCategoryId">
    /// The given value for member line category Id
    /// </param>
    /// <param name="_memberLineProductId">
    /// The given value for product Id
    /// </param>
    /// <param name="_memberLineVariant">
    /// The given value for variant Id
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in table <c>RetailSpecialCategoryMember</c>.
    /// </returns>
        public static RetailSpecialCategoryMember findByMemberLine(
            EcoResCategoryId _specialCategoryId,
            EcoResCategoryId _memberLineCategoryId = 0,
            EcoResDistinctProductRecId _memberLineProductId = 0,
            EcoResDistinctProductVariantRecId _memberLineVariant = 0,
            boolean _selectForUpdate = false)
    {
        RetailSpecialCategoryMember categoryMember;
        RetailGroupMemberLine categoryMemberLine;

        if ((_memberLineCategoryId
              && (_memberLineProductId || _memberLineVariant))
           || (_memberLineProductId && _memberLineVariant))
        {
            error("@RET110001");
        }

        select * from categoryMember
            where categoryMember.Category == _specialCategoryId
            join * from categoryMemberLine
                where categoryMember.RetailGroupMember == categoryMemberLine.RecId
                   && categoryMemberLine.Category == _memberLineCategoryId
                   && categoryMemberLine.Product == _memberLineProductId
                   && categoryMemberLine.Variant == _memberLineVariant;

        categoryMember.selectForUpdate(_selectForUpdate);

        return categoryMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete product category for given group member line.
    /// </summary>
    /// <param name="_groupMemberLine">
    /// Group member line.
    /// </param>
    public void deleteProductCategory(RetailGroupMemberLine _groupMemberLine)
    {
        EcoResProductCategory productcategory;
        
        if (_groupMemberLine.Product || _groupMemberLine.Variant)
        {
            if (this.canDeleteProductCategory(_groupMemberLine.Product, _groupMemberLine.Variant))
            {
                productcategory = EcoResProductCategory::findByProductIdAndCategoryId(
                    _groupMemberLine.Variant ? _groupMemberLine.Variant : _groupMemberLine.Product,
                    this.Category,
                    true);
                if (productcategory)
                {
                    productcategory.delete();
                }
            }
        }

        if (_groupMemberLine.Category && !_groupMemberLine.Product && !_groupMemberLine.Variant)
        {
            RetailCategoryContainmentLookup::deleteReferencedCategoryHierarchy(this.Category, _groupMemberLine.Category);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReferencedCategoryHierarchy</Name>
				<Source><![CDATA[
    public void deleteReferencedCategoryHierarchy(RecId _referencedCategoryId)
    {
        if(_referencedCategoryId)
        {
            RetailCategoryContainmentLookup::deleteReferencedCategoryHierarchy(this.Category, _referencedCategoryId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET5757</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@RET5756</Label>
	<TitleField1>Category</TitleField1>
	<TitleField2>RetailGroupMember</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Merchandising</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailGroupMemberLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>
      </Relation>
			<Table>RetailGroupMemberLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailGroupMember</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS14437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailGroupMember</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailGroupMember</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryMemberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailGroupMember</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailGroupMemberLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailGroupMemberLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailGroupMember</Name>
					<Field>RetailGroupMember</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>