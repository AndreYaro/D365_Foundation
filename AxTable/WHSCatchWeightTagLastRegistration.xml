<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTagLastRegistration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSCatchWeightTagLastRegistration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specified record in the <c>WHSCatchWeightTagLastRegistration</c> table.
    /// </summary>
    /// <param name = "_tagNumber">
    /// The tag number of the <c>WHSCatchWeightTagLastRegistration</c> table record to find.
    /// </param>
    /// <param name = "_forupdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>WHSCatchWeightTagLastRegistration</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSCatchWeightTagLastRegistration find(WHSCatchWeightTagNumber _tagNumber, boolean _forupdate = false)
    {
        WHSCatchWeightTagLastRegistration lastRegistration;
    
        if (_tagNumber)
        {
            lastRegistration.selectForUpdate(_forupdate);
    
            select firstOnly lastRegistration
                where lastRegistration.TagNumber == _tagNumber;
        }
    
        return lastRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>WHSCatchWeightTagLastRegistration</c> record from database.
    /// </summary>
    /// <param name = "_tagNumber">
    /// The tag number of the <c>WHSCatchWeightTagLastRegistration</c> table record to find.
    /// </param>
    /// <param name = "_forupdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>WHSCatchWeightTagLastRegistration</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSCatchWeightTagLastRegistration findFromDatabase(WHSCatchWeightTagNumber _tagNumber, boolean _forupdate = false)
    {
        WHSCatchWeightTagLastRegistration lastRegistration;
    
        if (_tagNumber)
        {
            lastRegistration.disableCache(true);
            lastRegistration.selectForUpdate(_forupdate);
    
            select firstOnly lastRegistration
                where lastRegistration.TagNumber == _tagNumber;
        }
    
        return lastRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastRegistrationEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last event registered for the specific catch weight tag.
    /// </summary>
    /// <param name = "_tagNumber">The tag number.</param>
    /// <returns>The current status of the selected tag.</returns>
    public static WHSCatchWeightTagRegistrationEvent lastRegistrationEvent(WHSCatchWeightTagNumber _tagNumber)
    {
        WHSCatchWeightTagRegistrationEvent lastEvent;
        
        lastEvent = WHSCatchWeightTagLastRegistration::findFromDatabase(_tagNumber, true).RegistrationEvent;

        return lastEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerContainerDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the container deletion event.
    /// </summary>
    /// <param name = "_containerLineRecId">Reference to the deleted container line.</param>
    [Hookable(false)]
    internal static void registerContainerDeletion(WHSContainerLineRecId _containerLineRecId)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return;
        }

        WHSCatchWeightTagEventRegistration eventRegistration = WHSCatchWeightTagEventRegistration::instantiateFromTagRegistration(
                                                                            WHSCatchWeightTagRegistrationEvent::ContainerUnpacked);
        eventRegistration.parmContainerLineRecId(_containerLineRecId);

        ttsbegin;

        WHSCatchWeightTagLastRegistration lastRegistration;

        while select TagNumber from lastRegistration
            where  lastRegistration.ContainerLine     == _containerLineRecId
                && lastRegistration.RegistrationEvent == WHSCatchWeightTagRegistrationEvent::PackingCompleted
        {
            eventRegistration.registerEvent(WHSCatchWeightTag::find(lastRegistration.TagNumber));
            
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerShippedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the shipment status for the tags.
    /// </summary>
    /// <param name = "_loadLine">Load id to identify the catch weight tags.</param>
    [Hookable(false)]
    internal static void registerShippedStatus(WHSLoadLine _loadLine)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return;
        }

        WHSCatchWeightTagEventRegistration eventRegistration = WHSCatchWeightTagEventRegistration::instantiateFromTagRegistration(
                                                                                        WHSCatchWeightTagRegistrationEvent::Shipped);
        eventRegistration.parmInventTransId(_loadLine.InventTransId);

        ttsbegin;

        WHSCatchWeightTagLastRegistration lastRegistration;
        WHSContainerLine containerLine;
        boolean tagsRegistered;

        // For tags with policy capture weight during Packing, no outbound event are registered. So during the packing process Packed event is registered with the container id.
        while select TagNumber from lastRegistration
            where lastRegistration.RegistrationEvent == WHSCatchWeightTagRegistrationEvent::PackingCompleted
            join containerLine
                where containerLine.RecId == lastRegistration.ContainerLine
                    && containerLine.LoadLine == _loadLine.RecId
        {
            tagsRegistered = true;
            eventRegistration.registerEvent(WHSCatchWeightTag::find(lastRegistration.TagNumber));
        }

        // For tags with policy capture weight at Picking, outbound event (work line) is registered. So update the shipped status based on the outbound work line.
        if (!tagsRegistered)
        {
            WHSWorkLine workLine;
            WHSWorkTable workTable;

            WHSCatchWeightTagRegistration registration;

            while select TagNumber from lastRegistration
                where lastRegistration.RegistrationEvent == WHSCatchWeightTagRegistrationEvent::OutboundPickingCompleted
                exists join registration
                    where registration.TagNumber == lastRegistration.TagNumber
                exists join workLine
                    where workLine.RecId == registration.WorkLine
                        && workLine.LoadLineRefRecId == _loadLine.RecId
                exists join workTable
                    where workTable.WorkId == workLine.WorkId
                        && workTable.WorkStatus == WHSWorkStatus::Closed
            {
                eventRegistration.registerEvent(WHSCatchWeightTag::find(lastRegistration.TagNumber));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTagAlreadyPackedInContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the catch weight tag is already packed in a container.
    /// </summary>
    /// <param name = "_loadLine">A <c>WHSLoadline</c> buffer.</param>
    /// <returns>True if the catch weight tags are part of the container; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean isTagAlreadyPackedInContainer(WHSLoadline _loadLine)
    {
        WHSCatchWeightTagLastRegistration lastRegistration;
        WHSContainerLine containerLine;

        select RecId from lastRegistration
            where lastRegistration.RegistrationEvent == WHSCatchWeightTagRegistrationEvent::PackingCompleted
            exists join containerLine
                where containerLine.RecId == lastRegistration.ContainerLine
                    && containerLine.LoadLine == _loadLine.RecId;

        return lastRegistration.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatchWeightTagRegistrationWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the last registration work line reference for all catch weight tags in given list of tags to the
    /// first pick work line with the same lot ID.
    /// </summary>
    /// <param name = "_tagRecIdContainer">A container of record IDs for records in the <c>WHSCatchWeightTag</c> table.</param>
    /// <param name = "_workId">The work ID to identify the work lines within.</param>
    [Hookable(false)]
    internal static void updateCatchWeightTagRegistrationWorkLine(container _tagRecIdContainer, WHSWorkId _workId)
    {
        ttsbegin;

        WHSWorkLine firstPutWorkLine = WHSWorkTable::getFirstPutWorkLine(_workId);
        
        for (int i = 1; i <= conLen(_tagRecIdContainer); i++)
        {
            WHSCatchWeightTagLastRegistration lastRegistration;
            WHSCatchWeightTag catchWeightTag;

            select firstonly forupdate lastRegistration
                exists join catchWeightTag
                    where catchWeightTag.RecId      == conPeek(_tagRecIdContainer, i)
                        && catchWeightTag.TagNumber == lastRegistration.TagNumber;

            if (lastRegistration.RecId)
            {
                WHSWorkLine workLine;

                select firstonly RecId from workLine
                    where workLine.WorkId == _workId
                        && workLine.InventTransId == lastRegistration.InventTransId
                        && workLine.WorkType == WHSWorkType::Pick
                        && workLine.LineNum < firstPutWorkLine.LineNum;

                lastRegistration.WorkLine = workLine.RecId;
                lastRegistration.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
	<DeveloperDocumentation>@WAX:CatchWeightTagLastRegistrationDevDoc</DeveloperDocumentation>
	<Label>@WAX:CatchWeightTagLastRegistration</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TagNumber</TitleField1>
	<TitleField2>RegistrationEvent</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>TagNumberIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>TagNumberIdx</PrimaryIndex>
	<ReplacementKey>TagNumberIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TagNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TagNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCatchWeightTagNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RegistrationEvent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSCatchWeightTagRegistrationEvent</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSWorkLineRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ContainerLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSContainerLineRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TagNumberIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TagNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSCatchWeightTag</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WHSCatchWeightTag</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TagNumber</Name>
					<Field>TagNumber</Field>
					<RelatedField>TagNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSWorkLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkLine</Name>
					<Field>WorkLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSContainerLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSContainerLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainerLine</Name>
					<Field>ContainerLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>