<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HRPLimitAgreementRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HRPLimitAgreementRule extends SysPolicyRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        HRPExpireWorkerLimits expireWorkerLimits;
        expireWorkerLimits = new HRPExpireWorkerLimits();

        ret = super();

        if (ret && FormDataUtil::getFormDataSource(this))
        {
            expireWorkerLimits.expireLimitAgreementRule(this.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>HRPLimitAgreementRule</c> table; if not, an
    /// error message is displayed.
    /// </summary>
    /// <param name="_limitAgreementRule">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _limitAgreementRule)
    {
        if (!HRPLimitAgreementRule::exist(_limitAgreementRule))
        {
            return checkFailed(HRPLimitAgreementRule::txtNotExist());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>HRPLimitAgreementRule</c> table exists.
    /// </summary>
    /// <param name="_limitAgreementRule">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _limitAgreementRule)
    {
        return HRPLimitAgreementRule::find(_limitAgreementRule).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>HRPLimitAgreementRule</c> record with the specific recid.
    /// </summary>
    /// <param name="_limitAgreementRule">
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the <c>Boolean</c> data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>HRPLimitAgreementRule</c> data type.
    /// </returns>
    public static HRPLimitAgreementRule find(RefRecId _limitAgreementRule, boolean _forUpdate = false)
    {
        HRPLimitAgreementRule signingLimitAgreementRule;

        if (_limitAgreementRule)
        {
            signingLimitAgreementRule.selectForUpdate(_forUpdate);
            select firstonly signingLimitAgreementRule
                where signingLimitAgreementRule.RecId == _limitAgreementRule;
        }
        return signingLimitAgreementRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static str txtNotExist()
    {
        return "@SYS302233";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS317820</DeveloperDocumentation>
	<Label>@SYS302152</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>relationType</TitleField1>
	<TitleField2>RecId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Extends>SysPolicyRule</Extends>
	<Modules>HumanResource</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>HRPLimitAgreementDetail</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>HRPLimitAgreementDetail</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields />
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SysPolicyRule_LimitAgreementRule</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SysPolicyRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SysPolicyRule</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>HRPLimitAgreementRule_SysPolicyRule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>