<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceAttributeDefinition</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceAttributeDefinition extends common
{
    #define.MaxSequenceNumber(15) // Sequence is [0,15).

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
    
        if (ret)
        {
            ret = this.validatePredefined();
        }
        if (ret)
        {
            ret = this.validateAttribute();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.validateDuplicate();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicate</Name>
				<Source><![CDATA[
    private void validateDuplicate()
    {
        boolean ret = true;
        PriceAttributeDefinition duplicate;

        switch (this.AttributeType)
        {
            case PriceAttributeType::Predefined:
                select firstonly duplicate where duplicate.PredefinedField == this.PredefinedField
                    && duplicate.PriceComponent == this.PriceComponent
                    && duplicate.Status == this.Status;
                break;
            case PriceAttributeType::EcoResAttribute:
                select firstonly duplicate where duplicate.AttributeSource == this.AttributeSource
                    && duplicate.EcoResAttributeRecId == this.EcoResAttributeRecId
                    && duplicate.PriceComponent == this.PriceComponent
                    && duplicate.Status == this.Status;
                break;
            default:
                break;
        }

        if (duplicate)
        {
            throw error(strFmt("@Retail:EntityDuplicateRecord", tableId2PName(tableNum(PriceAttributeDefinition))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePredefined</Name>
				<Source><![CDATA[
    private boolean validatePredefined()
    {
        boolean ret = true;

        if (this.AttributeType == PriceAttributeType::Predefined && this.PredefinedField == PricePredefinedField::None)
        {
            ret = checkFailed(strFmt("@SYS78966", fieldPname(PriceAttributeDefinition, PredefinedField)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttribute</Name>
				<Source><![CDATA[
    private boolean validateAttribute()
    {
        boolean ret = true;

        if (this.AttributeType == PriceAttributeType::EcoResAttribute
            && (this.AttributeSource == PriceAttributeSource::SalesOrderHeader || this.AttributeSource == PriceAttributeSource::SalesOrderLine))
        {
            EcoResAttribute ecoResAttribute = EcoResAttribute::find(this.EcoResAttributeRecId);
            EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByAttribute(ecoResAttribute.RecId);

            // Allows only simple string type, same restriction as sales order attributes.
            if (!AttributeDataTypeDiscriminator::checkAttributeDataTypeText(ecoResAttributeType.DataType) ||
                ecoResAttributeType.IsEnumeration == NoYes::Yes)
            {
                ret = checkFailed("@RET490176");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        if (ret)
        {
            PriceComponentCode componentCode;
            PriceComponentCodeAttribute componentCodeAttribute;

            select firstonly componentCodeAttribute
                join componentCode
                where componentCode.PriceComponent == this.PriceComponent
                && componentCode.IsDefault == NoYes::No
                && componentCodeAttribute.Status == PriceAttributeStatus::Published;

            if (componentCodeAttribute)
            {
                ret = checkFailed('@UnifiedPricing:AttributeWithComponentCode');
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PriceAttributeDefinition find(PriceComponent _component, PriceAttributeStatus _status, Name _name, boolean _forUpdate = false)
    {
        PriceAttributeDefinition definition;

        definition.selectForUpdate(_forUpdate);

        select firstonly definition
        where definition.PriceComponent == _component
            && definition.Status == _status
            && definition.Name == _name;

        return definition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProvider</Name>
				<Source><![CDATA[
    public IPriceAttributeProvider findProvider()
    {
        List providerList = SysExtensionAppClassFactory::getClassInstanceListFromSysAttribute(
                classStr(IPriceAttributeProvider),
                new PriceAttributeProviderAttribute());

        IPriceAttributeProvider priceAttributeProvider;
        
        ListEnumerator enumerator = providerList.getEnumerator();
        while (enumerator.moveNext())
        {
            priceAttributeProvider = enumerator.current();

            if (priceAttributeProvider.isSupported(this))
            {
                return priceAttributeProvider;
            }
        }

        // TODO(shangwang): when we finish all providers, we'd throw error here.
        // throw error(strFmt('@UnifiedPricing:PriceAttributeProviderNotFound', this.Name));
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PriceAttributeDefinition, PredefinedField):
                if (this.PredefinedField != PricePredefinedField::None)
                {
                    this.AttributeSource = this.attributeSource();
                }
                break;

            case fieldNum(PriceAttributeDefinition, AttributeType):
                
                // When updating Attribute Type, reset fields.
                this.PredefinedField = PricePredefinedField::None;
                this.EcoResAttributeRecId = 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeSource</Name>
				<Source><![CDATA[
    internal PriceAttributeSource attributeSource()
    {
        IPriceAttributeProvider provider = this.findProvider();
        if (provider)
        {
            return provider.source(this);
        }

        return this.AttributeSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    internal void moveUp()
    {
        if (this.Status == PriceAttributeStatus::Published)
        {
            // Published attributes cannot be modified.
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        PriceAttributeDefinition prevDefinition;

        ttsbegin;

        select firstonly forupdate prevDefinition
        order by prevDefinition.DisplayOrder desc
        where prevDefinition.Status != PriceAttributeStatus::Published
            && prevDefinition.Status != PriceAttributeStatus::Deleted
            && prevDefinition.DisplayOrder < this.DisplayOrder;

        if (!prevDefinition)
        {
            // There is no one has lower display order.
            // This one is already the top.
        }
        else
        {
            int tempOrder = prevDefinition.DisplayOrder;
            prevDefinition.DisplayOrder = this.DisplayOrder;
            this.DisplayOrder = tempOrder;

            prevDefinition.update();
            this.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    internal void moveDown()
    {
        if (this.Status == PriceAttributeStatus::Published)
        {
            // Published attributes cannot be modified.
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        PriceAttributeDefinition nextDefinition;

        ttsbegin;

        select firstonly forupdate nextDefinition
        order by nextDefinition.DisplayOrder asc
        where nextDefinition.Status != PriceAttributeStatus::Published
            && nextDefinition.Status != PriceAttributeStatus::Deleted
            && nextDefinition.DisplayOrder > this.DisplayOrder;

        if (!nextDefinition)
        {
            // There is no one has larger display order.
            // This one is already the bottom.
        }
        else
        {
            int tempOrder = nextDefinition.DisplayOrder;
            nextDefinition.DisplayOrder = this.DisplayOrder;
            this.DisplayOrder = tempOrder;

            nextDefinition.update();
            this.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markDelete</Name>
				<Source><![CDATA[
    internal void markDelete()
    {
        if (this.Status == PriceAttributeStatus::Published)
        {
            // Published attributes cannot be modified.
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        ttsbegin;

        this.Status = PriceAttributeStatus::Deleted;
        this.DisplayOrder = -1;

        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDraft</Name>
				<Source><![CDATA[
    internal static void copyDraft(PriceComponent _component)
    {
        ttsbegin;

        PriceAttributeDefinition::clearDraft(_component);

        PriceAttributeDefinition definition;
        PriceAttributeDefinition draftDefinition; // We need 2 table buffers here - see ADO #885907.
        PriceAttributeStatus newStatus = PriceAttributeStatus::Draft;

        insert_recordset draftDefinition
            (PriceComponent, Name, AttributeType, AttributeSource, PredefinedField, EcoResAttributeRecId, Status, Sequence, DisplayOrder, PriorityNumber)
        select PriceComponent, Name, AttributeType, AttributeSource, PredefinedField, EcoResAttributeRecId, newStatus, Sequence, DisplayOrder, PriorityNumber
        from definition
        where definition.PriceComponent == _component && definition.Status == PriceAttributeStatus::Published;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDraft</Name>
				<Source><![CDATA[
    internal static void clearDraft(PriceComponent _component)
    {
        ttsbegin;
            
        PriceAttributeDefinition definition;
        delete_from definition where definition.PriceComponent == _component && definition.Status != PriceAttributeStatus::Published;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publish</Name>
				<Source><![CDATA[
    internal static void publish(PriceComponent _component)
    {
        PriceAttributeDefinition definition;
        // To publish -
        // 1. Lock the table.
        ttsbegin;
        select pessimisticlock definition where definition.PriceComponent == _component;

        // 2. Delete published records.
        delete_from definition where definition.PriceComponent == _component && definition.Status == PriceAttributeStatus::Published;

        // 3. Find an appropriate sequence number for Added attributes.
        Set sequence = new Set(Types::Integer);
        for (int i = 0; i < #MaxSequenceNumber; i++)
        {
            sequence.add(i);
        }
        
        while select definition
        where definition.PriceComponent == _component
            && definition.Status == PriceAttributeStatus::Draft
        {
            sequence.remove(definition.Sequence);
        }

        while select forupdate definition
        where definition.PriceComponent == _component
            && definition.Status == PriceAttributeStatus::Added
        {
            if (sequence.empty())
            {
                throw error(strFmt('@UnifiedPricing:MaxAttributeNumber', #MaxSequenceNumber));
            }

            SetEnumerator se = sequence.getEnumerator();
            se.moveNext();
            
            definition.Sequence = se.current();
            definition.update();
            sequence.remove(definition.Sequence);
        }

        // 4. Move draft records to published.
        // And copy to default component code.
        PriceComponentCode componentCode = PriceComponentCode::findOrCreateDefault(_component);
        PriceComponentCodeAttribute::clearDraft(_component, componentCode.Name);

        RecordInsertList publishedList = new RecordInsertList(tableNum(PriceAttributeDefinition));
        RecordInsertList componentCodeAttributeList = new RecordInsertList(tableNum(PriceComponentCodeAttribute));
        while select PriceComponent, Name, AttributeType, AttributeSource, PredefinedField, EcoResAttributeRecId, Status, DisplayOrder, PriorityNumber
        from definition
        where definition.PriceComponent == _component && definition.Status != PriceAttributeStatus::Published
        {
            if (definition.Status != PriceAttributeStatus::Deleted)
            {
                PriceAttributeDefinition published;
                published.data(definition);
                published.Status = PriceAttributeStatus::Published;
                publishedList.add(published);
            }

            PriceComponentCodeAttribute draftComponentAttribute;
            draftComponentAttribute.PriceComponent = _component;
            draftComponentAttribute.PriceComponentCodeName = componentCode.Name;
            draftComponentAttribute.PriceAttributeName = definition.Name;
            draftComponentAttribute.PriorityNumber = definition.PriorityNumber;
            draftComponentAttribute.Status = definition.Status;
            draftComponentAttribute.DisplayOrder = definition.DisplayOrder;
            
            componentCodeAttributeList.add(draftComponentAttribute);
        }
        publishedList.insertDatabase();
        componentCodeAttributeList.insertDatabase();

        // 5. Clear draft.
        delete_from definition where definition.PriceComponent == _component && definition.Status != PriceAttributeStatus::Published;
        ttscommit;

        // 6. Publish default component code in a seperate transaction.
        // Because publishing component code comes with rule modifications - and will in a different batch.
        PriceComponentCodeAttribute::publish(_component, componentCode.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextDisplayOrder</Name>
				<Source><![CDATA[
    internal static DisplayOrder nextDisplayOrder(PriceComponent _component)
    {
        PriceAttributeDefinition definition;

        select maxof(DisplayOrder) from definition where definition.PriceComponent == _component && definition.Status != PriceAttributeStatus::Published;

        return definition.DisplayOrder + 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FormRef>PriceAttributeDefinition</FormRef>
	<Label>@UnifiedPricing:PriceAttribute</Label>
	<OperationalDomain>Company</OperationalDomain>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>PriceComponent</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>PriceComponetName</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceComponent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceComponent</Name>
			<AllowEdit>No</AllowEdit>
			<Mandatory>Yes</Mandatory>
			<EnumType>PriceComponent</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>Name</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeType</Name>
			<AllowEdit>No</AllowEdit>
			<Mandatory>Yes</Mandatory>
			<EnumType>PriceAttributeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeSource</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>PriceAttributeSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PredefinedField</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>PricePredefinedField</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EcoResAttributeRecId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS300707</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<Visible>No</Visible>
			<EnumType>PriceAttributeStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<ExtendedDataType>PriceAttributeSequence</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>DisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PriorityNumber</Name>
			<ExtendedDataType>RetailPricingPriorityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@UnifiedPricing:Rank</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PriceComponetName</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PriceComponent</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EcoResAttributeRecId</Name>
					<Field>EcoResAttributeRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>