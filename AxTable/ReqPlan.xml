<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqPlan extends common
{
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createNewInactiveVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the new inactive version of the master plan.
    /// </summary>
    /// <returns>
    ///     The new inactive plan version.
    /// </returns>
    public ReqPlanVersion createNewInactiveVersion()
    {
        return ReqPlanVersion::createInactive(this.ReqPlanId, this.dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the current record in the <c>ReqPlanVersion</c> table.
    /// </summary>
    /// <remarks>
    ///    Related <c>ReqPlanVersion</c>, <c>ReqPlanSched</c> and <c>ReqPlanForecast</c> records are not deleted per delete action,
    ///    because they must be deleted before the <c>ReqPlan</c> record is deleted.
    /// </remarks>
    public void delete()
    {
        ReqPlanVersion  reqPlanVersion;
        ReqPlanSched    reqPlanSched;
        ReqPlanForecast reqPlanForecast;

        ttsbegin;
        // will fall back to record by record delete, because the table has a delete() method
        delete_from reqPlanVersion
            where reqPlanVersion.ReqPlanId         == this.ReqPlanId
               && reqPlanVersion.ReqPlanDataAreaId == this.DataAreaId;

        delete_from reqPlanSched
            where reqPlanSched.ReqPlanIdSched == this.ReqPlanId;

        delete_from reqPlanForecast
            where reqPlanForecast.ReqPlanIdForecast == this.ReqPlanId;

        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the active plan version.
    /// </summary>
    /// <returns>
    ///     The active plan version.
    /// </returns>
    public ReqPlanVersion findActiveVersion()
    {
        return ReqPlanVersion::findActiveReqPlanId(this.ReqPlanId, this.dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the active plan version.
    /// </summary>
    /// <returns>
    ///     The active plan version.
    /// </returns>
    /// <remarks>
    ///     Throws an error if there is no active version.
    /// </remarks>
    public ReqPlanVersion getActiveVersion()
    {
        ReqPlanVersion planVersion = this.findActiveVersion();

        if (!planVersion)
        {
            throw error(strFmt("@SYS333777", this.ReqPlanId));
        }

        return planVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqPlanForecast</Name>
				<Source><![CDATA[
    void initFromReqPlanForecast(ReqPlanForecast _reqPlanForecast)
    {
        this.ReqPlanId  = _reqPlanForecast.ReqPlanIdForecast;
        this.Name       = _reqPlanForecast.Name;
        this.PlanType   =  ReqPlanType::ForecastPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqPlanSched</Name>
				<Source><![CDATA[
    void initFromReqPlanSched(ReqPlanSched _reqPlanSched)
    {
        this.ReqPlanId      = _reqPlanSched.ReqPlanIdSched;
        this.Name           = _reqPlanSched.Name;
        this.PlanType       = ReqPlanType::SchedPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Persists a record in the database when super is called.
    /// </summary>
    /// <remarks>
    ///    A system defined method provided as an event to apply logic before and after a record is inserted
    ///    in the database.
    /// </remarks>
    public void insert()
    {
        ReqPlanForecast reqPlanForecast;
        ReqPlanSched    reqPlanSched;

        ttsbegin;

        super();

        ReqPlanVersion::createActive(this.ReqPlanId
                                     ,
                                     this.dataAreaId
                                     );

        if (   this.PlanType == ReqPlanType::SchedPlan
            && ! ReqPlanSched::find(this.ReqPlanId))
        {
            reqPlanSched.initFromReqPlan(this);
            reqPlanSched.initValue();
            reqPlanSched.insert();
        }

        if (   this.PlanType == ReqPlanType::ForecastPlan
            && ! ReqPlanForecast::find(this.ReqPlanId))
        {
            reqPlanForecast.initFromReqPlan(this);
            reqPlanForecast.initValue();
            reqPlanForecast.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetReqPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ReqPlanVersion</c> record associated with the current
    /// <c>ReqPlan</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// Indicates whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// The <c>ReqPlanVersion</c> record associated with the current
    /// <c>ReqPlan</c> record.
    /// </returns>
    public ReqPlanVersion mcrGetReqPlanVersion(boolean _forUpdate = false)
    {
        return ReqPlanVersion::findActiveReqPlanId(this.ReqPlanId, this.DataAreaId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInitFromReqPlanContinuity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ReqPlan</c> table fields for continuity master planning.
    /// </summary>
    /// <param name="_reqPlanContinuity">
    /// A record in the <c>MCRReqPlanContinuity</c> table.
    /// </param>
    public void mcrInitFromReqPlanContinuity(MCRReqPlanContinuity _reqPlanContinuity)
    {
        this.ReqPlanId  = _reqPlanContinuity.ReqPlanIdContinuity;
        this.Name       = _reqPlanContinuity.Name;
        this.PlanType   =  ReqPlanType::MCRContPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchActiveVersionTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Redirects the system to the new version of the master plan.
    /// </summary>
    /// <param name="_reqPlanVersion">
    ///     The master plan version.
    /// </param>
    public void switchActiveVersionTo(ReqPlanVersion _reqPlanVersion)
    {
        if (_reqPlanVersion.ReqPlanId != this.ReqPlanId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        try
        {
            ttsbegin;

            ReqPlanVersion reqPlanVersionActive = ReqPlanVersion::findActiveReqPlanId(this.ReqPlanId, this.DataAreaId, true);
            ReqPlanVersion reqPlanVersionInactive = ReqPlanVersion::findWithCacheDisabled(_reqPlanVersion.RecId, true);

            if (!this.arePlanVersionsReadyToSwitch(reqPlanVersionActive, reqPlanVersionInactive))
            {
                this.throwSwitchVersionError(_reqPlanVersion, reqPlanVersionActive);
            }

            this.switchActiveVersionTo_beforeUpdatingPlanVersions(reqPlanVersionActive, reqPlanVersionInactive);

            reqPlanVersionActive.Active = NoYes::No;
            reqPlanVersionActive.update();

            reqPlanVersionInactive.Active = NoYes::Yes;
            reqPlanVersionInactive.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>arePlanVersionsReadyToSwitch</Name>
				<Source><![CDATA[
    private boolean arePlanVersionsReadyToSwitch(ReqPlanVersion _reqPlanVersionActive, ReqPlanVersion _reqPlanVersionInactive)
    {
        return _reqPlanVersionInactive.RecId != 0
            && _reqPlanVersionInactive.Active == NoYes::No
            && _reqPlanVersionActive.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwSwitchVersionError</Name>
				<Source><![CDATA[
    private void throwSwitchVersionError(ReqPlanVersion _inactive, ReqPlanVersion _active)
    {
        str errorMessage = strFmt("@SCMPlanning:ReqPlanCannotFindInactiveVersionToSwitch", _inactive.RecId, _active.RecId);

        var logger = SysInstrumentationLoggerFactory::createLogger(tablestr(ReqPlan));
        logger.logInformation(errorMessage);

        throw error(errorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchActiveVersionTo_beforeUpdatingPlanVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is meant to be a hook for testing, to make it possible to test the
    /// deletion of active and inactive versions before the actual switch happens.
    /// </summary>
    private void switchActiveVersionTo_beforeUpdatingPlanVersions(ReqPlanVersion _activePlanVersion, ReqPlanVersion _inactivePlanVersion)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultReqPlanForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default forecast plan.
    /// </summary>
    /// <returns>
    /// A string that contains a forecast plan ID.
    /// </returns>
    public static ReqPlanIdForecast createDefaultReqPlanForecast()
    {
        ReqPlan             reqPlan;
        ReqPlanForecast     reqPlanForecast;
        ReqParameters       reqParameters;

        ReqPlanIdForecast   defaultReqPlanIdForecast = "@SYS344592";

        ttsbegin;

        reqPlan = ReqPlan::findReqPlanId(defaultReqPlanIdForecast,true);

        if (! reqPlan)
        {
            reqPlan.ReqPlanId   = defaultReqPlanIdForecast;
            reqPlan.Name        = "@SYS26467";
            reqPlan.PlanType    = ReqPlanType::ForecastPlan;
            reqPlan.insert();
        }

        if (reqPlan.PlanType == ReqPlanType::ForecastPlan)
        {
            reqPlanForecast = ReqPlanForecast::find(defaultReqPlanIdForecast);
            if (! reqPlanForecast)
            {
                reqPlanForecast.initFromReqPlan(reqPlan);
                reqPlanForecast.initValue();
                reqPlanForecast.insert();
            }

            reqParameters = ReqParameters::find(true);

            if (reqParameters.RecId)
            {
                reqParameters.CurrentReqPlanIdForecast  = reqPlanForecast.ReqPlanIdForecast;
                reqParameters.update();
            }
        }

        ttscommit;

        return reqPlanForecast.ReqPlanIdForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultReqPlanSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default master plan.
    /// </summary>
    /// <returns>
    /// A string that contains a master plan ID.
    /// </returns>
    public static ReqPlanIdSched createDefaultReqPlanSched()
    {
        ReqPlan         reqPlan;
        ReqPlanSched    reqPlanSched;
        ReqParameters   reqParameters;

        ReqPlanIdSched  defaultReqPlanIdSched = "@SYS344591";

        ttsbegin;

        reqPlan = ReqPlan::findReqPlanId(defaultReqPlanIdSched,true);

        if (! reqPlan)
        {
            reqPlan.ReqPlanId   = defaultReqPlanIdSched;
            reqPlan.Name        = "@SYS26467";
            reqPlan.PlanType    = ReqPlanType::SchedPlan;
            reqPlan.insert();
        }

        if (reqPlan.PlanType == ReqPlanType::SchedPlan)
        {
            reqPlanSched = ReqPlanSched::find(defaultReqPlanIdSched);

            if (! reqPlanSched.RecId)
            {
                reqPlanSched.initFromReqPlan(reqPlan);
                reqPlanSched.initValue();
                reqPlanSched.insert();
            }

            reqParameters = ReqParameters::find(true);

            if (reqParameters.RecId)
            {
                reqParameters.CurrentReqPlanIdSchedDynamic  = reqPlanSched.ReqPlanIdSched;
                reqParameters.CurrentReqPlanIdSchedStatic   = reqPlanSched.ReqPlanIdSched;
                reqParameters.AutoCopyStaticPlan            = NoYes::No;
                reqParameters.update();
            }
        }

        ttscommit;

        return reqPlanSched.ReqPlanIdSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean  exist(ReqPlanId  reqPlan)
    {
        return reqPlan && (select firstonly reqPlan
                index hint PlanIdx
                where reqPlan.ReqPlanId == reqPlan
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>ReqPlan</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>ReqPlan</c> table; otherwise, an empty record.
    /// </returns>
    public static ReqPlan find(RecId _recId, boolean _forUpdate = false)
    {
        ReqPlan reqPlan;

        reqPlan.selectForUpdate(_forUpdate);

        select firstonly reqPlan
        where            reqPlan.RecId == _recId;

        return reqPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReqPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>ReqPlan</c> table.
    /// </summary>
    /// <param name="_reqPlanId">
    ///     The ID of the master plan.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>ReqPlan</c> table; otherwise, an empty record.
    /// </returns>
    static ReqPlan findReqPlanId(
        ReqPlanId      _reqPlanId,
        boolean        _forUpdate = false)
    {
        ReqPlan reqPlan;

        reqPlan.selectForUpdate(_forUpdate);

        if (_reqPlanId)
        {
            select firstonly reqPlan
                where reqPlan.ReqPlanId == _reqPlanId;
        }

        return reqPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    static Name name(ReqPlanId reqPlan)
    {
        return ReqPlan::findReqPlanId(reqPlan).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS124127</DeveloperDocumentation>
	<FormRef>ReqPlanSched</FormRef>
	<Label>@SYS25324</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ReqPlanId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PlanIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>PlanIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ReqLog</Name>
			<Relation></Relation>
			<Table>ReqLog</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ReqPlanSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ReqPlanSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ReqPlanVersion</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ReqPlanVersion</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Forecast</Name>
			<Label>@SYS13699</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForecastModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseForecastSupply</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseForecastDemand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastReduceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRContinuity</Name>
			<Label>@MCR37208</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRReqPlanIdContinuity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForecastModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Forecast</ConfigurationKey>
			<ExtendedDataType>ForecastModelHeadId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS58021</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForecastReduceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqReduceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRReqPlanIdContinuity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRReqPlanIdContinuity</ExtendedDataType>
			<Label>@MCR31321</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PlanType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqPlanType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseForecastDemand</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqUseForecastDemand</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseForecastSupply</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqUseForecastSupply</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReqPlanId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ForecastModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastModel</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ForecastModelId</Name>
					<Field>ForecastModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>HeadingSub::Heading</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRReqPlanContinuity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>MCRReqPlanContinuity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRReqPlanIdContinuity</Name>
					<SourceEDT>MCRReqPlanIdContinuity</SourceEDT>
					<Field>MCRReqPlanIdContinuity</Field>
					<RelatedField>ReqPlanIdContinuity</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>