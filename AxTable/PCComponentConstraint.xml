<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCComponentConstraint</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCComponentConstraint extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);

        PCConstraint::find(this.Constraint).accept(_visitor);

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates the attribute and the reference.
    /// </summary>
    /// <param name="_duplicateComponent">
    ///    A referenced record ID of a <c>PCClass</c> record.
    /// </param>
    /// <param name="_duplicatedComponentsMap">
    ///    A map that contains pairs of IDs that link the original components to duplicated components.
    /// </param>
    /// <param name="_duplicatedAttributesMap">
    ///    A map that contains pairs of IDs that link the original attributes to duplicated attributes.
    /// </param>
    /// <returns>
    ///    The duplicated record.
    /// </returns>
    /// <remarks>
    /// The argument duplicated attributes map has been added.
    /// </remarks>
    public PCComponentConstraint duplicate(RefRecId _duplicateComponent, Map _duplicatedComponentsMap, Map _duplicatedAttributesMap)
    {
        PCComponentConstraint duplicate;
        PCTableConstraintColumnCategoryAttribute constraintRelation;

        PCConstraint constraint = PCConstraint::find(this.Constraint);

        duplicate.Constraint = constraint.duplicate().RecId;
        duplicate.Name = this.Name;
        duplicate.ComponentClass = _duplicateComponent;
        duplicate.insert();
        if (constraint is PCTableConstraint)
        {
            while select constraintRelation
                where constraintRelation.TableConstraint == constraint.RecId
            {
                constraintRelation.duplicate(duplicate.Constraint, _duplicatedComponentsMap, _duplicatedAttributesMap);
            }
        }

        return duplicate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTableConstraintName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the table constraint name.
    /// </summary>
    /// <param name="_set">
    /// true if table constraint name is set; otherwise, false.
    /// </param>
    /// <param name="_name">
    /// The name of the table constraint.
    /// </param>
    /// <returns>
    /// The name of the table constraint.
    /// </returns>
    edit PCTableConstraintName editTableConstraintName(boolean _set, PCTableConstraintName _name)
    {
        PCTableConstraint       tableConstraint;
        PCConstraint            constraint = PCConstraint::find(this.Constraint);

        tableConstraint = PCTableConstraint::find(constraint.RecId, true);

        if (_set)
        {
            ttsbegin;
            tableConstraint.TableConstraintDefintion = PCTableConstraintDefinition::findByName(_name).RecId;
            tableConstraint.write();
            this.Constraint = tableConstraint.RecId;
            ttscommit;
        }
        return PCTableConstraintDefinition::find(tableConstraint.TableConstraintDefintion).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConstraintType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the constraint type that is associated with the current constraint.
    /// </summary>
    /// <returns>
    ///    The type that is related to the current constraint.
    /// </returns>
    /// <remarks>
    ///    This edit method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public display PCConstraintType getConstraintType()
    {
        PCConstraint constraint;

        select firstonly RecId, InstanceRelationType from constraint where constraint.RecId == this.Constraint;
        if (constraint is PCTableConstraint)
        {
            return PCConstraintType::TableConstraint;
        }
        else
        {
            return PCConstraintType::ExpressionConstraint;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the constraint expression for this constraint.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the expression should be set.
    /// </param>
    /// <param name="_expression">
    /// The expression value to use when the <paramref name="set"/> parameter is true.
    /// </param>
    /// <returns>
    /// The current string value of the expression.
    /// </returns>
    /// <remarks>
    /// This edit method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public edit FreeTxt getSetExpression(boolean _set, FreeTxt _expression)
    {
        PCExpressionConstraint  expression;
        PCConstraint            constraint = PCConstraint::find(this.Constraint);
        boolean isExpression  = (constraint.getInstanceRelationType() == tableStr(PCExpressionConstraint));

        if (_set)
        {
            ttsbegin;
            expression = PCExpressionConstraint::find(constraint.RecId, true);
            expression.Expression = _expression;
            expression.write();
            this.Constraint = expression.RecId;
            ttscommit;
        }
        else
        {
            expression = PCExpressionConstraint::find(this.Constraint, false);
        }
        return expression.Expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCComponentConstraint</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCComponentConstraint::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCComponentConstraint</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCComponentConstraint</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentConstraint find(RefRecId _recId, boolean _forupdate = false)
    {
        PCComponentConstraint record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153078</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS153077</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameComponent</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCConstraint</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCConstraint</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Constraint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Constraint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ComponentClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS129746</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Constraint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS153075</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCConstraintName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameComponent</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ComponentClass</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ComponentClass</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCClass</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ComponentContainer</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ConstraintContained</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ComponentClass</Name>
					<Field>ComponentClass</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Constraint</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PCConstraint</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConstraintContained</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ComponentContainer</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Constraint</Name>
					<Field>Constraint</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>