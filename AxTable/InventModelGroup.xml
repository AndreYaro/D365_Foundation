<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventModelGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventModelGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteNonDefaultWarehouseItems</Name>
				<Source><![CDATA[
    private void deleteNonDefaultWarehouseItems()
    {
        InventItemLocation      inventItemLocation;
        InventModelGroupItem    inventModelGroupItem;

        InventDimId             inventDimIdBlank;

        while select ItemDataAreaId from inventModelGroupItem
            group by ItemDataAreaId
            where inventModelGroupItem.ModelGroupId             == this.ModelGroupId
               && inventModelGroupItem.ModelGroupDataAreaId     == this.DataAreaId
        {
            changecompany(inventModelGroupItem.ItemDataAreaId)
            {
                inventDimIdBlank = InventDim::inventDimIdBlank();

                delete_from inventItemLocation
                    where inventItemLocation.InventDimId != inventDimIdBlank
                exists join inventModelGroupItem
                    where inventModelGroupItem.ModelGroupId             == this.ModelGroupId
                       && inventModelGroupItem.ModelGroupDataAreaId     == this.DataAreaId
                       && inventModelGroupItem.ItemId                   == inventItemLocation.ItemId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any inventory transactions exist for this item model group.
    /// </summary>
    /// <returns>
    /// true if <c>InventTrans</c> records exist for this item; otherwise false.
    /// </returns>
    public boolean hasInventTrans()
    {
        InventTable             inventTable;
        InventModelGroupItem    inventModelGroupItem;
        InventTrans             inventTrans;

        select firstonly RecId from inventTable
        exists join inventModelGroupItem
        where inventModelGroupItem.ItemId               == inventTable.ItemId
           && inventModelGroupItem.ItemDataAreaId       == inventTable.DataAreaId
           && inventModelGroupItem.ModelGroupId         == this.ModelGroupId
           && inventModelGroupItem.ModelGroupDataAreaId == this.DataAreaId
        exists join inventTrans
        where inventTrans.ItemId == inventTable.ItemId;

        if (   !inventTable.RecId
            && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            WHSInventReserve inventReserve;

            select firstonly RecId from inventTable
            exists join inventModelGroupItem
            where inventModelGroupItem.ItemId               == inventTable.ItemId
               && inventModelGroupItem.ItemDataAreaId       == inventTable.DataAreaId
               && inventModelGroupItem.ModelGroupId         == this.ModelGroupId
               && inventModelGroupItem.ModelGroupDataAreaId == this.DataAreaId
            exists join inventReserve
            where  inventReserve.ItemId == inventTable.ItemId
                && inventReserve.AvailPhysical != 0;
        }

        return (inventTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>
        super();

        this.PostOnhandPhysical     = NoYes::Yes;
        this.PostOnhandFinancial    = NoYes::Yes;

        this.NegativeFinancial   = NoYes::Yes;
        this.InventModel         = InventModel::FIFO;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.InventModelSecCur_RU = InventModel::FIFO;
        }
        // </GEERU>

        // Default the reservation flag to Sales Parameter Default (3)
        this.MCRReservation       = MCRItemReservation::SalesDefault;

        this.PdsVendorCheckItem  = PdsVendorCheckItem::WarningOnly;

        this.StockedProduct         = NoYes::Yes;
        this.PostPhysicalPurchase   = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventModelType</Name>
				<Source><![CDATA[
    InventModelType inventModelType()
    {
        return InventModelTypeFactory::construct().getInventModelTypeFromInventModel(this.InventModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventModelTypeSecCur_RU</Name>
				<Source><![CDATA[
    public InventModelType inventModelTypeSecCur_RU()
    {
        InventModelType  ret;

        ret = InventModelTypeFactory::construct().getInventModelTypeFromInventModel(this.InventModelSecCur_RU);

        if (ret)
        {
            ret.parmInventTransCurrency_RU(InventTransCurrency_RU::SecondaryCur);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the policy is in inventory.
    /// </summary>
    /// <returns>
    /// true if the <c>StockedProduct</c> field is set to a <c>NoYes::Yes</c> value; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Inventory transactions will exist for items or services where this method returns true.
    /// </remarks>
    public boolean isStocked()
    {
        return this.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        // <GCN><GEERU>
        #ISOCountryRegionCodes
        // </GEERU></GCN>
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(InventModelGroup, PostOnhandFinancial):
                if (this.inventModelType().stdCostBased())
                    this.PostOnhandPhysical = this.PostOnhandFinancial;
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                    && this.inventModelTypeSecCur_RU().stdCostBased())
                {
                    this.PostOnhandFinancialSecCur_RU = this.PostOnhandPhysical;
                }
                // </GEERU>
                break;

            case fieldStr(InventModelGroup, PostOnhandPhysical):
                if (this.inventModelType().stdCostBased())
                {
                    this.PostOnhandFinancial = this.PostOnhandPhysical;
                    // <GEERU>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                        && this.inventModelTypeSecCur_RU().stdCostBased())
                    {
                        this.PostOnhandFinancialSecCur_RU = this.PostOnhandPhysical;
                    }
                    // </GEERU>
                }
                if (this.PostOnhandPhysical == NoYes::Yes)
                {
                    this.PostPhysicalPurchase   = NoYes::Yes;
                }
                break;

            case fieldStr(InventModelGroup, InventModel):
                this.defaultInclPhysicalValueInCost();
                this.defaultStandardCost();
                this.defaultInventCostRecalcIncludePhysicalValueForAverageModel();

                // <GCN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN])
                    && this.InventModel == InventModel::MonthlyAverageCost)
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00005, funcName());
                    this.StandardCost = NoYes::No;
                }
                // </GCN>
                break;

            case fieldStr(InventModelGroup, ReserveByDate):
                this.defaultReserveReversed();
                break;

            case fieldStr(InventModelGroup, PdsSameLot):
                this.defaultPdsConsReq();
                break;

            case fieldStr(InventModelGroup, StockedProduct):
                this.defaultNegativePhysical();
                this.defaultStandardCost();
                this.defaultInclPhysicalValueInCost();
                this.defaultQuarantineControl();
                this.defaultMandatoryPick();
                this.defaultMandatoryRegister();
                this.defaultMandatoryWMSOrder();
                this.defaultReserveByDate();
                this.defaultReserveReversed();
                this.defaultPostPhysicalRevenue();
                this.defaultInventCostRecalcIncludePhysicalValueForAverageModel();

                if (this.StockedProduct == NoYes::Yes)
                {
                    // The following attributes are now applicable and are set to their initial value.
                    this.PostOnhandPhysical     = NoYes::Yes;
                    this.PostOnhandFinancial    = NoYes::Yes;
                    this.PostPhysicalPurchase   = NoYes::Yes;
                }
                else
                {
                    // The following attributes are not applicable (set to their initial value) or constrained to one value.
                    this.NegativeFinancial          = NoYes::Yes;

                    this.InventModel                = InventModel::FIFO;

                    this.PostOnhandPhysical         = NoYes::No;
                    this.PostOnhandFinancial        = NoYes::No;

                    // <GEERU>
                    this.InventModelSecCur_RU           = InventModel::FIFO;
                    this.PostOnhandFinancialSecCur_RU   = NoYes::No;
                    // </GEERU>
                }
                break;

            // <GEERU>

            case fieldStr(InventModelGroup, InventModelSecCur_RU):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && ! this.inventModelTypeSecCur_RU().isSettled())
                {
                    this.InclPhysicalValueInCost      = NoYes::No;
                    this.StandardCost                 = NoYes::No;
                }
                break;

            case fieldStr(InventModelGroup, PostOnhandFinancialSecCur_RU):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    if (this.inventModelTypeSecCur_RU().stdCostBased())
                    {
                        this.PostOnhandPhysical           = this.PostOnhandFinancialSecCur_RU;
                    }

                    if (this.inventModelType().stdCostBased())
                    {
                        this.PostOnhandFinancial          = this.PostOnhandPhysical;
                    }
                }
                break;
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostPriceFieldsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the fields in the <c>CostPrice</c> field group.
    /// </summary>
    /// <param name="_inventModelGroup_ds">
    ///    The <c>InventModelGroup</c> data source on which to enable or disable fields.
    /// </param>
    void setCostPriceFieldsEnabled(FormDataSource _inventModelGroup_ds)
    {
        // <GEERU>
        boolean allowEdit;
        #isoCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            allowEdit   = this.StockedProduct && this.inventModelType().isSettled() && this.inventModelTypeSecCur_RU().isSettled();
        }
        else
        {
            allowEdit   = this.StockedProduct && this.inventModelType().isSettled();
        }
        // </GEERU>

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, InclPhysicalValueInCost)).allowEdit(allowEdit);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, InclPhysicalValueInCost)).skip(!allowEdit);

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, StandardCost)).allowEdit(allowEdit);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, StandardCost)).skip(!allowEdit);

        if (InventCostRecalcIncludePhysicalValueForAverageModelFeature::isEnabled())
        {
            _inventModelGroup_ds.object(fieldNum(InventModelGroup, InventCostRecalcIncludePhysicalValueForAverageModel)).allowEdit(allowEdit && this.InclPhysicalValueInCost && (this.InventModel == InventModel::AverageCost || this.InventModel == InventModel::AverageCostDate || this.InventModel == InventModel::MonthlyAverageCost));
            _inventModelGroup_ds.object(fieldNum(InventModelGroup, InventCostRecalcIncludePhysicalValueForAverageModel)).skip(!(allowEdit && this.InclPhysicalValueInCost && (this.InventModel == InventModel::AverageCost || this.InventModel == InventModel::AverageCostDate || this.InventModel == InventModel::MonthlyAverageCost)));
            _inventModelGroup_ds.object(fieldNum(InventModelGroup, InventCostRecalcIncludePhysicalValueForAverageModel)).visible(this.InventModel == InventModel::AverageCost || this.InventModel == InventModel::AverageCostDate || this.InventModel == InventModel::MonthlyAverageCost);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostOnhandPhysicalFieldsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the fields that are applicable only when the <c>PostOnhandPhysical</c> field is
    ///    selected.
    /// </summary>
    /// <param name="_inventModelGroup_ds">
    ///    The <c>InventModelGroup</c> data source on which to enable or disable fields.
    /// </param>
    public void setPostOnhandPhysicalFieldsEnabled(FormDataSource _inventModelGroup_ds)
    {
        boolean     allowEdit = !(this.StockedProduct && this.PostOnhandPhysical);

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostPhysicalPurchase)).allowEdit(allowEdit);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostPhysicalPurchase)).skip(!allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReserveReversedEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the <c>ReserveReversed</c> field depending on applicability.
    /// </summary>
    /// <param name="_inventModelGroup_ds">
    ///    The <c>InventModelGroup</c> data source on which to enable or disable fields.
    /// </param>
    public void setReserveReversedEnabled(FormDataSource _inventModelGroup_ds)
    {
        boolean allowEdit = this.ReserveByDate && this.StockedProduct;
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, ReserveReversed)).allowEdit(allowEdit);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, ReserveReversed)).skip(!allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setstockedProductFieldsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the fields applicable only when the <c>stockedProduct</c> field is selected.
    /// </summary>
    /// <param name="_inventModelGroup_ds">
    /// The <c>InventModelGroup</c> data source to enable or disable fields on.
    /// </param>
    public void setstockedProductFieldsEnabled(FormDataSource _inventModelGroup_ds)
    {
        InventStockedProduct stockedProduct = this.StockedProduct;
        NoYes postOnhandPhysical            = this.PostOnhandPhysical;

        this.setReserveReversedEnabled(_inventModelGroup_ds);
        this.setCostPriceFieldsEnabled(_inventModelGroup_ds);

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, NegativePhysical)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, NegativePhysical)).skip(!stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, NegativeFinancial)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, NegativeFinancial)).skip(!stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, InventModel)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, InventModel)).skip(!stockedProduct);

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, QuarantineControl)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, QuarantineControl)).skip(!stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, MandatoryPick)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, MandatoryPick)).skip(!stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, MandatoryRegister)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, MandatoryRegister)).skip(!stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, MandatoryWMSOrder)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, MandatoryWMSOrder)).skip(!stockedProduct);

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, ReserveByDate)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, ReserveByDate)).skip(!stockedProduct);

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostPhysicalPurchase)).allowEdit(!(stockedProduct && postOnhandPhysical));
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostPhysicalPurchase)).skip(stockedProduct && postOnhandPhysical);

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostPhysicalRevenue)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostPhysicalRevenue)).skip(!stockedProduct);

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostOnhandPhysical)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostOnhandPhysical)).skip(!stockedProduct);

        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostOnhandFinancial)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostOnhandFinancial)).skip(!stockedProduct);

        // <GEERU>
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostOnhandFinancialSecCur_RU)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, PostOnhandFinancialSecCur_RU)).skip(!stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, InventModelSecCur_RU)).allowEdit(stockedProduct);
        _inventModelGroup_ds.object(fieldNum(InventModelGroup, InventModelSecCur_RU)).skip(!stockedProduct);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // If stockedProduct changed from yes to no, we should make sure warehouse items are being deleted.
        if (this.StockedProduct == NoYes::No && this.orig().StockedProduct == NoYes::Yes)
        {
            this.deleteNonDefaultWarehouseItems();

            this.validateAndWriteCrossCompany(tableMethodStr(InventModelGroup, update));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        boolean ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(InventModelGroup, NegativePhysical):
                ret = this.validateNegativePhysicalFieldValue();
                break;

            case fieldStr(InventModelGroup, InventModel):
                if (InventModelGroup::isModelGroupUsedInStdCostConv(this.ModelGroupId))
                {
                    ret = checkFailed(strFmt("@SYS126546", this.ModelGroupId));
                }
                break;
            // <GEERU>
            case fieldStr(InventModelGroup, InventModelSecCur_RU):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                    && InventModelGroup::isModelGroupUsedInStdCostConv(this.ModelGroupId))
                {
                    ret = checkFailed(strFmt("@SYS126546", this.ModelGroupId));
                }
                break;
            // </GEERU>

            case fieldStr(InventModelGroup, StockedProduct):
                // Validate that policy changes do not violate associations to services or items.
                ret = ret && InventModelGroupInventoriedPolicy::newInventModelGroup(this).validateFieldValue(_fieldName, _arrayIndex);
                break;

            case fieldStr(InventModelGroup,PdsCheck):
                if (this.ReserveByDate && this.PdsCheck)
                {
                    ret = checkFailed("@PRO1982");
                }
                break;

            case fieldStr(InventModelGroup,ReserveByDate):
                if (this.ReserveByDate && this.PdsCheck)
                {
                    ret = checkFailed("@PRO1982");
                }
                if (this.ReserveByDate)
                {
                    InventModelGroupItem    inventModelGroupItem;
                    WHSInventEnabled        inventEnabled;

                    select firstonly RecId from inventModelGroupItem
                        where inventModelGroupItem.ModelGroupId         == this.ModelGroupId
                        &&    inventModelGroupItem.ModelGroupDataAreaId == this.DataAreaId
                        exists join inventEnabled
                            where inventEnabled.ItemId  == inventModelGroupItem.ItemId;

                    if (inventModelGroupItem.RecId != 0)
                    {
                        ret = checkFailed("@WAX5372");
                    }
                }
                break;
        }

        ret = ret && this.validateAndWriteCrossCompany(tableMethodStr(InventModelGroup, validateFieldValue), _fieldName);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNegativePhysicalFieldValue</Name>
				<Source><![CDATA[
    private boolean validateNegativePhysicalFieldValue()
    {
        boolean ret = true;

        if (this.RecId && !this.NegativePhysical && this.NegativePhysical != this.orig().NegativePhysical)
        {
            InventModelGroupItem inventModelGroupItem;
            while select ItemId from inventModelGroupItem
                        where inventModelGroupItem.ModelGroupId         == this.ModelGroupId
                           && inventModelGroupItem.ModelGroupDataAreaId == this.DataAreaId
            {
                ret = this.inventModelType().checkNotNegativeOnHand(inventModelGroupItem.ItemId, this.ModelGroupId, InventDimGroupSetup::newItemId(inventModelGroupItem.ItemId), true);
                if (!ret)
                {
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        boolean ret = super();

        ret = ret && this.inventModelType().validateWriteInventModelGroup(this);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ret = ret && this.inventModelTypeSecCur_RU().validateWriteInventModelGroup(this);
        }
        // </GEERU>

        ret = ret && this.validateAndWriteCrossCompany(tableMethodStr(InventModelGroup, validateWrite));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndWriteCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateAndWriteCrossCompany(str _methodName, FieldName _fieldName = '')
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
                QueryRun    queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    InventModelGroup companyInventModelGroup = queryRun.get(this.TableId);
                    DataAreaId company = companyInventModelGroup.DataAreaId;

                    if (companyInventModelGroup && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            InventModelGroup inventModelGroup = InventModelGroup::find(companyInventModelGroup.ModelGroupId);
                            if (inventModelGroup.RecId)
                            {
                                buf2Buf(this, inventModelGroup);

                                switch (_methodName)
                                {
                                    case tableMethodStr(InventModelGroup, validateWrite):
                                        if (!inventModelGroup.inventModelType().validateWriteInventModelGroup(inventModelGroup))
                                        {
                                            return false;
                                        }
                                        break;

                                    case tableMethodStr(InventModelGroup, validateFieldValue):
                                        if (_fieldName == fieldStr(InventModelGroup, NegativePhysical) 
                                            && !inventModelGroup.validateNegativePhysicalFieldValue())
                                        {
                                            return false;
                                        }
                                        break;

                                    case tableMethodStr(InventModelGroup, update):
                                        inventModelGroup.deleteNonDefaultWarehouseItems();
                                        
                                        break;
                                    default:
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(InventModelGroupId _inventModelGroupId)
    {
        if (_inventModelGroupId && ! InventModelGroup::exist(_inventModelGroupId))
            return checkFailed(strFmt(InventModelGroup::txtNotExist(),_inventModelGroupId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(InventModelGroupId _inventModelGroupId)
    {
        return _inventModelGroupId && (select firstonly inventModelGroup
                    where inventModelGroup.ModelGroupId == _inventModelGroupId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static InventModelGroup find(InventModelGroupId _modelGroupId, boolean _forUpdate = false)
    {
        InventModelGroup    inventModelGroup;

        if (_forUpdate)
            inventModelGroup.selectForUpdate(_forUpdate);

        if (_modelGroupId)
            select firstonly inventModelGroup
                where inventModelGroup.ModelGroupId == _modelGroupId;

        return inventModelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isModelGroupUsedInStdCostConv</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether an inventory model group is specified in a standard cost conversion.
    /// </summary>
    /// <param name="_inventModelGroupId">
    ///    The ID of the inventory model group that should be validated.
    /// </param>
    /// <returns>
    ///    true if the inventory model group is either referenced from a standard cost conversion or from a
    ///    standard cost conversion item; otherwise, false.
    /// </returns>
    public static boolean isModelGroupUsedInStdCostConv(InventModelGroupId _inventModelGroupId)
    {
        if ((select firstonly RecId from inventStdCostConv
                where inventStdCostConv.DefaultModelGroupId == _inventModelGroupId).RecId)
        {
            return true;
        }
        if ((select firstonly RecId from inventStdCostConvItem
                where inventStdCostConvItem.ModelGroupId == _inventModelGroupId).RecId)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupStdCostModel_RU</Name>
				<Source><![CDATA[
    public static void lookupStdCostModel_RU(
        FormStringControl      _ctrl,
        InventTransCurrency_RU _inventTransCurrency)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(InventModelGroup), _ctrl);
        Query                query = new Query();
        QueryBuildDataSource ds;
        sysTableLookup.addLookupfield(fieldNum(InventModelGroup, ModelGroupId));
        sysTableLookup.addLookupfield(fieldNum(InventModelGroup, Name));

        ds = query.addDataSource(tableNum(InventModelGroup));

        if (_inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            ds.addRange(fieldNum(InventModelGroup, InventModel)).value(queryValue(InventModel::StdCost));
        }
        else
        {
            ds.addRange(fieldNum(InventModelGroup, InventModelSecCur_RU)).value(queryValue(InventModel::StdCost));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDefaultReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the standard item reservation type.
    /// </summary>
    /// <param name="_mcrItemReservation">
    /// The model group's default reservation.
    /// </param>
    /// <param name="_salesReservation">
    /// The sales reservation (either from <c>SalesParameters</c> or <c>SalesTable</c>).
    /// </param>
    /// <returns>
    /// The default reservation.
    /// </returns>
    public static ItemReservation mcrDefaultReservation(
        MCRItemReservation _mcrItemReservation,
        ItemReservation   _salesReservation)
    {
        ItemReservation returnReservation;

        switch (_mcrItemReservation)
        {
            case MCRItemReservation::Automatic:
                returnReservation = ItemReservation::Automatic;
                break;
            case MCRItemReservation::Manual:
                returnReservation = ItemReservation::None;
                break;
            case MCRItemReservation::Explosion:
                returnReservation = ItemReservation::Explosion;
                break;
            default:
                returnReservation = _salesReservation;
                break;
        }
        return returnReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS56362";
    }

]]></Source>
			</Method>
			<Method>
				<Name>usingPrincipleNotSettled</Name>
				<Source><![CDATA[
    public static boolean usingPrincipleNotSettled()
    {
        InventModelGroup        inventModelGroup;

        while select inventModelGroup
        {
            if (! inventModelGroup.inventModelType().isSettled())
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usingPrincipleSettled</Name>
				<Source><![CDATA[
    public static boolean usingPrincipleSettled()
    {
        InventModelGroup        inventModelGroup;

        while select inventModelGroup
        {
            if (inventModelGroup.inventModelType().isSettled())
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(InventModelGroup, InclPhysicalValueInCost),
                [
                    fieldNum(InventModelGroup, InventModel),
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ],
            [fieldNum(InventModelGroup, StandardCost),
                [
                    fieldNum(InventModelGroup, InventModel),
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ],
            [fieldNum(InventModelGroup, InventCostRecalcIncludePhysicalValueForAverageModel),
                [
                    fieldNum(InventModelGroup, InventModel),
                    fieldNum(InventModelGroup, StockedProduct),
                    fieldNum(InventModelGroup, InclPhysicalValueInCost)
                ]
            ],
            [fieldNum(InventModelGroup, ReserveReversed),
                [
                    fieldNum(InventModelGroup, ReserveByDate),
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ],
            [fieldNum(InventModelGroup, PdsConsReq),
                [
                    fieldNum(InventModelGroup, PdsSameLot)
                ]
            ],
            [fieldNum(InventModelGroup, NegativePhysical),
                [
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ],
            [fieldNum(InventModelGroup, QuarantineControl),
                [
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ],
            [fieldNum(InventModelGroup, MandatoryPick),
                [
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ],
            [fieldNum(InventModelGroup, MandatoryRegister),
                [
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ],
            [fieldNum(InventModelGroup, MandatoryWMSOrder),
                [
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ],
            [fieldNum(InventModelGroup, ReserveByDate),
                [
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ],
            [fieldNum(InventModelGroup, PostPhysicalRevenue),
                [
                    fieldNum(InventModelGroup, StockedProduct)
                ]
            ]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventModelGroup, InclPhysicalValueInCost): this.defaultInclPhysicalValueInCost(); break;
            case fieldNum(InventModelGroup, StandardCost): this.defaultStandardCost(); break;
            case fieldNum(InventModelGroup, InventCostRecalcIncludePhysicalValueForAverageModel): this.defaultInventCostRecalcIncludePhysicalValueForAverageModel(); break;
            case fieldNum(InventModelGroup, ReserveReversed): this.defaultReserveReversed(); break;
            case fieldNum(InventModelGroup, PdsConsReq): this.defaultPdsConsReq(); break;
            case fieldNum(InventModelGroup, NegativePhysical): this.defaultNegativePhysical(); break;
            case fieldNum(InventModelGroup, QuarantineControl): this.defaultQuarantineControl(); break;
            case fieldNum(InventModelGroup, MandatoryPick): this.defaultMandatoryPick(); break;
            case fieldNum(InventModelGroup, MandatoryRegister): this.defaultMandatoryRegister(); break;
            case fieldNum(InventModelGroup, MandatoryWMSOrder): this.defaultMandatoryWMSOrder(); break;
            case fieldNum(InventModelGroup, ReserveByDate): this.defaultReserveByDate(); break;
            case fieldNum(InventModelGroup, PostPhysicalRevenue): this.defaultPostPhysicalRevenue(); break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInclPhysicalValueInCost</Name>
				<Source><![CDATA[
    private void defaultInclPhysicalValueInCost()
    {
        if (!this.inventModelType().isSettled())
        {
            this.InclPhysicalValueInCost = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventCostRecalcIncludePhysicalValueForAverageModel</Name>
				<Source><![CDATA[
    private void defaultInventCostRecalcIncludePhysicalValueForAverageModel()
    {
        if (InventCostRecalcIncludePhysicalValueForAverageModelFeature::isEnabled())
        {
            if (!this.InclPhysicalValueInCost || this.InventModel != InventModel::AverageCost || this.InventModel != InventModel::AverageCostDate || this.InventModel != InventModel::MonthlyAverageCost)
            {
                this.InventCostRecalcIncludePhysicalValueForAverageModel = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStandardCost</Name>
				<Source><![CDATA[
    private void defaultStandardCost()
    {
        if (!this.inventModelType().isSettled())
        {
            this.StandardCost = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReserveReversed</Name>
				<Source><![CDATA[
    private void defaultReserveReversed()
    {
        if (this.ReserveByDate == NoYes::No)
        {
            this.ReserveReversed = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPdsConsReq</Name>
				<Source><![CDATA[
    private void defaultPdsConsReq()
    {
        if (this.PdsSameLot == NoYes::No)
        {
            this.PdsConsReq = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultNegativePhysical</Name>
				<Source><![CDATA[
    private void defaultNegativePhysical()
    {
        if (this.StockedProduct == NoYes::No)
        {
            this.NegativePhysical = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQuarantineControl</Name>
				<Source><![CDATA[
    private void defaultQuarantineControl()
    {
        if (this.StockedProduct == NoYes::No)
        {
            this.QuarantineControl = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMandatoryPick</Name>
				<Source><![CDATA[
    private void defaultMandatoryPick()
    {
        if (this.StockedProduct == NoYes::No)
        {
            this.MandatoryPick = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMandatoryRegister</Name>
				<Source><![CDATA[
    private void defaultMandatoryRegister()
    {
        if (this.StockedProduct == NoYes::No)
        {
            this.MandatoryRegister = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMandatoryWMSOrder</Name>
				<Source><![CDATA[
    private void defaultMandatoryWMSOrder()
    {
        if (this.StockedProduct == NoYes::No)
        {
            this.MandatoryWMSOrder = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReserveByDate</Name>
				<Source><![CDATA[
    private void defaultReserveByDate()
    {
        if (this.StockedProduct == NoYes::No)
        {
            this.ReserveByDate = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPostPhysicalRevenue</Name>
				<Source><![CDATA[
    private void defaultPostPhysicalRevenue()
    {
        if (this.StockedProduct == NoYes::No)
        {
            this.PostPhysicalRevenue = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingTableFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a set of fields that cannot be shared when the <c>InventModelGroup</c> table is shared.
    /// </summary>
    /// <returns>
    /// The <c>Set</c> of fields.
    /// </returns>
    [Hookable(false)]
    internal static Set unsupportedDataSharingTableFieldSet()
    {
        Set sharingSet = new Set(Types::String);

        // Country specific fields
        sharingSet.add(fieldstr(InventModelGroup, InventModelSecCur_RU));
        sharingSet.add(fieldstr(InventModelGroup, PostOnhandFinancialSecCur_RU));
 
        return sharingSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingCountryRegions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static container unsupportedDataSharingCountryRegions()
    {
        #ISOCountryRegionCodes

        return [#isoRU];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup;

        select firstonly retailAttributesLegalEntityLookup
            where retailAttributesLegalEntityLookup.GroupInventoryModel == this.ModelGroupId
                && retailAttributesLegalEntityLookup.LegalEntity == CompanyInfo::current();

        if (retailAttributesLegalEntityLookup)
        {
            return checkFailed(strfmt(("@Retail:RetailAttributesLegalEntityLookupPropertiesDeleteValidation"), this.ModelGroupId, EcoResCategory::find(retailAttributesLegalEntityLookup.Category).Name));
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123937</DeveloperDocumentation>
	<FormRef>InventModelGroup</FormRef>
	<Label>@SYS53805</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ModelGroupId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>GroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Inventory</Modules>
	<PrimaryIndex>GroupIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventModelGroupItem</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventModelGroupItem</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModelGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegativePhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegativeFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryRegister</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryPick</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryReceive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryDeduct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InclPhysicalValueInCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventCostRecalcIncludePhysicalValueForAverageModel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModelGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryModel</Name>
			<Label>@SYS21668</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventModelSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryPolicy</Name>
			<Label>@SYS152670</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StockedProduct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerIntegration</Name>
			<Label>@SYS54253</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostOnhandPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostOnhandFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostPhysicalRevenue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostPhysicalPurchase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostOnhandFinancialSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NegativeInventory</Name>
			<Label>@SYS23882</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NegativePhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegativeFinancial</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsApprovedVendor</Name>
			<Label>@PRO1545</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsVendorCheckItem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>pdsDispositionCode</Name>
			<Label>@PRO173</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsDispositionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsVendBatch</Name>
			<Label>@PDS1357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsReqVendBatchDetail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PhysicalUpdate</Name>
			<Label>@SYS23899</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MandatoryRegister</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryReceive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryPick</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryDeduct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reservation</Name>
			<Label>@SYS7669</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReserveByDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReserveReversed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsSameLot</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsConsReq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCheck</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsPickCriteria</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickingListBatchExpirationDateValidationRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarehouseManagement</Name>
			<Label>@SYS50169</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuarantineControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemProdReservation</Name>
			<Label>@SCM:ItemProductionReservation</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemProdReservationActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemProdReservation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclPhysicalValueInCost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54486</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventCostRecalcIncludePhysicalValueForAverageModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>InventCostRecalcIncludePhysicalValueForAverageModelFeature</FeatureClass>
			<Label>@SCM:InventCostRecalcIncludePhysicalValueForAverageModel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventModelSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Label>@GLS106608</Label>
			<EnumType>InventModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryDeduct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS117597</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryPick</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS53811</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryReceive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS113691</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryRegister</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsRegistration</ConfigurationKey>
			<Label>@SYS53810</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryWMSOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSMandatoryOrder</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRReservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@MCR12688</Label>
			<EnumType>MCRItemReservation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventModelGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventModelName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NegativeFinancial</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNegativeFinancial</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NegativePhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNegativePhysical</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsCheck</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCheck</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsConsReq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsConsReq</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsDispositionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsDispositionCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsPickCriteria</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsPickCriteria</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsReqVendBatchDetail</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsReqVendBatchDetail</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsSameLot</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsSameLot</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsVendorCheckItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsVendorCheckItem</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostOnhandFinancial</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54275</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostOnhandFinancialSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Label>@GLS101315</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostOnhandPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54278</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostPhysicalPurchase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS78181</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostPhysicalRevenue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS58872</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>QuarantineControl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQuarantineControl</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReserveByDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@PRO1598</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReserveReversed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14725</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StandardCost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemStandardCost</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StockedProduct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventStockedProduct</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemProdReservationActive</Name>
			<ExtendedDataType>ProdItemProdReservationActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemProdReservation</Name>
			<EnumType>ProdReservation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PickingListBatchExpirationDateValidationRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSPickingListBatchExpirationDateValidation</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ModelGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>PdsDispositionMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsDispositionMaster</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsDispositionCode</Name>
					<Field>PdsDispositionCode</Field>
					<RelatedField>DispositionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>