<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogIntOrgProductValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCatalogIntOrgProductValidation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>countErrorOrWarning</Name>
				<Source><![CDATA[
        private void countErrorOrWarning(RetailCatalogValidationError _errorType)
    {
        switch (_errorType)
        {
            case RetailCatalogValidationError::Error:
                this.ErrorCount++;
                break;

            case RetailCatalogValidationError::Warning:
                this.WarningCount++;
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayValidationResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculated column to help display the proper icon for the error type.
    /// </summary>
    /// <returns>
    /// A value based on the error type enum.
    /// </returns>
    /// <remarks>
    /// This value is used as an index to find the icon to display.
    /// </remarks>
    public display CatalogValidationResult displayValidationResult()
    {
        return enum2int(this.ErrorType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clean</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record having the given catalog ID.
    /// </summary>
    /// <param name="_catalogRecId">
    /// Value of <c>RefRecId</c>.
    /// </param>
    public static void clean(RefRecId _catalogRecId)
    {
        RetailCatalogIntOrgProductValidation productValidation;
        RetailCatalogIntOrgProductError productError;

        ttsBegin;

        // Ensure set based operations to not be downgraded to record-by-record operations
        productValidation.skipDeleteActions(true);  // Manually delete child table
        productValidation.skipDatabaseLog(true);
        productValidation.skipEvents(true);
        productValidation.skipDataMethods(true);    // Manually sync to channel

        productError.skipDatabaseLog(true);
        productError.skipEvents(true);
        productError.skipDataMethods(true);         // Manually sync to channel

        delete_from productError
            exists join productValidation
                where productError.CatalogIntOrgProductValidation == productValidation.RecId
                    && productValidation.Catalog == _catalogRecId;

        delete_from productValidation
            where productValidation.Catalog == _catalogRecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateErrorType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the error type for a catalog product and adds the error details.
    /// </summary>
    /// <param name="_catalogId">
    /// The catalog rec id.
    /// </param>
    /// <param name="_catalogProductId">
    /// The catalog product rec id.
    /// </param>
    /// <param name="_errorType">
    /// The error type.
    /// </param>
    /// <param name="_errorMessage">
    /// The error message to be added.
    /// </param>
    /// <param name="_catalogIntOrgId">
    /// The retail catalog channel record id. If no value is provided the error is valid for all the channels in the catalog.
    /// </param>
    public static void updateErrorType(CatalogRefRecId _catalogId, RefRecId _catalogProductId, RetailCatalogValidationError _errorType, str _errorMessage, RefRecId _catalogIntOrgId = 0)
    {
        RetailCatalogIntOrgProductValidation catalogIntOrgProduct;

        ttsBegin;

        if (_catalogIntOrgId)
        {
            catalogIntOrgProduct = RetailCatalogIntOrgProductValidation::findOrCreate(_catalogId, _catalogIntOrgId, _catalogProductId, true);

            if (_errorType > catalogIntOrgProduct.ErrorType)
            {
                catalogIntOrgProduct.ErrorType = _errorType;
            }
            catalogIntOrgProduct.countErrorOrWarning(_errorType);
            catalogIntOrgProduct.update();

            RetailCatalogIntOrgProductError::create(catalogIntOrgProduct.RecId, _errorType, _errorMessage);
        }
        else
        {
            // Insert record into RetailCatalogIntOrgProductValidation table otherwise it's an empty loop for Kit's product.
            RetailCatalogInternalOrg catalogInternalOrg;
            RetailCatalogIntOrgProductValidation catalogIntOrgProductExisting;

            insert_recordset catalogIntOrgProduct (Catalog, CatalogInternalOrg, CatalogProduct)
                select _catalogId, RecId, _catalogProductId from catalogInternalOrg
                where catalogInternalOrg.Catalog == _catalogId
                notexists join catalogIntOrgProductExisting
                    where catalogIntOrgProductExisting.Catalog == _catalogId &&
                        catalogIntOrgProductExisting.CatalogInternalOrg == catalogInternalOrg.RecId &&
                        catalogIntOrgProductExisting.CatalogProduct == _catalogProductId;

            while select forUpdate catalogIntOrgProduct
                where catalogIntOrgProduct.Catalog == _catalogId &&
                      catalogIntOrgProduct.CatalogProduct == _catalogProductId
            {
                if (_errorType > catalogIntOrgProduct.ErrorType)
                {
                    catalogIntOrgProduct.ErrorType = _errorType;
                }
                catalogIntOrgProduct.countErrorOrWarning(_errorType);
                catalogIntOrgProduct.update();

                RetailCatalogIntOrgProductError::create(catalogIntOrgProduct.RecId, _errorType, _errorMessage);
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateErrorTypeByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the error type and message for a product in the catalog.
    /// </summary>
    /// <param name="_catalogId">
    /// The catalog rec id.
    /// </param>
    /// <param name="_retailCatalogIntOrgRecId">
    /// The retail catalog channel record id.
    /// </param>
    /// <param name="_catalogProductRecId">
    /// The catalog product record id.
    /// </param>
    /// <param name="_errorType">
    /// The error type.
    /// </param>
    /// <param name="_errorMessage">
    /// The error message.
    /// </param>
    /// <remarks>
    /// The product is the EcoResProduct. The update will happen for all the retail channels in the catalog.
    /// </remarks>
    public static void updateErrorTypeByProduct(CatalogRefRecId _catalogId, RefRecId _retailCatalogIntOrgRecId, CatalogProductId _catalogProductRecId, RetailCatalogValidationError _errorType, str _errorMessage)
    {
        RetailCatalogIntOrgProductValidation catalogIntOrgProduct = RetailCatalogIntOrgProductValidation::findOrCreate(_catalogId, _retailCatalogIntOrgRecId, _catalogProductRecId, true);

        ttsBegin;

        if (catalogIntOrgProduct)
        {
            if (_errorType > catalogIntOrgProduct.ErrorType)
            {
                catalogIntOrgProduct.ErrorType = _errorType;
            }

            catalogIntOrgProduct.countErrorOrWarning(_errorType);
            catalogIntOrgProduct.update();

            RetailCatalogIntOrgProductError::create(catalogIntOrgProduct.RecId, _errorType, _errorMessage);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a record in the <c>RetailCatalogIntOrgProductValidation</c> table, depending on another record.
    /// </summary>
    /// <param name = "_catalogId">The catalog rec id.</param>
    /// <param name = "_retailCatalogIntOrgRecId">The retail catalog channel record id.</param>
    /// <param name = "_catalogProductRecId">The catalog product record id.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record from the <c>RetailCatalogIntOrgProductValidation</c> table.</returns>
    private static RetailCatalogIntOrgProductValidation findOrCreate(CatalogRefRecId _catalogId, RefRecId _retailCatalogIntOrgRecId, CatalogProductId _catalogProductRecId, boolean _forUpdate = false)
    {
        RetailCatalogIntOrgProductValidation productValidation;
        RetailCatalogInternalOrg catalogInternalOrg;
        CatalogProduct catalogProduct;

        if (_forUpdate)
        {
            productValidation.selectForUpdate(true);
        }

        select firstonly productValidation
            where productValidation.Catalog == _catalogId &&
                productValidation.CatalogInternalOrg == _retailCatalogIntOrgRecId &&
                productValidation.CatalogProduct == _catalogProductRecId;
        if (!productValidation.RecId)
        {
            productValidation.Catalog = _catalogId;
            productValidation.CatalogInternalOrg = _retailCatalogIntOrgRecId;
            productValidation.CatalogProduct = _catalogProductRecId;
            productValidation.insert();
        }

        return productValidation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET490226</DeveloperDocumentation>
	<Label>@RET490208</Label>
	<TitleField1>Catalog</TitleField1>
	<TitleField2>CatalogProduct</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CatalogInternalOrgProduct</ClusteredIndex>
	<Modules>Merchandising</Modules>
	<ReplacementKey>CatalogInternalOrgProduct</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogInternalOrg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarningCount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogInternalOrg</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogInternalOrg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogProduct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Catalog</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogInternalOrg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarningCount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Catalog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogInternalOrg</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatalogProduct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ErrorCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCounter</ExtendedDataType>
			<Label>@RET4040033</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ErrorType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailCatalogValidationError</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WarningCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCounter</ExtendedDataType>
			<Label>@SYS59278</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CatalogInternalOrgProduct</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Catalog</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CatalogInternalOrg</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CatalogProduct</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ErrorTypeProduct</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ErrorType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CatalogProduct</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Catalog</Name>
					<Field>Catalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatalogInternalOrg</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailCatalogInternalOrg</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CatalogInternalOrg</Name>
					<Field>CatalogInternalOrg</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatalogProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatalogProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CatalogProduct</Name>
					<Field>CatalogProduct</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>