<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlSADPurchTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlSADPurchTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPurchLine</Name>
				<Source><![CDATA[
    internal void addPurchLine(
        PurchLine          _purchLine,
        RecordInsertList   _sadPurchLineList = null,
        PlSADInvoiceLineNo _sadInvoiceLineNo = PlSADInvoice::findInvoice(this.SADNumberCode, _purchLine.PurchId).SADInvoiceLineNo,
        Qty                _qty = 0)
    {
        PurchLine_W         purchLineExt;
        PlSADPurchLine      sadPurchLine;

        ttsBegin;

        sadPurchLine.PurchLineRefId     = _purchLine.RecId;
        sadPurchLine.PurchId            = this.PurchId;
        sadPurchLine.SADNumberCode      = this.SADNumberCode;
        sadPurchLine.SADLineNo          = PlSADTrans::findRateGroup(this.SADNumberCode, InventTable::find(_purchLine.ItemId).SADRateCode_PL).SADLineNo;
        sadPurchLine.SADInvoiceLineNo   = _sadInvoiceLineNo;
        sadPurchLine.Qty                = _qty;
        if (_sadPurchLineList)
        {
            _sadPurchLineList.add(sadPurchLine);
        }
        else
        {
            sadPurchLine.insert();
        }

        purchLineExt = _purchLine.purchLine_W();
        purchLineExt.selectForUpdate(true);
        purchLineExt.SADInvoiceLineNo_PL = _sadInvoiceLineNo;

        _purchLine.packExtensionTable(purchLineExt);
        _purchLine.doUpdate();
        _purchLine.SysExtensionSerializerMap::postUpdate();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchLines</Name>
				<Source><![CDATA[
    public void addPurchLines()
    {
        PurchLine           purchLine;
        RecordInsertList    sadPurchLineList = new RecordInsertList(tableNum(PlSADPurchLine), true, false, true);

        ttsbegin;

        while select forUpdate purchLine
            where purchLine.PurchId     == this.PurchId          &&
                ! purchLine.IsDeleted                            &&
                  purchLine.PurchStatus != PurchStatus::Invoiced
        {
            this.addPurchLine(purchLine, sadPurchLineList);
        }

        sadPurchLineList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display CurrencyCode currencyCode()
    {
        return PurchTable::find(this.PurchId).CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        super();

        if (!FeatureStateProvider::isFeatureEnabled(PlSADMultiInvoicePerPurchOrderFeature::instance()))
        {
            this.addPurchLines();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display VendInvoiceAccount invoiceAccount()
    {
        return PurchTable::find(this.PurchId).InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseType</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display PurchaseType purchaseType()
    {
        return PurchTable::find(this.PurchId).PurchaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display PurchStatus purchStatus()
    {
        return PurchTable::find(this.PurchId).PurchStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display VendAccount vendAccount()
    {
        return PurchTable::find(this.PurchId).OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>PlSADPurchTable</c> by purchase order ID
    /// </summary>
    /// <param name="_purchId">
    /// Purchase order ID
    /// </param>
    /// <param name="_forupdate">
    /// Pass true to select for update
    /// </param>
    /// <returns>
    /// <c>PlSADPurchTable</c> record found
    /// </returns>
    /// <remarks>
    /// The approach is valid since only one SAD may reference particular PO at a time
    /// </remarks>
    public static PlSADPurchTable find(
        PurchId _purchId,
        boolean _forupdate = false)
    {
        PlSADPurchTable sadPurchTable;

        sadPurchTable.selectForUpdate(_forupdate);

        select firstonly sadPurchTable
            where sadPurchTable.PurchId == _purchId;

        return sadPurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>puchLineAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates references between SAD document and purchase order lines when purchase order line is added
    /// </summary>
    /// <param name="_purchLine">
    /// New purchase order line
    /// </param>
    public static void puchLineAdded(PurchLine _purchLine)
    {
        #isoCountryRegionCodes
        PlSADPurchTable sadPurchTable;

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoPL ]))
            return;

        sadPurchTable = PlSADPurchTable::find(_purchLine.PurchId);
        if (! sadPurchTable)
            return;

        warning(strFmt("@GLS109491", sadPurchTable.SADNumberCode));

        sadPurchTable.addPurchLine(_purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>puchLineRemoved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates references between SAD document and purchase order lines when purchase order line is removed
    /// </summary>
    /// <param name="_purchLine">
    /// Purchase order line that is being removed
    /// </param>
    public static void puchLineRemoved(PurchLine _purchLine)
    {
        #isoCountryRegionCodes
        PlSADPurchLine sadPurchLine;

        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoPL ]))
            return;

        sadPurchLine = PlSADPurchLine::find(_purchLine.RecId, true);
        if (! sadPurchLine)
            return;

        while select SADNumberCode from sadPurchLine
            group by SADNumberCode
            where sadPurchLine.PurchLineRefId == _purchLine.RecId
        {
            warning(strFmt("@GLS109491", sadPurchLine.SADNumberCode));
        }

        delete_from sadPurchLine
            where sadPurchLine.PurchLineRefId == _purchLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchLinesQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the SAD purch lines of the SAD purch tables pass checks if SAD purch lines matches releted purch line quantity.
    /// </summary>
    /// <returns>true if check passes; otherwise false.</returns>
    internal boolean checkPurchLinesQty()
    {
        boolean result = true;
        PlSADPurchLine sadPurchLineFind;
        PlSADPurchLine sadPurchLine;

        while select sadPurchLine
            where sadPurchLine.SADNumberCode == this.SADNumberCode
            notexists join sadPurchLineFind
                where sadPurchLineFind.SADNumberCode == this.SADNumberCode
                    && sadPurchLineFind.PurchLineRefId == sadPurchLine.PurchLineRefId
                    && sadPurchLineFind.SADInvoiceLineNo < sadPurchLine.SADInvoiceLineNo
        {
            result = sadPurchLine.checkPurchLineQty() && result;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@GLS223967</DeveloperDocumentation>
	<FormRef>PlSADReference</FormRef>
	<Label>@GLS109530</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>SADNumberCode</TitleField1>
	<TitleField2>PurchId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PurchIdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>PurchIdIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SADNumberCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SADNumberCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SADNumberCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Purchase</Name>
			<Label>@SYS9283</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SADNumberCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlSADNumberCode</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>PlSADTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PlSADTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SADNumberCode</Name>
					<SourceEDT>PlSADNumberCode</SourceEDT>
					<Field>SADNumberCode</Field>
					<RelatedField>SADNumberCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>