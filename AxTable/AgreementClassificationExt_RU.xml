<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementClassificationExt_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AgreementClassificationExt_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAgreementClassificationRelation</Name>
				<Source><![CDATA[
    private void clearAgreementClassificationRelation(AgreementClassificationExt_RU _agreementClassificationExt)
    {
        AgreementClassificationExt_RU relatedAgreementClassificationExt = AgreementClassificationExt_RU::findByAgreementClassification(
            _agreementClassificationExt.RelatedAgreementClassification, true);

        if (relatedAgreementClassificationExt.RelatedAgreementClassification)
        {
            relatedAgreementClassificationExt.RelatedAgreementClassification = 0;
            relatedAgreementClassificationExt.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the record in the <c>AgreementClassificationExt_RU</c> table.
    /// </summary>
    public void delete()
    {
        if (this.RelatedAgreementClassification)
        {
            this.clearAgreementClassificationRelation(this);
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the record in the <c>AgreementClassificationExt_RU</c> table.
    /// </summary>
    public void insert()
    {
        ttsbegin;

        super();

        this.setAgreementClassificationRelation();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementClassificationRelation</Name>
				<Source><![CDATA[
    private void setAgreementClassificationRelation()
    {
        AgreementClassificationExt_RU relatedAgreementClassificationExt = AgreementClassificationExt_RU::findByAgreementClassification(this.RelatedAgreementClassification, true);

        if (this.RelatedAgreementClassification &&
            relatedAgreementClassificationExt.RelatedAgreementClassification != this.AgreementClassification)
        {
            relatedAgreementClassificationExt.RelatedAgreementClassification = this.AgreementClassification;
            if (relatedAgreementClassificationExt.RecId)
            {
                relatedAgreementClassificationExt.doUpdate();
            }
            else
            {
                relatedAgreementClassificationExt.AgreementClassification = this.RelatedAgreementClassification;
                relatedAgreementClassificationExt.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the record in the <c>AgreementClassificationExt_RU</c> table.
    /// </summary>
    public void update()
    {
        AgreementClassificationExt_RU this_orig = this.orig();

        super();

        if (this.RelatedAgreementClassification != this_orig.RelatedAgreementClassification)
        {
            this.clearAgreementClassificationRelation(this_orig);
            this.setAgreementClassificationRelation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the event that is caused when a field is validated for an <c>AgreementClassificationExt_RU</c>
    ///     record.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///     A validated field ID.
    /// </param>
    /// <returns>
    ///     true if field has valid information and may be modified; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        AgreementClassificationExt_RU agreementClassificationExt;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(AgreementClassificationExt_RU, RelatedAgreementClassification):

                    if (this.RelatedAgreementClassification)
                    {
                        select firstOnly RecId from agreementClassificationExt
                            where agreementClassificationExt.RelatedAgreementClassification == this.RelatedAgreementClassification
                               && agreementClassificationExt.recId                          != this.RecId;

                        if (agreementClassificationExt.RecId)
                        {
                            ret = checkFailed(strFmt("@GLS223926", this.RelatedAgreementClassification().Name));
                        }
                        else
                        if (this.AgreementClassification().AgreementRelationType == this.RelatedAgreementClassification().AgreementRelationType)
                        {
                            ret = checkFailed(strFmt("@SYS316757", new DictTable(tableNum(AgreementClassification)).label()));
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAgreementClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>AgreementClassificationExt_RU</c> table.
    /// </summary>
    /// <param name="_agreementClassificationRecId">
    ///     The record ID of the <c>AgreementClassificationExt_RU</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>AgreementClassificationExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    static public AgreementClassificationExt_RU findByAgreementClassification(
        RefRecId _agreementClassificationRecId,
        boolean  _forUpdate = false)
    {
        AgreementClassificationExt_RU agreementClassificationExt;

        if (_agreementClassificationRecId)
        {
            agreementClassificationExt.selectForUpdate(_forUpdate);

            select firstonly agreementClassificationExt
                where agreementClassificationExt.AgreementClassification == _agreementClassificationRecId;
        }

        return agreementClassificationExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides functionality to go to main table.
    /// </summary>
    /// <param name="_agreementClassificationRecId">
    ///     The record ID of the <c>AgreementClassification</c> record.
    /// </param>
    /// <param name="_relationType">
    ///     The table ID of <c>PurchAgreementHeader</c> or <c>SalesAgreementHeader</c> table.
    /// </param>
    public static void jumpRefClassification(RecId _agreementClassificationRecId, RelationType _relationType)
    {
        MenuFunction mf;
        Args args;

        switch (_relationType)
        {
            case tableNum(SalesAgreementHeader):
                mf = new MenuFunction(menuitemDisplayStr(SalesAgreementClassification), MenuItemType::Display);
                break;

            case tablenum(PurchAgreementHeader):
                mf = new MenuFunction(menuitemDisplayStr(PurchAgreementClassification), MenuItemType::Display);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        args = new args();
        args.lookupRecord(AgreementClassification::find(_agreementClassificationRecId));

        mf.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a lookup for the <c>AgreementClassification</c> table.
    /// </summary>
    /// <param name="_ctrl">
    ///     The form string control object in which to perform the lookup.
    /// </param>
    /// <param name="_relationType">
    ///     The table ID of <c>PurchAgreementHeader</c> or <c>SalesAgreementHeader</c> table.
    /// </param>
    /// <returns>
    ///     A record in the <c>AgreementClassification</c> table.
    /// </returns>
    public static AgreementClassification lookupClassification(FormReferenceControl _ctrl, RelationType _relationType)
    {
        SysReferenceTableLookup lookup = SysReferenceTableLookup::newParameters(tablenum(AgreementClassification), _ctrl, true);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(AgreementClassification));
        AgreementClassification selectedRecord;

        lookup.addLookupfield(fieldnum(AgreementClassification, Name));

        queryBuildDataSource.addRange(fieldnum(AgreementClassification, AgreementRelationType)).value(queryValue(_relationType));

        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(AgreementClassificationExt_RU));
        queryBuildDataSource.relations(true);
        queryBuildDataSource.joinMode(JoinMode::NoExistsJoin);
        queryBuildDataSource.addRange(fieldNum(AgreementClassificationExt_RU, RelatedAgreementClassification)).value(SysQuery::valueNotEmptyString());

        lookup.parmQuery(query);

        selectedRecord = lookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AgreementClassification</Name>
				<Source><![CDATA[
        public AgreementClassification AgreementClassification(AgreementClassification _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('AgreementClassification');
            }
            else
            {
                return this.setLink('AgreementClassification', _relatedTable);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>RelatedAgreementClassification</Name>
				<Source><![CDATA[
        public AgreementClassification RelatedAgreementClassification(AgreementClassification _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('RelatedAgreementClassification');
            }
            else
            {
                return this.setLink('RelatedAgreementClassification', _relatedTable);
            }
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS325287</DeveloperDocumentation>
	<Label>@SYS190136</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>AgreementClassification</TitleField1>
	<TitleField2>RecId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>APARShared</Modules>
	<ReplacementKey>AgreementClassificationIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelatedAgreementClassification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementClassification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RelatedAgreementClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementClassification</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumberSequenceTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS1161</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RelatedAgreementClassification</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS115502</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumberSequenceTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RelatedAgreementClassificationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RelatedAgreementClassification</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementClassificationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementClassification</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementClassification</Name>
			<Cardinality>ZeroOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>AgreementClassification</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementClassification</Name>
					<Field>AgreementClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceTable</Name>
					<Field>NumberSequenceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RelatedAgreementClassification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>AgreementClassification</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RelatedAgreementClassification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelatedAgreementClassification</Name>
					<Field>RelatedAgreementClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>