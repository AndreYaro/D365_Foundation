<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerEntry extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBridgingPosting</Name>
				<Source><![CDATA[
        public void createBridgingPosting(
        LedgerEntryJournal _journal,
        GeneralJournalEntry _generalJournalEntry)
    {
        LedgerTransFurtherPosting ledgerTransFurtherPosting;
        LedgerJournalTrans ledgerJournalTrans;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;

        if (this.RecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (this.IsBridgingPosting)
        {
            ledgerTransFurtherPosting.RefRecId = this.RecId;

            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _journal.JournalNumber &&
                    ledgerJournalTrans.Invisible == NoYes::No &&
                    ledgerJournalTrans.PaymMode == this.PaymentMode &&
                    (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust ||
                    ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            exists join subledgerVoucherLink
                where subledgerVoucherLink.GeneralJournalEntry == _generalJournalEntry.RecId
                    && subledgerVoucherLink.Voucher == ledgerJournalTrans.Voucher
                    && subledgerVoucherLink.VoucherDataAreaId == CompanyInfo::find().DataArea
                    && subledgerVoucherLink.AccountingDate == ledgerJournalTrans.TransDate;

            ledgerTransFurtherPosting.PaymMode = ledgerJournalTrans.PaymMode;
            ledgerTransFurtherPosting.PaymSpec = ledgerJournalTrans.PaymSpec;
            ledgerTransFurtherPosting.AccountType = ledgerJournalTrans.AccountType;
            ledgerTransFurtherPosting.AccountNum = ledgerJournalTrans.parmAccount();
            ledgerTransFurtherPosting.insert();

            BankAccountBridgingPostingHelper::processBridgingTrans(_journal, _generalJournalEntry, this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtraProcessingNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether extra processing is required.
    /// </summary>
    /// <returns>
    /// true if extra processing is required; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The extra processing is separate to avoid an override of the insert method and the update method.
    /// When those methods are overridden, it degrades set-based operations to singletons and singletons do
    /// not support the performance needed for this table.
    /// </remarks>
    public boolean isExtraProcessingNeeded()
    {
        boolean isExtraProcessingNeeded = false;

        if (this.IsBridgingPosting)
        {
            isExtraProcessingNeeded = true;
        }

        return isExtraProcessingNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the LedgerEntry table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the LedgerEntry record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;
        ;

        if (!LedgerEntry::exist(_recId))
        {
            isExisting = checkFailed(strfmt(LedgerEntry::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForAcctDatePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>LedgerEntry</c> records with the specified accounting date
    /// and fiscal calendar period.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <remarks>
    /// The <c>deleteForAcctDatePeriod</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForAcctDatePeriod(
        TransDate _accountingDate,
        FiscalCalendarPeriodRecId _fiscalCalendarPeriodRecId)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        LedgerEntry ledgerEntry;

        ledgerEntry.skipDeleteActions(true);
        ledgerEntry.skipDataMethods(true);
        ledgerEntry.skipEvents(true);

        delete_from ledgerEntry
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForAcctDatePeriodExclPostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>LedgerEntry</c> records with the specified accounting date
    /// and fiscal calendar period, excluding records with specified posting type.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_postingTypeToExclude">
    /// The posting type to exclude.
    /// </param>
    /// <remarks>
    /// The <c>deleteForAcctDatePeriodExclPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForAcctDatePeriodExclPostType(TransDate _accountingDate,
        FiscalCalendarPeriodRecId _fiscalCalendarPeriodRecId,
        LedgerPostingType _postingTypeToExclude)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        LedgerEntry ledgerEntry;

        ledgerEntry.skipDeleteActions(true);
        ledgerEntry.skipDataMethods(true);
        ledgerEntry.skipEvents(true);

        delete_from ledgerEntry
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == LedgerEntry.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.PostingType != _postingTypeToExclude
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForAcctDatePeriodPostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>LedgerEntry</c> records that have the specified accounting date, fiscal
    /// calendar period, and posting type.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_postingType">
    /// The posting type.
    /// </param>
    /// <remarks>
    /// The <c>deleteForAcctDatePeriodPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForAcctDatePeriodPostType(
        TransDate _accountingDate,
        FiscalCalendarPeriodRecId _fiscalCalendarPeriodRecId,
        LedgerPostingType _postingType)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        LedgerEntry ledgerEntry;

        ledgerEntry.skipDeleteActions(true);
        ledgerEntry.skipDataMethods(true);
        ledgerEntry.skipEvents(true);

        delete_from ledgerEntry
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.PostingType == _postingType
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForFundAcctDatePeriodPostType</Name>
				<Source><![CDATA[
/// <summary>
    /// Deletes the <c>LedgerEntry</c> records with the specified accounting date,
    /// range of funds and fiscal calendar period, excluding records with specified
    /// posting type.
    /// </summary>
    /// <param name="_fromFund">
    /// The start fund number.
    /// </param>
    /// <param name="_toFund">
    /// The end fund number.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_postingType">
    /// The posting type.
    /// </param>
    /// <remarks>
    /// The <c>deleteForFundAcctDatePeriodPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForFundAcctDatePeriodPostType(
        FundNumber                  _fromFund,
        FundNumber                  _toFund,
        TransDate                   _accountingDate,
        FiscalCalendarPeriodRecId   _fiscalCalendarPeriodRecId,
        LedgerPostingType           _postingType)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        DimensionAttributeLevelValueAllView dimensionAttributeLevelValueAllView;
        LedgerEntry                         ledgerEntry;
        DimensionAttribute                  dimensionAttribute;

        ledgerEntry.skipDeleteActions(true);
        ledgerEntry.skipDataMethods(true);
        ledgerEntry.skipEvents(true);

        delete_from ledgerEntry
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.PostingType == _postingType
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current()
            exists join dimensionAttributeLevelValueAllView
                where dimensionAttributeLevelValueAllView.ValueCombinationRecID == generalJournalAccountEntry.LedgerDimension
                    && dimensionAttributeLevelValueAllView.DisplayValue >= _fromFund
                    && dimensionAttributeLevelValueAllView.DisplayValue <= _toFund
            exists join dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeLevelValueAllView.DimensionAttribute
                    && dimensionAttribute.BackingEntityType == tablenum(DimAttributeLedgerFund_PSN);
    }
]]></Source>
			</Method>
			<Method>
				<Name>deleteForPostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>LedgerEntry</c> records with either of the specified posting types.
    /// </summary>
    /// <param name="_firstPostingType">
    /// The first posting type.
    /// </param>
    /// <param name="_secondPostingType">
    /// The second posting type.
    /// </param>
    /// <remarks>
    /// The <c>deleteForPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForPostType(LedgerPostingType _firstPostingType, LedgerPostingType _secondPostingType)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        LedgerEntry ledgerEntry;

        ledgerEntry.skipDeleteActions(true);
        ledgerEntry.skipDataMethods(true);
        ledgerEntry.skipEvents(true);

        delete_from ledgerEntry
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
                    && (generalJournalAccountEntry.PostingType == _firstPostingType
                    || generalJournalAccountEntry.PostingType == _secondPostingType)
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForTransferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>LedgerEntry</c> records for the specified transfer ID.
    /// </summary>
    /// <param name="_transferId">
    /// The transfer ID.
    /// </param>
    /// <remarks>
    /// The <c>deleteForTransferId</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteForTransferId(SubledgerJournalTransferId _transferId)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        LedgerEntry ledgerEntry;

        ledgerEntry.skipDeleteActions(true);
        ledgerEntry.skipDataMethods(true);
        ledgerEntry.skipEvents(true);

        delete_from ledgerEntry
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.TransferId == _transferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFundAcctDatePeriodExclPostType</Name>
				<Source><![CDATA[
/// <summary>
    /// Deletes the <c>LedgerEntry</c> records with the specified accounting date,
    /// range of funds and fiscal calendar period, excluding records with specified
    /// posting type.
    /// </summary>
    /// <param name="_fromFund">
    /// The start fund number.
    /// </param>
    /// <param name="_toFund">
    /// The end fund number.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_fiscalCalendarPeriodRecId">
    /// The fiscal calendar period.
    /// </param>
    /// <param name="_postingTypeToExclude">
    /// The posting type to exclude.
    /// </param>
    /// <remarks>
    /// The <c>deleteFundAcctDatePeriodExclPostType</c>
    /// method on the <c>GeneralJournalAccountEntry</c> table is for general use
    /// and cascades to related tables.
    /// </remarks>
    public static void deleteFundAcctDatePeriodExclPostType(
        FundNumber                  _fromFund,
        FundNumber                  _toFund,
        TransDate                   _accountingDate,
        FiscalCalendarPeriodRecId   _fiscalCalendarPeriodRecId,
        LedgerPostingType           _postingTypeToExclude)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        DimensionAttributeLevelValueAllView dimensionAttributeLevelValueAllView;
        LedgerEntry                         ledgerEntry;
        DimensionAttribute                  dimensionAttribute;

        ledgerEntry.skipDeleteActions(true);
        ledgerEntry.skipDataMethods(true);
        ledgerEntry.skipEvents(true);

        delete_from ledgerEntry
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
                    && generalJournalAccountEntry.PostingType != _postingTypeToExclude
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.AccountingDate == _accountingDate
                    && generalJournalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                    && generalJournalEntry.Ledger == Ledger::current()
            exists join dimensionAttributeLevelValueAllView
                where dimensionAttributeLevelValueAllView.ValueCombinationRecID == generalJournalAccountEntry.LedgerDimension
                    && dimensionAttributeLevelValueAllView.DisplayValue >= _fromFund
                    && dimensionAttributeLevelValueAllView.DisplayValue <= _toFund
            exists join dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeLevelValueAllView.DimensionAttribute
                    && dimensionAttribute.BackingEntityType == tablenum(DimAttributeLedgerFund_PSN);
    }
]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>LedgerEntry</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerEntry</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        LedgerEntry ledgerEntry;
        ;

        select firstonly
            RecId
        from
            ledgerEntry
        where
            ledgerEntry.RecId == _recId;

        return ledgerEntry != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerEntry</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>LedgerEntry</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerEntry</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerEntry find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerEntry ledgerEntry;
        ;

        ledgerEntry.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerEntry.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                ledgerEntry
            where
                ledgerEntry.RecId == _recId;

        return ledgerEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerEntry</c> table.
    /// </summary>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record ID of the <c>GeneralJournalAccountEntry</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerEntry</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// This utility method should not be used for updates.
    /// </remarks>
    public static LedgerEntry findByGeneralJournalAccountEntry(RecId _generalJournalAccountEntryRecId)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerEntry ledgerEntry;

        if (_generalJournalAccountEntryRecId != 0)
        {
            select firstonly RecId from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == _generalJournalAccountEntryRecId
            join ledgerEntry
                where ledgerEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId;
        }

        return ledgerEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the LedgerEntry table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        ;

        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS328428</DeveloperDocumentation>
	<Label>@SYS135391</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>PaymentMode</TitleField1>
	<TitleField2>CompanyBankAccount</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Ledger</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsBridgingPosting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bank</Name>
			<Label>@SYS22173</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ThirdPartyBankAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyBankAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Consolidation</Name>
			<Label>@SYS106495</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsolidatedCompany</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExchangeRateDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExchangeAdjustment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsBridgingPosting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsolidatedCompany</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyBankAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<GroupPrompt>@SYS4083</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExchangeRateDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchangeRateDate</ExtendedDataType>
			<SaveContents>No</SaveContents>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GeneralJournalAccountEntry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsBridgingPosting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FurtherPostingType</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExchangeAdjustment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsExchangeAdjustment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ThirdPartyBankAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankThirdPartyAccountId</ExtendedDataType>
			<GroupPrompt>@SYS8828</GroupPrompt>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GeneralAccountEntryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsExchangeAdjustment</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IsBridgingIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsBridgingPosting</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GeneralJournalAccountEntry</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerEntry</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyBankAccount</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>CompanyBankAccount</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea_BankDataAreaId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea_BankDataAreaId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankDataAreaId</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<Field>BankDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>SelectableDataArea</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea_ConsolidatedCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea_ConsolidatedCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsolidatedCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>ConsolidatedCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GeneralJournalAccountEntry</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GeneralJournalAccountEntry</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>GeneralJournalLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerEntry</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GeneralJournalAccountEntry</Name>
					<Field>GeneralJournalAccountEntry</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ThirdPartyBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ThirdPartyBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerEntry</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ThirdPartyBankAccount</Name>
					<Field>ThirdPartyBankAccount</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>