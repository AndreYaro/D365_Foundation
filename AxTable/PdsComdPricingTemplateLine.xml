<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsComdPricingTemplateLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsComdPricingTemplateLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that the item dimensions are valid.
    /// </summary>
    /// <returns>
    /// true if all item dimensions are valid or if item
    /// dimensions do not apply (the item code is not type "Table").
    /// </returns>
    /// <remarks>
    /// This will check to ensure that all necessary item dimensions are filled and that
    /// they are filled with the correct values that apply to the item. Since an item
    /// code is only a single item if MarginItemCode == TableGroupAll::Table then this
    /// method only checks in that one case. For "Group" and "All", this method always
    /// returns true.
    /// </remarks>
    public boolean checkItemDim()
    {
        boolean ok = true;

        if (this.MarginItemCode == PriceDiscProductCodeType::Table)
        {
            InventDim   inventDim   = this.inventDim();
            InventTable inventTable = InventTable::find(this.MarginItemRelation);

            Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
            while (enum.moveNext())
            {
                InventProductDimension dim = enum.current();
                ok = ok && dim.checkValueForItem(inventTable, inventDim.(dim.parmInventDimFieldId()));
            }

            ok = ok && this.inventDim().validateWriteProductDimensions(this.MarginItemRelation);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default quantity based on the larger of standard order quantity, minimum order qty, formula size and 1.
    /// </summary>
    /// <param name="_siteId">
    /// Related site id.
    /// </param>
    public void defaultQuantity(InventSiteId _siteId = '')
    {
        BOMVersion              bomVersion;
        InventDim               InventDim;
        FromDate                fromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        InventItemInventSetup   inventItemInventSetup;

        if (this.MarginItemCode == PriceDiscProductCodeType::Table
            && this.MarginItemRelation)
        {
            if (_siteId)
            {
                select firstonly PmfBatchSize
                    from bomVersion
                    order by inventDim.InventSiteId desc, bomVersion.PmfBatchSize asc
                    where bomVersion.ItemId      == this.MarginItemRelation
                        && bomVersion.Active      == true
                        && bomVersion.FromDate    <= fromDate
                        && (bomVersion.ToDate     >= fromDate
                            || !bomVersion.ToDate)
                    join  InventDimId, InventSiteId
                    from  inventDim
                    where inventDim.inventDimId  == bomVersion.InventDimId
                        && (InventDim.InventSiteId == _siteId || inventDim.InventSiteId == '');
            }

            inventItemInventSetup = InventItemInventSetup::find(this.MarginItemRelation,this.InventDimId);

            this.InventQty = max(inventItemInventSetup.StandardQty,
                                 inventItemInventSetup.LowestQty,
                                 bomVersion.PmfBatchSize,
                                 1.00);
        }
        else
        {
            this.InventQty = 1.00;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the quantity from field to 1.00.
    /// </summary>
    public void initValue()
    {
        this.InventQtyFrom  = 1.00;
        this.InventQtyTo    = 0; //treated as max

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// FInd the matching InventDim record that matches the InventDimId on this table.
    /// </summary>
    /// <param name="_forUpdate">
    /// Optional. Specify as true if the InventDim record should be locked for update.
    /// Default value is false - do not lock the record for update.
    /// </param>
    /// <returns>
    /// Found InventDim record. The record buffer will be empty if no such record exists.
    /// </returns>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(PdsComdPricingTemplateLine, MarginChange),
                [fieldNum(PdsComdPricingTemplateLine, MarginPerc)]],
            [fieldNum(PdsComdPricingTemplateLine, MarginPerc),
                [fieldNum(PdsComdPricingTemplateLine, MarginChange)]],
            [fieldNum(PdsComdPricingTemplateLine, InventQty),
                [fieldNum(PdsComdPricingTemplateLine, MarginItemRelation), fieldNum(PdsComdPricingTemplateLine, MarginItemCode)]],
            [fieldNum(PdsComdPricingTemplateLine, MarginItemRelation),
                [fieldNum(PdsComdPricingTemplateLine, MarginItemCode)]],
            [fieldNum(PdsComdPricingTemplateLine, MarginAccountRelation),
                [fieldNum(PdsComdPricingTemplateLine, MarginAccountCode)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PdsComdPricingTemplateLine, MarginChange): 
                if (this.isFieldSet(fieldNum(PdsComdPricingTemplateLine, MarginPerc))
                    && this.MarginPerc)
                {
                    this.MarginChange = 0;
                }
                break;
            case fieldNum(PdsComdPricingTemplateLine, MarginPerc): 
                if (this.isFieldSet(fieldNum(PdsComdPricingTemplateLine, MarginChange))
                    && this.MarginChange)
                {
                    this.MarginPerc = 0;
                }
                break;
            case fieldNum(PdsComdPricingTemplateLine, InventQty): 
                if (this.isFieldSet(fieldNum(PdsComdPricingTemplateLine, MarginItemRelation))
                    && this.isFieldSet(fieldNum(PdsComdPricingTemplateLine, MarginItemCode)))
                {
                    this.defaultQuantity();
                }
                break;
            case fieldNum(PdsComdPricingTemplateLine, MarginItemRelation): 
                if (this.isFieldSet(fieldNum(PdsComdPricingTemplateLine, MarginItemCode))
                    && this.orig().MarginItemCode != this.MarginItemCode)
                {
                    this.MarginItemRelation = '';
                }
                break;
            case fieldNum(PdsComdPricingTemplateLine, MarginAccountRelation):
                if (this.isFieldSet(fieldNum(PdsComdPricingTemplateLine, MarginAccountCode))
                    && this.orig().MarginAccountCode != this.MarginAccountCode)
                {
                    this.MarginAccountRelation = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to show the applicable unit.
    /// </summary>
    /// <returns>
    /// Formula unit if the item relation is a specific item, otherwise blank.
    /// </returns>
    public display UnitIDInventory showUnit()
    {
        UnitIDInventory unitID;

        if (this.MarginItemCode == PriceDiscProductCodeType::Table)
        {
            unitID = InventTableModule::find(
                        this.MarginItemRelation,
                        ModuleInventPurchSales::Invent).UnitId;
        }

        return unitID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountRelation</Name>
				<Source><![CDATA[
    private boolean validateAccountRelation()
    {
        boolean ret = true;

        if (this.MarginAccountCode != PriceDiscPartyCodeType::All
            && !this.MarginAccountRelation)
        {
            ret = checkFailed(strfmt("@SYS84378",
                fieldstr(PdsComdPricingTemplateLine, MarginAccountRelation)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field values during the form input.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// Table field id number for the field to check.
    /// </param>
    /// <returns>
    /// True if the field is valid, otherwise false.
    /// </returns>
    /// <remarks>
    /// The current implementation performs the following validations:
    /// <ul><li>InventQty - must be greater than or equal to 0 (zero).</li>
    /// <li>MarginItemRelation - required if MarginItemCode is
    ///     TableGroupAll::GroupId or TableGroupAll::Table.</li>
    /// <li>MarginAccountRelation - required if MarginAccountCode is
    ///      TableGroupAll::GroupId or TableGroupAll::Table.</li>
    /// </ul>
    /// </remarks>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(PdsComdPricingTemplateLine, InventQty):
                    if (this.InventQty < 0)
                    {
                        ret = checkFailed("@SYS23986");
                    }
                    break;

                case fieldnum(PdsComdPricingTemplateLine, MarginMult):
                    if (this.MarginMult < 0)
                    {
                        ret = checkFailed("@SYS23986");
                    }
                    break;

                case fieldnum(PdsComdPricingTemplateLine, MarginItemRelation):
                    ret = this.validateItemRelation();
                    break;

                case fieldnum(PdsComdPricingTemplateLine, MarginAccountRelation):
                    ret = this.validateAccountRelation();
                    break;

                case fieldnum(PdsComdPricingTemplateLine, InventQtyTo):
                case fieldnum(PdsComdPricingTemplateLine, InventQtyFrom):
                    if (    this.InventQtyFrom  // blank should be treated as min
                        &&  this.InventQtyTo    // blank should be treated as max
                        &&  this.InventQtyFrom > this.InventQtyTo)
                    {
                        ret = checkFailed(strFmt("@PDS1887",
                            fieldId2pname(tableNum(pdsComdPricingTemplateLine),fieldNum(PdsComdPricingTemplateLine, InventQtyTo)),
                            fieldId2pname(tableNum(pdsComdPricingTemplateLine),fieldNum(PdsComdPricingTemplateLine, InventQtyFrom))));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the table item relation and the item production type.
    /// </summary>
    /// <returns>
    /// True if item relation fields are valid and if the item production type is not the
    /// <c>PmfProductType::BOM</c>, <c>PmfProductType::Formula</c> or <c>PmfProductType::MainItem</c> enumeration value.
    /// </returns>
    public boolean validateItemRelation()
    {
        boolean         ret = true;
        InventTable     inventTable;
        DictEnum        typeEnum;

        if (this.MarginItemCode != PriceDiscProductCodeType::All && !this.MarginItemRelation)
        {
            ret = checkFailed(strfmt("@SYS84378", fieldstr(PdsComdPricingTemplateLine, MarginItemRelation)));
        }

        if (ret && this.MarginItemCode == PriceDiscProductCodeType::Table)
        {
            inventTable = InventTable::find(this.MarginItemRelation);

            if (!inventTable || !inventTable.isFormulaOrBOMAllowed())
            {
                typeEnum = new DictEnum(enumnum(PmfProductType));

                ret = checkFailed(strfmt("@PDS1473",
                    typeEnum.value2Label(PmfProductType::BOM),
                    typeEnum.value2Label(PmfProductType::Formula)));
            }

            if (inventTable.PmfProductType == PmfProductType::MainItem)
            {
                ret = checkFailed("@PDS1158");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the table item relation and the account relation types. The method
    /// also looks for any gaps in the quantity fields.
    /// </summary>
    /// <returns>
    /// True if item and account relation fields are valid and there are no gaps in the quantity fields.
    /// </returns>
    public boolean validateWrite()
    {
        boolean                     ret;
        PdsComdPricingTemplateLine  pdsComdPricingTemplateLine;

        ret = super();

        if (ret)
        {
            ret = this.validateItemRelation() && ret;
            ret = this.validateAccountRelation() && ret;

            ret = ret && this.checkItemDim();
        }

        if (ret
            && this.InventQtyTo // empty equals max, so always bigger or equal than from
            && (this.InventQtyTo < this.InventQtyFrom))
        {
            ret = checkFailed(strFmt("@PDS1887",
                            fieldId2pname(tableNum(pdsComdPricingTemplateLine),fieldNum(PdsComdPricingTemplateLine, InventQtyTo)),
                            fieldId2pname(tableNum(pdsComdPricingTemplateLine),fieldNum(PdsComdPricingTemplateLine, InventQtyFrom))));
        }

        if (ret)
        {
            select firstonly recId, inventQtyTo from pdsComdPricingTemplateLine
                order by inventQtyFrom desc
                where  pdsComdPricingTemplateLine.PricingTemplateId     == this.PricingTemplateId
                    && pdsComdPricingTemplateLine.MarginItemCode        == this.MarginItemCode
                    && pdsComdPricingTemplateLine.MarginItemRelation    == this.MarginItemRelation
                    && pdsComdPricingTemplateLine.InventDimId           == this.InventDimId
                    && pdsComdPricingTemplateLine.MarginAccountCode     == this.MarginAccountCode
                    && pdsComdPricingTemplateLine.MarginAccountRelation == this.MarginAccountRelation
                    && pdsComdPricingTemplateLine.RecId                 != this.RecId
                    && pdsComdPricingTemplateLine.InventQtyFrom         <  this.InventQtyFrom;

            if (pdsComdPricingTemplateLine.RecId)
            {
                if (!pdsComdPricingTemplateLine.InventQtyTo)
                {
                    // treat it as max
                    pdsComdPricingTemplateLine.InventQtyTo = realMax();
                }
                if (this.InventQtyFrom < pdsComdPricingTemplateLine.InventQtyTo)
                {
                    ret = checkFailed("@PDS1462");
                }

                if (ret && this.InventQtyFrom != pdsComdPricingTemplateLine.InventQtyTo)
                {
                    warning("@PDS1453");
                }
            }
        }

        if (ret)
        {
            select firstonly recId, InventQtyFrom from pdsComdPricingTemplateLine
                order by inventQtyFrom asc
                where  pdsComdPricingTemplateLine.PricingTemplateId     == this.PricingTemplateId
                    && pdsComdPricingTemplateLine.MarginItemCode        == this.MarginItemCode
                    && pdsComdPricingTemplateLine.MarginItemRelation    == this.MarginItemRelation
                    && pdsComdPricingTemplateLine.InventDimId           == this.InventDimId
                    && pdsComdPricingTemplateLine.MarginAccountCode     == this.MarginAccountCode
                    && pdsComdPricingTemplateLine.MarginAccountRelation == this.MarginAccountRelation
                    && pdsComdPricingTemplateLine.RecId                 != this.RecId
                    && pdsComdPricingTemplateLine.InventQtyFrom         >  this.InventQtyFrom;

            if (pdsComdPricingTemplateLine.RecId)
            {
                if (this.InventQtyTo > pdsComdPricingTemplateLine.InventQtyFrom)
                {
                    ret = checkFailed("@PDS1460");
                }

                if (ret && this.InventQtyTo != pdsComdPricingTemplateLine.InventQtyFrom)
                {
                    warning("@PDS1461");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all the lines from a source pricing template to a destination template.
    /// </summary>
    /// <param name="_destId">
    /// Destination pricing template id.
    /// </param>
    /// <param name="_srcId">
    /// Source pricing template id.
    /// </param>
    /// <param name="_progress">
    /// Optional. A progress indicator which will be used to show the status of the copy.
    /// </param>
    /// <remarks>
    /// This will copy all line records from the source template to the destination
    /// template. Duplicate records are igrnored and will not cause an error (the
    /// existing record on the destination will not be changed).
    /// If the progress indicator is given then this will update the progress. The
    /// total is set to the number of line records in the source template.
    /// </remarks>
    public static void copyTemplate(
        PdsComdPricingTemplateId    _destId,
        PdsComdPricingTemplateId    _srcId,
        SysOperationProgress        _progress = null)
    {
        PdsComdPricingTemplateLine  templateLine;

        if (!_srcId || !_destId)
        {
            return;
        }

        if (_progress)
        {
            select count(RecId)
                from templateLine
                where templateLine.PricingTemplateId == _srcId;
            _progress.setTotal(templateLine.RecId);
        }

        try
        {
            ttsbegin;

            while select templateLine
                where templateLine.PricingTemplateId == _srcId
            {
                if (_progress)
                {
                    _progress.incCount();
                }

                templateLine.PricingTemplateId   = _destId;

                if (!PdsComdPricingTemplateLine::existTemplateId(_destId,
                    templateLine.MarginItemCode,
                    templateLine.MarginItemRelation,
                    templateLine.InventDimId,
                    templateLine.MarginAccountCode,
                    templateLine.MarginAccountRelation,
                    templateLine.InventQtyFrom))
                {
                    templateLine.insert();
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        if (_progress)
        {
            _progress.kill();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return _recId
            && (select pdsComdPricingTemplateLine
                where pdsComdPricingTemplateLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>PdsPricingTemplateLine</c> record exists.
    /// </summary>
    /// <param name="_templateId">
    /// Pricing calculation id for key.
    /// </param>
    /// <param name="_itemCode">
    /// Margin item code for key.
    /// </param>
    /// <param name="_itemRelation">
    /// Margin item relation for key.
    /// </param>
    /// <param name="_inventDimId">
    /// InventDimId for key.
    /// </param>
    /// <param name="_accountCode">
    /// Margin account code for key.
    /// </param>
    /// <param name="_accountRelation">
    /// Margin account relation for key.
    /// </param>
    /// <param name="_inventQtyFrom">
    /// Item quantity for key.
    /// </param>
    /// <returns>
    /// True if the record exists; otherwise, false.
    /// </returns>
    public static boolean existTemplateId(
        PdsComdPricingTemplateId        _templateId,
        PdsComdMarginItemCode           _itemCode,
        PdsComdMarginItemRelation       _itemRelation,
        InventDimId                     _inventDimId,
        PdsComdMarginAccountCode        _accountCode,
        PdsComdMarginAccountRelation    _accountRelation,
        PdsInventQtyFrom                _inventQtyFrom)
    {
        return _templateId
            && (select pdsComdPricingTemplateLine
                where  pdsComdPricingTemplateLine.PricingTemplateId     == _templateId
                    && pdsComdPricingTemplateLine.MarginItemCode        == _itemCode
                    && pdsComdPricingTemplateLine.MarginItemRelation    == _itemRelation
                    && pdsComdPricingTemplateLine.InventDimId           == _inventDimId
                    && pdsComdPricingTemplateLine.MarginAccountCode     == _accountCode
                    && pdsComdPricingTemplateLine.MarginAccountRelation == _accountRelation
                    && pdsComdPricingTemplateLine.InventQtyFrom         == _inventQtyFrom).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsComdPricingTemplateLine find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        PdsComdPricingTemplateLine pdsComdPricingTemplateLine;

        pdsComdPricingTemplateLine.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly pdsComdPricingTemplateLine
                where pdsComdPricingTemplateLine.RecId == _recId;
        }

        return pdsComdPricingTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDataForTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the given template has at least one defined template line.
    /// </summary>
    /// <param name="_templateId">
    /// Pricing template id to check.
    /// </param>
    /// <returns>
    /// true if the template has at least one line; false otherwise.
    /// </returns>
    public static boolean hasDataForTemplate(PdsComdPricingTemplateId _templateId)
    {
        return _templateId
            && (select pdsComdPricingTemplateLine
                    where pdsComdPricingTemplateLine.PricingTemplateId == _templateId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds items of production type <c>PmfProductType::BOM</c> or <c>PmfProductType::Formula</c> enumeration value.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormStringControl</c> object where the lookup values should be displayed.
    /// </param>
    /// <param name="_filterStr">
    /// The string used to filter the primary key field.
    /// </param>
    public static void lookupItemId(FormControl _formControl, str _filterStr)
    {
        Set allowedTypes = new Set(Types::Enum);

        allowedTypes.add(PmfProductType::BOM);
        allowedTypes.add(PmfProductType::Formula);
        InventTable::lookupItemIdTypePricingTemplate(_formControl, _filterStr, allowedTypes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsCommodity</ConfigurationKey>
	<DeveloperDocumentation>@PDS1229</DeveloperDocumentation>
	<Label>@PDS446</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PricingTemplateId</TitleField1>
	<TitleField2>MarginItemRelation</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>TemplateItemDimAccountQtyIdx</ClusteredIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PricingTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginChange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginPerc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginMult</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountGroup</Name>
			<Label>@SYS21902</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarginAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginAccountRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PricingTemplateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemGroup</Name>
			<Label>@SYS4922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarginItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginItemRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MarginCalc</Name>
			<Label>@PDS448</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarginMult</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginChange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarginPerc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderQuantity</Name>
			<Label>@PDS1455</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@PRO1497</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>showUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQtyFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQtyTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsInventQtyOrdered</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQtyFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsInventQtyFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQtyTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsInventQtyTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarginAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPartyCode</ExtendedDataType>
			<EnumType>PriceDiscPartyCodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarginAccountRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdMarginAccountRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarginChange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdMarginChange</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarginItemCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscProductCode</ExtendedDataType>
			<EnumType>PriceDiscProductCodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarginItemRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdMarginItemRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarginMult</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdMarginMult</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarginPerc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdMarginPerc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PricingTemplateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsComdPricingTemplateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TemplateItemDimAccountQtyFromIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PricingTemplateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarginItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarginItemRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarginAccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarginAccountRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventQtyFrom</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TemplateItemDimAccountQtyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PricingTemplateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarginItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarginItemRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarginAccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MarginAccountRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventQty</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustomerTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>MarginAccountCode</Name>
					<Field>MarginAccountCode</Field>
					<ValueStr>PriceDiscPartyCodeType::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarginAccountRelation</Name>
					<Field>MarginAccountRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultOrderItems</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsDefaultOrderItems</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>MarginItemCode</Name>
					<Field>MarginItemCode</Field>
					<ValueStr>PriceDiscProductCodeType::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarginItemRelation</Name>
					<Field>MarginItemRelation</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PmfProductType_Extern</Name>
					<RelatedField>PmfProductType</RelatedField>
					<Value>4</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PmfProductType_Extern_1</Name>
					<RelatedField>PmfProductType</RelatedField>
					<Value>5</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>DefaultOrderType_Extern</Name>
					<RelatedField>DefaultOrderType</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>MarginItemCode</Name>
					<Field>MarginItemCode</Field>
					<ValueStr>PriceDiscProductCodeType::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarginItemRelation</Name>
					<Field>MarginItemRelation</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsComdPricingTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>CascadeRestricted</OnDelete>
			<RelatedTable>PdsComdPricingTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PricingTemplateId</Name>
					<Field>PricingTemplateId</Field>
					<RelatedField>PricingTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarginAccountRelation</Name>
					<Field>MarginAccountRelation</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>MarginAccountCode</Name>
					<Field>MarginAccountCode</Field>
					<ValueStr>PriceDiscPartyCodeType::GroupId</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>