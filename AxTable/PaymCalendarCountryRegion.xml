<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarCountryRegion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymCalendarCountryRegion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>PaymCalendarCountryRegion</c> table; if not, an error
    /// message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendarCountryRegion</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean isExisting = true;

        if (!PaymCalendarCountryRegion::exist(_recId))
        {
            isExisting = checkFailed(strFmt(PaymCalendarCountryRegion::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>PaymCalendarCountryRegion</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendarCountryRegion</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        PaymCalendarCountryRegion paymCalendarCountryRegion;

        select firstonly RecId from paymCalendarCountryRegion
            where paymCalendarCountryRegion.RecId == _recId;

        return paymCalendarCountryRegion != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>PaymCalendarCountryRegion</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendarCountryRegion</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PaymCalendarCountryRegion</c> table; otherwise, an empty record.
    /// </returns>
    public static PaymCalendarCountryRegion find(
        recId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarCountryRegion paymCalendarCountryRegion;

        paymCalendarCountryRegion.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            paymCalendarCountryRegion.concurrencyModel(_concurrencyModel);
        }

        select firstonly paymCalendarCountryRegion
            where paymCalendarCountryRegion.RecId == _recId;

        return paymCalendarCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>PaymCalendarCountryRegion</c> table.
    /// </summary>
    /// <param name="_countryRegion">
    /// The record ID of the <c>LogisticsAddressCountryRegion</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PaymCalendarCountryRegion</c> table; otherwise, an empty record.
    /// </returns>
    public static PaymCalendarCountryRegion findByCountryRegion(
        LogisticsAddressCountryRegionRecId _countryRegion,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarCountryRegion paymCalendarCountryRegion;

        paymCalendarCountryRegion.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            paymCalendarCountryRegion.concurrencyModel(_concurrencyModel);
        }

        select firstonly paymCalendarCountryRegion
            where paymCalendarCountryRegion.CountryRegion == _countryRegion;

        return paymCalendarCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPaymCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>PaymCalendarCountryRegion</c> table.
    /// </summary>
    /// <param name="_paymCalendarRecId">
    /// The record ID of the <c>PaymCalendar</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PaymCalendarCountryRegion</c> table; otherwise, an empty record.
    /// </returns>
    public static PaymCalendarCountryRegion findByPaymCalendar(
        PaymCalendarRecId _paymCalendarRecId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarCountryRegion paymCalendarCountryRegion;

        paymCalendarCountryRegion.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            paymCalendarCountryRegion.concurrencyModel(_concurrencyModel);
        }

        select firstonly paymCalendarCountryRegion
            where paymCalendarCountryRegion.PaymCalendar == _paymCalendarRecId;

        return paymCalendarCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>PaymCalendarCountryRegion</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PaymCalendar</ConfigurationKey>
	<DeveloperDocumentation>@CashManagement:GLS220115</DeveloperDocumentation>
	<Label>@CashManagement:GLS220114</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>CountryRegion</TitleField1>
	<TitleField2>PaymCalendar</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Bank</Modules>
	<ReplacementKey>CountryRegionIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymCalendar</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryRegion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountryRegion</Name>
			<Label>@CashManagement:GLS220126</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymCalendar</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CountryRegion</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaymCalendar</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PaymCalendarRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CountryRegionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CountryRegion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymCalendarCountryRegionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymCalendar</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CountryRegion</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegion</Name>
					<Field>CountryRegion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymCalendar</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PaymCalendar</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymCalendar</Name>
					<Field>PaymCalendar</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>