<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximEPCGSchemeApprove_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximEPCGSchemeApprove_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayAnnualAverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays annual average amount.
    /// </summary>
    /// <returns>
    /// The annual average amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST displayAnnualAverage()
    {
        return EximEPCGSchemeApprove_IN::findSchemeId(this.OrigSchemeId).AnnualAverageMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExportObligationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays export obligation amount.
    /// </summary>
    /// <returns>
    /// The export obligation amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountCur displayExportObligationAmount()
    {
        return this.exportObligationAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayImportValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays import value.
    /// </summary>
    /// <returns>
    /// The import value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountCur displayImportValue()
    {
        return EximEPCGSchemeApprove_IN::findSchemeId(this.OrigSchemeId).ImportValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIssueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays issue date time.
    /// </summary>
    /// <returns>
    /// The issue date time.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display TransDateTime displayIssueDateTime()
    {
        return EximEPCGSchemeTable_IN::findSchemeId(this.OrigSchemeId).IssueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOrigLicenseNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays original license number.
    /// </summary>
    /// <returns>
    /// The original license number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display EximLicenseNum_IN displayOrigLicenseNum()
    {
        return EximEPCGSchemeTable_IN::findSchemeId(this.OrigSchemeId).LicenseNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dutyExportObligationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ExportObligationAmount amount.
    /// </summary>
    /// <returns>AmountCur</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur dutyExportObligationAmount()
    {
        return (this.DutySavedPct / 100 * this.ImportValue) * this.cifFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expObligationAmtMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets obligationAmount amount based EPCGUseCustomsExchRate parameter.
    /// </summary>
    /// <param name="_approveBasis">EximEPCGExportObligationBasis_IN</param>
    /// <param name="_issueDateTime">TransDateTime</param>
    /// <returns>AmountMST</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST expObligationAmtMST(
        EximEPCGExportObligationBasis_IN _approveBasis,
        TransDateTime                    _issueDateTime)
    {
        AmountMST obligationAmount;

        obligationAmount = (_approveBasis == EximEPCGExportObligationBasis_IN::DutySaved) ? this.DutyExportObligationAmount : this.ExportObligationAmount;

        if (EximParameters_IN::find().epcgUseCustomsExchRate
            && obligationAmount)
        {
            obligationAmount = CurrencyHelper_IN::customsMSTAmount_IN(obligationAmount,
                                                             this.Currency,
                                                             Direction_IN::Export,
                                                             DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_issueDateTime, DateTimeUtil::getUserPreferredTimeZone())));
        }
        else
        {
            obligationAmount = CurrencyExchangeHelper::mstAmount(obligationAmount, this.Currency, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_issueDateTime, DateTimeUtil::getUserPreferredTimeZone())));
        }

        return obligationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportObligationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exportObligationAmount from product of ImportValue and cifFactor.
    /// </summary>
    /// <returns>AmountCur</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur exportObligationAmount()
    {
        return (this.ImportValue * this.cifFactor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        EximParameters_IN eximParameters = EximParameters_IN::find();
        super();

        this.cifFactor              = eximParameters.epcgcifFactor;
        this.ExportObligationPeriod = eximParameters.epcgExportPeriod;
        this.Currency               = Ledger::accountingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any necessary logic when a field changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The field that changed.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(EximEPCGSchemeApprove_IN, ExportObligationPeriod):
                this.ExportObligationPeriod = !this.ExportObligationPeriod ? 1 : this.ExportObligationPeriod;
                break;

            case fieldnum(EximEPCGSchemeApprove_IN, CurrencyPct):
            case fieldnum(EximEPCGSchemeApprove_IN, LeviedPct):
                this.LeviedPct    = (this.LeviedPct > this.CurrencyPct) ? this.CurrencyPct : this.LeviedPct;
                this.DutySavedPct = (this.CurrencyPct - this.LeviedPct);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(EximEPCGSchemeApprove_IN, OrigSchemeId) :
                    if (!EximEPCGSchemeApprove_IN::minExportObligation(this.OrigSchemeId))
                    {
                        ret = checkFailed("@GLS62113");
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximEPCGSchemeApprove_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximEPCGSchemeApprove_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGSchemeApprove_IN find(
        RefRecId            _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximEPCGSchemeApprove_IN    eximEPCGSchemeApprove;

        eximEPCGSchemeApprove.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximEPCGSchemeApprove.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximEPCGSchemeApprove
            where eximEPCGSchemeApprove.RecId == _recId;

        return eximEPCGSchemeApprove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximEPCGSchemeApprove_IN table for the specified EximEPCGSchemeTableRecId_IN.
    /// </summary>
    /// <param name="_schemeTableRecId">EximEPCGSchemeTableRecId_IN</param>
    /// <param name="_forUpdate">boolean</param>
    /// <returns>EximEPCGSchemeApprove_IN table record</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGSchemeApprove_IN findRefRecId(
        EximEPCGSchemeTableRecId_IN _schemeTableRecId,
        boolean                     _forUpdate = false)
    {
        EximEPCGSchemeApprove_IN eximEPCGSchemeApprove;

        if (_schemeTableRecId)
        {
            eximEPCGSchemeApprove.selectForUpdate(_forUpdate);

            select firstonly eximEPCGSchemeApprove
                where eximEPCGSchemeApprove.SchemeTableRecId == _schemeTableRecId;
        }

        return eximEPCGSchemeApprove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSchemeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximEPCGSchemeApprove_IN table for the specified EximEPCGId_IN.
    /// </summary>
    /// <param name="_schemeId">EximEPCGId_IN</param>
    /// <param name="_forUpdate">boolean</param>
    /// <returns>EximEPCGSchemeApprove_IN table record</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGSchemeApprove_IN findSchemeId(
        EximEPCGId_IN _schemeId,
        boolean       _forUpdate = false)
    {
        EximEPCGSchemeApprove_IN epcgSchemeApprove;

        if (_schemeId)
        {
            epcgSchemeApprove.selectForUpdate(_forUpdate);

            select firstonly epcgSchemeApprove
                where epcgSchemeApprove.SchemeTableRecId == EximEPCGSchemeTable_IN::findSchemeId(_schemeId).RecId;
        }

        return epcgSchemeApprove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importValueMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets importValue based epcgUseCustomsExchRate parameter.
    /// </summary>
    /// <param name="_importValue">AmountCur</param>
    /// <param name="_currency">CurrencyCode</param>
    /// <param name="_issueDateTime">TransDateTime</param>
    /// <returns>AmountMST</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST importValueMST(
        AmountCur     _importValue,
        CurrencyCode  _currency,
        TransDateTime _issueDateTime)
    {
        AmountMST importValue;

        if (EximParameters_IN::find().epcgUseCustomsExchRate)
        {
            importValue = CurrencyHelper_IN::customsMSTAmount_IN(_importValue,
                                                        _currency,
                                                        Direction_IN::Import,
                                                        DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_issueDateTime, DateTimeUtil::getUserPreferredTimeZone())));
        }
        else
        {
            importValue = CurrencyExchangeHelper::mstAmount(_importValue, _currency, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_issueDateTime, DateTimeUtil::getUserPreferredTimeZone())));
        }

        return importValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minExportObligation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if minimum export obligation is met for specified EximEPCGId_IN.
    /// </summary>
    /// <param name="_origSchemeId">EximEPCGId_IN</param>
    /// <returns>true if minimum export obligation is met otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean minExportObligation(EximEPCGId_IN _origSchemeId)
    {
        TransDateTime                     issueDateTime;
        boolean                           minObligationMet;
        AmountMST                         obligationAmount;
        AmountMST                         mimExpObligationAmount;
        EximEPCGSchemeTable_IN            epcgSchemeTable;
        EximEPCGSchemeApprove_IN          epcgSchemeApproval;
        EximEPCGExportTrans_IN            epcgExportTrans;
        CustomsShippingBillTrans_IN       customsShippingBillTrans;
        EximParameters_IN                 eximParameters = EximParameters_IN::find();

        epcgSchemeApproval = EximEPCGSchemeApprove_IN::findSchemeId(_origSchemeId);

        issueDateTime = DateTimeUtil::applyTimeZoneOffset(EximEPCGSchemeTable_IN::findRecId(epcgSchemeApproval.SchemeTableRecId).IssueDateTime,DateTimeUtil::getUserPreferredTimeZone());
        issueDateTime = DateTimeUtil::removeTimeZoneOffset(EximEPCGUpdate_IN::extendDateTime(issueDateTime, eximParameters.epcgTechUpgradeMinPeriod, PaymentPer_IN::Years),DateTimeUtil::getUserPreferredTimeZone());
        issueDateTime = DateTimeUtil::addSeconds(issueDateTime, -1);

        if (issueDateTime <= DateTimeUtil::getSystemDateTime())
        {
            select RecId, LicenseNum, ImportValueMST from epcgSchemeTable
                where epcgSchemeTable.SchemeId == _origSchemeId
                   && epcgSchemeTable.RecId    == epcgSchemeApproval.SchemeTableRecId;

            if (epcgSchemeTable.ImportValueMST)
            {
                mimExpObligationAmount = EximEPCGImportTrans_IN::importValueExpObligation(epcgSchemeTable.RecId) * epcgSchemeApproval.cifFactor;
                mimExpObligationAmount = (mimExpObligationAmount * eximParameters.epcgTechUpgradeMinExportPct / 100);

                while select SchemeTableRecId, CustomsShippingBillTransRecId, ExportValue
                    from epcgExportTrans
                        where epcgExportTrans.SchemeTableRecId == epcgSchemeApproval.SchemeTableRecId
                    join RecId
                        from customsShippingBillTrans
                            where customsShippingBillTrans.RecId == epcgExportTrans.CustomsShippingBillTransRecId

                {
                    obligationAmount += epcgExportTrans.ExportValue;
                }

                if (mimExpObligationAmount <= obligationAmount)
                {
                    minObligationMet = true;
                }
            }
        }

        return minObligationMet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>schemeIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for scheme id.
    /// </summary>
    /// <param name="_formControl">
    /// Control on which lookup is performed.
    /// </param>
    /// <param name="_schemeStatus">
    /// The scheme status range value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void schemeIdLookup(
        FormControl             _formControl,
        EximEPCGSchemeStatus_IN _schemeStatus)
    {
        Query                query = new Query();
        SysTableLookup       sysTableLookup;
        QueryBuildDataSource queryBuildDataSource;

        sysTableLookup = SysTableLookup::newParameters(tablenum(EximEPCGSchemeTable_IN), _formControl);
        sysTableLookup.addLookupfield(fieldnum(EximEPCGSchemeTable_IN, SchemeId), true);
        sysTableLookup.addLookupfield(fieldnum(EximEPCGSchemeTable_IN, LicenseNum));

        queryBuildDataSource = query.addDataSource(tablenum(EximEPCGSchemeTable_IN));
        queryBuildDataSource.addRange(fieldnum(EximEPCGSchemeTable_IN, Closed)).value(queryValue(NoYes::No));
        queryBuildDataSource.addRange(fieldnum(EximEPCGSchemeTable_IN, Status)).value(queryValue(_schemeStatus));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62451</DeveloperDocumentation>
	<Label>@GLS62091</Label>
	<TitleField1>ImportValue</TitleField1>
	<TitleField2>Currency</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>SchemeTableRecIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EximEPCGBankGuaranteeDetails_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGBankGuaranteeDetails_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximEPCGExportableItems_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGExportableItems_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximEPCGExportObligationDetails_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGExportObligationDetails_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximEPCGExportObligationPeriod_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGExportObligationPeriod_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximEPCGVendorDetails_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGVendorDetails_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CIFFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportObligationPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportObligationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealizedInvoices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeviedPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DutySavedPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DutyExportObligationAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemeTableRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ApprovalDetails</Name>
			<Label>@GLS61648</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AnnualAverageMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AuthorizationNum</Name>
			<Label>@GLS61498</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigLicenseNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigSchemeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Duty</Name>
			<Label>@SYS767</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeviedPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DutySavedPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DutyExportObligationAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportObligation</Name>
			<Label>@GLS61553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CIFFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportObligationPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportObligationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealizedInvoices</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS112248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemeTableRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AnnualAverageMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS62092</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CIFFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Factor</ExtendedDataType>
			<Label>@GLS62097</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CurrencyPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS62103</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DutyExportObligationAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS62079</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DutySavedPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS62108</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExportObligationAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS62079</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ExportObligationPeriod</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Days_IN</ExtendedDataType>
			<Label>@GLS62099</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ImportValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS62095</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LeviedPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@GLS62105</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigLicenseNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EximLicenseNum_IN</ExtendedDataType>
			<Label>@SYS114298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigSchemeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximEPCGId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RealizedInvoices</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS61682</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SchemeTableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SchemeTableRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SchemeTableRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximEPCGSchemeTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EximEPCGSchemeTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximEPCGSchemeTable_IN</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EximEPCGSchemeTable_IN_EximEPCGSchemeApprove_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SchemeTableRecId</Name>
					<Field>SchemeTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OrigEximEPCGSchemeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximEPCGSchemeTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EximEPCGSchemeTable_IN1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximEPCGSchemeTable_IN_EximEPCGSchemeApprove_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigSchemeId</Name>
					<Field>OrigSchemeId</Field>
					<RelatedField>SchemeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>