<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvRequisitionTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvRequisitionTable extends common
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountToBeReconciled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the amount to be reconciled for the travel requisition.
    /// </summary>
    /// <returns>
    ///     The amount to be reconciled for the travel requisition.
    /// </returns>
    public display TrvRequisitionToBeReconciled amountToBeReconciled()
    {
        TrvExpTrans         trvExpTrans;
        TrvRequisitionLine  trvRequisitionLine;

        if (this.ApprovalStatus != TrvRequisitionApprovalStatus::Approved)
            return 0.0;

        select firstonly sum(AccountingCurrencyReconciledAmount) from trvExpTrans
                join RecId, TrvRequisitionTable from trvRequisitionLine
                    where trvExpTrans.MappedToRequisitionLine == trvRequisitionLine.RecId &&
                          trvRequisitionLine.TrvRequisitionTable == this.RecId;

        return (this.totalEstimate() - trvExpTrans.AccountingCurrencyReconciledAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyPolicyErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the travel requisition has any policy errors.
    /// </summary>
    /// <returns>
    /// true if there are policy errors; otherwise, false.
    /// </returns>
    public display TrvAnyPolicyViolations anyPolicyErrors()
    {
        return 
            (TrvPolicyEvalEngine::anyPolicyErrors(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy)
            || this.anyProjectPolicyErrorsForLines());
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the changes to be made on approval of the travel requisition.
    /// </summary>
    /// <remarks>
    /// This includes confirming GL budgets and committing project budgets.
    /// </remarks>
    public void approvalCompleted()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this, false, SourceDocumentAccountingStatus::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>approverJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// This display method returns a concatenated string of all approver names and their justification for
    /// the policy violation.
    /// </summary>
    /// <returns>
    /// Approver names and justification provided by them.
    /// </returns>
    display TrvPreviousApproversJustifications approverJustification()
    {
        return TrvJustificationHelper::otherApproversJustifications(this.RecId, TrvPolicyViolationJustificationTypeEnum::TrvReqHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetForAllLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check budget for requisition lines
    /// </summary>
    private void checkBudgetForAllLines()
    {
        TrvRequisitionLine trvRequisitionLine;

        // this check is not required, optimizing the calls for perf
        if (TrvBudgetCheckHelper::isBudgetControlEnabled(BudgetControlSourceIntegrator::TravelRequisition) || TrvBudgetCheckHelper::isProjectBudgetControlEnabled(this.SourceDocumentHeader))
        {
            while select trvRequisitionLine where trvRequisitionLine.TrvRequisitionTable == this.RecId
            {
                trvRequisitionLine.checkBudgetOnDemand();
                trvRequisitionLine.checkProjectBudgetOnDemand();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeRequisition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the requisition and updates the reconciliation status of the travel requisition.
    /// </summary>
    /// <remarks>
    /// This method will return the remaining GL budgets and project budgets.
    /// </remarks>
    public void closeRequisition()
    {
        TrvParameters               trvParameters = TrvParameters::find();
        TrvRequisitionLine          trvRequisitionLine;

        if (this.isClosable())
        {
            ttsbegin;
            
            if (trvParameters.IsReleaseEncumbrancesOnCloseRequisition ||
                isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                while select trvRequisitionLine
                        where trvRequisitionLine.TrvRequisitionTable == this.RecId
                {
                    // transition to finalize state will return the budgets when release encrumbance on requisition closure is enabled in expense parameters
                    if (trvParameters.IsReleaseEncumbrancesOnCloseRequisition)
                    {
                        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(
                                                        trvRequisitionLine,
                                                        false,
                                                        SourceDocumentLineAccountingStatus::Finalized);
                    }
                    //project funding limit for the requisition should be closed on Requisition closure, if project key is enabled 
                    //and there is a project attached to the travel requisition line
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)) &&
                        trvRequisitionLine.ProjTable)
                    {
                        ProjFundingLimitTrackingManager::updateUsingSourceDocumentLine(
                                                        trvRequisitionLine.SourceDocumentLine,
                                                        ProjFundingLimitTrackingAction::Delete,
                                                        false,false,true);
                    }

                }
            }

            this.selectForUpdate(true);
            this.ReconciliationStatus = TrvRequisitionReconciliationStatus::Closed;
            this.doUpdate();
            ProjectCommitmentFacade::deleteProjectCommitmentsForDocument(this.SourceDocumentHeader, '', false, DateTimeUtil::date(this.CreatedDateTime));

            ttscommit;

            info(strFmt("@Expense:TravelReqClosedSuccessfully", this.RequisitionNumber));
        }
        else
        {
            error(strFmt("@SYS304367", this.RequisitionNumber));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the travel requisition.
    /// </summary>
    /// <returns>
    /// The record ID of the newly -created travel requisition.
    /// </returns>
    public RefRecId duplicate(TrvDateShift _trvDateShift = TrvDateShift::Today,
                                date _transactionDate = TrvExpenseHelper::getUserPreferredTimeZoneDate(),
                                TrvDatePeriod _trvDatePeriod = TrvDatePeriod::Days, 
                                int _numOf = 0)
    {
        RefRecId                emptyRecId = 0;
        TrvRequisitionTable     trvRequisitionTable;
        TrvRequisitionLine      currentTrvRequisitionLine;
        NumberSeq               numberSeqTrvRequisition;

        if (this.RecId == 0)
        {
            return emptyRecId;
        }

        numberSeqTrvRequisition = NumberSeq::newGetNum(TrvParameters::numRefRequisitionNumber(),
                                                        false,
                                                        true);
        if (!numberSeqTrvRequisition)
        {
            // number sequence not setup error
            error("@SYS183895");
            return emptyRecId;
        }

        trvRequisitionTable.initValue();
        trvRequisitionTable.RequisitionNumber   = numberSeqTrvRequisition.num();
        trvRequisitionTable.CreatingWorker      = this.CreatingWorker;
        trvRequisitionTable.LegalEntity         = this.LegalEntity;
        trvRequisitionTable.ReferenceDataAreaId = this.ReferenceDataAreaId;
        trvRequisitionTable.TravelPurpose       = this.TravelPurpose;
        trvRequisitionTable.Destination         = this.Destination;
        trvRequisitionTable.Description         = this.Description;
        trvRequisitionTable.DefaultDimension    = this.DefaultDimension;
        
        ttsbegin;
        trvRequisitionTable.insert();

        date estimatedDate;
        if (_trvDateShift == TrvDateShift::Today)
        {
            estimatedDate = TrvExpenseHelper::getUserPreferredTimeZoneDate();
        }
        else if (_trvDateShift == TrvDateShift::SpecifyDate)
        {
            estimatedDate = _transactionDate;
        }

        while select currentTrvRequisitionLine where currentTrvRequisitionLine.TrvRequisitionTable == this.RecId
        {
            if (_trvDateShift == TrvDateShift::Advance)
            {
                // Calculate estimated date to use based on original line
                estimatedDate = TrvExpenseHelper::advanceDate(currentTrvRequisitionLine.EstimatedDate, _trvDatePeriod, _numOf);
            }

            currentTrvRequisitionLine.duplicateRequisitionExpenseLine(trvRequisitionTable.RecId, estimatedDate);
        }

        ttscommit;

        return trvRequisitionTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the worker for whom the travel requisition is created.
    /// </summary>
    /// <returns>
    /// The name of the worker for whom the travel requisition is created.
    /// </returns>
    public display TrvRequisitionEmployeeName employeeName()
    {
        return HcmWorker::worker2Name(this.CreatingWorker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePolicyForAllLines</Name>
				<Source><![CDATA[
    private void evaluatePolicyForAllLines()
    {
        TrvRequisitionLine trvRequisitionLine;

        while select RecId from trvRequisitionLine where trvRequisitionLine.TrvRequisitionTable == this.RecId
        {
            TrvPolicyEvalEngine::evaluateViolationsForLine(trvRequisitionLine.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// A display method that retrieves the earliest date for a travel requisition.
    /// </summary>
    /// <returns>The earliest <c>EstimatedDate</c> from the lines associated with the requisition.</returns>
    public display TrvRequisitionFromDate fromDate()
    {
        TrvRequisitionLine  trvRequisitionLine;

        select firstonly minof(EstimatedDate) from trvRequisitionLine
            where trvRequisitionLine.TrvRequisitionTable == this.RecId;

        return trvRequisitionLine.EstimatedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        // the requisition is always created in the current legal entity
        this.LegalEntity = CompanyInfo::current();
        this.ReferenceDataAreaId = curext();
        this.ApprovalStatus = TrvRequisitionApprovalStatus::Create;
        this.ReconciliationStatus = TrvRequisitionReconciliationStatus::Open;

        this.RequisitionDate = TrvExpenseHelper::getUserPreferredTimeZoneDate();

        this.SetDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        TrvParameters trvParameters = TrvParameters::find();

        ttsbegin;

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);

        super();

        ttscommit;

        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            TrvPolicyEvalEngine::evaluateViolationsForHdr(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any line in the travel requisition failed budget check.
    /// </summary>
    /// <returns>
    /// true if any line failed budget check; otherwise, false.
    /// </returns>
    display boolean isBudgetFailed()
    {
        BudgetSource        budgetSource;
        TrvRequisitionLine  trvRequisitionLine;

        select firstonly RecId from trvRequisitionLine
                        where trvRequisitionLine.TrvRequisitionTable == this.RecId
                     join CheckResult from budgetSource
                        where budgetSource.SourceDocumentLine == trvRequisitionLine.SourceDocumentLine
                            && budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                           && budgetSource.CheckResult == BudgetCheckResult::Failed;

        return (trvRequisitionLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClosable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the travel requisition can be closed.
    /// </summary>
    /// <returns>
    /// true if the requisition can be closed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The travel requisition can be closed only if all the mapped travel requisitions have been approved.
    /// On closing, the travel requisition is not available for reconciliation.
    /// </remarks>
    public display boolean isClosable()
    {
        TrvExpTable                      trvExpTable;
        TrvExpTableTrvRequisitionTable   trvExpTableTrvRequisitionTable;

        if ((this.ApprovalStatus != TrvRequisitionApprovalStatus::Approved)
         || (this.ReconciliationStatus != TrvRequisitionReconciliationStatus::Open))
        {
            return false;
        }

        // check for any travel requisitions mapped to this requisition
        // if they are not approved/posted yet, this requisition cannot be closed
        select firstonly RecId from trvExpTable
                            where (trvExpTable.ApprovalStatus != TrvAppStatus::Approved
                                && trvExpTable.ApprovalStatus != TrvAppStatus::Ready
                                && trvExpTable.ApprovalStatus != TrvAppStatus::Ledger)
                    join * from trvExpTableTrvRequisitionTable
                        where trvExpTableTrvRequisitionTable.TrvExpTable == trvExpTable.RecId
                           && trvExpTableTrvRequisitionTable.TrvRequisitionTable == this.RecId;

        return (trvExpTable.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeletable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current requisition document can be deleted depending on the workflow status.
    /// </summary>
    /// <returns>
    /// true if the status is either not submitted) or canceled; otherwise, false.
    /// </returns>
    public display boolean isDeletable()
    {
        switch (this.ApprovalStatus)
        {
            case TrvRequisitionApprovalStatus::Create:
            case TrvRequisitionApprovalStatus::Cancelled:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether the current requisition document is editable depending on the workflow status.
    /// </summary>
    /// <returns>
    /// true if the status is either not submitted) or returned; otherwise, false.
    /// </returns>
    public display boolean isEditable()
    {
        switch (this.ApprovalStatus)
        {
            case TrvRequisitionApprovalStatus::Create:
            case TrvRequisitionApprovalStatus::Returned:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjBudgetFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any line in the travel requisition failed the project budget check.
    /// </summary>
    /// <returns>
    /// true if any line in the travel requisition failed the project budget check; otherwise, false.
    /// </returns>
    display boolean isProjBudgetFailed()
    {
        ProjBudgetStatus    projBudgetStatus;
        TrvRequisitionLine  trvRequisitionLine;

        select firstonly RecId from trvRequisitionLine
                        where trvRequisitionLine.TrvRequisitionTable == this.RecId
                     exists join RecId from projBudgetStatus
                        where projBudgetStatus.SourceDocumentLine == trvRequisitionLine.SourceDocumentLine
                            && projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed;

        return (trvRequisitionLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(SourceDocument_TravelRequisition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_TravelRequisition::TravelRequisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>policyViolationLevelMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of <c>TrvPolicyViolation</c> objects for the requisition header.
    /// </summary>
    /// <returns>
    /// A list of <c>TrvPolicyViolation</c> objects for the requisition header.
    /// </returns>
    List policyViolationLevelMsg()
    {
        return TrvPolicyEvalEngine::displayPolicyViolationLevelMsgHdr(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// The value of the Title field of the preview pane.
    /// </returns>
    display TrvDescription previewPaneTitle()
    {
        return "@SYS153130";
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    public display TrvRequisitionToDate toDate()
    {
        TrvRequisitionLine  trvRequisitionLine;

        select firstonly maxof(EstimatedDate) from trvRequisitionLine
            where trvRequisitionLine.TrvRequisitionTable == this.RecId;

        return trvRequisitionLine.EstimatedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total estimate for the travel requisition.
    /// </summary>
    /// <returns>
    /// The total estimate for the travel requisition in company currency.
    /// </returns>
    public display TrvRequisitionTotalEstimate totalEstimate()
    {
        TrvRequisitionLine  trvRequisitionLine;

        select firstonly sum(AccountingCurrencyAmount) from trvRequisitionLine
                where trvRequisitionLine.TrvRequisitionTable == this.RecId;

        return trvRequisitionLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalEstimateWithCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total estimate for the travel requisition and the currency code.
    /// </summary>
    /// <returns>
    /// The total estimate for the travel requisition in company currency and the currency code.
    /// </returns>
    public display TrvRequisitionTotalEstimateWithCurrency totalEstimateWithCurrency()
    {
        return TrvExpenseHelper::amountWithCurrencyCode(this.totalEstimate(), this.LegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TrvParameters trvParameters = TrvParameters::find();

        super();

        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            TrvPolicyEvalEngine::evaluateViolationsForHdr(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateApprove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the travel requisition before it can be approved.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The validations include policy and budget errors.
    /// </remarks>
    public boolean validateApprove()
    {
        // note that this has to be done in this class since the default class for workflow TrvWorkflowElemEventHandler and TrvWorkflowEventHandler
        // throw error messages on the client rather than on EP
        if (this.anyPolicyErrors())
        {
            error("@SYS302346");
            return false;
        }

        // the approval will fail on budget, that failure during workflow will put the document in a bad state
        // catch the budget error early
        this.checkBudgetForAllLines();
        if (this.isBudgetFailed() || this.isProjBudgetFailed())
        {
            error(strFmt("@Expense:ExpenseOrRequisitionBudgetApproveFailed", "@SYS153179", this.RequisitionNumber));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = this.isDeletable();

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the travel requisition before it can be submitted.
    /// </summary>
    /// <returns>
    /// A Boolean that indicates whether validation succeeded or not.
    /// </returns>
    /// <remarks>
    /// The validations include incomplete distributions, policy and budget errors.
    /// </remarks>
    public boolean validateSubmit()
    {
        TrvRequisitionLine      trvRequisitionLine;
        AccountingDistribution  accountingDistribution;
        SourceDocumentLine      sourceDocumentLine;
        boolean                 invalidLedgerDimension = false;

        ttsbegin;
        // create distributions if they don't exist
        while select forupdate trvRequisitionLine
            where trvRequisitionLine.TrvRequisitionTable == this.RecId
            notexists join accountingDistribution
                where accountingDistribution.SourceDocumentLine == trvRequisitionLine.SourceDocumentLine
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(trvRequisitionLine, true, SourceDocumentLineAccountingStatus::FullyDistributed);
        }
        ttscommit;

        // check for incomplete distributions
        select firstonly RecId from trvRequisitionLine
                where trvRequisitionLine.TrvRequisitionTable == this.RecId
            exists join sourceDocumentLine
                where  sourceDocumentLine.RecId == trvRequisitionLine.SourceDocumentLine &&
                    sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::FullyDistributed;
        if (trvRequisitionLine.RecId)
        {
            error("@SYS340881");
            return false;
        }

        // Validate project used in the lines
        while select ProjTable from trvRequisitionLine
            where trvRequisitionLine.TrvRequisitionTable == this.RecId  &&
                trvRequisitionLine.ProjTable != 0
        {
            if (!ProjTable::findRecId(trvRequisitionLine.ProjTable).status().validateWriteCreateJournal())
            {
                return false;
            }
        }

        // Validate the ledger dimension value of the accounting distributions
        while select AccountingLegalEntity, LedgerDimension, AccountingDate from accountingDistribution
            where accountingDistribution.SourceDocumentHeader == this.SourceDocumentHeader
        {
            // the validateLedgerDimension method of TrvExpTable works here
            if (!TrvExpTable::validateLedgerDimension(accountingDistribution.AccountingLegalEntity, accountingDistribution.LedgerDimension, accountingDistribution.AccountingDate))
            {
                invalidLedgerDimension = true;
            }
        }
        if (invalidLedgerDimension)
        {
            return false;
        }

        TrvPolicyEvalEngine::evaluateViolationsForHdr(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
        this.evaluatePolicyForAllLines();

        if (!this.canBeSubmitted())
        {
            error("@Expense:TravelReqSubmitFailureMessage");
            return false;
        }

        // note that this has to be done in this class since the default class for workflow TrvWorkflowElemEventHandler and TrvWorkflowEventHandler
        // throw error messages on the client rather than on EP
        if (this.anyPolicyErrors())
        {
            error("@SYS302346");
            return false;
        }

        this.checkBudgetForAllLines();

        TrvParameters trvParameters = TrvParameters::find();

        if (!trvParameters.IsAllowSubmitRequisitionOnBudgetFail && (this.isBudgetFailed() || this.isProjBudgetFailed()) )
        {
            error(strFmt("@Expense:ExpenseOrRequisitionBudgetSubmitFailed", "@SYS153179", this.RequisitionNumber));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RefRecId _recId)
    {
        return (select firstonly RecId from trvRequisitionTable where trvRequisitionTable.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TrvRequisitionTable find(RefRecId _recId, boolean _forUpdate = false)
    {
        TrvRequisitionTable trvRequisitionTable;
        if (_recId)
        {
            trvRequisitionTable.selectForUpdate(_forUpdate);
            select firstonly trvRequisitionTable where trvRequisitionTable.RecId == _recId;
        }
        return trvRequisitionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRequisitionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the travel requisition by using the specified the travel requisition number.
    /// </summary>
    /// <param name="_reqNumber">
    /// The travel requisition number.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the travel requisition is to be selected for update;
    /// optional.
    /// </param>
    /// <returns>
    /// The travel requisition record.
    /// </returns>
    public static TrvRequisitionTable findByRequisitionNumber(
                    TrvRequisitionNumber _reqNumber, boolean _forUpdate = false)
    {
        TrvRequisitionTable trvRequisitionTable;

        if (_reqNumber)
        {
            trvRequisitionTable.selectForUpdate(_forUpdate);
            select firstonly trvRequisitionTable where
                        trvRequisitionTable.RequisitionNumber == _reqNumber;
        }

        return trvRequisitionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TrvRequisitionTable</c> record by using the <c>SourceDocumentHeader</c> record ID.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// A <c>SourceDocumentHeader</c> record ID.
    /// </param>
    /// <returns>
    /// A <c>TrvRequisitionTable</c> record.
    /// </returns>
    public static TrvRequisitionTable findBySourceDocumentHeader(
        RefRecId    _sourceDocumentHeader)
    {
        TrvRequisitionTable    trvRequisitionTable;

        select firstonly trvRequisitionTable
            where trvRequisitionTable.SourceDocumentHeader == _sourceDocumentHeader;

        return trvRequisitionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TrvRequisitionTable</c> record by using the <c>SourceDocumentLine</c> record ID.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// A <c>SourceDocumentLine</c> record ID.
    /// </param>
    /// <returns>
    /// A <c>TrvRequisitionTable</c> record.
    /// </returns>
    public static TrvRequisitionTable findBySourceDocumentLine(
        RefRecId    _sourceDocumentLine)
    {
        TrvRequisitionTable    trvRequisitionTable;

        select firstonly trvRequisitionTable
            where trvRequisitionTable.SourceDocumentLine == _sourceDocumentLine;

        return trvRequisitionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRequisitionNumberAndCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the travel requisition by using the specified the travel requisition number.
    /// </summary>
    /// <param name="_reqNumber">
    /// The travel requisition number.
    /// </param>
    /// <param name="_legalEntity">
    /// Legal entity.
    /// </param>
    /// <returns>
    /// The travel requisition record.
    /// </returns>
    public static TrvRequisitionTable findByRequisitionNumberAndCompany(
                    TrvRequisitionNumber _reqNumber, LegalEntity _legalEntity)
    {
        TrvRequisitionTable trvRequisitionTable;

        if (_reqNumber)
        {
            select firstonly trvRequisitionTable
                where trvRequisitionTable.RequisitionNumber == _reqNumber
                    && trvRequisitionTable.ReconciliationStatus == 0
                    && trvRequisitionTable.LegalEntity == _legalEntity;
        }

        return trvRequisitionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new travel requisition.
    /// </summary>
    /// <param name="_worker">
    /// The Record ID of the worker for whom the travel requisition is; optional.
    /// </param>
    /// <returns>
    /// The travel requisition record that is created.
    /// </returns>
    public static TrvRequisitionTable insertNewRecord(TrvHcmWorkerRecId _worker = 0)
    {
        TrvRequisitionTable     insertTrvRequisitionTable;
        NumberSeq               numberSeqTrvRequisition;
        TrvHcmWorkerRecId       worker;

        worker = _worker ? _worker : HcmWorkerLookup::currentWorker();

        numberSeqTrvRequisition = NumberSeq::newGetNum(TrvParameters::numRefRequisitionNumber(),
                                                    false,
                                                    true); // do not throw
        if (numberSeqTrvRequisition)
        {
            insertTrvRequisitionTable.RequisitionNumber = numberSeqTrvRequisition.num();
            insertTrvRequisitionTable.initValue();
            insertTrvRequisitionTable.CreatingWorker = worker;
            insertTrvRequisitionTable.DefaultDimension = HcmWorker::find(_worker).getDefaultDimension();
            ttsbegin;
            insertTrvRequisitionTable.insert();
            ttscommit;
        }
        else
        {
            // number sequence not setup error
            error("@SYS183895");
        }

        return insertTrvRequisitionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReconciliationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reconciliation status of the travel requisition.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the travel requisition.
    /// </param>
    public static void updateReconciliationStatus(RefRecId _recId)
    {
        TrvRequisitionTable trvRequisitionTable;

        ttsbegin;
        trvRequisitionTable = TrvRequisitionTable::find(_recId, true);
        if (trvRequisitionTable)
        {
            if (trvRequisitionTable.amountToBeReconciled() > 0.0)
            {
                trvRequisitionTable.ReconciliationStatus = TrvRequisitionReconciliationStatus::Open;
            }
            else
            {
                trvRequisitionTable.ReconciliationStatus = TrvRequisitionReconciliationStatus::Closed;
            }
            trvRequisitionTable.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the company currency code.
    /// </summary>
    /// <returns>Accounting currency of the travel requisition's LE.</returns>
    display CurrencyCode companyCurrency()
    {
        return Ledger::accountingCurrency(this.LegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubmitJustificationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the Requisition has a policy violation that requires submit justification.
    /// </summary>
    /// <returns>
    /// True if the Requisition requires user justification on submit for policy errors; otherwise, false.
    /// </returns>
    public boolean isSubmitJustificationRequired()
    {
        if (!this.RecId)
        {
            return false;
        }

        return TrvJustificationHelper::isJustificationRequired(this.RecId, TrvPolicyViolationJustificationTypeEnum::TrvReqHeader, TrvPolicyViolationLevel::SubmitJustification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproveJustificationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the Requisition has a policy violation that requires approve justification.
    /// </summary>
    /// <returns>
    /// True if the Requisition requires user justification on approval for policy errors; otherwise, false.
    /// </returns>
    public boolean isApproveJustificationRequired()
    {
        if (!this.RecId)
        {
            return false;
        }

        return TrvJustificationHelper::isJustificationRequired(this.RecId, TrvPolicyViolationJustificationTypeEnum::TrvReqHeader, TrvPolicyViolationLevel::ApproveJustification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyPolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the Requisition has any policy violations; they can be errors or warnings.
    /// </summary>
    /// <returns>
    /// True if the Requisition has policy violations; otherwise, false.
    /// </returns>
    public display TrvAnyPolicyViolations anyPolicyViolations()
    {
        List violations = this.policyViolationLevelMsgForHeaderAndLines();

        return (violations.elements() != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>policyViolationLevelMsgForHeaderAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of <c>TrvPolicyViolation</c> objects for the Requisition header + lines.
    /// </summary>
    /// <returns>
    /// A list of <c>TrvPolicyViolation</c> objects for the Requisition header + lines.
    /// </returns>
    public List policyViolationLevelMsgForHeaderAndLines()
    {
        return TrvPolicyEvalEngine::displayPolicyViolationLevelMsgHdr(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwInfologsForPolicyViolationLevelMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the policy violation messages for the header to the infolog.
    /// </summary>
    public void throwInfologsForPolicyViolationLevelMsg()
    {
        List                violations = this.policyViolationLevelMsg();
        ListEnumerator      listEnumerator;
        TrvPolicyViolation  violation;

        listEnumerator = violations.getEnumerator();

        while (listEnumerator.moveNext())
        {
            violation = listEnumerator.current();

            if (violation.parmAdjustedViolationLevel() == TrvPolicyViolationLevel::Error)
            {
                error(violation.parmViolationMessage());
            }
            else
            {
                warning(violation.parmViolationMessage());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfRequisitionLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of requisition lines for a given travel requisition.
    /// </summary>
    /// <param name = "_headerRecId">The RecId of the requisition.</param>
    /// <returns>The number of requisition lines (including itemization) for the given requisition.</returns>
    public static int getNumberOfRequisitionLines(RefRecId _headerRecId)
    {
        TrvRequisitionLine trvRequisitionLine;

        select count(RecId) from trvRequisitionLine 
            where trvRequisitionLine.TrvRequisitionTable == _headerRecid;

        return int642int(trvRequisitionLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submit action will be visible for a report in draft that has one or more lines.
    /// </summary>
    /// <param name = "_workflowType">Workflow Type</param>
    /// <returns>True if the report can be submitted; false otherwise.</returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        return this
            && this.ApprovalStatus == TrvRequisitionApprovalStatus::Create
            && this.hasRequisitionLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubmitToWorkflowActionAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the travel requisition can be submitted, based on business rules and document status.
    /// </summary>
    /// <returns>True if the travel requisition can be submitted, otherwise False.</returns>
    public boolean isSubmitToWorkflowActionAvailable()
    {
        boolean ret;

        ret = this.canBeSubmitted();
        ret = ret && this.anyPolicyErrors();
        ret = ret && (this.ApprovalStatus == TrvRequisitionApprovalStatus::Create);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRequisitionLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current Requisition has any lines.
    /// </summary>
    /// <returns>
    /// True if the Requisition contains at least one line, else False.
    /// </returns>
    public boolean hasRequisitionLines()
    {
        TrvRequisitionLine requisitionLine;

        select firstonly RecId from requisitionLine
            where requisitionLine.TrvRequisitionTable == this.RecId;

        return (requisitionLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitterJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// The submit justification entered for the current record.
    /// </summary>
    /// <returns>The justification text entered while submitting.</returns>
    display TrvSubmitterJustification submitterJustification()
    {
        return TrvJustificationHelper::submitterJustification(this.RecId, TrvPolicyViolationJustificationTypeEnum::TrvReqHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeSubmitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the travel requisition can be submitted.
    /// </summary>
    /// <returns>
    /// true if the travel requisition can be submitted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The expense policies and project policies for an expense line should have been evaluated before
    /// this method is called.
    /// </remarks>
    public display boolean canBeSubmitted()
    {
        TrvRequisitionLine  reqLine;
        boolean             validToSubmit = false;

        select firstonly RecId from reqLine
            where reqLine.TrvRequisitionTable == this.RecId;

        validToSubmit = reqLine && this.validateProjPolicies();

        validToSubmit = validToSubmit && !this.hasTransactionWithEmptyCategoryOrZeroAmt();

        return validToSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransactionWithEmptyCategoryOrZeroAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there are any transactions with an empty category or a zero amount.
    /// </summary>
    /// <returns>
    /// True if there are any transactions with an empty category or a zero amount; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is used to determine whether the travel requisition can be submitted.
    /// </remarks>
    public display boolean hasTransactionWithEmptyCategoryOrZeroAmt()
    {
        TrvRequisitionLine reqLine;

        select firstonly RecId from reqLine 
            where reqLine.TrvRequisitionTable == this.RecId 
                && (reqLine.TransactionCurrencyAmount == 0 || !reqLine.Category || reqLine.ExpType == TrvExpType::Empty);

        return (reqLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the travel requisition or its lines have any project policy violations.
    /// </summary>
    /// <returns>
    /// True if the travel requisition is valid; otherwise, false.
    /// </returns>
    public boolean validateProjPolicies()
    {
        boolean  ret = true;

        this.evaluateProjectPoliciesForLines();

        if (this.anyProjectPolicyErrorsForLines())
        {
            ret = false;
        }
      
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateProjectPoliciesForLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// For each requisition expense line evaluates the project policies, and saves them.
    /// </summary>
    private void evaluateProjectPoliciesForLines()
    {
        TrvRequisitionLine trvRequisitionLine;

        ttsbegin;
        while select forupdate trvRequisitionLine 
            where trvRequisitionLine.TrvRequisitionTable == this.RecId
        {
            trvRequisitionLine.evaluateProjectPoliciesAndSave();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProjectPolicyErrorsForLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any of the lines have project policy errors.
    /// </summary>
    /// <returns>
    /// True if any of the lines have project policy errors; otherwise, false.
    /// </returns>
    private boolean anyProjectPolicyErrorsForLines()
    {
        boolean result = false;

        TrvRequisitionLine trvReqisitionLine;
        while select trvReqisitionLine where trvReqisitionLine.TrvRequisitionTable == this.RecId
        {
            if (trvReqisitionLine.hasPolicyViolations())
            {
                result = true;
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyDayOrReportProjectPolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the travel requisition expense lines has any project policy violations on day or report level.
    /// </summary>
    /// <returns>
    /// True if any requisition expense line has project policy violations, false otherwise.
    /// </returns>
    public boolean anyDayOrReportProjectPolicyViolations()
    {
        TrvRequisitionLine trvReqLine;

        while select trvReqLine where trvReqLine.TrvRequisitionTable == this.RecId
        {
            if (trvReqLine.anyDayOrReportProjectPolicyViolations())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default dimensions for a travel requisition expense header.
    /// </summary>
    /// <remarks>
    /// The default dimension is derived from the creating worker.
    /// </remarks>
    public void setDefaultDimension()
    {
        if (this.CreatingWorker)
        {
            this.DefaultDimension =  HcmEmployment::findByWorkerLegalEntity(this.CreatingWorker, this.LegalEntity).DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /*
    /// <summary>
    /// Gets the legal entity name selected by the user.
    /// </summary>
    /// <returns>
    /// The first of [this.ReferenceDataAreaId, curext()] that is not empty.
    /// </returns>
    public SelectableDataArea intercompanyLegalEntityName()
    {
        SelectableDataArea ret;

        if (this.ReferenceDataAreaId != '')
        {
            ret = this.ReferenceDataAreaId;
        }
        else
        {
            ret = curExt();
        }

        return ret;
    } */

    /// <summary>
    /// Initializes the <c>DefaultDimension</c> from the <c>CreatingWorker</c> field.
    /// </summary>
    /// <param name = "_fieldId">The field that was modified.</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TrvRequisitionTable, CreatingWorker):
                this.setDefaultDimension();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates the travel requisition purpose.
    /// </summary>
    public boolean validateField(FieldId _p1)
    {
        TrvParameters trvParameters = TrvParameters::find();
        boolean ret;

        ret = super(_p1);

        switch (_p1)
        {
            case (fieldNum(TrvRequisitionTable,TravelPurpose)):
                if (trvParameters.ValidateRequisitionPurpose == NoYes::Yes && !TrvTravelTxt::find(this.TravelPurpose).RecId)
                {
                    ret = ret && checkFailed(strFmt("@SYS101501",this.TravelPurpose));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProjCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset Project commitment on workflow status reset
    /// </summary>
    public void resetProjCommittedCost()
    {
        if( this.ApprovalStatus == TrvRequisitionApprovalStatus::Create)
        {
            ProjectCommitmentFacade::deleteProjectCommitmentsForDocument(this.SourceDocumentHeader);        
            
            //removing all accounting distribution for the Requisition
            TrvRequisitionLine  trvReqLine;
            while select SourceDocumentLine from trvReqLine 
                        where trvReqLine.TrvRequisitionTable == this.RecId
            {
                AccountingDistributionProcessor::deleteAllDistributionsForSourceDocLine(trvReqLine.SourceDocumentLine);
            }
        }
        else
        {
            throw Error("@Expense:ExpenseReportProjCommittedCost");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRequisitionNumberAndRefDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the travel requisition by using the specified the travel requisition number.
    /// </summary>
    /// <param name="_reqNumber">
    /// The travel requisition number.
    /// </param>
    /// <param name="_refDataAreaId">
    /// Reference data area.
    /// </param>
    /// <returns>
    /// The travel requisition record.
    /// </returns>
    public static TrvRequisitionTable findByRequisitionNumberAndRefDataAreaId(
                    TrvRequisitionNumber _reqNumber, LegalEntityDataAreaId _refDataAreaId)
    {
        TrvRequisitionTable trvRequisitionTable;
    
        if (_reqNumber && _refDataAreaId)
        {
            select firstonly trvRequisitionTable
                where trvRequisitionTable.RequisitionNumber == _reqNumber
                    && trvRequisitionTable.ReferenceDataAreaId == _refDataAreaId;
        }
    
        return trvRequisitionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        TrvPolicyEvalEngine::deleteNotNeededJustifications(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy, true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ExpenseTravelRequisition</ConfigurationKey>
	<DeveloperDocumentation>@SYS317018</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS153114</Label>
	<SingularLabel>@SYS153114</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CreatingWorker</TitleField1>
	<TitleField2>RequisitionNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>Expense</Modules>
	<ReplacementKey>RequisitionNumberLegalEntityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentHeader</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentHeader</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TrvPolicyViolationsCache</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TrvPolicyViolationsCache</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TrvRequisitionLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TrvRequisitionLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TravelPurpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Destination</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TravelPurpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Destination</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatingWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS36367</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreatingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview1</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employeeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TravelPurpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Destination</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview2</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>toDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReconciliationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalEstimateWithCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReferenceDataArea</Name>
			<Label>@SYS135125</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentHeader</Name>
			<Label>@SYS314386</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentLine</Name>
			<Label>@SYS319494</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkerListPage</Name>
			<Label>@SYS317017</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReconciliationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalEstimate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>amountToBeReconciled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Workflow</Name>
			<Label>@SYS108240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TravelPurpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Destination</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalEstimate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>anyPolicyErrors</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApprovalStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvRequisitionApprovalStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreatingWorker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TrvHcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
			<Label>@SYS153121</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Destination</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvDestination</ExtendedDataType>
			<Label>@SYS111227</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReconciliationStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvRequisitionReconciliationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RequisitionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvRequisitionDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RequisitionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvRequisitionNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314386</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS319494</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TravelPurpose</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvTravelTxtEDT</ExtendedDataType>
			<Label>@Expense:TravelReqBusinessPurpose</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LegalEntityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TrvCreatingWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatingWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RequisitionNumberLegalEntityIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RequisitionNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedTransactionIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatedTransactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceDataAreaId</Name>
					<Field>ReferenceDataAreaId</Field>
					<RelatedField>DataArea</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LegallyAccounts</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LegallyAccountedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentHeader_TrvRequisitionTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TrvRequisitionTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvDestinations</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TrvDestinations</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceDataAreaId</Name>
					<Field>ReferenceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Destination</Name>
					<SourceEDT>TrvDestination</SourceEDT>
					<Field>Destination</Field>
					<RelatedField>Destination</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DestinationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvRequisitionHcmWorker</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Creates</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CreatedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreatingWorker</Name>
					<Field>CreatingWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvTravelTxt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TrvTravelTxt</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceDataAreaId</Name>
					<Field>ReferenceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TravelPurpose</Name>
					<SourceEDT>TrvTravelTxtEDT</SourceEDT>
					<Field>TravelPurpose</Field>
					<RelatedField>Txt</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TrvTxtIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>