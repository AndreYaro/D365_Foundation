<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvCashAdvance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvCashAdvance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceWithCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the balance amount along with currency of the cash advance.
    /// </summary>
    /// <returns>
    /// The balance along with currency of the cash advance.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TrvAmountCurrency balanceWithCurrencyCode()
    {
        return TrvExpenseHelper::amountWithTransactionCurrencyCode(this.Balance, this.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaidAmountMST</Name>
				<Source><![CDATA[
    private void calcPaidAmountMST()
    {
        if (this.ExchRate)
            this.PaidAmountMST = CurrencyExchangeHelper::amountCur2MST(this.PaidAmountCur, this.CurrencyCode, this.ExchRate);
        else
            this.PaidAmountMST = this.PaidAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRequestedAmountMST</Name>
				<Source><![CDATA[
    private void calcRequestedAmountMST()
    {
        if (this.ExchRate)
            this.RequestAmountMST = CurrencyExchangeHelper::amountCur2MST(this.RequestedAmountCur, this.CurrencyCode, this.ExchRate);
        else
            this.RequestAmountMST = this.RequestedAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the cash advance can be deleted.
    /// </summary>
    /// <returns>
    ///     true if the cash advance can be deleted, false otherwise.
    /// </returns>
    /// <remarks>
    ///     The cash advance can be deleted only if it is the Create state.
    /// </remarks>
    public boolean canDelete()
    {
        boolean ret = false;

        switch (this.CashAdvanceStatus)
        {
            case TrvWorkflowCashAdvanceStatus::Created:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        boolean ret = (this.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Created);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the exchange rate.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the value is being set.
    /// </param>
    /// <param name="_exchRate">
    /// The value of the exchange rate to be set.
    /// </param>
    /// <returns>
    /// The exchange rate.
    /// </returns>
    public edit ExchRate editExchRate(boolean _set, ExchRate _exchRate)
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

        if (_set)
        {
            if (_exchRate >= 0)
            {
                this.ExchRate = exchangeRateHelper.prepareExchangeRateForStorage(_exchRate);
                this.calcPaidAmountMST();
                this.calcRequestedAmountMST();
            }
            else
            {
                checkFailed(strfmt("@SYS71086", fieldpname(ExchangeRate, ExchangeRate), 0));
                _exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
            }
        }
        else
        {
            _exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
        }

        return _exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.RequestingWorker   =   HcmWorker::userId2Worker(curuserid());

        this.CashAdvanceStatus  =   TrvWorkflowCashAdvanceStatus::Created;
        this.TransactionDate    =   DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.RequestedDate      =   DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.CurrencyCode       =   TrvExpenseTransHelper::standardCurrency();
        this.ExchRate           =   100;
        this.setAccounts(this.CurrencyCode);

        if (this.RequestingWorker)
        {
            this.DefaultDimension = HcmEmployment::findByWorkerLegalEntity(this.RequestingWorker, CompanyInfo::current()).DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the cash advance is editable.
    /// </summary>
    /// <returns>
    /// true if the cash advance is editable; otherwise, false.
    /// </returns>
    public boolean isEditable()
    {
        boolean ret = true;

        switch (this.CashAdvanceStatus)
        {
            case TrvWorkflowCashAdvanceStatus::Approved:
            case TrvWorkflowCashAdvanceStatus::Paid:
            case TrvWorkflowCashAdvanceStatus::Pending:
            case TrvWorkflowCashAdvanceStatus::Submitted:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case(fieldnum(TrvCashAdvance, RequestedAmountCur)):
                this.calcRequestedAmountMST();
                break;

            case(fieldnum(TrvCashAdvance, PaidAmountCur)):
                this.calcPaidAmountMST();
                break;

            case(fieldnum(TrvCashAdvance, CurrencyCode)):
                this.setAccounts(this.CurrencyCode);
                this.setDefaultExchangeRate();

            case(fieldnum(TrvCashAdvance, ExchRate)):

                this.calcPaidAmountMST();
                this.calcRequestedAmountMST();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// Title field of the preview pane.
    /// </returns>
    display TrvDescription previewPaneTitle()
    {
        return this.CashAdvanceNumber + ": " + this.Purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccounts</Name>
				<Source><![CDATA[
    private void setAccounts(CurrencyCode _currency)
    {
        TrvExchSetup trvExchSetup = TrvExchSetup::find(_currency);

        if (trvExchSetup)
        {
            this.AdvanceLedgerDimension = trvExchSetup.AdvanceAccountLedgerDimension;
            this.AccountType = trvExchSetup.AccountType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that gives the ledger dimension account.
    /// </summary>
    /// <returns>
    /// The corresponding ledger dimension account.
    /// </returns>
    public LedgerDimensionAccount ledgerDimensionAccount()
    {
        LedgerDimensionAccount ledgerDimension;
        
        if (this.AdvanceLedgerDimension)
        {
            ledgerDimension = TrvExpTransSourceDocLineItem::convertToLedgerDimension(this.AccountType, this.AdvanceLedgerDimension);
        }
        else
        {
            TrvExchSetup trvExchSetup = TrvExchSetup::find(this.CurrencyCode);

            if (trvExchSetup)
            {
                ledgerDimension = TrvExpTransSourceDocLineItem::convertToLedgerDimension(trvExchSetup.AccountType, trvExchSetup.AdvanceAccountLedgerDimension);
            }
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default exchange rate from currency exchange rate setup.
    /// </summary>
    /// <remarks>
    /// The exchange rate will store a direct cross rate that factors in triangulation, between transaction
    /// currency and company currency.
    /// The exception will not always be handled in this method if there is any exception occurs in
    /// the getCrossRate_Static method
    /// </remarks>
    void setDefaultExchangeRate()
    {
        if (this.CurrencyCode)
        {
            try
            {
                this.ExchRate = ExchangeRateHelper::getCrossRate_Static(Ledger::current(),this.CurrencyCode,this.RequestedDate);
            }
            catch
            {
                // if the exchange rate does not exists for the currency code then calculate the amounts based on the exchange rate entered by user
                this.calcPaidAmountMST();
                this.calcRequestedAmountMST();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // update these always
        if (this.ExchRate == 0)
        {
            this.setDefaultExchangeRate();
        }
        this.calcPaidAmountMST();
        this.calcRequestedAmountMST();
        this.setAccounts(this.CurrencyCode);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!this.canDelete())
            {
                throw error (strfmt("@SYS114413", this.CashAdvanceStatus));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case  fieldnum(TrvCashAdvance,PaidAmountCur):
                if (this.PaidAmountCur > this.RequestedAmountCur)
                {
                    ret = ret && checkFailed("@SYS121482");
                }
                if (this.PaidAmountCur < 0)
                {
                    ret = ret && checkFailed("@SYS106933");
                }
                break;

            case  fieldnum(TrvCashAdvance,RequestedAmountCur):
                if (this.RequestedAmountCur < 0)
                {
                    ret = ret && checkFailed("@SYS106933");
                }
                break;

            case  fieldnum(TrvCashAdvance,ExchRate):
                if (this.ExchRate < 0)
                {
                    ret = ret && checkFailed("@SYS106933");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaidAmountfieldsBasedCashAdvanceStatus</Name>
				<Source><![CDATA[
	protected boolean setPaidAmountfieldsBasedCashAdvanceStatus()
    {
        return this.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        if (this.setPaidAmountfieldsBasedCashAdvanceStatus())
        // Paid Amount is editable in Cash Admin form
        {
            this.PaidAmountCur = this.RequestedAmountCur;
            this.PaidAmountMST = this.RequestAmountMST;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the specified cash advance.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the cash advance.
    /// </param>
    public static void deleteRecId(recId _recId)
    {
        TrvCashAdvance trvCashAdvance;

        ttsbegin;
        select forupdate trvCashAdvance where trvCashAdvance.RecId == _recId;
        if (trvCashAdvance)
        {
            if (trvCashAdvance.validateDelete())
            {
                trvCashAdvance.delete();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TrvCashAdvance find(TrvCashAdvanceNumber _cashAdvanceNumber, boolean _forupdate = false)
    {
        TrvCashAdvance trvCashAdvance = null;

        if (_cashAdvanceNumber)
        {
            trvCashAdvance.selectForUpdate(_forupdate);

            select firstonly trvCashAdvance where trvCashAdvance.CashAdvanceNumber == _cashAdvanceNumber;
        }

        return trvCashAdvance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the cash advance for the given record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the cash advance.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record is to be selected for update.
    /// </param>
    /// <returns>
    /// A cash advance record.
    /// </returns>
    public static TrvCashAdvance findRecId(recId _recId, boolean _forupdate = false)
    {
        TrvCashAdvance trvCashAdvance = null;

        if (_recId)
        {
            trvCashAdvance.selectForUpdate(_forupdate);

            select firstonly trvCashAdvance where trvCashAdvance.RecId == _recId;
        }

        return trvCashAdvance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmployeeBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cash advance balance for an employee.
    /// </summary>
    /// <param name="_worker">
    /// The rec ID of the worker that requested the cash advance.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency of the requested cash advance.
    /// </param>
    /// <returns>
    /// The balance of the cash advance for the employee.
    /// </returns>
    public static AmountCur getEmployeeBalance(TrvHcmWorkerRecId _worker, CurrencyCode _currencyCode)
    {
        TrvCashAdvance trvCashAdvance;

        select sum(Balance) from trvCashAdvance where trvCashAdvance.RequestingWorker == _worker &&
                                                      trvCashAdvance.Balance > 0 &&
                                                      trvCashAdvance.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Paid &&
                                                      trvCashAdvance.CurrencyCode == _currencyCode;

        if (trvCashAdvance.Balance)
        {
            return trvCashAdvance.Balance;
        }
        else
        {
            return 0.00;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the balance of the cash advance.
    /// </summary>
    /// <param name="_workerId">
    /// The record ID of the worker.
    /// </param>
    /// <param name="_currency">
    /// The currency code.
    /// </param>
    /// <param name="_amount">
    /// The amount that is being returned.
    /// </param>
    /// <param name="_destination">
    /// The destination.
    /// </param>
    /// <returns>
    /// A map that contains the cash advance numbers along with the corresponding reduction.
    /// </returns>
    public static Map updateBalance(TrvHcmWorkerRecId _workerId, CurrencyCode _currency, AmountCur _amount, TrvDestination _destination)
    {
        TrvCashAdvance trvCashAdvance;
        AmountCur remaining;
        Map m = new Map(Types::String, Types::Real);

        while select forupdate trvCashAdvance order by trvCashAdvance.RequestedDate
                                              where trvCashAdvance.RequestingWorker == _workerId &&
                                                    trvCashAdvance.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Paid &&
                                                    trvCashAdvance.CurrencyCode == _currency &&
                                                    trvCashAdvance.Balance > 0
        {
            remaining = trvCashAdvance.Balance - _amount;
            if (remaining < 0)
            {
                remaining = _amount - trvCashAdvance.Balance;
                m.insert(trvCashAdvance.CashAdvanceNumber, trvCashAdvance.Balance);
                trvCashAdvance.Balance = 0;
            }
            else
            {
                remaining = 0;
                trvCashAdvance.Balance -= _amount;
                m.insert(trvCashAdvance.CashAdvanceNumber, _amount);
            }
            _amount = remaining;

            ttsbegin;
            trvCashAdvance.doUpdate();
            ttscommit;

            if (_amount <= 0)
                break;
        }

        return m;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionAndCompanyCurrencyDifferent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transaction currency and the accounting currency are different.
    /// </summary>
    /// <returns>
    /// True if the transaction currency and the accounting currency are different, false otherwise.
    /// </returns>
    public boolean isTransactionAndCompanyCurrencyDifferent()
    {
        return (this.CurrencyCode != Ledger::accountingCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the amount MST based off the requested amount, and exchange rate and cash advance account based off the currency.
    /// </summary>
    public void insert()
    {
        if (this.ExchRate == 0)
        {
            this.setDefaultExchangeRate();
        }

        this.calcRequestedAmountMST();
        this.setAccounts(this.CurrencyCode);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTAllocated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount allocated to expenses.
    /// </summary>
    /// <returns>
    /// Sum of the amount in company currency allocated to expenses.
    /// </returns>
    [Hookable(false)]
    public final display AmountMST amountMSTAllocated()
    {
        TrvExpCashAdvanceMapping expCashAdvanceMapping;
        select sum(AmountMST) from expCashAdvanceMapping
            where expCashAdvanceMapping.CashAdvanceRecId == this.RecId;

        return expCashAdvanceMapping.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTAvailableToAllocate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount available to be allocated to expenses.
    /// </summary>
    /// <returns>
    ///  Cash advance amount in company currency,
    ///  which is available for allocating to draft expenses.
    /// </returns>
    [Hookable(false)]
    public final display AmountMST amountMSTAvailableToAllocate()
    {
        // if ret becomes negative, that means balanceMST was updated by a posting, 
        // hence in order to get the most updated available balance, we would need to get the difference between paidamount and allocated.
        AmountMST amountAllocatedMST = this.amountMSTAllocated();
        AmountMST ret = this.BalanceMST - amountAllocatedMST;
        AmountMST curExpAmt = (this.BalanceMST + amountAllocatedMST) - this.PaidAmountMST;

        ret = ret < 0 ? this.PaidAmountMST - amountAllocatedMST : this.BalanceMST - curExpAmt;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deducts cash advance balance based on the amount to be deducted
    /// </summary>
    /// <param name="_deductionAmount">
    /// A value that indicates the amount to be deducted.
    /// </param>
    public void deductBalanceMST(AmountMST _deductionAmount)
    {
        AmountMST oldBalanceMST = this.BalanceMST;

        if (this.RecId && oldBalanceMST > 0)
        {
            if (_deductionAmount > oldBalanceMST)
            {
                this.BalanceMST = 0.0;
                this.Balance = 0.0;
            }
            else
            {
                this.BalanceMST -= _deductionAmount;
                AmountCur calculatedBalance = ((this.Balance / oldBalanceMST) * this.BalanceMST);
                this.Balance = CurrencyExchange::round(calculatedBalance, this.CurrencyCode);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@SYS124866</DeveloperDocumentation>
	<FormRef>TrvCashAdvances</FormRef>
	<Label>@SYS102764</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>RequestingWorker</TitleField1>
	<TitleField2>CashAdvanceNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>CashAdvanceNumber</ClusteredIndex>
	<Modules>Expense</Modules>
	<PrimaryIndex>CashAdvanceNumber</PrimaryIndex>
	<ReplacementKey>CashAdvanceNumber</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashAdvanceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvanceLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Balance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashAdvanceStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashAdvanceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestingWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashAdvanceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS62867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestedAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Balance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashAdvanceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Purpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Destination</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaidInfo</Name>
			<Label>@SYS100269</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaidAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvanceLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreviewLeft</Name>
			<Label>@SYS313169</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Destination</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PreviewRight</Name>
			<Label>@SYS313169</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestedAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS101291</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashAdvanceStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkerListPage</Name>
			<Label>@SYS317017</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashAdvanceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashAdvanceStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Balance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Workflow</Name>
			<Label>@SYS103643</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashAdvanceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Purpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Destination</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdvanceLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Balance</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS101753</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BalanceMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BalanceReturned</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashAdvanceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCashAdvanceNumber</ExtendedDataType>
			<Label>@SYS114980</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CashAdvanceStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvWorkflowCashAdvanceStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Destination</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvDestination</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaidAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS59532</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaidAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS116344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaidDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvPaidDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PayingWorker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TrvHcmWorkerRecId</ExtendedDataType>
			<Label>@SYS320665</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Purpose</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvTravelTxtEDT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RequestAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS116343</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RequestedAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvTransactionCurrencyAmount</ExtendedDataType>
			<Label>@SYS115216</Label>
			<Mandatory>Yes</Mandatory>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RequestedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvRequestedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RequestingWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TrvHcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<ExtendedDataType>SysGroup</ExtendedDataType>
			<Label>@SYS21919</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<ExtendedDataType>SysGroup</ExtendedDataType>
			<Label>@SYS21932</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransactionDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvDateStd</ExtendedDataType>
			<Label>@SYS67</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CashAdvanceNumber</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CashAdvanceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EmployeeRequestedDate</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RequestedDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RequestingWorker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CashAdvanceStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AdvanceLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TrvRequestingWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RequestingWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TrvPayingWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PayingWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsRequestedInA</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsRequestedAndPaidInA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Dimensions</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DescribesAccountingOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDescribedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdvanceLedgerDimension</Name>
					<Field>AdvanceLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Purpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<EntityRelationshipRole>@SYS124838</EntityRelationshipRole>
			<RelatedTable>TrvTravelTxt</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsThePurposeFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurposeSpecifiedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Purpose</Name>
					<Field>Purpose</Field>
					<RelatedField>Txt</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvDestinations</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TrvDestinations</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SpecifiesDestinationFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DestinationIsSpecifiedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Destination</Name>
					<SourceEDT>TrvDestination</SourceEDT>
					<Field>Destination</Field>
					<RelatedField>Destination</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DestinationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvPayingHcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Pays</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PaidBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayingWorker</Name>
					<Field>PayingWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvRequestingHcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Requests</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RequestedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequestingWorker</Name>
					<Field>RequestingWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>