<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationProfile</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLocationProfile extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsBegin;

        this.updateVolume();

        WHSLocationLoad::fixLoadForLocations(WHSLocationLoad::locationsToFixOnProfileUpdate(this));

        // Recalculate location status fields if configurations were changed.
        if (this.EnableItemInLocationUpdate             != this.orig().EnableItemInLocationUpdate
        ||  this.EnableLocationActivityDateTimeUpdate   != this.orig().EnableLocationActivityDateTimeUpdate
        ||  this.EnableLocationStatusUpdate             != this.orig().EnableLocationStatusUpdate)
        {
            WHSConsistencyCheckLocationStatus::fixLocationStatusForLocationProfileId(this.LocProfileId);
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWarehouseAndLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the location profile related to the given location ID and warehouse ID.
    /// </summary>
    /// <param name="_inventLocationId">The warehouse that owns the given location.</param>
    /// <param name="_locationId">The given location ID.</param>
    /// <param name="_forUpdate">When true, the <c>WHSLocationProfile</c> table record returned by this method is queried for update.</param>
    /// <returns>
    /// The record from <c>WHSLocationProfile</c> table associated with the given location ID and warehouse ID.
    /// </returns>
    public static WHSLocationProfile findByWarehouseAndLocation(        
        InventLocationId _inventLocationId,
        WMSLocationId    _locationId,
        boolean          _forUpdate        = false)
    {
        WHSLocationProfile locationProfile;

        if (_locationId && _inventLocationId)
        {
            WMSLocation location;

            locationProfile.selectForUpdate(_forUpdate);

            select firstonly locationProfile
                exists join location
                    where location.LocProfileId      == locationProfile.LocProfileId
                        && location.inventLocationId == _inventLocationId
                        && location.wMSLocationId    == _locationId;
        }

        return locationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackLocationProfileDefined</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether at least one location profile is a packing profile type
    /// </summary>
    /// <returns>
    /// true if at least one location profile is of a packing profile type; otherwise, false.
    /// </returns>
    public static boolean isPackLocationProfileDefined()
    {
        WHSLocationProfile  locationProfile;

        select firstonly RecId from locationProfile where locationProfile.LocType == WHSParameters::find().PackingLocationType;

        return (locationProfile.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFitVolumeWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified weigt and volume are
    /// within the limits specified on the location profile.
    /// </summary>
    /// <param name="_volume">
    /// The volume.
    /// </param>
    /// <param name="_weight">
    /// The weight.
    /// </param>
    /// <returns>
    /// true if the specified weight and volume are within the limits; otherwise, false.
    /// </returns>
    public boolean canFitVolumeWeight(Volume _volume, Weight _weight)
    {
        return (!this.MaxWeight || this.MaxWeight >= _weight)
            && (!this.isVolumeConstraintEnabled() || this.maxFillVolume() >= _volume);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalVolumeConstraintEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether total volume constraint is enabled for the location profile.
    /// </summary>
    /// <returns>
    /// true, if total volume constraint is enabled for the location profile; otherwise, false.
    /// </returns>
    public boolean isTotalVolumeConstraintEnabled()

    {
        return this.DimensionFillPCT == WHSDimensionFillPCT::FillPercentage
            && (this.Height != 0 || this.Depth != 0 || this.Width != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsableVolumeConstraintEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether usable volume constraint is enabled for the location profile.
    /// </summary>
    /// <returns>
    /// true, if usable volume constraint is enabled for the location profile; otherwise, false.
    /// </returns>
    public boolean isUsableVolumeConstraintEnabled()
    {
        return this.DimensionFillPCT == WHSDimensionFillPCT::UsableDimensions
            && (this.UsableHeight != 0 || this.UsableDepth != 0 || this.UsableWidth != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVolumeConstraintEnabled</Name>
				<Source><![CDATA[
    public boolean isVolumeConstraintEnabled()
    {
        return this.isUsableVolumeConstraintEnabled()
            || this.isTotalVolumeConstraintEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxFillVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns maximum volume of goods that is allowed to be stored on a location with this profile.
    /// </summary>
    /// <returns>
    /// The maximum volume of goods that is allowed to be stored on a location with this profile.
    /// </returns>
    /// <remarks>
    /// The volume is given in x^3 where x is the standard unit of measure for length.
    /// </remarks>
    public Volume maxFillVolume()

    {
        if (this.DimensionFillPCT == WHSDimensionFillPCT::FillPercentage)
        {
            return this.TotalVolume * this.FillPercentage / 100;
        }

        return this.UsableVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxFillWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns maximum weight of goods that is allowed to be stored on a location with this profile.
    /// </summary>
    /// <returns>
    /// The maximum weight of goods that is allowed to be stored on a location with this profile.
    /// </returns>
    /// <remarks>
    /// The weight is given in the standard unit of measure for weight.
    /// </remarks>
    public Volume maxFillWeight()
    {
        return this.MaxWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WHSLocationProfile, AllowNegative):
                if (this.AllowNegative)
                {
                    this.lpControlled = NoYes::No;
                }
                break;

            case fieldNum(WHSLocationProfile, lpControlled):
                if (this.lpControlled)
                {
                    this.AllowNegative = NoYes::No;
                }
                else
                {
                    this.AllowedContainerTypeGroup = 0;
                    this.EnableLocationLicensePlatePositioning = NoYes::No;
                    this.DisplayMobileDeviceLocationLicensePlatePositioning = NoYes::No;
                }
                break;

            case fieldNum(WHSLocationProfile, AllowMixedItems):
                if (this.mustAllowMixedBatches())
                {
                    this.AllowMixedBatches = NoYes::Yes;
                }
                break;
            case fieldNum(WHSLocationProfile, ReplenishmentExceedLocationCapacity):
                this.replenishmentExceedLocationCapacityModified();
                break;
            case fieldNum(WHSLocationProfile, WorkAvailabilityThresholdType):
                this.workAvailabilityThresholdTypeModified();
                break;

            case fieldNum(WHSLocationProfile, LocType):
                if (!this.enableLocationStatusFeatureFields())
                {
                    this.resetLocationStatusFields();
                }
                break;

            case fieldNum(WHSLocationProfile, EnableLocationLicensePlatePositioning):
                if (!this.EnableLocationLicensePlatePositioning)
                {
                    this.DisplayMobileDeviceLocationLicensePlatePositioning = NoYes::No;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLocationStatusFeatureFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location status feature fields should be enabled.
    /// </summary>
    /// <returns>True if the fields should be enabled; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean enableLocationStatusFeatureFields()
    {
        WHSParameters parameters = WHSParameters::find();
            
        if (this.LocProfileId == parameters.UserLocType
            || this.LocType   == parameters.StageLocType
            || this.LocType   == parameters.ShipFinalLocType
            || this.LocType   == parameters.PackingLocationType)
        {
            return false;
        }

        InventLocation warehouse;
        WMSLocation location;

        select firstonly RecId from location
            where location.LocProfileId == this.LocProfileId
            exists join warehouse
                where warehouse.InventLocationId == location.InventLocationId
                &&    warehouse.WMSLocationIdDefaultReceipt == location.wMSLocationId
                &&    warehouse.WHSEnabled == NoYes::Yes;

        if (Location.RecId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLocationStatusFields</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void resetLocationStatusFields()
    {
        this.EnableItemInLocationUpdate = NoYes::No;
        this.EnableLocationActivityDateTimeUpdate = NoYes::No;
        this.EnableLocationStatusUpdate = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areLocationStatusFieldsEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean areLocationStatusFieldsEnabled()
    {
        return this.EnableItemInLocationUpdate
                || this.EnableLocationActivityDateTimeUpdate
                || this.EnableLocationStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replenishmentExceedLocationCapacityModified</Name>
				<Source><![CDATA[
    private void replenishmentExceedLocationCapacityModified()
    {
        if (this.ReplenishmentExceedLocationCapacity == NoYes::No)
        {
            this.ReplenishmentOverflowCapacityQty = 0;
            this.ReplenishmentOverflowCapacityUnit = '';
            this.ReplenishmentOverflowCapacityPercent = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workAvailabilityThresholdTypeModified</Name>
				<Source><![CDATA[
    private void workAvailabilityThresholdTypeModified()
    {
        if (this.WorkAvailabilityThresholdType == WHSWorkAvailabilityThresholdType::Percent)
        {
            this.ReplenishmentOverflowCapacityQty = 0;
            this.ReplenishmentOverflowCapacityUnit = '';
        }
        else
        {
            this.ReplenishmentOverflowCapacityPercent = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVolumetricsEnabledForProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the volumetrics constraints are enabled for a profile id.
    /// </summary>
    /// <param name = "_locationProfileId">The profile id.</param>
    /// <returns>
    /// true, if the volumetrics constraints are enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean isVolumetricsEnabledForProfileId(WHSLocProfileId _locationProfileId)
    {
        var cache = SysTransactionScopeCache::get(funcName(), 0, new Map(Types::String, Types::Enum));

        if (cache.exists(_locationProfileId))
        {
            return cache.lookup(_locationProfileId);
        }

        boolean result = WHSLocationProfile::find(_locationProfileId).isVolumetricsEnabled();
        cache.insert(_locationProfileId, result);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVolumetricsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the volumetrics constraints are enabled.
    /// </summary>
    /// <returns>
    /// true, if the volumetrics constraints are enabled; otherwise, false.
    /// </returns>
    public boolean isVolumetricsEnabled()
    {
        return this.MaxWeight || this.isVolumeConstraintEnabled() || this.isVolumetricsUsedForAllowedContainers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVolumetricsUsedForAllowedContainers</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Indicates whether the volumetrics constraints are enabled for container types.
    /// </summary>
    /// <returns>
    ///  Returns true if the volumetrics constraints are enabled; otherwise, false.
    /// </returns>
    private boolean isVolumetricsUsedForAllowedContainers()
    {
        return this.AllowedContainerTypeGroup != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowedContainerTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the allowed container types field has a valid value.
    /// </summary>
    /// <returns>
    /// True if value is valid; otherwise, false.
    /// </returns>
    public boolean checkAllowedContainerTypes()
    {
        return this.AllowedContainerTypeGroup == 0 || this.LPControlled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowMixedBatches</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the 'allow mixed batch' setting is valid.
    /// </summary>
    /// <returns>
    ///    true if the 'allow mixed batch' setting is valid; otherwise, false.
    /// </returns>
    public boolean checkAllowMixedBatches()
    {
        boolean result = true;

        if (!this.AllowMixedBatches && this.mustAllowMixedBatches())
        {
            result = checkFailed("@WAX5827");
        }
        else
        {
            if (!this.RecId
                || this.AllowMixedBatches != this.orig().AllowMixedBatches)
            {
                result = WHSLocationProfileValidator::checkMixedBatches(this);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowMixedItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the 'allow mixed items' setting is valid.
    /// </summary>
    /// <returns>
    ///    true if the 'allow mixed items' setting is valid; otherwise, false.
    /// </returns>
    public boolean checkAllowMixedItems()
    {
        boolean result = true;

        if (!this.RecId
            || this.AllowMixedItems != this.orig().AllowMixedItems)
        {
            result = WHSLocationProfileValidator::checkMixedItems(this);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowMixedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the 'allow mixed status' setting is valid.
    /// </summary>
    /// <returns>
    ///    true if the 'allow mixed status' setting is valid; otherwise, false.
    /// </returns>
    public boolean checkAllowMixedStatus()
    {
        boolean result = true;

        if (   !this.RecId
            || this.AllowMixedStatus != this.orig().AllowMixedStatus)
        {
            result =  WHSLocationProfileValidator::checkMixedStatus(this);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUsableDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the usable against the actual dimensions.
    /// </summary>
    /// <returns>
    ///    true if the dimensions are valid; otherwise, false.
    /// </returns>
    public boolean checkUsableDimensions()
    {
        boolean result = true;

        if (   this.Height < this.UsableHeight
            || this.Width  < this.UsableWidth
            || this.Depth  < this.UsableDepth)
        {
            result = checkFailed("@WAX4799");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.updateVolume();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocationProductDimensionMixingDimensions</Name>
				<Source><![CDATA[
    private boolean checkLocationProductDimensionMixingDimensions()
    {
        boolean ret = true;

        if (!this.RecId
            || ((this.EnableLocationProductDimensionSpecificMixing
            &&  !this.orig().EnableLocationProductDimensionSpecificMixing)
            || this.ProductDimFixed != this.orig().ProductDimFixed))
        {
            ret = WhsLocationProfileValidator::checkMixedLocationProductDimensions(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInUseWithADefaultReceiptLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks that all warehouses default receipt locations are still LP controlled.
    /// </summary>
    /// <returns>
    ///     True if all warehouses have valid default receipt locations; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If any warehouses will have an invalid default receipt location the user will not be
    ///     permitted to save.
    /// </remarks>
    public boolean isInUseWithADefaultReceiptLocation()
    {
        boolean         ret;
        WMSLocation     wmsLocation;
        InventLocation  inventLocation;

        select firstonly forceselectorder RecId from inventLocation
            where inventLocation.wmsLocationIdDefaultReceipt != ''
            exists join wmsLocation
            where wmsLocation.wmsLocationId     == inventLocation.wmsLocationIdDefaultReceipt
                && wmsLocation.InventLocationId == inventLocation.InventLocationId
                && wmsLocation.LocProfileId     == this.LocProfileId;

        ret = inventLocation.RecId == 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserLocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the current location profile is set as the profile for User locations in Warehouse management parameters.
    /// </summary>
    /// <returns>true, if this location profile is selected for User locations; otherwise, false.</returns>
    public boolean isUserLocationProfile()
    {
        return WHSParameters::find().UserLocType == this.LocProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAllowMixedBatches</Name>
				<Source><![CDATA[
    private void defaultAllowMixedBatches()
    {
        if (this.mustAllowMixedBatches())
        {
            this.AllowMixedBatches = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
                [fieldnum(WHSLocationProfile, AllowMixedBatches),
                    [fieldnum(WHSLocationProfile, AllowMixedItems)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(WHSLocationProfile, AllowMixedBatches):
                this.defaultAllowMixedBatches();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAllowMixedBatches</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the allow mixed batches flag must be set to yes;
    /// </summary>
    /// <returns>
    /// true if the allow mixed batches flag must be set to yes; otherwise, false.
    /// </returns>
    public boolean mustAllowMixedBatches()
    {
        return this.AllowMixedItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVolume</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates volume of the location profile from the dimensions.
	/// </summary>
    void updateVolume()
    {
        this.UsableVolume = this.UsableHeight * this.UsableWidth * this.UsableDepth;
        this.TotalVolume  = this.Height * this.Width * this.Depth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean         ret;
        WMSLocation     wmsLoc;

        ret = super();

        select firstonly RecId from wmsLoc
            where wmsLoc.LocProfileId == this.LocProfileId;

        if (wmsLoc.RecId > 0)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSLocationProfile, LPControlled):
                if (this.AllowNegative && this.LPControlled)
                {
                    ret = checkFailed("@WAX3925");
                }
                else if (!this.LPControlled && !this.isInUseWithADefaultReceiptLocation())
                {
                    ret = checkFailed("@WAX4796");
                }
                else if (WHSLocationProfile::isInUseWithInventoryTransactions('','',this.LocProfileId))
                {
                    ret = checkFailed(strFmt("@WAX5381", this.LocProfileId));
                }
                else if (this.RecId != 0 && !this.LPControlled && this.isUserLocationProfile())
                {
                    ret = checkFailed(strFmt("@WAX:LocProfileSetAsUserLocProfileAndMustBeLPTracked", this.LocProfileId));
                }
                break;

            case fieldNum(WHSLocationProfile, AllowNegative):
                if (this.lpControlled && this.AllowNegative)
                {
                    ret = checkFailed("@WAX3925");
                }
                break;

            case fieldNum(WHSLocationProfile, AllowedContainerTypeGroup):
                // Validate only when an allowed container type group has been set on the location profile
                if (this.AllowedContainerTypeGroup != 0)
                {
                    if (ret)
                    {
                        // When defining an allowed container type group when one previously did not exist, validate the locations against the group being defined
                        if (this.orig().AllowedContainerTypeGroup == 0)
                        {
                            ret = WHSAllowedContainerTypeGroup::find(this.AllowedContainerTypeGroup).canUpdateAllowedContainerTypeGroup(this.AllowedContainerTypeGroup, this.LocProfileId);
                        }
                        else
                        {
                            ret = WHSAllowedContainerTypeGroup::find(this.AllowedContainerTypeGroup).canUpdateAllowedContainerTypeGroup(this.orig().AllowedContainerTypeGroup, this.LocProfileId);
                        }
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return    super()
               && this.checkUsableDimensions()
               && this.checkAllowMixedItems()
               && this.checkAllowMixedBatches()
               && this.checkAllowMixedStatus()
               && this.checkAllowedContainerTypes()
               && this.checkLocationProductDimensionMixingDimensions()
               && this.checkIfLocationProfileForPackingTypeIsNotLPControlled()
               && this.checkIfLocationProfileForRetailStoreIsLPControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDockMgmtProfile</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds the <c>WHSDockMgmtProfile</c> record of the location profile.
	/// </summary>
	/// <param name="_forUpdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    WHSDockMgmtProfile whsDockMgmtProfile(boolean _forUpdate = false)
    {
        return WHSDockMgmtProfile::find(this.DockMgmtProfileId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
	/// Checks whether a specific <c>whsLocationProfile</c> record exists.
	/// </summary>
	/// <param name="_profileId">
	/// Location profile id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    static boolean exist(WHSLocProfileId _profileId)
    {
        return _profileId && (select firstonly RecId from whsLocationProfile
             where whsLocationProfile.LocProfileId == _profileId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static WHSLocationProfile find(WHSLocProfileId _profileId, boolean _update = false)
    {
        WHSLocationProfile locProfile;

        if (_profileId)
        {
            locProfile.selectForUpdate(_update);

            select firstonly locProfile
                where locProfile.LocProfileId == _profileId;
        }

        return locProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInUseWithInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if any locations under the given location profile still have inventory.
    /// </summary>
    /// <param name="_inventLocationId">
    ///     Warehouse to check for transactions; optional.
    /// </param>
    /// <param name="_wmsLocationId">
    ///     Location Id to check for transactions; optional.
    /// </param>
    /// <param name="_whsLocationProfileId">
    ///     Location profile ID to check for transactions; optional.
    /// </param>
    /// <returns>
    ///     True if the location profile is in use with inventory transactions; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If a location is entered as a parameter it will restrict the search
    ///     to inventory for that location.
    /// </remarks>
    public static boolean isInUseWithInventoryTransactions(
        InventLocationId _inventLocationId     = '',
        WMSLocationId    _wmsLocationId        = '',
        WHSLocProfileId  _whsLocationProfileId = '')
    {
        boolean         result;
        InventSum       inventSum;
        WMSLocation     wmsLocation;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.ClosedQty == NoYes::No
                && (inventSum.InventLocationId  == _inventLocationId
                || _inventLocationId            == '')
                &&  ((inventSum.wmsLocationId   == _wmsLocationId
                && inventSum.InventLocationId   == _inventLocationId)
                ||   _wmsLocationId             == '')
            exists join wmsLocation
            where wmsLocation.wmsLocationId     == inventSum.wmsLocationId
                && wmsLocation.InventLocationId == inventSum.InventLocationId
                && (wmsLocation.LocProfileId    == _whsLocationProfileId
                || _whsLocationProfileId        == '');
        }
        else
        {
            InventDim       inventDim;

            select firstonly RecId from inventSum
            where inventSum.ClosedQty == NoYes::No
            exists join inventDim
                where inventDim.InventDimId        == inventSum.InventDimId
                   && (inventDim.InventLocationId == _inventLocationId
                   ||  !_inventLocationId)
                   &&  ((inventDim.wmsLocationId    == _wmsLocationId
                   &&    inventDim.InventLocationId == _inventLocationId)
                   ||   !_wmsLocationId)
                exists join wmsLocation
                where wmsLocation.wmsLocationId    == inventDim.wmsLocationId
                   && wmsLocation.InventLocationId == inventDim.InventLocationId
                   && (wmsLocation.LocProfileId    == _whsLocationProfileId
                   ||  !_whsLocationProfileId);
        }

        result = inventSum.RecId != 0;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnlimitedVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record has unlimited capacity- so that the volumetric checks are unnecessary.
    /// </summary>
    /// <returns>
    /// True, if the location profile has unlimited capacity; otherwise false.
    /// </returns>
    public boolean hasUnlimitedVolume()
    {
        return (this.DimensionFillPCT   == WHSDimensionFillPCT::UsableDimensions
                && this.UsableHeight    == 0
                && this.UsableWidth     == 0
                && this.UsableDepth     == 0)
            || (this.DimensionFillPCT   == WHSDimensionFillPCT::FillPercentage
                && this.Height          == 0
                && this.Depth           == 0
                && this.Width           == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVolumetricsForPhysicalDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the physical dimension of the location profile can contain the given physical dimensions
    /// </summary>
    /// <param name = "_physDimUOM">The physical dimensions</param>
    /// <returns>True if the volume capacity is sufficient; otherwise false.</returns>
    public boolean validateVolumetricsForPhysicalDim(WHSPhysDimUOM _physDimUOM)
    {
        return (this.DimensionFillPCT   == WHSDimensionFillPCT::UsableDimensions
                && this.UsableHeight    >= _physDimUOM.Height
                && this.UsableWidth     >= _physDimUOM.Width
                && this.UsableDepth     >= _physDimUOM.Depth)
            || (this.DimensionFillPCT   == WHSDimensionFillPCT::FillPercentage
                && this.Height          >= _physDimUOM.Height
                && this.Width           >= _physDimUOM.Width
                && this.Depth           >= _physDimUOM.Depth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightVolumeWithinCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given weight and volume are within the weight and volumetric constraints for this <c>WHSLocationProfile</c> record.
    /// </summary>
    /// <param name = "_weight">The given weight to fit in the location profile</param>
    /// <param name = "_volume">The given volume to fit in the location profile</param>
    /// <returns>True, if the given weight and volume are within the constraints; otherwise false.</returns>
    public boolean weightVolumeWithinCapacity(Weight _weight, Volume _volume)
    {
        boolean weightConstraintRespected = this.MaxWeight != 0 ? _weight <= this.MaxWeight : true;
        boolean volumeConstraintRespected =
            (this.DimensionFillPCT       == WHSDimensionFillPCT::UsableDimensions
                && _volume               <= this.UsableVolume)
            || (this.DimensionFillPCT    == WHSDimensionFillPCT::FillPercentage
                && _volume               <= this.TotalVolume * (this.FillPercentage / 100));

        return weightConstraintRespected && volumeConstraintRespected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingLocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location profile is a packing profile.
    /// </summary>
    /// <returns>True, if the location profile is set up with a packing type; otherwise false.</returns>
    public boolean isPackingLocationProfile()
    {
        boolean         isPackingLocationProfile = false;
        WHSParameters   whsParameters = WHSParameters::find();

        // Is the system set up to use the legacy packing process parameter?
        if (whsParameters.PackingLocType)
        {
            if (whsParameters.PackingLocType == this.LocProfileId)
            {
                isPackingLocationProfile = true;
            }
        }
        else if (whsParameters.PackingLocationType && this.LocType == whsParameters.PackingLocationType)
        {
            isPackingLocationProfile = true;
        }

        return isPackingLocationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStagingLocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location profile is a staging profile.
    /// </summary>
    /// <returns>True, if the location profile is set up with a packing type; otherwise false.</returns>
    public boolean isStagingLocationProfile()
    {
        boolean         isStagingLocationProfile = false;
        WHSParameters   whsParameters = WHSParameters::find();

        if (whsParameters.StageLocType && this.LocType == whsParameters.StageLocType)
        {
            isStagingLocationProfile = true;
        }

        return isStagingLocationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShippingLocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location profile is a final shipping location profile.
    /// </summary>
    /// <returns>True, if the location profile is a final shipping location profile; otherwise false.</returns>
    [Hookable(false)]
    internal boolean isShippingLocationProfile()
    {
        WHSParameters whsParameters = WHSParameters::find();

        return whsParameters.ShipFinalLocType && this.LocType == whsParameters.ShipFinalLocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSortingLocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location profile is a sorting profile.
    /// </summary>
    /// <returns>True, if the location profile is set up with a sorting type; otherwise false.</returns>
    [Hookable(false)]
    public boolean isSortingLocationProfile()
    {
        boolean         isSortingLocationProfile = false;
        WHSParameters   whsParameters = WHSParameters::find();

        if (whsParameters.SortingLocationType && this.LocType == whsParameters.SortingLocationType)
        {
            isSortingLocationProfile = true;
        }

        return isSortingLocationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByRetailDefaultLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location profile is used by retail default location or return location
    /// </summary>
    /// <returns>True if the location profile is used by retail default location or return location; otherwise false.</returns>
    public boolean isUsedByRetailDefaultLocation()
    {
        InventLocation      inventLocation;
        WMSLocation         wmsLocation;

        select firstonly RecId from inventLocation
            where inventLocation.WHSEnabled == NoYes::Yes && inventLocation.FSHStore == NoYes::Yes
        exists join wmsLocation
            where (wmsLocation.wmsLocationId == inventLocation.RBODefaultWMSLocationId || wmsLocation.wmsLocationId == inventLocation.RetailWMSLocationIdDefaultReturn)
            && wmsLocation.InventLocationId == inventLocation.InventLocationId
            && wmsLocation.LocProfileId == this.LocProfileId;

        return inventLocation.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLocationIsFinalShippingLocationAndNonLPControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the location profile is a final shipping location and not LP controlled.
    /// </summary>
    /// <returns>True if the location profile is a final shipping location which is not LP controlled; false
    /// otherwise.</returns>
    public boolean checkIfLocationIsFinalShippingLocationAndNonLPControlled()
    {
        boolean         ret = false;
        WHSParameters   whsParameters = WHSParameters::find();

        if (this.LocType == whsParameters.ShipFinalLocType)
        {
            ret = (this.lpControlled == NoYes::No);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLocationProfileForPackingTypeIsNotLPControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the location profile is a packing location and not LP controlled.
    /// </summary>
    /// <returns>False if the location profile is a packing location which is not LP controlled; otherwise true
    /// </returns>
    public boolean checkIfLocationProfileForPackingTypeIsNotLPControlled()
    {
        return (!this.LPControlled && this.isPackingLocationProfile() ? checkFailed('@WAX:PackingLocationProfilesMustBeLicensePlateControlled') : true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLocationProfileForRetailStoreIsLPControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the location profile is a retail store default location and not LP controlled.
    /// </summary>
    /// <returns>False if the location profile is a retail store default location which is LP controlled; otherwise true
    /// </returns>
    public boolean checkIfLocationProfileForRetailStoreIsLPControlled()
    {
        return (this.LPControlled && this.isUsedByRetailDefaultLocation() ? checkFailed('@WAX:LPControlNotDisabled') : true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocationLicensePlatePositioningEnabledOnALocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location license plate positioning feature is enabled on at least one location profile.
    /// </summary>
    /// <returns>
    /// true if enabled on at least on location profile; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean isLocationLicensePlatePositioningEnabledOnALocationProfile()
    {
        WHSLocationProfile locationProfile;

        select firstonly RecId from locationProfile
            where locationProfile.EnableLocationLicensePlatePositioning == NoYes::Yes;

        return locationProfile.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByLocationType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSLocationProfile findFirstByLocationType(WHSLocType _locationType)
    {
        WHSLocationProfile locationProfile;

        select firstonly locationProfile
            order by locationProfile.LocProfileId asc
            where locationProfile.LocType == _locationType;

        return locationProfile;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4392</DeveloperDocumentation>
	<Label>@WAX330</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LocProfileId</TitleField1>
	<TitleField2>LocProfileName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LocProfileId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LocProfileId</PrimaryIndex>
	<ReplacementKey>LocProfileId</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocProfileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocFormatId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsableHeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsableWidth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsableDepth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LPControlled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowMixedItems</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowMixedBatches</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenCheckDigit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreBatchDates</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowNegative</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DockMgmtProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocProfileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocFormatId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsableHeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsableWidth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsableDepth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LPControlled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowMixedItems</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowMixedBatches</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenCheckDigit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreBatchDates</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FillPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StorageUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsableVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionFillPCT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowMixedStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowNegative</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DockMgmtProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedContainerTypeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableLocationActivityDateTimeUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableItemInLocationUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableLocationStatusUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableLocationLicensePlatePositioning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayMobileDeviceLocationLicensePlatePositioning</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowMixedBatches</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowMixedBatches</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowMixedItems</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowMixedItems</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowMixedStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowMixedStatus</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowNegative</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowNegative</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CycleCountable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountable</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Depth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDepth</ExtendedDataType>
			<Label>@WAX81</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DimensionFillPCT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSDimensionFillPCT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DockMgmtProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDockMgmtProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FillPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSFillPercentage</ExtendedDataType>
			<Label>@WAX5751</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GenCheckDigit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSGenCheckDigit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Height</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSHeight</ExtendedDataType>
			<Label>@WAX4674</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IgnoreBatchDates</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSIgnoreBatchDates</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocFormatId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocFormatId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocProfileId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocProfileId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocProfileName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocProfileName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LPControlled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLPControlled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StorageUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSStorageUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalVolume</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSTotalVolume</ExtendedDataType>
			<Label>@WAX5609</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UsableDepth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUsableDepth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UsableHeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUsableHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UsableVolume</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUsableVolume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UsableWidth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUsableWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Width</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWidth</ExtendedDataType>
			<Label>@WAX4675</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AllowedContainerTypeGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@WAX:WHSAllowedContainerTypeGroupTable</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableLocationActivityDateTimeUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSEnableLocationActivityDateTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableItemInLocationUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSEnableItemInLocation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableLocationStatusUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSEnableLocationStatus</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkAvailabilityThresholdType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkAvailabilityThresholdType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReplenishmentExceedLocationCapacity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReplenishmentExceedLocationCapacity</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReplenishmentOverflowCapacityPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReplenishmentOverflowCapacityPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReplenishmentOverflowCapacityQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReplenishmentOverflowCapacityQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReplenishmentOverflowCapacityUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReplenishmentOverflowCapacityUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableLocationLicensePlatePositioning</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSEnableLocationLicensePlatePositioning</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisplayMobileDeviceLocationLicensePlatePositioning</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDisplayMobileDeviceLocationLicensePlatePositioning</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ProductDimFixed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimFixed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableLocationProductDimensionSpecificMixing</Name>
			<ExtendedDataType>WHSEnableLocationProductDimensionSpecificMixing</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LocProfileId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LocProfileId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AllowedContainerTypeGroup</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AllowedContainerTypeGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LocTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LocType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StorageUnit</Name>
					<Field>StorageUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSDocMgmtProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSDockMgmtProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DockMgmtProfileId</Name>
					<SourceEDT>WHSDockMgmtProfileId</SourceEDT>
					<Field>DockMgmtProfileId</Field>
					<RelatedField>DockMgmtProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLocationFormat</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLocationFormat</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocFormatId</Name>
					<SourceEDT>WHSLocFormatId</SourceEDT>
					<Field>LocFormatId</Field>
					<RelatedField>LocFormatId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLocationType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLocationType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocType</Name>
					<SourceEDT>WHSLocType</SourceEDT>
					<Field>LocType</Field>
					<RelatedField>LocType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSAllowedContainerTypeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSAllowedContainerTypeGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AllowedContainerTypeGroup</Name>
					<Field>AllowedContainerTypeGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>