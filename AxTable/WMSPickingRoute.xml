<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSPickingRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WMSPickingRoute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the current picking route as enabled.
    /// </summary>
    /// <param name="_updateShipmentStatus">
    /// true if the shipment status should be updated; otherwise, false.
    /// </param>
    public void activate(boolean _updateShipmentStatus = true)
    {
        WMSOrderTrans       wmsOrderTrans;
        WMSShipment         wmsShipment;

        ttsbegin;
        while select forupdate wmsOrderTrans
            where wmsOrderTrans.RouteId         == this.PickingRouteID  
        {
            wmsOrderTrans.activate();
        }
        this.ExpeditionStatus   = WMSExpeditionStatus::Activated;
        this.ActivationDateTime = DateTimeUtil::getSystemDateTime();
        this.update();
        if (_updateShipmentStatus)
        {
            wmsShipment = this.wmsShipment(true);
            wmsShipment.setStatus(NoYes::Yes, NoYes::No);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        WMSOrderTrans wmsOrderTrans;
        update_recordset wmsOrderTrans
                setting routeId = this.pickingRouteId
                where wmsOrderTrans.routeId == this.orig().pickingRouteId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeCancelled</Name>
				<Source><![CDATA[
    //returns true if the route can be cancelled
    public boolean canBeCancelled(NoYes _showInfo = NoYes::No)
    {
        WMSOrderTrans wmsOrderTrans;

        if (this.ExpeditionStatus == WMSExpeditionStatus::Started)
        {
            select firstonly RecId from wmsOrderTrans
                where  wmsOrderTrans.RouteId          == this.PickingRouteID
                   && (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Picked   ||
                       wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Staged   ||
                       wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Loaded   ||
                       wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Complete);

            if (wmsOrderTrans.RecId == 0)
            {
                return true;
            }
            return _showInfo ? checkFailed("@SYS114079") : false;
        }

        if (this.ExpeditionStatus != WMSExpeditionStatus::Cancelled && !this.isPhysicalUpdated())
        {
            return true;
        }

        return _showInfo ? checkFailed(strFmt("@SYS50574", this.PickingRouteID)) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the picking route can be deleted
    /// </summary>
    /// <param name="_showInfo">
    /// A Boolean value that indicates whether to send a message to the Infolog
    /// </param>
    /// <returns>
    /// true if the picking route can be deleted; otherwise, false.
    /// </returns>
    public boolean canBeDeleted(NoYes _showInfo = NoYes::No)
    {
        WMSOrderTrans wmsOrderTrans;

        if (this.ExpeditionStatus == WMSExpeditionStatus::Started)
        {
            select firstonly RecId from wmsOrderTrans
                where  wmsOrderTrans.RouteId          == this.PickingRouteID
                   && (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Picked   ||
                       wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Staged   ||
                       wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Loaded   ||
                       wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Complete);

            if (wmsOrderTrans.RecId == 0)
            {
                return true;
            }
            return _showInfo ? checkFailed("@SYS137111") : false;
        }

        if (!this.isPhysicalUpdated())
        {
            return true;
        }

        return _showInfo ? checkFailed(strFmt("@SYS50574", this.PickingRouteID)) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBePickUpdated</Name>
				<Source><![CDATA[
    //returns true if the route can be updated
    public boolean canBePickUpdated()
    {
        WMSOrderTrans wmsOrderTrans;

        if (this.isPhysicalUpdated()                                ||
            this.ExpeditionStatus == WMSExpeditionStatus::Cancelled ||
            this.ExpeditionStatus == WMSExpeditionStatus::Registered)
        {
            return false;
        }

        select firstonly RecId from wmsOrderTrans
            where wmsOrderTrans.RouteId          == this.PickingRouteID
            &&    wmsOrderTrans.ShipmentId       == this.ShipmentId
            &&   (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Activated
            ||    wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Started);

        return (wmsOrderTrans.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    public void cancel()
    {
        WMSOrderTrans           wmsOrderTrans;
        WMSShipment             wmsShipment;

        if (!this.RecId)
        {
            return;
        }

        if (this.isPhysicalUpdated() ||
            this.ExpeditionStatus == WMSExpeditionStatus::Cancelled)
        {
            return;
        }

        ttsbegin;

        while select forupdate wmsOrderTrans
            where wmsOrderTrans.RouteId          == this.PickingRouteID             &&
                 (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered ||
                  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Activated  ||
                  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Started)
        {
            wmsOrderTrans.cancel(false);
        }

        this.setStatus();
        this.EndDateTime = DateTimeUtil::getSystemDateTime();
        this.update();

        wmsShipment = this.wmsShipment(true);
        wmsShipment.notifyOfLineChange(NoYes::Yes, NoYes::No,NoYes::Yes);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canXMLBeSent</Name>
				<Source><![CDATA[
    public boolean canXMLBeSent()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFinishRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finish the specified picking route if it is possible.
    /// </summary>
    /// <remarks>
    /// The picking route can only be finished if there are no picking lines with status lower than Picked.
    /// </remarks>
    public void checkFinishRoute()
    {
        WMSOrderTrans       wmsOrderTransLocal;

        if (!this.PickingRouteID)
        {
            return;
        }

        select firstonly RecId from wmsOrderTransLocal
            where wmsOrderTransLocal.RouteId          == this.PickingRouteID  &&
                 (wmsOrderTransLocal.ExpeditionStatus == WMSExpeditionStatus::None       ||
                  wmsOrderTransLocal.ExpeditionStatus == WMSExpeditionStatus::Registered ||
                  wmsOrderTransLocal.ExpeditionStatus == WMSExpeditionStatus::Activated  ||
                  wmsOrderTransLocal.ExpeditionStatus == WMSExpeditionStatus::Started);

        if (!wmsOrderTransLocal.RecId)
        {
            this.finish();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(
        boolean     _deleteOrderPickShipment = true,
        boolean     _unReserveShipmentLines  = true)
    {
        WMSShipment               wmsShipment;

        ttsbegin;

        if (this.ShipmentType == WMSShipmentType::OrderPick && _deleteOrderPickShipment)
        {
            wmsShipment = WMSShipment::find(this.ShipmentId, true);
            if (wmsShipment.RecId)
            {
                wmsShipment.delete(false);
            }
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finishes the picking route.
    /// </summary>
    public void finish()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            this.doFinish();
            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>doFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finishes the picking route.
    /// </summary>
    protected void doFinish()
    {
        WMSPickingRoute             dbCommitedWMSPickRoute;
        WMSOrderTrans               wmsOrderTrans;
        InventDim                   inventDim;
        WMSShipment                 wmsShipment;
        HcmWorkerRecId              worker = this.operatorWorker ? this.operatorWorker : DirPersonUserEx::findUserWorkerReference();
        WMSOrderTransType           wmsOrderTransType;
        WMSOrderTransType_Output    wmsOrderTransType_Output;
        Set                         overDeliveryMovements;
        SetEnumerator               movementEnumerator;
        InventTransId               inventTransId;
        InventTransOrigin           inventTransOrigin;
        InventTrans                 inventTrans;
        InventMovement              inventMovement;
        boolean                     cwItemOnRoute = false;

        if (this.isPhysicalUpdated() ||
            this.ExpeditionStatus == WMSExpeditionStatus::Cancelled)
        {
            return;
        }

        ttsbegin;

        if (this.ExpeditionStatus == WMSExpeditionStatus::Activated)
        {
            this.start(worker);
        }

        overDeliveryMovements = new Set(Types::String);

        WMSPickingRouteInstrumentationData instrumentationData = new WMSPickingRouteInstrumentationData();
        using (var instrumentationTask = new WMSPickingRouteUpdateInstrumentationTask(instrumentationData))
        {
            while select forupdate wmsOrderTrans
            where wmsOrderTrans.RouteId         == this.PickingRouteID      &&
                 (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered ||
                  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Activated  ||
                  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Started)
            join inventDim
                where inventDim.InventDimId == wmsOrderTrans.InventDimId
            {
                if (inventDim.inventBatchId)
                {
                    instrumentationData.numOfBatchEnabledItems++;
                }
                if (inventDim.inventSerialId)
                {
                    instrumentationData.numOfSerialEnabledItems++;
                }

                if (wmsOrderTrans.PdsCWQty)
                {
                    cwItemOnRoute = true;
                    instrumentationData.numOfCWItems++;
                }
                if (wmsOrderTrans.PdsCWZeroCWLine)
                {
                    wmsOrderTrans.deleteAndReduceOrderQuantity();
                    cwItemOnRoute = true;
                    instrumentationData.numOfDeletedCWLines++;
                }
                else
                {
                    wmsOrderTransType = wmsOrderTrans.wmsOrderTransType();
                    if (wmsOrderTransType is WMSOrderTransType_Output)
                    {
                        wmsOrderTransType_Output = wmsOrderTransType as WMSOrderTransType_Output;
                        wmsOrderTransType_Output.parmSkipOverDeliveryCheck(true);
                        overDeliveryMovements.add(wmsOrderTrans.InventTransId);
                    }

                    var kittingDeliveryControlHandler = KittingWMSHelper::HandlerInstance();

                    if (this.kittingHanddleDeliveryControl(wmsOrderTrans, null))
                    {
                        wmsOrderTransType.finishPickingLine('', inventDim, worker, 0, false, false);
                    }

                    instrumentationData.numOfFinishedLines++;
                }
                instrumentationData.numOfProcessedLines++;
            }
        
            if (this.RecId && cwItemOnRoute && #PdsCatchWeightEnabled)
            {
                // quantities may have been adjusted by CW movement
                select firstonly RecVersion from dbCommitedWMSPickRoute
                where dbCommitedWMSPickRoute.PickingRouteID == this.PickingRouteID
                   && dbCommitedWMSPickRoute.ShipmentId     == this.ShipmentId;
                if (    dbCommitedWMSPickRoute.RecVersion
                && (dbCommitedWMSPickRoute.RecVersion != this.RecVersion))
                {
                    this.selectForUpdate(true);
                    this.reread();
                }
            }

            // Now check that none of the movements will be over delivered
            movementEnumerator = overDeliveryMovements.getEnumerator();
            while (movementEnumerator.moveNext())
            {
                inventMovement = null;
                inventTransId = movementEnumerator.current();
                inventTransOrigin = InventTransOrigin::findByInventTransId(inventTransId);
                switch (inventTransOrigin.ReferenceCategory)
                {
                    // Special handling for the most common reference categories for picking
                    case InventTransType::Sales:
                        inventMovement = InventMovement::construct(InventTransOriginSalesLine::salesLine(inventTransOrigin.RecId));
                        break;
                    case InventTransType::TransferOrderShip:
                        inventMovement = InventMovement::construct(InventTransOriginTransferShip::inventTransferLine(inventTransOrigin.RecId));
                        break;
                    default:
                        break;
                }
                if (!inventMovement)
                {
                    // Not found with special handling above - use generic approach
                    select firstonly inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                       && inventTrans.PickingRouteID        == this.PickingRouteID;

                    inventMovement = inventTrans.inventMovement(true);
                }

                setPrefix(strFmt("@SYS24300", inventMovement.itemId()));
                if (inventMovement && inventMovement.mustCheckOverDelivery(InventDirection::Issue))
                {
                    setPrefix(strFmt("@SYS96345", inventMovement.transType(), inventMovement.transRefId(), inventTransId));
                    if (!inventMovement.checkNotOverDelivery(0, false, 0))
                    {
                        throw error("@SYS18447");
                    }
                }
            }

            this.setStatus();
            this.EndDateTime = DateTimeUtil::getSystemDateTime();
            this.update();

            wmsShipment = this.wmsShipment(true);
            wmsShipment.setStatus(NoYes::Yes, NoYes::No);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTypeOrderPick</Name>
				<Source><![CDATA[
    /*
        Used to init WMSPickingRoute for shipment type Order pick
    */
    public void initTypeOrderPick(
        WMSShipment             _wmsShipment,
        WMSExpeditionStatus     _wmsExpedtionStatus,
        WMSPickRequestTable     _wmsPickRequestTable,
        WMSPickingRouteID       _wmsPickingRouteID = '',
        boolean                 _drawNumber = true)
    {
        if (_drawNumber)
        {
            this.PickingRouteID  = NumberSeq::newGetNum(WMSParameters::numRefWMSPickingRouteId()).num();
        }
        else
        {
            this.PickingRouteID  = _wmsPickingRouteID;
        }
        this.ShipmentId                 = _wmsShipment.ShipmentId;
        this.ExpeditionStatus           = _wmsExpedtionStatus;
        this.ShipmentType               = WMSShipmentType::OrderPick;

        this.TransRefId                 = _wmsPickRequestTable.inventTransRefId();
        this.TransType                  = _wmsPickRequestTable.inventTranstype();
        this.DlvModeId                  = _wmsPickRequestTable.dlvModeId();
        this.DlvTermId                  = _wmsPickRequestTable.dlvTermId();
        this.DeliveryPostalAddress      = _wmsPickRequestTable.deliveryPostalAddress();
        this.DlvDate                    = _wmsPickRequestTable.deliveryDate();
        this.DeliveryName               = _wmsPickRequestTable.deliveryName();
        this.Customer                   = _wmsPickRequestTable.customer();
        this.PrintMgmtSiteId            = _wmsPickRequestTable.printMgmtSiteId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        RetailEventNotificationAction::PickingListCompletion(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPhysicalUpdated</Name>
				<Source><![CDATA[
    public NoYes isPhysicalUpdated()
    {
        return (this.ExpeditionStatus == WMSExpeditionStatus::Picked ||
                this.ExpeditionStatus == WMSExpeditionStatus::Staged ||
                this.ExpeditionStatus == WMSExpeditionStatus::Loaded ||
                this.ExpeditionStatus == WMSExpeditionStatus::Complete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the lowest status of the <c>WMSOrderTrans</c> that are related to this picking route.
    /// </summary>
    /// <returns>
    ///    Lowest <c>WMSExpeditionStatus</c> value of related <c>WMSOrderTrans</c>.
    /// </returns>
    public WMSExpeditionStatus lowestLineStatus()
    {
        return ((select minof(ExpeditionStatus) from wmsOrderTrans where wmsOrderTrans.RouteId == this.PickingRouteID).ExpeditionStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makePickingLine</Name>
				<Source><![CDATA[
    public void makePickingLine(
        WMSOrderTrans       _wmsOrderTrans,
        WMSLocation         _wmsLocation,
        TimeOfDay           _expectedDriveTime,
        TimeOfDay           _expectedPickTime)
    {
        InventDim           reservedDim = _wmsOrderTrans.inventDim();
        WMSOrderTrans       pickingLine;
        InventDim           pickingLineDim;
        WMSOrderTrans       wmsOrderTransCopy;
        InventTable         inventTable = _wmsOrderTrans.inventTable();

        select firstonly forupdate wmsOrderTransCopy
            where wmsOrderTransCopy.RouteId         == _wmsOrderTrans.RouteId    &&
                  wmsOrderTransCopy.RecId           == _wmsOrderTrans.RecId;

        wmsOrderTransCopy.RouteId                   = this.PickingRouteID;
        wmsOrderTransCopy.SortCode                  = (_wmsLocation) ? _wmsLocation.SortCode : _wmsOrderTrans.wmsLocation().SortCode;
        wmsOrderTransCopy.ItemSortCode              = inventTable.SortCode;
        wmsOrderTransCopy.Volume                    = _wmsOrderTrans.Qty * inventTable.grossVolume();
        wmsOrderTransCopy.ExpectedExpeditionTime    = _expectedPickTime;

        select firstonly pickingLine
            where   pickingLine.RouteId          == this.PickingRouteID             &&
                    pickingLine.OrderId          == _wmsOrderTrans.OrderId
            exists join pickingLineDim
                where pickingLineDim.InventDimId        == pickingLine.InventDimId            &&
                      pickingLineDim.InventLocationId   == reservedDim.InventLocationId &&
                      pickingLineDim.wmsLocationId      == reservedDim.wmsLocationId;

        if (!pickingLine)
        {
            wmsOrderTransCopy.ExpectedExpeditionTime += _expectedDriveTime;
        }
        wmsOrderTransCopy.update();
        _wmsOrderTrans.data(wmsOrderTransCopy);

        this.updateFromWMSOrderTrans(wmsOrderTransCopy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromWMSOrderTrans</Name>
				<Source><![CDATA[
    protected void updateFromWMSOrderTrans(WMSOrderTrans _wmsOrderTrans)
    {
        this.ExpectedExpeditionTime += _wmsOrderTrans.ExpectedExpeditionTime;

        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetTotalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total weight of items on the journal.
    /// </summary>
    /// <returns>
    /// The total weight of all items on the journal.
    /// </returns>
    /// <remarks>
    ///  If a box type exists, add the weight of the box to the gross weight of all items.
    /// </remarks>
    Weight mcrGetTotalWeight()
    {
        WMSOrderTrans   wmsOrderTrans;
        InventTable     inventTable;
        Weight          totalWeight;
        Weight          unitWeight;

        while select Qty from wmsOrderTrans
            join inventTable
            where wmsOrderTrans.RouteId == this.PickingRouteID
                && wmsOrderTrans.ItemId == inventTable.ItemId
        {
            unitWeight = inventTable.grossWeight();

            totalWeight += wmsOrderTrans.Qty * unitWeight;
        }

        if (this.mcrPackingBoxName)
        {
            totalWeight += MCRPackingBoxTable::find(this.mcrPackingBoxName).Weight;
        }

        return totalWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrHasExpeditedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether the order is considered expedited.
    /// </summary>
    /// <returns>
    /// true if the order is expedited; otherwise, false.
    /// </returns>
    display MCRExpeditedOrder mcrHasExpeditedLines()
    {
        SalesTable salesTable;
        MCRExpeditedOrder ret = NoYes::No;

        if (this.TransType == InventTransType::Sales)
        {
            salesTable = SalesTable::find(this.TransRefId);

            if (salesTable)
            {
                ret = salesTable.mcrHasExpeditedLines();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfPickingLines</Name>
				<Source><![CDATA[
    public Integer numberOfPickingLines()
    {
        WMSOrderTrans   wmsOrderTrans;

        select count(RecId) from wmsOrderTrans
            where wmsOrderTrans.RouteId == this.PickingRouteID;

        return any2int(wmsOrderTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPort</Name>
				<Source><![CDATA[
    display WMSOutputPort outputPort()
    {
        return this.wmsShipment().OutputPort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPortInventLocationId</Name>
				<Source><![CDATA[
    display InventLocationIdOutput outputPortInventLocationId()
    {
        return this.wmsShipment().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///Sets the pickingRoutes status based on the status of the WMSOrderTrans
    /// </summary>
    /// <remarks>
    /// The route is not updated by the call, so update() or doUpdate() needs to be called afterwards
    /// </remarks>
    public void setStatus()
    {
        switch (this.lowestLineStatus())
        {
            case WMSExpeditionStatus::Registered    :
                this.ExpeditionStatus = WMSExpeditionStatus::Registered;
                break;
            case WMSExpeditionStatus::Activated     :
                //route can be started even though transactions are still activated
                if (this.ExpeditionStatus == WMSExpeditionStatus::Started || this.ExpeditionStatus == WMSExpeditionStatus::Complete)//change from complete is when doing unpick
                {
                    this.ExpeditionStatus = WMSExpeditionStatus::Started;
                }
                else
                {
                    this.ExpeditionStatus = WMSExpeditionStatus::Activated;
                }
                break;
            case WMSExpeditionStatus::Started       :
                this.ExpeditionStatus = WMSExpeditionStatus::Started;
                break;
            case WMSExpeditionStatus::Picked        :   //fall through
            case WMSExpeditionStatus::Staged        :   //fall through
            case WMSExpeditionStatus::Loaded        :   //fall through
            case WMSExpeditionStatus::None          :   //fall through
            case WMSExpeditionStatus::Complete      :
                this.ExpeditionStatus = WMSExpeditionStatus::Complete;
                break;
            case WMSExpeditionStatus::Cancelled     :
                this.ExpeditionStatus = WMSExpeditionStatus::Cancelled;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    public void start(HcmWorkerRecId _worker = DirPersonUserEx::findUserWorkerReference())
    {
        if (this.ExpeditionStatus == WMSExpeditionStatus::None
            || this.ExpeditionStatus  == WMSExpeditionStatus::Registered
            || this.ExpeditionStatus  == WMSExpeditionStatus::Activated)
        {
            this.ExpeditionStatus   = WMSExpeditionStatus::Started;
            this.StartDateTime      = DateTimeUtil::getSystemDateTime();
            this.OperatorWorker     = _worker;
            this.update();
        }
        this.wmsShipment(true).setStatus(NoYes::Yes, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoute</Name>
				<Source><![CDATA[
    /**
        Update route to match argument status
    **/
    public void updateRoute(WMSPickRouteStatusOnUpdate _wmsPickRouteStatusOnUpdate)
    {
        WMSOrderTrans           wmsOrderTransPicked;
        WMSExpeditionStatus     setPickingLineStatusTo;
        WMSShipment             wmsShipment;

        switch (_wmsPickRouteStatusOnUpdate)
        {
            case WMSPickRouteStatusOnUpdate::completed  :
                this.finish();
                setPickingLineStatusTo = WMSExpeditionStatus::Complete;

                /*
                    Since lines are going from picked to a status after picked,
                    wmsOrderTrans status can be updated directly without updating the related wmsOrder
                */
                update_recordset wmsOrderTransPicked
                    setting ExpeditionStatus = setPickingLineStatusTo
                    where wmsOrderTransPicked.RouteId          == this.PickingRouteID
                    &&    wmsOrderTransPicked.ExpeditionStatus == WMSExpeditionStatus::Picked;

                //status for route and shipment must be updated because lines status have changed;
                this.setStatus();
                this.update();

                wmsShipment = this.wmsShipment(true);

                if (wmsShipment.RecId)
                {
                    wmsShipment.setStatus(NoYes::Yes, NoYes::No);
                }
                break;

            case WMSPickRouteStatusOnUpdate::activated  :   //fall through
            default                                     :
                this.activate();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = this.canBeDeleted(true);

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsShipment</Name>
				<Source><![CDATA[
    public WMSShipment wmsShipment(boolean _forUpdate = false)
    {
        return WMSShipment::find(this.ShipmentId ,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the specified picking route.
    /// </summary>
    /// <param name="_routeId">
    /// The <c>routeId</c> parameter of the picking route that can be enabled.
    /// </param>
    /// <exception cref="M:Exception::UpdateConflict">
    /// An update conflict exists.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    /// An update conflict cannot be recovered.
    /// </exception>
    public static void activateRoute(WMSPickingRouteID _routeId)
    {
        #OCCRetryCount
        WMSPickingRoute wmsPickingRoute;
        try
        {
            ttsbegin;

            wmsPickingRoute = WMSPickingRoute::find(_routeId,true);

            if (!wmsPickingRoute.RecId)
            {
                throw(error(strFmt("@SYS51116",_routeId)));
            }

            if (wmsPickingRoute.ExpeditionStatus != WMSExpeditionStatus::Registered)
            {
                throw(error(strFmt("@SYS50574", wmsPickingRoute.PickingRouteID)));
            }

            wmsPickingRoute.activate();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static WMSPickingRoute create(
        WMSShipmentId                   _wmsShipmentId,
        WMSPickingAreaId                _pickingAreaId,
        InventLocationId                _inventLocationId,
        WMSCustomer                     _wmsCustomer,
        InventTransType                 _inventTransType,
        InventTransRefId                _inventTransRefId,
        LogisticsPostalAddressRecId     _deliveryPostalAddress,
        WMSOptimizedPicking             _optimizedPicking)
    {
        WMSPickingRoute  wmsPickingRoute;

        wmsPickingRoute.PickingRouteID          =  NumberSeq::newGetNum(WMSParameters::numRefWMSPickingRouteId()).num();
        wmsPickingRoute.ShipmentId              = _wmsShipmentId;
        wmsPickingRoute.InventLocationId        = _inventLocationId;
        wmsPickingRoute.Customer                = _wmsCustomer;
        wmsPickingRoute.DeliveryPostalAddress   = _deliveryPostalAddress;
        wmsPickingRoute.TransType               = _inventTransType;
        wmsPickingRoute.TransRefId              = _inventTransRefId;
        wmsPickingRoute.ExpeditionStatus        =  WMSExpeditionStatus::Registered;
        wmsPickingRoute.AutoDecreaseQty         =  NoYes::Yes;
        wmsPickingRoute.Priority                =  0;         
        wmsPickingRoute.insert();

        return wmsPickingRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WMSPickingRoute find(
        WMSPickingRouteID   _wmsPickingRouteID,
        boolean             _update = false)
    {
        WMSPickingRoute  wmsPickingRoute;

        wmsPickingRoute.selectForUpdate(_update);

        select firstonly wmsPickingRoute
            index hint IdIdx
            where wmsPickingRoute.PickingRouteID == _wmsPickingRouteID;

        return wmsPickingRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishMulti</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finishes multiple WMSPicking routes.
    /// </summary>
    /// <param name = "_packedList">A packed list of picking route ids, for routes that should be finished.</param>
    static public void finishMulti(container _packedList)
    {
        if (!_packedList)
        {
            return;
        }

        List pickingRouteIdList = List::create(_packedList);

        if (!pickingRouteIdList)
        {
            return;
        }

        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

        KittingIDeliveryControlHandler kitting_DeliveryControlHandler;
        if (isKittingEnabled)
        {
            kitting_DeliveryControlHandler = KittingWMSHelper::HandlerInstance();
        }

        ListEnumerator le = pickingRouteIdList.getEnumerator();

        while (le.moveNext())
        {
            WMSPickingRouteId pickingRouteId = le.current();
            WMSPickingRoute wmsPickingRoute = WMSPickingRoute::find(pickingRouteId, true);

            if (wmsPickingRoute)
            {
                if (kitting_DeliveryControlHandler)
                {
                    ttsbegin;
                    kitting_DeliveryControlHandler.add(WMSShipment::find(wmsPickingRoute.shipmentId), null);
                    wmsPickingRoute.finish();
                    kitting_DeliveryControlHandler.finish(false);
                    ttscommit;
                }
                else
                {
                    wmsPickingRoute.finish();
                }
            }
            else
            {
                checkFailed(strFmt("@SYS103909", pickingRouteId));
            }           
        }

        if (kitting_DeliveryControlHandler)
        {
            kitting_DeliveryControlHandler.finish(true);
            KittingWMSHelper::DisposeHandlerInstance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickPallet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a picking pallet for the picking route.
    /// </summary>
    public void createPickPallet()
    {
        throw(error("@SYS50435"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingHanddleDeliveryControl</Name>
				<Source><![CDATA[
    private boolean kittingHanddleDeliveryControl(WMSOrderTrans _wmsOrderTrans, WMSOrderTransMultiUpdateHandleable _handler)
    {
        var kittingDeliveryControlHandler = KittingWMSHelper::HandlerInstance();
        return !kittingDeliveryControlHandler || kittingDeliveryControlHandler.add(_wmsOrderTrans, _handler);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123921</DeveloperDocumentation>
	<FormRef>WMSPickingRegistration</FormRef>
	<Label>@SYS50404</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>pickingRouteID</TitleField1>
	<TitleField2>shipmentId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>IdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>Inventory</Modules>
	<PrimaryIndex>IdIdx</PrimaryIndex>
	<ReplacementKey>IdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>pickingRouteID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expeditionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>startDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>endDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>pickingRouteID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS103911</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>customer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Handling</Name>
			<Label>@SYS55210</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>operatorWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>autoDecreaseQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>pickingRouteID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyPosted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Internal</Name>
			<Label>@SYS15017</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>optimizedPicking</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPackingBoxName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPickingWaveRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PickRegistrationOverview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>pickingRouteID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expeditionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>optimizedPicking</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintSite</Name>
			<Label>@SYS110380</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintMgmtSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>customer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Statistics</Name>
			<Label>@SYS326</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>expectedExpeditionTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>startDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>endDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>expeditionStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActivationDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ActivationDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>autoDecreaseQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSAutoDecreaseQty</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>currentPickPalletId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPalletId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS50433</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>customer</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WMSCustomer</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSDeliveryName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Label>@SYS7924</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DlvDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSDlvDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvModeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTermId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>endDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>expectedExpeditionTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSExpeditionTime</ExtendedDataType>
			<Label>@SYS51127</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>expeditionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSExpeditionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>handlingType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>WMSHandlingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyPosted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRPackingBoxName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRPackingBoxName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRPickingWaveRef</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRPickingWave</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>operatorWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>optimizedPicking</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSOptimizedPicking</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>pickingAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPickingAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>pickingRouteID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPickingRouteID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrintMgmtSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS110380</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>priority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPriority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shipmentId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSShipmentId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>shipmentType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSShipmentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>startDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>transRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>transType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>volume</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WMSAdvanced</ConfigurationKey>
			<ExtendedDataType>Volume</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>pickingRouteID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>shipmentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShipmentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>shipmentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>expeditionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>pickingRouteID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LogisticsPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MCRWaveIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRPickingWaveRef</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>pickingRouteID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShipmentTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>shipmentType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>expeditionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>pickingRouteID</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>customer</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>pickingRouteID</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterJournal</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>pickingRouteID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>pickingRouteID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
					<MapFieldTo>pickingRouteID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>DlvDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>pickingRouteID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchrateSecondary</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>customer</Name>
					<Field>customer</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvModeId</Name>
					<Field>DlvModeId</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTermId</Name>
					<Field>DlvTermId</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_WMSPickingRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>operatorWorker</Name>
					<Field>operatorWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123859</EntityRelationshipRole>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>transType</Name>
					<Field>transType</Field>
					<ValueStr>InventTransType::TransferOrderShip</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>transRefId</Name>
					<Field>transRefId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRPackingBoxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MCRPackingBoxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRPackingBoxName</Name>
					<SourceEDT>MCRPackingBoxName</SourceEDT>
					<Field>MCRPackingBoxName</Field>
					<RelatedField>PackingBoxName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PackingBoxIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRPickingWaveReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@MCR30018</EntityRelationshipRole>
			<RelatedTable>MCRPickingWorkbenchWave</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRPickingWaveRef</Name>
					<Field>MCRPickingWaveRef</Field>
					<RelatedField>WaveReferenceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PickingArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSStoreArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PickingArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSPickingRoute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>pickingAreaId</Name>
					<Field>pickingAreaId</Field>
					<RelatedField>storeAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>storeAreaType_Extern</Name>
					<RelatedField>storeAreaType</RelatedField>
					<ValueStr>WMSStoreAreaType::Pick</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreAreaIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PickingPallet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSPallet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>currentPickPalletId</Name>
					<Field>currentPickPalletId</Field>
					<RelatedField>wMSPalletId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PalletIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PrintSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrintMgmtSiteId</Name>
					<Field>PrintMgmtSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123519</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>transType</Name>
					<Field>transType</Field>
					<ValueStr>InventTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>transRefId</Name>
					<Field>transRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSShipment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSShipment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>shipmentId</Name>
					<Field>shipmentId</Field>
					<RelatedField>shipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ShipmentIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>