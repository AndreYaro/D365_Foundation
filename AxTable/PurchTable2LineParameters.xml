<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTable2LineParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchTable2LineParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    display FieldLabel fieldName()
    {
        TableId     extensionTableId;
        FieldId     extensionFieldId;
        #isoCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoBR, #isoIN]))
        {
            extensionTableId = PurchTable::internalFieldIdToTableId_W(this.FieldId);
            extensionFieldId = PurchTable::internalFieldIdToFieldId_W(this.FieldId);
        }

        // <GEERU>
        if (extensionTableId == tableNum(PurchTable_RU))
        {
            if (extensionFieldId == fieldnum(PurchTable_RU, InventProfileId_RU))
            {
                return "@GLS113769";
            }

            if (extensionFieldId == fieldnum(PurchTable_RU, PriceAgreementDate_RU))
            {
                return "@SYS21763";
            }

            return fieldid2pname(tablenum(PurchTable_RU), extensionFieldId);
        }
        // </GEERU>
        // <GBR>
        else if (extensionTableId == tableNum(PurchTable_BR))
        {
            return fieldid2pname(tablenum(PurchTable_BR), extensionFieldId);
        }
        // </GBR>
        else if (extensionTableId == tableNum(PurchTable_W))
        {
            return fieldid2pname(tablenum(PurchTable_W), extensionFieldId);
        }

        if (this.FieldId == fieldnum(PurchTable, AccountingDistributionTemplate))
        {
            return "@SYS330319";
        }

        if (this.FieldId == fieldnum(PurchTable, DefaultDimension))
        {
            return "@SYS14926";
        }

        if (this.FieldId == fieldnum(PurchTable, InventLocationId))
        {
            return "@SYS108783";
        }

        // <GEEHU>
        if (this.FieldId == fieldnum(PurchTable, IntrastatFulfillmentDate_HU))
        {
            return "@SYS6530";
        }
        // </GEEHU>

        return fieldid2pname(tablenum(PurchTable), this.FieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(fieldId    _fieldId)

    {
        if (!_fieldId)
            return false;

        return (select firstonly RecId
                    from purchTable2LineParameters
                        where purchTable2LineParameters.FieldId == _fieldId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    static boolean fieldEnabled(fieldId _fieldId)
    {
        boolean                 enabled                 = true;
        TableId                 tableId                 = PurchTable::internalFieldIdToTableId_W(_fieldId);
        FieldId                 fieldId                 = PurchTable::internalFieldIdToFieldId_W(_fieldId);
        DictField               dictField               = new DictField(tableId, fieldId);
        DictConfigurationKey    dictConfigurationKey    = new DictConfigurationKey(dictField.configurationKeyId());

        if (dictConfigurationKey)
            enabled = dictConfigurationKey.enabled();

        if (enabled && tableId != tableNum(PurchTable))
        {
            enabled = SysExtensionSerializerExtensionMap::isExtensionEnabled(tableId);
        }

        if (tableId == tableNum(PurchTable)
            && _fieldId == fieldNum(PurchTable, OverrideSalesTax)
            && !Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            enabled = false;
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static PurchTable2LineParameters find(fieldId   _fieldId,
                                          boolean   _update = false)
    {
        PurchTable2LineParameters   purchTable2LineParameters;

        if (_fieldId)
        {
            purchTable2LineParameters.selectForUpdate (_update);

            select firstonly purchTable2LineParameters
                where purchTable2LineParameters.FieldId == _fieldId;
        }

        if (purchTable2LineParameters.RecId == 0)
        {
            purchTable2LineParameters.FieldId = _fieldId;
        }

        return purchTable2LineParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header2LineFieldIdList</Name>
				<Source><![CDATA[
    static container header2LineFieldIdList()
    {
        container       fList;
        DictTable       dictTable = new DictTable(tablenum(PurchTable));

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>
        
        int i, h;
        for (i=1; i<=dictTable.fieldGroupCnt(); i++)
        {
            if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchTable, HeaderToLineUpdate))
            {
                DictFieldGroup dictFieldGroup = new DictFieldGroup(tablenum(PurchTable), dictTable.fieldGroup(i));

                if (dictFieldGroup)
                {
                    for (h=1; h<=dictFieldGroup.numberOfFields();h++)
                    {
                        SysDictField sysDictField = new SysDictField(tablenum(PurchTable), dictFieldGroup.field(h));

                        if (sysDictField)
                        {
                            // <GEEHU>
                            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]) && (sysDictField.getCountryRegionCodes() == [#isoHU]))
                            {
                                if (sysDictField.id() != fieldnum(PurchTable, IntrastatFulfillmentDate_HU))
                                {
                                    continue;
                                }
                            }
                            else if (sysDictField.getCountryRegionCodes() == [#isoHU])
                            {
                                continue;
                            }
                            // </GEEHU>

                            fList += sysDictField.id();
                        }
                    }
                    break;
                }
            }
        }

        if (PurchTable_W::isExtensionEnabled())
        {
            dictTable = new DictTable(tablenum(PurchTable_W));
            for (i=1; i<=dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchTable_W, HeaderToLineUpdate))
                {
                    DictFieldGroup dictFieldGroup = new DictFieldGroup(tablenum(PurchTable_W), dictTable.fieldGroup(i));

                    if (dictFieldGroup)
                    {
                        for (h=1; h<=dictFieldGroup.numberOfFields(); h++)
                        {
                            SysDictField sysDictField = new SysDictField(tablenum(PurchTable_W), dictFieldGroup.field(h));

                            if (sysDictField)
                            {
                                // <GIN>
                                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && (sysDictField.getCountryRegionCodes() == [#isoIN]))
                                {
                                    if ((sysDictField.id() == fieldnum(PurchTable_W, TDSGroup_IN) && !TaxWithholdParameters_IN::find().TDSActivate))
                                    {
                                        continue;
                                    }
                                    else if ((sysDictField.id() == fieldnum(PurchTable_W, TCSGroup_IN) && !TaxWithholdParameters_IN::find().TCSActivate))
                                    {
                                        continue;
                                    }
                                }
                                else if (sysDictField.getCountryRegionCodes() == [#isoIN])
                                {
                                    continue;
                                }
                                // </GIN>
                                fList += PurchTable::fieldIdToInternalFieldId_W(sysDictField.id(), tableNum(PurchTable_W));
                            }
                        }
                        break;
                    }
                }
            }
        }

        // <GEERU>
        if (PurchTable_RU::isExtensionEnabled())
        {
            dictTable = new DictTable(tablenum(PurchTable_W));
            
            for (i=1; i<=dictTable.fieldGroupCnt(); i++)
            {
                if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchTable_RU, HeaderToLineUpdate))
                {
                    DictFieldGroup dictFieldGroup = new DictFieldGroup(tablenum(PurchTable_RU), dictTable.fieldGroup(i));

                    if (dictFieldGroup)
                    {
                        for (h=1; h<=dictFieldGroup.numberOfFields(); h++)
                        {
                            SysDictField sysDictField = new SysDictField(tablenum(PurchTable_RU), dictFieldGroup.field(h));

                            if (sysDictField)
                            {
                                fList += PurchTable::fieldIdToInternalFieldId_W(sysDictField.id(), tableNum(PurchTable_RU));
                            }
                        }
                        break;
                    }
                }
            }
        }
        // </GEERU>

        return fList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPurchTableVendorDispatchDateFields</Name>
				<Source><![CDATA[
    internal static container addPurchTableVendorDispatchDateFields(container _fieldsList)
    {
        container fieldList = _fieldsList;
        DictTable dictTable = new DictTable(tablenum(PurchTable));
        int i, h;
        for (i=1; i<=dictTable.fieldGroupCnt(); i++)
        {
            if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchTable, VendorDispatchDate))
            {
                DictFieldGroup dictFieldGroup = new DictFieldGroup(tablenum(PurchTable), dictTable.fieldGroup(i));

                if (dictFieldGroup)
                {
                    for (h=1; h<=dictFieldGroup.numberOfFields(); h++)
                    {
                        SysDictField sysDictField = new SysDictField(tablenum(PurchTable), dictFieldGroup.field(h));

                        if (sysDictField)
                        {
                            fieldList += sysDictField.id();
                        }
                    }
                    break;
                }
            }
        }

        return fieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiate</Name>
				<Source><![CDATA[
    static void initiate()
    {
        container header2LineFieldIds = PurchTable2LineParameters::header2LineFieldIdList();
        
        PurchTable2LineParameters::initializeFields(header2LineFieldIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFields</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void initializeFields(container _fieldIds)
    {
        ttsbegin;

        int pos = 1;
        while (pos <= conlen(_fieldIds))
        {
            PurchTable2LineParameters purchTable2LineParameters;
            purchTable2LineParameters.clear();
            purchTable2LineParameters.initValue();
            purchTable2LineParameters.FieldId = conpeek(_fieldIds, pos);

            if (!PurchTable2LineParameters::initiated(purchTable2LineParameters.FieldId))
            {
                purchTable2LineParameters.Table2LineUpdate = TradeTable2LineUpdate::Prompt;
                purchTable2LineParameters.insert();
            }

            pos++;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiated</Name>
				<Source><![CDATA[
    static boolean initiated(FieldId _fieldId = 0)
    {
        PurchTable2LineParameters purchTable2LineParameters;

        select firstonly RecId from purchTable2LineParameters
            where purchTable2LineParameters.FieldId == _fieldId;

        return purchTable2LineParameters.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124554</DeveloperDocumentation>
	<Label>@SYS72634</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>FieldId</TitleField1>
	<TitleField2>Table2LineUpdate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PurchTable2LineParametersIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>PurchTable2LineParametersIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Table2LineUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Update</Name>
			<Label>@SYS2934</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Table2LineUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<RelatedTable>PurchTable</RelatedTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Table2LineUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TradeTable2LineUpdate</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchTable2LineParametersIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchTableToLineParameters</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>FieldId</MapField>
					<MapFieldTo>FieldId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Table2LineUpdate</MapField>
					<MapFieldTo>Table2LineUpdate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>RelationFieldId</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SqlDictionary</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FieldId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FieldId</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FieldId</Name>
					<Field>FieldId</Field>
					<RelatedField>fieldId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>