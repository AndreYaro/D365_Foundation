<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillingCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustBillingCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean                         isValid;
        boolean                         isBillingClassCode;
        CustBillingClassificationCode   custBillingClassificationCode;
        CustInvoiceLine                 custInvoiceLine;
        CustInvoiceTable                custInvoiceTable;
        CustBillingCodeVersion          custBillingCodeVersion;
        date                            endDate;
        date                            beginDate;

        beginDate = dateNull();
        endDate = maxDate();

        if (this.RecId)
        {
            select firstonly validtimestate(beginDate,endDate) ParentRecId, CustBillingCode, BillingCode from custInvoiceLine
            join RecId, InvoiceDate from custInvoiceTable
                where   custInvoiceLine.ParentRecId == custInvoiceTable.RecId
                        && custInvoiceLine.CustBillingCode == this.RecId
            join CustBillingCode, ValidFrom, ValidTo from custBillingCodeVersion
                where   custBillingCodeVersion.CustBillingCode == this.RecId
                        && custBillingCodeVersion.ValidFrom <= custInvoiceTable.InvoiceDate
                        && custBillingCodeVersion.ValidTo >= custInvoiceTable.InvoiceDate;

            if (custInvoiceLine.RecId)
            {
                error("@SPS744");
                isValid = false;
            }

            else
            {
                isValid = super();
            }

            if (isValid)
            {
                select firstonly RecId from custBillingClassificationCode
                    where custBillingClassificationCode.CustBillingCode == this.RecId &&
                    custBillingClassificationCode.CustBillingClassification != 0;

                isBillingClassCode = custBillingClassificationCode.RecId;

                if (isBillingClassCode)
                {
                    isValid = checkFailed(strFmt("@SPS623", CustBillingClassification::find(custBillingClassificationCode.CustBillingClassification).BillingClassification));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustBillingCode</c> table and shows an error message if it does not.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BillingCodeRefRecId _recId)
    {
        boolean ret = true;

        if (!CustBillingCode::exist(_recId))
        {
            ret = checkFailed(strFmt(CustBillingCode::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CustBillingCode</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(BillingCodeRefRecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custBillingCode
                where
                     custBillingCode.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Billing Code based on RecID field.
    /// </summary>
    /// <param name="_billingCodeRefRecId">
    /// The BillingCodeRefRecId corresponds the RecID field.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean that determines whether to read the record for updating; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustBillingCode</c> table buffer.
    /// </returns>
    /// <remarks>
    /// A public method to find Billing Code records.
    /// </remarks>
    public static CustBillingCode find(
        BillingCodeRefRecId _billingCodeRefRecId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustBillingCode billingCodeTable;

        billingCodeTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            billingCodeTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            billingCodeTable
            where
            billingCodeTable.RecId == _billingCodeRefRecId;

        return billingCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBillingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>CustBillingCode</c> table to find the specified record.
    /// </summary>
    /// <param name="_billingCode">
    /// A billing code to find.
    /// </param>
    /// <returns>
    /// <c>CustBillingCode</c>  table buffer.
    /// </returns>
    public static CustBillingCode findBillingCode(BillingCode _billingCode)
    {
        CustBillingCode billingCodeTable;

        select firstonly
            billingCodeTable
            where
            billingCodeTable.BillingCode == _billingCode;

        return billingCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>CustBillingCode</c> table contains records.
    /// </summary>
    /// <returns>
    /// true if record(s) exist in the <c>CustBillingCode</c> table; otherwise, false.
    /// </returns>
    public static boolean isTableEmpty()
    {
        return (select firstonly RecId from custBillingCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified <c>CustBillingCode</c> table record is associated with <c>CustInvoiceLine</c> table records.
    /// </summary>
    /// <param name="_billingCodeRefRecId">
    /// A <c>CustBillingCode</c> record RecId.
    /// </param>
    /// <returns>
    /// true if billing code record is associated with the <c>CustInvoiceLine</c> table records; otherwise, false.
    /// </returns>
    public static boolean isUsedByInvoice(BillingCodeRefRecId _billingCodeRefRecId)
    {
        CustInvoiceLine custInvoiceLine;

        select firstonly RecId from custInvoiceLine
            where custInvoiceLine.CustBillingCode == _billingCodeRefRecId;

        return custInvoiceLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBillingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>CustBillingCode</c> form for the specified RecId.
    /// </summary>
    /// <param name="_caller">
    /// The form object that called the <c>CustBillingCode</c> form.
    /// </param>
    /// <param name="_custBillingCodeRecId">
    /// The RecId of <c>CustBillingCode</c> table.
    /// </param>
    public static void jumpRefBillingCode(Object _caller, RefRecId _custBillingCodeRecId)
    {
        CustBillingCode custBillingCode = CustBillingCode::find(_custBillingCodeRecId);

        if (!custBillingCode)
        {
            return;
        }

        Args args = new Args();
        args.caller(_caller);
        args.lookupRecord(custBillingCode);
        args.openMode(OpenMode::Auto);

        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(CustBillingCode), MenuItemType::Display);
        FormRun formRun = menuFunction.create(args);
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ID of the label to use when displaying a message to indicate that the record does not exist.
    /// </summary>
    /// <returns>
    /// A string indicating the label ID.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBillingcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that billing code value exists in the <c>CustBillingCode</c> table, and displays error message if it does not.
    /// </summary>
    /// <param name="_billingCode">
    /// A billing code to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean validateBillingcode(BillingCode _billingCode)
    {
        boolean found;

        found = CustBillingCode::findBillingCode(_billingCode).RecId != 0  ;

        if (!found)
        {
          found = checkFailed(strFmt("@SPS33",_billingCode));
        }

        return found;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS847</DeveloperDocumentation>
	<FormRef>CustBillingCode</FormRef>
	<Label>@SPS21</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BillingCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustBillingCodeVersion</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustBillingCodeVersion</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceLine</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionCustomerTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JournalizingDefinitionCustomerTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillingCode</Name>
			<Label>@SPS21</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillingCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BillingCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BillingCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BillingCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>