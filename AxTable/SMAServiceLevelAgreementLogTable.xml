<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMAServiceLevelAgreementLogTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMAServiceLevelAgreementLogTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>duration</Name>
				<Source><![CDATA[
    display public Seconds duration()
    {
        Seconds duration = 0;

        if (this.Status == SMALogStatus::Closed)
        {
            // Days in seconds, throw error on overflow
            duration = int642int(DateTimeUtil::getDifference(this.EndDateTime, this.StartDateTime),true);
        }

        return duration;
    }
]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        Common          common;
        boolean         updateCompliance;
        SysDictTable    dictTable;

        updateCompliance = (this.StartDateTime != this.orig().StartDateTime || this.EndDateTime != this.orig().EndDateTime);

        ttsbegin;

        super();

        if (updateCompliance)
        {
            dictTable = new SysDictTable(SMAServiceLevelAgreementLogTable::logType2TableId(this.LogType));
            common = SMAServiceLevelAgreementLogTable::getRelatedRecord(this.LogType, this.RefRecId);

            if (dictTable && common)
            {
                if (tableHasMethod(dictTable, identifierstr(calcServiceLevelAgreementCompliance)))
                {
                    common.calcServiceLevelAgreementCompliance();
                    common.update();
                }
            }
        }

        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.Status == SMALogStatus::Closed && ((this.EndDateTime) && this.StartDateTime > this.EndDateTime ))
        {
            // End date and time must be after start date and time
            ret = checkFailed("@SYS105059");
        }

        if (ret &&
              ((this.Status == SMALogStatus::Closed &&
               (select RecId from   smaServiceLevelAgreementLogTable
                             where (smaServiceLevelAgreementLogTable.LogType         == this.LogType)
                               &&  (smaServiceLevelAgreementLogTable.RefRecId        == this.RefRecId)
                               &&  (smaServiceLevelAgreementLogTable.RecId           != this.RecId)
                               &&  (smaServiceLevelAgreementLogTable.StartDateTime   != smaServiceLevelAgreementLogTable.EndDateTime)
                               && ((smaServiceLevelAgreementLogTable.StartDateTime   <= this.StartDateTime
                                 && smaServiceLevelAgreementLogTable.EndDateTime     >= this.EndDateTime)
                                || (smaServiceLevelAgreementLogTable.StartDateTime   >= this.StartDateTime
                                 && smaServiceLevelAgreementLogTable.StartDateTime   <  this.EndDateTime)
                                || (smaServiceLevelAgreementLogTable.EndDateTime     >  this.StartDateTime
                                 && smaServiceLevelAgreementLogTable.EndDateTime     <= this.EndDateTime))).RecId != 0)
            || (this.Status == SMALogStatus::Open &&
               (select RecId from   smaServiceLevelAgreementLogTable
                             where smaServiceLevelAgreementLogTable.LogType         == this.LogType
                                && smaServiceLevelAgreementLogTable.RefRecId        == this.RefRecId
                                && smaServiceLevelAgreementLogTable.RecId           != this.RecId
                                && smaServiceLevelAgreementLogTable.StartDateTime   <= this.StartDateTime
                                && smaServiceLevelAgreementLogTable.EndDateTime     >  this.StartDateTime).RecId != 0)))
        {
            // Time log intervals should not overlap
            ret = checkFailed("@SYS111772");
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static SMAServiceLevelAgreementLogTable find(SMAServiceLevelAgreementLogType _logType, RefRecId _refRecId, boolean _forupdate = false)
    {
        SMAServiceLevelAgreementLogTable serviceLevelAgreementLog = null;

        if (_refRecId)
        {
            serviceLevelAgreementLog.selectForUpdate(_forupdate);

            select firstonly serviceLevelAgreementLog
                where serviceLevelAgreementLog.LogType == _logType &&
                      serviceLevelAgreementLog.RefRecId == _refRecId;
        }

        return serviceLevelAgreementLog;
    }
]]></Source>
			</Method>
			<Method>
				<Name>firstStartDateTime</Name>
				<Source><![CDATA[
        public static SMASLAStartDateTime firstStartDateTime(SMAServiceLevelAgreementLogType _logType, RefRecId _refRecId)
    {
        SMAServiceLevelAgreementLogTable    serviceLevelAgreementLog;
        SMASLAStartDateTime                 ret = DateTimeUtil::newDateTime(dateNull(),0);

        // Find the original start date
        select firstonly serviceLevelAgreementLog
            order by StartDateTime asc
            where serviceLevelAgreementLog.LogType == _logType &&
                  serviceLevelAgreementLog.RefRecId == _refRecId;

        if (serviceLevelAgreementLog)
        {
            ret = serviceLevelAgreementLog.StartDateTime;
        }
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getRelatedRecord</Name>
				<Source><![CDATA[
        public static Common getRelatedRecord(SMAServiceLevelAgreementLogType _logType, RefRecId _refRecId)
    {
        Common          common;
        SysDictTable    dictTable;

        dictTable = new SysDictTable(SMAServiceLevelAgreementLogTable::logType2TableId(_logType));
        common = dictTable.makeRecord();

        if (dictTable && dictTable.rights() >= AccessType::View)
        {
            select forupdate common where common.RecId == _refRecId;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastStartDateTime</Name>
				<Source><![CDATA[
        public static SMASLAStartDateTime lastStartDateTime(SMAServiceLevelAgreementLogType _logType, RefRecId _refRecId)
    {
        SMAServiceLevelAgreementLogTable    serviceLevelAgreementLog;
        SMASLAStartDateTime                 ret = DateTimeUtil::newDateTime(dateNull(),0);

        // Find the original start date
        select firstonly serviceLevelAgreementLog
            order by StartDateTime desc
            where serviceLevelAgreementLog.LogType == _logType &&
                  serviceLevelAgreementLog.RefRecId == _refRecId &&
                  serviceLevelAgreementLog.Status == SMALogStatus::Open;

        if (serviceLevelAgreementLog)
        {
            ret = serviceLevelAgreementLog.StartDateTime;
        }
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>logType2TableId</Name>
				<Source><![CDATA[
        public static tableId logType2TableId(SMAServiceLevelAgreementLogType _logType)
    {
        tableId tableId;

        switch (_logType)
        {
            case SMAServiceLevelAgreementLogType::ServiceOrder :
                tableId = tablenum(SMAServiceOrderTable);
                break;
            case SMAServiceLevelAgreementLogType::Case :
                tableId = tablenum(CaseDetail);
                break;
            default :
                tableId = 0;
                break;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId2LogType</Name>
				<Source><![CDATA[
        public static SMAServiceLevelAgreementLogType tableId2LogType(tableId _tableId)
    {
        SMAServiceLevelAgreementLogType logType;

        switch (_tableId)
        {
            case tablenum(SMAServiceOrderTable) :
                logType = SMAServiceLevelAgreementLogType::ServiceOrder;
                break;
            case tablenum(CaseDetail):
                logType = SMAServiceLevelAgreementLogType::Case;
                break;
            default :
                logType = SMAServiceLevelAgreementLogType::Case;
                break;
        }

        return logType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInProgress</Name>
				<Source><![CDATA[
        public static Seconds totalInProgress(SMAServiceLevelAgreementLogType _logType, RefRecId _refRecId)
    {
        SMAServiceLevelAgreementLogTable    closedLogEntry;
        Seconds                             ret             = 0;
        int64                               secInProgress   = 0;

        if (!_refRecId)
        {
            return ret;
        }

        // Has the time log been stopped at some point

        while select closedLogEntry
            where closedLogEntry.LogType    == _logType
                && closedLogEntry.RefRecId  == _refRecId
                && closedLogEntry.Status    == SMALogStatus::Closed
        {
            secInProgress = secInProgress + closedLogEntry.duration();
        }

        ret = int642int(secInProgress,true);
        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SMAManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS122710</DeveloperDocumentation>
	<FormRef>SMAServiceLevelAgreementLog</FormRef>
	<Label>@SYS113148</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>LogType</TitleField1>
	<TitleField2>Status</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LogTypeRefIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>ServiceManagement</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LogType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EndDateTime</Name>
			<Label>@SYS34406</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EndDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LogType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>modifiedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>duration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StartDateTime</Name>
			<Label>@SYS34405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EndDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMASLAEndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LogType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SMAServiceLevelAgreementLogType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMASLAStartDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>SMALogStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LogTypeRefIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LogType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CaseDetail</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CaseDetail</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CaseDetail</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceLevelAgreementLog</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>