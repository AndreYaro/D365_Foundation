<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCClass extends EcoResCategory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);

        // visit translations
        this.visitTranslations(_visitor);

        // visit attributes
        this.visitAttributes(_visitor);

        // visit sub components
        this.visitComponents(_visitor);

        // visit constraints
        this.visitConstraints(_visitor);

        // Visit calculations
        this.visitCalculations(_visitor);

        // visit requirements (BOMs and Routes)
        this.visitRequirements(_visitor);

        PCComponentConfigurationNomenclature componentConfigurationNomenclature = PCComponentConfigurationNomenclature::findByPCClass(this.RecId, EcoResNomenclatureRole::Id);

        if (componentConfigurationNomenclature.RecId != 0)
        {
            componentConfigurationNomenclature.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor for the translations related to the component.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    protected void visitTranslations(PCModelVisitor _visitor)
    {
        EcoResCategoryTranslation   translation;
        
        while select translation
            where   translation.Category == this.RecId
        {
            translation.accept(_visitor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor for the attributes related to the component.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    protected void visitAttributes(PCModelVisitor _visitor)
    {
        EcoResAttribute             attribute;
        EcoResCategoryAttribute     categoryAttribute;
        
        while select attribute
        join    RecId from categoryAttribute
        where   categoryAttribute.Category  == this.RecId
        &&      categoryAttribute.Attribute == attribute.RecId
        {
            attribute.accept(_visitor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitComponents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor for the sub components related to the component.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    protected void visitComponents(PCModelVisitor _visitor)
    {
        PCSubComponent              subComponent;
        
        while select subComponent
        where subComponent.ParentComponentClass == this.RecId
        {
            subComponent.accept(_visitor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor for the constraints related to the component.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    protected void visitConstraints(PCModelVisitor _visitor)
    {
        PCComponentConstraint       componentConstraint;
        
        while select componentConstraint
            where   componentConstraint.ComponentClass == this.RecId
        {
            componentConstraint.accept(_visitor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitCalculations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor for the calculations related to the component.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    protected void visitCalculations(PCModelVisitor _visitor)
    {
        PCCalculation               calculation;
        
        while select calculation
            where calculation.ComponentClass == this.RecId
        {
            calculation.accept(_visitor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor for the requirements related to the component.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    [Hookable]
    protected void visitRequirements(PCModelVisitor _visitor)
    {
        PCTemplateComponent         templateComponent;
        
        while select templateComponent
            order by templateComponent.Requirement
            where   templateComponent.ComponentClass == this.RecId                          &&
                    templateComponent.LegalEntity    == CompanyInfo::current()           &&
                    (templateComponent.Requirement   == PCRequirement::ActivityRequirement  ||
                    templateComponent.Requirement    == PCRequirement::ProductRequirement)
        {
            templateComponent.accept(_visitor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        EcoResCategoryAttribute ecoResCategoryAttribute;
        EcoResAttribute         ecoResAttribute;

        // delete cascade the attributes of the component
        while   select forupdate    ecoResCategoryAttribute
        join    forupdate           ecoResAttribute
            where   ecoResAttribute.RecId == ecoResCategoryAttribute.Attribute
            &&      ecoResCategoryAttribute.Category == this.RecId
        {
            //EcoResAttribute deleted before ecoResCategoryAttribute relations are removed in super()
            ecoResAttribute.delete();
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <param name="_duplicatedComponentsMap">
    /// A map containing the duplicated records related to components.
    /// </param>
    /// <param name="_duplicatedAttributesMap">
    /// A map containing the duplicated records related to category attributes.
    /// </param>
    /// <returns>
    /// The record ID of the duplicated record.
    /// </returns>
    /// <remarks>
    /// The argument duplicated attributes map has been added.
    /// </remarks>
    public RefRecId duplicate(Map _duplicatedComponentsMap, Map _duplicatedAttributesMap)
    {
        if (_duplicatedComponentsMap.exists(this.RecId))
        {
            return _duplicatedComponentsMap.lookup(this.RecId);
        }

        PCClass duplicate;
        duplicate.data(this);

        EcoResCategoryName categoryName = PCModelingLibrary::duplicateCategoryName(this.Name, NoYes::Yes);

        duplicate = PCModelingLibrary::createComponent(categoryName, EcoResCategoryTranslation::find(this.RecId, SystemParameters::getSystemLanguageId()).Description);

        // duplicate attributes
        this.duplicateAttributes(duplicate, _duplicatedAttributesMap);

        // duplicate sub components
        this.duplicateSubComponents(duplicate, _duplicatedComponentsMap, _duplicatedAttributesMap);

        // duplicate requirements
        this.duplicateRequirements(duplicate);

        _duplicatedComponentsMap.insert(this.RecId, duplicate.RecId);

        //duplicate constraints
        this.duplicateConstraints(duplicate, _duplicatedComponentsMap, _duplicatedAttributesMap);

        //duplicate calculations
        this.duplicateCalculations(duplicate);

        //duplicate translations
        this.duplicateTranslations(duplicate.RecId);

        //duplicate nomenclature
        this.duplicateNomenclature(duplicate);

        return duplicate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the category attributes related to the component.
    /// </summary>
    /// <param name = "_duplicate">
    /// The duplicate component.
    /// </param>
    /// <param name="_duplicatedAttributesMap">
    /// A map containing the duplicated records related to category attributes.
    /// </param>
    protected void duplicateAttributes(PCClass _duplicate, Map _duplicatedAttributesMap)
    {
        EcoResCategoryAttribute     categoryAttribute;
        while select categoryAttribute
            where categoryAttribute.Category == this.RecId
        {
            categoryAttribute.pcDuplicate(_duplicate.RecId, _duplicatedAttributesMap
            );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateSubComponents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the sub components related to the component.
    /// </summary>
    /// <param name = "_duplicate">
    /// The duplicate component.
    /// </param>
    /// <param name="_duplicatedComponentsMap">
    /// A map containing the duplicated records related to components.
    /// </param>
    /// <param name="_duplicatedAttributesMap">
    /// A map containing the duplicated records related to category attributes.
    /// </param>
    protected void duplicateSubComponents(PCClass _duplicate, Map _duplicatedComponentsMap, Map _duplicatedAttributesMap)
    {
        PCSubComponent              subComponent;
        while select subComponent
            where subComponent.ParentComponentClass == this.RecId
        {
            subComponent.duplicate(_duplicate.RecId, _duplicatedComponentsMap
            , _duplicatedAttributesMap
            );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the requirements related to the component.
    /// </summary>
    /// <param name = "_duplicate">
    /// The duplicate component.
    /// </param>
    [Hookable]
    protected void duplicateRequirements(PCClass _duplicate)
    {
        PCTemplateComponent         templateComponent;
        while select templateComponent
            where   templateComponent.ComponentClass == this.RecId                          &&
                    (templateComponent.Requirement   == PCRequirement::ActivityRequirement  ||
                    templateComponent.Requirement    == PCRequirement::ProductRequirement)
        {
            templateComponent.duplicate(_duplicate.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the constraints related to the component.
    /// </summary>
    /// <param name = "_duplicate">
    /// The duplicate component.
    /// </param>
    /// <param name="_duplicatedComponentsMap">
    /// A map containing the duplicated records related to components.
    /// </param>
    /// <param name="_duplicatedAttributesMap">
    /// A map containing the duplicated records related to category attributes.
    /// </param>
    protected void duplicateConstraints(PCClass _duplicate, Map _duplicatedComponentsMap, Map _duplicatedAttributesMap)
    {
        PCComponentConstraint       componentConstraint;
        while select componentConstraint
            where   componentConstraint.ComponentClass == this.RecId
        {
            componentConstraint.duplicate(_duplicate.RecId, _duplicatedComponentsMap, _duplicatedAttributesMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateCalculations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the calculations related to the component.
    /// </summary>
    /// <param name = "_duplicate">
    /// The duplicate component.
    /// </param>
    protected void duplicateCalculations(PCClass _duplicate)
    {
        PCCalculation               calculation;
        while select calculation
            where calculation.ComponentClass == this.RecId
        {
            calculation.duplicate(_duplicate.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the translations related to the component.
    /// </summary>
    /// <param name="_duplicateComponent">
    /// The record ID of the duplicated component.
    /// </param>
    private void duplicateTranslations(RefRecId _duplicateComponent)
    {
        EcoResCategoryTranslation  duplicateTranslation;
        EcoResCategoryTranslation  originalTranslation;

        ttsbegin;
        // the translation record for system language is created when the component is duplicated, so it is skipped here.
        while select originalTranslation
            where   originalTranslation.Category == this.RecId &&
                    originalTranslation.LanguageId  != SystemParameters::getSystemLanguageId()
        {
            duplicateTranslation.clear();
            duplicateTranslation.data(originalTranslation);
            duplicateTranslation.Category = _duplicateComponent;
            duplicateTranslation.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateNomenclature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the nomenclature assigned to the component.
    /// </summary>
    /// <param name = "_duplicate">The duplicate component.</param>
    private void duplicateNomenclature(PCClass _duplicate)
    {
        PCComponentConfigurationNomenclature componentNomenclature;

        while select componentNomenclature
            where componentNomenclature.PCClass == this.RecId
        {
            if (componentNomenclature.PCConfigurationNomenclature)
            {
                PCConfigurationNomenclature nomenclature = PCConfigurationNomenclature::find(componentNomenclature.PCConfigurationNomenclature);
                if (nomenclature)
                {
                    ttsbegin;

                    PCConfigurationNomenclature nomenclatureDuplicate = nomenclature.duplicate(_duplicate.Name);

                    PCComponentConfigurationNomenclature componentNomenclatureDuplicate;
                    componentNomenclatureDuplicate.data(componentNomenclature);
                    componentNomenclatureDuplicate.PCClass = _duplicate.RecId;
                    componentNomenclatureDuplicate.PCConfigurationNomenclature = nomenclatureDuplicate.recId;
                    componentNomenclatureDuplicate.insert();

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean     hasRefPCProductConfigurationModel;
        boolean     hasRefPCSubComponent;
        boolean     ret = true;

        //
        // The record of the PCClass table does not validate the delete actions from
        // the super class table EcoResCategory as the usage in the PC world of the related table
        // EcoResCategoryAttribute is reversed when the record type is a component.
        //
        [   hasRefPCProductConfigurationModel,
            hasRefPCSubComponent ] = PCModelingLibrary::existReferencesForComponent(this);

        //nothing fancy - same error message as the delete actions
        if (hasRefPCProductConfigurationModel)
        {
            warning(strFmt("@SYS75284", tablePName(PCProductConfigurationModel)));
            ret = false;
        }
        if (hasRefPCSubComponent)
        {
            warning(strFmt("@SYS75284", tablePName(PCSubComponent)));
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified record is in the <c>PCClass</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCClass::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAttributeWithAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any component references and attribute with the given attribute type.
    /// </summary>
    /// <param name="_attributeType">
    /// An attribute type record ID.
    /// </param>
    /// <returns>
    /// true if any component references and attribute with the given attribute type; otherwise, false.
    /// </returns>
    public static boolean existsAttributeWithAttributeType(EcoResAttributeTypeRecId _attributeType)
    {
        PCClass component;
        EcoResAttribute attribute;
        EcoResCategoryAttribute categoryAttribute;

        select firstonly RecId from attribute
            where attribute.AttributeType == _attributeType
            exists join categoryAttribute
            where categoryAttribute.Attribute == attribute.RecId
            exists join component
            where component.RecId == categoryAttribute.Category;

        return attribute.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCClass</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCClass</c> table; otherwise, an empty record.
    /// </returns>
    public static PCClass find(RefRecId _recId, boolean _forupdate = false)
    {
        PCClass record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCClass</c> table.
    /// </summary>
    /// <param name="_name">
    /// The name of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record is to be selected for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCClass</c> table; otherwise, an empty record.
    /// </returns>
    public static PCClass findByName(EcoResCategoryName _name, boolean _forupdate = false)
    {
        PCClass record;

        if (!_name)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.Name == _name;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the XML representation of a component.
    /// </summary>
    /// <returns>
    /// A string that contains the XML representation of the component, wrapped in an empty model if needed.
    /// </returns>
    public str getXML()
    {
        return PCRuntimeLibrary::getSubModelXML(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153035</DeveloperDocumentation>
	<Label>@SYS153034</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>RecId</TitleField1>
	<TitleField2>TableId</TitleField2>
    <AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResCategory</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReuseEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCComponentConfigurationReuseOption</ExtendedDataType>
			<EnumType>PCComponentConfigurationReuseType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CategoryDefinition</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>Component</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>