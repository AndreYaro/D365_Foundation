<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReverseChargeItemGroupData_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReverseChargeItemGroupData_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCategoryIntersection</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if category doesn't belong to another reverse charge group
    /// </summary>
    /// <returns>
    ///   True, if category doesn't belong to another reverse charge group; Otherwise, false.
    /// </returns>
    private boolean checkCategoryIntersection()
    {
        ReverseChargeItemGroupData_W reverseChargeItemGroupData;
        EcoResCategory               ecoResCategory;
        boolean                      ret = true;

        if (this.ItemCode == TableGroupCategoryAll::Category)
        {
            select firstOnly RecId from reverseChargeItemGroupData
                where reverseChargeItemGroupData.PurchSales       == this.PurchSales       &&
                      reverseChargeItemGroupData.ItemCode         == this.ItemCode         &&
                      reverseChargeItemGroupData.EcoResCategoryId == this.EcoResCategoryId &&
                      reverseChargeItemGroupData.RecId            != this.RecId;

            if (reverseChargeItemGroupData)
            {
                ret = checkFailed(strFmt("@Tax:RCCategoryAlreadyUsed", EcoResCategory::find(this.EcoResCategoryId).Name));
            }
            else
            {
                ecoResCategory = EcoResCategory::find(this.EcoResCategoryId);

                if (ecoResCategory.ParentCategory)
                {
                    ret = this.checkParentCategory(ecoResCategory.ParentCategory);
                }

                ret = this.checkChildCategories(ecoResCategory.RecId) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChildCategories</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if child categories do not belong to another reverse charge group
    /// </summary>
    /// <param name = "_parentCategoryId">
    /// <c>EcoResCategoryId</c> which refers to parent category.
    /// </param>
    /// <returns>
    ///   True, if child categories doesn't belong to another reverse charge group; Otherwise, false.
    /// </returns>
    private boolean checkChildCategories(EcoResCategoryId _parentCategoryId)
    {
        ReverseChargeItemGroupData_W reverseChargeItemGroupData;
        EcoResCategory               ecoResCategory;
        boolean                      ret = true;

        while select Name, RecId from ecoResCategory
            where ecoResCategory.ParentCategory == _parentCategoryId
        {
            select firstOnly RecId from reverseChargeItemGroupData
                where reverseChargeItemGroupData.PurchSales       == this.PurchSales      &&
                      reverseChargeItemGroupData.ItemCode         == this.ItemCode        &&
                      reverseChargeItemGroupData.EcoResCategoryId == ecoResCategory.RecId &&
                      reverseChargeItemGroupData.RecId            != this.RecId;

            if (reverseChargeItemGroupData)
            {
                ret = checkFailed(strFmt("@Tax:RCCategoryAlreadyUsed", ecoResCategory.Name));
                break;
            }
            else
            {
                ret = this.checkChildCategories(ecoResCategory.RecId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParentCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if parent categories do not belong to another reverse charge group
    /// </summary>
    /// <returns>
    ///   True, if parent category doesn't belong to another reverse charge group; Otherwise, false.
    /// </returns>
    private boolean checkParentCategory(EcoResCategoryId _ecoResCategoryId)
    {
        ReverseChargeItemGroupData_W reverseChargeItemGroupData;
        EcoResCategory               ecoResCategory;
        boolean                      ret = true;

        select firstOnly RecId from reverseChargeItemGroupData
        where reverseChargeItemGroupData.PurchSales         == this.PurchSales &&
                reverseChargeItemGroupData.ItemCode         == this.ItemCode   &&
                reverseChargeItemGroupData.EcoResCategoryId == _ecoResCategoryId &&
                reverseChargeItemGroupData.RecId            != this.RecId;

        if (reverseChargeItemGroupData)
        {
            ret = checkFailed(strFmt("@Tax:RCCategoryAlreadyUsed", EcoResCategory::find(_ecoResCategoryId).Name));
        }
        else
        {
            ecoResCategory = EcoResCategory::find(_ecoResCategoryId);

            if (ecoResCategory.ParentCategory)
            {
                ret = this.checkParentCategory(ecoResCategory.ParentCategory);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the item relation ID.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that indicates whether to set the item relation ID.
    /// </param>
    /// <param name="_itemRelationId">
    ///    The item relation ID to be set.
    /// </param>
    /// <returns>
    ///    The item relation ID of the record in the <c>ReverseChargeItemGroupData_W</c> table
    /// </returns>
    public edit ItemRelationId editItemRelation(boolean set, ItemRelationId _itemRelationId)
    {
        if (set)
        {
            this.setItemRelation(_itemRelationId);
        }
        else
        {
            _itemRelationId = this.getItemRelation();
        }

        return _itemRelationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the item relation ID of the record.
    /// </summary>
    /// <returns>
    ///    The item relation ID of the record in the <c>ReverseChargeItemGroupData_W</c> table.
    /// </returns>
    public ItemRelationId getItemRelation()
    {
        ItemRelationId   itemRelationId;

        switch ( this.ItemCode )
        {
            case TableGroupCategoryAll::Group:
                itemRelationId = this.ItemGroupId;
                break;

            case TableGroupCategoryAll::Table:
                itemRelationId = this.ItemId;
                break;

            case TableGroupCategoryAll::All:
                itemRelationId = '';
                break;
        }
        return itemRelationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Called when table field modified.
    /// </summary>
    /// <param name = "_fieldId">
    ///   Id of modified field.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ReverseChargeItemGroupData_W, ItemCode):
                switch (this.ItemCode)
                {
                    case TableGroupCategoryAll::All:
                        this.ItemId = '';
                        this.ItemGroupId = '';
                        this.EcoResCategoryId = 0;
                        break;
                    case TableGroupCategoryAll::Category:
                        this.ItemId = '';
                        this.ItemGroupId = '';
                        break;
                    case TableGroupCategoryAll::Group:
                        this.ItemId = '';
                        this.EcoResCategoryId = 0;
                        break;
                    case TableGroupCategoryAll::Table:
                        this.ItemGroupId = '';
                        this.EcoResCategoryId = 0;
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the item relation ID of the record.
    /// </summary>
    /// <param name="_itemRelationId">
    ///    The item relation ID of the record to set in the <c>ReverseChargeItemGroupData_W</c> table.
    /// </param>
    public void setItemRelation(ItemRelationId _itemRelationId)
    {
        if (!_itemRelationId)
        {
            this.ItemId = '';
            this.ItemGroupId = '';
        }
        else
        {
            switch (this.ItemCode)
            {
                case TableGroupCategoryAll::Group:
                    if (!InventItemGroup::find(_itemRelationId).RecId)
                    {
                        checkFailed(strFmt("@SYS112224", _itemRelationId, fieldPName(InventItemGroup, ItemGroupId), tablePName(InventItemGroup)));
                    }
                    else
                    {
                        this.ItemGroupId = _itemRelationId;
                        this.ItemId = '';
                    }
                    break;
                case TableGroupCategoryAll::Table:
                    if (!InventTable::find(_itemRelationId).RecId)
                    {
                        checkFailed(strFmt("@SYS112224", _itemRelationId, fieldPName(InventTable, ItemId), tablePName(InventTable)));
                    }
                    else
                    {
                        this.ItemId = _itemRelationId;
                        this.ItemGroupId = '';
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if ((this.ItemCode == TableGroupCategoryAll::Group && !this.ItemGroupId) ||
        (this.ItemCode == TableGroupCategoryAll::Table && !this.ItemId) )
        {
            ret = checkFailed("@SYS56455");
        }

        if (this.ItemCode ==TableGroupCategoryAll::Category)
        {
            if (!this.EcoResCategoryId)
            {
                ret = checkFailed("@SYS129519");
            }

            ret = this.checkCategoryIntersection() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>ReverseChargeItemGroupData_W</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        return _recId && (
        select firstonly RecId from ReverseChargeItemGroupData_W where
            ReverseChargeItemGroupData_W.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ReverseChargeItemGroupData</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use.
    /// </param>
    /// <returns>
    ///    A record in the <c>ReverseChargeItemGroupData_W</c> table; otherwise, an empty record.
    /// </returns>
    public static ReverseChargeItemGroupData_W find(
        recId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        ReverseChargeItemGroupData_W reverseChargeItemGroupData;

        if (_recId)
        {
            reverseChargeItemGroupData.selectForUpdate(_forupdate);

            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                reverseChargeItemGroupData.concurrencyModel(_concurrencyModel);
            }

            select firstonly reverseChargeItemGroupData
                where reverseChargeItemGroupData.RecId == _recId;
        }

        return reverseChargeItemGroupData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Tax:DevDocItemGroupData</DeveloperDocumentation>
	<FormRef>ReverseChargeItemGroup_W</FormRef>
	<Label>@Tax:RCGroupItmGrpDef</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>ItemCode</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EcoResCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReverseChargeItemGroupId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchSales</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReverseChargePurchSales_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EcoResCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>ItemTableGroupCategoryAllId</ExtendedDataType>
			<EnumType>TableGroupCategoryAll</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReverseChargeItemGroupData</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchSales</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EcoResCategoryId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReverseChargeGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>GroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchSales</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReverseChargeItemGroup_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS118798</EntityRelationshipRole>
			<RelatedTable>ReverseChargeItemGroup_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GroupId</Name>
					<Field>GroupId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS113377</EntityRelationshipRole>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EcoResCategoryId</Name>
					<Field>EcoResCategoryId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS3970</EntityRelationshipRole>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<SourceEDT>ItemGroupId</SourceEDT>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<EntityRelationshipRole>@SYS15649</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>