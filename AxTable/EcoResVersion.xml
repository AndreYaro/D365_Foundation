<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResVersion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record occurs in the <c>EcoResVersion</c> table.
    /// </summary>
    /// <param name="_version">
    /// The ID of the <c>EcoResVersion</c> record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    static boolean exist(EcoResVersionRecId _version)
    {
        if (!_version)
        {
            return false;
        }

        return (select firstonly RecId from ecoResVersion
                    where ecoResVersion.RecId == _version).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInsertTmpStrByProduct</Name>
				<Source><![CDATA[
    private static TmpMCRStr mcrInsertTmpStrByProduct(RefRecId _productId)
    {
        TmpMCRStr                               tmpMCRStr;
        EcoResVersion                           ecoResVersion;
        EcoResProductMasterVersion              ecoResProductMasterVersion;
        EcoResProductMasterDimValueTranslation  productMasterDimValueTranslation;

        if (_productId)
        {
            insert_recordset tmpMCRStr (String15, Str60, Str1260)
                select Name from  ecoResVersion
                    join ecoResProductMasterVersion
                        where ecoResProductMasterVersion.ProductVersionProductMaster == _productId
                        && ecoResVersion.RecId == ecoResProductMasterVersion.ProductVersion
                    outer join Name, Description from productMasterDimValueTranslation
                        where ecoResProductMasterVersion.ProductVersionProductMaster == productMasterDimValueTranslation.RecId
                        && productMasterDimValueTranslation.LanguageId == SystemParameters::getSystemLanguageId();
        }

        select firstonly tmpMCRStr; //needed due to insert_Recordset to set pointer at top.
        return tmpMCRStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupByItemOrProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up Version by item or product (no need for item if product is supplied).
    /// </summary>
    /// <param name="_formControl">
    /// A control for which a lookup is performed.
    /// </param>
    /// <param name="_itemId">
    /// An item for which the sizes are being looked up.
    /// </param>
    /// <param name="_product">
    /// A product for which the sizes are being looked up.
    /// </param>
    /// <remarks>
    /// If a product <c>RefRecId</c> is supplied, the Item will get disregarded.
    /// </remarks>
    public static void mcrlookupByItemOrProduct(
        FormControl             _formControl,
        ItemId                  _itemId,
        RefRecId                _product = 0)
    {
        SysTableLookup                      sysTableLookup = SysTableLookup::newParameters(tableNum(TmpMCRStr), _formControl);
        RefRecId                            productID = _product;
        TmpMCRStr                           tmpMCRStr;

        if (productID == 0 && _itemId)
        {
            productID = EcoResProductMaster::find(InventTable::find(_itemId).Product).RecId;
        }

        tmpMCRStr = EcoResVersion::mcrInsertTmpStrByProduct(productID);

        sysTableLookup.parmTmpBuffer(tmpMCRStr);
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, String15));
        sysTableLookup.setLabel("@SCM:Version");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str60));
        sysTableLookup.setLabel("@SYS25589");
        sysTableLookup.addLookupfield(fieldNum(TmpMCRStr, Str1260));
        sysTableLookup.setLabel("@SYS127587");

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResVersion</c> table.
    /// </summary>
    /// <param name="_version">
    ///    The ID of the <c>EcoResVersion</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResVersion</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResVersion find(EcoResVersionRecId _version, boolean _forUpdate = false)
    {
        EcoResVersion ecoResVersion;

        ecoResVersion.selectForUpdate(_forUpdate);

        if (0 != _version)
        {
            select firstonly ecoResVersion
                where ecoResVersion.RecId == _version;
        }
        return ecoResVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResVersion</c> table.
    /// </summary>
    /// <param name="_name">
    /// A value of the <c>Name</c> field of a <c>EcoResVersion</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResVersion</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResVersion findByName(EcoResVersionName _name, boolean _forUpdate = false)
    {
        EcoResVersion  ecoResVersion;

        ecoResVersion.selectForUpdate(_forUpdate);

        if (_name)
        {
            select firstonly ecoResVersion
                where ecoResVersion.Name == _name;
        }

        return ecoResVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the Go to Main Table form option to the name lookup.
    /// </summary>
    /// <param name="_name">
    /// A <c>EcoResVersionName</c> value to look up.
    /// </param>
    /// <remarks>
    /// This method opens the relevant version form.
    /// </remarks>
    public static void jumpRef(EcoResVersionName _name)
    {
        Args args = new Args();

        args.lookupField(fieldNum(EcoResVersion, Name));
        args.lookupValue(_name);

        new MenuFunction(menuitemDisplayStr(RetailEcoResVersion), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string with the label of the <c>EcoResVersionName</c> extended data type.
    /// </summary>
    /// <returns>
    /// A string that contains the label.
    /// </returns>
    static FieldLabel label()
    {
        return new SysDictType(extendedTypeNum(EcoResVersionName)).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup form to select a version for a product.
    /// </summary>
    /// <param name="_formControl">
    /// A control for which the lookup is performed.
    /// </param>
    /// <param name="_useLookupValue">
    /// True if filter should be used in the lookup; otherwise false.
    /// </param>
    /// <remarks>
    /// The versions that are displayed are chosen from the versions assigned to the product master.
    /// </remarks>
    public static void lookupName(FormControl _formControl, boolean _useLookupValue = false)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource  = query.addDataSource(tableNum(EcoResVersion));
        SysTableLookup          tableLookup = SysTableLookup::newParameters(tablenum(EcoResVersion), _formControl);
        tableLookup.addLookupfield(fieldnum(EcoResVersion, Name));
        tableLookup.parmQuery(query);
        tableLookup.parmUseLookupValue(_useLookupValue);
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductVariantVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup form to select a version for a product variant.
    /// </summary>
    /// <param name="_formControl">
    /// A control for which the lookup is performed.
    /// </param>
    /// <param name="_productMaster">
    /// A value that specifies a product master to display in the lookup form.
    /// </param>
    /// <param name="_productDimensionAttribute">
    /// The ID of a record in the <c>EcoResProductDimensionAttribute</c> table that specifies the dimension
    /// attribute for which versions are displayed in the lookup form.
    /// </param>
    /// <returns>
    /// A <c>EcoResVersion</c> record.
    /// </returns>
    /// <remarks>
    /// The versions displayed are chosen from the versions assigned to the product master.
    /// </remarks>
    public static EcoResVersion lookupProductVariantVersion(
        FormControl                 _formControl,
        EcoResProductMasterRecId    _productMaster,
        RefRecId                    _productDimensionAttribute)
    {
        SysReferenceTableLookup sysReferenceTableLookup;
        Query                   query;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(EcoResVersion), _formControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(EcoResVersion, Name));

        query = new Query(queryStr(EcoResProductVariantVersionLookup));
        query.dataSourceTable(tableNum(EcoResProductMasterVersion)).rangeField(fieldNum(EcoResProductMasterVersion, ProductVersionProductMaster)).value(queryValue(_productMaster));
        query.dataSourceTable(tableNum(EcoResProductMasterVersion)).rangeField(fieldNum(EcoResProductMasterVersion, ProductVersionProductDimensionAttribute)).value(queryValue(_productDimensionAttribute));

        sysReferenceTableLookup.parmQuery(query);
        return sysReferenceTableLookup.performFormLookup() as EcoResVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProductVariantVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>EcoResVersion</c> record.
    /// </summary>
    /// <param name="_versionName">
    /// The name of a version to find.
    /// </param>
    /// <param name="_productMaster">
    /// The ID of a <c>EcoResGenericProductMaster</c> record that identifies a product master for which the
    /// version is assigned.
    /// </param>
    /// <param name="_productDimensionAttribute">
    /// The ID of an <c>EcoResProductDimensionAttribute</c> record.
    /// </param>
    /// <returns>
    /// A <c>EcoResVersion</c> record.
    /// </returns>
    /// <remarks>
    /// This function is used to resolve a version name to the ID of a <c>EcoResVersion</c> record. It is
    /// resolved based on the versions assigned to a specified product master.
    /// </remarks>
    static EcoResVersion resolveProductVariantVersion(
        EcoResVersionName     _versionName,
        RefRecId            _productMaster,
        RefRecId            _productDimensionAttribute)
    {
        EcoResVersion              ecoResVersion;
        EcoResProductMasterVersion ecoResProductMasterVersion;

        select firstonly ecoResVersion
            where ecoResVersion.Name == _versionName
        exists join ecoResProductMasterVersion
            where ecoResProductMasterVersion.ProductVersion                            == ecoResVersion.RecId
               && ecoResProductMasterVersion.ProductVersionProductMaster               == _productMaster
               && ecoResProductMasterVersion.ProductVersionProductDimensionAttribute   == _productDimensionAttribute;

        if (!ecoResVersion.RecId)
        {
            // Assigning null to selectedRecord does not cause the kernel to receive a true NULL value, but rather
            // just an empty record. Return NULL directly so the kernel knows that the intent is to not clear the
            // selected value.
            return null;
        }

        return ecoResVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>EcoResProductVersion</ConfigurationKey>
	<DeveloperDocumentation>@SCM:VersionTableDevDoc</DeveloperDocumentation>
	<FormRef>EcoResProductMasterDimensionPerCompany</FormRef>
	<Label>@SCM:Versions</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResVersionName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>RetailGlobalDisplayOrder</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>