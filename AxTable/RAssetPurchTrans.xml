<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetPurchTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetPurchTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the adjustment of the document state after a change to purchase line.
    /// </summary>
    public void delete()
    {
        if (this.TableTableId == tableNum(PurchLine))
        {
            VersioningPurchaseOrder::newPurchaseOrder(this.purchLine().purchTable(true)).change(null, this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    public void initFromPurchLine(SalesPurchLine _line)
    {        
        this.TableRecId = _line.RecId;
        this.TableTableId = _line.TableId;
        
        SalesPurchLineInterface salesPurchLineInterface = _line.salesPurchLineInterface();

        if (salesPurchLineInterface.inventTable().ItemType == ItemType::Item)
        {
            this.AssetId = InventTable::checkAssetId_RU(salesPurchLineInterface.parmItemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ReceiveNow = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the adjustment of the document state after a change to purchase line.
    /// </summary>
    public void insert()
    {
        if (this.TableTableId == tableNum(PurchLine))
        {
            VersioningPurchaseOrder::newPurchaseOrder(this.purchLine().purchTable(true)).change(this, null);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans ledgerJournalTrans()
    {
        LedgerJournalTrans   ledgerJournalTrans;
        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.RecId == this.TableRecId
                && ledgerJournalTrans.TableId == this.TableTableId;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// find purchase order line with specified fixed asset
    /// </summary>
    /// <returns>
    /// vendor purchase order line with specified fixed asset
    /// </returns>
    public PurchLine purchLine()
    {
        PurchLine purchLine;
        select firstonly purchLine
            where purchLine.RecId   == this.TableRecId
            && purchLine.TableId == this.TableTableId;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usedOrder</Name>
				<Source><![CDATA[
    private TempStr usedOrder(RAssetPurchTrans _assetPurchTrans)
    {
        TempStr ret;

        switch (_assetPurchTrans.TableTableId)
        {
            case tableNum(PurchLine):
                ret = strFmt("@GLS116406", _assetPurchTrans.purchLine().PurchId);
                break;

            case tableNum(VendInvoiceInfoLine):
                ret = strFmt("@GLS220513", _assetPurchTrans.vendInvoiceInfoLine().vendInvoiceInfoTable().Num);
                break;

            case tableNum(LedgerJournalTrans):
                ret = strFmt("@GLS220513", _assetPurchTrans.ledgerJournalTrans().Invoice);
                break;

            default:
                throw error(strFmt("@SYS23396", funcName()));
        }

        return ret;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        boolean ret = true;

        if (!super(_p1))
        {
            ret = false;
        }
        else if (_p1 == fieldNum(RAssetPurchTrans, AssetId)
            && this.AssetId)
        {
            PurchLine purchLine = this.purchLine();
            RAssetTable assetTable = RAssetTable::find(this.AssetId);

            if (purchLine.RecId
                && purchLine.creditNoteLine())
            {
                if (assetTable.Status != RAssetStatus::PurchInvoice)
                {
                    ret = checkFailed(strFmt("@GLS116596", this.AssetId));
                }
            }
            else if (assetTable.Status != RAssetStatus::NoAcquisition)
            {
                ret = checkFailed("@GLS116405");
            }
            
            RAssetPurchTrans assetPurchTrans;
            select firstonly assetPurchTrans
                where assetPurchTrans.AssetId == this.AssetId
                    && assetPurchTrans.Posted == NoYes::No
                    && assetPurchTrans.RecId != this.RecId;

            if (assetPurchTrans)
            {
                ret = checkFailed(this.usedOrder(assetPurchTrans));
            }

            RAssetScrap rAssetScrap;
            select firstonly rAssetScrap
                where rAssetScrap.AssetId == this.AssetId
                   && rAssetScrap.Assembling
                   && ! rAssetScrap.StornoRecId;

            if (rAssetScrap)
            {
                ret = checkFailed("@GLS116064");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// find vendor invoice line with specified fixed asset
    /// </summary>
    /// <returns>
    /// vendor invoice line with specified fixed asset
    /// </returns>
    public VendInvoiceInfoLine vendInvoiceInfoLine()
    {
        VendInvoiceInfoLine infoLine;
        select firstonly infoLine
            where infoLine.RecId == this.TableRecId
                && infoLine.TableId == this.TableTableId;

        return infoLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBeforePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check fixed asset before posting of Purchase order or Vendor invoice
    /// </summary>
    /// <param name="_line">
    /// Purchase order line or vendor invoice line
    /// </param>
    /// <returns>
    /// true if all the checks are passed faultless
    /// </returns>
    public static boolean checkBeforePost(SalesPurchLine _line)
    {
        boolean ret = true;

        RAssetParameters rAssetParameters = RAssetParameters::find();
        SalesPurchLineInterface salesPurchLineInterface = _line.salesPurchLineInterface();
        InventTable inventTable = salesPurchLineInterface.inventTable();
        RAssetAmount localAcquisitionPrice = RAssetTable::acquisitionPriceFromPurchLine(_line);

        // Case of NVFA
        if (!salesPurchLineInterface.parmCategoryId()
            && localAcquisitionPrice <= rAssetParameters.LowCostAmountLimit)
        {
            if (RAssetPurchTrans::exist(_line))
            {
                ret = checkFailed("@GLS116219");
            }
        }
        else
        {
            if (rAssetParameters.LowCostAssetInventProfileId
                && (localAcquisitionPrice > rAssetParameters.LowCostAmountLimit
                    || salesPurchLineInterface.parmCategoryId())
                && salesPurchLineInterface.inventDim().InventProfileId_RU == rAssetParameters.LowCostAssetInventProfileId)
            {
                warning(strFmt("@GLS113902", inventTable.ItemId));
            }
        
            PurchQty receiveNow;
            PurchLine purchLine;
            VendInvoiceInfoLine infoLine;

            switch (_line.TableId)
            {
                case tableNum(PurchLine):
                    purchLine = _line;
                    receiveNow = purchLine.PurchReceivedNow
                        ? abs(purchLine.PurchReceivedNow)
                        : abs(purchLine.RemainPurchPhysical);
                    break;

                case tableNum(VendInvoiceInfoLine):
                    infoLine = _line;
                    purchLine = infoLine.purchLine();
                    receiveNow = abs(infoLine.ReceiveNow);
                    break;

                default:
                    throw error(strFmt("@SYS23396", funcName()));
            }

            if (inventTable.ItemId
                && RAssetPurchTrans::exist(_line)
                && inventTable.ItemType == ItemType::Item
                && abs(salesPurchLineInterface.parmQty()) > 1)
            {
                return checkFailed("@GLS116228");
            }

            int numberOfAsset;
            RAssetPurchTrans assetPurchTrans;
            while select assetPurchTrans
                where assetPurchTrans.TableTableId == _line.TableId
                    && assetPurchTrans.TableRecId == _line.RecId
                    && assetPurchTrans.Posted == NoYes::No
                    && assetPurchTrans.ReceiveNow
            {
                RAssetTable rAssetTable = RAssetTable::find(assetPurchTrans.AssetId);

                if (inventTable
                    && inventTable.AssetGroupId_RU != rAssetTable.AssetGroup)
                {
                    return checkFailed("@GLS116734");
                }

                if (purchLine
                    && purchLine.creditNoteLine())
                {
                    if (rAssetTable.Status != RAssetStatus::PurchInvoice)
                    {
                        return checkFailed(strFmt("@GLS116596", assetPurchTrans.AssetId));
                    }

                    if (inventTable.ItemId
                            && inventTable.ItemType == ItemType::Item
                            && InventTable::checkAssetId_RU(inventTable.ItemId) != assetPurchTrans.AssetId)
                    {
                        return checkFailed(strFmt("@GLS116598", inventTable.ItemId, InventTable::checkAssetId_RU(inventTable.ItemId)));
                    }
                }
                else
                {
                    if (rAssetTable.Status != RAssetStatus::NoAcquisition)
                    {
                        return checkFailed("@GLS116405");
                    }

                    if (inventTable.ItemId
                        && inventTable.ItemType == ItemType::Item
                        && InventTable::checkAssetId_RU(inventTable.ItemId))
                    {
                        return checkFailed(strFmt("@GLS116598", inventTable.ItemId, InventTable::checkAssetId_RU(inventTable.ItemId)));
                    }

                    if (infoLine
                        && !infoLine.isNonPO()
                        && (select firstonly RecId from rAssetPurchTrans
                                where rAssetPurchTrans.TableRecId == purchLine.RecId
                                    && rAssetPurchTrans.TableTableId == purchLine.TableId
                                    && rAssetPurchTrans.Posted == NoYes::Yes
                                    && rAssetPurchTrans.AssetId == assetPurchTrans.AssetId).RecId)
                    {
                        return checkFailed("@GLS116192");
                    }
                }

                if (RAssetScrap::existsAssetScrapAssembling(assetPurchTrans.AssetId))
                {
                    return checkFailed("@GLS116064");
                }

                numberOfAsset++;
            }

            if (numberOfAsset != receiveNow)
            {
                return checkFailed(strFmt("@GLS116219", inventTable.ItemId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssetPurchTrans</Name>
				<Source><![CDATA[
    public static void deleteAssetPurchTrans(TableId _tableId, RecId _recId)
    {
        RAssetPurchTrans assetPurchTrans;

        delete_from assetPurchTrans
            where assetPurchTrans.TableTableId == _tableId
                && assetPurchTrans.TableRecId == _recId
                && !assetPurchTrans.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(Common _common)
    {
        return (select firstonly rassetPurchTrans
            where rassetPurchTrans.TableRecId == _common.RecId
                && rassetPurchTrans.TableTableId == _common.TableId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public static void post(Common _common, Common _common2, AmountCur _amountValue = 0)
    {
        RAssetPurchTrans     assetPurchTrans, returnedPurchTrans, purchLineTrans;
        LedgerJournalTrans   ledgerJournalTrans;
        VendTrans            vendTrans;
        PurchLine            purchLine;
        VendInvoiceInfoLine  infoLine;
        VendInvoiceJour      vendInvoiceJour;
        int64                curLine;
        AmountCur            amountValue, assetAmount;
        RAssetPurchTransType transType;

        curLine =  (select count(RecId) from rAssetPurchTrans
                        where rAssetPurchTrans.TableRecId   == _common.RecId   &&
                              rAssetPurchTrans.TableTableId == _common.TableId &&
                              rAssetPurchTrans.Posted       == NoYes::No       &&
                              rAssetPurchTrans.ReceiveNow).RecId;
        if (! curLine)
            return;

        switch (_common.TableId)
        {
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = _common;
                vendTrans          = _common2;
                amountValue        = _amountValue ? _amountValue : ledgerJournalTrans.calcLineAmountExclTax_RU();
                vendInvoiceJour    = VendInvoiceJour::findFromVendTrans(vendTrans.Invoice,
                                                                        vendTrans.TransDate,
                                                                        vendTrans.AccountNum,
                                                                        false,
                                                                        vendTrans.Voucher);
                break;

            case tableNum(VendInvoiceInfoLine):
                infoLine = _common;
                if (! infoLine.isNonPO())
                    purchLine = infoLine.purchLine();
                vendInvoiceJour = _common2;
                amountValue     = _amountValue ? _amountValue : RAssetTable::acquisitionPriceFromPurchLine(infoLine, false);
                if (infoLine.ItemId && infoLine.inventTable().ItemType == ItemType::Item &&
                    ! purchLine.creditNoteLine() && InventTable::checkAssetId_RU(infoLine.ItemId))
                    throw error("@GLS116192");
                break;

            default:
                throw error(strFmt("@SYS23396", funcName()));
        }

        while select forupdate assetPurchTrans
            where assetPurchTrans.TableRecId   == _common.RecId   &&
                  assetPurchTrans.TableTableId == _common.TableId &&
                  assetPurchTrans.Posted       == NoYes::No       &&
                  assetPurchTrans.ReceiveNow
        {
            switch (_common.TableId)
            {
                case tableNum(LedgerJournalTrans):
                    assetAmount = CurrencyExchangeHelper::amount(amountValue / curLine, ledgerJournalTrans.CurrencyCode);
                    amountValue -= assetAmount;
                    curLine--;
                    RAssetTable::updateStatus(assetPurchTrans.AssetId, RAssetStatus::PurchInvoice);
                    RAssetTable::updateVendInfo(assetPurchTrans.AssetId,
                                                vendTrans.AccountNum,
                                                "",
                                                vendTrans.Invoice,
                                                "",
                                                vendInvoiceJour.InternalInvoiceId,
                                                vendInvoiceJour.NumberSequenceGroup,
                                                assetAmount,
                                                ledgerJournalTrans.CurrencyCode,
                                                ledgerJournalTrans.TransDate,
                                                ledgerJournalTrans.ExchRate);
                    break;

                case tableNum(VendInvoiceInfoLine):
                    if (purchLine && purchLine.creditNoteLine())
                    {
                        update_recordset returnedPurchTrans
                            setting PurchTransType = RAssetPurchTransType::ReturnedLine
                            where returnedPurchTrans.AssetId        == assetPurchTrans.AssetId
                               && returnedPurchTrans.Posted         == NoYes::Yes
                               && returnedPurchTrans.PurchTransType == RAssetPurchTransType::PurchaseLine
                               && returnedPurchTrans.RecId          != assetPurchTrans.RecId;

                        assetPurchTrans.PurchTransType    = RAssetPurchTransType::ReturnLine;
                        RAssetTable::updateStatus(assetPurchTrans.AssetId, RAssetStatus::NoAcquisition);
                        RAssetTable::updateVendInfo(assetPurchTrans.AssetId, "", "", "", "", "", "");
                        if (infoLine.ItemId && infoLine.inventTable().ItemType == ItemType::Item)
                        {
                            InventTable::updateAssetId_RU('', infoLine.ItemId);
                        }
                        transType = RAssetPurchTransType::ReturnLine;
                    }
                    else
                    {
                        RAssetTable::updateStatus(assetPurchTrans.AssetId, RAssetStatus::PurchInvoice);
                        RAssetTable::updateVendInfo(assetPurchTrans.AssetId,
                                                    infoLine.orderAccount(),
                                                    purchLine.PurchId,
                                                    vendInvoiceJour.InvoiceId,
                                                    infoLine.InventTransId,
                                                    vendInvoiceJour.InternalInvoiceId,
                                                    vendInvoiceJour.NumberSequenceGroup,
                                                    amountValue,
                                                    infoLine.CurrencyCode,
                                                    vendInvoiceJour.InvoiceDate,
                                                    vendInvoiceJour.ExchRate);
                        if (infoLine.ItemId && infoLine.inventTable().ItemType == ItemType::Item)
                        {
                            InventTable::updateAssetId_RU(assetPurchTrans.AssetId, infoLine.ItemId);
                        }
                        transType = RAssetPurchTransType::PurchaseLine;
                    }
                    break;
            }
            assetPurchTrans.Posted  = NoYes::Yes;
            assetPurchTrans.doUpdate();

            if (purchLine)
            {
                update_recordset purchLineTrans
                    setting Posted         = NoYes::Yes,
                            PurchTransType = transType
                    where purchLineTrans.TableRecId   == purchLine.RecId   &&
                          purchLineTrans.TableTableId == purchLine.TableId &&
                          purchLineTrans.Posted       == NoYes::No         &&
                          purchLineTrans.AssetId      == assetPurchTrans.AssetId;
            }
        }
        // delete unposted RAssetPurchTrans related to VendInvoiceInfoLine
        if (_common.TableId == tableNum(VendInvoiceInfoLine))
        {
            RAssetPurchTrans::deleteAssetPurchTrans(infoLine.TableId, infoLine.RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS112481</DeveloperDocumentation>
	<Label>@GLS116412</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>TableTableId</TitleField1>
	<TitleField2>TableRecId</TitleField2>
	<ClusteredIndex>TableRecAssetIdx</ClusteredIndex>
	<Modules>RAsset</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Acquisition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Asset</Name>
			<Label>@SYS25653</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TableTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReceiveNow</Name>
			<Label>@SYS1743</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiveNow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Acquisition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Acquisition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS116239</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1711</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetPurchTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS2934</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TableTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TableRecAssetIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TableTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RAssetPurchTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableTableId</Name>
					<Field>TableTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRecId</Name>
					<Field>TableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchLine_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetPurchTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableTableId</Name>
					<Field>TableTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRecId</Name>
					<Field>TableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetPurchTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetPurchTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRecId</Name>
					<Field>TableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableTableId</Name>
					<Field>TableTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>