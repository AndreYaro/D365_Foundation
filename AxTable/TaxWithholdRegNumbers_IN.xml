<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdRegNumbers_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdRegNumbers_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        if (this.RegistrationType != TaxRegistrationType_IN::Company)
        {
            this.IsGlobal = true;
        }
        this.RefCompanyId = this.IsGlobal ? '' : curext();
        this.CreatedCompanyId = curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies field of the tax withhold register numbers.
    /// </summary>
    /// <param name="_fieldId">
    /// The field id.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);
        switch (_fieldId)
        {
            case fieldnum(TaxWithholdRegNumbers_IN, IsGlobal) :
            this.RefCompanyId = this.IsGlobal ? '' : curext();
            break;

            case fieldnum(TaxWithholdRegNumbers_IN, RegistrationType) :
            if (this.RegistrationType != TaxRegistrationType_IN::Company)
            {
                this.IsGlobal = true;
                this.RefCompanyId = '';
            }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean             ret;
        TaxInformation_IN   taxInformation;

        ret = super();
        select firstonly taxInformation
            where taxInformation.tan == this.RecId;
        if (taxInformation)
        {
            ret = ret && checkFailed(strfmt("@GLS5449", this.RegistrationNumber));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be written to the database
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;
        #define.alphabets('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
        #define.numbers('0123456789')
        #define.10(10)
        #define.12(12)

        ret = super();

        if (ret && (strkeep(substr(this.RegistrationNumber, 1, 4), #alphabets) != substr(this.RegistrationNumber, 1, 4)) ||
            (strkeep(substr(this.RegistrationNumber, 5, 5), #numbers)   != substr(this.RegistrationNumber, 5, 5)) ||
            (strlen(this.RegistrationNumber)                            != #10)                                   ||
            (strkeep(substr(this.RegistrationNumber, 10, 1), #alphabets)!= substr(this.RegistrationNumber, 10, 1)))
        {
            ret = ret && checkFailed("@GLS5456");
        }

        if (strlen(this.TANRegistrationNumber) > 0 && strlen(this.TANRegistrationNumber) != #12)
        {
            ret = ret && checkFailed("@SYS4004223");
        }

        TaxWithholdRegNumbers_IN existedWithholdTaxRegNumbersIn =
            TaxWithholdRegNumbers_IN::findByTaxRegistrationNumber(this.RegistrationNumber, this.RegistrationType);
        if (existedWithholdTaxRegNumbersIn.RecId != this.RecId
            && existedWithholdTaxRegNumbersIn.IsGlobal == NoYes::No
            && existedWithholdTaxRegNumbersIn.RefCompanyId != curext())
        {
            ret = ret && checkFailed(strFmt("@Tax:RegistrationNumberDuplicateError",
                tableId2PName(existedWithholdTaxRegNumbersIn.TableId),
                tableStr(TaxWithholdRegNumbers_IN),
                this.RegistrationNumber,
                existedWithholdTaxRegNumbersIn.CreatedCompanyId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Reads the TaxWithholdRegNumberTable_IN table.
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for withholding tax.
    /// </param>
    /// <param name="_registrationType">
    /// Withholding tax registration type, e.g company, customer, or vendor
    /// </param>
    /// <returns>
    /// A boolean value is returned whether the match is true or not.
    /// </returns>
    public static boolean exist(TaxWithholdRegistrationNumber_IN   _registrationNumber,
                                TaxRegistrationType_IN             _registrationType)
    {
        if (_registrationNumber)
        {
            return  (select firstonly RecId from taxWithholdRegNumbers_IN
                    index hint RegistrationNumberIdx
                        where  taxWithholdRegNumbers_IN.RegistrationNumber == _registrationNumber
                            && taxWithholdRegNumbers_IN.RegistrationType   == _registrationType).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxWithholdRegNumbers_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing TaxWithholdRegNumberTable_IN table.
    /// </returns>
    public static TaxWithholdRegNumbers_IN find(RefRecId            _recId,
                                                boolean             _forupdate        = false,
                                                ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdRegNumbers_IN taxWithholdRegNumbers;

        taxWithholdRegNumbers.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdRegNumbers.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdRegNumbers
            where taxWithholdRegNumbers.RecId == _recId;

        return taxWithholdRegNumbers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxWithholdRegNumbers_IN table for the specified registrationNumber and registrationType.
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for withholding tax.
    /// </param>
    /// <param name="_registrationType">
    /// Withholding tax registration type, e.g company, customer, or vendor
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    ///  A buffer containing TaxWithholdRegNumberTable_IN table.
    /// </returns>
    static public TaxWithholdRegNumbers_IN findByTaxRegistrationNumber(TaxWithholdRegistrationNumber_IN   _registrationNumber,
                                                                       TaxRegistrationType_IN             _registrationType,
                                                                       boolean                            _forUpdate = false)
    {
        TaxWithholdRegNumbers_IN   taxWithholdRegistrationNumbers;

        if (_registrationNumber)
        {
            taxWithholdRegistrationNumbers.selectForUpdate(_forUpdate);
            select firstonly taxWithholdRegistrationNumbers
                index hint RegistrationNumberIdx
                where taxWithholdRegistrationNumbers.RegistrationNumber == _registrationNumber
                   && taxWithholdRegistrationNumbers.RegistrationType   == _registrationType;
        }

        return taxWithholdRegistrationNumbers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxRegistrationType_IN Enum for the specified common buffer.
    /// </summary>
    /// <param name="_record">
    /// common buffer to fetch Registration type from different tables.
    /// </param>
    /// <returns>
    /// Return Withholding tax registration type, e.g company, customer, or vendor based on the matched condition.
    /// </returns>
    public static TaxRegistrationType_IN getRegistrationType(Common     _record)
    {
        TaxRegistrationType_IN  registrationType;

        switch (_record.TableId)
        {
            case tablenum(CompanyInfo) :
                registrationType = TaxRegistrationType_IN::Company;
                break;

            case tablenum(CustTable) :
                registrationType = TaxRegistrationType_IN::Customers;
                break;

            case tablenum(VendTable) :
                registrationType = TaxRegistrationType_IN::Vendors;
                break;

            default:
                break;
        }

        return registrationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open TaxWithholdRegNumberTable_IN Main Form when use do right click goto main table for the selected Registration number.
    /// </summary>
    /// <param name="_registrationNumber">
    /// Registration number for withholding tax.
    /// </param>
    /// <param name="_record">
    /// Record buffer to set args.record().
    /// </param>
    public static void jumpRef(TaxWithholdRegistrationNumber_IN _registrationNumber,
                               Common                           _record)
    {
        Args    args = new Args();

        args.record(_record);
        args.parm(_registrationNumber);
        new MenuFunction(menuitemdisplaystr(TaxRegistrationNumberTable_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// To generator customized lookup reference when user select withholding tax registration field.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// Link the _formControl to lookup method.
    /// </param>
    /// <param name="_common">
    /// common buffer to set args.record().
    /// </param>
    /// <returns>
    /// The buffer of table TaxWithholdRegNumbers_IN.
    /// </returns>
    public static TaxWithholdRegNumbers_IN lookupReferenceRegistrationNumber(
        FormReferenceControl    _formReferenceControl,
        Common                  _common)
    {
        Args                        args = new Args();
        FormRun                     formRun;
        TaxWithholdRegNumbers_IN    taxWithholdRegNumbers_IN;

        args.name(formstr(TaxWithholdRegNumberLookup_IN));
        args.caller(_formReferenceControl);
        args.record(_common);

        formRun = classfactory.formRunClass(args);

        formRun.init();

        _formReferenceControl.performFormLookup(formRun);

        taxWithholdRegNumbers_IN = formRun.selectRecordModeSelectedRecord() as TaxWithholdRegNumbers_IN;

        return taxWithholdRegNumbers_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// To generator customized look when user select withholding tax registration field.
    /// </summary>
    /// <param name="_formControl">
    /// Link the _formControl to lookup method.
    /// </param>
    /// <param name="_common">
    /// common buffer to set args.record().
    /// </param>
    public static void lookupRegistrationNumber(FormControl _formControl,
                                                Common      _common)
    {
        Args args            = new Args();
        FormRun              formRun;
        FormReferenceControl formReferenceControl;

        args.name(formstr(TaxWithholdRegNumberLookup_IN));
        args.caller(_formControl);
        args.record(_common);

        formRun = classfactory.formRunClass(args);

        formRun.init();

        if (_formControl is FormReferenceControl)
        {
            formReferenceControl = _formControl as FormReferenceControl;
            formReferenceControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS63778</DeveloperDocumentation>
	<Label>@GLS5478</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RegistrationNumber</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Tax</Modules>
	<ReplacementKey>RegistrationNumberIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSCircleNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSWardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSAssessingofficer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSCircleNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSWardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSAssessingofficer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyId</Name>
			<Label>@SYS16939</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefCompanyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Enterprise</Name>
			<Label>@SYS55442</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsGlobal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TANRegistrationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RegistrationType</Name>
			<Label>@SYS81228</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegistrationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TCS</Name>
			<Label>@GLS5471</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TCSCircleNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSWardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSAssessingofficer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TDS</Name>
			<Label>@GLS5470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TDSCircleNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSWardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSAssessingofficer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsGlobal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS71475</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegistrationNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdRegistrationNumber_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RegistrationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxRegistrationType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TANRegistrationNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdTANRegistrationNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSAssessingofficer</Name>
			<AssetClassification>End User Identifiable Information (EUII)</AssetClassification>
			<ExtendedDataType>AssessingOfficerNumber_IN</ExtendedDataType>
			<Label>@GLS5463</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSCircleNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CircleNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSWardNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WardNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSAssessingofficer</Name>
			<AssetClassification>End User Identifiable Information (EUII)</AssetClassification>
			<ExtendedDataType>AssessingOfficerNumber_IN</ExtendedDataType>
			<Label>@GLS5463</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSCircleNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CircleNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSWardNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WardNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreatedCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RegistrationNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RegistrationNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RegistrationType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>