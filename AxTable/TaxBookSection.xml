<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBookSection</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxBookSection extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAllowDuplicates</Name>
				<Source><![CDATA[
    public boolean checkAllowDuplicates()
    {
        NumberSequenceTable  numberSequenceTableCurrent;
        NumberSequenceTable  numberSequenceTableOther;
        boolean              ret = true;

        if (! TaxParameters::find().AllowDuplicates)
        {
            numberSequenceTableCurrent = NumberSequenceTable::find(this.NumberSequenceTable);
            while select Format, Lowest, Highest from numberSequenceTableOther
                where numberSequenceTableOther.NumberSequence != numberSequenceTableCurrent.NumberSequence
            {
                if (numberSequenceTableCurrent.Format    == numberSequenceTableOther.Format   &&
                    ((numberSequenceTableCurrent.Lowest  >= numberSequenceTableOther.Lowest   &&
                      numberSequenceTableCurrent.Lowest  <= numberSequenceTableOther.Highest) ||
                     (numberSequenceTableCurrent.Highest >= numberSequenceTableOther.Lowest   &&
                      numberSequenceTableCurrent.Highest <= numberSequenceTableOther.Highest) ||
                     (numberSequenceTableCurrent.Lowest  <  numberSequenceTableOther.Lowest   &&
                      numberSequenceTableCurrent.Highest >  numberSequenceTableOther.Highest)))
                {
                    ret = checkFailed("@SYS79288");
                    break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCheckNumberSequenceSetupEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if validations for number sequence are enabled.
    /// </summary>
    /// <returns>true if validations for number sequence are enabled; otherwise, false.</returns>
    protected boolean isCheckNumberSequenceSetupEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumberSequenceSetup</Name>
				<Source><![CDATA[
    public boolean checkNumberSequenceSetup()
    {
        NumberSequenceTable  numberSequenceTable;
        boolean              ret = true;

        if (!this.isCheckNumberSequenceSetupEnabled())
        {
            return ret;
        }

        numberSequenceTable = NumberSequenceTable::find(this.NumberSequenceTable);

        if (numberSequenceTable.Manual)
        {
            ret = checkFailed(strfmt("@SYS79203", fieldpname(NumberSequenceTable, Manual)));
        }
        else if (! numberSequenceTable.Continuous)
        {
            ret = checkFailed(strfmt("@SYS79204", fieldpname(NumberSequenceTable, Continuous)));
        }
        else if (numberSequenceTable.AllowChangeDown)
        {
            ret = checkFailed(strfmt("@SYS79203", fieldpname(NumberSequenceTable, AllowChangeDown)));
        }
        else if (numberSequenceTable.AllowChangeUp)
        {
            ret = checkFailed(strfmt("@SYS79203", fieldpname(NumberSequenceTable, AllowChangeUp)));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(TaxBookSection, NumberSequenceTable) :
                    ret = this.checkNumberSequenceSetup();
                    if (ret)
                    {
                        ret = this.checkAllowDuplicates();
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxBookSectionId _taxBookSectionId )
    {
        boolean ret = true;

        if (!TaxBookSection::exist(_taxBookSectionId))
        {
            ret = checkFailed(strfmt(TaxBookSection::txtNotExist(), _taxBookSectionId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxBookSection</Name>
				<Source><![CDATA[
    [Replaceable(true)]
    static boolean checkTaxBookSection(RefRecId           _voucherSeriesId,
                                       TransDate          _transDate,
                                       Voucher            _voucher = '',
                                       RefTableId         _sourceTableId = 0,
                                       boolean            _update = true)
    {
        TaxBookSection       taxBookSection;
        TaxBookSectionDate   taxBookSectionDate;
        TaxBookSectionDate   sectionDatePrev;
        TaxBookSectionDate   sectionDateNext;
        int                  numOfNextVoucher;
        boolean              ret = true;
        NumberSequenceTable  numberSequenceTable;

        if (! _voucher)
        {
            return true;
        }

        numberSequenceTable = NumberSequenceTable::find(_voucherSeriesId);
        taxBookSection = TaxBookSection::findVoucherSeries(_voucherSeriesId);

        if (taxBookSection.LastVoucher && ! TaxBookSectionDate::exist(taxBookSection.RecId))
        {
            taxBookSectionDate.TaxBookSection   = taxBookSection.RecId;
            taxBookSectionDate.TransDate        = taxBookSection.LastTransDate;
            taxBookSectionDate.LastRec          = NumberSeq::numRemoveFormat(taxBookSection.LastVoucher, numberSequenceTable.Format);
            taxBookSectionDate.insert();
        }

        if (!taxBookSection.RecId)
        {
            ret = checkFailed(strfmt("@SYS79205", NumberSequenceTable::find(_voucherSeriesId).NumberSequence));
        }
        else if (_transDate && taxBookSection.CloseSalesTaxBookSectionDate >= _transDate)
        {
            ret = checkFailed(strfmt("@SYS79206", taxBookSection.CloseSalesTaxBookSectionDate));
        }
        else if (! taxBookSection.checkNumberSequenceSetup())
        {
            ret = false;
        }
        else if (!taxBookSection.checkNumberSequenceStatusList())
        {
            ret = false;
        }
        else
        {
            numOfNextVoucher = NumberSeq::numRemoveFormat(_voucher, numberSequenceTable.Format);

            if (taxBookSection.SkipPostingDateControl == NoYes::No 
                || !FeatureStateProvider::isFeatureEnabled(UnifiedPostingDateControlFeature_IT::instance()))
            {
                sectionDatePrev = TaxBookSectionDate::findPrevDate(taxBookSection.RecId, _transDate);
                sectionDateNext = TaxBookSectionDate::findNextDate(taxBookSection.RecId, _transDate);

                if (sectionDatePrev && numOfNextVoucher < sectionDatePrev.LastRec)
                {
                    ret = checkFailed(strfmt("@SYS79207", taxBookSection.TaxBookSectionId));
                }
                else if (sectionDateNext && numOfNextVoucher > sectionDateNext.LastRec)
                {
                    ret = checkFailed(strfmt("@SYS79208", taxBookSection.TaxBookSectionId));
                }
            }
        }

        if (ret && _update)
        {
            if (!TaxBookSectionDate::existSectionDateLastRec(taxBookSection.RecId, _transDate, numOfNextVoucher))
            {
                taxBookSectionDate.TaxBookSection = taxBookSection.RecId;
                taxBookSectionDate.TransDate      = _transDate;
                taxBookSectionDate.LastRec        = numOfNextVoucher;
                taxBookSectionDate.insert();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxBookSectionId _taxBookSectionId )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     taxBookSection
                 where
                     taxBookSection.TaxBookSectionId == _taxBookSectionId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TaxBookSection</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>TaxBookSection</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxBookSection find(
        recId                   _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxBookSection taxBookSection;

        taxBookSection.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxBookSection.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxBookSection
            where
                taxBookSection.RecId == _recId;

        return taxBookSection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxBookSection</Name>
				<Source><![CDATA[
    public static TaxBookSection findByTaxBookSection(
        TaxBookSectionId _taxBookSectionId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxBookSection taxBookSection;

        taxBookSection.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxBookSection.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxBookSection
            where
            taxBookSection.TaxBookSectionId == _taxBookSectionId;

        return taxBookSection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherSeries</Name>
				<Source><![CDATA[
    static TaxBookSection  findVoucherSeries(RefRecId _voucherSeriesId, boolean _forUpdate = false)
    {
        TaxBookSection    taxBookSection;

        if (_voucherSeriesId)
        {
            taxBookSection.selectForUpdate(_forUpdate);

            select firstonly taxBookSection
                   where taxBookSection.NumberSequenceTable == _voucherSeriesId;
        }
        return taxBookSection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS103286";
    }

]]></Source>
			</Method>
			<Method>
				<Name>vouchersAreInTheSameLedgerJournal</Name>
				<Source><![CDATA[
    private static boolean vouchersAreInTheSameLedgerJournal(Voucher _voucher1, Voucher _voucher2)
    {
        LedgerJournalTrans ledgerJournalTrans1;
        LedgerJournalTrans ledgerJournalTrans2;

        select firstOnly JournalNum from ledgerJournalTrans1
            where ledgerJournalTrans1.Voucher == _voucher1;

        if (ledgerJournalTrans1.JournalNum)
        {
            select firstOnly JournalNum from ledgerJournalTrans2
                where ledgerJournalTrans2.Voucher == _voucher2;

            return ledgerJournalTrans1.JournalNum == ledgerJournalTrans2.JournalNum;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumberSequenceStatusList</Name>
				<Source><![CDATA[
    private boolean checkNumberSequenceStatusList()
    {
        NumberSequenceList numberSequenceList;
        boolean ret = true;

        while select numberSequenceList
            where numberSequenceList.NumberSequenceId == this.NumberSequenceTable
        {
            if (numberSequenceList.cleanAction() == NumberSeqCleanAction::Freed)
            {
                NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(this.NumberSequenceTable);
                ret = checkFailed(strFmt("@TaxBookSection_IT:NumberSequenceRequiresCleanup", numberSequenceTable.NumberSequence));
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123544</DeveloperDocumentation>
	<FormRef>TaxBookSection</FormRef>
	<Label>@SYS76147</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxBookSectionId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TaxBookSectionIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBookSectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBook</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SkipPostingDateControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBookSectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBook</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBookSectionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS25589</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBook</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBookSectionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LastVoucher</Name>
			<Label>@SYS79494</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CloseSalesTaxBookSectionDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ClosedTo</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS74821</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CloseSalesTaxBookSectionDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CloseSalesTaxBookSectionDate_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastTransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumberSequenceTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS23567</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxBook</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBookRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxBookSectionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBookSectionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipPostingDateControl</Name>
			<FeatureClass>UnifiedPostingDateControlFeature_IT</FeatureClass>
			<Label>@ApplicationSuite_Localization:SkipPostingDateControl</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxBookSectionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBookSectionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxBookIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBook</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxBookSectionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumberSequenceTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>NumberSequenceCode</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceTable</Name>
					<Field>NumberSequenceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxBook</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ItalyTaxBooks</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ItalyTaxBooksSection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxBook</Name>
					<Field>TaxBook</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>