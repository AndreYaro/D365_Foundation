<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlConfiguration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetApportionmentText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget apportionment text for the budget remaining calculation text.
    /// </summary>
    /// <returns>
    /// The budget apportionment text for the budget remaining calculation text.
    /// </returns>
    public str budgetApportionmentText()
    {
        str         budgetApportionmentText;
        DictField   dictField;

        if (this.UseApportionedAmount)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, UseApportionedAmount));

            budgetApportionmentText = dictField.label();
        }

        return budgetApportionmentText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetFundsAvailableCalculationText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the text for the budget funds available calculation.
    /// </summary>
    /// <returns>
    ///    The text for the budget funds available calculation.
    /// </returns>
    public str budgetFundsAvailableCalculationText()
    {
        str fundsAvailableCalcTxt;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (!this.UseApportionedAmount)
            {
                fundsAvailableCalcTxt = strfmt("@SYS127906",
                this.budgetSumAmountsText(),
                this.budgetSubtractAmountsText());
            }
            else
            {
                fundsAvailableCalcTxt = strfmt("@SYS127906",
                this.budgetApportionmentText(),
                this.budgetSubtractAmountsText());
            }
        }
        else
        {
            fundsAvailableCalcTxt = strfmt("@SYS127906",
            this.budgetSumAmountsText(),
            this.budgetSubtractAmountsText());
        }

        return fundsAvailableCalcTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetSubtractAmountsText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the subtract amounts text of the budget funds available calculation.
    /// </summary>
    /// <returns>
    /// The subtract amounts text of the budget funds available calculation.
    /// </returns>
    public str budgetSubtractAmountsText()
    {
        str budgetSubtractAmountsText;
        DictField dictField;

        str plusSign()
        {
            str plusSign;

            if (budgetSubtractAmountsText != '')
            {
                plusSign = ' + ';
            }

            return plusSign;
        }

        if (this.SubtractActualExpenditures)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SubtractActualExpenditures));

            budgetSubtractAmountsText = dictField.label();
        }

        if (this.IncludeCarryforwardAmounts)
        {
            budgetSubtractAmountsText += plusSign();

            budgetSubtractAmountsText += "@SYS300930";
        }

        if (this.SubtractUnpostedActualExpenditures)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SubtractUnpostedActualExpenditures));

            budgetSubtractAmountsText += plusSign();
            budgetSubtractAmountsText += dictField.label();
        }

        if (this.SubtractEncumbrances)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SubtractEncumbrances));

            budgetSubtractAmountsText += plusSign();
            budgetSubtractAmountsText += dictField.label();
        }

        if (this.IncludeCarryforwardAmounts)
        {
            budgetSubtractAmountsText += plusSign();
            budgetSubtractAmountsText += "@SYS300931";
        }

        if (this.SubtractDraftEncumbrances)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SubtractDraftEncumbrances));

            budgetSubtractAmountsText += plusSign();
            budgetSubtractAmountsText += dictField.label();
        }

        if (this.SubtractDraftEncumbranceReductions)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SubtractDraftEncumbranceReductions));

            budgetSubtractAmountsText += plusSign();
            budgetSubtractAmountsText += dictField.label();
        }

        if (this.SubtractPreencumbrances)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SubtractPreencumbrances));

            budgetSubtractAmountsText += plusSign();
            budgetSubtractAmountsText += dictField.label();
        }

        if (this.SubtractDraftPreencumbrances)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SubtractDraftPreencumbrances));

            budgetSubtractAmountsText += plusSign();
            budgetSubtractAmountsText += dictField.label();
        }

        return budgetSubtractAmountsText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetSumAmountsText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum amounts text of the budget funds available calculation.
    /// </summary>
    /// <returns>
    /// The sum amounts text of the budget funds available calculation.
    /// </returns>
    public str budgetSumAmountsText()
    {
        str budgetSumAmountsText;
        DictField dictField;

        str plusSign()
        {
            str plusSign;

            if (budgetSumAmountsText != '')
            {
                plusSign = ' + ';
            }

            return plusSign;
        }

        if (this.SumOriginalBudget)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SumOriginalBudget));

            budgetSumAmountsText = dictField.label();
        }
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && this.SumPreliminaryBudget)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SumPreliminaryBudget));

            budgetSumAmountsText += plusSign();
            budgetSumAmountsText += dictField.label();
        }

        if (this.IncludeCarryforwardAmounts)
        {
            budgetSumAmountsText += plusSign();
            budgetSumAmountsText += "@SYS127649";
        }

        if (this.SumAmendments)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SumAmendments));

            budgetSumAmountsText += plusSign();
            budgetSumAmountsText += dictField.label();
        }

        if (this.SumDraftAmendments)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SumDraftAmendments));

            budgetSumAmountsText += plusSign();
            budgetSumAmountsText += dictField.label();
        }

        if (this.SumTransfers)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SumTransfers));

            budgetSumAmountsText += plusSign();
            budgetSumAmountsText += dictField.label();
        }

        if (this.SumDraftTransfersIn)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SumDraftTransfersIn));

            budgetSumAmountsText += plusSign();
            budgetSumAmountsText += dictField.label();
        }

        if (this.SumDraftTransfersOut)
        {
            dictField = new DictField(tablenum(BudgetControlConfiguration), fieldnum(BudgetControlConfiguration, SumDraftTransfersOut));

            budgetSumAmountsText += plusSign();
            budgetSumAmountsText += dictField.label();
        }

        return budgetSumAmountsText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.DefaultThresholdPercent = 100.00;
        this.SumOriginalBudget = NoYes::Yes;
        this.SubtractActualExpenditures = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>DimensionHierarchyAccountStructure</c> field is valid.
    /// </summary>
    /// <returns>
    ///    true if the <c>DimensionHierarchyAccountStructure</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateAccountStructure()
    {
        boolean isValid = true;

        DimensionAttribute dimAttribute;
        DimensionHierarchyLevel dimHierarchyLevel;
        DimensionHierarchy dimHierarchy;

        Ledger ledger;
        LedgerStructure ledgerStructure;

        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        // Validate that the account structure is in the ledger
        select firstonly Name from ledger
            where ledger.RecId == this.PrimaryLedger
            exists join ledgerStructure
                where  ledgerStructure.DimensionHierarchy == this.DimensionHierarchyAccountStructure
                    && ledgerStructure.Ledger ==  ledger.RecId;

        if (!ledger)
        {
            // The account structue is not in the ledger.
            isValid = checkFailed(strfmt("@SYS315941",
                DimensionHierarchy::find(this.DimensionHierarchyAccountStructure).Name,
                ledger.Name));
        }

        if (isValid)
        {
            // Get the first dimension attribute from the hierachy that is enabled for budget.
            select firstonly RecId from dimAttribute
                exists join dimHierarchyLevel
                    where dimHierarchyLevel.DimensionAttribute == dimAttribute.RecId
                exists join dimHierarchy
                    where dimHierarchy.RecId == dimHierarchyLevel.DimensionHierarchy
                        && dimHierarchy.RecId == this.DimensionHierarchyAccountStructure
                exists join budgetPrimaryLedgerDimensionAttribute
                    where budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == dimAttribute.RecId
                        && budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == this.PrimaryLedger;

            if (!dimAttribute)
            {
                // No dimension attributes in the hierarchy are enabled for budget.
                isValid = checkFailed(strfmt("@SYS315221", DimensionHierarchy::find(this.DimensionHierarchyAccountStructure).Name));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(BudgetControlConfiguration, DefaultBudgetCycleTimeSpan):
                    isValid = BudgetControlConfigurationManager::validateBudgetCycleTimeSpan(this.DefaultBudgetCycleTimeSpan);
                    break;

                case fieldnum(BudgetControlConfiguration, DefaultResponsibleUser):
                    isValid = BudgetControlConfigurationManager::validateResponsibleUserReference(this.DefaultResponsibleUser);
                    break;

                case fieldnum(BudgetControlConfiguration, DimensionHierarchyAccountStructure):
                    isValid = this.validateAccountStructure();
                    break;

                default:
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        if (isValid)
        {
            isValid = BudgetControlConfigurationManager::validateConfigurationEditPermitted(this.RecId);

            // Validate the selected responsible user still exists.
            isValid = isValid && BudgetControlConfigurationManager::validateResponsibleUserReference(this.DefaultResponsibleUser);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowAccountStructureActivate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the account structure is valid for activation.
    /// </summary>
    /// <param name="_dimensionHierarchyRecId">
    ///    The account structure record ID that is being validated.
    /// </param>
    /// <returns>
    ///    true if the account structure is valid for activation; otherwise, false.
    /// </returns>
    public static boolean allowAccountStructureActivate(DimensionHierarchyId _dimensionHierarchyRecId)
    {
        boolean isAllowed = true;

        DimensionHierarchy draftDimensionHierarchy = dimensionHierarchy::find(_dimensionHierarchyRecId);

        Set referencedDimAttributes = new Set(Types::Int64);

        if (draftDimensionHierarchy)
        {
            // Get the active hierarchy to find the budget control configurations to validate.
            DimensionHierarchy activeDimensionHierarchy = DimensionHierarchy::findByTypeAndName(
                draftDimensionHierarchy.StructureType,
                draftDimensionHierarchy.Name,
                draftDimensionHierarchy.IsSystemGenerated,
                false);

            BudgetControlConfiguration budgetControlConfiguration;
            BudgetControlDimensionAttribute budgetControlDimensionAttribute;
            BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;
            DimensionHierarchyLevel dimensionHierarchyLevel;

            while select RecId from budgetControlDimensionAttribute
                join RecId from budgetControlConfiguration
                    where budgetControlConfiguration.RecId == budgetControlDimensionAttribute.BudgetControlConfiguration
                        && budgetControlConfiguration.DimensionHierarchyAccountStructure == activeDimensionHierarchy.RecId
                join DimensionAttribute from budgetPrimaryLedgerDimensionAttribute
                    where budgetPrimaryLedgerDimensionAttribute.RecId == budgetControlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                notExists join dimensionHierarchyLevel
                    where dimensionHierarchyLevel.DimensionHierarchy == draftDimensionHierarchy.RecId
                        && dimensionHierarchyLevel.DimensionAttribute == budgetPrimaryLedgerDimensionAttribute.DimensionAttribute
            {
                if (!referencedDimAttributes.in(budgetPrimaryLedgerDimensionAttribute.DimensionAttribute))
                {
                    referencedDimAttributes.add(budgetPrimaryLedgerDimensionAttribute.DimensionAttribute);

                    // When a draft budget control configuration has a reference to a removed dimension attribute from
                    // account structure.
                    isAllowed = checkFailed(strFmt("@SYS335517",
                        draftDimensionHierarchy.Name,
                        DimensionAttribute::find(budgetPrimaryLedgerDimensionAttribute.DimensionAttribute).Name));
                }
            }
        }

        return isAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>BudgetControlConfiguration</c> table exists and
    ///    displays an error if it does not exist.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record existss; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!BudgetControlConfiguration::exist(_recId))
        {
            ret = checkFailed(strfmt(BudgetControlConfiguration::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBudgetCheckOnEntryForSourceIntegrator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified budget control source integrator does a budget check on entry.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <param name="_sourceIntegrator">
    /// The budget control source integrator for which the budget check is needed.
    /// </param>
    /// <returns>
    /// true if a budget check on entry is needed; otherwise, false.
    /// </returns>
    public static boolean doBudgetCheckOnEntryForSourceIntegrator(
        LedgerRecId _primaryLedgerRecId,
        BudgetControlSourceIntegrator _sourceIntegrator)
    {
        boolean doCheckOnEntry;

        BudgetControlConfiguration activeConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(_primaryLedgerRecId);

        if (activeConfiguration)
        {
            BudgetControlSourceIntegratorEnabled controlSourceIntegratorEnabled = BudgetControlSourceIntegratorEnabled::findByConfigurationSourceIntegrator(
                activeConfiguration.RecId,
                _sourceIntegrator);

            doCheckOnEntry = controlSourceIntegratorEnabled.DoBudgetCheckOnEntry;
        }

        return doCheckOnEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isControlConfigured</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the system has configuration activated for budgetary control.
    /// </summary>
    /// <returns>true if the system has configuration activated for budgetary control; otherwise, false.</returns>
    public static boolean isControlConfigured()
    {
        container cachedResult;
        boolean isBudgetControlConfigured = false;
        container key = [BudgetCacheScope::BudgetControlIsConfigured];

        cachedResult = BudgetCache::getValue(BudgetCacheScope::BudgetControlIsConfigured, key);

        if (cachedResult == connull())
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdv2BudgetCtrl)))
            {
                // Budget control configured is different from being enabled.
                // In "remove" scenarios, cleanup might need to be performed on data 
                // that previously was using budget control, but has since been disabled.
                // Since configuration keys can be unreliable in determining if budget control is being used,
                // configuration is determined by checking if budget control has ever been activated.
                isBudgetControlConfigured = BudgetControlConfiguration::existActive();
            }

            cachedResult = [isBudgetControlConfigured];
            BudgetCache::insertValue(BudgetCacheScope::BudgetControlIsConfigured, key, cachedResult);
        }

        return conpeek(cachedResult, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActive</Name>
				<Source><![CDATA[
    private static boolean existActive()
    {
        boolean found = false;
        BudgetControlConfiguration budgetControlConfiguration;

        // Determine whether any ledger has an active budget control configuration.
        select firstonly RecId from budgetControlConfiguration
            where budgetControlConfiguration.IsActive == NoYes::Yes;

        if (budgetControlConfiguration.RecId != 0)
        {
            found = true;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>BudgetControlConfiguration</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetControlConfiguration
                    where budgetControlConfiguration.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActiveForPrimaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an active <c>BudgetControlConfiguration</c> record exists for the specified
    ///    primary ledger.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <param name="_useCacheLookup">
    ///    A Boolean value that indicates whether to read the record using the cache lookup settings; optional.
    /// </param>
    /// <returns>
    ///    true if the active <c>BudgetControlConfiguration</c> record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_useCacheLookup"/> should only be set to false when the existence of the
    ///    <c>BudgetControlConfiguration</c> record must be ensured for setup data integrity.
    /// </remarks>
    public static boolean existActiveForPrimaryLedger(LedgerRecId _primaryLedgerRecId, boolean _useCacheLookup = true)
    {
        boolean found = false;
        BudgetControlConfiguration budgetControlConfiguration;

        if (!_useCacheLookup)
        {
            budgetControlConfiguration.disableCache(true);
        }

        select firstonly RecId
            from budgetControlConfiguration
            where budgetControlConfiguration.PrimaryLedger == _primaryLedgerRecId
                && budgetControlConfiguration.IsActive == NoYes::Yes;

        if (budgetControlConfiguration)
        {
            found = true;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDraftForPrimaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a draft <c>BudgetControlConfiguration</c> record exists for the specified
    ///    primary ledger.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <returns>
    ///    true if the draft <c>BudgetControlConfiguration</c> record exists; otherwise, false.
    /// </returns>
    public static boolean existDraftForPrimaryLedger(LedgerRecId _primaryLedgerRecId)
    {
        boolean found = false;
        BudgetControlConfiguration budgetControlConfiguration;

        select firstonly RecId
            from budgetControlConfiguration
            where budgetControlConfiguration.PrimaryLedger == _primaryLedgerRecId
                && budgetControlConfiguration.IsActive == NoYes::No;

        if (budgetControlConfiguration)
        {
            found = true;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetControlConfiguration</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetControlConfiguration find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetControlConfiguration budgetControlConfiguration;

        budgetControlConfiguration.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetControlConfiguration.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetControlConfiguration
            where budgetControlConfiguration.RecId == _recId;

        return budgetControlConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveByPrimaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the active record in the <c>BudgetControlConfiguration</c> table for the specified primary ledger.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetControlConfiguration findActiveByPrimaryLedger(LedgerRecId _primaryLedgerRecId)
    {
        BudgetControlConfiguration budgetControlConfiguration;

        if (_primaryLedgerRecId != 0)
        {
            select firstonly budgetControlConfiguration
                where budgetControlConfiguration.PrimaryLedger == _primaryLedgerRecId
                    && budgetControlConfiguration.IsActive == NoYes::Yes;
        }

        return budgetControlConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDraftByPrimaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the draft record in the <c>BudgetControlConfiguration</c> table for the specified primary ledger.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlConfiguration</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetControlConfiguration findDraftByPrimaryLedger(
        LedgerRecId _primaryLedgerRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetControlConfiguration budgetControlConfiguration;

        if (_primaryLedgerRecId != 0)
        {
            budgetControlConfiguration.selectForUpdate(_forupdate);

            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetControlConfiguration.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetControlConfiguration
                where budgetControlConfiguration.PrimaryLedger == _primaryLedgerRecId
                    && budgetControlConfiguration.IsActive == NoYes::No;
        }

        return budgetControlConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceIntegratorEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget control is enabled for the specified budget control source integrator.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <param name="_sourceIntegrator">
    /// The budget control source integrator to check.
    /// </param>
    /// <returns>
    /// true if budget control is enabled; otherwise, false.
    /// </returns>
    public static boolean isSourceIntegratorEnabled(
        LedgerRecId _primaryLedgerRecId,
        BudgetControlSourceIntegrator _sourceIntegrator)
    {
        boolean isEnabled;
        BudgetControlConfiguration activeConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(_primaryLedgerRecId);

        if (activeConfiguration)
        {
            // The budget control source integrator is enabled when a record in the
            // BudgetControlSourceIntegratorEnabled table exists for the active configuration and integrator.
            isEnabled = BudgetControlSourceIntegratorEnabled::existByConfigurationSourceIntegrator(
                activeConfiguration.RecId,
                _sourceIntegrator);
        }

        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApportionmentBudgetEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the apportionment budget is enabled for the specified ledger.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <returns>
    /// true if apportionment budget is enabled; otherwise, false.
    /// </returns>
    public static boolean isApportionmentBudgetEnabled(LedgerRecId _primaryLedgerRecId)
    {
        boolean isApportionmentEnabled;

        if (isConfigurationKeyEnabled(configurationKeyNum(PublicSector)))
        {
            BudgetControlConfiguration activeConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(_primaryLedgerRecId);

            if (activeConfiguration)
            {
                isApportionmentEnabled = activeConfiguration.UseApportionedAmount;
            }
        }

        return isApportionmentEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreliminaryBudgetEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the preliminary budget is enabled for the specified ledger.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <returns>
    /// true if preliminary budget is enabled; otherwise, false.
    /// </returns>
    public static boolean isPreliminaryBudgetEnabled(LedgerRecId _primaryLedgerRecId)
    {
        boolean isPreliminaryEnabled;

        if (isConfigurationKeyEnabled(configurationKeyNum(PublicSector)))
        {
            BudgetControlConfiguration activeConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(_primaryLedgerRecId);

            if (activeConfiguration)
            {
                isPreliminaryEnabled = activeConfiguration.SumPreliminaryBudget && !activeConfiguration.UseApportionedAmount;
            }
        }

        return isPreliminaryEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceIntegratorQuery</Name>
				<Source><![CDATA[
    internal static Query getSourceIntegratorQuery(
        LedgerRecId _primaryLedgerRecId,
        BudgetControlSourceIntegrator _sourceIntegrator)
    {
        Query query;
        BudgetControlConfiguration activeConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(_primaryLedgerRecId);

        if (activeConfiguration)
        {
            BudgetControlSourceIntegratorQuery queryContainer = BudgetControlSourceIntegratorEnabled::findByConfigurationSourceIntegrator(
                activeConfiguration.RecId,
                _sourceIntegrator).BudgetControlSourceIntegratorQuery;

            if (queryContainer)
            {
                query = new Query(queryContainer);
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyBudgetControlEnabled</Name>
				<Source><![CDATA[
    internal static boolean isAnyBudgetControlEnabled()
    {
        Ledger ledger;

        select maxof(IsBudgetControlEnabled) from ledger;

        return ledger.IsBudgetControlEnabled == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncludeCarryForwardAmountsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the include carry-forward amounts is enabled for the specified ledger.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <returns>
    /// true if include carry-forward amounts is enabled; otherwise, false.
    /// </returns>
    internal static boolean isIncludeCarryForwardAmountsEnabled(LedgerRecId _primaryLedgerRecId)
    {
        boolean isIncludeCarryForwardEnabled;

        BudgetControlConfiguration activeConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(_primaryLedgerRecId);

        if (activeConfiguration)
        {
            isIncludeCarryForwardEnabled = activeConfiguration.IncludeCarryforwardAmounts;
        }

        return isIncludeCarryForwardEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetControlEnabledForVendorInvoiceLine</Name>
				<Source><![CDATA[
    
    /// <summary>
    /// Indicates whether budget control is enabled for the vendor invoice line.
    /// </summary>
    /// <returns>
    /// True if it is enabled for the vendor invoice line; otherwise, false.
    /// </returns>
    internal static boolean isBudgetControlEnabledForVendorInvoiceLine()
    {
        LedgerRecId ledgerRecId = Ledger::current();
        boolean budgetControlEnabledForVendorInvoiceLine;

        budgetControlEnabledForVendorInvoiceLine = Ledger::isLedgerBudgetControlEnabled(ledgerRecId)
            && BudgetControlConfiguration::doBudgetCheckOnEntryForSourceIntegrator(ledgerRecId, BudgetControlSourceIntegrator::VendorInvoice);

        return budgetControlEnabledForVendorInvoiceLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@SYS317154</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@SYS314452</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PrimaryLedger</TitleField1>
	<TitleField2>DimensionHierarchyAccountStructure</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>BudgetControlConfigurationIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrimaryLedger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchyAccountStructure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultResponsibleUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultThresholdPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultBudgetCycleTimeSpan</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrimaryLedger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AvailableBudgetSubtract</Name>
			<Label>@SYS314437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubtractActualExpenditures</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubtractUnpostedActualExpenditures</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubtractEncumbrances</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubtractDraftEncumbrances</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubtractDraftEncumbranceReductions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubtractPreencumbrances</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubtractDraftPreencumbrances</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AvailableBudgetSum</Name>
			<Label>@SYS127665</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SumOriginalBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumPreliminaryBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumAmendments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumDraftAmendments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTransfers</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumDraftTransfersIn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumDraftTransfersOut</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetApportionments</Name>
			<Label>@SPS383</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseApportionedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrimaryLedger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IncludeCarryforwardAmounts</Name>
			<Label>@SYS300933</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeCarryforwardAmounts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaintainCarryforwardAmounts</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InUseBy</Name>
			<Label>@SYS127774</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InUseBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InUseSinceDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Parameters</Name>
			<Label>@SYS28007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchyAccountStructure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultResponsibleUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultThresholdPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultBudgetCycleTimeSpan</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarnOnOverBudgetThreshold</Name>
			<Label>@SYS314439</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WarnOnOverBudgetThreshold</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultBudgetCycleTimeSpan</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314453</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultInterval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetInterval</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultResponsibleUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BudgetResponsibleUser</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DefaultThresholdPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetThresholdPercent</ExtendedDataType>
			<Label>@SYS305007</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionHierarchyAccountStructure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS129015</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeCarryforwardAmounts</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS300933</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InUseBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SYS127774</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>InUseSinceDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<Label>@SYS329737</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS26201</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrimaryLedger</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubtractActualExpenditures</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127635</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubtractDraftEncumbranceReductions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS301779</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubtractDraftEncumbrances</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127643</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubtractDraftPreencumbrances</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127645</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubtractEncumbrances</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127637</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubtractPreencumbrances</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127639</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubtractUnpostedActualExpenditures</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127641</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumAmendments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127647</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumDraftAmendments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127654</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumDraftTransfersIn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127656</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumDraftTransfersOut</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127658</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumOriginalBudget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS103933</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumPreliminaryBudget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Label>@SPS375</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumTransfers</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127652</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseApportionedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Label>@SPS384</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarnOnOverBudgetThreshold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS127662</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MaintainCarryforwardAmounts</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Budget:MaintainCarryforwardStatus</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BudgetCycleTimeSpanIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultBudgetCycleTimeSpan</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UserInfoIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultResponsibleUser</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionHierarchyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionHierarchyAccountStructure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetControlConfigurationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PrimaryLedger</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsActive</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetCycleTimeSpan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetCycleTimeSpan</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetCycleTimeSpan</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetCycleTimeSpan_BudgetControlConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultBudgetCycleTimeSpan</Name>
					<Field>DefaultBudgetCycleTimeSpan</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionHierarchy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionHierarchy_BudgetControlConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchyAccountStructure</Name>
					<Field>DimensionHierarchyAccountStructure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Ledger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Ledger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Ledger_BudgetControlConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrimaryLedger</Name>
					<Field>PrimaryLedger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo_DefaultResponsibleUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UserInfo_DefaultResponsibleUser</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UserInfo_BudgetControlConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultResponsibleUser</Name>
					<SourceEDT>BudgetResponsibleUser</SourceEDT>
					<Field>DefaultResponsibleUser</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo_InUseBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UserInfo_InUseBy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UserInfo_BudgetControlConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InUseBy</Name>
					<SourceEDT>UserId</SourceEDT>
					<Field>InUseBy</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>