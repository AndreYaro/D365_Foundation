<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpPerdiemData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvExpPerdiemData extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateMealDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates meal deduction of a day based on type of calculation, and rules in per diem setup.
    /// </summary>
    /// <param name="_trvPerDiemRounding">
    /// Type of rounding method selected in trvparameters.
    /// </param>
    /// <param name="_trvMealReductionType">
    /// Type of meal reduction calculation selected in trvparameters.
    /// </param>
    /// <param name="_trvPerDiems">
    /// Per diem rules based on selected location.
    /// </param>
    /// <param name="_trvAllowanceRate">
    /// Rates based on per diem rules.
    /// </param>
    public void calculateMealDeduction(TrvPerDiemRounding _trvPerDiemRounding, TrvMealReductionType _trvMealReductionType, TrvPerDiems _trvPerDiems, TrvAllowanceRate _trvAllowanceRate = null)
    {
        real mealPercDeduction = 0;
        TrvRealBasePositive deductionBreakfast;
        TrvRealBasePositive deductionLunch;
        TrvRealBasePositive deductionDinner;
        TrvRealBasePositive deductOneMeal ;
        TrvRealBasePositive deductTwoMeals;
        TrvRealBasePositive deductThreeOrMoreMeals;
        boolean             isPerdiemEnabled = ExpensePerdiemHelper::isPerDiemEnabled();
        TrvExpTrans         trvExpTrans = TrvExpTrans::find(this.TrvExpTrans);
        TrvParameters       trvParameters = TrvParameters::find();
        TrvAllowanceRate    trvAllowanceRateAnyExist;

        if (_trvPerDiems != null)
        {
            // Values to use by default.
            deductionBreakfast = _trvPerDiems.DeductBreakf;
            deductionLunch = _trvPerDiems.DeductLunch;
            deductionDinner = _trvPerDiems.DeductDinner;
            deductOneMeal = _trvPerDiems.DeductOneMeal;
            deductTwoMeals = _trvPerDiems.DeductTwoMeals;
            deductThreeOrMoreMeals = _trvPerDiems.DeductThreeOrMoreMeals;

            if (_trvMealReductionType == TrvMealReductionType::MealsPerDay || _trvMealReductionType == TrvMealReductionType::MealTypePerDay)
            {
                switch (this.TypeOfDate)
                {
                    case TrvFirstLastBoth::FirstDay:
                    case TrvFirstLastBoth::LastDay:
                        // Check if any allowance rates exist for the per diem.
                        if (_trvAllowanceRate.RecId)
                        {
                            //Added fix for the system to recognize per diem tier rules for last day when no of hours is 0.
                            if (this.NumberOfHrsDay > 0)
                            {
                                deductionBreakfast = _trvAllowanceRate.DeductBreakf;
                                deductionLunch = _trvAllowanceRate.DeductLunch;
                                deductionDinner = _trvAllowanceRate.DeductDinner;
                                deductOneMeal = _trvAllowanceRate.DeductOneMeal;
                                deductTwoMeals = _trvAllowanceRate.DeductTwoMeals;
                                deductThreeOrMoreMeals = _trvAllowanceRate.DeductThreeOrMoreMeals;
                            }
                            else if (this.NumberOfHrsDay == 0 && this.TypeOfDate == TrvFirstLastBoth::LastDay)
                            {
                                deductionBreakfast = 0;
                                deductionLunch = 0;
                                deductionDinner = 0;
                                deductOneMeal = 0;
                                deductTwoMeals = 0;
                                deductThreeOrMoreMeals = 0;
                            }
                        }
                        else if(isPerdiemEnabled)
                        {
                            // check if any allowance rates exist for the perdiem
                            select firstonly RecId, MealReduction from trvAllowanceRateAnyExist where
                                trvAllowanceRateAnyExist.PerDiemRecId == _trvPerDiems.RecId &&
                                (trvAllowanceRateAnyExist.TrvFirstLastBoth == this.TypeOfDate || trvAllowanceRateAnyExist.TrvFirstLastBoth == TrvFirstLastBoth::Both);
                        }
                        break;

                    default:
                        break;
                }

                // Calculate meal deduction.
                if (_trvMealReductionType == TrvMealReductionType::MealsPerDay)
                {
                    mealPercDeduction = this.percDeductionByNumberOfMeals(deductOneMeal, deductTwoMeals, deductThreeOrMoreMeals);
                }
                else if (_trvMealReductionType == TrvMealReductionType::MealTypePerDay)
                {
                    mealPercDeduction = this.percDeductionByTypeOfMeal(deductionBreakfast, deductionLunch, deductionDinner);
                }

                TrvPerDiemAmountCur mealDeductionAllowed = _trvPerDiems.MealAllowance * mealPercDeduction;
                                
                if((this.TypeOfDate == TrvFirstLastBoth::FirstDay || this.TypeOfDate == TrvFirstLastBoth::LastDay) &&
                    trvParameters.IgnoreAllowanceRateForMealReductionFirstLastDay == NoYes::No)
                {
                    if(_trvAllowanceRate.RecId && _trvAllowanceRate.MealReduction > 0)
                    {
                        mealDeductionAllowed = (mealDeductionAllowed * _trvAllowanceRate.MealReduction) / 100;
                    }
                    else if(isPerdiemEnabled && trvAllowanceRateAnyExist.RecId)
                    {
                        mealDeductionAllowed = (mealDeductionAllowed * trvAllowanceRateAnyExist.MealReduction) / 100;
                    }
                }
                
                if (_trvPerDiemRounding == TrvPerDiemRounding::RoundUp)
                {
                    this.MealDeduction = CurrencyExchange::roundWithRule(mealDeductionAllowed / 100, 1.0, RoundOffType::RoundUp);
                }
                else
                {
                    // Ordinary rounding - apply rules defined on the currency
                    this.MealDeduction = CurrencyExchange::round(mealDeductionAllowed / 100, this.ExchangeCode);
                }

                // Meal deduction can't be more than allowance for that day.
                TrvTransactionCurrencyAmount maxAllowedMealAllowance = 0, maxAllowedOtherAllowance = 0;

                if (_trvAllowanceRate.RecId && _trvAllowanceRate.MealReduction > 0)
                {
                    if (_trvPerDiemRounding == TrvPerDiemRounding::RoundUp)
                    {
                        maxAllowedMealAllowance = CurrencyExchange::roundWithRule(_trvPerDiems.MealAllowance * _trvAllowanceRate.MealReduction / 100, 1.0, RoundOffType::RoundUp);
                        maxAllowedOtherAllowance = isPerdiemEnabled ? CurrencyExchange::roundWithRule(_trvPerDiems.OtherAllowance * _trvAllowanceRate.OtherReduction / 100, 1.0, RoundOffType::RoundUp) : 0;
                    }
                    else
                    {
                        maxAllowedMealAllowance = CurrencyExchange::round(_trvPerDiems.MealAllowance * _trvAllowanceRate.MealReduction / 100, this.ExchangeCode);
                        maxAllowedOtherAllowance = isPerdiemEnabled ? CurrencyExchange::round(_trvPerDiems.OtherAllowance * _trvAllowanceRate.OtherReduction / 100, this.ExchangeCode) : 0;
                    }
        
                    if (this.MealDeduction > maxAllowedMealAllowance)
                    {
                        this.MealDeduction = maxAllowedMealAllowance;
                    }
                }
                else if(isPerdiemEnabled)
                {
                    if((this.TypeOfDate == TrvFirstLastBoth::MiddleDay) ||
                        // if no rates have been setup, then count first/last day as a full day only if hrs > 0
                        (this.TypeOfDate == TrvFirstLastBoth::FirstDay && !trvAllowanceRateAnyExist.RecId && this.NumberOfHrsDay > 0)   ||
                       (this.TypeOfDate == TrvFirstLastBoth::LastDay && !trvAllowanceRateAnyExist.RecId &&
                        (this.NumberOfHrsDay > 0 || trvParameters.PerDiemCalculation == TrvPerDiemCalculation::CalendarDay ||
                        trvParameters.PerDiemCalculation == TrvPerDiemCalculation::CalendarDayNoTime)))
                    {
                        maxAllowedMealAllowance = _trvPerDiems.MealAllowance;
                        maxAllowedOtherAllowance = _trvPerDiems.OtherAllowance;
                    }
                    if (this.MealDeduction > maxAllowedMealAllowance)
                    {
                        this.MealDeduction = maxAllowedMealAllowance;
                    }
                }

                AmountMST mealsandIncidentals = isPerdiemEnabled? ((maxAllowedMealAllowance + maxAllowedOtherAllowance) - this.MealDeduction) : 0;
                this.MealsandIncidentalsMST = isPerdiemEnabled ? CurrencyExchangeHelper::amountCur2MST(mealsandIncidentals, this.ExchangeCode, trvExpTrans.ExchangeRate) : 0;

            }
            // Else, Reduction is by trip, nothing to calculate here.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionWithCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays deduction along with the transaction currency code.
    /// </summary>
    /// <returns>
    /// The deduction in transaction currency, along with the transaction currency code.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TrvDeductionWithCurrencyCode deductionWithCurrencyCode()
    {
        return TrvExpenseHelper::amountWithTransactionCurrencyCode(this.MealDeduction, this.ExchangeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>percDeductionByNumberOfMeals</Name>
				<Source><![CDATA[
    private real percDeductionByNumberOfMeals(TrvRealBasePositive _deductOneMeal, TrvRealBasePositive _deductTwoMeals, TrvRealBasePositive _deductThreeOrMoreMeals)
    {
        int numberOfMeals = 0;
        real mealDeduction = 0;

        numberOfMeals = this.NumberOfBreakfast + this.NumberOfLunch + this.NumberOfDinner;
        if (numberOfMeals >= 3)
        {
            mealDeduction = _deductThreeOrMoreMeals;
        }
        else if (numberOfMeals == 2)
        {
            mealDeduction = _deductTwoMeals;
        }
        else if (numberOfMeals == 1)
        {
            mealDeduction = _deductOneMeal;
        }

        return mealDeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percDeductionByTypeOfMeal</Name>
				<Source><![CDATA[
    private real percDeductionByTypeOfMeal(TrvRealBasePositive _deductBreakf, TrvRealBasePositive _deductLunch, TrvRealBasePositive _deductDinner)
    {
        real mealDeduction = 0;

        mealDeduction = this.NumberOfBreakfast * _deductBreakf;
        mealDeduction += this.NumberOfLunch * _deductLunch;
        mealDeduction += this.NumberOFDinner * _deductDinner;

        return mealDeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or Creates a record in the per diem data table for this expense transaction line, if it not already
    /// present.
    /// </summary>
    /// <param name="_trvExpTransRecId">
    /// The recId of transaction line for which to create the per diem data.
    /// </param>
    /// <param name="_datePerDiem">
    /// Date for which to create the per diem data.
    /// </param>
    /// <param name="_forUpdate">
    /// True if per diem recode will be updated
    /// </param>
    /// <returns>
    /// Records of the per diem data table.
    /// </returns>
    public static TrvExpPerdiemData findOrCreate(RefRecId _trvExpTransRecId, TrvDateTime _datePerDiem, boolean _forUpdate = false)
    {
        TrvExpPerdiemData trvExpPerdiemData;
        if (_trvExpTransRecId)
        {
            trvExpPerdiemData.selectForUpdate(_forUpdate);
            select firstonly trvExpPerdiemData where trvExpPerdiemData.TrvExpTrans == _trvExpTransRecId
                && trvExpPerdiemData.TransDate == DateTimeUtil::date(_datePerDiem);

            // Per diem data record doesn't exists.
            if (trvExpPerdiemData == null)
            {
                trvExpPerdiemData.TrvExpTrans = _trvExpTransRecId;
                trvExpPerdiemData.TransDate = DateTimeUtil::date(_datePerDiem);
                trvExpPerdiemData.insert();
            }
        }
        return trvExpPerdiemData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMealBreakdownPerDay</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if meal reduction should be per day or per trip.
    /// </summary>
    /// <returns>
    ///     True if is meal reduction per number of meals or per type of meal per day.
    /// </returns>
    public static boolean isMealBreakdownPerDay()
    {
        TrvParameters trvParameters = TrvParameters::find();
        if (trvParameters.MealReductionType == TrvMealReductionType::MealsPerDay ||
            trvParameters.MealReductionType == TrvMealReductionType::MealTypePerDay)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTrvExpPerdiemData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TrvExpPerdiemData</c> table with the values passed.
    /// </summary>
    /// <param name = "_trvExpPerDiemDataContract">
    /// <c>TrvExpPerDiemDataContract</c> class.
    /// </param>
    /// <returns>
    /// <c>TrvExpPerDiemDataContract</c> contract class that contains details about the <c>TrvExpPerdiemData</c> table.
    /// </returns>
    public TrvExpPerDiemDataContract initializeTrvExpPerdiemData(TrvExpPerDiemDataContract _trvExpPerDiemDataContract)
    {
        TrvExpPerdiemData trvExpPerdiemData;
        int numberOfDaysCounter = _trvExpPerDiemDataContract.parmNumberOfDaysCount();
        TrvParameters       trvParameters = TrvParameters::find();
        TrvAllowanceRate    trvAllowanceRate;
        TrvPerDiems         trvPerDiems = _trvExpPerDiemDataContract.parmTrvPerDiems();

        trvExpPerdiemData.TrvExpTrans = _trvExpPerDiemDataContract.parmExpenseTransRecId();
        trvExpPerdiemData.TransDate = DateTimeUtil::date(DateTimeUtil::addDays(_trvExpPerDiemDataContract.parmDateFrom(), numberOfDaysCounter));
        trvExpPerdiemData.LegalEntity = _trvExpPerDiemDataContract.parmLegalEntity();
        trvExpPerdiemData.ExchangeCode = _trvExpPerDiemDataContract.parmTrvCurrency();

        if (numberOfDaysCounter == 0)
        {
            trvExpPerdiemData.TypeOfDate = TrvFirstLastBoth::FirstDay;
            trvExpPerdiemData.NumberOfHrsDay = _trvExpPerDiemDataContract.parmHoursFirstDay();
        }
        else if (numberOfDaysCounter == _trvExpPerDiemDataContract.parmNumDays() - 1)
        {
            trvExpPerdiemData.TypeOfDate = TrvFirstLastBoth::LastDay;
            trvExpPerdiemData.NumberOfHrsDay = _trvExpPerDiemDataContract.parmHoursLastDay();
        }
        else
        {
            trvExpPerdiemData.TypeOfDate = TrvFirstLastBoth::MiddleDay;
            trvExpPerdiemData.NumberOfHrsDay = 24;
        }

        if (trvExpPerdiemData.TypeOfDate != TrvFirstLastBoth::MiddleDay)
        {
            trvAllowanceRate = TrvAllowanceRate::find(trvPerDiems.RecId, trvExpPerdiemData.TypeOfDate, trvExpPerdiemData.NumberOfHrsDay);
        }
        trvExpPerdiemData.calculateMealDeduction(trvParameters.PerDiemRounding, trvParameters.MealReductionType, trvPerDiems, trvAllowanceRate);

        _trvExpPerDiemDataContract.parmTrvExpPerdiemData(trvExpPerdiemData);

        return _trvExpPerDiemDataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePerDiemDataWhichIsNotInDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clean <c>TrvExpPerDiemData</c> records that are not in current date range per supplied <c>TrvExpTrans</c> instance.
    /// </summary>
    /// <param name = "_dateFrom">Per diem date from value.</param>
    /// <param name = "_dateTo">Per diem date to value.</param>
    /// <param name = "_trvExpTransRecId"><c>TrvExpTrans</c> table buffer.</param>
    public static void removePerDiemDataWhichIsNotInDateRange(utcdatetime _dateFrom, utcdatetime _dateTo, RefRecId _trvExpTransRecId)
    {
        TrvExpPerdiemData trvExpPerdiemData;

        delete_from trvExpPerdiemData
                where trvExpPerdiemData.TrvExpTrans == _trvExpTransRecId && (trvExpPerdiemData.TransDate > DateTimeUtil::date(_dateTo) || trvExpPerdiemData.TransDate <  DateTimeUtil::date(_dateFrom));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editNumberOfBreakFast</Name>
				<Source><![CDATA[
    /// <summary>
    /// When set and checkbox is unchecked, it is considered as 1 meal reduction;
    /// When not set, this method effectively just sets the value from numberOfBreakfast directly
    /// </summary>
    /// <param name = "_set">
    /// Boolean indicating the checkbox value is being set
    /// </param>
    /// <param name = "_breakfast">
    /// Allowance for Breakfast is included if checked, otherwise it is considered as meal deduction
    /// </param>
    /// <returns>
    /// Yes, if checkbox value is being set; otherwise, No
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit NoYes editNumberOfBreakFast(boolean _set, NoYes _breakfast)
    {
        int zeroMeal = 0, oneMeal = 1;
 
        if(_set)
        {
            this.NumberOfBreakfast = _breakfast == NoYes::No ? oneMeal : zeroMeal;
        }
        else
        {
            _breakfast = this.NumberOfBreakfast == zeroMeal? NoYes::Yes : NoYes::No;
        }

        return _breakfast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editNumberOfLunch</Name>
				<Source><![CDATA[
    /// <summary>
    /// When set and checkbox is unchecked, it is considered as 1 meal reduction;
    /// When not set, this method effectively just sets the value from mumberOfLunch directly
    /// </summary>
    /// <param name = "_set">
    /// Boolean indicating the checkbox value is being set
    /// </param>
    /// <param name = "_lunch">
    /// Allowance for lunch is included if checked, otherwise it is considered as meal deduction
    /// </param>
    /// <returns>
    /// Yes, if checkbox value is being set; otherwise, No
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit NoYes editNumberOfLunch(boolean _set, NoYes _lunch)
    {
        int zeroMeal = 0, oneMeal = 1;

        if(_set)
        {
            this.NumberOfLunch = _lunch == NoYes::No ? oneMeal : zeroMeal;
        }
        else
        {
            _lunch = this.NumberOfLunch == zeroMeal? NoYes::Yes : NoYes::No;
        }
        return _lunch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editNumberOfDinner</Name>
				<Source><![CDATA[
    /// <summary>
    /// When set and checkbox is unchecked, it is considered as 1 meal reduction;
    /// When not set, this method effectively just sets the value from numberOfDinner directly
    /// </summary>
    /// <param name = "_set">
    /// Boolean indicating the checkbox value is being set
    /// </param>
    /// <param name = "_dinner">
    /// Allowance for dinner is included if checked, otherwise it is considered as meal deduction
    /// </param>
    /// <returns>
    /// Yes, if checkbox value is being set; otherwise, No
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit NoYes editNumberOfDinner(boolean _set, NoYes _dinner)
    {
        int zeroMeal = 0, oneMeal = 1;

        if(_set)
        {
            this.NumberOfDinner = _dinner == NoYes::No ? oneMeal : zeroMeal;
        }
        else
        {
            _dinner = this.NumberOfDinner == zeroMeal? NoYes::Yes : NoYes::No;
        }
        return _dinner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>perDiemDayTotalLECurrencycode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total per diem amount for a day, after any meal reductions.
    /// </summary>
    /// <returns>The amount together with the transaction currency code.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display TrvAmountCurrency perDiemDayTotalLECurrencycode()
    {
        return TrvExpenseHelper::amountWithCurrencyCode(this.MealsandIncidentalsMST, this.LegalEntity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TrvPerDiem</ConfigurationKey>
	<DeveloperDocumentation>@Expense:TheTrvexpperdiemdataTableContainsTheBreakdownOfMealsPerDayFo</DeveloperDocumentation>
	<Label>@SYS116008</Label>
	<TitleField1>MealDeduction</TitleField1>
	<TitleField2>TrvExpTrans</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Expense</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrvExpTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfBreakfast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfLunch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfDinner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MealDeduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MealsandIncidentalsMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PerDiemMealData</Name>
			<Label>@SYS116008</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfBreakfast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfLunch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfDinner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MealDeduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExchangeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MealDeduction</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvTransactionCurrencyAmount</ExtendedDataType>
			<Label>@SYS101506</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumberOfBreakfast</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS101731</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumberOfDinner</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS101735</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NumberOfHrsDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvRealBasePositive</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumberOfLunch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS101733</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvDateStd</ExtendedDataType>
			<Label>@SYS67</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TrvExpTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeOfDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS121612</Label>
			<Visible>No</Visible>
			<EnumType>TrvFirstLastBoth</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MealsandIncidentalsMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<FeatureClass>ExpenseManagementPerDiemFeature</FeatureClass>
			<Label>@Expense:MealsandIncidentals</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TrvExpTransIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TrvExpTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CompanyInfoIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124845</EntityRelationshipRole>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Quantifies</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsQuantifiedBy</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExchangeCode</Name>
					<SourceEDT>TrvCurrencyCode</SourceEDT>
					<Field>ExchangeCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LegallyAccountsFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BelongsTo</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvExpTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS111394</EntityRelationshipRole>
			<RelatedTable>TrvExpTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TrvExpTrans</Name>
					<Field>TrvExpTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>