<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPeriodLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeChanged</Name>
				<Source><![CDATA[
    public boolean canBeChanged()
    {
        boolean     ret = true;
        ;

        if ((select projPeriodEmpl where projPeriodEmpl.PeriodId == this.PeriodId && projPeriodEmpl.PeriodFrom == this.PeriodFrom).RecId ||
            (select projControlPeriodTable where projControlPeriodTable.PeriodId == this.PeriodId && projControlPeriodTable.PeriodFrom == this.PeriodFrom).RecId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjPeriodTimesheetWeek timesheetWeek;

        super();

        delete_from timesheetWeek
            where   timesheetWeek.PeriodId == this.PeriodId &&
                    timesheetWeek.PeriodFrom >= this.PeriodFrom &&
                    timesheetWeek.PeriodTo <= this.PeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether a <c>ProjPeriodLine</c> exists for the given period and starting date.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_periodFrom">
    /// The starting date.
    /// </param>
    /// <returns>
    /// <c>True</c> if a record exists, <c>false</c> otherwise.
    /// </returns>
    static boolean exist(ProjPeriodId   _periodId,
                         ProjPeriodFrom _periodFrom)
    {
        return  _periodId   &&
                _periodFrom &&
                (select projPeriodLine
                     where projPeriodLine.PeriodId  == _periodId  &&
                           projPeriodLine.PeriodFrom== _periodFrom
                 ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProjPeriodLine</c> for the given period and start date.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_periodFrom">
    /// The starting date.
    /// </param>
    /// <param name="_forUpdate">
    /// An optional parameter indicating the found record should allow updates.
    /// </param>
    /// <returns>
    /// A <c>ProjPeriodLine</c> record.
    /// </returns>
    public static ProjPeriodLine find(ProjPeriodId _periodId, ProjPeriodFrom _periodFrom, boolean _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine = null;
        ;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_periodId && _periodFrom)
        {
            select projPeriodLine
                where projPeriodLine.PeriodId   == _periodId &&
                      projPeriodLine.PeriodFrom == _periodFrom;
        }

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstPeriodLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first <c>ProjPeriodLine</c> record in the specified period.
    /// </summary>
    /// <param name="_projPeriodId">
    /// The ID of the period for which to find the first <c>ProjPeriodLine</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjPeriodLine</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjPeriodLine findFirstPeriodLine(ProjPeriodId _projPeriodId, boolean _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_projPeriodId)
        {
            select firstonly projPeriodLine
                order by PeriodFrom asc
                where projPeriodLine.PeriodId == _projPeriodId;
        }
        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForecastModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ForecastModelId</c> for the given period and start date.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_periodFrom">
    /// The starting date.
    /// </param>
    /// <param name="_forUpdate">
    /// An optional parameter indicating the found record should allow updates.
    /// The default is <c>false</c>.
    /// </param>
    /// <returns>
    /// A <c>ForecastModelId</c>.
    /// </returns>
    public static ForecastModelId  findForecastModelId(ProjPeriodId _periodId, ProjPeriodFrom _periodFrom, boolean _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine = null;
        ;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_periodId && _periodFrom)
        {
            select projPeriodLine
                where projPeriodLine.PeriodId   == _periodId &&
                      projPeriodLine.PeriodFrom == _periodFrom;
        }

        return projPeriodLine.ModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProjPeriodLine</c> for the given period and end date.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_transDate">
    /// The ending date.
    /// </param>
    /// <param name="_forUpdate">
    /// An optional parameter indicating the found record should allow updates.
    /// The default is <c>false</c>.
    /// </param>
    /// <returns>
    /// A <c>ProjPeriodLine</c> record.
    /// </returns>
    /// <remarks>
    /// No period line will be returned if the _transDate is before the fromDate
    /// of the first period or after the toDate of the last period.
    /// </remarks>
    public static ProjPeriodLine findFromPeriod(ProjPeriodId    _periodId,
                                                TransDate       _transDate,
                                                boolean         _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine = null;
        ;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_periodId && _transDate)
        {
            select firstonly reverse projPeriodLine
                where projPeriodLine.PeriodId == _periodId
                && projPeriodLine.PeriodFrom <= _transDate
                && projPeriodLine.PeriodTo >= _transDate;
        }

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromPeriodByDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProjPeriodLine</c> for the given period, end date, and data area.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_transDate">
    /// The ending date.
    /// </param>
    /// <param name="_dataArea">
    /// The data area to find the <c>ProjPeriodLine</c> record in.
    /// The default is the current data area.
    /// </param>
    /// <param name="_forUpdate">
    /// An optional parameter indicating the found record should allow updates.
    /// The default is <c>false</c>.
    /// </param>
    /// <returns>
    /// A <c>ProjPeriodLine</c> record.
    /// </returns>
    public static ProjPeriodLine findFromPeriodByDataArea(ProjPeriodId       _periodId,
                                                          TransDate          _transDate,
                                                          SelectableDataArea _dataArea  = curext(),
                                                          boolean            _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine = null;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_periodId && _transDate)
        {
            select firstonly reverse crossCompany projPeriodLine
                where   projPeriodLine.PeriodId     == _periodId
                &&      projPeriodLine.PeriodFrom   <= _transDate
                &&      projPeriodLine.DataAreaId   == _dataArea;
        }

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromPeriodFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProjPeriodLine</c> for the given period and <c>ProjPeriodFrom</c>.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_periodFrom">
    /// A <c>ProjPeriodFrom</c>.
    /// </param>
    /// <param name="_forUpdate">
    /// An optional parameter indicating the found record should allow updates.
    /// The default is <c>false</c>.
    /// </param>
    /// <returns>
    /// A <c>ProjPeriodLine</c> record.
    /// </returns>
    public static ProjPeriodLine findFromPeriodFrom(ProjPeriodId _periodId, ProjPeriodFrom _periodFrom, boolean _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine = null;
        ;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_periodId && _periodFrom)
        {
            select firstonly reverse projPeriodLine
                where   projPeriodLine.PeriodId     == _periodId
                &&      projPeriodLine.PeriodFrom   == _periodFrom;
        }

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromPeriodTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProjPeriodLine</c> for the given period and <c>ProjPeriodTo</c>.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_periodTo">
    /// A <c>ProjPeriodTo</c>.
    /// </param>
    /// <param name="_forUpdate">
    /// An optional parameter indicating the found record should allow updates.
    /// The default is <c>false</c>.
    /// </param>
    /// <returns>
    /// A <c>ProjPeriodLine</c> record.
    /// </returns>
    public static ProjPeriodLine findFromPeriodTo(ProjPeriodId _periodId, ProjPeriodTo _periodTo, boolean _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine = null;
        ;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_periodId && _periodTo)
        {
            select firstonly reverse projPeriodLine
                where   projPeriodLine.PeriodId == _periodId
                &&      projPeriodLine.PeriodTo == _periodTo;
        }

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextFromPeriodTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next <c>ProjPeriodLine</c> for the given period and <c>ProjPeriodTo</c>.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_periodTo">
    /// A <c>ProjPeriodTo</c>.
    /// </param>
    /// <param name="_forUpdate">
    /// An optional parameter indicating the found record should allow updates.
    /// The default is <c>false</c>.
    /// </param>
    /// <returns>
    /// A <c>ProjPeriodLine</c> record.
    /// </returns>
    public static ProjPeriodLine findNextFromPeriodTo(ProjPeriodId _periodId, ProjPeriodTo _periodTo, boolean _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine = null;
        ;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_periodId && _periodTo)
        {
            select firstonly projPeriodLine
                where   projPeriodLine.PeriodId == _periodId
                &&      projPeriodLine.PeriodTo >  _periodTo;
        }
        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrevFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous <c>ProjPeriodLine</c> for the given period and <c>ProjPeriodTo</c>.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_periodTo">
    /// A <c>ProjPeriodTo</c>.
    /// </param>
    /// <param name="_forUpdate">
    /// An optional parameter indicating the found record should allow updates.
    /// The default is <c>false</c>.
    /// </param>
    /// <returns>
    /// A <c>ProjPeriodLine</c> record.
    /// </returns>
    public static ProjPeriodLine findPrevFromDate(ProjPeriodId _periodId, ProjPeriodTo _periodTo, boolean _forUpdate = false)
    {
        ProjPeriodLine  projPeriodLine = null;
        ProjPeriodTo    projPeriodTo;
        ;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_periodId && _periodTo)
        {
            // Finds the actual according to the date (_periodTo)
            select firstonly reverse projPeriodLine
                where projPeriodLine.PeriodId   == _periodId &&
                      projPeriodLine.PeriodTo   <= _periodTo;

            // Now find the previous
            if (projPeriodLine)
            {
                projPeriodTo = projPeriodLine.PeriodTo;

                select firstonly reverse projPeriodLine
                    where projPeriodLine.PeriodId   == _periodId &&
                          projPeriodLine.PeriodTo   <= projPeriodTo;
            }
            else
            {
                select firstonly projPeriodLine
                    where projPeriodLine.PeriodId   == _periodId;
            }
        }

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the <c>ProjPeriodLine</c> for the given period and date.
    /// </summary>
    /// <param name="_periodId">
    ///     A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_transDate">
    ///     The ending date.
    /// </param>
    /// <param name="_forUpdate">
    ///     An optional parameter indicating the found record should allow updates.
    ///     The default is <c>false</c>.
    /// </param>
    /// <returns>
    ///     A <c>ProjPeriodLine</c> record.
    /// </returns>
    /// <remarks>
    ///     This method will not return any record if no valid calendar period is defined.
    /// </remarks>
    public static ProjPeriodLine findPeriod(ProjPeriodId    _periodId,
                                            TransDate       _transDate,
                                            boolean         _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine = null;
    
        projPeriodLine.selectForUpdate(_forUpdate);
    
        if (_periodId && _transDate)
        {
            select projPeriodLine
                where projPeriodLine.PeriodId     == _periodId
                   && projPeriodLine.PeriodFrom   <= _transDate
                   && (projPeriodLine.PeriodTo    >= _transDate
                   || !projPeriodLine.PeriodTo);
        }
    
        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous <c>ProjPeriodLine</c> for the given period and <c>ProjPeriodFrom</c>.
    /// </summary>
    /// <param name="_periodId">
    /// A <c>ProjPeriodId</c>.
    /// </param>
    /// <param name="_periodFrom">
    /// A <c>ProjPeriodFrom</c>.
    /// </param>
    /// <param name="_forUpdate">
    /// An optional parameter indicating the found record should allow updates.
    /// The default is <c>false</c>.
    /// </param>
    /// <returns>
    /// A <c>ProjPeriodLine</c> record.
    /// </returns>
    public static ProjPeriodLine findPreviousPeriod(ProjPeriodId _periodId, ProjPeriodFrom _periodFrom, boolean _forUpdate = false)
    {
        ProjPeriodLine projPeriodLine;

        projPeriodLine.selectForUpdate(_forUpdate);

        if (_periodId && _periodFrom)
        {
            select firstonly reverse projPeriodLine
                where   projPeriodLine.PeriodId     == _periodId
                &&      projPeriodLine.PeriodFrom   < _periodFrom;
        }

        return projPeriodLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPeriod</Name>
				<Source><![CDATA[
    public static void lookupPeriod(FormDateControl _ctrl, ProjPeriodId _periodId, ProjPeriodFrom _periodFrom = dateNull())
    {
        Args            args = new Args();
        ProjPeriodLine  ppl = ProjPeriodLine::find(_periodId,_periodFrom);
        FormRun         formRun;
        ;

        if (!ppl)
        {
            ppl = ProjPeriodLine::findPrevFromDate(_periodId, _periodFrom);
        }

        args.name(formStr(ProjPeriodLookUp));
        args.parm(_periodId);
        args.lookupRecord(ppl);
        args.caller(_ctrl);

        // If period is not selected and default period from CRM Parameters
        args.parmEnumType(enumNum(NoYes));
        args.parmEnum(NoYes::No);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPeriodTo</Name>
				<Source><![CDATA[
    public static void lookupPeriodTo(FormDateControl ctrl, ProjPeriodId _periodId, ProjPeriodTo _periodTo = dateNull())
    {
        Args            args = new Args();
        FormRun         formRun;
        ProjPeriodLine  ppl;
        ;

        ppl = ProjPeriodLine::findFromPeriodTo(_periodId, _periodTo);

        if (!ppl)
        {
            ppl = ProjPeriodLine::findNextFromPeriodTo(_periodId, _periodTo);
        }

        args.name(formStr(ProjPeriodLookUpTo));
        args.parm(_periodId);
        args.lookupRecord(ppl);
        args.caller(ctrl);

        // If period is not selected and default period from CRM Parameters
        args.parmEnumType(enumNum(NoYes));
        args.parmEnum(NoYes::No);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaFindNextFromDate</Name>
				<Source><![CDATA[
    public static ProjPeriodLine smaFindNextFromDate(ProjPeriodId _periodId, ProjPeriodTo _periodTo, boolean _forupdate = false)
    {
        ProjPeriodLine projPeriodLine = null;
        ;

        projPeriodLine.selectForUpdate(_forupdate);

        if (_periodId && _periodTo)
        {
            select firstonly projPeriodLine
                where projPeriodLine.PeriodId   == _periodId &&
                      projPeriodLine.PeriodFrom > _periodTo;
        }

        return projPeriodLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124949</DeveloperDocumentation>
	<Label>@SYS55269</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PeriodId</TitleField1>
	<TitleField2>PeriodName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PeriodIdFromToIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>PeriodIdFromToIdx</PrimaryIndex>
	<ReplacementKey>PeriodIdFromToIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjPeriodEmpl</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjPeriodEmpl</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Model</Name>
			<Label>@SYS9923</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastModelId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodFrom</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
			<Label>@SYS23329</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodTo</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodTo</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PeriodIdFromToIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PeriodId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PeriodIdToIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PeriodId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ForecastModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastModel</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>HeadingSub::Heading</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelId</Name>
					<SourceEDT>ForecastModelId</SourceEDT>
					<Field>ModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjPeriodEmpl</Name>
			<EntityRelationshipRole>@SYS124950</EntityRelationshipRole>
			<RelatedTable>ProjPeriodEmpl</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodFrom</Name>
					<Field>PeriodFrom</Field>
					<RelatedField>PeriodFrom</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodId</Name>
					<Field>PeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjPeriodTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjPeriodLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodId</Name>
					<SourceEDT>ProjPeriodId</SourceEDT>
					<Field>PeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>