<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsVendBatchInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsVendBatchInfo extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cascadeDetailsToBatchesCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cascades the vendor details of the source line to the batches associated with it.
    /// </summary>
    /// <param name="_packingSlipId">
    ///    A string value that represents the packing slip ID that is processed; optional.
    /// </param>
    public void cascadeDetailsToBatchesCreated(PackingSlipId _packingSlipId = '')
    {
        ItemId              itemId = this.itemId();

        if (#PdsVendBatchEnabled
            && itemId
            && this.mustCascadeDetailsToBatchesCreatedForItem(itemId))
        {
            InventTransId       inventTransId = this.inventTransId();
            InventTrans         inventTrans;
            InventBatch         inventBatchReplica;
            InventTransOrigin   inventTransOrigin;
            InventDim           inventDim;
            InventBatch         inventBatch;

            if ((select firstOnly RecId from inventBatch where inventBatch.ItemId == itemId).RecId != 0)
            {
                ttsbegin;
                while select TableId from inventTransOrigin
                    where inventTransOrigin.InventTransId == inventTransId
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       && (inventTrans.PackingSlipId    == _packingSlipId || !_packingSlipId)
                join TableId from inventDim
                    where   inventTrans.InventDimId     == inventDim.InventDimId
                join forupdate inventBatchReplica
                    where inventBatchReplica.ItemId   == itemId
                        &&  inventDim.InventBatchId   == inventBatchReplica.InventBatchId
                {
                    inventBatchReplica.pdsInitFromVendBatchDetails(this);
                    inventBatchReplica.update();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item number of the vendor batch info record.
    /// </summary>
    /// <returns>The item number of the vendor batch info record.</returns>
    private ItemId itemId()
    {
        switch (this.SourceRefType)
        {
            case PdsVendBatchInfoSourceRefType::PurchaseOrderLine:
                return this.purchLine().ItemId;

            case PdsVendBatchInfoSourceRefType::ConsignmentReplenishmentOrderLine:
                return this.consignmentReplenishmentOrderLine().ItemId;

            default: throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory lot ID of the vendor batch info record.
    /// </summary>
    /// <returns>The inventory lot ID of the vendor batch info record.</returns>
    private InventTransId inventTransId()
    {
        switch (this.SourceRefType)
        {
            case PdsVendBatchInfoSourceRefType::PurchaseOrderLine:
                return this.purchLine().InventTransId;

            case PdsVendBatchInfoSourceRefType::ConsignmentReplenishmentOrderLine:
                return this.consignmentReplenishmentOrderLine().InventTransId;

            default: throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCountryOfOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the two countries/regions of origin are the same.
    /// </summary>
    /// <returns>
    /// true, if not the same country/region; otherwise false.
    /// </returns>
    public boolean checkCountryOfOrigin()
    {
        boolean ret = true;

        if (this.CountryOfOrigin1 && this.CountryOfOrigin2)
        {
            if (this.CountryOfOrigin1 == this.CountryOfOrigin2)
            {
                ret = checkFailed("@PDS1356");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUseVendBatchDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the vendor batch date may be used.
    /// </summary>
    /// <returns>
    /// True, if allowed; otherwise false.
    /// </returns>
    public boolean checkUseVendBatchDate()
    {
        boolean ret = true;

        if (this.UseVendBatchDate
            && this.VendBatchDate == dateNull())
        {
            ret = checkFailed("@PRO2231");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUseVendBatchExp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the vendor batch expiration date may be used.
    /// </summary>
    /// <returns>
    /// True, if allowed; otherwise false.
    /// </returns>
    public boolean checkUseVendBatchExp()
    {
        boolean ret = true;

        if (this.UseVendBatchExp
            && this.VendExpiryDate == dateNull())
        {
            ret = checkFailed("@PDS1352");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendBatchDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the vendor batch date is valid.
    /// </summary>
    /// <returns>
    /// True if the vendor batch date is less than equal to today's date; otherwise false.
    /// </returns>
    public boolean checkVendBatchDate()
    {
        boolean ret = true;

        if (this.VendBatchDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            ret = checkFailed("@PRO2230");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the vendor batch expiration date is a valid date.
    /// </summary>
    /// <returns>
    /// true, if the vendor expiration date is greater than the vendor batch date; otherwise false.
    /// </returns>
    public boolean checkVendExpiryDate()
    {
        return InventBatch::checkVendorExpiryDate(this.VendExpiryDate, this.VendBatchDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a <c>PdsVendBatchInfo</c> record with values based on <c>PurchParmLine</c> record.
    /// </summary>
    /// <param name="_parmLine">
    /// A record of the table <c>PurchParmLine</c>.
    /// </param>
    public void initFromParmLine(PurchParmLine _parmLine)
    {
        this.VendBatchDate           = _parmLine.PdsVendBatchDate;
        this.UseVendBatchDate        = _parmLine.PdsUseVendBatchDate;
        this.VendExpiryDate          = _parmLine.PdsVendExpiryDate;
        this.UseVendBatchExp         = _parmLine.PdsUseVendBatchExp;
        this.CountryOfOrigin1        = _parmLine.PdsCountryOfOrigin1;
        this.CountryOfOrigin2        = _parmLine.PdsCountryOfOrigin2;
        this.VendBatchId             = _parmLine.PdsVendBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromConsignmentDraftReplenishmentOrderJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a <c>PdsVendBatchInfo</c> record with values based on <c>ConsignmentDraftReplenishmentOrderJournalLine</c> record.
    /// </summary>
    /// <param name="_consignmentDraftReplenishmentOrderJournalLine">
    /// A record of the table <c>ConsignmentDraftReplenishmentOrderJournalLine</c>.
    /// </param>
    public void initFromConsignmentDraftReplenishmentOrderJournalLine(ConsignmentDraftReplenishmentOrderJournalLine _consignmentDraftReplenishmentOrderJournalLine)
    {
        this.VendBatchDate           = _consignmentDraftReplenishmentOrderJournalLine.PdsVendBatchDate;
        this.UseVendBatchDate        = _consignmentDraftReplenishmentOrderJournalLine.PdsUseVendBatchDate;
        this.VendExpiryDate          = _consignmentDraftReplenishmentOrderJournalLine.PdsVendExpiryDate;
        this.UseVendBatchExp         = _consignmentDraftReplenishmentOrderJournalLine.PdsUseVendBatchExp;
        this.CountryOfOrigin1        = _consignmentDraftReplenishmentOrderJournalLine.PdsCountryOfOrigin1;
        this.CountryOfOrigin2        = _consignmentDraftReplenishmentOrderJournalLine.PdsCountryOfOrigin2;
        this.VendBatchId             = _consignmentDraftReplenishmentOrderJournalLine.PdsVendBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a <c>PdsVendBatchInfo</c> record with values based on <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_purchLine">
    /// A record of the table <c>PurchLine</c>.
    /// </param>
    public void initFromPurchLine(PurchLine _purchLine)
    {
        this.SourceRef = _purchLine.RecId;
        this.SourceRefType = PdsVendBatchInfoSourceRefType::PurchaseOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromConsignmentReplenishmentOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a <c>PdsVendBatchInfo</c> record with values based on <c>ConsignmentReplenishmentOrderLine</c> record.
    /// </summary>
    /// <param name="_consignmentReplenishmentOrderLine">
    /// A record of the table <c>ConsignmentReplenishmentOrderLine</c>.
    /// </param>
    public void initFromConsignmentReplenishmentOrderLine(ConsignmentReplenishmentOrderLine _consignmentReplenishmentOrderLine)
    {
        this.SourceRef = _consignmentReplenishmentOrderLine.RecId;
        this.SourceRefType = PdsVendBatchInfoSourceRefType::ConsignmentReplenishmentOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendorBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the record based on another record of the <c>PdsVendBatchInfo</c> table.
    /// </summary>
    /// <param name="_vendBatchInfo">
    ///     The record to initialize from.
    /// </param>
    public void initFromVendorBatchInfo(PdsVendBatchInfo _vendBatchInfo)
    {
        this.SourceRef          = _vendBatchInfo.SourceRef;
        this.SourceRefType      = _vendBatchInfo.SourceRefType;
        this.VendBatchId        = _vendBatchInfo.VendBatchId;
        this.VendBatchDate      = _vendBatchInfo.VendBatchDate;
        this.UseVendBatchDate   = _vendBatchInfo.UseVendBatchDate;
        this.VendExpiryDate     = _vendBatchInfo.VendExpiryDate;
        this.UseVendBatchExp    = _vendBatchInfo.UseVendBatchExp;
        this.CountryOfOrigin1   = _vendBatchInfo.CountryOfOrigin1;
        this.CountryOfOrigin2   = _vendBatchInfo.CountryOfOrigin2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNullOrEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the current buffer is empty or null.
    /// </summary>
    /// <returns>
    ///     true if the buffer has any valid data.
    /// </returns>
    public boolean isNullOrEmpty()
    {
        if (    this.CountryOfOrigin1
            ||  this.CountryOfOrigin2
            ||  this.VendBatchDate
            ||  this.VendBatchId
            ||  this.VendExpiryDate
            ||  this.UseVendBatchDate
            ||  this.UseVendBatchExp)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCascadeDetailsToBatchesCreatedForItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the current vendor batch info must be set on created inventory batches.
    /// </summary>
    /// <param name="_itemId">The item number associated to the batch info.</param>
    /// <returns>true if the vendor batch info must be set; otherwise, false.</returns>
    public boolean mustCascadeDetailsToBatchesCreatedForItem(ItemId _itemId)
    {
        if (_itemId)
        {
            return !PdsVendBatchInfo::purchaseRegistration(_itemId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PurchLine</c> table record that is related to the current record.
    /// </summary>
    /// <returns>
    ///    The <c>PurchLine</c> record; otherwise an empty table buffer.
    /// </returns>
    public PurchLine purchLine()
    {
        PurchLine   purchLine;

        if (this.SourceRefType == PdsVendBatchInfoSourceRefType::PurchaseOrderLine
            && this.SourceRef)
        {
            purchLine = PurchLine::findRecId(this.SourceRef);
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consignmentReplenishmentOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>ConsignmentReplenishmentOrderLine</c> table record that is related to the current record.
    /// </summary>
    /// <returns>
    ///    The <c>ConsignmentReplenishmentOrderLine</c> record; otherwise an empty table buffer.
    /// </returns>
    public ConsignmentReplenishmentOrderLine consignmentReplenishmentOrderLine()
    {
        ConsignmentReplenishmentOrderLine   consignmentReplenishmentOrderLine;

        if (this.SourceRefType == PdsVendBatchInfoSourceRefType::ConsignmentReplenishmentOrderLine
            && this.SourceRef)
        {
            consignmentReplenishmentOrderLine = ConsignmentReplenishmentOrderLine::find(this.SourceRef);
        }

        return consignmentReplenishmentOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldPName(PdsVendBatchInfo, VendBatchDate)  :
                    if (this.orig().VendBatchDate != this.VendBatchDate)
                    {
                        ret = this.checkVendBatchDate();
                    }
                    break;

                case fieldPName(PdsVendBatchInfo, UseVendBatchDate):
                    ret = this.checkUseVendBatchDate();
                    break;

                case fieldPName(PdsVendBatchInfo, VendExpiryDate) :
                    if (this.orig().VendExpiryDate != this.VendExpiryDate)
                    {
                        ret = this.checkVendExpiryDate();
                    }
                    break;

                case fieldPName(PdsVendBatchInfo, UseVendBatchExp):
                    ret = this.checkUseVendBatchExp();
                    break;

                case fieldPName(PdsVendBatchInfo, CountryOfOrigin1):
                //Fall through
                case fieldPName(PdsVendBatchInfo, CountryOfOrigin2):
                    ret = this.checkCountryOfOrigin();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified record in the <c>PdsVendBatchInfo</c> table exist.
    /// </summary>
    /// <param name="_recId">
    /// A record identifier of the record to find.
    /// </param>
    /// <returns>
    /// True or false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return (select firstonly pdsVendBatchInfo
                        where pdsVendBatchInfo.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PdsVendBatchInfo</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     A record identifier of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to select the returned record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>PdsVendBatchInfo</c> record if one exists; otherwise an empty record.
    /// </returns>
    public static PdsVendBatchInfo find(
        RecId       _recId,
        boolean     _forUpdate = false)
    {
        PdsVendBatchInfo    pdsVendBatchInfo;

        pdsVendBatchInfo.selectForUpdate(_forUpdate);

        select firstonly pdsVendBatchInfo
            where pdsVendBatchInfo.RecId == _recId;

        return pdsVendBatchInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record reference in the <c>PdsVendBatchInfo</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///     A record identifier of a <c>PurchLine</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to select the returned record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>PdsVendBatchInfo</c> record if one exists; otherwise an empty record.
    /// </returns>
    [SysObsolete('Use PdsVendBatchInfo.findBySourceRecId instead.', false, 31\05\2017)]
    public static PdsVendBatchInfo findByRefRecId(
        RecId       _refRecId,
        boolean     _forUpdate = false)
    {
        return PdsVendBatchInfo::findBySourceRecId(PdsVendBatchInfoSourceRefType::PurchaseOrderLine, _refRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record reference in the <c>PdsVendBatchInfo</c> table.
    /// </summary>
    /// <param name="_sourceType">The type of the source record to find.</param>
    /// <param name="_sourceRecId">A record identifier of the source record to find.</param>
    /// <param name="_forUpdate">A Boolean value that indicates whether to select the returned record for update; optional.</param>
    /// <returns>A <c>PdsVendBatchInfo</c> record if one exists; otherwise an empty record.</returns>
    public static PdsVendBatchInfo findBySourceRecId(
        PdsVendBatchInfoSourceRefType   _sourceType,
        RecId                           _sourceRecId,
        boolean                         _forUpdate = false)
    {
        PdsVendBatchInfo    pdsVendBatchInfo;

        pdsVendBatchInfo.selectForUpdate(_forUpdate);

        select firstonly pdsVendBatchInfo
            where pdsVendBatchInfo.SourceRefType    == _sourceType
               && pdsVendBatchInfo.SourceRef        == _sourceRecId;

        return pdsVendBatchInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if vendor batch purchase registration is activated for a given item.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID to check.
    /// </param>
    /// <returns>
    ///    true if vendor batch purchase registration is activated; otherwise, false.
    /// </returns>
    public static boolean purchaseRegistration(ItemId _itemId)
    {
        InventModelGroup    inventModelGroup;
        boolean             result = false;

        if (   _itemId
            && #PdsVendBatchEnabled)
        {
            inventModelGroup = InventModelGroupItem::modelGroupByItemIdLegalEntity(_itemId);
            result           = inventModelGroup.PdsReqVendBatchDetail == NoYes::Yes;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsVendBatch</ConfigurationKey>
	<DeveloperDocumentation>@PDS1477</DeveloperDocumentation>
	<FormRef>PdsVendBatchInfo</FormRef>
	<Label>@PDS1476</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>VendBatchId</TitleField1>
	<TitleField2>VendBatchDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendExpiryDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendBatchInfo</Name>
			<Label>@PDS1364</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseVendBatchExp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryOfOrigin1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryOfOrigin2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendBatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryOfOrigin1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryOfOrigin2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchInfoSource</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseVendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseVendBatchExp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchExp</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendBatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VendExpiryDate</Name>
			<ExtendedDataType>PdsVendExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceRefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsVendBatchInfoSourceRefType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceRefIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceRef</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRefType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsVendBatchInfo</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryOfOrigin1</Name>
					<SourceEDT>PdsCountryOfOrigin1</SourceEDT>
					<Field>CountryOfOrigin1</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PdsVendBatchInfo</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryOfOrigin2</Name>
					<SourceEDT>PdsCountryOfOrigin2</SourceEDT>
					<Field>CountryOfOrigin2</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRef</Name>
					<Field>SourceRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceRefType</Name>
					<Field>SourceRefType</Field>
					<ValueStr>PdsVendBatchInfoSourceRefType::PurchaseOrderLine</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ConsignmentReplenishmentOrderLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ConsignmentReplenishmentOrderLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRef</Name>
					<Field>SourceRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceRefType</Name>
					<Field>SourceRefType</Field>
					<ValueStr>PdsVendBatchInfoSourceRefType::ConsignmentReplenishmentOrderLine</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>