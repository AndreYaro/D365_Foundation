<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsolidateCurrencyConversion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerConsolidateCurrencyConversion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAccountsOverlap</Name>
				<Source><![CDATA[
    private boolean doAccountsOverlap(
        RefRecId _sourceLegalEntity,
        DimensionFromValue _fromAccountNum,
        DimensionToValue _toAccountNum,
        RecId _currentRecId)
    {
        LedgerConsolidateCurrencyConversion localLedgerConsolidateCurrencyConversion;

        //Check for scenario where the there are records with FromAccount and ToAccount are inside an existing range.
        select firstonly RecId from
                localLedgerConsolidateCurrencyConversion
            where
                localLedgerConsolidateCurrencyConversion.FromAccount >= _fromAccountNum
                && localLedgerConsolidateCurrencyConversion.ToAccount <= _toAccountNum
                && localLedgerConsolidateCurrencyConversion.SourceLegalEntity ==_sourceLegalEntity
                && localLedgerConsolidateCurrencyConversion.RecId != _currentRecId;

        if (localLedgerConsolidateCurrencyConversion.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesAccountNumExist</Name>
				<Source><![CDATA[
    private boolean doesAccountNumExist(
        RefRecId _sourceLegalEntity,
        DimensionFromValue _accountNum,
        RecId _currentRecId)
    {
        LedgerConsolidateCurrencyConversion localLedgerConsolidateCurrencyConversion;

        //Check for scenario if there are records with the account number specifined inside an existing range.
        select firstonly RecId from
                localLedgerConsolidateCurrencyConversion
            where
                localLedgerConsolidateCurrencyConversion.FromAccount <= _accountNum
                && localLedgerConsolidateCurrencyConversion.ToAccount >= _accountNum
                && localLedgerConsolidateCurrencyConversion.SourceLegalEntity ==_sourceLegalEntity
                && localLedgerConsolidateCurrencyConversion.RecId != _currentRecId;

        if (localLedgerConsolidateCurrencyConversion.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(LedgerConsolidateCurrencyConversion, ConversionDate):
                if (this.ConversionDate == LedgerConsolidateConversionDate::TransactionDate)
                {
                    this.ExchangeRate = 0.0;
                }

                break;

            case fieldnum(LedgerConsolidateCurrencyConversion, SourceLegalEntity):
                // Changing the company will affect the fields for the currency translation.
                // The fields will be cleared.
                if (this.SourceLegalEntity != this.orig().SourceLegalEntity)
                {
                    this.ExchangeRate = 0.0;
                    this.ConversionDate = LedgerConsolidateConversionDate::ConsolidationDate;
                    this.FromAccount = '';
                    this.ToAccount = '';
                    this.ExchangeRateType = 0;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConsolidateCurrencyPairs</Name>
				<Source><![CDATA[
    private boolean validateConsolidateCurrencyPairs(
        CurrencyCode _sourceCurrencyCode,
        CurrencyCode _consCurrencyCode,
        RefRecId _exchangeRateTypeId)
    {
        boolean returnValue = false;

        ExchangeRateCurrencyPair exchangeRateCurrencyPair;

        select firstonly RecId
            from
                exchangeRateCurrencyPair
            where
                ((exchangeRateCurrencyPair.FromCurrencyCode == _sourceCurrencyCode
                && exchangeRateCurrencyPair.ToCurrencyCode == _consCurrencyCode)
                ||
                (exchangeRateCurrencyPair.ToCurrencyCode == _sourceCurrencyCode
                && exchangeRateCurrencyPair.FromCurrencyCode == _consCurrencyCode))
                && exchangeRateCurrencyPair.ExchangeRateType == _exchangeRateTypeId;

        if (exchangeRateCurrencyPair.RecId)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(LedgerConsolidateCurrencyConversion, FromAccount) :
                if (this.ToAccount
                    && this.FromAccount > this.ToAccount)
                {
                    ret = checkFailed("@SYS326164");
                }

                if (ret && this.doesAccountNumExist(
                        this.SourceLegalEntity,
                        this.FromAccount,
                        this.RecId))
                {
                    ret = checkFailed(strfmt("@SYS326155", this.FromAccount));
                }

                if (!ret)
                {
                    this.ToAccount = this.orig().ToAccount;
                }

                break;

            case fieldnum(LedgerConsolidateCurrencyConversion, ToAccount) :
                if (this.FromAccount > this.ToAccount)
                {
                    ret = checkFailed(strfmt("@SYS326165", this.ToAccount));
                }

                if (ret && this.doesAccountNumExist(
                        this.SourceLegalEntity,
                        this.ToAccount,
                        this.RecId))
                {
                    ret = checkFailed(strfmt("@SYS326155", this.ToAccount));
                }

                if (!ret)
                {
                    this.ToAccount = this.orig().ToAccount;
                }

                break;

            case fieldnum(LedgerConsolidateCurrencyConversion, ExchangeRateType) :
                if (ret && this.ExchangeRateType
                    && !this.validateConsolidateCurrencyPairs(
                        Ledger::accountingCurrency(this.SourceLegalEntity),
                        Ledger::accountingCurrency(),
                        this.ExchangeRateType))
                {
                    // An exchange rate does not exist between the accounting currency of the source company and the accounting currency of the consolidation company.
                    ret = checkFailed("@SYS326635");
                    this.ExchangeRateType = this.orig().ExchangeRateType;
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        // Verify a case if there is a record that does not have ToAccount range specified,
        // and a new record is inserted where a user does not specify the ToAccount range either.
        if (ret && this.doAccountsOverlap(this.SourceLegalEntity, this.FromAccount, this.ToAccount, this.RecId))
        {
            //The account range %1..%2 overlaps with an existing account range for the source company.
            ret = checkFailed(strfmt("@SYS326632", this.FromAccount, this.ToAccount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record ID in the <c>LedgerConsolidateCurrencyConversion</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The unique record ID to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The <c>ConcurrencyModel</c> enumeration value; optional. The default value is the
    /// <c>ConcurrencyModel::Auto</c> enumeration value.
    /// </param>
    /// <returns>
    /// A buffer that contains the <c>LedgerConsolidateCurrencyConversion</c> table.
    /// </returns>
    public static LedgerConsolidateCurrencyConversion find(
        RecId               _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerConsolidateCurrencyConversion ledgerConsolidateCurrencyConversion;

        ledgerConsolidateCurrencyConversion.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerConsolidateCurrencyConversion.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerConsolidateCurrencyConversion
            where ledgerConsolidateCurrencyConversion.RecId == _recId;

        return ledgerConsolidateCurrencyConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets or gets the exchange rate.
    /// </summary>
    /// <param name = "_set">
    ///   A Boolean value that determines whether to get or set the exchange rate.
    /// </param>
    /// <param name = "_exchRate">
    ///   The value of the exchange rate to be set.
    /// </param>
    /// <returns>
    ///   The exchange rate.
    /// </returns>
    public edit ExchRate editExchRate(boolean _set, ExchRate _exchRate)
    {
        ExchRate            exchRate = _exchRate;
        ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
            Ledger::current(),
            Ledger::accountingCurrency(this.SourceLegalEntity),
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        exchangeRateHelper.parmExchangeRateTypeRecId(this.ExchangeRateType);

        if (_set)
        {
            this.ExchangeRate = exchangeRateHelper.prepareExchangeRateForStorage(exchRate);
        }
        else
        {
            exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchangeRate);
        }

        return exchRate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS326634</DeveloperDocumentation>
	<Label>@SYS326633</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SourceLegalEntity</TitleField1>
	<TitleField2>FromAccount</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Ledger</Modules>
	<ReplacementKey>LegalEntityFromTo</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Accounts</Name>
			<Label>@SYS326863</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RateType</Name>
			<Label>@SYS326168</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExchangeRateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConversionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConversionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerConsolidateConversionDate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchangeRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyExchangeRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExchangeRateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS326162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionFromValue</ExtendedDataType>
			<Label>@SYS326158</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceLegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS107834</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionToValue</ExtendedDataType>
			<Label>@SYS326160</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LegalEntityFromTo</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceLegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExchangeRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ExchangeRateType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ExchangeRateType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerConsolidateCurrencyConversion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExchangeRateType</Name>
					<Field>ExchangeRateType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceLegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerConsolidateCurrencyConversion</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceLegalEntity</Name>
					<Field>SourceLegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>