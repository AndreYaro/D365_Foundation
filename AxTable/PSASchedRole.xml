<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSASchedRole</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSASchedRole extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRoleById</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create a role.
    /// </summary>
    /// <param name="_roleId">
    /// The role id.
    /// </param>
    /// <param name="_roleDesc">
    /// The role description.
    /// </param>
    /// <returns>
    /// Role definition record.
    /// </returns>
    public static PSASchedRole createRoleById(
        PSASchedRoleId  _roleId,
        Description     _roleDesc = "")
    {
        PSASchedRole    psaSchedRole;

        ttsbegin;

        psaSchedRole.RoleId = _roleId;
        psaSchedRole.Description = _roleDesc;
        psaSchedRole.insert();

        ttscommit;

        return psaSchedRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PSASchedRole</c> record.
    /// </summary>
    /// <param name="_recId">
    /// The recid of the <c>PSASchedRole</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// True if selecting for update.
    /// </param>
    /// <returns>
    /// The <c>PSASchedRole</c> with the passed in recId.
    /// </returns>
    public static PSASchedRole find(
        RefRecId    _recId,
        boolean     _forUpdate = false)
    {
        PSASchedRole psaSchedRole;

        psaSchedRole.selectForUpdate(_forUpdate);

        select firstonly psaSchedRole
            where psaSchedRole.RecId == _recId;

        return psaSchedRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PSASchedRole</c> record.
    /// </summary>
    /// <param name="_roleId">
    /// The id for the role to be retrieved.
    /// </param>
    /// <param name="_forUpdate">
    /// True if selecting for update.
    /// </param>
    /// <returns>
    /// The <c>PSASchedRole</c> with the passed in id.
    /// </returns>
    public static PSASchedRole findById(
        PSASchedRoleId  _roleId,
        boolean         _forUpdate = false)
    {
        PSASchedRole psaSchedRole;

        psaSchedRole.selectForUpdate(_forUpdate);

        select firstonly psaSchedRole
            where psaSchedRole.RoleId == _roleId;

        return psaSchedRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTeamMemberRoleDelegate</Name>
				<Source><![CDATA[
    static delegate void findOrCreateTeamMemberRoleDelegate(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTeamMemberRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default team member role if it does not present.
    /// </summary>
    /// <returns>
    /// The team member default role.
    /// </returns>
    public static PSASchedRole findOrCreateTeamMemberRole()
    {
        EventHandlerResult result = new EventHandlerResult();
        PSASchedRole::findOrCreateTeamMemberRoleDelegate(result);
        return result.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate role Id cannot be equal to "Any role".
    /// </summary>
    /// <returns>False if role id equal to "Any role", other wise true.</returns>
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.RoleId == "@Res:AnyRole")
            {
                ret = checkFailed(strFmt("@Res:RoleIdValidation", "@Res:AnyRole"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsDefaultRoleDelegate</Name>
				<Source><![CDATA[
    static delegate void existsDefaultRoleDelegate(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsDefaultRole</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks for default role.
    /// </summary>
    /// <returns>
    /// True if default role exists otherwise false.
    /// </returns>
    public static boolean existsDefaultRole()
    {
        EventHandlerResult result = new EventHandlerResult();
        PSASchedRole::existsDefaultRoleDelegate(result);
        return result.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultRoleDelegate</Name>
				<Source><![CDATA[
    static delegate void updateDefaultRoleDelegate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating other role with default role to false when modifying current role as default.
    /// </summary>
    public static void updateDefaultRole()
    {
        PSASchedRole::updateDefaultRoleDelegate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@PSA10769</DeveloperDocumentation>
	<FormRef>ResResourceCategoryMenuItem</FormRef>
	<Label>@PSA1206</Label>
	<TitleField1>RoleId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RoleIdIdx</ClusteredIndex>
	<Modules>Project</Modules>
	<PrimaryIndex>RoleIdIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>HcmPersonProjectRole</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>HcmPersonProjectRole</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>PSAActivitySetup</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>PSAProjSchedRole</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoleId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSASchedRoleId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Disable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Res:DisableResourceCategory</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>FalseTrue</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RoleIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RoleId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>