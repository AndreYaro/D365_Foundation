<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRateBaseTypeField</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSRateBaseTypeField extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNextSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next sequence for a <c>TMSRateBaseTypeField</c> record.
    /// </summary>
    /// <param name="_rateBaseTypeCode">
    /// Rate base type code of the field records.
    /// </param>
    /// <param name="_fieldType">
    /// Field type of the field records.
    /// </param>
    /// <returns>
    /// The next sequence to be set to a <c>TMSRateBaseTypeField</c> record.
    /// </returns>
    TMSSequence getNextSequence(TMSRateBaseTypeCode _rateBaseTypeCode, TMSFieldType _fieldType)
    {
        TMSRateBaseTypeField    tmsRateBaseTypeField;

        return (select firstonly Sequence from tmsRateBaseTypeField
                    order by Sequence desc
                    where tmsRateBaseTypeField.RateBaseTypeCode  == _rateBaseTypeCode &&
                          tmsRateBaseTypeField.FieldType         == _fieldType).Sequence + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return super() && this.validateField(fieldNum(TMSRateBaseTypeField, Sequence));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);
    
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(TMSRateBaseTypeField, Sequence):
                    const int MaximumNumberOfParametersAllowed = 6;
                    if (this.Sequence > MaximumNumberOfParametersAllowed)
                    {
                        ret = checkFailed(strfmt("@TRX241", MaximumNumberOfParametersAllowed));
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Sequence = this.getNextSequence(this.RateBaseTypeCode, this.FieldType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCountryRegion</Name>
				<Source><![CDATA[
    private void lookupCountryRegion(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup        = SysTableLookup::newParameters(tableNum(LogisticsAddressCountryRegion), _ctrl);
        Query                query                 = new Query();
        QueryBuildDataSource queryBuildDataSource  = query.addDataSource(tableNum(LogisticsAddressCountryRegion));

        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCountryRegion, CountryRegionId));
        sysTableLookup.addLookupMethod(literalStr(displayName));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLTLClass</Name>
				<Source><![CDATA[
    private void lookupLTLClass(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup       = SysTableLookup::newParameters(tableNum(WHSLTLClass), _ctrl);
        Query                query                = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(WHSLTLClass));

        sysTableLookup.addLookupfield(fieldNum(WHSLTLClass, ltlClassCode));
        sysTableLookup.addLookupfield(fieldNum(WHSLTLClass, Name));
        sysTableLookup.addLookupfield(fieldNum(WHSLTLClass, Class));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPostalCode</Name>
				<Source><![CDATA[
    private void lookupPostalCode(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup       = SysTableLookup::newParameters(tableNum(LogisticsAddressZipCode), _ctrl);
        Query                query                = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(LogisticsAddressZipCode));

        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressZipCode, ZipCode));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressZipCode, City));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressZipCode, State));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressZipCode, CountryRegionId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupService</Name>
				<Source><![CDATA[
    private void lookupService(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup        = SysTableLookup::newParameters(tableNum(TMSCarrierService), _ctrl);
        Query                query                 = new Query();
        QueryBuildDataSource queryBuildDataSource  = query.addDataSource(tableNum(TMSCarrierService));
        queryBuildDataSource.addGroupByField(fieldNum(TMSCarrierService, CarrierServiceCode));

        sysTableLookup.addLookupfield(fieldNum(TMSCarrierService, CarrierServiceCode));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupState</Name>
				<Source><![CDATA[
    private void lookupState(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup        = SysTableLookup::newParameters(tableNum(LogisticsAddressState), _ctrl);
        Query                query                 = new Query();
        QueryBuildDataSource queryBuildDataSource  = query.addDataSource(tableNum(LogisticsAddressState));

        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressState, StateId));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressState, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCity</Name>
				<Source><![CDATA[
    private void lookupCity(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup       = SysTableLookup::newParameters(tableNum(LogisticsAddressCity), _ctrl);
        Query                query                = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(LogisticsAddressCity));

        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCity, Name));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCity, Description));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCity, StateId));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCity, CountyId));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCity, CountryRegionId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCounty</Name>
				<Source><![CDATA[
    private void lookupCounty(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup       = SysTableLookup::newParameters(tableNum(LogisticsAddressCounty), _ctrl);
        Query                query                = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(LogisticsAddressCounty));

        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCounty, CountyId));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCounty, Name));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCounty, CountryRegionId));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCounty, StateId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDistrict</Name>
				<Source><![CDATA[
    private void lookupDistrict(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup       = SysTableLookup::newParameters(tableNum(LogisticsAddressDistrict), _ctrl);
        Query                query                = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(LogisticsAddressDistrict));

        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressDistrict, Name));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressDistrict, Description));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressDistrict, City));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressDistrict, StateId_RU));
        sysTableLookup.addLookupfield(fieldNum(LogisticsAddressDistrict, CountryRegionId_RU));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSTCC</Name>
				<Source><![CDATA[
    private void lookupSTCC(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup        = SysTableLookup::newParameters(tableNum(WHSSTCC), _ctrl);
        Query                query                 = new Query();
        QueryBuildDataSource queryBuildDataSource  = query.addDataSource(tableNum(WHSSTCC));

        sysTableLookup.addLookupfield(fieldNum(WHSSTCC, stccCode));
        sysTableLookup.addLookupfield(fieldNum(WHSSTCC, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsRateBaseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TMSRateBaseType</c> record using current rate base type code.
    /// </summary>
    /// <returns>
    /// The header <c>TMSRateBaseType</c> record.
    /// </returns>
    TMSRateBaseType tmsRateBaseType()
    {
        return TMSRateBaseType::find(this.RateBaseTypeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>tmsRateBaseTypeField</c> record exists.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return (_recId) &&
               (select firstonly tmsRateBaseTypeField
                    where tmsRateBaseTypeField.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSRateBaseTypeField</c> record by id.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSRateBaseTypeField find(RecId   _recId,
                                            boolean _forupdate = false)
    {
        TMSRateBaseTypeField    tmsRateBaseTypeField;

        if (_recId)
        {
            tmsRateBaseTypeField.selectForUpdate(_forupdate);

            select firstonly tmsRateBaseTypeField
                where tmsRateBaseTypeField.RecId == _recId;
        }

        return tmsRateBaseTypeField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCodeSequenceAndFieldType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSRateBaseTypeField</c> record by its code, sequence and field type.
    /// </summary>
    /// <param name="_tmsRateBaseTypeCode">
    /// Rate base type code of the record.
    /// </param>
    /// <param name="_tmsSequence">
    /// Sequence of the record.
    /// </param>
    /// <param name="_tmsFieldType">
    /// Field type of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSRateBaseTypeField findByCodeSequenceAndFieldType(TMSRateBaseTypeCode _tmsRateBaseTypeCode,
                                                                      TMSSequence         _tmsSequence,
                                                                      TMSFieldType        _tmsFieldType,
                                                                      boolean             _forupdate = false)
    {
        TMSRateBaseTypeField    tmsRateBaseTypeField;

        if (_tmsRateBaseTypeCode &&
            _tmsSequence)
        {
            tmsRateBaseTypeField.selectForUpdate(_forupdate);

            select firstonly tmsRateBaseTypeField
                where tmsRateBaseTypeField.RateBaseTypeCode == _tmsRateBaseTypeCode &&
                      tmsRateBaseTypeField.Sequence         == _tmsSequence         &&
                      tmsRateBaseTypeField.FieldType        == _tmsFieldType;
        }

        return tmsRateBaseTypeField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds which lookup to perform.
    /// </summary>
    /// <param name="_ctrl">
    /// Form control that lookup belongs to.
    /// </param>
    /// <param name="_lookup">
    /// Type of the lookup that will decide which lookup to perform.
    /// </param>
    /// <returns>
    /// False if the lookup type is unknown.
    /// </returns>
    /// <remarks>
    /// Add a post-method handler for returning the right value when extending the <c>TMSLookupType</c> enumeration.
    /// </remarks>
    public static boolean findLookup(FormStringControl _ctrl, TMSLookupType _lookup)
    {
        boolean                 ret = true;
        TMSRateBaseTypeField    rateBaseTypeField;

        switch (_lookup)
        {
            case TMSLookupType::LTLClass:
                rateBaseTypeField.lookupLTLClass(_ctrl);
                break;

            case TMSLookupType::State:
                rateBaseTypeField.lookupState(_ctrl);
                break;

            case TMSLookupType::Country:
                rateBaseTypeField.lookupCountryRegion(_ctrl);
                break;

            case TMSLookupType::PostalCode:
                rateBaseTypeField.lookupPostalCode(_ctrl);
                break;

            case TMSLookupType::STCC:
                rateBaseTypeField.lookupSTCC(_ctrl);
                break;

            case TMSLookupType::CarrierService:
                rateBaseTypeField.lookupService(_ctrl);
                break;

            case TMSLookupType::City:
                rateBaseTypeField.lookupCity(_ctrl);
                break;

            case TMSLookupType::County:
                rateBaseTypeField.lookupCounty(_ctrl);
                break;

            case TMSLookupType::District:
                rateBaseTypeField.lookupDistrict(_ctrl);
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRateBaseType</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Generates a lookup based on rate type.
    /// </summary>
    /// <param name="_ctrl">
    /// Form control
    /// </param>
    /// <param name="_rateBaseTypeCode">
    /// Rate base type code.
    /// </param>
    /// <param name="_fieldType">
    /// Field type.
    /// </param>
    /// <param name="_pos">
    /// Position.
    /// </param>
    /// <returns>
    /// Boolean indicating if lookup was found.
    /// </returns>
    public static boolean lookupRateBaseType(
        FormStringControl   _ctrl,
        TMSRateBaseTypeCode _rateBaseTypeCode,
        TMSFieldType        _fieldType,
        int                 _pos)
    {
        return TMSRateBaseTypeField::findLookup(_ctrl, TMSTmpRateBaseDetail::findRateLookupType(_rateBaseTypeCode, _fieldType, _pos));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1942</DeveloperDocumentation>
	<Label>@TRX100</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>RateBaseTypeCode</TitleField1>
	<TitleField2>Sequence</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>RateBaseTypeCodeFieldTypeSequenceIdx</PrimaryIndex>
	<ReplacementKey>RateBaseTypeCodeFieldTypeSequenceIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LookupType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mandatory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LookupType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mandatory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSDataType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FieldType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSFieldType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LookupType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSLookupType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Mandatory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSMandatory</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RateBaseTypeCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRateBaseTypeCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSSequence</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RateBaseTypeCodeFieldTypeSequenceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RateBaseTypeCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FieldType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Sequence</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TMSRateBaseType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TMSRateBaseType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RateBaseTypeCode</Name>
					<SourceEDT>TMSRateBaseTypeCode</SourceEDT>
					<Field>RateBaseTypeCode</Field>
					<RelatedField>RateBaseTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>