<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberPeriod_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class NumberPeriod_CN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
    {
        if (_recId && !NumberPeriod_CN::exist(_recId))
        {
            return checkFailed(strfmt(NumberPeriod_CN::txtNotExist(), _recId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRestartNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the restart number is equal to the number sequence table RecId.
    /// </summary>
    /// <param name="_numberSequenceTableRecId">
    /// The number sequence table RecId.
    /// </param>
    /// <returns>
    /// Returns true if the check is succeed.
    /// </returns>
    public static boolean checkRestartNum(RefRecId  _numberSequenceTableRecId)
    {
        NumberSequenceTable     numberSequenceTable;
        NumberSequenceTable_CN  numberSequenceTableCN;

        numberSequenceTable = NumberSequenceTable::find(_numberSequenceTableRecId);
        numberSequenceTableCN = NumberSequenceTable_CN::findByNumberSequenceTable(_numberSequenceTableRecId);
        if (numberSequenceTable.RecId && numberSequenceTableCN.RestartNum)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the instance of the <c>NumberPeriod_CN</c> class exist.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <returns>
    /// Returns true if the instacne of the <c>NumberPeriod_CN</c> class exist.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
            (select firstonly numberPeriod_CN
                where numberPeriod_CN.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the instance of the <c>NumberPeriod_CN</c> class by RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <param name="_forupdate">
    /// True if the record will be update.
    /// </param>
    /// <returns>
    /// The instance of the <c>NumberPeriod_CN</c> class.
    /// </returns>
    public static NumberPeriod_CN find(
        RecId   _recId,
        boolean _forupdate = false)
    {
        NumberPeriod_CN numberPeriod;

        numberPeriod.selectForUpdate(_forupdate);

        if (_recId)
        {
            select firstonly numberPeriod
                where numberPeriod.RecId == _recId;
        }

        return numberPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the instance of the <c>NumberPeriod_CN</c> class by natural key.
    /// </summary>
    /// <param name="_numberSequenceTableRecId">
    /// The number sequence table RecId.
    /// </param>
    /// <param name="_periodStart">
    /// The period start number.
    /// </param>
    /// <param name="_periodCode">
    /// The period code.
    /// </param>
    /// <param name="_forupdate">
    /// True if the record will be update.
    /// </param>
    /// <param name="_userConnection">
    /// The user connection.
    /// </param>
    /// <returns>
    /// The instance of the <c>NumberPeriod_CN</c> class.
    /// </returns>
    public static NumberPeriod_CN findByNaturalKey(
        RefRecId            _numberSequenceTableRecId,
        FiscalPeriodStart   _periodStart,
        FiscalPeriodType    _periodCode = FiscalPeriodType::Operating,
        boolean             _forupdate = false,
        UserConnection      _userConnection = null)
    {
        NumberPeriod_CN     numberPeriod;

        numberPeriod.selectForUpdate(_forupdate);

        NumberPeriod_CN::trySetSeparateConnection(numberPeriod, _userConnection);

        if (_numberSequenceTableRecId && _periodStart)
        {
            select firstonly numberPeriod
                where numberPeriod.NumberSequenceTable  == _numberSequenceTableRecId
                   && numberPeriod.PeriodStart          == _periodStart
                   && numberPeriod.PeriodCode           == _periodCode
                   && numberPeriod.Status               == VoucherStatus_CN::Next;
        }
        return numberPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDeletedSmallerNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the NumberPeriod_CN table.
    /// </summary>
    /// <param name="_numberSequenceTableRecId">
    /// The record ID of the NumberSequenceTable record.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_periodCode">
    /// Period Code; optional
    /// </param>
    /// <param name="_userConnection">
    /// The user connection.
    /// </param>
    /// <returns>
    /// A record in the NumberPeriod_CN table; otherwise, an empty record.
    /// </returns>
    public static NumberPeriod_CN findDeletedSmallerNumber(
        RefRecId          _numberSequenceTableRecId,
        TransDate         _transDate,
        boolean           _forUpdate  = false,
        FiscalPeriodType  _periodCode = FiscalPeriodType::Operating,
        UserConnection    _userConnection = null)
    {
        NumberPeriod_CN     numberPeriod;
        FiscalPeriodStart   fiscalPeriodStart;
        FiscalCalendarRecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        NumberPeriod_CN::trySetSeparateConnection(numberPeriod, _userConnection);

        fiscalPeriodStart = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(fiscalCalendarRecId, _transDate, _periodCode).StartDate;

        numberPeriod.selectForUpdate(_forUpdate);

        select firstonly numberPeriod
            order by NextRec asc
            where numberPeriod.NumberSequenceTable == _numberSequenceTableRecId
               && numberPeriod.PeriodStart         == fiscalPeriodStart
               && numberPeriod.PeriodCode          == _periodCode
               && numberPeriod.Status              == VoucherStatus_CN::Deleted;

        return numberPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds number information.
    /// </summary>
    /// <param name="_numberSequenceTableRecId">
    /// The number sequence table RecId.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_nextRec">
    /// The number sequence range of the record.
    /// </param>
    /// <param name="_status">
    /// The status information.
    /// </param>
    /// <param name="_forupdate">
    /// True if the record will be update.
    /// </param>
    /// <param name="_periodCode">
    /// The period code information.
    /// </param>
    /// <param name="_userConnection">
    /// The user connection.
    /// </param>
    /// <returns>
    /// The instance of the <c>NumberPeriod_CN</c> class.
    /// </returns>
    public static NumberPeriod_CN findNum(
        RefRecId            _numberSequenceTableRecId,
        TransDate           _transDate,
        NumberSequenceRange _nextRec,
        VoucherStatus_CN    _status,
        boolean             _forupdate  = false,
        FiscalPeriodType    _periodCode = FiscalPeriodType::Operating,
        UserConnection      _userConnection = null)
    {
        NumberPeriod_CN         numberPeriod;
        FiscalCalendarRecId     fiscalCalendarRecId  = CompanyInfoHelper::fiscalCalendarRecId();

        FiscalCalendarPeriod    fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(fiscalCalendarRecId, _transDate, _periodCode);

        NumberPeriod_CN::trySetSeparateConnection(numberPeriod, _userConnection);

        numberPeriod.selectForUpdate(_forupdate);

        if (_numberSequenceTableRecId
            && _transDate
            && _nextRec)
        {
            select firstonly numberPeriod
                where numberPeriod.NumberSequenceTable  == _numberSequenceTableRecId
                && numberPeriod.PeriodStart          == fiscalCalendarPeriod.StartDate
                && numberPeriod.PeriodCode           == fiscalCalendarPeriod.Type
                && numberPeriod.NextRec              == _nextRec
                && numberPeriod.Status               == _status;
        }

        return numberPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds number sequence information.
    /// </summary>
    /// <param name="_numberSequenceTableRecId">
    /// The number sequence table RecId.
    /// </param>
    /// <param name="_forupdate">
    /// True if the record will be update.
    /// </param>
    /// <returns>
    /// The instance of the <c>NumberPeriod_CN</c> class.
    /// </returns>
    public static NumberPeriod_CN findNumberSeq(
        RefRecId            _numberSequenceTableRecId,
        boolean             _forupdate = false)
    {
        NumberPeriod_CN     numberPeriod;

        numberPeriod.selectForUpdate(_forupdate);
        if (_numberSequenceTableRecId)
        {
            select firstonly numberPeriod
                where numberPeriod.NumberSequenceTable  == _numberSequenceTableRecId
                   && numberPeriod.Status               == VoucherStatus_CN::Next;
        }
        return numberPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        // A record with RecId %1 does not exist
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>trySetSeparateConnection</Name>
				<Source><![CDATA[
    private static void trySetSeparateConnection(NumberPeriod_CN _numberPeriod, UserConnection _userConnection)
    {
        NumberPeriodContext_CN context = NumberPeriodContext_CN::current();

        if (context && context.parmNumberSequenceConnection())
        {
            context.parmNumberSequenceConnection().setConnection(_numberPeriod);
        }
        else if (_userConnection)
        {
            _numberPeriod.setConnection(_userConnection);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>CN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63178</DeveloperDocumentation>
	<Label>@GLS54468</Label>
	<TitleField1>NumberSequenceTable</TitleField1>
	<TitleField2>PeriodStart</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>NumSeqPeriodIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>NumSeqPeriodIdx</ReplacementKey>
	<TableContents>BaseDefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextRec</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextRec</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextRec</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NextRec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NextRec</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>NumberSequenceRange</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumberSequenceTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FiscalPeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodStart</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalPeriodStart</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>VoucherStatus_CN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumSeqPeriodIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodStart</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>NextRec</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>NumberPeriod_CN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceTable</Name>
					<Field>NumberSequenceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>