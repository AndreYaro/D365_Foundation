<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxUncommittedExtensionTH</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxUncommittedExtensionTH extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method copies all of the fields from TmpTaxWorkTrans (in-memory table) to <c>TaxUncommitted_TH</c>.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    ///    The buffer for TmpTaxWorkTrans which has the record to be copied.
    /// </param>
    public void initFromTmpTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        this.TaxUnrealizedRefRecId = _tmpTaxWorkTrans.TaxUnrealizedRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret= true;

        if (this.TaxUncommitted)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates the <c>TaxUncommitted_TH</c> records for India.
    /// </summary>
    /// <param name="_taxCalculation">
    ///   The instance of the tax calculation class used to calculate taxes.
    /// </param>
    /// <param name="_skipNotExistsCheck">
    ///   true if the calling code has verified already that no tax uncommitted records exist and the query
    ///   to find them can be skipped; otherwise, false.
    /// </param>
    public static void createTaxUncommitted(Tax _taxCalculation, boolean _skipNotExistsCheck = false)
    {
        TmpTaxWorkTrans             tmpTaxWorkTrans = _taxCalculation.tmpTaxWorkTrans();
        TaxUncommitted              taxUncommittedLoc;
        TaxUncommittedExtensionTH   taxUncommittedExtTH;
        TaxUncommittedExtensionTH   taxUncommittedExtExistsTH;
        RecordInsertList            taxUncommittedList;
        RefRecId                    headingRecId = _taxCalculation.headingRecId();
        RefTableId                  headingTableId = _taxCalculation.headingTableId();

        taxUncommittedList = new RecordInsertList(tableNum(TaxUncommittedExtensionTH));

        ttsbegin;

        // Update existed records in TaxUncommitted_TH
        if (_taxCalculation.getMaintainExistingTaxUncommitted())
        {
            while select * from tmpTaxWorkTrans
                    where tmpTaxWorkTrans.HeadingRecId      == headingRecId
                       && tmpTaxWorkTrans.HeadingTableId    == headingTableId
                join RecId from taxUncommittedLoc
                    where tmpTaxWorkTrans.SourceTableId == taxUncommittedLoc.SourceTableId
                       && tmpTaxWorkTrans.SourceRecId   == taxUncommittedLoc.SourceRecId
                       && tmpTaxWorkTrans.TaxCode       == taxUncommittedLoc.TaxCode
                join forupdate taxUncommittedExtTH
                    where taxUncommittedExtTH.TaxUncommitted == taxUncommittedLoc.RecId
            {
                taxUncommittedExtTH.initFromTmpTaxWorkTrans(tmpTaxWorkTrans);
                taxUncommittedExtTH.update();
            }
        }

        // Insert record in TaxUncommitted_TH for new created TaxUncommitted records
        if (_skipNotExistsCheck)
        {
            while select * from tmpTaxWorkTrans
                    where tmpTaxWorkTrans.HeadingRecId == headingRecId
                       && tmpTaxWorkTrans.HeadingTableId == headingTableId
                join RecId from taxUncommittedLoc
                    where tmpTaxWorkTrans.SourceTableId == taxUncommittedLoc.SourceTableId
                       && tmpTaxWorkTrans.SourceRecId   == taxUncommittedLoc.SourceRecId
                       && tmpTaxWorkTrans.TaxCode       == taxUncommittedLoc.TaxCode
            {
                taxUncommittedExtTH.clear();
                taxUncommittedExtTH.initFromTmpTaxWorkTrans(tmpTaxWorkTrans);
                taxUncommittedExtTH.TaxUncommitted = taxUncommittedLoc.RecId;

                taxUncommittedList.add(taxUncommittedExtTH);
            }
        }
        else
        {
            while select * from tmpTaxWorkTrans
                    where tmpTaxWorkTrans.HeadingRecId == headingRecId
                       && tmpTaxWorkTrans.HeadingTableId == headingTableId
                join RecId from taxUncommittedLoc
                    where tmpTaxWorkTrans.SourceTableId == taxUncommittedLoc.SourceTableId
                       && tmpTaxWorkTrans.SourceRecId   == taxUncommittedLoc.SourceRecId
                       && tmpTaxWorkTrans.TaxCode       == taxUncommittedLoc.TaxCode
                notexists join taxUncommittedExtExistsTH
                    where taxUncommittedExtExistsTH.TaxUncommitted == taxUncommittedLoc.RecId
            {
                taxUncommittedExtTH.clear();
                taxUncommittedExtTH.initFromTmpTaxWorkTrans(tmpTaxWorkTrans);
                taxUncommittedExtTH.TaxUncommitted = taxUncommittedLoc.RecId;

                taxUncommittedList.add(taxUncommittedExtTH);
            }
        }

        taxUncommittedList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxUncommittedRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record according to tax uncommitted transaction record Id.
    /// </summary>
    /// <param name="_taxUncommittedRecId">
    /// The given tax uncommitted transaction record Id.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record.
    /// </param>
    /// <returns>
    /// The record of the table <c>TaxUncommittedTaxTrans_TH</c>
    /// </returns>
    public static TaxUncommittedExtensionTH findByTaxUncommittedRecId(
        RecId               _taxUncommittedRecId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxUncommittedExtensionTH   taxUncommittedTaxTrans;

        taxUncommittedTaxTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxUncommittedTaxTrans.concurrencyModel(_concurrencyModel);
        }

        if (_taxUncommittedRecId)
        {
            select firstonly taxUncommittedTaxTrans
                where taxUncommittedTaxTrans.TaxUncommitted == _taxUncommittedRecId;
        }

        return taxUncommittedTaxTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>TH</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4083036</DeveloperDocumentation>
	<Label>@SYS4083035</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>TaxUncommitted</TitleField1>
	<TitleField2>TaxUnrealizedRefRecId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxUnrealizedRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxUnrealizedRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxUncommitted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxUnrealizedRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxUnrealizedRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxUncommittedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxUncommitted</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxUnrealizedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxUnrealizedRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxUnrealizedRefRecId</Name>
					<Field>TaxUnrealizedRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxUncommitted</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxUncommitted</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxUncommitted</Name>
					<Field>TaxUncommitted</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>