<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvNRTaxTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LvNRTaxTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.InventLocationId = InventDim::find(this.InventDimId).InventLocationId;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        FormDataSource formDataSource = FormDataUtil::getFormDataSource(this);

        super(_fieldId);

        if (this.TransType == LvNRTransType::TaxOnPackingMaterials)
        {
            switch (_fieldId)
            {
                case fieldnum(LvNRTaxTrans, InventDimId):
                    this.InventLocationId = InventDim::find(this.InventDimId).InventLocationId;
                    break;
                case fieldnum(LvNRTaxTrans, TransType):
                    if (formDataSource)
                    {
                        this.setEditable(formDataSource);
                    }
                    break;
                case fieldnum(LvNRTaxTrans, PackingUnit):
                    this.PackingQty               = InventPackagingUnit::calcPackingUnitQty(this.PackingUnit,
                                                                                            this.ItemQty,
                                                                                            this.ItemId,
                                                                                            InventDim::find(this.InventDimId));
                    this.PackingWeight            = this.PackingUnitWeight * this.PackingQty;
                    this.TaxAmount                = this.PackingWeight * this.TaxValue;
                    break;
                case fieldnum(LvNRTaxTrans, PackingMaterialCode):
                    this.TaxValue                 = InventPackagingMaterialFee::findForDate(this.PackingMaterialCode,
                                                                                           this.TransDate).PriceCur;
                    this.TaxAmount                = this.PackingWeight * this.TaxValue;
                    break;
                case fieldnum(LvNRTaxTrans, PackingUnitWeight):
                case fieldnum(LvNRTaxTrans, PackingQty):
                    this.PackingWeight            = this.PackingUnitWeight * this.PackingQty;
                    this.TaxAmount                = this.PackingWeight * this.TaxValue;
                    break;
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the form data source fields enable.
    /// </summary>
    /// <param name="_formDataSource">
    /// Form data source.
    /// </param>
    void setEditable(FormDataSource _formDataSource)
    {
        _formDataSource.object(fieldnum(LvNRTaxTrans, nrTaxGroup)).allowEdit(this.TransType != LvNRTransType::TaxOnPackingMaterials);
        _formDataSource.object(fieldnum(LvNRTaxTrans, SalesTaxGroup)).allowEdit(this.TransType != LvNRTransType::TaxOnPackingMaterials);
        _formDataSource.object(fieldnum(LvNRTaxTrans, TaxBaseAmount)).allowEdit(this.TransType != LvNRTransType::TaxOnPackingMaterials);

        _formDataSource.object(fieldnum(LvNRTaxTrans, PackingUnit)).allowEdit(this.TransType != LvNRTransType::TaxOnDangerousItems);
        _formDataSource.object(fieldnum(LvNRTaxTrans, PackingMaterialCode)).allowEdit(this.TransType != LvNRTransType::TaxOnDangerousItems);
        _formDataSource.object(fieldnum(LvNRTaxTrans, PackingUnitWeight)).allowEdit(this.TransType != LvNRTransType::TaxOnDangerousItems);
        _formDataSource.object(fieldnum(LvNRTaxTrans, PackingQty)).allowEdit(this.TransType != LvNRTransType::TaxOnDangerousItems);
        _formDataSource.object(fieldnum(LvNRTaxTrans, PackingWeight)).allowEdit(this.TransType != LvNRTransType::TaxOnDangerousItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create <c>LvNRTaxTrans</c> table records from <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record.
    /// </param>
    /// <param name="_transType">
    /// The <c>LvNRTransType</c> NR transaction type.
    /// </param>
    /// <param name="_transTableId">
    /// Reference to table Id.
    /// </param>
    /// <param name="_transRecId">
    /// Reference to record Id.
    /// </param>
    /// <param name="_taxBase">
    /// Tax base amount.
    /// </param>
    /// <param name="_taxGroup">
    /// Tax group of invoice transactions.
    /// </param>
    /// <param name="_unit">
    /// Inventory packing unit ID; optional.
    /// </param>
    static void createFromInventTrans(InventTrans            _inventTrans,
                                             LvNRTransType          _transType,
                                             tableId                _transTableId,
                                             RecId                  _transRecId,
                                             TaxBase                _taxBase,
                                             TaxGroup               _taxGroup,
                                             InventPackingUnit      _unit = '')
    {
        LvNRTaxTrans                nrTaxTrans;
        InventPackagingUnit         inventPackagingUnit;
        InventPackagingUnitMaterial inventPackagingUnitMaterial;
        TmpTaxWorkTrans             taxWorkTrans;
        TaxModuleType               taxModuleType = TaxModuleType::Voucher;
        UnitOfMeasureSymbol         inventUnit;
        TaxGroupData                taxGroupData;
        LvNRTaxOnItem               taxOnItem;

        nrTaxTrans.TransTableId     = _transTableId;
        nrTaxTrans.TransRecId       = _transRecId;
        nrTaxTrans.InventTransId    = _inventTrans.InventTransOrigin().InventTransId;

        nrTaxTrans.ItemId           = _inventTrans.ItemId;
        nrTaxTrans.InventDimId      = _inventTrans.InventDimId;

        nrTaxTrans.TransType      = _transType;
        nrTaxTrans.LineId = newGuid();

        if (_inventTrans.InventTransOrigin().ReferenceCategory == InventTransType::BOMLine)
        {
            nrTaxTrans.bomLine = NoYes::Yes;
        }

        nrTaxTrans.InventTransType = _inventTrans.InventTransOrigin().ReferenceCategory;

        nrTaxTrans.InventTransRefId = _inventTrans.InventTransOrigin().ReferenceId;
        nrTaxTrans.InvoiceId        = _inventTrans.InvoiceId;
        nrTaxTrans.TransDate        = _inventTrans.DateFinancial;
        nrTaxTrans.Voucher          = _inventTrans.Voucher;
        nrTaxTrans.ItemQty          = -_inventTrans.Qty;

        if (nrTaxTrans.TransType == LvNRTransType::TaxOnDangerousItems)
        {
            nrTaxTrans.nrTaxGroup       = _inventTrans.inventTable().NRTaxGroup_LV;
            nrTaxTrans.SalesTaxGroup    = _taxGroup;

            if (!nrTaxTrans.nrTaxGroup || !nrTaxTrans.SalesTaxGroup)
            {
                return;
            }

            nrTaxTrans.TaxBaseAmount = _taxBase;

            inventUnit = InventTableModule::find(nrTaxTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;
            taxWorkTrans = Tax::calcNRTax_LV(nrTaxTrans.SalesTaxGroup,
                                             nrTaxTrans.nrTaxGroup,
                                             _inventTrans.DatePhysical,
                                             _inventTrans.CurrencyCode,
                                             nrTaxTrans.TaxBaseAmount,
                                             taxModuleType,
                                             nrTaxTrans.ItemQty,
                                             inventUnit,
                                             _inventTrans.ItemId);

            while select TaxGroup, TaxCode from taxGroupData
                where taxGroupData.TaxGroup         == _taxGroup
            join TableId from taxOnItem
                where taxOnItem.TaxGroup            == nrTaxTrans.nrTaxGroup     &&
                      taxOnItem.TaxCode             == taxGroupData.TaxCode
            {
                nrTaxTrans.TaxCode   = taxGroupData.TaxCode;
                if (LvNRTaxTrans::exist(_transTableId, _transRecId, _transType, _inventTrans.InventTransOrigin().InventTransId, nrTaxTrans.TaxCode, ''))
                {
                    continue;
                }

                nrTaxTrans.TaxValue  = TaxData::percent(nrTaxTrans.TaxCode,
                                                        nrTaxTrans.TransDate,
                                                        0);

                select firstonly SourceRegulateAmountCur, SourceTaxAmountCur from taxWorkTrans
                    where taxWorkTrans.TaxCode == nrTaxTrans.TaxCode;

                if (!taxWorkTrans.SourceRegulateAmountCur)
                {
                     nrTaxTrans.TaxAmount = taxWorkTrans.SourceTaxAmountCur;
                }
                else
                {
                     nrTaxTrans.TaxAmount = taxWorkTrans.SourceRegulateAmountCur;
                }

                ttsbegin;
                nrTaxTrans.insert();
                ttscommit;
            }

            if (!nrTaxTrans.TaxCode && !LvNRTaxTrans::exist(_transTableId, _transRecId, _transType, _inventTrans.InventTransOrigin().InventTransId, '', ''))
            {
                ttsbegin;
                nrTaxTrans.insert();
                ttscommit;
            }
        }
        else if (nrTaxTrans.TransType == LvNRTransType::TaxOnPackingMaterials)
        {
            if (_unit)
            {
                inventPackagingUnit = InventPackagingUnit::findFirstUnit(_inventTrans.ItemId, _inventTrans.inventDim(), _unit);
            }
            else
            {
                inventPackagingUnit = InventPackagingUnit::findFirst_LV(_inventTrans.ItemId, _inventTrans.inventDim());
            }

            if (!inventPackagingUnit)
            {
                return;
            }

            nrTaxTrans.PackingUnit  = inventPackagingUnit.Unit;

            while select inventPackagingUnitMaterial
                  where inventPackagingUnitMaterial.PackingUnitRecID == inventPackagingUnit.RecId
            {
                nrTaxTrans.PackingMaterialCode      = inventPackagingUnitMaterial.PackMaterialCode;
                if (LvNRTaxTrans::exist(_transTableId, _transRecId, _transType, _inventTrans.InventTransOrigin().InventTransId, '', nrTaxTrans.PackingMaterialCode))
                {
                    continue;
                }

                nrTaxTrans.TaxValue                 = InventPackagingMaterialFee::findForDate(nrTaxTrans.PackingMaterialCode,
                                                                                       nrTaxTrans.TransDate).PriceCur;
                nrTaxTrans.PackingUnitWeight        = inventPackagingUnitMaterial.PackingUnitWeight;
                nrTaxTrans.PackingQty               = sign(nrTaxTrans.ItemQty) * InventPackagingUnit::calcPackingUnitQty(inventPackagingUnit.Unit,
                                                                                                                         abs(nrTaxTrans.ItemQty),
                                                                                                                         _inventTrans.ItemId,
                                                                                                                         InventDim::find(_inventTrans.InventDimId));
                nrTaxTrans.PackingWeight            = nrTaxTrans.PackingUnitWeight * nrTaxTrans.PackingQty;
                nrTaxTrans.TaxAmount                = nrTaxTrans.PackingWeight * nrTaxTrans.TaxValue;

                ttsbegin;
                nrTaxTrans.insert();
                ttscommit;
            }

            if (!nrTaxTrans.PackingMaterialCode && !LvNRTaxTrans::exist(_transTableId, _transRecId, _transType, _inventTrans.InventTransOrigin().InventTransId, '', ''))
            {
                ttsbegin;
                nrTaxTrans.insert();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record with the given <c>RefTableId</c>, <c>RefRecId</c>, <c>LvNRTransType</c>,
    /// <c>InventTransId</c>,<c>TaxCode</c> and <c>InventPackingMaterialCode</c> already exists.
    /// </summary>
    /// <param name="_transTableId">
    /// Table Id reference.
    /// </param>
    /// <param name="_transRecId">
    /// Record Id reference.
    /// </param>
    /// <param name="_nrTransType">
    /// NR transaction type.
    /// </param>
    /// <param name="_inventTransId">
    /// Inentory transfer Id.
    /// </param>
    /// <param name="_taxCode">
    /// Tax code Id.
    /// </param>
    /// <param name="_packingMaterialCode">
    /// Inventory packing material code Id.
    /// </param>
    /// <returns>
    /// True if the record already exists;otherwise false.
    /// </returns>
    static boolean exist(tableId                    _transTableId,
                         RecId                      _transRecId,
                         LvNRTransType              _nrTransType,
                         InventTransId              _inventTransId,
                         TaxCode                    _taxCode,
                         InventPackingMaterialCode  _packingMaterialCode)
    {
        boolean ret;
        ProjInvoiceItem     projInvoiceItem;
        InventJournalTrans  inventJournalTrans;
        LvNRTaxTrans        nrTaxTrans;

        if (_nrTransType == LvNRTransType::TaxOnDangerousItems)
        {
            select firstonly RecId from nrTaxTrans
                where nrTaxTrans.TransTableId       == _transTableId    &&
                      nrTaxTrans.TransRecId         == _transRecId      &&
                      nrTaxTrans.TransType          == _nrTransType     &&
                      nrTaxTrans.TaxCode            == _taxCode         &&
                      nrTaxTrans.InventTransId      == _inventTransId;
        }
        else if (_nrTransType == LvNRTransType::TaxOnPackingMaterials)
        {
            select firstonly RecId  from nrTaxTrans
                where nrTaxTrans.TransTableId           == _transTableId        &&
                      nrTaxTrans.TransRecId             == _transRecId          &&
                      nrTaxTrans.TransType              == _nrTransType         &&
                      nrTaxTrans.PackingMaterialCode    == _packingMaterialCode &&
                      nrTaxTrans.InventTransId          == _inventTransId;
        }

        ret = nrTaxTrans.RecId != 0;

        if (! ret)
        {
            if (_transTableId == tablenum(InventJournalTrans))
            {
                while select TransRecId from nrTaxTrans
                    where nrTaxTrans.TransTableId   == tablenum(ProjInvoiceItem) &&
                          nrTaxTrans.TransType      == _nrTransType
                {
                    select firstonly RecId from projInvoiceItem
                        where projInvoiceItem.RecId         == nrTaxTrans.TransRecId &&
                              projInvoiceItem.InventTransId == _inventTransId;

                    if (projInvoiceItem.RecId)
                    {
                        ret = true;
                        break;
                    }
                }
            }

            if (_transTableId == tablenum(ProjInvoiceItem))
            {
                while select TransRecId from nrTaxTrans
                    where nrTaxTrans.TransTableId   == tablenum(InventJournalTrans) &&
                          nrTaxTrans.TransType      == _nrTransType
                {
                    select firstonly RecId from inventJournalTrans
                        where inventJournalTrans.RecId == nrTaxTrans.TransRecId &&
                              inventJournalTrans.InventTransId == _inventTransId;

                    if (inventJournalTrans.RecId)
                    {
                        ret = true;
                        break;
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.LineId = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.LineId)
        {
            this.LineId = newGuid();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>LV</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4080936</DeveloperDocumentation>
	<Label>@GLS113390</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventTransRefId</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Lot</Name>
			<Label>@SYS16247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NRTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Packing</Name>
			<Label>@SYS82176</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingUnitWeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingMaterialCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingUnitQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax</Name>
			<Label>@GLS113398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NRTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBaseAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Trans</Name>
			<Label>@GLS113399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMLine</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ItemQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NRTaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvNRTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingMaterialCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingMaterialCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackingQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackingUnitQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@GLS113397</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackingUnitWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackingUnitWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackingWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPackagingWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesTaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
			<Label>@SYS76123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<Label>@SYS79666</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TransTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>LvNRTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LineId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DimIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventPackagingMaterialCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventPackagingMaterialCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackingMaterialCode</Name>
					<SourceEDT>InventPackingMaterialCode</SourceEDT>
					<Field>PackingMaterialCode</Field>
					<RelatedField>PackMaterialCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PackagingMaterialCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LvNRTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LvNRTaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NRTaxGroup</Name>
					<SourceEDT>LvNRTaxGroup</SourceEDT>
					<Field>NRTaxGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjInvoiceItem</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransTableId</Name>
					<Field>TransTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>SalesTaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>