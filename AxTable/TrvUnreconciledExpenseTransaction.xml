<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvUnreconciledExpenseTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvUnreconciledExpenseTransaction extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;
        this.IsEmpty = this.isEmptyTransaction();
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCategoryAndMerchant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TrvUnreconciledExpenseTransaction</c> record with the provided category and business name
    /// </summary>
    /// <param name = "_costType">
    /// The category value used in the update.
    /// </param>
    /// <param name = "_businessName">
    /// The business name value used in the update.
    /// </param>
    public void updateCategoryAndMerchant(TrvCostTypeEDT _costType = "", TrvExpMerchantId _merchantId = "")
    {
        ttsbegin;

        if (_costType != "")
        {
            this.CostType = _costType;
        }

        if (_merchantId != "")
        {
            this.MerchantId = _merchantId;
        }

        this.update();
        ttscommit;
}

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>TrvUnreconciledExpenseTransaction</c> record can be considered empty.
    /// </summary>
    /// <returns>
    /// True if the record can be considered empty; otherwise, false.
    /// </returns>
    private boolean isEmptyTransaction()
    {
        return (this.TransactionCurrencyAmount == 0 && this.TransactionCurrencyCode == "" && this.Notes == "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;
        this.IsEmpty = this.isEmptyTransaction();
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachUnreconciledReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a receipt document from an unreconciled expense transaction.
    /// </summary>
    /// <param name = "_refRecId">The <c>DocuRef</c> record to detach</param>
    delegate void detachUnreconciledReceipt(RefRecId _recId) {}

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnreconciledExpenseTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes an unreconciled expense transaction and detaches receipts attached to it.
    /// </summary>
    /// <param name="_UnreconciledRecid">
    /// The record ID for the unreconciled expense transaction to delete.
    /// </param>
    public static void deleteUnreconciledExpenseTransaction(RecId _UnreconciledRecid)
    {
        TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction;
        Docuref                           docuref;

        if (_UnreconciledRecid)
        {
            ttsBegin;
            while select RecId from docuRef where docuRef.RefTableId == tablenum(TrvUnreconciledExpenseTransaction) && docuRef.RefRecId == _UnreconciledRecid
            {
                trvUnreconciledExpenseTransaction.detachUnreconciledReceipt(docuRef.RecId);
            }

            delete_from trvUnreconciledExpenseTransaction where trvUnreconciledExpenseTransaction.RecId == _UnreconciledRecid;
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnreconciledReceiptsForWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether worker has unreconciled expense records with documents that are attached and
    /// available to transfer to expense report.
    /// </summary>
    /// <param name="_hcmWorker">
    /// A reference to the <c>HcmWorker</c> record.
    /// </param>
    /// <returns>
    /// true if unreconciled transactions are found; otherwise, false.
    /// </returns>
    public static boolean existUnreconciledReceiptsForWorker(TrvHcmWorkerRecId _hcmWorker)
    {
        TrvUnreconciledExpenseTransaction   unreconciledExpense;
        DocuRef                             docuRef;

        select firstonly RecId from unreconciledExpense
            where unreconciledExpense.Worker        == _hcmWorker
                && unreconciledExpense.ExpenseLine  == 0
            join RefTableId, RefRecId from docuRef
            where docuRef.RefTableId == unreconciledExpense.TableId &&
                docuRef.RefRecId == unreconciledExpense.RecId;

        return unreconciledExpense.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnreconciledUsedByExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether unreconciled transactions that were transferred expense report line exist.
    /// </summary>
    /// <param name="_expenseLineRecId">
    /// A reference to <c>TrvExpTrans</c> record that represent an expense report line.
    /// </param>
    /// <returns>
    /// true if unreconciled transactions are found; otherwise, false.
    /// </returns>
    public static boolean existUnreconciledUsedByExpenseLine(recId _expenseLineRecId)
    {
        TrvUnreconciledExpenseTransaction   unreconciledExpense;

        if (_expenseLineRecId)
        {
            select firstonly RecId from unreconciledExpense
                where unreconciledExpense.ExpenseLine == _expenseLineRecId;
        }
        return unreconciledExpense.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnreconciledByExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the unreconciled expense associated with an expense line.
    /// </summary>
    /// <param name="_expenseLineRecId">
    /// A reference to <c>TrvExpTrans</c> record that represent an expense report line.
    /// </param>
    public static void deleteUnreconciledByExpenseLine(recId _expenseLineRecId)
    {
        TrvUnreconciledExpenseTransaction   unreconciledExpense;

        if (_expenseLineRecId)
        {
            ttsBegin;

            delete_from unreconciledExpense
                where unreconciledExpense.ExpenseLine == _expenseLineRecId;

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TrvUnreconciledExpenseTransaction</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of a <c>TrvUnreconciledExpenseTransaction</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record will be read for update; optional.
    /// </param>
    /// <returns>
    /// The <c>TrvUnreconciledExpenseTransaction</c> record that is found by the record ID.
    /// </returns>
    public static TrvUnreconciledExpenseTransaction find(recId _recId, boolean _forUpdate = false)
    {
        TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction;

        if (_recId)
        {
            trvUnreconciledExpenseTransaction.selectForUpdate(_forUpdate);
            select firstonly trvUnreconciledExpenseTransaction where trvUnreconciledExpenseTransaction.RecId == _recId;
        }
        return trvUnreconciledExpenseTransaction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@SYS335858</DeveloperDocumentation>
	<Label>@SYS335787</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>Worker</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Expense</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MerchantId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS318403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReceiptOnly</Name>
			<Label>@SYS335855</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsEmpty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostTypeEDT</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExpenseLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>Expense report line reference</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEmpty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MerchantId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvExpMerchantId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvFreeText</ExtendedDataType>
			<Label>@SYS318221</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TransactionCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HCMWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>