<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegisterJournalTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RTax25RegisterJournalTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approved</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display boolean approved()
    {
        ;
        return (RTax25RegisterJournalTrans::exist(this.JournalNum,
                                                  this.PeriodType,
                                                  this.PeriodNum,
                                                  this.FiscalYear,
                                                  this.RegisterJournalType) &&
            ! (select firstonly rTax25RegisterJournalTrans
                   where rTax25RegisterJournalTrans.JournalNum          == this.JournalNum                  &&
                         rTax25RegisterJournalTrans.PeriodType          == this.PeriodType                  &&
                         rTax25RegisterJournalTrans.PeriodNum           == this.PeriodNum                   &&
                         rTax25RegisterJournalTrans.FiscalYear          == this.FiscalYear                  &&
                         rTax25RegisterJournalTrans.RegisterJournalType == this.RegisterJournalType         &&
                         rTax25RegisterJournalTrans.Cancelled           == NoYes::No                        &&
                       ((rTax25RegisterJournalTrans.Status              == RTax25RegisterStatus::Calculated &&
                        ! rTax25RegisterJournalTrans.Approved)                                              ||
                         rTax25RegisterJournalTrans.Status              == RTax25RegisterStatus::NotCalculated)).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Name defaultName()
    {
        return strfmt("@GLS104145",
                       this.PeriodNum,
                       this.PeriodType,
                       this.FiscalYear);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate fromDate(RTax25PeriodNum  _periodNum  = this.PeriodNum,
                             Yr               _fiscalYear = this.FiscalYear,
                             RTax25PeriodType _periodType = this.PeriodType)
    {
        return mkdate(1, (_periodNum - 1) * RTax25RegisterJournalTable::periodMthLength(_periodType) + 1, _fiscalYear);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.initYearPeriod();

        if (this.RegisterJournalType == RTax25RegisterJournalType::ProfitTax)
        {
            this.EnableCorrective = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initYearPeriod</Name>
				<Source><![CDATA[
    #TimeConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initYearPeriod()
    {
        RTax25RegisterJournalTable  journalTable;
        RTax25PeriodNum             periodNum;
        Yr                          fiscalYear;
        int                         periodLag = RTax25RegisterJournalTable::periodMthLength(this.PeriodType);

        select firstonly journalTable
            order by FiscalYear desc, PeriodNum desc
            where journalTable.PeriodType          == this.PeriodType  &&
                  journalTable.RegisterJournalType == this.RegisterJournalType;
        if (journalTable)
        {
            fiscalYear = journalTable.FiscalYear;
            periodNum  = journalTable.PeriodNum + 1;
            if (periodNum div (#monthsPerYear / periodLag) && periodNum != (#monthsPerYear / periodLag))
            {
                fiscalYear++;
                periodNum = periodNum mod (#monthsPerYear / periodLag);
                periodNum = periodNum ? periodNum : 1;
            }
        }
        else
        {
            fiscalYear = year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            if (this.PeriodType == RTax25PeriodType::NineMonths)
                periodNum = 0;
            else
                periodNum  = mthofyr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) div periodLag;

            if (periodNum * periodLag < mthofyr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
            {
                periodNum++;
            }
        }

        this.FiscalYear = fiscalYear;
        this.PeriodNum  = periodNum;
        this.EndDate    = this.makeEndDate();

        this.Name       = this.defaultName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate makeEndDate()
    {
        return endmth(mkdate(1,
                             this.PeriodNum * RTax25RegisterJournalTable::periodMthLength(this.PeriodType),
                             this.FiscalYear));
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate toDate()
    {
        return this.EndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        RTax25RegisterJournalTable  rTax25RegisterJournalTable;
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = RTax25RegCalcController::nextJournalNotExists(this);
        }

        if (!this.SourceRecId)
        {
            //cannot use delete action because it works both for Corrected and Corrective journals
            select firstonly RecId from rTax25RegisterJournalTable
                where rTax25RegisterJournalTable.CorrectedRecId == this.RecId;

            if (rTax25RegisterJournalTable.RecId)
            {
                ret = checkFailed(strFmt("@SYS75284", tableid2pname(tableNum(RTax25RegisterJournalTable))));
            }

            if (this.RegisterJournalType == RTax25RegisterJournalType::ProfitTax)
            {
                while select rTax25RegisterJournalTable
                    where rTax25RegisterJournalTable.SourceRecId == this.RecId
                {
                    ret = rTax25RegisterJournalTable.doValidateDelete() && ret;
                }
            }
        }
        else
        {
            if (this.RegisterJournalType == RTax25RegisterJournalType::ProfitTax)
            {
                rTax25RegisterJournalTable = RTax25RegisterJournalTable::findRecId(this.SourceRecId);
                ret = checkFailed(strFmt("@SYP4861148", rTax25RegisterJournalTable.JournalNum), "", SysInfoAction_TableField::newBuffer(rTax25RegisterJournalTable));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    #TimeConstants
    public boolean validateField(fieldId _p1)
    {
        boolean ret;

        ret = super(_p1);
        switch (_p1)
        {
            case fieldnum(RTax25RegisterJournalTable, PeriodNum) :
                if (this.PeriodNum > #monthsPerYear / RTax25RegisterJournalTable::periodMthLength(this.PeriodType) ||
                    this.PeriodNum < 0)
                {
                    ret = checkFailed(strfmt("@SYS21589", mkdate(1,1,this.FiscalYear),mkdate(31,#monthsPerYear,this.FiscalYear)));
                }
                break;
            case fieldNum(RTax25RegisterJournalTable, Accepted) :
                if (this.Accepted == RTax25CorrectionAccepted::Accepted &&
                   !this.approved())
                {
                    ret = checkFailed("@SYP4861150");
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                    ret;

        ret = super();
        if (ret)
        {
            this.EndDate = this.makeEndDate();
            ret = RTax25RegCalcController::canCreateJournal(this);

            if (this.RegisterJournalType == RTax25RegisterJournalType::Asset_RU &&
                !this.CorrectedRecId)
            {
                if (RTax25RegisterJournalTable::existPeriod(this.fromDate(), this))
                {
                    ret = ret && checkFailed(strfmt("@GLS107186", this.fromDate()));
                }

                if (RTax25RegisterJournalTable::existPeriod(this.EndDate, this))
                {
                    ret = ret && checkFailed(strfmt("@GLS107186", this.EndDate));
            }
        }

            if (this.CalculationDate != this.EndDate &&
               (!this.CorrectedRecId || !this.SourceRecId) &&
                this.RegisterJournalType == RTax25RegisterJournalType::ProfitTax)
            {
                ret = checkFailed("@SYP4861151");
            }

            if (this.CorrectedRecId &&
               this.RegisterJournalType == RTax25RegisterJournalType::ProfitTax)
            {
                if (this.EndDate >= this.CalculationDate)
                {
                    ret = checkFailed("@SYP4861152");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RTax25RegisterJournalNum  _journalNumber,
                                     RTax25RegisterJournalType _registerJournalType)
    {
        if (_journalNumber && _registerJournalType && ! RTax25RegisterJournalTable::exist(_journalNumber, _registerJournalType))
            return checkFailed(strfmt(RTax25RegisterJournalTable::txtNotExist(), _journalNumber));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RTax25RegisterJournalNum  _journalNumber,
                                RTax25RegisterJournalType _registerJournalType)
    {
        return _journalNumber && _registerJournalType &&
            (select firstonly RecId from rTax25RegisterJournalTable
                 index TypeNumIdx
                 where rTax25RegisterJournalTable.JournalNum          == _journalNumber &&
                       rTax25RegisterJournalTable.RegisterJournalType == _registerJournalType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existPeriod(TransDate _startDate, RTax25RegisterJournalTable _registerJournalTable = null)
    {
        RTax25RegisterJournalTable registerJournalTable;
        ;

        while select PeriodType, PeriodNum, FiscalYear, EndDate from registerJournalTable
            where registerJournalTable.FiscalYear          == year(_startDate) &&
                  registerJournalTable.RegisterJournalType == RTax25RegisterJournalType::Asset_RU &&
                 (! _registerJournalTable.JournalNum                                              ||
                  _registerJournalTable.AssetTaxType       == RAssetTaxType::Empty                ||
                  registerJournalTable.AssetTaxType        == RAssetTaxType::Empty                ||
                  registerJournalTable.AssetTaxType        == _registerJournalTable.AssetTaxType)
        {
            if (registerJournalTable.fromDate() <= _startDate &&
                registerJournalTable.EndDate        >= _startDate &&
               (!  _registerJournalTable.JournalNum                                               ||
                ! (_registerJournalTable.EndDate    == dateEndYr(_registerJournalTable.EndDate) &&
                   _registerJournalTable.PeriodType != registerJournalTable.PeriodType)))
            {
                return true;
        }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegisterJournalTable find(RTax25RegisterJournalNum  _rTax25RegisterJournalNum,
                                                  RTax25PeriodType          _rTax25PeriodType,
                                                  RTax25PeriodNum           _rTax25PeriodNum,
                                                  Yr                        _yr,
                                                  RTax25RegisterJournalType _registerJournalType,
                                                  boolean                   _forUpdate = false)
    {
        RTax25RegisterJournalTable registerJournalTable;

        registerJournalTable.selectForUpdate(_forUpdate);
        select firstonly registerJournalTable
            index TypeNumIdx
            where registerJournalTable.JournalNum          == _rTax25RegisterJournalNum &&
                  registerJournalTable.PeriodType          == _rTax25PeriodType         &&
                  registerJournalTable.PeriodNum           == _rTax25PeriodNum          &&
                  registerJournalTable.FiscalYear          == _yr                       &&
                  registerJournalTable.RegisterJournalType == _registerJournalType;
        return registerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodMthLength</Name>
				<Source><![CDATA[
    #TimeConstants
    #define.monthsNine(9)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public int periodMthLength(RTax25PeriodType _periodType)
    {
        int ret;

        switch (_periodType)
        {
            case RTax25PeriodType::Month:
                ret = 1;
                break;
            case RTax25PeriodType::Quarter:
                ret = #monthsPerQuarter;
                break;
            case RTax25PeriodType::HalfYear:
                ret = #monthsPerHalfYear;
                break;
            case RTax25PeriodType::Year:
                ret = #monthsPerYear;
                break;
            case RTax25PeriodType::NineMonths:
                ret = #monthsNine;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS17145";
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        RTax25RegisterJournalTable  registerJournalTable;

        ttsBegin;

        if (this.RegisterJournalType == RTax25RegisterJournalType::ProfitTax &&
            this.Version == 0)
        {
            while select forUpdate registerJournalTable
                where registerJournalTable.SourceRecId == this.RecId
            {
                registerJournalTable.delete();
            }
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsFurtherCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if there are further corrections to current period which are not rejected.
    /// </summary>
    /// <returns>
    ///  Boolean value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existsFurtherCorrection()
    {
        RTax25RegisterJournalTable  correctionJournalTable;

        select firstonly RecId from correctionJournalTable
            where ((this.Version == 0 &&
                   correctionJournalTable.CorrectedRecId == this.RecId)                           ||
                  (this.Version > 0                                                               &&
                   correctionJournalTable.CorrectedRecId == this.CorrectedRecId &&
                   correctionJournalTable.Version > this.Version))                                &&
                   correctionJournalTable.Accepted != RTax25CorrectionAccepted::Rejected;

        return correctionJournalTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPrevCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    ///  For corrective profit tax register journals determines if there are other journals with same origin, which have earlier date and which is not rejected.
    /// </summary>
    /// <returns>
    ///   Boolean value.
    /// </returns>
    /// <remarks>
    ///   If previous journal is accepted, all futher corrections must be accepted too.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existsPrevCorrections()
    {
        RTax25RegisterJournalTable regJournalTable;

        if (this.SourceRecId && this.RegisterJournalType == RTax25RegisterJournalType::ProfitTax)
        {
            select firstOnly RecId from regJournalTable
                where regJournalTable.SourceRecId == this.SourceRecId &&
                      regJournalTable.EndDate     <  this.EndDate     &&
                      regJournalTable.Accepted    != RTax25CorrectionAccepted::Rejected;
        }

        return regJournalTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initPeriod()
    {
        RTax25RegisterJournalTable  journalTable;
        RTax25PeriodType            periodType;
        Yr                          fiscalYear;
        TransDate                   newDate;

        select firstonly journalTable
            order by EndDate desc
            where journalTable.RegisterJournalType == this.RegisterJournalType &&
                 (this.AssetTaxType                == RAssetTaxType::Empty     ||
                  journalTable.AssetTaxType        == RAssetTaxType::Empty     ||
                  journalTable.AssetTaxType        == this.AssetTaxType);

        if (journalTable.EndDate)
        {
            newDate = journalTable.EndDate + 1;
        }
        else
        {
            newDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        fiscalYear = year(newDate);

        switch (mthOfYr(newDate))
        {
            case 1, 2, 3:
                periodType = RTax25PeriodType::Quarter;
                break;
            case 4, 5, 6:
                periodType = RTax25PeriodType::HalfYear;
                break;
            case 7, 8, 9:
                periodType = RTax25PeriodType::NineMonths;
                break;
            case 10, 11, 12:
                periodType = RTax25PeriodType::Year;
                break;
        }

        this.FiscalYear = fiscalYear;
        this.PeriodType = periodType;
        this.PeriodNum  = 1;
        this.EndDate    = this.makeEndDate();

        this.Name       = this.defaultName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOfTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a boolean value indicating if the journal contains registers of a particular tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type to be found in the journal.
    /// </param>
    /// <returns>
    /// A boolean value indicating if the journal contains registers of a particular tax type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isOfTaxType(RAssetTaxType _taxType)
    {
        return this.AssetTaxType == RAssetTaxType::Empty || this.AssetTaxType == _taxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date of the source register journal.
    /// </summary>
    /// <returns>
    /// Date of the journal.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate origEndDate()
    {
        if (this.SourceRecId && this.RegisterJournalType != RTax25RegisterJournalType::Asset_RU)
        {
            return RTax25RegisterJournalTable::findRecId(this.SourceRecId).EndDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        RTax25RegisterJournalTable registerJournalTable;

        ttsBegin;

        if (this.RegisterJournalType == RTax25RegisterJournalType::ProfitTax &&
            this.Version             != 0                                    &&
            this.orig().Accepted     != this.Accepted                        &&
            this.Accepted            != RTax25CorrectionAccepted::Rejected)
        {
            registerJournalTable.skipDataMethods(true);

            update_recordSet registerJournalTable
                setting Accepted = this.Accepted
                where registerJournalTable.SourceRecId == this.SourceRecId &&
                      registerJournalTable.EndDate     >  this.EndDate;
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCorrectedJournalSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Set calcCorrectedJournalSet(TransDate _accountingDate, ReportingDate_RU _reportingDate)
    {
        Set ret = new Set(Types::Record);
        RTax25RegisterJournalTable  registerJournalTable;

        if (_reportingDate > _accountingDate)
        {
            return ret;
        }

        if (year(_accountingDate) != year(_reportingDate))
        {
            while select registerJournalTable
                where registerJournalTable.Version       == 0                      &&
                      registerJournalTable.PeriodNum     == 1                      &&
                      registerJournalTable.PeriodType    == RTax25PeriodType::Year &&
                      registerJournalTable.FiscalYear    >= year(_reportingDate)   &&
                      registerJournalTable.FiscalYear    <  year(_accountingDate)
            {
                ret.add(registerJournalTable);
            }
        }

        while select registerJournalTable
            where registerJournalTable.Version    == 0                      &&
                  registerJournalTable.EndDate    >  _reportingDate         &&
                  registerJournalTable.EndDate    <  _accountingDate        &&
                  registerJournalTable.FiscalYear == year(_accountingDate)
        {
            ret.add(registerJournalTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastCorrection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegisterJournalTable findLastCorrection(
        RTax25PeriodType          _rTax25PeriodType,
        RTax25PeriodNum           _rTax25PeriodNum,
        Yr                        _yr,
        RTax25RegisterJournalType _registerJournalType,
        boolean                   _forUpdate = false)
    {
        RTax25RegisterJournalTable registerJournalTable;

        registerJournalTable.selectForUpdate(_forUpdate);

        select firstonly registerJournalTable
            order by Version desc
            where registerJournalTable.PeriodType          == _rTax25PeriodType         &&
                  registerJournalTable.PeriodNum           == _rTax25PeriodNum          &&
                  registerJournalTable.FiscalYear          == _yr                       &&
                  registerJournalTable.RegisterJournalType == _registerJournalType;

        return registerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegisterJournalTable findRecId(RecId _recId,
                                                        boolean _forUpdate = false)
    {
        RTax25RegisterJournalTable registerJournalTable;

        registerJournalTable.selectForUpdate(_forUpdate);

        select firstonly registerJournalTable
            where registerJournalTable.RecId == _recId;

        return registerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectionNumberAsset</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns correction number for asset declarations.
    /// </summary>
    /// <param name="_refRecId">
    ///  Record id of corrected journal.
    /// </param>
    /// <param name="_version">
    ///  Version of correction journal.
    /// </param>
    /// <param name="_assessedTaxRegType">
    ///  <c>RAssetAssessedTaxRegType</c> value.
    /// </param>
    /// <returns>
    ///  Correction number.
    /// </returns>
    /// <remarks>
    ///  The number is approximate, it means that in fact it may differ from real number for some reasons, such as printing by tax authority or department.
    /// That number is displayed in dialog window and can be corrected.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static int getCorrectionNumberAsset(RefRecId _refRecId, Version _version, RAssetAssessedTaxRegType _assessedTaxRegType)
    {
        RTax25RegisterJournalTable  rTax25RegisterJournalTable;
        RTax25RegisterJournalTrans  rTax25RegisterJournalTrans;
        RAssetTaxType               rAssetTaxType;
        ;

        switch (_assessedTaxRegType)
        {
            case RAssetAssessedTaxRegType::AssessedTax:
                rAssetTaxType = RAssetTaxType::AssessedTax;
                break;
            case RAssetAssessedTaxRegType::LandTax:
                rAssetTaxType = RAssetTaxType::LandTax;
                break;
            case RAssetAssessedTaxRegType::TransportTax:
                rAssetTaxType = RAssetTaxType::TransportTax;
                break;
        }

        if (_refRecId)
        {
            //counting all approved journals
            select count(RecId) from rTax25RegisterJournalTable
                where rTax25RegisterJournalTable.CorrectedRecId == _refRecId &&
                      rTax25RegisterJournalTable.Version        <= _version  &&
                     (rTax25RegisterJournalTable.AssetTaxType   == rAssetTaxType ||
                      rTax25RegisterJournalTable.AssetTaxType   == RAssetTaxType::Empty)
                notexists join rTax25RegisterJournalTrans
                    where rTax25RegisterJournalTrans.JournalNum          == rTax25RegisterJournalTable.JournalNum                  &&
                          rTax25RegisterJournalTrans.PeriodType          == rTax25RegisterJournalTable.PeriodType                  &&
                          rTax25RegisterJournalTrans.PeriodNum           == rTax25RegisterJournalTable.PeriodNum                   &&
                          rTax25RegisterJournalTrans.FiscalYear          == rTax25RegisterJournalTable.FiscalYear                  &&
                          rTax25RegisterJournalTrans.RegisterJournalType == rTax25RegisterJournalTable.RegisterJournalType         &&
                          rTax25RegisterJournalTrans.Cancelled           == NoYes::No                                              &&
                        ((rTax25RegisterJournalTrans.Status              == RTax25RegisterStatus::Calculated &&
                         ! rTax25RegisterJournalTrans.Approved)                                              ||
                          rTax25RegisterJournalTrans.Status              == RTax25RegisterStatus::NotCalculated);
        }
        return int642int(rTax25RegisterJournalTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns last used version for correction journals.
    /// </summary>
    /// <param name="_correctedRecId">
    ///  Record id of corrected journal.
    /// </param>
    /// <returns>
    ///  Version of last corrective register.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Version lastVersion(RefRecId _correctedRecId)
    {
        RTax25RegisterJournalTable rTax25RegisterJournalTable;

        select maxOf(Version) from rTax25RegisterJournalTable
            where rTax25RegisterJournalTable.CorrectedRecId == _correctedRecId;

        return rTax25RegisterJournalTable.Version;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>RTax25RegisterJournalTable</FormRef>
	<Label>@GLS103747</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>JournalNum</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>JournalTypeNumIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>RTax25</Modules>
	<PrimaryIndex>JournalTypeNumIdx</PrimaryIndex>
	<ReplacementKey>JournalTypeNumIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RTax25RegisterJournalTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RTax25RegisterJournalTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegisterJournalType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Version</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportingPeriod</Name>
			<Label>@SYS59333</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculationDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS36398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accepted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS52551</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FiscalYear</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Yr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25RegisterJournalNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS27840</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PeriodNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25PeriodNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RTax25PeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RegisterJournalType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>RTax25RegisterJournalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Accepted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RTax25CorrectionAccepted</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetTaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetTaxType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalculationDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25RegCalculationDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CorrectedRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableCorrective</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25EnableCorrective</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Version</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Version</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalTypeNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FiscalYear</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RegisterJournalType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PeriodType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FiscalYear</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RegisterJournalType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetTaxType</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CorrectedRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Version</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EndDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>EndDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CorrectedRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CorrectedRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CorrectedRegisterJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25RegisterJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CorrectedRegisterJournalTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RegisterJournalTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CorrectedRecId</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>CorrectedRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceRegisterJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25RegisterJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceRegisterJournalTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RegisterJournalTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>