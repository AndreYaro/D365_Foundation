<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetFavorites</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TSTimesheetFavorites extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCategoryId</Name>
				<Source><![CDATA[
    private boolean checkCategoryId()
    {
        boolean         ret = true;
        ProjCategory    projCategory;

        if (this.CategoryId)
        {
            projCategory    = ProjCategory::find(this.CategoryId);

            if (projCategory.CategoryType != ProjCategoryType::Hour)
            {
                ret = checkFailed(strFmt("@SYS54897", this.CategoryId));
            }

            ret = ret && projCategory.validateIfInactiveAllowed();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    private boolean checkProjId()
    {
        boolean ret = true;
        ProjTable projTable;
        ProjStatusType projStatusType;

        if (this.ProjId)
        {
            projTable = ProjTable::find(this.ProjId);

            if (!projTable.RecId)
            {
                ret = checkFailed(strFmt("@SYS11217", this.ProjId));
            }

            projStatusType = projTable.status();

            if (ret && !projStatusType.checkRule(ProjStatusRule::CreateJournal))
            {
                ret = checkFailed(strFmt("@SYS135526",projTable.Stage()));
            }

            if (ret && !projStatusType.activeInTree())
            {
                ret = checkFailed(strFmt("@SYS96612",this.ProjId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the activity is needed for the timesheet favorite.
    /// </summary>
    /// <param name = "_timesheetFavorites">The <c>TSTimesheetFavorites</c> buffer.</param>
    /// <returns>True if needed otherwise false.</returns>
    public boolean checkReqActivity(TSTimesheetFavorites   _timesheetFavorites)
    {
        RequireActivity             requireActivity;
        boolean                     ret = true;

        requireActivity = ProjTable::checkRequireActivity(_timesheetFavorites.ProjId,tableNum(TSTimesheetFavorites));
        if (requireActivity && (!_timesheetFavorites.ActivityNumber))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResource</Name>
				<Source><![CDATA[
    private boolean checkResource()
    {
        boolean result = true;

        if (this.Resource)
        {
            HcmWorker hcmWorker = TSResource::worker(this.Resource);

            if (   hcmWorker
                && hcmWorker.workerStatus() == HcmWorkerStatus::Terminated
                && !ProjParameters::find().ShowInactiveEmployees)
            {
                result = checkFailed("@SYS39651");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the activity lookup control in the timesheets favorites form.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the data in the control has changed.
    /// </param>
    /// <param name="_activityNumber">
    /// An activity number entered from the bound control.
    /// </param>
    /// <returns>
    /// The activity number.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit ProjActivityNumber editActivity(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        smmActivityParentLinkTable parentLink;
        ProjTable projTable;

        if (_set)
        {
            select firstonly crossCompany RecId from projTable 
                where projTable.ProjId == this.ProjId 
                && projTable.DataAreaId == this.ProjectDataAreaId;

            if (projTable.RecId != 0)
            {
                select firstonly crossCompany RecId, ActivityNumber from smmActivities 
                    where smmActivities.ActivityNumber == _activityNumber 
                    && smmActivities.DataAreaId == this.ProjectDataAreaId;

                select firstonly crosscompany ActivityNumber, RefRecId from parentLink 
                    where parentLink.ActivityNumber == smmActivities.ActivityNumber 
                    && parentLink.ParentType == smmActivityParentType::Project 
                    && parentLink.RefRecId == projTable.RecId 
                    && parentLink.DataAreaId == this.ProjectDataAreaId;

                if (smmActivities.RecId != 0 && parentLink.RecId != 0)
                {
                    this.ActivityNumber = smmActivities.ActivityNumber;
                    _activityNumber = this.ActivityNumber;
                }
                else
                {
                    _activityNumber = '';
                }
            }
        }
        else
        {
            _activityNumber = this.ActivityNumber;
        }

        return _activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the category lookup control in the timesheets favorites form.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the data in the control has changed.
    /// </param>
    /// <param name="_projCategoryId">
    /// A category ID entered from the bound control.
    /// </param>
    /// <returns>
    /// The category ID.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit ProjCategoryId editProjCategory(boolean _set, ProjCategoryId _projCategoryId)
    {
        ProjCategory   projCategory;

        if (_set)
        {
            select firstonly crossCompany RecId,CategoryId from projCategory where projCategory.CategoryId == _projCategoryId && projCategory.DataAreaId == this.ProjectDataAreaId;
            if (projCategory.RecId != 0)
            {
                this.CategoryId = projCategory.CategoryId;
                _projCategoryId = this.CategoryId;
            }
            else
            {
                this.CategoryId = '';
                _projCategoryId = '';
            }
        }
        else
        {
            _projCategoryId = this.CategoryId;
        }

        return _projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the project lookup control in the timesheets favorites form.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the data in the control has changed.
    /// </param>
    /// <param name="_projId">
    /// A project ID entered from the bound control.
    /// </param>
    /// <returns>
    /// A project ID.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit ProjId editProjId(boolean _set, ProjId _projId)
    {
        ProjTable   projTable;

        if (_set)
        {
            select firstonly crossCompany RecId,ProjId from projTable where projTable.ProjId == _projId && projTable.DataAreaId == this.ProjectDataAreaId;
            if (projTable.RecId != 0)
            {
                this.ProjId = projTable.ProjId;
                _projId = this.ProjId;
            }
            else
            {
                this.ProjId = '';
                _projId = '';
            }
        }
        else
        {
            _projId = this.ProjId;
        }

        return _projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the project.
    /// </summary>
    /// <returns>
    /// The name of the project.
    /// </returns>
    public display ProjName projName()
    {
        ProjTable projtable;

        select firstonly crossCompany Name from projTable
            where projTable.ProjId == this.ProjId &&
                projTable.DataAreaId == this.ProjectDataAreaId;

        return projTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the activity.
    /// </summary>
    /// <returns>
    /// The name of the activity.
    /// </returns>
    public display smmActivityPurpose activityTxt()
    {
        SmmActivities smmActivities;

        select firstonly crossCompany Purpose from smmActivities
            where smmActivities.ActivityNumber == this.ActivityNumber &&
                smmActivities.DataAreaId == this.ProjectDataAreaId;

        return smmActivities.Purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.TableGroupAll = TableGroupAll::All;

        this.ProjectDataAreaId = strUpr(curext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (this.(_fieldId) == this.orig().(_fieldId))
        {
            return;
        }

        switch (_fieldId)
        {
            case fieldNum(TSTimesheetFavorites, TableGroupAll):
                if (this.TableGroupAll == TableGroupAll::All)
                {
                    this.Resource         = 0;
                    this.ProjValEmplGroup = '';
                }
                else if (this.TableGroupAll == TableGroupAll::GroupId)
                {
                    this.Resource = 0;
                }
                else if (this.TableGroupAll == TableGroupAll::Table)
                {
                    this.ProjValEmplGroup = '';
                }

                break;

            case fieldNum(TSTimesheetFavorites, ProjectDataAreaId):
                this.ProjId = '';
                this.ActivityNumber = '';
                this.CategoryId = '';

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean result;

        result = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(TSTimesheetFavorites,Resource):
                result = result && ProjWorkerValidation::isWorkerInCurrentCompany(TSResource::workerRecId(this.Resource));
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             result;
        ProjValCheckTrans   projValCheckTrans = new ProjValCheckTrans();

        result = super();

        changecompany(this.ProjectDataAreaId)
        {
            if (this.checkIfRecordChanged())
            {
                if (TSTimesheetFavorites::exist(this.TableGroupAll, this.Resource, this.ProjId, this.CategoryId, this.ActivityNumber))
                {
                    result = checkFailed("@SYS343246");
                }
            }

            result = result && this.checkProjId() && this.checkCategoryId() && this.checkResource();

            if (result)
            {
                result = projValCheckTrans.validateMandatory(this);
            }
        }

        result = result && ProjWorkerValidation::isWorkerInCurrentCompany(TSResource::workerRecId(this.Resource));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfRecordChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if record has changed.
    /// </summary>
    /// <returns>
    ///     true if record has changed; otherwise, false.
    /// </returns>
    protected boolean checkIfRecordChanged()
    {
        return (this.orig().TableGroupAll != this.TableGroupAll
                || this.orig().Resource != this.Resource
                || this.orig().ProjId != this.ProjId
                || this.orig().CategoryId != this.CategoryId
                || this.orig().ActivityNumber != this.ActivityNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActivityLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cross-company <c>Query</c> object that will be used to perform an activity lookup for
    /// timesheet favorites entries in Microsoft Dynamics AX client.
    /// </summary>
    /// <param name="_tsTimesheetFavorites">
    /// A <c>TSTimesheetFavorites</c> record.
    /// </param>
    /// <returns>
    /// A query of activities filtered by project.
    /// </returns>
    public static Query buildActivityLookupQuery(TSTimesheetFavorites _tsTimesheetFavorites)
    {
        ProjTable               projTable;

        select firstonly crossCompany RecId from projTable
            where projTable.ProjId      == _tsTimesheetFavorites.ProjId
               && projTable.DataAreaId  == _tsTimesheetFavorites.ProjectDataAreaId;

        var hierarchyTreeLookup = new HierarchyTreeLookup();
        hierarchyTreeLookup.parmRefRecId(projTable.RecId);

        Query query = hierarchyTreeLookup.buildQueryListView(true);

        if (_tsTimesheetFavorites.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_tsTimesheetFavorites.ProjectDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjCategoryLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cross-company <c>Query</c> object that will be used to perform a category lookup for
    /// timesheet favorites entries in Enterprise Portal and Microsoft Dynamics AX client.
    /// </summary>
    /// <param name="_tsTimesheetFavorites">
    /// A <c>TSTimesheetFavorites</c> record.
    /// </param>
    /// <returns>
    /// A query that is created based on the category-resource validation setup and filtered via project.
    /// </returns>
    public static Query buildProjCategoryLookupQuery(TSTimesheetFavorites _tsTimesheetFavorites)
    {
        Query                   query;
        ProjCategoryLookup      projCategoryLookup = new ProjCategoryLookup();
        boolean                 isInterCompany = (_tsTimesheetFavorites.ProjectDataAreaId != curext());

        projCategoryLookup.parmCategoryType(ProjCategoryType::Hour);
        projCategoryLookup.parmFilterEstimate(NoYes::Yes);
        projCategoryLookup.parmShowInactiveCategories(ProjParameters::find().ShowInactiveCategories);
        projCategoryLookup.parmIsIntercompany(isInterCompany);

        changecompany(_tsTimesheetFavorites.ProjectDataAreaId)
        {
            query = projCategoryLookup.buildQuery(tableNum(TSTimesheetFavorites), _tsTimesheetFavorites.ProjId, _tsTimesheetFavorites.Resource);
        }

        if (_tsTimesheetFavorites.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_tsTimesheetFavorites.ProjectDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjectLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cross-company <c>Query</c> object that will be used to perform a project lookup for
    /// timesheet favorties entries in Enterprise Portal and Microsoft Dynamics AX client.
    /// </summary>
    /// <param name="_tsTimesheetFavorites">
    /// A <c>TSTimesheetFavorites</c> record.
    /// </param>
    /// <returns>
    /// A query that is created based on the project-resource validation setup and customer account.
    /// </returns>
    public static Query buildProjectLookupQuery(TSTimesheetFavorites _tsTimesheetFavorites)
    {
        Query                   query = new Query();
        ProjTableLookup         projTableLookup = new ProjTableLookup();
        boolean                 isInterCompany = (_tsTimesheetFavorites.ProjectDataAreaId != curext());

        changecompany(_tsTimesheetFavorites.ProjectDataAreaId)
        {
            projTableLookup.parmIsIntercompany(isInterCompany);
            query = projTableLookup.buildProjectLookupQueryResource(tableNum(TSTimesheetLine), _tsTimesheetFavorites.CategoryId, _tsTimesheetFavorites.Resource);
        }

        if (_tsTimesheetFavorites.ProjectDataAreaId != curext())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_tsTimesheetFavorites.ProjectDataAreaId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the timesheet line records for the timesheet favorites.
    /// </summary>
    /// <param name = "_timesheetNbr">
    ///     The timesheet number.
    /// </param>
    /// <param name = "_projPeriodTimesheetWeekRecId">
    ///     The record ID of <c>ProjPeriodTimesheetWeek</c>.
    /// </param>
    /// <param name = "_tTimesheetFavorites">
    ///     Instance of <c>TSTimesheetFavorites</c>.
    /// </param>
    /// <returns>
    ///     true if the insertions succeeds; otherwise, false.
    /// </returns>
    protected static boolean insertLine(TSTimesheetNbr          _timesheetNbr,
                                        RefRecId                _projPeriodTimesheetWeekRecId,
                                        TSTimesheetFavorites    _timesheetFavorites)
    {
        boolean         ret = false;
        
        TSTimesheetLine tTimesheetLine = TSTimesheetFavorites::initTSTimesheetLineFromFavorites(_timesheetNbr, _projPeriodTimesheetWeekRecId, _timesheetFavorites);

        if (tTimesheetLine.validateWrite())
        {
            tTimesheetLine.insert();

            TSTimesheetLineWeek::loadFromLine(tTimesheetLine, NoYes::No);
            ret = true;
        }
        else
        {
            // Could not create timesheet line for Project: (%1)  Activity: (%2)  Category: (%3)
            info(strFmt("@SYS183928", _timesheetFavorites.ProjId,
                                        _timesheetFavorites.ActivityNumber,
                                        _timesheetFavorites.CategoryId));
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTSTimesheetLineFromFavorites</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Initializes values to <c>TSTimesheetLine</c> from <c>TSTimesheetFavorites</c>.
    /// </summary>
    /// <param name = "_timesheetNbr">
    ///		The timesheet number.
    /// </param>
    /// <param name = "_projPeriodTimesheetWeekRecId">
    ///		The record ID of <c>ProjPeriodTimesheetWeek</c>.
    /// </param>
    /// <param name = "_timesheetFavorites">
    ///		Instance of <c>TSTimesheetFavorites</c>.
    /// </param>
    /// <returns>
    ///		The buffer of <c>TSTimesheetLine</c> table.
    /// </returns>
    protected static TSTimeSheetLine initTSTimesheetLineFromFavorites(
        TSTimesheetNbr _timesheetNbr,
        RefRecId _projPeriodTimesheetWeekRecId,
        TSTimesheetFavorites _timesheetFavorites)
    {
        TSTimesheetLine tTimesheetLine;

        tTimesheetLine.ProjId = _timesheetFavorites.ProjId;
        tTimesheetLine.TimesheetNbr = _timesheetNbr;
        tTimesheetLine.ActivityNumber = _timesheetFavorites.ActivityNumber;
        tTimesheetLine.CategoryId = _timesheetFavorites.CategoryId;
        tTimesheetLine.ProjPeriodTimesheetWeek = _projPeriodTimesheetWeekRecId;
        tTimesheetLine.ProjectDataAreaId = _timesheetFavorites.ProjectDataAreaId;
        tTimesheetLine.initValue();
        tTimesheetLine.psaSetCurrencyId();

        return tTimesheetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTimesheetLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the timesheet line records for the timesheet favorites.
    /// </summary>
    /// <param name = "_resourceRecId">
    ///     The resource identifier.
    /// </param>
    /// <param name = "_sTimesheetNbr">
    ///     The timesheet number.
    /// </param>
    /// <param name = "_refRecId">
    ///     The record ID of <c>ProjPeriodTimesheetWeek</c>.
    /// </param>
    /// <returns>
    ///     true if the insertions succeeds; otherwise, false.
    /// </returns>
    public static boolean createTimesheetLines( ResourceRecId  _resourceRecId, 
                                                TSTimesheetNbr _sTimesheetNbr,
                                                RefRecId       _refRecId = 0)
    {
        boolean                     ret = false;
        TSTimesheetFavorites        tTimesheetFavorites;
        TSTimesheetTable            timesheetTable = TSTimesheetTable::find(_sTimesheetNbr);
        TSTimesheetLine             tTimesheetLine;
        ProjValEmplProjSetup        resourceValidation;
        ProjValEmplProjSetup        projectValidation;
        boolean                     isIntercompanyEnabled = false;

        // Derive from project paramters
        isIntercompanyEnabled = ProjParameters::find(false).EnableIntercompanyTimesheet;

        if (_resourceRecId && _sTimesheetNbr)
        {
            // empl
            while select tTimesheetFavorites
                where tTimesheetFavorites.Resource == _resourceRecId
                   && tTimesheetFavorites.TableGroupAll == TableGroupAll::Table
                   // If the isIntercompanyEnabled is false, only then add the data areaid condition
                   // Else do not add any condition on dataareaid
                   && (isIntercompanyEnabled || tTimesheetFavorites.ProjectDataAreaId == curext())
            {
                if (!TSTimesheetLine::existFavorite(_sTimesheetNbr, tTimesheetFavorites, _refRecId))
                {
                    ret = TSTimesheetFavorites::insertLine(timesheetTable.TimesheetNbr, _refRecId, tTimesheetFavorites);
                }
            }

            while select GroupId, ProjId from resourceValidation
                join GroupId, Projid from projectValidation
                    group by resourceValidation.GroupId, resourceValidation.ProjId
                    where resourceValidation.GroupId   == projectValidation.GroupId
                       && resourceValidation.Resource  == _resourceRecId
                       && resourceValidation.Projid    == ''
                       && projectValidation.Resource == 0
            {
                while select tTimesheetFavorites
                    where tTimesheetFavorites.ProjValEmplGroup == resourceValidation.GroupId
                       && tTimesheetFavorites.TableGroupAll    == TableGroupAll::GroupId
                       // If the isIntercompanyEnabled is false, only then add the data areaid condition
                       // Else do not add any condition on dataareaid
                       && (isIntercompanyEnabled || tTimesheetFavorites.ProjectDataAreaId == curext())
                {
                    if (!TSTimesheetLine::existFavorite(_sTimesheetNbr, tTimesheetFavorites, _refRecId))
                    {
                        ret = TSTimesheetFavorites::insertLine(timesheetTable.TimesheetNbr, _refRecId, tTimesheetFavorites);
                    }
                }
            }
        }

        if (_sTimesheetNbr)
        {
            // all
            while select tTimesheetFavorites
                where tTimesheetFavorites.TableGroupAll == TableGroupAll::All
                // If the isIntercompanyEnabled is false, only then add the data areaid condition
                // Else do not add any condition on dataareaid
                   && (isIntercompanyEnabled || tTimesheetFavorites.ProjectDataAreaId == curext())
            {
                if (!TSTimesheetLine::existFavorite(_sTimesheetNbr, tTimesheetFavorites, _refRecId))
                {
                    ret = TSTimesheetFavorites::insertLine(timesheetTable.TimesheetNbr, _refRecId, tTimesheetFavorites);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify whether a record exists in timesheet favorites for the input parameters.
    /// </summary>
    /// <param name = "_eTableGroupAll">The valid for (Table, Group, All).</param>
    /// <param name = "_resource">The resource identifier.</param>
    /// <param name = "_sProjId">The project identifier.</param>
    /// <param name = "_sProjCategoryId">The category identifier.</param>
    /// <param name = "_sProjActivityNumber">The activity identifier.</param>
    /// <returns>True if the record exists, otherwise false.</returns>
    public static boolean exist(TableGroupAll      _eTableGroupAll,
                                ResourceRecId      _resource,
                                ProjId             _sProjId,
                                ProjCategoryId     _sProjCategoryId,
                                ProjActivityNumber _sProjActivityNumber = '')
    {
        return (select firstonly tsTimesheetFavorites
                  where tsTimesheetFavorites.TableGroupAll  == _eTableGroupAll
                     && tsTimesheetFavorites.Resource       == _resource
                     && tsTimesheetFavorites.ProjId         == _sProjId
                     && tsTimesheetFavorites.CategoryId     == _sProjCategoryId
                     && tsTimesheetFavorites.ActivityNumber == _sProjActivityNumber).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFavorite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify whether a record exists in the timesheet favorites for the input timesheet line.
    /// </summary>
    /// <param name = "_tsTimesheetLine">The <c>TSTimesheetLine</c> record buffer.</param>
    /// <returns>True if the record exists, otherwise false.</returns>
    public static boolean existFavorite(TSTimesheetLine _tsTimesheetLine)
    {
        TSTimesheetFavorites    tsTimesheetFavorites;

        select firstonly tsTimesheetFavorites
            where tsTimesheetFavorites.TableGroupAll     == TableGroupAll::Table
               && tsTimesheetFavorites.Resource          == _tsTimesheetLine.Resource
               && tsTimesheetFavorites.ProjId            == _tsTimesheetLine.ProjId
               && tsTimesheetFavorites.CategoryId        == _tsTimesheetLine.CategoryId
               && tsTimesheetFavorites.ProjectDataAreaId == _tsTimesheetLine.ProjectDataAreaId
               && tsTimesheetFavorites.ActivityNumber    == _tsTimesheetLine.ActivityNumber;

        if (tsTimesheetFavorites)
        {
            return true;
        }

        select firstonly tsTimesheetFavorites
            where tsTimesheetFavorites.TableGroupAll     == TableGroupAll::All
               && tsTimesheetFavorites.ProjId            == _tsTimesheetLine.ProjId
               && tsTimesheetFavorites.CategoryId        == _tsTimesheetLine.CategoryId
               && tsTimesheetFavorites.ProjectDataAreaId == _tsTimesheetLine.ProjectDataAreaId;

        if (tsTimesheetFavorites)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByEmployeeRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify whether a <c>TSTimesheetFavorites</c> record exists for the input employee relation.
    /// </summary>
    /// <param name = "_tableGroupAll">The valid for (Table, Group, All).</param>
    /// <param name = "_emplRelation">The timesheet employee relation.</param>
    /// <param name = "_projId">The project identifier.</param>
    /// <param name = "_categoryId">The category identifier.</param>
    /// <param name = "_forUpdate">A boolean value to indicate the record selection for update.</param>
    /// <returns>The <c>TSTimesheetFavorites</c> buffer for the employee relation.</returns>
    public static TSTimesheetFavorites findByEmployeeRelation(TableGroupAll  _tableGroupAll,
                                                                TSEmplRelation _emplRelation,
                                                                ProjId         _projId,
                                                                ProjCategoryId _categoryId,
                                                                boolean        _forUpdate)
    {
        TSTimesheetFavorites ttsTimesheetFavorites;

        ttsTimesheetFavorites.selectForUpdate(_forUpdate);

        select firstonly ttsTimesheetFavorites
            where ttsTimesheetFavorites.TableGroupAll == _tableGroupAll
               && ttsTimesheetFavorites.EmplRelation  == _emplRelation
               && ttsTimesheetFavorites.ProjId        == _projId
               && ttsTimesheetFavorites.CategoryId    == _categoryId;

        return ttsTimesheetFavorites;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify whether a <c>TSTimesheetFavorites</c> record exists for the input resource.
    /// </summary>
    /// <param name = "_tableGroupAll">The valid for (Table, Group, All).</param>
    /// <param name = "_resource">The resource identifier.</param>
    /// <param name = "_projId">The project identifier.</param>
    /// <param name = "_categoryId">The category identifier.</param>
    /// <param name = "_forUpdate">A boolean value to indicate the record selection for update.</param>
    /// <returns>The <c>TSTimesheetFavorites</c> buffer for the resource.</returns>
    public static TSTimesheetFavorites findByResource(TableGroupAll   _tableGroupAll,
                                                        ResourceRecId   _resource,
                                                        ProjId          _projId,
                                                        ProjCategoryId  _categoryId,
                                                        boolean         _forUpdate)
    {
        TSTimesheetFavorites ttsTimesheetFavorites;

        ttsTimesheetFavorites.selectForUpdate(_forUpdate);

        select firstonly ttsTimesheetFavorites
                  where ttsTimesheetFavorites.TableGroupAll == _tableGroupAll
                     && ttsTimesheetFavorites.Resource      == _resource
                     && ttsTimesheetFavorites.ProjId        == _projId
                     && ttsTimesheetFavorites.CategoryId    == _categoryId;

        return ttsTimesheetFavorites;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowsTransferToFavorites</Name>
				<Source><![CDATA[
	protected static boolean statusAllowsTransferToFavorites(TSAppStatus _approvalStatus)
    {
        return _approvalStatus != TSAppStatus::Create
            && _approvalStatus != TSAppStatus::Returned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferAllFavorites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer all timesheet favorites to timesheet lines.
    /// </summary>
    /// <param name = "_timesheetNbr">The timesheet identitifier.</param>
    /// <param name = "_refRecId">The recId of <c>ProjPeriodTimesheetWeek</c>.</param>
    public static void transferAllFavorites(TSTimesheetNbr _timesheetNbr, RefRecId _refRecId = 0)
    {
        if (!_timesheetNbr)
        {
            return;
        }

            TSTimesheetTable timesheetTable = TSTimesheetTable::find(_timesheetNbr);

        if (TSTimesheetFavorites::statusAllowsTransferToFavorites(timesheetTable.ApprovalStatus))
        {
            // Unable to transfer favorites to timesheet with status %1
            info(strFmt("@SYS190498", timesheetTable.ApprovalStatus));
        }
        else
        {
            ttsbegin;
            TSTimesheetFavorites::createTimesheetLines(timesheetTable.Resource, _timesheetNbr, _refRecId);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultCategory</Name>
				<Source><![CDATA[
    public ProjCategoryId setDefaultCategory(boolean _isInterCompany = false)
    {
        ProjCategoryId  categoryId;

        if (this.Resource)
        {
            categoryId = ResourceFacade::getDefaultTimeCategoryId(this.Resource);
            if (!_isInterCompany && !this.isCategoryValid(categoryId))
            {
                categoryId = '';
            }
        }

        if (categoryId != '' && _isInterCompany)
        {
            categoryId = this.initializeInterCompanyCategory(categoryId);
        }

        if (categoryId == '' && this.ActivityNumber)
        {
            this.setCategoryIdFromActivity();
            categoryId = this.CategoryId;
        }

        if (categoryId == '')
        {
            categoryId = ProjParameters::findByDataArea(this.ProjectDataAreaId).EmplCategory;
            if (!this.isCategoryValid(categoryId, _isInterCompany))
            {
                categoryId = '';
            }
        }

        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryValid</Name>
				<Source><![CDATA[
    public boolean isCategoryValid(ProjCategoryId _categoryId, boolean  _isIntercompany = false)
    {
        ProjParameters              projParameters;
        ProjValEmplCategorySetUp    projValEmplCategorySetUp, projValEmplCategorySetUp2;
        ProjValProjCategorySetUp    projValProjCategorySetUp, projValProjCategorySetUp2;
        boolean                     isAbsence;

        if (_categoryId == '')
        {
            return false;
        }

        changecompany(this.ProjectDataAreaId)
        {
            // Use project parameters of the company that owns the project,
            // associsated with the current timesheet line
            projParameters  = ProjParameters::find(false);

            // Check to see if the ProjCategoryType is of type hour
            if (ProjCategory::find(_categoryId, false).CategoryType != ProjCategoryType::Hour)
            {
                return false;
            }

            if (projParameters.ValidationEmplCategory == ProjValParameter::Mandatory)
            {
                if (!this.Resource && ProjCategory::find(_categoryId).ProjCategoryEmplOption == ProjCategoryEmplOption::Mandatory)
                {
                    return false;
                }

                if (ResourceFacade::validateResourceCategory(this.Resource) == NoYes::Yes)
                {
                    select firstonly projValEmplCategorySetUp where
                    projValEmplCategorySetUp.Resource               == this.Resource  &&
                            projValEmplCategorySetUp.CategoryId     == _categoryId;

                    // Check group
                    if (!projValEmplCategorySetUp)
                    {
                        select projValEmplCategorySetUp where
                        projValEmplCategorySetUp.CategoryId         == _categoryId  &&
                        projValEmplCategorySetUp.GroupId
                            exists join projValEmplCategorySetUp2 where
                                projValEmplCategorySetUp2.Resource  == this.Resource  &&
                                projValEmplCategorySetUp2.GroupId   == projValEmplCategorySetUp.GroupId;

                        if (!projValEmplCategorySetUp)
                        {
                            return false;
                        }
                    }
                }
            }
            else if (projParameters.TimesheetValidateAbsence && projParameters.ValidationProjCategory != ProjValParameter::Mandatory)
            {
                isAbsence = projParameters.TimesheetAbsenceProjId == this.ProjId;
                if (ProjCategory::find(_categoryId).TsAbsence != isAbsence)
                {
                    return false;
                }
            }

            if (this.ProjId)
            {
                if (projParameters.ValidationProjCategory == ProjValParameter::Mandatory)
                {
                    if (ProjTable::find(this.ProjId).ValidateProjCategory == NoYes::Yes)
                    {
                        select firstonly projValProjCategorySetUp where
                        projValProjCategorySetUp.CategoryId                 == _categoryId  &&
                        projValProjCategorySetUp.ProjId                     == this.ProjId;

                        // Check group
                        if (!projValProjCategorySetUp)
                        {
                            select projValProjCategorySetUp where
                            projValProjCategorySetUp.ProjId                 == this.ProjId  &&
                            projValProjCategorySetUp.GroupId
                                exists join projValProjCategorySetUp2 where
                                    projValProjCategorySetUp2.CategoryId    == _categoryId  &&
                                    projValProjCategorySetUp2.GroupId       == projValProjCategorySetUp.GroupId;

                            if (!projValProjCategorySetUp)
                            {
                                return false;
                            }
                        }
                    }
                }
            }

            if (this.validateProjActivityMandatoryCategory(_categoryId) == false)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInterCompanyCategory</Name>
				<Source><![CDATA[
    private ProjCategoryId initializeInterCompanyCategory(ProjCategoryId _categoryId)
    {
        ProjCategory        projCategory;
        CategoryTable       categoryTable;
        SharedCategory      sharedCategory;
        ProjCategoryId      categoryId;

        categoryTable   = CategoryTable::find(_categoryId);
        sharedCategory  = SharedCategory::findRecId(categoryTable.SharedCategory);

        if (this.ProjectDataAreaId)
        {
            changecompany(this.ProjectDataAreaId)
            {
                categoryTable.clear();

                select CategoryId from categoryTable
                where categoryTable.SharedCategory == sharedCategory.RecId;

                projCategory = ProjCategory::find(categoryTable.CategoryId);
                select firstonly CategoryId from projCategory where
                projCategory.CategoryId   == categoryTable.CategoryId &&
                projCategory.CategoryType == ProjCategoryType::Hour &&
                projCategory.Active       == NoYes::Yes;

                if (projCategory.RecId && this.isCategoryValid(projCategory.CategoryId, true))
                {
                    categoryId = projCategory.CategoryId;
                }
            }
        }
        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryIdFromActivity</Name>
				<Source><![CDATA[
    protected void setCategoryIdFromActivity()
    {
        ProjActivity projActivity;

        changeCompany(this.ProjectDataAreaId)
        {
            select firstonly CategoryDefault from projActivity
                where projActivity.ActivityNumber == this.ActivityNumber;
        }

        if (this.isCategoryValid(projActivity.CategoryDefault))
        {
            this.CategoryId = projActivity.CategoryDefault;
        }
        else
        {
            this.CategoryId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjActivityMandatoryCategory</Name>
				<Source><![CDATA[
    public boolean validateProjActivityMandatoryCategory(ProjCategoryId _categoryId)
    {
        ProjActivity projActivity;

        if (this.ActivityNumber)
        {
            select firstonly Mandatory, CategoryDefault from projActivity
                where projActivity.ActivityNumber == this.ActivityNumber;

            if (projActivity.Mandatory && _categoryId != projActivity.CategoryDefault)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS322224</DeveloperDocumentation>
	<FormRef>TSTimesheetFavoritesSetup</FormRef>
	<Label>@SYS190454</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TableGroupAll</TitleField1>
	<TitleField2>EmplRelation</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TGARelProjCatTxtIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableGroupAll</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmplRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TableGroupAll</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmplRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Timesheet</Name>
			<Label>@SYS138979</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjValEmplGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableGroupAll</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmplRelation</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSEmplRelation</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
			<Label>@SYS40182</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@SYS305493</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjValEmplGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjValEmplProjGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TableGroupAll</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TSResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TGARelProjCatTxtIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TableGroupAll</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EmplRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjValEmplProjTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjValEmplGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjectDataArea</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjectDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetFavorites</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetFavorites</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjValEmplProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjValEmplProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjValEmplProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TSTimesheetFavorites</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjValEmplGroup</Name>
					<SourceEDT>ProjValEmplProjGroupId</SourceEDT>
					<Field>ProjValEmplGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetFavorites</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_TSTimesheetFavorites</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>