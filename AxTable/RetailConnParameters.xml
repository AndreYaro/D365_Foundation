<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailConnParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailConnParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws the error while renaming the record if the distribution type is other than â€˜NoDistributionâ€™.
    /// </summary>
    /// <remarks>
    /// The <c>errorOnRename</c> method of <c>RetailConnActionManagement</c> is called.
    /// </remarks>
    public void renamePrimaryKey()
    {
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the extension that is used for the current company.
    /// </summary>
    /// <returns>
    /// The extension that is used for the current company.
    /// </returns>
    public static dataAreaId currentExt()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailConnParameters</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_createDefault">
    /// A Boolean value that indicates whether to create the parameter if it does not exist; optional.
    /// </param>
    /// <returns>
    /// A <c>RetailConnParameters</c> record if found; otherwise, an empty record.
    /// </returns>
    static RetailConnParameters find(boolean _forUpdate = false, boolean _createDefault = true)
    {
        RetailConnParameters parameter;

        parameter.selectForUpdate(_forUpdate);

        select firstonly parameter
            index keyIdx
            where parameter.key == 0;

        if (!parameter && !parameter.isTmp() && _createDefault)
        {
            Company::createParameter(parameter);
        }

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCDXTryCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the try count value indicating the number of times CDX should try to process a session before it marks the session as canceled.
    /// </summary>
    /// <returns>An integer value indicating the number of times to try to process the CDX session.</returns>
    /// <remarks>If the try count is set to 0 in this table then this method returns a default try count value of three.</remarks>
    public static int getCDXTryCount()
    {
        const int Default_Try_Count = 3;
        int tryCount = RetailConnParameters::find().TryCount;

        // if tryCount is set to zero it means we will use the default value of 3
        return tryCount == 0 ? Default_Try_Count : tryCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHQMessageDBConnectionString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets HQ message database connection string.
    /// </summary>
    /// <returns>
    /// HQ message database connections string.
    /// </returns>
    public static str getHQMessageDBConnectionString()
    {
        System.Data.SqlClient.SqlConnectionStringBuilder connectionStringBuilder;
        RetailConnParameters                             parameters;
        str                                              instanceName;
        str                                              dbName;
        str                                              serverName;
        boolean                                          integratedSecurity = true;
        str                                              connStr;
        str                                              dataSourceName;

        select firstOnly HQMsgDBInstanceName, HQMsgDBName, HQMsgDBServerName
        from parameters;

        serverName = parameters.HQMsgDBServerName;
        instanceName = parameters.HQMsgDBInstanceName;
        dbName = parameters.HQMsgDBName;

        if (!serverName || !dbName)
        {
            // Async server message database is not set properly.
            throw Global::error("@REX4520720");
        }

        connectionStringBuilder = new System.Data.SqlClient.SqlConnectionStringBuilder();

        //If instance name is not empty, set datasource as servername\instancename
        //Else it should be serverName
        if (strLen(strLTrim((strRTrim(instanceName)))) > 0)
        {
            dataSourceName = serverName + "\\" + instanceName;
        }
        else
        {
            dataSourceName = serverName;
        }

        //Set prameters for connecting to DB using connection string builder
        connectionStringBuilder.set_DataSource(dataSourceName);
        connectionStringBuilder.set_IntegratedSecurity(integratedSecurity);
        connectionStringBuilder.set_InitialCatalog(dbName);
        connectionStringBuilder.set_Encrypt(true);
        connectionStringBuilder.set_TrustServerCertificate(true);

        //Create connectionString
        connStr = connectionStringBuilder.get_ConnectionString();

        return connStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentBatchStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Current batch status.
    /// </summary>
    /// <returns>Batch status.</returns>
    display str currentBatchStatus()
    {
        BatchJob bj;

        if (!this.BatchJobId)
        {
            return "@Retail:CdxBatchJobStatusNotAvailable";
        }

        select firstonly Status from bj where bj.RecId == this.BatchJobId;

        if (bj)
        {
            SysDictEnum dictEnum = new SysDictEnum(enumNum(BatchStatus));
            return dictEnum.index2Label(bj.Status);
        }
        else
        {
            return "@Retail:CdxBatchJobStatusNotAvailable";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSasTokenTimeout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the expiry interval for a SAS token.
    /// </summary>
    /// <returns>The expiry interval of a SAS token.</returns>
    public RetailCDXPackageLinkValidDuration getSasTokenTimeout()
    {
        // The SAS token timeout should be at least 4h.
        RetailCDXPackageLinkValidDuration sasTokenTimeout = max(this.SharedAccessSignatureTimeout, 4);

        // The table stores the value in hours, but we use it in minutes.
        sasTokenTimeout = sasTokenTimeout * 60;

        return sasTokenTimeout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate field values
    /// </summary>
    /// <param name = "_fieldIdToCheck">FieldIdToCheck</param>
    /// <returns>True if SqlCommandTimeout is greater than MinimumSqlCommandTimeoutInSeconds</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        if (ret && fieldNum(RetailConnParameters, SqlCommandTimeout) == _fieldIdToCheck
           && this.SqlCommandTimeout < RetailCDXConstants::MinimumSqlCommandTimeoutInSeconds)
        {
            ret = checkFailed(strFmt("@Retail:SQLCommandTimeOutMinValue"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlCommandTimeout</Name>
				<Source><![CDATA[
    public RetailCdxSqlCommandTimeout getSqlCommandTimeout()
    {

        RetailCdxSqlCommandTimeout sqlCommandTimeout = RetailConnParameters::find().SqlCommandTimeout;
        return sqlCommandTimeout  < RetailCDXConstants::MinimumSqlCommandTimeoutInSeconds ? RetailCDXConstants::MinimumSqlCommandTimeoutInSeconds : sqlCommandTimeout;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4040235</DeveloperDocumentation>
	<FormRef>RetailConnParameters</FormRef>
	<Label>@RET35</Label>
	<TableGroup>Parameter</TableGroup>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>keyIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ChannelManagement</Modules>
	<PrimaryIndex>keyIdx</PrimaryIndex>
	<ReplacementKey>keyIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>key</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>batchTaskSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SqlCommandTimeout</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StripMasterData</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreCustomJobWarning</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CDXMonConfig</Name>
			<Label>@REX4160467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MonitoringRetentionDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchJobId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DataDeletion</Name>
			<Label>@RET43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>daysActionsExist</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>daysSchedulerLogExist</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>daysMessagesExist</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HQMessageDBSetup</Name>
			<Label>@REX1326</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HQMsgDBInstanceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HQMsgDBName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TryCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HQMsgDBServerName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>batchTaskSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailConnBatchTaskSize</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>daysActionsExist</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@RET38</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>daysMessagesExist</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@RET40</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>daysSchedulerLogExist</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@RET39</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HQMsgDBInstanceName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailConnProfileServer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HQMsgDBName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailConnProfileDatabaseName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HQMsgDBServerName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailConnProfileServer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>key</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MonitoringRetentionDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCDXMonDataRetentionDays</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TryCount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCDXTryCount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SqlCommandTimeout</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCdxSqlCommandTimeout</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SharedAccessSignatureTimeout</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCDXSharedAccessSignatureTimeout</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FullDatasetGenerationInterval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCDXFullDatasetGenerationInterval</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchJobId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StripMasterData</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCdxStripMasterData</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OptimizeDatabaseStatisticsAutomatically</Name>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IgnoreCustomJobWarning</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@Retail:RetailCdxIgnoreCustomSubjobWarningHelpText</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@Retail:RetailCdxIgnoreCustomSubjobWarningLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableOnPremCsuIndexCompression</Name>
			<ExtendedDataType>RetailEnableOnPremCsuIndexCompression</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>keyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BatchJob</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BatchJob</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BatchJobId</Name>
					<Field>BatchJobId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>