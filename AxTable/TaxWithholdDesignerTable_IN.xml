<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdDesignerTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdDesignerTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lastId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last Id in <c>TaxWithholdDesignerTable_IN</c> table.
    /// </summary>
    /// <param name="_taxWithholdGroup">
    /// TaxWithhold Group used to find the record.
    /// </param>
    /// <returns>
    /// Returning last Id + 1
    /// </returns>
    public Integer lastId(TaxWithholdGroup _taxWithholdGroup)
    {
        return(select maxof(id) from taxWithholdDesignerTable_IN
                   index hint GroupIdx
                   where taxWithholdDesignerTable_IN.TaxWithholdGroup == _taxWithholdGroup).id + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(TaxWithholdDesignerTable_IN, TaxWithholdCode):
                    if (this.TaxWithholdCode)
                    {
                        if (ret && TaxWithholdGroupHeading::find(this.TaxWithholdGroup).TaxType_IN == TaxWithholdCodeType_IN::TDS &&
                            TaxWithholdTable::find(this.TaxWithholdCode).TaxType_IN != TaxWithholdCodeType_IN::TDS)
                        {
                            ret = checkFailed(strfmt("@GLS5458", this.TaxWithholdCode, TaxWithholdCodeType_IN::TDS));
                        }
                        if (ret && TaxWithholdGroupHeading::find(this.TaxWithholdGroup).TaxType_IN == TaxWithholdCodeType_IN::TCS &&
                            TaxWithholdTable::find(this.TaxWithholdCode).TaxType_IN != TaxWithholdCodeType_IN::TCS)
                        {
                            ret = checkFailed(strfmt("@GLS5458", this.TaxWithholdCode, TaxWithholdCodeType_IN::TCS));
                        }
                    }
                    break;

                case fieldnum(TaxWithholdDesignerTable_IN, Basis):
                    if (this.Basis)
                    {
                        if (this.id == 1 && this.Basis == TaxWithholdBasis_IN::ExclGrossAmount)
                        {
                            ret = checkFailed("@GLS5448");
                        }
                    }
                    break;

                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdDesignerTable_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_taxWithholdGroup">
    /// Withold tax group.
    /// </param>
    /// <param name="_taxWithholdCode">
    /// Withhold tax code .
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    public static boolean exist(TaxWithholdGroup _taxWithholdGroup,
                                       TaxWithholdCode  _taxWithholdCode)
    {
        return _taxWithholdGroup &&
               (select firstonly RecId from taxWithholdDesignerTable_IN
                    where taxWithholdDesignerTable_IN.TaxWithholdGroup  ==  _taxWithholdGroup
                       && taxWithholdDesignerTable_IN.TaxWithholdCode   ==  _taxWithholdCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxWithholdDesignerTable_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing TaxWithholdDesignerTable_IN table.
    /// </returns>
    public static TaxWithholdDesignerTable_IN find(RefRecId            _recId,
                                                   boolean             _forupdate        = false,
                                                   ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdDesignerTable_IN taxWithholdDesignerTable;

        taxWithholdDesignerTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdDesignerTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdDesignerTable
            where taxWithholdDesignerTable.RecId == _recId;

        return taxWithholdDesignerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxWithholdGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Reads the <c>TaxWithholdDesignerTable_IN</c> table for the specified parameters.
    /// </summary>
    /// <param name="_taxWithholdGroup">
    /// TaxWithhold group , to find the record for.
    /// </param>
    /// <param name="_taxWithholdCode">
    /// TaxWithhold code,to find the record for.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.;Optional
    /// </param>
    /// <returns>
    ///  A buffer containing <c>TaxWithholdDesignerTable_IN</c> table.
    /// </returns>
    public static TaxWithholdDesignerTable_IN  findByTaxWithholdGroup(TaxWithholdGroup _taxWithholdGroup,
                                                                             TaxWithholdCode  _taxWithholdCode,
                                                                             boolean          _forUpdate = false)
    {
        TaxWithholdDesignerTable_IN  taxWithholdDesigner;

        if (_taxWithholdGroup)
        {
            taxWithholdDesigner.selectForUpdate(_forUpdate);
            select firstonly taxWithholdDesigner
                index hint GroupIdx
                where taxWithholdDesigner.TaxWithholdGroup == _taxWithholdGroup
                   && taxWithholdDesigner.TaxWithholdCode  == _taxWithholdCode;
        }
        return taxWithholdDesigner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isonJewelry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if it is on Jewelry.
    /// </summary>
    /// <param name="_taxWithholdGroup">
    /// TaxWithholdGroup.
    /// </param>
    /// <param name="_transDate">
    /// TransDate.
    /// </param>
    /// <returns>
    /// true is line is by cash, otherwise false.
    /// </returns>
    public static boolean isonJewelry(TaxWithholdGroup _taxWithholdGroup, TransDate _transDate)
    {
        boolean                         ret = false;
        TaxWithholdDesignerTable_IN     taxWithholdDesignerTable;
        TaxWithholdTable                taxWithholdTableLoc;
        TaxWithholdThresholdLimit_IN    taxWithholdThresholdLimit;

        select firstonly PerTransThreshhold, RecId
            from taxWithholdThresholdLimit
                where
                    (!taxWithholdThresholdLimit.FromDate
                    || (taxWithholdThresholdLimit.FromDate          <= _transDate
                    && taxWithholdThresholdLimit.ToDate             >= _transDate))
        exists join taxWithholdTableLoc
            where taxWithholdTableLoc.TaxWithholdComponent_IN       == taxWithholdThresholdLimit.TaxWithholdComponent
        exists join taxWithholdDesignerTable
            where taxWithholdDesignerTable.TaxWithholdCode          == taxWithholdTableLoc.TaxWithholdCode
                && taxWithholdDesignerTable.TaxWithholdGroup        == _taxWithholdGroup
                && taxWithholdDesignerTable.Basis                   == TaxWithholdBasis_IN::GrossAmount;

        if (taxWithholdThresholdLimit.RecId && taxWithholdThresholdLimit.PerTransThreshhold != 0)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63785</DeveloperDocumentation>
	<FormRef>TaxWithholdDesignerTable_IN</FormRef>
	<Label>@SYS67084</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxWithholdCode</TitleField1>
	<TitleField2>Expression</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>GroupIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Expression</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ArgumentsAvailable</Name>
			<Label>@SYS84660</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Expression</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Basis</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Expression</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdExpression_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS5468</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
			<Label>@SYS76477</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdGroup</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TaxWithholdGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxWithholdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<SourceEDT>TaxWithholdCode</SourceEDT>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>