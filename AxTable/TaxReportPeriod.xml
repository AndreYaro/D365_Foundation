<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReportPeriod extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDateInterval</Name>
				<Source><![CDATA[
    boolean checkDateInterval()
    {
        TaxReportPeriod     period;

        if (this.FromDate > this.ToDate)
            return checkFailed("@SYS16982");

        period.clear();
        period  = TaxReportPeriod::findOther(this.TaxPeriod, this.FromDate, this.RecId);

        if (period.RecId  != 0 && period.RecId  != this.RecId)
            return checkFailed("@Tax:DateIntervalOverlap");

        period.clear();
        period  = TaxReportPeriod::findOther(this.TaxPeriod, this.ToDate, this.RecId);

        if (period.RecId  != 0 && period.RecId  != this.RecId)
            return checkFailed("@Tax:DateIntervalOverlap");

        if (this.RecId)
        {
            if (TaxReportPeriod::existOther(this.TaxPeriod,
                                            this.FromDate,
                                            this.ToDate,
                                            this.RecId))
                return checkFailed("@SYS7553");
        }
        else
        {
            if (TaxReportPeriod::exist(this.TaxPeriod,
                                            this.FromDate,
                                            this.ToDate))
                return checkFailed("@SYS7553");

            if (TaxReportPeriod::dateIsInPeriod(this.TaxPeriod, this.FromDate))
                return checkFailed("@Tax:DateIntervalOverlap");

            if (TaxReportPeriod::dateIsInPeriod(this.TaxPeriod, this.ToDate))
                return checkFailed("@Tax:DateIntervalOverlap");

            if (TaxReportPeriod::existIntervalInDates(this.TaxPeriod,
                                            this.FromDate,
                                            this.ToDate))
                return checkFailed("@Tax:PeriodIntervalOverlap");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntervalInUse</Name>
				<Source><![CDATA[
    boolean checkIntervalInUse()
    {
        if (this.orig().RecId)
        {
            if (this.TaxPeriod   == this.orig().TaxPeriod)
            {
                if (this.FromDate    >  this.orig().FromDate          &&
                    TaxTrans::existPeriod( this.orig().FromDate,
                                              this.FromDate,
                                              this.orig().TaxPeriod))
                    return checkFailed("@Tax:TransactionsExistForFromDate");

                if (this.ToDate      <  this.orig().ToDate            &&
                    TaxTrans::existPeriod( this.ToDate,
                                              this.orig().ToDate,
                                              this.orig().TaxPeriod))
                    return checkFailed("@Tax:TransactionsExistForToDate");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void  insert()
    {
        boolean  ok;

        ok = this.checkDateInterval();

        if (ok)
        {
            super();
            TaxBookStatus::createForTaxReportPeriod(this);
        }

        this.clearTaxRepVersionCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean  validateDelete()
    {
        boolean ok;

        ok = super();
        if (ok)
            if (this.VersionNum > 0)
                return checkFailed("@SYS25896");

    return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ok = true;

        ok = super();
        if (ok)
        {
            if (this.orig().RecId)
            {
                if (! this.checkIntervalInUse())
                {
                    return false;
                }
            }
            if (! this.checkDateInterval())
            {
                return false;
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxPeriod _taxPeriod, TaxPeriodDate _fromDate, TaxPeriodDate _toDate )
    {
        boolean ret = true;

        if (!TaxReportPeriod::exist(_taxPeriod, _fromDate, _toDate))
        {
            ret = checkFailed(strFmt(TaxReportPeriod::txtNotExist(), _taxPeriod, date2StrUsr(_fromDate, DateFlags::FormatAll), date2StrUsr(_toDate, DateFlags::FormatAll)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATPeriod_RU</Name>
				<Source><![CDATA[
    public static boolean checkVATPeriod_RU(TransDate _date1, TransDate _date2)
    {
        TaxTable                taxTable;
        TaxReportPeriod         date1Period, date2Period;

        select firstonly TaxPeriod from taxTable
                where taxTable.TaxType_W == TaxType_W::VAT        ||
                      taxTable.TaxType_W == TaxType_W::VATReduced ||
                      taxTable.TaxType_W == TaxType_W::VATZero;

        if (taxTable.TaxPeriod)
        {
            date1Period = TaxReportPeriod::find(taxTable.TaxPeriod, _date1);
            date2Period = TaxReportPeriod::find(taxTable.TaxPeriod, _date2);

            if ( ! date1Period)
            {
                error(strFmt("@GLS111611", _date1));
                throw error(strFmt(TaxPeriodHead::txtNotExist(), TaxType_W::VAT));
            }

            if ( ! date2Period)
            {
                error(strFmt("@GLS111611", _date2));
                throw error(strFmt(TaxPeriodHead::txtNotExist(), TaxType_W::VAT));
            }

            if (date1Period.RecId != date2Period.RecId)
            {
                return false;
            }
        }
        else
            throw error(strFmt(TaxPeriodHead::txtNotExist(), TaxType_W::VAT));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIsInPeriod</Name>
				<Source><![CDATA[
    static boolean dateIsInPeriod(TaxPeriod        _taxPeriod,
                                  TaxPeriodDate    _taxPeriodDate)
    {
        if (_taxPeriod && _taxPeriodDate)
            return (select firstonly RecId from taxReportPeriod
                    index hint TaxPeriodIdx
                    where taxReportPeriod.TaxPeriod     == _taxPeriod           &&
                          taxReportPeriod.FromDate      <= _taxPeriodDate       &&
                          taxReportPeriod.ToDate        >= _taxPeriodDate).RecId != 0;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datePeriodPurchSalesBook_RU</Name>
				<Source><![CDATA[
    public static container datePeriodPurchSalesBook_RU(TaxPeriodDate _dt)
    {
        TaxReportPeriod taxReportPeriod;

        taxReportPeriod = TaxReportPeriod::taxReportPeriodPurchSalesBook_RU(_dt);

        return [taxReportPeriod.FromDate, taxReportPeriod.ToDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxPeriod _taxPeriod, TaxPeriodDate _fromDate, TaxPeriodDate _toDate )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     taxReportPeriod
                 where
                     taxReportPeriod.TaxPeriod == _taxPeriod &&
                    taxReportPeriod.FromDate == _fromDate &&
                    taxReportPeriod.ToDate == _toDate).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existIntervalInDates</Name>
				<Source><![CDATA[
    static boolean existIntervalInDates(TaxPeriod      _taxPeriod,
                                        TaxPeriodDate  _fromDate,
                                        TaxPeriodDate  _toDate)
    {
        TaxReportPeriod taxReportPeriodLocal;
        if (_taxPeriod && _fromDate && _toDate)
        {
            select firstonly RecId from taxReportPeriodLocal
                index hint TaxPeriodIdx
                where taxReportPeriodLocal.TaxPeriod == _taxPeriod &&
                      taxReportPeriodLocal.FromDate  > _fromDate  &&
                      taxReportPeriodLocal.ToDate    < _toDate;
            if (taxReportPeriodLocal)
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOther</Name>
				<Source><![CDATA[
    static boolean existOther(TaxPeriod      _taxPeriod,
                              TaxPeriodDate  _fromDate,
                              TaxPeriodDate  _toDate,
                              RecId          _recId)
    {
        TaxReportPeriod taxReportPeriodLocal;
        if (_taxPeriod && _fromDate && _toDate && _recId)
        {
            select firstonly RecId from taxReportPeriodLocal
                index hint TaxPeriodIdx
                where taxReportPeriodLocal.TaxPeriod == _taxPeriod &&
                      taxReportPeriodLocal.FromDate  == _fromDate  &&
                      taxReportPeriodLocal.ToDate    == _toDate    &&
                      taxReportPeriodLocal.RecId     != _recId;
            if (taxReportPeriodLocal)
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxReportPeriod find(
        TaxPeriod _taxPeriod,
        TransDate _date ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxReportPeriod taxReportPeriod;

        taxReportPeriod.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxReportPeriod.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxReportPeriod
            where
            taxReportPeriod.TaxPeriod == _taxPeriod &&
            taxReportPeriod.FromDate <= _date &&
            taxReportPeriod.ToDate >= _date;

        return taxReportPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPeriodFromDateAndEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxReportPeriod</c> table.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The <c>TaxPeriod</c> of the <c>TaxReportPeriod</c> record to find.
    /// </param>
    /// <param name="_fromDate">
    /// The from date of the <c>TaxReportPeriod</c> record to find.
    /// </param>
    /// <param name="_endDate">
    /// The end date of the <c>TaxReportPeriod</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The specified record in the <c>TaxReportPeriod</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxReportPeriod findByPeriodFromDateAndEndDate(
        TaxPeriod _taxPeriod,
        TransDate _fromDate,
        TransDate _endDate,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxReportPeriod taxReportPeriod;

        taxReportPeriod.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxReportPeriod.concurrencyModel(_concurrencyModel);
        }

        select firstonly * from taxReportPeriod
            where taxReportPeriod.TaxPeriod == _taxPeriod &&
                taxReportPeriod.FromDate == _fromDate &&
                taxReportPeriod.ToDate == _endDate;

        return taxReportPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastForTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last record for the same <c>TaxPeriod</c> in the <c>TaxReportPeriod</c> table.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The <c>TaxPeriod</c> of the <c>TaxReportPeriod</c> record to find.
    /// </param>
    /// <param name="_includeNotYetReported">
    /// A Boolean value that indicate whether to include not yet reported <c>TaxReportPeriod</c> records in the search.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The last record for the same <c>TaxPeriod</c> in the <c>TaxReportPeriod</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxReportPeriod findLastForTaxPeriod(TaxPeriod _taxPeriod, boolean _includeNotYetReported, boolean _forUpdate = false)
    {
        TaxReportPeriod lastTaxReportPeriodForTaxPeriod;

        if (_forUpdate)
        {
            lastTaxReportPeriodForTaxPeriod.selectForUpdate(true);
        }

        select firstOnly * from lastTaxReportPeriodForTaxPeriod
            order by ToDate desc, FromDate desc
                where lastTaxReportPeriodForTaxPeriod.TaxPeriod == _taxPeriod &&
                    (_includeNotYetReported ||
                        lastTaxReportPeriodForTaxPeriod.Reported_HU != dateNull());

        return lastTaxReportPeriodForTaxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOther</Name>
				<Source><![CDATA[
    static TaxReportPeriod     findOther(TaxPeriod   _taxPeriod,
                                         TransDate   _date,
                                         RecId      _recId)

    {
        TaxReportPeriod     taxReportPeriod;

        ;
        if (_taxPeriod && _date && _recId)
            select firstonly taxReportPeriod
                index hint TaxPeriodIdx
                where taxReportPeriod.TaxPeriod     ==  _taxPeriod       &&
                      taxReportPeriod.RecId         !=  _recId           &&
                      taxReportPeriod.FromDate      <=  _date            &&
                      taxReportPeriod.ToDate        >=  _date;

        return taxReportPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPeriod_W</Name>
				<Source><![CDATA[
    public static TaxReportPeriod findPeriod_W(TransDate _date)

    {
        TaxReportPeriod     taxReportPeriod;

        if (_date)
        {
            select firstonly taxReportPeriod
                where taxReportPeriod.FromDate <= _date &&
                      taxReportPeriod.ToDate   >= _date;
        }
        return taxReportPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPeriod</Name>
				<Source><![CDATA[
    static void  newPeriod(TaxPeriod   _taxPeriod)
    {
        TaxPeriodHead       taxPeriodHead;
        TaxReportPeriod     taxReportPeriod;
        TaxReportPeriod     lastPeriod;
        Futures             futures;

        taxReportPeriod.VersionNum       = 0;

        select PeriodUnit, QtyUnit
        from  taxPeriodHead
        where taxPeriodHead.TaxPeriod   == _taxPeriod;

        if (taxPeriodHead.QtyUnit == 0)
            throw error("@SYS56375");

        select maxof(ToDate)
        from lastPeriod
        where lastPeriod.TaxPeriod      == _taxPeriod;

        if (lastPeriod.ToDate)
        {
            taxReportPeriod.TaxPeriod          = _taxPeriod;
            taxReportPeriod.FromDate           = lastPeriod.ToDate     + 1;
            futures = Futures::construct(taxReportPeriod.FromDate,
                              taxPeriodHead.QtyUnit,
                              taxPeriodHead.PeriodUnit);

            taxReportPeriod.ToDate = futures.next() - 1;

            taxReportPeriod.insert();
        }
        else
        {
            throw warning("@Tax:PeriodIntervalNotDefined");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxReportPeriodPurchSalesBook_RU</Name>
				<Source><![CDATA[
    public static TaxReportPeriod taxReportPeriodPurchSalesBook_RU(TaxPeriodDate _dt)
    {
        TaxPeriodDate       fromDt, toDt;
        TaxPeriodHead       taxPeriodHead;
        TaxTable            taxTable;
        TaxReportPeriod     taxReportPeriod;

        while select TaxPeriod from taxPeriodHead
        {
            select firstonly taxTable
                where taxTable.TaxPeriod  == taxPeriodHead.TaxPeriod &&
                     (taxTable.TaxType_W == TaxType_W::VAT         ||
                      taxTable.TaxType_W == TaxType_W::VATReduced  ||
                      taxTable.TaxType_W == TaxType_W::VATZero);

            if (taxTable)
            {
                taxReportPeriod = TaxReportPeriod::find(taxPeriodHead.TaxPeriod, _dt);

                fromDt = taxReportPeriod.FromDate;
                toDt   = taxReportPeriod.ToDate;

                if ((fromDt != dateNull()) && (toDt != dateNull()))
                {
                    break;
                }
            }
        }

        return taxReportPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdVersionSumUp</Name>
				<Source><![CDATA[
    static void taxWithholdVersionSumUp(TaxPeriod       _taxPeriod,
                                               TransDate       _date)
    {
        TaxReportPeriod     taxReportPeriod;

        ttsbegin;
        select forupdate taxReportPeriod
            where taxReportPeriod.TaxPeriod     ==  _taxPeriod       &&
                  taxReportPeriod.FromDate      <=  _date            &&
                  taxReportPeriod.ToDate        >=  _date;

        taxReportPeriod.TaxWithholdVersion_BR += 1;

        taxReportPeriod.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS27786";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAvailStatus_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax report avail status.
    /// </summary>
    /// <param name="_settlementPeriod">
    /// The settlement period.
    /// </param>
    /// <param name="_eccNumber">
    /// The ecc number.
    /// </param>
    public static void updateAvailStatus_IN(TaxPeriod _settlementPeriod = '',
                                            RefRecId  _eccNumber = 0)
    {
        TaxReportPeriod_IN  taxReportPeriodLoc;
        TaxReportPeriod     taxReportPeriod;

        ttsbegin;

        if (_settlementPeriod)
        {
            while select forupdate taxReportPeriod
                where taxReportPeriod.TaxPeriod == _settlementPeriod
            {
                while select FromDate, ToDate from taxReportPeriodLoc
                    where taxReportPeriodLoc.TaxPeriod                  == _settlementPeriod &&
                          taxReportPeriodLoc.TaxRegistrationNumberTable == _eccNumber

                {
                    if (taxReportPeriodLoc.FromDate == taxReportPeriod.FromDate &&
                        taxReportPeriodLoc.ToDate   == taxReportPeriod.ToDate)
                    {
                        taxReportPeriod.Availed_IN = NoYes::Yes;
                    }
                }
                taxReportPeriod.doUpdate();
            }
        }
        else
        {
            while select forupdate taxReportPeriod
                where taxReportPeriod.Availed_IN == NoYes::Yes
            {
                taxReportPeriod.Availed_IN = NoYes::No;
                taxReportPeriod.doUpdate();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePageNum</Name>
				<Source><![CDATA[
    static void updatePageNum(TaxReportPeriod _taxReportPeriod,
                              PageNo          _pageNum,
                              SalesPurch      _salesPurch)
    {
        TaxReportPeriod taxReportPeriod;

        if (_taxReportPeriod.VersionNum > 0 && !_taxReportPeriod.LastPageNumPurch)
        { //Update record with last pagenumber in the report.

            ttsbegin;
            select firstonly forupdate taxReportPeriod
                where taxReportPeriod.TaxPeriod == _taxReportPeriod.TaxPeriod &&
                      taxReportPeriod.FromDate  == _taxReportPeriod.FromDate  &&
                      taxReportPeriod.ToDate    == _taxReportPeriod.ToDate;

            switch (_salesPurch)
            {
                case SalesPurch::Purch:
                    taxReportPeriod.LastPageNumPurch = _pageNum;
                    break;
                case SalesPurch::Sales:
                    taxReportPeriod.LastPageNumSales = _pageNum;
                    break;
            }
            taxReportPeriod.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    static TaxVersion  version(TaxPeriod       _taxPeriod,
                               TransDate       _date)

    {        
        TaxReportPeriod taxReportPeriod;
        if (TaxPostPerfImprovFlight::instance().isEnabled())
        {   
            str cacheScope = tableStaticMethodStr(TaxReportPeriod, version);
            container cacheKey = [_taxPeriod, _date, curExt()];
            TaxVersion versionNum = SysTransactionScopeCache::get(cacheScope, cacheKey, -1);
            if (versionNum < 0)
            {               
                select firstonly VersionNum from taxReportPeriod
                    where taxReportPeriod.TaxPeriod == _taxPeriod
                        && taxReportPeriod.FromDate <= _date
                        && taxReportPeriod.ToDate >=_date;
                versionNum = taxReportPeriod.VersionNum;
                SysTransactionScopeCache::set(cacheScope, cacheKey, versionNum);
            }
            return versionNum;
        }
        else
        {
            return (select firstonly VersionNum from taxReportPeriod
                where taxReportPeriod.TaxPeriod == _taxPeriod
                    && taxReportPeriod.FromDate <= _date
                    && taxReportPeriod.ToDate >=_date).VersionNum;
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>versionSumUp</Name>
				<Source><![CDATA[
    static void versionSumUp(TaxPeriod       _taxPeriod,
                             TransDate       _date)

    {
        TaxReportPeriod     taxReportPeriod;

        ttsbegin;
        select forupdate taxReportPeriod
            where taxReportPeriod.TaxPeriod     ==  _taxPeriod       &&
                  taxReportPeriod.FromDate      <=  _date            &&
                  taxReportPeriod.ToDate        >=  _date;

        taxReportPeriod.VersionNum      += 1;

        taxReportPeriod.Closed = NoYes::Yes;

        taxReportPeriod.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPeriodSettlementInProcess</Name>
				<Source><![CDATA[
    public boolean isPeriodSettlementInProcess()
    {
        return this.SettlementPeriodInProcessBy != "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        this.clearTaxRepVersionCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        this.clearTaxRepVersionCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTaxRepVersionCache</Name>
				<Source><![CDATA[
    private void clearTaxRepVersionCache()
    {
        if (TaxPostPerfImprovFlight::instance().isEnabled())
        {
            SysTransactionScopeCache::clear(tableStaticMethodStr(TaxReportPeriod, version));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS330800</DeveloperDocumentation>
	<FormRef>TaxPeriod</FormRef>
	<Label>@SYS55331</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxPeriod</TitleField1>
	<TitleField2>FromDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TaxPeriodIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>TaxPeriodIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxBookStatus</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxBookStatus</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Availed_IN</Name>
			<Label>@GLS5261</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Availed_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxReportingDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reported_HU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Closed_CZ</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxReportPeriodCode_NO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SpecialReport</Name>
			<Label>@SYS10223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdVersion_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InProcess</Name>
			<Label>@SYP4882010</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettlementPeriodInProcessBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Availed_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<Label>@GLS5261</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<FeatureClass>TaxBookToggle</FeatureClass>
			<Label>@SYS14403</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed_CZ</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS14403</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPeriodDate</ExtendedDataType>
			<Label>@SYS5209</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LastPageNumPurch</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<ExtendedDataType>PageNo</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LastPageNumSales</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<ExtendedDataType>PageNo</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LastPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS79256</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Reported_HU</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>HU</CountryRegionCodes>
			<ExtendedDataType>TaxPeriodDate</ExtendedDataType>
			<Label>@SYS24350</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPeriod</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxReportingDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>TaxPeriodDate</ExtendedDataType>
			<Label>@SYS23896</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TaxWithholdVersion_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdVersion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPeriodDate</ExtendedDataType>
			<Label>@SYS14656</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>VersionNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxVersion</ExtendedDataType>
			<GroupPrompt>@SYS23007</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SettlementPeriodInProcessBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SYP4882010</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxReportPeriodCode_NO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>TaxReportPeriodCode_NO</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxPeriodIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxPeriodHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxPeriodHead</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<SourceEDT>TaxPeriod</SourceEDT>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxPeriodIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>