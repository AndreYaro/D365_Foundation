<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimParm extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setValueForDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value on the buffer for a given <c>InventDimension</c> class.
    /// </summary>
    /// <param name = "_dimensionClassName">The name of the <c>InventDimension</c> class.</param>
    /// <param name = "_value">The value to set.</param>
    protected void setValueForDimension(ClassName _dimensionClassName, NoYesId _value)
    {
        FieldId fieldId = InventDimParm::fieldIdForDimension(_dimensionClassName);
        this.(fieldId) = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueForDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value from the buffer for a given <c>InventDimension</c> class.
    /// </summary>
    /// <param name = "_dimensionClassName">The name of the <c>InventDimension</c> class.</param>
    /// <returns>The dimension's value.</returns>
    protected NoYesId getValueForDimension(ClassName _dimensionClassName)
    {
        FieldId fieldId = InventDimParm::fieldIdForDimension(_dimensionClassName);
        return this.(fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdForDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for a given <c>InventDimension</c> class.
    /// </summary>
    /// <param name = "_dimensionClassName">The name of the <c>InventDimension</c> class.</param>
    /// <returns>The field Id.</returns>
    static public FieldId fieldIdForDimension(ClassName _dimensionClassName)
    {
        FieldId fieldIdOnInventDim = InventDim::fieldIdForDimension(_dimensionClassName);
        return InventDim::dim2dimParm(fieldIdOnInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds fields from the <c>InventDimParm</c> table to the dialog box.
    /// </summary>
    /// <param name="_dialog">
    ///    The dialog box where fields are added.
    /// </param>
    /// <param name="_caption">
    ///    The caption for the group where fields are added; optional.
    /// </param>
    /// <param name="_newMainGroup">
    ///    true if a new main group should be added; optional.
    /// </param>
    /// <param name="_addItem">
    ///    true if an item check box should be added; optional.
    /// </param>
    /// <param name="_fieldHelpText">
    ///    The help text for the field; optional.
    /// </param>
    /// <param name="_dimParmDisableFields">
    ///    An <c>InventDimParm</c> table that specifies the fields that should not be enabled. By default all
    ///    fields will be enabled; optional.
    /// </param>
    /// <returns>
    ///    A new dialog group that has the fields added.
    /// </returns>
    /// <remarks>
    ///    If the <c>InventSiteIdFlag</c> field should not be enabled so that it cannot be edited, the
    ///    <c>dimParmDisableFields</c> values should be set to <c>NoYes::Yes</c>.
    /// </remarks>
    public DialogGroup addFieldsToDialog(
        Dialog          _dialog,
        str             _caption                = "@SYS53627",
        boolean         _newMainGroup           = false,
        boolean         _addItem                = false,
        str             _fieldHelpText          = '',
        InventDimParm   _dimParmDisableFields   = null
        )
    {
        DialogGroup             mainDialogGroup;
        DialogGroup             dialogGroup;
        List                    fieldList       = InventDimParm::dimParmEnabledFieldList();
        ListEnumerator          enumerator      = fieldList.getEnumerator();
        FieldId                 dimParmFieldId;
        DialogField             df;
        str                     fieldHelp;

        #define.columns(2)

        if (_newMainGroup)
        {
            dialogGroup = _dialog.addGroup(identifierStr(parmAndDimGrp));
            dialogGroup.frameType(FormFrameType::None);
            dialogGroup.columns(#columns);
            mainDialogGroup = _dialog.addGroup("@SYS7764", dialogGroup);
            mainDialogGroup.columns(1);
            dialogGroup = _dialog.addGroup(_caption,dialogGroup);
        }
        else
        {
            dialogGroup = _dialog.addGroup(_caption);
        }

        dialogGroup.trackFields(true);

        if (_addItem)
        {
            fieldHelp =  _fieldHelpText ? _fieldHelpText : new SysDictField(tableNum(InventDimParm), fieldNum(InventDimParm, ItemIdFlag)).help();

            df = _dialog.addField(
                InventDimParm::fieldId2Typename(fieldNum(InventDimParm, ItemIdFlag)),
                fieldId2pname(tableNum(InventDimParm),fieldNum(InventDimParm, ItemIdFlag)),
                fieldHelp
                );
            df.value(this.(fieldNum(InventDimParm, ItemIdFlag)));
        }

        while (enumerator.moveNext())
        {
            dimParmFieldId = enumerator.current();
            fieldHelp =  _fieldHelpText ? _fieldHelpText : new SysDictField(tableNum(InventDimParm), dimParmFieldId).help();

            df = _dialog.addField(
                InventDimParm::fieldId2Typename(dimParmFieldId),
                fieldId2pname(tableNum(InventDimParm),dimParmFieldId),
                fieldHelp
                );
            df.value(this.(dimParmFieldId));
            df.enabled(!_dimParmDisableFields.(dimParmFieldId));
        }

        if (_newMainGroup)
        {
            _dialog.curFormGroup(mainDialogGroup.formGroup());
            _dialog.mainFormGroup(mainDialogGroup.formGroup());
        }

        return dialogGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allProductDimensionFlagSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that all product dimension fields have been flagged.
    /// </summary>
    /// <returns>
    /// true if all product dimension are flagged; otherwise, false.
    /// </returns>
    public boolean allProductDimensionFlagSet()
    {
        InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            FieldId fieldId = enum.currentInventDimParmFieldId();
            if (!this.(fieldId))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProductDimensionFlagSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that any product dimension fields have been flagged.
    /// </summary>
    /// <returns>
    /// true if any product dimension is flagged; otherwise, false.
    /// </returns>
    public boolean anyProductDimensionFlagSet()
    {
        InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            FieldId fieldId = enum.currentInventDimParmFieldId();
            if (this.(fieldId))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyStorageDimensionFlagSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if any storage dimension fields have been flagged.
    /// </summary>
    /// <returns>
    ///    true if any storage dimension is flagged; otherwise, false.
    /// </returns>
    public boolean anyStorageDimensionFlagSet()
    {
        if (this.InventLocationIdFlag
         || this.InventSiteIdFlag
         || this.WMSLocationIdFlag
         || this.InventStatusFlag
         || this.LicensePlateFlag)       
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyTrackingDimensionFlagSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if any tracking dimension fields have been flagged.
    /// </summary>
    /// <returns>
    ///    true if any tracking dimension is flagged; otherwise, false.
    /// </returns>
    public boolean anyTrackingDimensionFlagSet()
    {
        InventDimensionEnumerator enum = InventTrackingDimension::getEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldId = enum.currentInventDimParmFieldId();
            if (this.(fieldId))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNonFinancialStorageDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the non-financial storage dimensions as non-active parameters, depending on the dimensions group.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimensions
    ///    setup.
    /// </param>
    public void clearNonFinancialStorageDimensions(InventDimGroupSetup _inventDimGroupSetup)
    {
        ListEnumerator              enumerator = EcoResStorageDimensionGroup::dimEnabledFieldList().getEnumerator();
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;
        FieldId                     inventDimFieldId;
        FieldId                     dimParmFieldId;

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            inventDimGroupFieldSetup = _inventDimGroupSetup.getFieldSetup(inventDimFieldId);

            if (inventDimGroupFieldSetup
            && inventDimGroupFieldSetup.isActive()
            && !inventDimGroupFieldSetup.isFinancialInventoryEnabled())
            {
                dimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
                this.(dimParmFieldId) = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNonTransferReceiptMergeable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the dimensions flags for fields that are not typically synchronized with a transfers issue
    ///    and a receipts inventory transaction.
    /// </summary>
    public void clearNonTransferReceiptMergeable()
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            if (!InventDim::isFieldIdTransferReceiptMergeable(dimFieldId))
            {
                FieldId dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
                this.(dimParmFieldId) = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNonTransferTransitReceiptMergeable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the dimensions flags for fields that are not typically synchronized with a transfers issue
    ///    and a transit receipts inventory transaction.
    /// </summary>
    public void clearNonTransferTransitReceiptMergeable()
    {
        Enumerator enumerator = InventDim::dimFieldListEnumerator();
        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            if (!InventDim::isFieldIdTransferTransitReceiptMergeable(dimFieldId))
            {
                FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                this.(dimParmFieldId) = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearProductDimensions</Name>
				<Source><![CDATA[
    public void clearProductDimensions()
    {
        InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            FieldId fieldId = enum.currentInventDimParmFieldId();
            this.(fieldId) = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearStorageDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the storage dimension flags.
    /// </summary>
    public void clearStorageDimensions()
    {
        ListEnumerator  enumerator  = InventDim::dimStorageDimFieldList().getEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            this.(dimParmFieldId) = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the tracking dimension flags.
    /// </summary>
    public void clearTrackingDimensions()
    {
        ListEnumerator  enumerator  = InventDim::dimTrackingDimFieldList().getEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            this.(dimParmFieldId) = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog(
        Dialog      _dialog,
        DialogGroup _dialogGroup,
        boolean     _hasItem = false)
    {
        #Define.ControlNumItem(1)

        List                    fieldList       = InventDimParm::dimParmEnabledFieldList();
        ListEnumerator          enumerator      = fieldList.getEnumerator();
        FieldId                 dimParmFieldId;
        Integer                 h               = 0;
        DialogField             df;
        Integer                 dimOffset = (_hasItem) ? 1 : 0;

        if (_hasItem)
        {
            df              = _dialog.getDialogClass(_dialogGroup.fieldnameNo(#ControlNumItem));
            this.ItemIdFlag = df.value();
        }

        if (_dialogGroup.fieldnamesCount() < fieldList.elements())
        {
            throw(error(strFmt("@SYS19306", funcName())));
        }

        while (enumerator.moveNext())
        {
            h++;
            dimParmFieldId = enumerator.current();
            df = _dialog.getDialogClass(_dialogGroup.fieldnameNo(h + dimOffset));
            this.(dimParmFieldId) = df.value();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsistentDimAllGrp</Name>
				<Source><![CDATA[
    public void initConsistentDimAllGrp()
    {
        InventDimGroupSetup::inventDimParmInitAllConsistentDim(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsistentDimensionsGeneral</Name>
				<Source><![CDATA[
    public void initConsistentDimensionsGeneral()
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        this.clear();

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            if (InventDim::isFieldIdConsistentDim(dimFieldId))
            {
                dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                this.(dimParmFieldId) = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCovDimAllGrp</Name>
				<Source><![CDATA[
    public void initCovDimAllGrp()
    {
        InventDimGroupSetup::inventDimParmInitAllCoverageDim(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCovPrDimension</Name>
				<Source><![CDATA[
    public void initCovPrDimension(InventDimGroupSetup _inventDimGroupSetup)
    {
        #Req

        _inventDimGroupSetup.inventDimParmActiveCoveragePlan(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCovReqItemTable</Name>
				<Source><![CDATA[
    public void initCovReqItemTable(InventDimGroupSetup _inventDimGroupSetup)
    {
        #Req

        _inventDimGroupSetup.inventDimParmActiveCoveragePlan(this);

        this.InventBatchIdFlag  = NoYes::No;
        this.InventSerialIdFlag = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimBOM</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public void initDimBOM(InventDimGroupSetup _inventDimGroupSetup)
    {
        EcoResProductDimGroupSetup  productDimGroupSetup = _inventDimGroupSetup.ecoResProductDimGroupSetup();
        InventDimParm               inventDimParm;

        inventDimParm = productDimGroupSetup.inventDimParmActiveDimensions();
        inventDimParm.InventLocationIdFlag    = NoYes::Yes;
        inventDimParm.InventSiteIdFlag        = NoYes::Yes;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            inventDimParm.InventProfileIdFlag_RU  = NoYes::Yes;
        }
        // </GEERU>
        this.data(inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimBOMAll</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public void initDimBOMAll()
    {
        this.initProductDimensionsAllGroups();
        this.initSiteDimAllGrp();
        this.InventLocationIdFlag = NoYes::Yes;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            this.InventProfileIdFlag_RU = NoYes::Yes;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimBOMCalc</Name>
				<Source><![CDATA[
    public void initDimBOMCalc(InventDimGroupSetup _inventDimGroupSetup)
    {
        this.setActiveSiteAndProductDimensions(_inventDimGroupSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimBOMEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>inventDimParm</c> record in relation to which inventory dimensions are enabled
    ///    for a bills of materials record.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An <c>InventDimGroupSetup</c> instance that provides information about dimension setup.
    /// </param>
    /// <param name="_bom">
    ///    A bills of materials record.
    /// </param>
    public void initDimBOMEnable(
        InventDimGroupSetup         _inventDimGroupSetup,
        BOM                         _bom)
    {
        InventDimParm bomInventDimParm = _inventDimGroupSetup.ecoResProductDimGroupSetup().inventDimParmActiveDimensions() as InventDimParm;
        this.data(bomInventDimParm);

        this.InventSiteIdFlag = NoYes::No; // Site can never be specified on bom lines

        if (_bom.WrkCtrConsumption ||
            (  _bom.bomId
          && ! _bom.bomTable().SiteId))
        {
            this.InventLocationIdFlag = NoYes::No;
        }
        else
        {
            this.InventLocationIdFlag = NoYes::Yes;
        }
        // <GEERU>
        if (_inventDimGroupSetup.isDimensionActive(fieldNum(InventDim, InventProfileId_RU)))
        {
             this.InventProfileIdFlag_RU = NoYes::Yes;
        }
       // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimBOMRouteVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>inventDimParm</c> record buffer relative to the BOM version or route version
    /// records.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    /// setup.
    /// </param>

    public void initDimBOMRouteVersion(InventDimGroupSetup _inventDimGroupSetup = null)
    {
        InventDimParm bomRouteVersionInventDimParm;

        if (_inventDimGroupSetup)
        {
            bomRouteVersionInventDimParm = _inventDimGroupSetup.ecoResProductDimGroupSetup().inventDimParmActiveDimensions() as InventDimParm;
            this.data(bomRouteVersionInventDimParm);
        }
        else
        {
            this.initProductDimensionsAllGroups();
        }

        this.InventSiteIdFlag = NoYes::Yes;  // siteId is always shown on the BOM / route versions
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimBOMVersionEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>inventDimParm</c> record relative to which inventory dimensions are enabled for
    ///    a bill of materials version record.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    ///    setup.
    /// </param>
    /// <param name="_bomVersion">
    ///    A bill of materials version record.
    /// </param>
    public void initDimBOMVersionEnable(
        InventDimGroupSetup             _inventDimGroupSetup,
        BOMVersion                      _bomVersion)
    {
        InventDimParm   bomVersionInventDimParm;
        InventSiteId    siteIdBOMTable;
        InventDim       inventDimJoin;
        Common          joinTable;

        if (! _bomVersion.allowEdit())
        {
            this.setAllInventDim();
            this.toggleAllInventDim(); // all flags are set to NoYes::No.
            return;
        }

        bomVersionInventDimParm = _inventDimGroupSetup.ecoResProductDimGroupSetup().inventDimParmActiveDimensions();
        this.data(bomVersionInventDimParm);

        if (_bomVersion.bomId)
        {
            siteIdBOMTable = _bomVersion.bomTable().SiteId;

            if (siteIdBOMTable)
            {
                joinTable = _bomVersion.joinChildTable(tableNum(InventDim));

                if (joinTable is InventDim)
                {
                    inventDimJoin = joinTable as InventDim;
                }
                else
                {
                    inventDimJoin = _bomVersion.inventDim();
                }

                this.InventSiteIdFlag = siteIdBOMTable == inventDimJoin.InventSiteId ? NoYes::No : NoYes::Yes;
            }
            else
            {
                this.InventSiteIdFlag = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimForecast</Name>
				<Source><![CDATA[
    public void initDimForecast(InventDimGroupSetup _inventDimGroupSetup)
    {
        InventDimParm forecastInventDimParm = _inventDimGroupSetup.ecoResProductDimGroupSetup().inventDimParmActiveDimensions();
        this.data(forecastInventDimParm);

        this.InventLocationIdFlag   = NoYes::Yes;
        this.InventSiteIdFlag       = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimDefaultOrderSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimensions for default order settings.
    /// </summary>
    /// <param name = "_inventDimGroupSetup">The dimension group setup for the active item.</param>
    public void initDimDefaultOrderSettings(InventDimGroupSetup _inventDimGroupSetup)
    {
        InventDimParm orderSettingsInventDimParm = _inventDimGroupSetup.ecoResProductDimGroupSetup().inventDimParmActiveDimensions();
        this.data(orderSettingsInventDimParm);

        this.InventSiteIdFlag = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimForecastAll</Name>
				<Source><![CDATA[
    public void initDimForecastAll()
    {
        this.initProductDimensionsAllGroups();
        this.initSiteDimAllGrp();
        this.InventLocationIdFlag = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimLeanPickingList</Name>
				<Source><![CDATA[
    public void initDimLeanPickingList(InventDimGroupSetup _inventDimGroupSetup = null)
    {
        InventDimParm   inventDimParm_1;
        InventDimParm   inventDimParm_2;

        inventDimParm_1.InventSiteIdFlag        = NoYes::Yes;
        inventDimParm_1.InventLocationIdFlag    = NoYes::Yes;
        inventDimParm_1.wmsLocationIdFlag       = NoYes::Yes;

        if (_inventDimGroupSetup)
        {
            _inventDimGroupSetup.inventDimParmActive(inventDimParm_2);
            this.data(InventDimParm::andParms(inventDimParm_1,inventDimParm_2));
        }
        else
        {
            this.data(inventDimParm_1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimTransferReceipt</Name>
				<Source><![CDATA[
    /*
        Used for transfer orders to determine the dimensions that must correspond between a shipment and a receipt
    */
    public void initDimTransferReceipt(InventDim _inventDim)
    {
        this.initFromInventDim(_inventDim);

        this.clearNonTransferReceiptMergeable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets flags for all the specified non-empty dimensions.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimensions.
    /// </param>
    /// <param name="_dimFieldList">
    /// The list of dimensions that need to be considered.
    /// </param>
    /// <remarks>
    /// By default all dimensions are considered.
    /// </remarks>
    public void initFromInventDim(InventDim _inventDim, List _dimFieldList = InventDim::dimFieldsList())
    {
        ListEnumerator  enumerator  = _dimFieldList.getEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            this.(dimParmFieldId) = _inventDim.(dimFieldId) != InventDim::emptyDimField(dimFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimCombination</Name>
				<Source><![CDATA[
    public void initFromInventDimCombination(InventDimCombination _inventDimCombination)
    {
        this.clear();
        this.initFromInventDim(_inventDimCombination.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields that are included in the specified list to yes.
    /// </summary>
    /// <param name="_inventDimFieldIst">
    /// The list of the <c>InventDim</c> field IDs.
    /// </param>
    public void initFromInventDimFieldList(List _inventDimFieldIst)
    {
        ListEnumerator  enumerator  = _inventDimFieldIst.getEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            this.(dimParmFieldId) = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimFixed</Name>
				<Source><![CDATA[
    public void initFromInventDimFixed(InventDimFixed _inventDimFixed)
    {
        InventDimFixedClass::inventDimFixed2InventDimParm(_inventDimFixed,this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimParm</Name>
				<Source><![CDATA[
    public void initFromInventDimParm(InventDimParm _inventDimParm)
    {
        this.data(_inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimParmCSS</Name>
				<Source><![CDATA[
    public void initFromInventDimParmCSS(InventDimParm _inventDimParm)
    {
        InventDimParm   itemParm;

        itemParm.initProductDimensionsAllGroups();
        this.data(InventDimParm::andParms(_inventDimParm,itemParm));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimSetupGrid</Name>
				<Source><![CDATA[
    public void initFromInventDimSetupGrid(FieldId     _fieldId)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
            this.(dimParmFieldId) = InventDimSetupGrid::find(dimFieldId).(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQueryAutoSumFields</Name>
				<Source><![CDATA[
    public void initFromQueryAutoSumFields(QueryBuildDataSource _queryBuildDataSource)
    {
        Counter     h;
        FieldId     dimParmFieldId;

        this.clear();
        for (h=1; h <= _queryBuildDataSource.sortFieldCount(); h++)
        {
            if (_queryBuildDataSource.autoSum(h))
            {
                dimParmFieldId = InventDim::dim2dimParm(_queryBuildDataSource.sortField(h));
                this.(dimParmFieldId) = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQueryBuildRange</Name>
				<Source><![CDATA[
    public void initFromQueryBuildRange(QueryBuildDataSource _queryBuildDataSource)
    {
        int                  rangeCounter = 1;
        FieldId              dimParmFieldId;
        QueryBuildRange      queryBuildRange;

        while (rangeCounter <= _queryBuildDataSource.rangeCount())
        {
            queryBuildRange = _queryBuildDataSource.range(rangeCounter);

            if (queryBuildRange.value())
            {
                dimParmFieldId = InventDim::dim2dimParm(fieldName2id(tableNum(InventDim),queryBuildRange.name()));
                this.(dimParmFieldId) = NoYes::Yes;
            }
            rangeCounter++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQueryCallerGroupBy</Name>
				<Source><![CDATA[
    public void initFromQueryCallerGroupBy(Args _callerArgs)
    {
        Counter                 h;
        FormDataSource          callerDS;
        Query                   callerQuery;
        QueryGroupByField       queryGroupByField;
        FieldId                 dimParmFieldId;

        this.clear();

        callerDS     = InventDim::callerInventDimDatasource(_callerArgs);
        callerQuery  = callerDS.query();

        for (h = callerQuery.groupByFieldCount(); h > 0 ; h--)
        {
            queryGroupByField = callerQuery.groupByField(h);
            if (queryGroupByField.tableSelector() == tableNum(InventDim)
             && queryGroupByField.fieldID() != fieldNum(InventDim, TableId))
            {
                dimParmFieldId = InventDim::dim2dimParm(queryGroupByField.fieldID());
                this.(dimParmFieldId) = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets flags for all the specified non-empty dimensions from <c>WHSInventReserve</c> buffer.
    /// </summary>
    /// <param name="_inventReserve">
    /// The <c>WHSInventReserve</c> buffer.
    /// </param>
    /// <param name="_dimFieldList">
    /// The list of dimensions that need to be considered.
    /// </param>
    /// <remarks>
    /// By default all dimensions are considered.
    /// </remarks>
    [Hookable(false)]
    public void initFromInventReserve(WHSInventReserve _inventReserve, List _dimFieldList = InventDim::dimFieldsList())
    {
        ListEnumerator  enumerator  = _dimFieldList.getEnumerator();
        FieldId         inventDimFieldId;
        FieldId         dimParmFieldId;
        FieldId         inventReserveDimFieldId;

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(inventDimFieldId);
            inventReserveDimFieldId = InventDim::dim2WHSInventReserveDim(inventDimFieldId);
            this.(dimParmFieldId) = _inventReserve.(inventReserveDimFieldId) != InventDim::emptyDimField(inventDimFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLicensePlateInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an inventDimParm with fields that are needed to select information license plate inventory.
    /// </summary>
    public void initLicensePlateInventory()
    {
        this.InventLocationIdFlag = NoYes::Yes;
        this.WMSLocationIdFlag = NoYes::Yes;
        this.LicensePlateFlag = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMandatoryDimAllGrp</Name>
				<Source><![CDATA[
    public void initMandatoryDimAllGrp()
    {
        InventDimGroupSetup::inventDimParmInitAllMandatoryDim(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNonProductDimAllGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets information about which storage and tracking dimensions are active.
    /// </summary>
    /// <remarks>
    /// Information is gathered from all dimension groups in the system. It is enough that a storage or
    /// tracking dimension is active in just one dimension group to be returned as active non-product
    /// dimension.
    /// </remarks>
    public void initNonProductDimAllGroups()
    {
        InventDimGroupSetup::inventDimParmInitAllNonProductDim(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPhysicalDimensionsFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>InventDimParm</c> buffer from the physical inventory dimensions that are
    /// specified in the <c>_inventDim</c> parameter.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record to use for the initialization.
    /// </param>
    public void initPhysicalDimensionsFromInventDim(
        InventDimGroupSetup             _inventDimGroupSetup,
        InventDim                       _inventDim)
    {
        List            dimFields   = _inventDimGroupSetup.activePhysicalInventoryFields();
        ListEnumerator  enumerator  = dimFields.getEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            if (_inventDim.(dimFieldId))
            {
                dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                this.(dimParmFieldId) = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDiscDimAllGrp</Name>
				<Source><![CDATA[
    public void initPriceDiscDimAllGrp()
    {
        InventDimGroupSetup::inventDimParmInitAllPriceDiscDim(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailPeriodicDiscountGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>inventDimParm</c> record buffer relative to the retail periodic discount group member line.
    /// records.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    /// setup.
    /// </param>
    public void initRetailPeriodicDiscountGroup(InventDimGroupSetup _inventDimGroupSetup = null)
    {
        InventDimParm bomRouteVersionInventDimParm;

        if (_inventDimGroupSetup)
        {
            bomRouteVersionInventDimParm = _inventDimGroupSetup.ecoResProductDimGroupSetup().inventDimParmActiveDimensions() as InventDimParm;
            this.data(bomRouteVersionInventDimParm);
        }
        else
        {
            this.initProductDimensionsAllGroups();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrimaryDimReservation</Name>
				<Source><![CDATA[
    public void initPrimaryDimReservation(
        InventDimGroupSetup         _inventDimGroupSetup,
        InventDim                   _inventDim)
    {
        List            dimFields   = _inventDimGroupSetup.activePrimaryStockingFields();
        ListEnumerator  enumerator  = dimFields.getEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            if (_inventDim.(dimFieldId))
            {
                dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                this.(dimParmFieldId) = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensionsAllGroups</Name>
				<Source><![CDATA[
    public void initProductDimensionsAllGroups()
    {
        EcoResProductDimGroupSetupCache::inventDimParmInitAllActiveDim(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSiteDimAllGrp</Name>
				<Source><![CDATA[
    public void initSiteDimAllGrp()
    {
        this.InventSiteIdFlag = NoYes::Yes;     // Site is always an active dimension.
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFixed</Name>
				<Source><![CDATA[
    public InventDimFixed inventDimFixed()
    {
        InventDimFixedClass inventDimFixedClass = InventDimFixedClass::newInventDimParm(this);

        return inventDimFixedClass.inventDimFixed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllFlagNo</Name>
				<Source><![CDATA[
    public boolean isAllFlagNo()
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId) == NoYes::Yes)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllFlagYes</Name>
				<Source><![CDATA[
    public boolean isAllFlagYes()
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId) == NoYes::No)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllEnabledFlagYes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that all enabled dimensions in the system have been set.
    /// </summary>
    /// <param name="_forceCalculation">Do not use the cached value.</param>
    /// <returns>true if all enabled flags are set; otherwise, false.</returns>
    [Hookable(false), Wrappable(false)]
    public boolean isAllEnabledFlagYes(boolean _forceCalculation)
    {
        if (_forceCalculation || this.IsAllEnabledFlagYesCache == UnknownNoYes::Unknown)
        {
            this.IsAllEnabledFlagYesCache = UnknownNoYes::Yes;

            ListEnumerator enumerator  = InventDim::dimEnabledFieldList().getEnumerator();
            while (enumerator.moveNext())
            {
                FieldId dimFieldId = enumerator.current();
                FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                if (this.(dimParmFieldId) == NoYes::No)
                {
                    this.IsAllEnabledFlagYesCache = UnknownNoYes::No;
                    break;
                }
            }
        }
        return this.IsAllEnabledFlagYesCache == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimHashForValuesAllFlags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventDimSHA1HashHex</c> for a dimension when all flags are set.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension.</param>
    /// <param name="_forceCalculation">Do not use the cached value.</param>
    /// <returns>If all enabled flags are set return the hash; otherwise, blank.</returns>    
    [Hookable(false), Wrappable(false)]
    public InventDimSHA1HashHex inventDimHashForValuesAllFlags(InventDim _inventDim, boolean _forceCalculation)
    {
        if (this.isAllEnabledFlagYes(_forceCalculation))
        {
            return _inventDim.hashValue();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdEnabled</Name>
				<Source><![CDATA[
    public boolean isFieldIdEnabled(FieldId _inventDimFieldId)
    {
        FieldId     dimParmFieldId = InventDim::dim2dimParm(_inventDimFieldId);
        return this.(dimParmFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlagReqCalcOptimal</Name>
				<Source><![CDATA[
    public boolean isFlagReqCalcOptimal()
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);

            #InventDimDevelop
            if (this.(dimParmFieldId) == NoYes::Yes
             && !InventDim::isFieldIdProductDimension(dimFieldId)
             && dimParmFieldId  != fieldNum(InventDimParm,InventLocationIdFlag))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlagSelective</Name>
				<Source><![CDATA[
    public boolean isFlagSelective()
    {
        var enumerator = InventDim::dimFieldListEnumerator();

        while (enumerator.moveNext())
        {
            InventDimension inventDimension = InventDimension::singletonFromInventDimFieldId(enumerator.current());
            if (inventDimension &&
                inventDimension.isSelective() &&
                this.(inventDimension.parmInventDimParmFieldId()))
            {
                return true;
            }
        }

        #inventDimDevelop
        if (this.LicensePlateFlag)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimEqualInventDimParm</Name>
				<Source><![CDATA[
    public boolean isInventDimEqualInventDimParm(InventDim _inventDim)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if ((this.(dimParmFieldId) && !_inventDim.(dimFieldId))
            || (!this.(dimParmFieldId) &&  _inventDim.(dimFieldId)))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areUnsetProductDimensionsEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether all unset product dimensions are equal. 
    /// </summary>
    /// <param name = "_currentInventDim">
    /// A current <c>InventDim</c> record.
    /// </param>
    /// <param name = "_newInventDim">
    /// A new <c>InventDim</c> record to compare against the current dimensions.
    /// </param>
    /// <returns>
    /// True if all unset product dimensions are equal; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean areUnsetProductDimensionsEqual(InventDim _currentInventDim, InventDim _newInventDim)
    {
        ListEnumerator  enumerator  = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);

            if (_newInventDim.(dimFieldId) != _currentInventDim.(dimFieldId)
                && !this.(dimParmFieldId))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddDynalink</Name>
				<Source><![CDATA[
    public void queryAddDynalink(
        QueryBuildDataSource    _qbS,
        InventDim               _inventDim)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        _qbS.clearDynalinks();

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId))
            {
                _inventDim.(dimFieldId) = _inventDim.(dimFieldId);
                _qbS.addDynalink(dimFieldId, _inventDim, dimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddGroupByField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds clauses of the <c>Group By</c> enumeration type to the data source.
    /// </summary>
    /// <param name="_qbdsInventDim">
    /// The data source to have ranges of the <c>Group By</c> enumeration type added.
    /// </param>
    /// <returns>
    /// true if any clauses of the <c>Group By</c> enumeration type are added to the data source;
    /// otherwise, false.
    /// </returns>
    /// <remarks>
    /// The clauses are determined by the values of the <c>InventDimParm</c> records.The data source that
    /// underlies the table must be a <c>InventDim</c> table.
    /// </remarks>
    public boolean queryAddGroupByField(QueryBuildDataSource _qbdsInventDim)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;
        boolean         doGroupBy;

        if (!_qbdsInventDim || _qbdsInventDim.table() != tableNum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId))
            {
                _qbdsInventDim.addGroupByField(dimFieldId);
                doGroupBy = true;
            }
        }

        return doGroupBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddSelectionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds selection fields to an <c>InventDim</c> data source based on the current <c>InventDimParm</c> record's flag values.
    /// </summary>
    /// <param name = "_qbdsInventDim">The <c>InventDim</c> data source to add selection fields on.</param>
    /// <returns>true if any selection fields have been added; otherwise, false.</returns>
    public boolean queryAddSelectionFields(QueryBuildDataSource _qbdsInventDim)
    {
        if (!_qbdsInventDim || _qbdsInventDim.table() != tableNum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;
        boolean         anyFieldsAdded;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId))
            {
                _qbdsInventDim.addSelectionField(dimFieldId);
                anyFieldsAdded = true;
            }
        }

        return anyFieldsAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddGroupByFieldInterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds clauses of the <c>Group By</c> enumeration type to the data source.
    /// </summary>
    /// <param name="_qbS">
    ///    The data source to have ranges of the <c>Group By</c> enumeration type added.
    /// </param>
    /// <remarks>
    ///    The clauses are determined by the values of the <c>InventDimParm</c> records.The data source that
    ///    underlies the table must be an <c>InterCompanyInventDim</c> table.
    /// </remarks>
    public void queryAddGroupByFieldInterCompany(QueryBuildDataSource _qbS)
    {
        List            dimFields       = InterCompanyInventDim::dimFieldList();
        ListEnumerator  enumerator      = dimFields.getEnumerator();
        FieldId         dimParmFieldId;
        FieldId         interCompanyDimFieldId;

        while (enumerator.moveNext())
        {
            dimParmFieldId = InterCompanyInventDim::dim2dimParm(enumerator.current());
            if (this.(dimParmFieldId))
            {
                interCompanyDimFieldId = InterCompanyInventDim::dimParm2dim(dimParmFieldId);
                _qbS.addGroupByField(interCompanyDimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddGroupByFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds clauses of the <c>Group By</c> enumeration type to the data source when the <c>InventDim</c>
    /// buffer has a value.
    /// </summary>
    /// <param name="_qbS">
    /// The data source to have ranges of the <c>Group By</c> enumeration type added.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record which is checked for values.
    /// </param>
    /// <remarks>
    /// The clauses are determined by the values of both the <c>InventDimParm</c> and <c>InventDim</c>
    /// records.The data source that underlies the table must be an <c>InventDim</c> table.
    /// </remarks>
    public void queryAddGroupByFieldValue(
        QueryBuildDataSource    _qbS,
        InventDim               _inventDim)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            if (_inventDim.(dimFieldId))
            {
                dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
                if (this.(dimParmFieldId))
                {
                    _qbS.addGroupByField(dimFieldId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddOrderByField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds clauses of the <c>Order By</c> enumeration type to the data source.
    /// </summary>
    /// <param name="_qbdsInventDim">
    ///    The data source to have ranges of the <c>Order By</c> enumeration type added.
    /// </param>
    /// <returns>
    ///    true if any clauses of the <c>Order By</c> enumeration type where added to the data source;
    ///    otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The clauses are determined by the values of the <c>InventDimParm</c> records.The data source that
    ///    underlies the table must be an <c>InventDim</c> table.
    /// </remarks>
    public boolean queryAddOrderByField(QueryBuildDataSource _qbdsInventDim)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;
        boolean         anyOrderBy;

        if (!_qbdsInventDim || _qbdsInventDim.table() != tableNum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId))
            {
                _qbdsInventDim.addOrderByField(dimFieldId);
                anyOrderBy = true;
            }
        }

        return anyOrderBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRange</Name>
				<Source><![CDATA[
    public void queryAddRange(
        QueryBuildDataSource    _qbS,
        InventDim               _inventDim)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId))
            {
                _qbS.addRange(dimFieldId).value(queryValue(_inventDim.(dimFieldId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeNoValue</Name>
				<Source><![CDATA[
    public void queryAddRangeNoValue(QueryBuildDataSource _qbS)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        _qbS.clearRanges();

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId))
            {
                SysQuery::findOrCreateRange(_qbS, dimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeValue</Name>
				<Source><![CDATA[
    public void queryAddRangeValue(
        QueryBuildDataSource    _qbS,
        InventDim               _inventDim)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        _qbS.clearRanges();

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            if (_inventDim.(dimFieldId))
            {
                dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
                if (this.(dimParmFieldId))
                {
                    _qbS.addRange(dimFieldId).value(queryValue(_inventDim.(dimFieldId)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddSortField</Name>
				<Source><![CDATA[
    public boolean queryAddSortField(QueryBuildDataSource _qbS)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;
        boolean         doGroupBy;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId))
            {
                _qbS.addSortField(dimFieldId);
                doGroupBy = true;
            }
        }

        if (doGroupBy)
        {
            _qbS.orderMode(OrderMode::GroupBy);
        }

        return doGroupBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedDimFields</Name>
				<Source><![CDATA[
    public List selectedDimFields()
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;
        List            res = new List(Types::Integer);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (this.(dimParmFieldId) == NoYes::Yes)
            {
                res.addEnd(dimFieldId);
            }
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveProductDim</Name>
				<Source><![CDATA[
    public void setActiveProductDim(EcoResProductDimGroupSetup _productDimGroupSetup)
    {
        InventDimGroupFieldSetupEnumerator      enumerator = _productDimGroupSetup.getFieldSetupEnumerator();
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;
        FieldId                                 dimParmFieldId;

        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isProductDimension())
            {
                dimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
                this.(dimParmFieldId) = inventDimGroupFieldSetup.isActive() ? NoYes::Yes : NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveSiteAndProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the product dimensions and site as active parameters, depending on the dimension group.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    ///    An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    ///    setup.
    /// </param>
    public void setActiveSiteAndProductDimensions(InventDimGroupSetup _inventDimGroupSetup)
    {
        this.clear();
        this.setActiveProductDim(_inventDimGroupSetup.ecoResProductDimGroupSetup());
        this.InventSiteIdFlag = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActiveSiteAndWarehouseDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the <c>InventSite</c> dimension and the <c>InventLocation</c> dimension as active parameters.
    /// </summary>
    public void setActiveSiteAndWarehouseDimensions()
    {
        this.InventSiteIdFlag       = NoYes::Yes;
        this.InventLocationIdFlag   = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>siteAndWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>InventDimParm</c> record with the site and warehouse flags set.
    /// </summary>
    /// <returns>An <c>InventDimParm</c> record with the site and warehouse flags set.</returns>
    public static InventDimParm siteAndWarehouse()
    {
        InventDimParm inventDimParm;
        inventDimParm.setActiveSiteAndWarehouseDimensions();
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allProductDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>InventDimParm</c> record with all product dimension flags set.
    /// </summary>
    /// <returns>An <c>InventDimParm</c> record with all product dimension flags set.</returns>
    public static InventDimParm allProductDim()
    {
        InventDimParm inventDimParm;
        inventDimParm.setAllProductDimensions();
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allStorageDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventDimParm allStorageDim()
    {
        InventDimParm inventDimParm;
        inventDimParm.setAllStorageDimensions();
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllInventDim</Name>
				<Source><![CDATA[
    public void setAllInventDim()
    {
        this.setDimensionsFromInventDimFieldList(InventDim::dimFieldsList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes all the product dimensions active.
    /// </summary>
    public void setAllProductDimensions()
    {
        this.setDimensionsFromInventDimFieldList(InventDim::dimProductDimFieldList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes all the tracking dimensions active.
    /// </summary>
    public void setAllTrackingDimensions()
    {
        this.setDimensionsFromInventDimFieldList(InventDim::dimTrackingDimFieldList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllStorageDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes all storage dimensions active.
    /// </summary>
    /// <param name = "_inventDimParm"></param>
    public void setAllStorageDimensions()
    {
        this.setDimensionsFromInventDimFieldList(InventDim::dimStorageDimFieldList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionsFromInventDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes dimensions active based on an <c>InventDim</c> field list.
    /// </summary>
    /// <param name = "_inventDimFieldList">A list with IDs of <c>InventDim</c> fields that need to be activated.</param>
    private void setDimensionsFromInventDimFieldList(List _inventDimFieldList)
    {
        ListEnumerator  enumerator  = (_inventDimFieldList) ? _inventDimFieldList.getEnumerator() : null;

        if (!enumerator)
        {
            return;
        }

        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            this.(dimParmFieldId) = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleAllInventDim</Name>
				<Source><![CDATA[
    public void toggleAllInventDim()
    {
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            this.(dimParmFieldId) = this.(dimParmFieldId) ? NoYes::No : NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleAllProductDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Toggles all product dimension flags.
    /// </summary>
    public void toggleAllProductDim()
    {
        ListEnumerator enumerator  = InventDim::dimProductDimFieldList().getEnumerator();

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
            this.(dimParmFieldId) = this.(dimParmFieldId) ? NoYes::No : NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleAllInventDimLargeGrp</Name>
				<Source><![CDATA[
    public void toggleAllInventDimLargeGrp()
    {
        List            dimFieldsLarge  = InventDimMetaDataCache::dimParmFieldListLarge();
        ListEnumerator  enumerator  = dimFieldsLarge.getEnumerator();
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimParmFieldId = enumerator.current();
            this.(dimParmFieldId) = this.(dimParmFieldId) ? NoYes::No : NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    public str toString()
    {
        str                     ret;
        List                    fieldList       = InventDimParm::dimParmEnabledFieldList();
        ListEnumerator          enumerator      = fieldList.getEnumerator();
        FieldId                 dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimParmFieldId = enumerator.current();
            if (this.(dimParmFieldId))
            {
                ret = (ret ? ret + ', ' : '') + new DictField(tableNum(InventDimParm),dimParmFieldId).label();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeDimFlag</Name>
				<Source><![CDATA[
    public static InventDimParm activeDimFlag(InventDimGroupSetup _inventDimGroupSetup)
    {
        InventDimParm inventDimParm;

        _inventDimGroupSetup.inventDimParmActive(inventDimParm);
        inventDimParm.ItemIdFlag      = NoYes::Yes;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an <c>InventDimParm</c> buffer with all dimensions checked.
    /// </summary>
    /// <returns>
    /// An <c>InventDimParm</c> buffer with all dimensions checked.
    /// </returns>
    public static InventDimParm allInventDim()
    {
        InventDimParm dimParmAll;

        dimParmAll.setAllInventDim();

        return dimParmAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>andParms</Name>
				<Source><![CDATA[
    public static InventDimParm andParms(
        InventDimParm   _inventDimParm1,
        InventDimParm   _inventDimParm2)
    {
        InventDimParm   inventDimParm;
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (_inventDimParm1.(dimParmFieldId) && _inventDimParm2.(dimParmFieldId))
            {
                inventDimParm.(dimParmFieldId) = NoYes::Yes;
            }
        }
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimParmEnabledFieldList</Name>
				<Source><![CDATA[
    public static List dimParmEnabledFieldList()
    {
        return InventDimMetaDataCache::dimParmEnabledFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId2Typename</Name>
				<Source><![CDATA[
    // Returns typeId of the fieldId
    public static UtilElementName fieldId2Typename(FieldId _fieldId)
    {
        SysDictField df = new SysDictField(tableNum(InventDimParm), _fieldId);

        return df.typeName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllDimIdCombinations</Name>
				<Source><![CDATA[
    public static container findAllDimIdCombinations(
        ItemId          _itemId,
        InventDimParm   _inventDimParm)
    {
        InventLocation       inventLocation;
        InventDimCombination inventDimCombination;
        InventDim            inventDimFromInventDimCombination;

        Set                  setInventDimOld;
        Set                  setInventDimNew;
        InventDim            inventDim;

        Set addCombination(int  _inventDimFieldId, str _value)
        {
            SetEnumerator   itInventDim;

            itInventDim = setInventDimOld.getEnumerator();
            if (setInventDimOld.elements())
            {
                while (itInventDim.moveNext())
                {
                    inventDim = InventDim::find(itInventDim.current());
                    inventDim.(_inventDimFieldId) = _value;
                    setInventDimNew.add(InventDim::findOrCreate(inventDim).InventDimId);
                }
            }
            else
            {
                inventDim = null;
                inventDim.(_inventDimFieldId) = _value;
                setInventDimNew.add(InventDim::findOrCreate(inventDim).InventDimId);
            }

            return setInventDimNew;
        }

        setInventDimOld = new Set(Types::String);
        setInventDimNew = new Set(Types::String);

        // Item dimensions are added first according to records in InventDimCombination
        if (_inventDimParm.anyProductDimensionFlagSet())
        {
            InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();

            while select    inventDimFromInventDimCombination
                exists join inventDimCombination
                    where   inventDimFromInventDimCombination.InventDimId   == inventDimCombination.InventDimId
                         && inventDimCombination.ItemId                     == _itemId
            {
                inventDim = null;

                enum.reset();
                while (enum.moveNext())
                {
                    FieldId inventDimParmFieldId = enum.currentInventDimParmFieldId();
                    if (_inventDimParm.(inventDimParmFieldId))
                    {
                        FieldId inventDimFieldId = enum.currentInventDimFieldId();
                        inventDim.(inventDimFieldId) = inventDimFromInventDimCombination.(inventDimFieldId);
                    }
                }
                setInventDimNew.add(InventDim::findOrCreate(inventDim).InventDimId);
            }
            setInventDimOld = setInventDimNew;
            setInventDimNew = new Set(Types::String);
        }

        // InventLocation are added
        if (_inventDimParm.InventLocationIdFlag)
        {
            while select InventLocationId from inventLocation
            {
                setInventDimNew = addCombination(fieldNum(InventDim,InventLocationId), inventLocation.InventLocationId);
            }
            setInventDimOld = setInventDimNew;
            setInventDimNew = new Set(Types::String);
        }

        return setInventDimOld.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFormRightClick</Name>
				<Source><![CDATA[
    public static boolean inventDimFormRightClick(Object implementingObject)
    {
        FormRun formRun;
        ListPageInteraction listPageInteraction;
        SysDictClass dictClass;

        if (implementingObject is FormRun)
        {
            formRun = implementingObject as FormRun;
            return formHasMethod(formRun, InventDimCtrl_Frm::inventDimSetupObjectMethod());
        }
        else if (implementingObject is ListPageInteraction)
        {
            listPageInteraction = implementingObject as ListPageInteraction;
            dictClass = new SysDictClass(classIdGet(listPageInteraction));

            return dictClass.hasObjectMethod(InventDimCtrl_Frm::inventDimSetupObjectMethod());
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimParmEqual</Name>
				<Source><![CDATA[
    public static boolean isInventDimParmEqual(
        InventDimParm   _inventDimParm1,
        InventDimParm   _inventDimParm2,
        List            _dimFields = InventDim::dimFieldsList())
    {
        ListEnumerator  enumerator  = _dimFields ? _dimFields.getEnumerator() : null;
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        if (enumerator)
        {
            while (enumerator.moveNext())
            {
                dimFieldId = enumerator.current();
                dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                if (_inventDimParm1.(dimParmFieldId) != _inventDimParm2.(dimParmFieldId))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orParms</Name>
				<Source><![CDATA[
    public static InventDimParm orParms(
        InventDimParm   _inventDimParm1,
        InventDimParm   _inventDimParm2)
    {
        InventDimParm   inventDimParm;
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (_inventDimParm1.(dimParmFieldId) || _inventDimParm2.(dimParmFieldId))
            {
                inventDimParm.(dimParmFieldId) = NoYes::Yes;
            }
        }
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orParmsAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merge all dimension parameter flag of one with the other.
    /// </summary>
    /// <param name="_inventDimParm1">
    ///    One of dimension parameter flogs setting
    /// </param>
    /// <param name="_inventDimParm2">
    ///    The other dimension parameter flogs setting
    /// </param>
    /// <returns>
    ///    A merged <c>InventDimParm</c> record.
    /// </returns>
    public static InventDimParm orParmsAll(
        InventDimParm   _inventDimParm1,
        InventDimParm   _inventDimParm2)
    {
        InventDimParm inventDimParm = InventDimParm::orParms(_inventDimParm1, _inventDimParm2);
        inventDimParm.ItemIdFlag    = _inventDimParm1.ItemIdFlag    || _inventDimParm2.ItemIdFlag;
        inventDimParm.ClosedFlag    = _inventDimParm1.ClosedFlag    || _inventDimParm2.ClosedFlag;
        inventDimParm.ClosedQtyFlag = _inventDimParm1.ClosedQtyFlag || _inventDimParm2.ClosedQtyFlag;
        inventDimParm.CompanyFlag   = _inventDimParm1.CompanyFlag   || _inventDimParm2.CompanyFlag;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>xorParms</Name>
				<Source><![CDATA[
    public static InventDimParm xorParms(
        InventDimParm   _inventDimParm1,
        InventDimParm   _inventDimParm2)
    {
        InventDimParm   inventDimParm;
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (_inventDimParm1.(dimParmFieldId) != _inventDimParm2.(dimParmFieldId))
            {
                inventDimParm.(dimParmFieldId) = NoYes::Yes;
            }
        }
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInterCompanyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets flags for all the specified non-empty dimensions.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimensions.
    /// </param>
    /// <param name="_dimFieldList">
    /// The list of dimensions that need to be considered.
    /// </param>
    /// <remarks>
    /// By default all dimensions are considered.
    /// </remarks>
    public void initFromInterCompanyInventDim(InterCompanyInventDim _inventDim, List _dimFieldList = InterCompanyInventDim::dimFieldList())
    {
        ListEnumerator  enumerator  = _dimFieldList.getEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InterCompanyInventDim::dim2dimParm(dimFieldId);
            this.(dimParmFieldId) = _inventDim.(dimFieldId) != InterCompanyInventDim::emptyDimField(dimFieldId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS54426</Label>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSerialIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedFlag</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedView</Name>
			<Label>@SYS54197</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSerialIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGTDIdFlag_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerIdFlag_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileIdFlag_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension1Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension2Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension3Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension4Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension5Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension6Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension7Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension8Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension9Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension10Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension11Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension12Flag</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>View</Name>
			<Label>@SYS53654</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBatchIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSerialIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedQtyFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGTDIdFlag_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerIdFlag_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileIdFlag_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension1Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension2Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension3Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension4Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension5Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension6Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension7Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension8Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension9Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension10Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension11Flag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimension12Flag</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductDimensions</Name>
			<Label>@SYS70071</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSizeIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventColorIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStyleIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventVersionIdFlag</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StorageDimensions</Name>
			<Label>@SYS108783</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusFlag</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TrackingDimensions</Name>
			<Label>@SYS317798</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventBatchIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSerialIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileIdFlag_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerIdFlag_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGTDIdFlag_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransactionDimensions</Name>
			<Label>@SYS117424</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemIdFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedFlag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedQtyFlag</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClosedFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClosedQtyFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClosedQtyFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CompanyFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConfigIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResConfigurationFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventBatchIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventColorIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResColorFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventGTDIdFlag_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventGTDIdFlag_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventLocationIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventOwnerIdFlag_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventOwnerIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileIdFlag_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileIdFlag_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventSerialIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSerialIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventSiteIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventSizeIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResSizeFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventStatusFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventStatusFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventStyleIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResStyleFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventVersionIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResVersionFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LicensePlateFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WMSLocationIdFlag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WMSPalletIdFlag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WMSPalletIdFlag</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension1Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension1Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension2Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension2Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension3Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension3Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension4Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension4Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension5Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension5Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension6Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension6Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension7Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension7Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension8Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension8Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension9Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension9Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension10Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension10Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension11Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension11Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventDimension12Flag</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimension12Flag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAllEnabledFlagYesCache</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>UnknownNoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>