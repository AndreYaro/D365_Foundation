<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Catalog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Catalog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categoryHierarchyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to retrieve the Category Hierarchy name.
    /// </summary>
    /// <returns>The category hierarchy name.</returns>
    public display str categoryHierarchyName()
    {
        EcoResCategoryHierarchy categoryHierarchy = EcoResCategoryHierarchy::find(this.CategoryHierarchy);
        return categoryHierarchy.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        RetailCatalogProductStatus              catalogProductStatus;
        RetailCatalogPriceGroup                 catalogPriceGroup;
        RetailCatalogInternalOrg                catalogInternalOrg;
        CatalogTranslation                      catalogTranslation;
        RetailCatalogIntOrgValidationSummary    catalogValidationSummary;

        ttsBegin;

        // delete from table RetailCatalogProductStatus
        catalogProductStatus.skipDatabaseLog(true);
        catalogProductStatus.skipEvents(true);
        catalogProductStatus.skipDataMethods(true);
        catalogProductStatus.skipDeleteActions(true);
        catalogProductStatus.skipDeleteMethod(true);

        delete_from catalogProductStatus
        where catalogProductStatus.Catalog == this.RecId;

        // delete from table RetailCatalogPriceGroup
        catalogPriceGroup.skipDatabaseLog(true);
        catalogPriceGroup.skipEvents(true);
        catalogPriceGroup.skipDataMethods(true);
        catalogPriceGroup.skipDeleteActions(true);
        catalogPriceGroup.skipDeleteMethod(true);

        delete_from catalogPriceGroup
        where catalogPriceGroup.Catalog == this.RecId;

        // delete from table RetailCatalogInternalOrg
        catalogInternalOrg.skipDatabaseLog(true);
        catalogInternalOrg.skipEvents(true);
        catalogInternalOrg.skipDataMethods(true);
        catalogInternalOrg.skipDeleteActions(true);
        catalogInternalOrg.skipDeleteMethod(true);

        delete_from catalogInternalOrg
        where catalogInternalOrg.Catalog == this.RecId;

        // delete from table CatalogTranslation
        catalogTranslation.skipDatabaseLog(true);
        catalogTranslation.skipEvents(true);
        catalogTranslation.skipDataMethods(true);
        catalogTranslation.skipDeleteActions(true);
        catalogTranslation.skipDeleteMethod(true);

        delete_from catalogTranslation
        where CatalogTranslation.Catalog == this.RecId;

        // delete from table CatalogProduct and it's sub tables
        CatalogProduct::clean(this.RecId);

        // delete from table RetailCatalogIntOrgProductValidation
        RetailCatalogIntOrgProductValidation::clean(this.RecId);

        // delete from table RetailCatalogIntOrgValidationSummary
        catalogValidationSummary.skipDatabaseLog(true);
        catalogValidationSummary.skipEvents(true);
        catalogValidationSummary.skipDataMethods(true);
        catalogValidationSummary.skipDeleteActions(true);
        catalogValidationSummary.skipDeleteMethod(true);

        delete_from catalogValidationSummary
        where catalogValidationSummary.Catalog == this.RecId;

        // delete from table Catalog
        this.skipDeleteActions(true);
        this.skipDatabaseLog(true);
        this.skipEvents(true);
        this.skipDataMethods(true);

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCallCenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a call center is associated
    /// with the catalog or not.
    /// </summary>
    /// <returns>
    /// true if a call center is associated with the catalog; otherwise, false.
    /// </returns>
    public boolean hasCallCenter()
    {
        RetailCatalogInternalOrg    retailCatalogInternalOrg;
        RetailInternalOrganization  retailInternalOrganization;
        RetailChannelTable          retailChannelTable;

        select firstOnly RecId from retailCatalogInternalOrg
            where retailCatalogInternalOrg.Catalog == this.RecId
            exists join retailInternalOrganization
            where retailInternalOrganization.RecId == retailCatalogInternalOrg.InternalOrganization
            exists join retailChannelTable
            where retailChannelTable.OMOperatingUnitID == retailInternalOrganization.InternalOrganization
            && retailChannelTable.ChannelType == RetailChannelType::MCRCallCenter;

        return retailCatalogInternalOrg.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (this.CatalogId == "")
        {
            this.CatalogID = NumberSeq::newGetNum(RetailParameters::numRefCatalogId()).num();
        }

        DirPersonUser dirPersonUser = DirPersonUser::current();
        DirPerson dirPerson = DirPerson::find(dirPersonUser.PersonParty);
        if (!dirPerson.RecId)
        {
            info(strFmt("@Retail:RetailCurrentUserName", curUserId(), curext()));
        }
        else
        {
            this.Owner = dirPerson.RecId;
        }

        this.State = CatalogState::Draft;
        this.PublishedDateTime = DateTimeUtil::minValue();
        this.ValidFrom = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getCompanyTimeZone()));
        this.ValidTo = DateTimeUtil::date(DateTimeUtil::maxValue());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsBegin;

        if (this.CatalogID == "")
        {
            this.CatalogID = NumberSeq::newGetNum(RetailParameters::numRefCatalogId()).num();
        }

        this.refreshValidFromDateTime();

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCanDeleteRelatedTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether <c>Catalog</c> related tables can be deleted.
    /// </summary>
    /// <param name="_catalog">
    /// The <c>Catalog</c> record for which this method checks for existing records to delete.
    /// </param>
    /// <returns>
    /// true if the related tables can be deleted; otherwise, false.
    /// </returns>
    public NoYes mcrCanDeleteRelatedTables(CatalogRefRecId _catalog)
    {
        MCRSourceCodeSetup  mcrSourceCodeSetup;
        MCRSalesTable       mcrsalesTable;

        //For all source codes that a catalog is tied to, check to see if that source code is on a sales table
        //record.  If it is, we do not allow deletion of related tables.
        select RecId from mcrSourceCodeSetup
            where mcrSourceCodeSetup.Catalog == _catalog
            exists join mcrsalesTable
            where mcrsalesTable.SourceId == mcrSourceCodeSetup.SourceID;

        return mcrSourceCodeSetup.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> value that is modified.
    /// </param>
    /// <remarks>
    /// Refresh valid from date time based on catalog valid from date and company time zone.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(Catalog, ValidFrom):
                this.refreshValidFromDateTime();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a name of the catalog.
    /// </summary>
    /// <param name="_languageId">
    ///    The ID of a language for which a name is retrieved.
    /// </param>
    /// <returns>
    ///    A name of the catalog, if defined;
    /// </returns>
    public display CatalogName name(LanguageId _languageId = SystemParameters::getSystemLanguageId())
    {
        CatalogTranslation translation = CatalogTranslation::find(this.RecId, _languageId);
        CatalogName catalogTranslatedName = translation.FriendlyName;

        return catalogTranslatedName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshValidFromDateTime</Name>
				<Source><![CDATA[
    private void refreshValidFromDateTime()
    {
        this.ValidFromDateTime = DateTimeUtil::newDateTime(this.ValidFrom, 0, DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsBegin;

        this.refreshValidFromDateTime();

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.PublishedDateTime != DateTimeUtil::minValue())
        {
            // Cannot delete previously published catalog.
            info("@RET15029");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in Catalog table.
    /// </summary>
    /// <param name="recId">
    /// the record identifier.
    /// </param>
    /// <param name="_forUpdate">
    /// if we want to update the row.
    /// </param>
    /// <param name="_disableCache">
    /// Whether to disable cache for the buffer returned.
    /// </param>
    /// <returns>
    /// a catalog record
    /// </returns>
    public static Catalog find(RecId recId, boolean _forUpdate = false, boolean _disableCache = false)
    {
        Catalog catalog;

        // Remarks: Cache setting is set per buffer. Therefore, if disabled,
        // the cache is only going to be disabled for that buffer and not for every subsequent buffer.
        catalog.disableCache(_disableCache);

        catalog.selectForUpdate(_forUpdate);

        select firstonly catalog
            where catalog.RecId == recId;

        return catalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelHierarchyDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets channel hierarchy effective date time for catalog.
    /// </summary>
    /// <param name="_catalogRecId">
    /// The record identifier of catalog.
    /// </param>
    /// <returns>
    /// The channel hierarchy effective date time for catalog.
    /// </returns>
    public static utcDateTime getChannelHierarchyDateTime(CatalogRefRecId _catalogRecId)
    {
        Catalog catalog = Catalog::find(_catalogRecId);
        return catalog.ValidFromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemsFromSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the item lookup to only show items that are part of the catalog associated with the specified source code.
    /// </summary>
    /// <param name="_sourceId">
    /// The source code specified on the sales order used to filter the items.
    /// </param>
    /// <param name="_callingControl">
    /// The item Id control whose lookup should be filtered.
    /// </param>
    /// <param name="_filterStr">
    /// The string entered by the user on the control.
    /// </param>
    public static void lookupItemsFromSourceId(MCRSourceID _sourceId,
                    FormControl _callingControl,
                    str _filterStr)
    {
        SysTableLookup sysTableLookup;
        Query query = new Query();
        #localmacro.ItemId " == \%%1" #endmacro
        QueryBuildDataSource queryBuildDataSourceInventTable;
        QueryBuildDataSource queryBuildDataSourceMCRSourceCodeSetup;
        QueryBuildDataSource queryBuildDataSourceCatalog;
        QueryBuildDataSource queryBuildDataSourceCatalogProduct;
        QueryBuildDataSource queryBuildDataSourceEcoResProduct;

        //Add several columns of information to show as part of the lookup
        sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _callingControl);
        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        sysTableLookup.addLookupfield(fieldNum(InventTable, NameAlias));
        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemType));
        sysTableLookup.addLookupfield(fieldNum(InventTable, Product));
        sysTableLookup.addLookupfield(fieldNum(InventTable, PmfPlanningItemId));

        queryBuildDataSourceInventTable = query.addDataSource(tablenum(InventTable));
        if (_filterStr)
        {
            queryBuildDataSourceInventTable.addRange(fieldNum(InventTable, ItemId)).value(strFmt(#ItemId,_filterStr));
        }
        //if the sourceId is specified, then filter the lookup to only show items
        //that are part of the catalog specified by the source code.
        if (_sourceId)
        {
            queryBuildDataSourceEcoResProduct = queryBuildDataSourceInventTable.addDataSource(tableNum(EcoResProduct));
            queryBuildDataSourceEcoResProduct.relations(true);
            queryBuildDataSourceEcoResProduct.joinMode(JoinMode::InnerJoin);
            queryBuildDataSourceCatalogProduct = queryBuildDataSourceEcoResProduct.addDataSource(tableNum(CatalogProduct));
            queryBuildDataSourceCatalogProduct.relations(true);
            queryBuildDataSourceCatalogProduct.joinMode(JoinMode::InnerJoin);
            queryBuildDataSourceCatalog = queryBuildDataSourceCatalogProduct.addDataSource(tableNum(Catalog));
            queryBuildDataSourceCatalog.relations(true);
            queryBuildDataSourceCatalog.joinMode(JoinMode::InnerJoin);
            queryBuildDataSourceMCRSourceCodeSetup = queryBuildDataSourceCatalog.addDataSource(tablenum(MCRSourceCodeSetup));
            queryBuildDataSourceMCRSourceCodeSetup.addLink(fieldNum(Catalog,RecId),fieldNum(MCRSourceCodeSetup, Catalog));
            queryBuildDataSourceMCRSourceCodeSetup.joinMode(JoinMode::InnerJoin);
            queryBuildDataSourceMCRSourceCodeSetup.addRange(fieldNum(MCRSourceCodeSetup, SourceID)).value(SysQuery::value(_sourceId));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindByCatalogId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find Catalog by catalogId.
    /// </summary>
    /// <param name = "retailCatalogId">Unique id for catalog.</param>
    /// <returns>Catalog.</returns>
    public static Catalog FindByCatalogId(RetailCatalogId retailCatalogId)
    {
        Catalog Catalog;

        select firstonly Catalog where Catalog.CatalogId == retailCatalogId;

        return Catalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether data is valid and ready to be written.
    /// </summary>
    /// <returns>true if data is valid to be written, otherwise; false.</returns>
    public boolean validateWrite()
    {
        boolean ret = true;

        if (!this.Owner)
        {
            ret = checkFailed("@Retail:CatalogOwnerMissing");
        }

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET15039</DeveloperDocumentation>
	<FormRef>RetailCatalogDetails</FormRef>
	<Label>@RET15004</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CatalogId</TitleField1>
	<TitleField2>Owner</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Merchandising</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CatalogNumberIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MCRSourceCodeSetup</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>Catalog</Relation>
			<Table>MCRSourceCodeSetup</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CatalogId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CatalogId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CatalogId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@RET5150</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CatalogId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishedValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishedValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnableSnapshot</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFromDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Header</Name>
			<Label>@RET15012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CatalogId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableSnapshot</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailEnableSnapshot</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Owner</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS80923</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PublishedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatalogPublishDateTime</ExtendedDataType>
			<Label>@RET4040032</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PublishedValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@RET490250</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PublishedValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Label>@RET490251</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CatalogState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@RET260626</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFromDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Label>@RET4369</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CatalogId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCatalogId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryHierarchyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CatalogTarget</Name>
			<EnumType>RetailCatalogTarget</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CatalogNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CatalogId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>State</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Owner</Name>
					<Field>Owner</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CategoryHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryHierarchyId</Name>
					<Field>CategoryHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>