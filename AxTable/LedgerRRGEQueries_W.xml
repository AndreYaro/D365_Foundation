<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEQueries_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGEQueries_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowCreateProperties</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean allowCreateProperties()
    {
        return this.Type != LedgerRRGEQueryType_W::Simple && this.Type != LedgerRRGEQueryType_W::Requisites;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowQueryEdit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean allowQueryEdit()
    {
        boolean res;

        switch (this.Type)
        {
            case LedgerRRGEQueryType_W::Simple:
                res = this.Query != conNull();
                break;

            case LedgerRRGEQueryType_W::Requisites:
                res = true;
                break;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowQueryReset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean allowQueryReset()
    {
        return this.Type == LedgerRRGEQueryType_W::Simple && this.RefTableId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private PackedQueryRun buildQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        if (this.RefTableId)
        {
            qbds = query.addDataSource(this.RefTableId);
            qbds.firstOnly(this.FirstOnly);
        }

        return query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFirstOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the first only flag for the query.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the first only flag value has been modified.
    /// </param>
    /// <param name="_value">
    /// The new first only flag value for the query.
    /// </param>
    /// <returns>
    /// The first only flag value for the query.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGEFirstOnly_W editFirstOnly(boolean _set, LedgerRRGEFirstOnly_W _value)
    {
        QueryBuildDataSource    qbds;
        Query                   query;

        if (this.Type == LedgerRRGEQueryType_W::Simple && this.Query != connull())
        {
            query = new Query(this.Query);
            if (query && query.dataSourceCount())
            {
                qbds = query.dataSourceNo(1);
                if (_set)
                {
                    this.FirstOnly = _value;
                    qbds.firstOnly(_value);
                    this.Query = query.pack();
                }
            }
        }

        return qbds && qbds.firstOnly();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean editQuery()
    {
        SysQueryRun                     sysQueryRun;
        FormRun                         formRun;
        Args                            args;
        LedgerRRGEQueries_W             eQuery;
        LedgerRRGEQueryId_W             queryId;
        Object                          formObject;
        Map                 propertiesMap;

        this.reread();

        switch (this.Type)
        {
            case LedgerRRGEQueryType_W::Simple:
                if (this.Query != conNull())
                {
                    sysQueryRun = this.getSysQueryRun();
                    sysQueryRun.promptLoadLastUsedQuery(false);
                    sysQueryRun.promptAllowSave(false);
                    sysQueryRun.promptShowSorting(false);
                    sysQueryRun.promptSaveQueryPrUser(false);

                    args         = new Args(formStr(SysQueryForm));
                    args.caller(sysQueryRun);
                }
                break;

            case LedgerRRGEQueryType_W::Function:
                args = new Args(formStr(LedgerRRGEFunctionSetup_W));
                args.record(this);
                break;
        }

        if (args)
        {
            queryId = this.QueryId;
            formRun = ClassFactory::formRunClassOnClient(args);
            formRun.init();

            if (!this.RecId && this.Type == LedgerRRGEQueryType_W::Requisites && formHasMethod(formRun, identifierStr(propertiesMap)))
            {
                if (FormDataUtil::isFormDataSource(this) && formHasMethod(FormDataUtil::getFormDataSource(this).formRun(), identifierStr(propertiesMap)))
                {
                    formObject      = FormDataUtil::getFormDataSource(this).formRun();
                    propertiesMap   = formObject.propertiesMap();
                }

                formObject = formRun;
                formObject.propertiesMap(propertiesMap);
            }

            formRun.run();
            formRun.wait();

            if (formRun.closedOk())
            {
                switch (this.Type)
                {
                    case LedgerRRGEQueryType_W::Simple:
                        if (this.RecId)
                        {
                            ttsbegin;
                            eQuery = LedgerRRGEQueries_W::findByQueryId(queryId, true);
                            eQuery.initQuery(sysQueryRun);
                            eQuery.update();
                            ttscommit;
                        }
                        else
                        {
                            this.initQuery(sysQueryRun);
                        }
                        break;

                    case LedgerRRGEQueryType_W::Requisites:
                        if (formHasMethod(formRun, identifierStr(propertiesMap)))
                        {
                            formObject      = formRun;
                            propertiesMap   = formObject.propertiesMap();
                            if (this.RecId)
                            {
                                this.updateQueryRequisites(propertiesMap);
                            }
                            else
                            {
                                if (FormDataUtil::isFormDataSource(this) && formHasMethod(FormDataUtil::getFormDataSource(this).formRun(), identifierStr(propertiesMap)))
                                {
                                    formObject = FormDataUtil::getFormDataSource(this).formRun();
                                    formObject.propertiesMap(propertiesMap);
                                }
                            }
                        }
                        break;
                }

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTableCaption</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit TableName editTableCaption(boolean _set, TableName _tableCaption)
    {
        if (_set)
        {
            this.initQuery();

            if (FormDataUtil::isFormDataSource(this))
            {
                FormDataUtil::getFormDataSource(this).refresh();
            }
        }

        return this.tableCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTableName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit TableName editTableName(boolean _set, TableName _tableName)
    {
        TableId tId;

        if (_set)
        {
            tId = tableName2Id(_tableName);
            if (tId)
            {
                this.RefTableId = tId;
                this.initQuery();

                if (FormDataUtil::isFormDataSource(this))
                {
                    FormDataUtil::getFormDataSource(this).refresh();
                }
            }
        }

        return this.tableName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGEQueryTypeText_W editType(boolean                     _set,
                                            LedgerRRGEQueryTypeText_W   _queryTypeText)
    {
        SysDictEnum dictEnum = new SysDictEnum(enumNum(LedgerRRGEQueryType_W));
        int         i;

        if (_set)
        {
            for (i = 0; i < dictEnum.values(); i++)
            {
                if (dictEnum.index2Label(i) == _queryTypeText)
                {
                    this.Type = dictEnum.index2Value(i);
                    if (this.Type)
                    {
                        this.Name = _queryTypeText;
                    }
                    break;
                }
            }
        }

        return dictEnum.value2Label(this.Type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SysQueryRun getSysQueryRun()
    {
        SysQueryRun sysQueryRun;
        Query       query;
       

        if (this.Query != conNull())
        {
            query        = new Query(this.Query);
            sysQueryRun  = new SysQueryRun(query);
            sysQueryRun.origQueryPack(query.pack());
        }

        return sysQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCellTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromCellTable(LedgerRRGCellTable_RU _cellTable)
    {
        LedgerRRGReportTable_RU reportTable = _cellTable.reportTable();

        this.Scale              = reportTable.Scale;
        this.CurrencyForCalc    = reportTable.CurrencyForCalc;
        this.PointSignNum       = reportTable.PointSignNum;
        this.Type               = LedgerRRGEQueryType_W::Function;
        this.Period             = _cellTable.LedgerPeriodCode;
        this.TypeByCorrect      = _cellTable.TypeByCorrect;
        this.DataType           = _cellTable.DataType;
        this.ModelNum           = _cellTable.ModelNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initQuery(Object _queryOrQueryRun = null)
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        int                     i;

        if (! _queryOrQueryRun)
        {
            this.Query = this.buildQuery();
        }
        else
        {
            switch (classIdGet(_queryOrQueryRun))
            {
                case classNum(Query) :
                case classNum(SysQuery) :
                    query = _queryOrQueryRun;
                    break;

                case classNum(QueryRun) :
                case classNum(SysQueryRun) :
                    query = _queryOrQueryRun.query();
                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            for (i = 1; i <= query.dataSourceCount(); i++)
            {
                qbds = query.dataSourceNo(i);
                if (qbds.joined())
                {
                    qbds.joinMode(JoinMode::InnerJoin);
                }
            }

            this.Query = query.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Scale          = 1.0;
        this.TypeByCorrect  = LedgerRRGTypeByCorrect_RU::None;
        this.PointSignNum   = 0;
        this.FirstOnly      = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryButtonName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Caption queryButtonName()
    {
        if (this.Type == LedgerRRGEQueryType_W::Requisites)
        {
            return "@SYS116429";
        }

        return "@SYS25531";
    }

]]></Source>
			</Method>
			<Method>
				<Name>refSysDictTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SysDictTable refSysDictTable()
    {
        if (this.Type == LedgerRRGEQueryType_W::Simple && this.RefTableId)
        {
            return SysDictTable::newTableId(this.RefTableId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlStatementText</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display SysSQLStatementText sqlStatementText()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        SysSQLStatementText     text;

        if (this.Type == LedgerRRGEQueryType_W::Simple && this.Query != conNull())
        {
            query = new Query(this.Query);
            if (query && query.dataSourceCount())
            {
                qbds = query.dataSourceNo(1);
                text = qbds.toString();
            }
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableCaption</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display RangeTableLabel tableCaption()
    {
        SysDictTable dictTable;
        SysDictEnum  dictEnum;

        if (this.Type == LedgerRRGEQueryType_W::Simple)
        {
            dictTable = this.refSysDictTable();
            if (dictTable)
            {
                return dictTable.label();
            }
        }
        else
        {
            dictEnum = new SysDictEnum(enumNum(LedgerRRGEQueryType_W));
            if (dictEnum)
            {
                return dictEnum.value2Label(this.Type);
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display TableName tableName()
    {
        SysDictTable dictTable;
        SysDictEnum  dictEnum;

        if (this.Type == LedgerRRGEQueryType_W::Simple)
        {
            dictTable = this.refSysDictTable();
            if (dictTable)
            {
                return dictTable.name();
            }
        }
        else
        {
            dictEnum = new SysDictEnum(enumNum(LedgerRRGEQueryType_W));
            if (dictEnum)
            {
                return dictEnum.value2Label(this.Type);
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        LedgerRRGEQueries_W::flushCache(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRequisites</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateQueryRequisites(Map _propertiesMap)
    {
        LedgerRRGOperationTable_RU  operationTable;
        MapEnumerator               me;

        ttsbegin;
        delete_from operationTable
            where operationTable.CellTableId    == this.TableId
               && operationTable.CellRecId      == this.RecId;

        if (_propertiesMap)
        {
            me = _propertiesMap.getEnumerator();
            while (me.moveNext())
            {
                operationTable.CellTableId  = this.TableId;
                operationTable.CellRecId    = this.RecId;
                operationTable.ConstantText = me.currentValue();
                operationTable.LineNum      = me.currentKey();
                operationTable.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.Type == LedgerRRGEQueryType_W::Function)
        {
            if (!this.Scale)
            {
                ret = checkFailed(strFmt("@SYS78463", fieldPName(LedgerRRGEQueries_W, Scale)));
            }

            if (this.PointSignNum < 0)
            {
                ret = checkFailed(strFmt("@SYS79124", fieldPName(LedgerRRGEQueries_W, PointSignNum)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>complexQueryTypes</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container complexQueryTypes()
    {
        DictEnum    dictEnum = new DictEnum(enumNum(LedgerRRGEQueryType_W));
        int         i;
        container   res;

        for (i = 0; i < dictEnum.values(); i++)
        {
            if (i != LedgerRRGEQueryType_W::Simple)
            {
                res += dictEnum.index2Value(i);
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceQuery_W datasourceQuery(LedgerRRGEQueryRecId_W _queryRecId, LedgerRRGEDocuments_W _document = null, boolean _cache = true)
    {
        SysGlobalCache              cache;
        int                         ticks;
        Struct                      cacheStruct;
        LedgerRRGEDatasourceQuery_W datasourceQuery;
        LedgerRRGEQueries_W         eQuery;
        Map                         queryMap;
        const int                   CacheExpirePeriod	    = 60000;
        const str                   ExpirationField	        = 'Expiration';
        const str                   DatasourceQueryField	= 'DatasourceQuery';
        const int                   ExpirationFieldIdx	    = 1;
        const int                   DatasourceQueryFieldIdx	= 2;
        const str                   KeyDelimiter	        = '##';

        if (_queryRecId)
        {
            if (_cache)
            {
                cache = classfactory.globalCache();

                ticks = System.Environment::get_TickCount();

                queryMap    = cache.get(classStr(LedgerRRGEDatasourceQuery_W), _queryRecId, null);
                if (!queryMap)
                {
                    queryMap = new Map(Types::String, Types::Class);
                }
                else
                {
                    if(queryMap.exists(_document.DocumentId))
                    {
                        cacheStruct = queryMap.lookup(_document.DocumentId);
                    }
                }
            }

            if (cacheStruct && ticks < cacheStruct.valueIndex(ExpirationFieldIdx))
            {
                datasourceQuery = cacheStruct.valueIndex(DatasourceQueryFieldIdx);
            }
            else
            {
                eQuery = LedgerRRGEQueries_W::find(_queryRecId);
                if (eQuery)
                {
                    datasourceQuery = LedgerRRGEDatasourceQuery_W::newQuery(eQuery, _document);
                    if (_cache)
                    {
                        cacheStruct = new Struct();
                        cacheStruct.add(ExpirationField, ticks + CacheExpirePeriod);
                        cacheStruct.add(DatasourceQueryField, datasourceQuery);
                        queryMap.insert(_document.DocumentId, cacheStruct);

                        cache.set(classStr(LedgerRRGEDatasourceQuery_W), _queryRecId, queryMap);
                    }
                }
            }
        }

        return datasourceQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existQueryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Does the query exist or not.
    /// </summary>
    /// <param name="_queryId">
    ///   An ID of the query.
    /// </param>
    /// <returns>
    ///   A query found.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existQueryId(LedgerRRGEQueryId_W _queryId)
    {
        return _queryId && (select ledgerRRGEQueries_W index QueryIdIdx
            where ledgerRRGEQueries_W.QueryId == _queryId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerRRGEQueries_W</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the LedgerRRGEQueries_W record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerRRGEQueries_W</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEQueries_W find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerRRGEQueries_W ledgerRRGEQueries;

        ledgerRRGEQueries.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerRRGEQueries.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerRRGEQueries
            where ledgerRRGEQueries.RecId == _recId;

        return ledgerRRGEQueries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByQueryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds a query by it's ID.
    /// </summary>
    /// <param name="_queryId">
    ///   An ID of a query.
    /// </param>
    /// <param name="_update">
    ///   Whether select for update or not.
    /// </param>
    /// <returns>
    ///   A record found found.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEQueries_W findByQueryId(LedgerRRGEQueryId_W _queryId, boolean _update = false)
    {
        LedgerRRGEQueries_W query;

        if (_queryId)
        {
            query.selectForUpdate(_update);

            select firstonly query
                index QueryIdIdx
                where query.QueryId == _queryId;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushCache</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static client public void flushCache(LedgerRRGEQueryRecId_W _queryRecId = 0, LedgerRRGEDocuments_W _document = null)
    {
        SysGlobalCache  cache = classfactory.globalCache();
        Map             queryMap;

        if (_queryRecId)
        {
            if (_document.DocumentId)
            {
                queryMap = cache.get(classStr(LedgerRRGEDatasourceQuery_W), _queryRecId, null);
                if (queryMap)
                {
                    queryMap.remove(_document.DocumentId);
                }
            }
            else
            {
                cache.remove(classStr(LedgerRRGEDatasourceQuery_W), _queryRecId);
            }
        }
        else
        {
            cache.clear(classStr(LedgerRRGEDatasourceQuery_W));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTypes</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container queryTypes()
    {
        DictEnum    dictEnum = new DictEnum(enumNum(LedgerRRGEQueryType_W));
        int         i;
        container   res;

        for (i = 0; i < dictEnum.values(); i++)
        {
            if (i != LedgerRRGEQueryType_W::Function)
            {
                res += dictEnum.index2Value(i);
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableNamelookup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void tableNamelookup(FormControl _formControl)
    {
        Query                   query = new Query();
        SysTableLookup          sysTableLookup;
        QueryBuildDataSource    qbds;

        sysTableLookup = SysTableLookup::newParameters(tableNum(UtilElements), _formControl);

        sysTableLookup.addLookupfield(fieldNum(UtilElements, Name), true);

        qbds = query.addDataSource(tableNum(UtilElements));
        qbds.addRange(fieldNum(UtilElements, RecordType)).value(queryValue(UtilElementType::Table));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        LedgerRRGOperationTable_RU operTable;
        boolean ret;
    
        ret = super(_fieldIdToCheck);
    
        switch(_fieldIdToCheck)
        {
            case fieldNum(LedgerRRGEQueries_W, DimensionHierarchy) :
                select firstOnly RecId from operTable
                    where operTable.CellTableId == this.TableId
                       && operTable.CellRecId   == this.RecId;
    
                if (operTable.RecId)
                {
                    ret = checkFailed("@SYP4860750");
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS70735</DeveloperDocumentation>
	<Label>@SYS70735</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>QueryId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>QueryIdIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>QueryIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerRRGDimensionInterval_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGDimensionInterval_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGEExpressionLines_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGEExpressionLines_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGOperationTable_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGOperationTable_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGTransOperationsTax_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGTransOperationsTax_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerRRGTransType_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGTransType_RU</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Appearance</Name>
			<Label>@LedgerRRG:LedgerRRG_Appearance</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Scale</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PointSignNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EditTableInfo</Name>
			<Label>@SYS40151</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editTableCaption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editTableName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Function</Name>
			<Label>@SYS80410</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyForCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Period</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TypeByCorrect</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QueryDetails</Name>
			<Label>@SYS8811</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sqlStatementText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editFirstOnly</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableInfo</Name>
			<Label>@SYS40151</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>tableCaption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>tableName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CurrencyForCalc</Name>
			<EnumType>LedgerRRGCurrencyForCalc_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<EnumType>LedgerRRGDataType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FirstOnly</Name>
			<ExtendedDataType>LedgerRRGEFirstOnly_W</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelNum</Name>
			<ExtendedDataType>BudgetModelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Period</Name>
			<ExtendedDataType>LedgerRRGEPeriodCode_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PointSignNum</Name>
			<ExtendedDataType>LedgerRRGEPointSignNum_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Query</Name>
			<ExtendedDataType>PackedQueryRun</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QueryId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LedgerRRGEQueryId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Scale</Name>
			<ExtendedDataType>LedgerRRGEScale_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>LedgerRRGEQueryType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeByCorrect</Name>
			<EnumType>LedgerRRGTypeByCorrect_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionHierarchy</Name>
			<ExtendedDataType>DimensionHierarchyId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>QueryIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>QueryId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionHierarchyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BudgetModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetModel</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelNum</Name>
					<SourceEDT>BudgetModelId</SourceEDT>
					<Field>ModelNum</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerPeriodCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerPeriodCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Period</Name>
					<SourceEDT>LedgerRRGEPeriodCode_W</SourceEDT>
					<Field>Period</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionHierarchy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGEQueries_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchy</Name>
					<Field>DimensionHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>