<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPDCRegister</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendPDCRegister extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.DateReceived = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.MaturityDate = this.DateReceived + 1;
        this.pdcStatus = PostDatedCheckStatus::Open;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxMaturityDate</Name>
				<Source><![CDATA[
    public display TransDate maxMaturityDate(CustVendPDCRegister _custVendPDCRegister)
    {
        CustVendPDCRegister custVendPDCRegisterLocal;

        select maxof(MaturityDate) from custVendPDCRegisterLocal
            where custVendPDCRegisterLocal.AccountType == _custVendPDCRegister.AccountType;

        return custVendPDCRegisterLocal.MaturityDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        CustVendPDCRegister original;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(CustVendPDCRegister, IsReplacementCheck):
                if (this.IsReplacementCheck == NoYes::No)
                {
                    this.Comments = '';
                    this.OriginalCheck = '';
                }
                break;

            case fieldnum(CustVendPDCRegister, StopPayment):
                if (this.StopPayment == NoYes::No)
                {
                    this.pdcStatus = PostDatedCheckStatus::Open;
                    this.ReasonForStop = '';
                }
                else
                {
                    this.pdcStatus = PostDatedCheckStatus::OnHold;
                }
                break;

            case fieldnum(CustVendPDCRegister, OriginalCheck):
                original = CustVendPDCRegister::findByCheck(this.OriginalCheck);
                this.MaturityDate = original.MaturityDate;
                this.BankBranch = original.BankBranch;
                this.BankName = original.BankName;
                this.WorkerCollectionAgent = original.WorkerCollectionAgent;
                this.WorkerSalesPerson = original.WorkerSalesPerson;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    public display AmountCur totalAmount(CustVendPDCRegister _custVendPDCRegister)
    {
        CustVendPDCRegister custVendPDCRegisterLocal;
        LedgerJournalTrans ledgerJournalTrans;

        select sum(AmountCurCredit), sum(AmountCurDebit) from ledgerJournalTrans
            join RecId from custVendPDCRegisterLocal
            where custVendPDCRegisterLocal.AccountType == _custVendPDCRegister.AccountType
                && ledgerJournalTrans.RecId == custVendPDCRegisterLocal.LedgerJournalTrans;

        return ledgerJournalTrans.AmountCurCredit + ledgerJournalTrans.AmountCurDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalPDCs</Name>
				<Source><![CDATA[
    public display Integer totalPDCs(CustVendPDCRegister _custVendPDCRegister)
    {
        CustVendPDCRegister custVendPDCRegisterLocal;

        select count(RecId) from custVendPDCRegisterLocal
            where custVendPDCRegisterLocal.AccountType == _custVendPDCRegister.AccountType;

        return int642int(custVendPDCRegisterLocal.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.IsReplacementCheck && !this.OriginalCheck)
        {
            ret = checkFailed("@SYS322487");
        }

        if (!this.MaturityDate)
        {
            ret = checkFailed("@SYS322490");
        }

        if (this.MaturityDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            var isPDCMaturityDateFeatureEnabled = FeatureStateProvider::isFeatureEnabled(CustVendPDCMaturityDateValidationFeature::instance());
        
            if (isPDCMaturityDateFeatureEnabled && LedgerJournalTrans::findRecId(this.LedgerJournalTrans, false).OffsetAccountType != LedgerJournalACType::Bank)
            {
                ret = checkFailed("@ApplicationSuite_Localization:PDCMaturityDateShouldBeGreater");
            }
            else if (!isPDCMaturityDateFeatureEnabled)
            {
                ret = checkFailed("@SYS330443");
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>CustVendPDCRegister</c> table record exists for a specified <c>CustTrans</c> table record.
    /// </summary>
    /// <param name="_custTransRecId">
    /// The record ID of the <c>CustTrans</c> table record.
    /// </param>
    /// <returns>
    /// true if a record is found; otherwise, false.
    /// </returns>
    public static boolean existsForCustTrans(RefRecId _custTransRecId)
    {
        CustVendPDCRegister custVendPDCRegister;
        LedgerJournalTrans ledgerJournalTrans;

        Debug::assert(_custTransRecId != 0);

        select firstOnly RecId from custVendPDCRegister
            exists join Recid from ledgerJournalTrans
                where custVendPDCRegister.LedgerJournalTrans == ledgerJournalTrans.RecId
                    && ledgerJournalTrans.CustTransId == _custTransRecId;

        return custVendPDCRegister.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPostedPDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a posted <c>CustVendPDCRegister</c> table record exists for a given bank account and check number.
    /// </summary>
    /// <param name = "_accountID">Bank account number</param>
    /// <param name = "_chequeNum">Check number</param>
    /// <returns></returns>
    public static boolean existsPostedPDC(CompanyBankAccountId _accountID, BankChequeNum _chequeNum)
    {
        CustVendPDCRegister custVendPDCRegister;
        BankChequeTable bankChequeTable;

        select count(RecId) from custVendPDCRegister
            where custVendPDCRegister.PDCStatus == PostDatedCheckStatus::Posted
            join bankChequeTable
            where bankChequeTable.ChequeNum == custVendPDCRegister.CheckNumber
                && bankChequeTable.SourceRecId == custVendPDCRegister.LedgerJournalTrans
                    && bankChequeTable.SourceTableId == tableNum(LedgerJournalTrans)
                    && bankChequeTable.ChequeNum == _chequeNum
                    && bankChequeTable.AccountID == _accountID
                    && bankChequeTable.ChequeStatus == ChequeStatus::Payment;

        return (custVendPDCRegister.RecID > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForJournalNum</Name>
				<Source><![CDATA[
    internal static boolean existsForJournalNum(LedgerJournalId _journalNum)
    {
        boolean hasPDC = false;

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerPostDatedChecks)))
        {
            CustVendPDCRegister custVendPDCRegister;
            LedgerJournalTrans ledgerJournalTrans;

            select firstonly RecId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _journalNum
            exists join custVendPDCRegister
                where custVendPDCRegister.LedgerJournalTrans == ledgerJournalTrans.RecId;
            
            hasPDC = (ledgerJournalTrans != null);
        }

        return hasPDC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCheck</Name>
				<Source><![CDATA[
    public static CustVendPDCRegister findByCheck(
        PostDatedCheckNum _pdcCheckNum ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendPDCRegister custVendPDCRegister;

        custVendPDCRegister.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendPDCRegister.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendPDCRegister
            where custVendPDCRegister.CheckNumber == _pdcCheckNum;

        return custVendPDCRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReference</Name>
				<Source><![CDATA[
    public static CustVendPDCRegister findByReference(
        RefRecId _ledgerJournalTransRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendPDCRegister custVendPDCRegister;

        custVendPDCRegister.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendPDCRegister.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendPDCRegister
            where custVendPDCRegister.LedgerJournalTrans == _ledgerJournalTransRecId;

        return custVendPDCRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCheckNumber</Name>
				<Source><![CDATA[
    public static void lookupCheckNumber(FormControl _formControl)
    {
        FormStringControl formStringControl;
        Args args;
        FormRun formRun;

        args = new Args();
        args.name(formstr(CustVendPDCLookup));
        args.caller(_formControl);
        args.lookupField(fieldnum(CustVendPDCRegister, CheckNumber));

        if (_formControl is FormStringControl)
        {
            formStringControl = _formControl as FormStringControl;
            args.lookupValue(formStringControl.text());
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        formRun = classfactory.formRunClass(args);
        formRun.init();

        if (_formControl is FormStringControl)
        {
            formStringControl = _formControl as FormStringControl;
            formStringControl.performFormLookup(formRun);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPDCMethodOfPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for the <c>VendPaymMode</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The control for the field that has the lookup.
    /// </param>
    /// <remarks>
    /// This method only displays the vendor method of payments with PDC clearing posting enabled.
    /// </remarks>
    public static void lookupPDCMethodOfPayment(FormStringControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(VendPaymModeTable),_formControl);
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(VendPaymModeTable));
        QueryBuildRange queryBuildRangeMethodType = queryBuildDataSource.addRange(fieldnum(VendPaymModeTable, pdcClearingPosting));

        sysTableLookup.addLookupfield(fieldnum(VendPaymModeTable, PaymMode));
        sysTableLookup.addLookupfield(fieldnum(VendPaymModeTable, Name));
        queryBuildRangeMethodType.value(queryValue(NoYes::Yes));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendPDCRecords</Name>
				<Source><![CDATA[
    public static void insertVendPDCRecords(LedgerJournalId _journalNum)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        CustVendPDCRegister vendPDCRegister;
        PDCMaturityDate maturityDate = DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), 1));
        PDCDateReceived dateReceived = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
        PostDatedCheckStatus pdcStatus = PostDatedCheckStatus::Open;
        CustVendACType custVendType = CustVendACType::Vend;

        ttsbegin;
        insert_recordset vendPDCRegister (AccountType, LedgerJournalTrans, MaturityDate, DateReceived, PDCStatus)
            select custVendType, RecId, maturityDate, dateReceived, pdcStatus from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == _journalNum
                notExists join vendPDCRegister
                    where vendPDCRegister.LedgerJournalTrans == ledgerJournalTrans.RecId;
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerPostDatedChecks</ConfigurationKey>
	<DeveloperDocumentation>@SYS322525</DeveloperDocumentation>
	<Label>@SYS322492</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>CheckNumber</TitleField1>
	<TitleField2>MaturityDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesPerson</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerCollectionAgent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaturityDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankBranch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CheckNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaturityDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bank</Name>
			<Label>@SYS22173</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankBranch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDC</Name>
			<Label>@SYS322452</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaturityDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateReceived</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDCStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerCollectionAgent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesPerson</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonForStop</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopPayment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS112248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Replacement</Name>
			<Label>@SYS84714</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Comments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalCheck</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReplacementCheck</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankBranch</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS322476</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS322475</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CheckNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PostDatedCheckNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
			<Label>@SYS71295</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateReceived</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDCDateReceived</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReplacementCheck</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS322479</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>MaturityDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDCMaturityDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalCheck</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PostDatedCheckNum</ExtendedDataType>
			<Label>@SYS322482</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDCStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PostDatedCheckStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonForStop</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
			<Label>@SYS330792</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StopPayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS330790</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerCollectionAgent</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HcmCollectionAgentRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesPerson</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesTaker</ExtendedDataType>
			<Label>@SYS81391</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CheckNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CheckNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerCollectionAgentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerCollectionAgent</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerSalesPersonIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerSalesPerson</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendPDCRegister</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerCollectionAgent_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkerCollectionAgent_CustVendPDCRegister</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerCollectionAgent</Name>
					<Field>WorkerCollectionAgent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesPerson_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorkerRecId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkerSalesPerson_CustVendPDCRegister</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesPerson</Name>
					<Field>WorkerSalesPerson</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>