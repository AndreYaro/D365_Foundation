<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOM extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowPhantom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the phantom formula is allowed.
    /// </summary>
    /// <returns>
    /// true if the formula is allowed to be phantom; otherwise, false.
    /// </returns>
    public boolean allowPhantom()
    {
        boolean     ret = true;

        if (#PmfEnabled)
        {
            ret = !InventTable::pmfCheckFormulaItemForCoBy(this.ItemId);

            if (!ret)
            {
                error(strfmt("@PRO1961", this.ItemId));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomName</Name>
				<Source><![CDATA[
    public display BOMName bomName()
    {
        return BOMTable::find(this.bomId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomQty</Name>
				<Source><![CDATA[
    public BOMQty bomQty(Qty _seriesSize = 1)
    {
        return this.BOMMap::bomQty(_seriesSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomQtyFormula</Name>
				<Source><![CDATA[
    public BOMQty bomQtyFormula(
        Qty    _seriesSize,
        ItemId _parentItemId)
    {
        return this.BOMMap::bomQtyFormula(_seriesSize, _parentItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomTable</Name>
				<Source><![CDATA[
    public BOMTable bomTable(boolean _forUpdate = false)
    {
        return BOMTable::find(this.bomId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConfigId</Name>
				<Source><![CDATA[
    public EcoResItemConfigurationName calcConfigId(
        ItemId                      itemId,
        EcoResItemConfigurationName configId)
    {
        ConfigChoice    configChoice;

        if (!this.ConfigGroupId)
        {
            return this.inventDim().ConfigId;
        }

        return (select configChoice
            index hint ConfigChoiceIdx
            where configChoice.ItemId         == itemId                         &&
                  configChoice.ConfigId       == configId                       &&
                  configChoice.ChosenGroupId  == this.ConfigGroupId             &&
                  configChoice.ChosenItemId   == this.ItemId).ChosenConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMType</Name>
				<Source><![CDATA[
    public boolean checkBOMType()
    {
        #IsoCountryRegionCodes
        InventTable inventTable = this.inventTable();

        boolean isFormula       = BOMTable::find(this.bomId).PmfBOMFormula == PmfBOMFormula::Formula;

        if (this.type().mustBeProduced() && !InventTable.inventItemType().canHaveBOM())
        {
            if (isFormula)
            {
                return checkFailed(strfmt("@PRO2888", this.ItemId));
            }
            else
            {
                return checkFailed(strfmt("@SYS7861",this.ItemId));
            }
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) && InventTable::find(this.ItemId).AssetGroupId_RU)
        {
            return checkFailed(strfmt("@SYS7861", this.ItemId));
        }
        // </GEERU>

        if (!inventTable.isStocked())
        {
            if (isFormula)
            {
                return checkFailed("@PDS1438");
            }
            else
            {
                return checkFailed("@SYS183556");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the combination of entered values in <c>this.ConfigGroupId</c> and <c>this.inventDim().ConfigId</c> is valid.
    /// </summary>
    /// <returns>true, if the data setup is valid; otherwise, false.</returns>
    public boolean checkConfigId()
    {
        if (this.ConfigGroupId)
        {
            if (this.inventDim().ConfigId)
            {
                return checkFailed("@SYS24767");
            }

            return true;
        }

        return InventTable::checkConfig(this.ItemId, this.inventDim().ConfigId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotCircularity</Name>
				<Source><![CDATA[
    public boolean checkNotCircularity()
    {
        BOMHierarchyCheck       bomCheck;
        InventTable             inventTableChild;

        inventTableChild = InventTable::find(this.ItemId);

        if (inventTableChild.isFormulaOrBOMAllowed())
        {
            bomCheck  = BOMHierarchyCheck::newBOMcheckNotCircularity();

            if (! bomCheck.checkCircularity(this.bomId,this.ItemId,this.inventDim().ConfigId,this.FromDate,this.ToDate, this.ItemBOMId))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductDim</Name>
				<Source><![CDATA[
    public boolean checkProductDim()
    {
        InventTable inventTable = this.inventTable();
        InventDim   inventDim   = this.inventDim();

        boolean     ok          = true;

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();
            if (productDim is InventProductDimensionConfig)
            {
                ok = ok && this.checkConfigId();
            }
            else
            {
                ok = ok && productDim.checkValueForItem(inventTable, inventDim.(productDim.parmInventDimFieldId()));
            }            
        }

        ok = ok && this.inventDim().validateWriteInventDimCombination(this.ItemId);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnaproveFormulasByChangeToCompType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Unnaproves the formula, if it is approved, and the ingredient type was changed to compensating.
    /// </summary>
    private void checkUnaproveFormulasByChangeToCompType()
    {
        BOM         originalRecord = this.orig();
        BOMTable    formula;

        if (    #PDSPotencyEnabled
            &&  (originalRecord.PDSIngredientType != this.PDSIngredientType)
            &&  (this.PDSIngredientType == PDSIngredientTypeEnum::Compensating))
        {
            formula = this.bomTable(true);
            if (    (formula.Approved == NoYes::Yes)
                &&  (formula.pmfUnapprove()))
            {
                BOMVersion::pmfUnapproveByBOMId(formula.BOMId);
                info ("@PRO1003");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configGroup</Name>
				<Source><![CDATA[
    public ConfigGroup configGroup()
    {
        return ConfigGroup::find(this.ConfigGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configGroupName</Name>
				<Source><![CDATA[
    public display ConfigGroupName configGroupName()
    {
        return this.configGroup().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configId</Name>
				<Source><![CDATA[
    public display EcoResItemConfigurationName configId()
    {
        return this.inventDim().ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configName</Name>
				<Source><![CDATA[
    public display EcoResItemConfigurationName configName()
    {
        return this.inventDim().ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (!this.canEdit())
            {
                if (#pmfEnabled)
                {
                    throw error("@PRO2418");
                }
                else
                {
                    throw error("@SYS95147");
                }
            }

            if (#pmfEnabled)
            {
                this.pmfCheckRemainRecords();
            }

            super();

            if (this.canUpdateCheckFlag(AxdRecordAction::Delete))
            {
                this.updateCheckFlag();
            }

            this.pdsDeleteRelatedRecord();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromFormulaVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current bill of materials record from an <c>BOMVersion</c> record and updates it.
    /// </summary>
    /// <param name="_bomVersion">
    ///    An <c>BOMVersion</c> record.
    /// </param>
    internal void setFromFormulaVersion(BOMVersion _bomVersion)
    {
        if (_bomVersion.bomTable().PmfBOMFormula == PmfBOMFormula::Formula &&
            this.BOMQtySerie != _bomVersion.PmfBatchSize)
        {
            this.BOMQtySerie = max(1, _bomVersion.PmfBatchSize);

            if (this.RecId)
            {
                this.selectForUpdate(true);

                ttsbegin;
                this.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOM</Name>
				<Source><![CDATA[
    public void initFromBOM(BOMMap _bom)
    {
        // This will also copy the inventDimId
        this.BOMMap::initFromBOMMap(_bom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current bills of materials record from an <c>inventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    ///    An <c>inventTable</c> record.
    /// </param>
    public void initFromInventTable(InventTable _inventTable)
    {
        this.LineCreationSequenceNumber = 0;
        this.ItemId             = _inventTable.ItemId;
        this.MaterialOverpickPercentage = this.whsInventTable().MaterialOverpickPercentage;

        this.defaultProductDimensions();
        this.defaultItemDimensions();

        if (BomInitDefaultValueForInventTableFlight::instance().isEnabled())
        {
            this.initDefaultScrapConst();
            this.initDefaultScrapVar();
            this.initDefaultBOMType();
        }
        else
        {
            this.defaultScrapConst();
            this.defaultScrapVar();
            this.defaultBOMType();
        }
        this.defaultUnitId();
        this.defaultBomWhsReleasePolicy();

        this.ProjSetSubProdToConsumed   = NoYes::No;

        this.defaultHeight();
        this.defaultWidth();
        this.defaultDepth();
        this.defaultDensity();

        this.defaultPercentageEnable();
        this.defaultFormulaPercentage();
        this.defaultFormulaScalable();
        this.defaultPdsCWQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.bomQtySerie = 1;
        this.Calculation = NoYes::Yes;

        if (#pmfEnabled)
        {
            this.BOMType    = BOMType::Item;
            this.Formula    = BOMFormula::Formula0;
            this.BOMConsump = BOMConsumpType::Variable;
            this.RoundUp    = BOMRoundUp::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineCreationSequenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the next available line creation sequence number for the bom Id of the given bom.
    /// </summary>
    /// <param name="_bom">
    ///    An instance of a temporary or a non-temporary <c>BOM</c> table buffer.
    /// </param>
    /// <returns>
    /// The next available line creation sequence number.
    /// </returns>
    public static BOMLineCreationSequenceNumber nextLineCreationSequenceNumber(BOM _bom)
    {
        BOM bom;

        BOMLineCreationSequenceNumber currentLineCreationSequenceNumber = 0;

        select maxof(LineCreationSequenceNumber) from bom
            where bom.BOMId == _bom.BOMId;
        if (bom)
        {
            currentLineCreationSequenceNumber = bom.LineCreationSequenceNumber;
        }

        return (currentLineCreationSequenceNumber + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.LineCreationSequenceNumber = (this.LineCreationSequenceNumber != 0) ? this.LineCreationSequenceNumber : BOM::nextLineCreationSequenceNumber(this);

        #OCCRetryCount
        try
        {
            ttsbegin;

            if (!this.canEdit())
            {
                if (#pmfEnabled)
                {
                    throw error("@PRO2418");
                }
                else
                {
                    throw error("@SYS95147");
                }
            }

            // check if BOM level recalculation is needed
            BOMLevelCalc::checkLevelRecalcBOM(this);

            super();

            if (this.canUpdateCheckFlag(AxdRecordAction::Create))
            {
                this.updateCheckFlag();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInventTable</Name>
				<Source><![CDATA[
    public WHSInventTable whsInventTable(boolean _forUpdate = false)
    {
        return WHSInventTable::find(this.ItemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproved</Name>
				<Source><![CDATA[
    public boolean isApproved()
    {
        return BOMTable::find(this.bomId).isApproved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be edited.
    /// </summary>
    /// <returns>
    /// true if edit is allowed; otherwise, false.
    /// </returns>
    public boolean canEdit()
    {
        return !(this.isApproved() && BOMParameters::find().BlockEditing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParentItemPhantom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether parent item is a phantom BOM or formula.
    /// </summary>
    /// <returns>
    /// true if the parent record is a phantom BOM or formula; otherwise, false.
    /// </returns>
    public boolean isParentItemPhantom()
    {
        BOM         bom;
        BOMVersion  bomVersion;
        boolean     ret = true;

        select firstonly ItemId
            from bomVersion
            where bomVersion.bomId == this.bomId;

        select firstonly RecId
            from bom
            where  bom.ItemId  == bomVersion.ItemId
                && bom.bomType == BOMType::Phantom;

        if (bom.RecId)
        {
            ret = checkFailed("@PRO1963");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBOMIdFromRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the BOMId based on the parameters and item route id inventory dimension.
    /// </summary>
    /// <param name = "_searchDate">The search date.</param>
    /// <param name = "_searchQty">The search quantity.</param>
    /// <param name = "_itemIdParent">The parent item id.</param>
    /// <param name = "_inventDimParent">The parent inventory dimension.</param>
    /// <returns>The item BOMId.</returns>
    public BOMId itemBOMIdFromRouteId(
        TransDate   _searchDate,
        FromQty     _searchQty,
        ItemId      _itemIdParent,
        InventDim   _inventDimParent)
    {
        RouteId     routeId         = this.ItemRouteId ? this.ItemRouteId : InventTable::find(_itemIdParent).routeId(_searchDate, _searchQty, _inventDimParent);
        InventDim   inventDimFinal  = this.BOMMap::inventDimFinal(_itemIdParent, _inventDimParent, routeId);

        return this.BOMMap::itemBOMId(_searchDate, _searchQty, inventDimFinal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBOMIdConstruction</Name>
				<Source><![CDATA[
    public BOMId itemBOMIdConstruction(
        BOMRouteVersionSelect   _bomRouteVersionSelect,
        TransDate               _searchDate,
        FromQty                 _searchQty,
        InventDim               _searchInventDim)
    {
        if (this.ItemBOMId)
        {
            return this.ItemBOMId;
        }

        return this.inventTable().bomIdConstruction(_bomRouteVersionSelect,_searchDate, _searchQty, _searchInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNameGrid</Name>
				<Source><![CDATA[
    public display ItemNameDisplayGrid itemNameGrid()
    {
        return this.itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemRouteIdConstruction</Name>
				<Source><![CDATA[
    public RouteId itemRouteIdConstruction(
        BOMRouteVersionSelect   _bomRouteVersionSelect,
        TransDate               _searchDate,
        FromQty                 _searchQty,
        InventDim               _searchInventDim
        )
    {
        if (this.ItemRouteId)
        {
            return this.ItemRouteId;
        }

        return this.inventTable().routeIdConstruction(_bomRouteVersionSelect,_searchDate,_searchQty,_searchInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    public display ItemType itemType()
    {
        return this.inventTable().ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinChildTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a joined table record if the current record is joined to the specified table.
    /// </summary>
    /// <param name="_tableId">
    ///    A string that holds the table ID.
    /// </param>
    /// <returns>
    ///    A record of any type; otherwise, null.
    /// </returns>
    public Common joinChildTable(tableId _tableId)
    {
        Common      joinBuffer;
        Common      emptyBuffer;

        joinBuffer = this.joinChild();

        while (joinBuffer.TableId != emptyBuffer.TableId)
        {
            if (joinBuffer.TableId == _tableId)
            {
                return joinBuffer;
            }
            joinBuffer = joinBuffer.joinChild();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(BOM, bomType):
                if (#PmfEnabled
                    && this.bomType == BOMType::Phantom
                    && BOMTable::find(this.bomId).PmfBOMFormula
                        == PmfBOMFormula::Formula)
                {
                    if (!this.allowPhantom())
                    {
                        this.bomType = this.orig().bomType;
                    }
                }
                break;

            case fieldnum(BOM, PDSIngredientType):
                if (this.orig().PDSIngredientType == PDSIngredientTypeEnum::Active
                    && this.PDSIngredientType != PDSIngredientTypeEnum::Active
                    && this.pdsHasActiveRefCompensationPrinciples(true))
                {
                    if (Box::yesNo(strFmt("@PSC766", enum2str(this.PDSIngredientType)), DialogButton::No, "@PDS1151") == DialogButton::No)
                    {
                        this.PDSIngredientType = PDSIngredientTypeEnum::Active;
                    }
                }
                break;

            case fieldnum(BOM, ItemId):
                if (#PDSLotGenealogyEnabled
                    && this.RecId
                    && BOMTable::find(this.bomId).PmfBOMFormula == PmfBOMFormula::Formula)                   
                {
                    PDSBatchAttribTransfer transfers;

                    // delete obsolete transfers if the ingredient item ID has changed.
                    delete_from transfers
                        where transfers.BOMRefRecId == this.RecId
                           && transfers.RawItemId   != this.ItemId;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsActiveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active ingredient quantity for the BOM line.
    /// </summary>
    /// <returns>
    /// The active ingredient quantity for the current BOM line.
    /// </returns>
    public display PDSActiveQty pdsActiveQty()
    {
        BOMQty      activeQty = 0;
        var pdsBaseValue = str2num(this.PDSBaseValue);

        if (this.PDSIngredientType == PDSIngredientTypeEnum::Active && pdsBaseValue > 0)
        {
            activeQty = this.BOMQty * pdsBaseValue / 100;
        }

        return activeQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the BOM line has valid approved vendor list entry if it is controlled by approved
    /// vendor list functionality.
    /// </summary>
    /// <returns>
    /// true if the vendor is a valid approved vendor; Otherwise false
    /// </returns>
    private boolean pdsCheckApprovedVendorList()
    {
        PdsApprovedVendorListCheck avlCheck;
        boolean ret = true;

        avlCheck = PdsApprovedVendorListCheck::newFromTable(this);
        ret = avlCheck.validateCheck();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckForActiveIngredient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if there is an active ingredient record.
    /// </summary>
    /// <returns>
    /// true if a record of ingredient type active is found; otherwise, false.
    /// </returns>
    private boolean pdsCheckForActiveIngredient()
    {
        BOM     lclBom;

        select RecId
            from lclBom
            where  lclBom.BOMId             == this.BOMId
                && lclBom.PDSIngredientType == PDSIngredientTypeEnum::Active
                && lclBom.RecId             != this.RecId;

        return lclBom.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDeletePrinciple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related compensating principles if this BOM line has changed such that the principle no longer applies.
    /// </summary>
    private void pdsDeletePrinciple()
    {
        PDSCompensationPrinciple    comPrinciple;
        BOM                         bom_Orig    = this.orig();
        boolean                     typeChanged = bom_Orig.PDSIngredientType != this.PDSIngredientType;

        if (#PDSPotencyEnabled)
        {
            ttsbegin;

            if (typeChanged && bom_Orig.PDSIngredientType == PDSIngredientTypeEnum::Compensating)
            {
                delete_from comPrinciple
                    where comPrinciple.BOMRefRecId == this.RecId;
            }

            if (typeChanged && bom_Orig.PDSIngredientType == PDSIngredientTypeEnum::Active)
            {
                delete_from comPrinciple
                    where comPrinciple.BOMId            == this.BOMId
                        && comPrinciple.ActiveRefRecId  == this.RecId;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDeleteRelatedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related process data when deleting the BOM line.
    /// </summary>
    private void pdsDeleteRelatedRecord()
    {
        if (#PDSLotGenealogyEnabled)
        {
            PDSBatchAttribTransfer transfers;

            delete_from transfers
                where transfers.BOMRefRecId == this.RecId;
        }

        if (!isConfigurationkeyEnabled(configurationkeynum(PDSPotency)))
        {
            return;
        }

        ttsBegin;
        PDSCompensationPrinciple compensation;

        delete_from compensation
            where compensation.BOMRefRecId == this.RecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsHasActiveRefCompensationPrinciples</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the BOM line has at least one compensation principle referencing it as an active ingredient.
    /// </summary>
    /// <param name="_forceCheck">
    /// Determines if the relations should be checked even if this BOM is not marked as an active ingredient; optional.
    /// </param>
    /// <returns>
    /// true if this BOM line has at least one referencing compensation principle; otherwise, false.
    /// </returns>
    public boolean pdsHasActiveRefCompensationPrinciples(boolean _forceCheck = false)
    {
        boolean     ret = false;

        if (#PDSPotencyEnabled && (this.PDSIngredientType == PDSIngredientTypeEnum::Active || _forceCheck))
        {
            ret = (select PDSCompensationPrinciple
                where PDSCompensationPrinciple.ActiveItemId    == this.ItemId
                    && PDSCompensationPrinciple.ActiveRefRecId == this.RecId).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRequestSyncBatchAttribXfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if there was a change with the Inherit co-product batch attributes or Inherit end item batch attributes settings. If so, the batch attribute transfer
    ///     records are synchronized.
    /// </summary>
    public void pdsRequestSyncBatchAttribXfer()
    {
        BOM originalRecord = this.orig();

        if (this.PDSInheritCoProductBatchAttrib     != originalRecord.PDSInheritCoProductBatchAttrib
            || this.PDSInheritEndItemBatchAttrib    != originalRecord.PDSInheritEndItemBatchAttrib)
        {
            this.pdsSyncBatchAttribTransfer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSyncBatchAttribTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the batch attribute transfer references if the formula item is no longer allowing lot inheritance.
    /// </summary>
    public void pdsSyncBatchAttribTransfer()
    {
        PDSBatchAttribTransfer transfer;
        InventTable            endItem;

        if (!isConfigurationkeyEnabled(configurationkeynum(PDSLotGenealogy)))
        {
            return;
        }

        ttsbegin;
        if (!this.pdsInheritEndItemBatchAttrib)
        {
            delete_from transfer
                where transfer.BOMRefRecId  == this.RecId
            exists join endItem
                where endItem.itemId                == transfer.EndItemId
                &&    endItem.PMFProductType        == PmfProductType::Formula;
        }

        if (!this.pdsInheritCoProductBatchAttrib)
        {
            delete_from transfer
                where transfer.BOMRefRecId  == this.RecId
            exists join endItem
                where endItem.itemId                == transfer.EndItemId
                &&    endItem.PMFProductType        == PmfProductType::Co_Product;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCopyPrinciple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes copy of compensation principle from a BOM.
    /// </summary>
    /// <param name = "_fromBom">Source BOM with compensation principle</param>
    /// <param name = "_toActiveIngredientBomRecId">Destination BOM which is the active ingredient in compensation principle.</param>
    /// <returns>Newly created compensation principle.</returns>
    public PDSCompensationPrinciple pdsCopyPrinciple(BOM _fromBom, PDSActiveRefRecId _toActiveIngredientBomRecId)
    {
        if (!_fromBom || !_toActiveIngredientBomRecId)
        {
            throw error('@SYS19306', funcname());
        }

        PDSCompensationPrinciple fromCompensation    = PDSCompensationPrinciple::find(_fromBom.RecId);
        PDSCompensationPrinciple toCompensation;

        if (fromCompensation)
        {
            toCompensation.ActiveRefRecId = _toActiveIngredientBomRecId;
            toCompensation.BOMId           = this.BOMId;
            toCompensation.BOMRefRecId     = this.RecId;
            toCompensation.initFromPDSCompensationPrinciple(fromCompensation);

            toCompensation.insert();
        }

        return toCompensation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBOMPctQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BOM quantity times Formula percentage.
    /// </summary>
    /// <param name="_bomVersion">
    /// The current BOM version record.
    /// </param>
    /// <returns>
    /// The BOM quantity times formula percentage.
    /// </returns>
    public BOMQty pmfBOMPctQty(BOMVersion _bomVersion = this.pmfBOMVersion())
    {
        BOMQty       qty;
        UnitOfMeasureSymbol  unitId;

        qty = (this.bomQtySerie * this.PmfFormulaPct)/100;

        unitId = _bomVersion.pmfFormulaUnit();

        if (this.UnitId != unitId)
        {
            qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                        this.InventDimId,
                                                                                        qty,
                                                                                        unitId,
                                                                                        this.UnitId,
                                                                                        NoYes::Yes);
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBOMTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BOMTable</c> record to which the current record belongs.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The parent <c>BomTable</c> record.
    /// </returns>
    public BOMTable pmfBOMTable(boolean _forUpdate = true)
    {
        return this.BOMMap::pmfBOMTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BOMVersion</c> record to which the current record belongs.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The parent <c>BomVersion</c> record.
    /// </returns>
    public BOMVersion pmfBOMVersion(boolean _forUpdate = false)
    {
        BOMVersion  bomVersion;

        bomVersion = BOMVersion::findActive(
            this.ItemId,
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
            1,
            null,
            _forUpdate);

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckRemainRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for other remaining <c>BOM</c> records.
    /// </summary>
    void pmfCheckRemainRecords()
    {
        BOM       bom;
        BOMTable  bomTable;

        select recId from bom
            where   bom.BOMId == this.BOMId
            &&      bom.RecId != this.RecId;

        bomTable = this.bomTable(true);

        if (    !bom.RecId
            &&  bomTable
            && (bomTable.PmfBOMFormula == PmfBOMFormula::Formula) )
        {
            info("@PDS1495");

            BOMVersion::pmfUnapproveByBOMId(this.BOMId);
            bomTable.pmfUnapprove();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckUnitConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for a valid unit of measure conversion setup between the <c>BOM</c> record and the
    /// <c>BOMVersion</c> record.
    /// </summary>
    /// <returns>
    /// true if a valid unit of measure is found; otherwise, false.
    /// </returns>
    public boolean pmfCheckUnitConversion()
    {
        boolean                 ok = true;
        BOMVersion              bomVersion;

        boolean conversionExists(bomVersion _bomVersion)
        {
            UnitOfMeasureSymbol itemUnitId = _bomVersion.inventTable().inventUnitId();

            if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                              this.InventDimId,
                                                                                              itemUnitId,
                                                                                              this.UnitId))
            {
                return checkFailed(strfmt("@SYS50546", itemUnitId, this.UnitId));
            }
            else
            {
                return true;
            }
        }

        if (this.PmfPctEnable)
        {
            bomVersion = BOMVersion::findVersionCalculation(this.BOMId);
            if (bomVersion)
            {
                ok = conversionExists(bomVersion);
            }
            else
            {
                while select bomVersion
                    where bomVersion.BOMId == this.BOMId
                {
                    ok = conversionExists(bomVersion);
                    if (! ok)
                    {
                        break;
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfsetBomQtySeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the correct bom quantity series value to use.
    /// </summary>
    /// <param name="_bomVersion">
    /// The current <c>BOMVersion</c> record.
    /// </param>
    /// <returns>
    /// The correct bom quantity series value.
    /// </returns>
    public BOMQtySerie pmfsetBomQtySeries(BOMVersion  _bomVersion)
    {
        bomVersion  bomVersionCalc = bomVersion::findVersionCalculation(this.BOMId);
        BOMQtySerie bomQtySerie = 1;

        if (bomVersionCalc.PmfBatchSize != 0)
        {
            bomQtySerie = bomVersionCalc.PmfBatchSize;
        }
        else
        {
            if (_bomVersion.PmfBatchSize != 0)
            {
                bomQtySerie = _bomVersion.PmfBatchSize;
            }
        }

        return bomQtySerie;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfStepQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BomQty</c> value from the <c>PmfBomStep</c> record.
    /// </summary>
    /// <param name="_findQty">
    /// The quantity that will used to determine the correct record to retrieve.
    /// </param>
    /// <returns>
    /// The <c>BomQty</c> value of the selected record.
    /// </returns>
    public BomQty pmfStepQty (FromQty _findQty = 1)
    {
        PmfBomStep bomStep;

        select firstonly BOMQty from bomStep
               order by fromQty desc
               where bomStep.BOMRefRecId == this.RecId
               &&    bomStep.FromQty <= _findQty;

        return bomStep.BOMQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfSteps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PmfBomStep</c> records with the referenced record ID.
    /// </summary>
    /// <returns>
    /// The <c>PmfBomStep</c> dataset with the referenced record ID.
    /// </returns>
    public PmfBOMStepMap pmfSteps()
    {
        PmfBOMStep bomStep;

        select bomStep
            where bomStep.BOMRefRecId == this.RecId;

        return bomStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>route</Name>
				<Source><![CDATA[
    Route route(ItemRouteId _itemRouteId)
    {
        Route route;

        if (! this.OprNum)
            return route;

        select firstonly route
            index hint NumOprNumIdx
            where route.RouteId     == _itemRouteId                 &&
                  route.OprNum      == this.OprNum                  &&
                  route.OprPriority == RouteOprPriority::Primary;

        return route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scrapConst</Name>
				<Source><![CDATA[
    public ScrapConst scrapConst()
    {
        return this.BOMMap::scrapConst();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scrapVar</Name>
				<Source><![CDATA[
    public ScrapVar scrapVar()
    {
        return this.BOMMap::scrapVar();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>configId</c> field in the related <c>inventDim</c> record.
    /// </summary>
    /// <param name="_parentItemNum">
    ///    The identifier of the parent item element.
    /// </param>
    /// <param name="_parentConfigId">
    ///    The identifier of the parent configuration element.
    /// </param>
    public void setConfigId(
        ItemId                      _parentItemNum,
        EcoResItemConfigurationName _parentConfigId
        )
    {
        InventDim   inventDim;

        inventDim           = this.inventDim();
        inventDim.ConfigId  = this.calcConfigId(_parentItemNum,_parentConfigId);

        if (inventDim.ConfigId)
        {
            this.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNumAfter</Name>
				<Source><![CDATA[
    public boolean setLineNumAfter(BOM boMbefore = null)
    {
        BOM      bomAfter;
        boolean  linesBefore;

        if (this.bomId && this.bomId != boMbefore.bomId)
        {
            throw error(strfmt("@SYS63093",funcname()));
        }

        if (!boMbefore)
        {
            this.LineNum = BOM::nextLineNum(this.bomId);
        }

        while select bomAfter
            index NumIdx
            where bomAfter.bomId   == boMbefore.bomId  &&
                  bomAfter.LineNum >  boMbefore.LineNum
        {
            if (bomAfter.RecId == this.RecId)
            {
                continue;
            }

            linesBefore = true;
            this.LineNum = decround(((bomAfter.LineNum - boMbefore.LineNum)/2) + boMbefore.LineNum,8);
            break;
        }
        if (!linesBefore)
        {
            this.LineNum = boMbefore.LineNum + 1;
            return true;
        }
        else if (this.LineNum == boMbefore.LineNum || this.LineNum == bomAfter.LineNum)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNumBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the LineNum field based on a given "next" record.
    /// </summary>
    /// <param name = "_bomAfter">The line to place the number before.</param>
    /// <returns>true if a new line number could be determined; otherwise, false.</returns>
    public boolean setLineNumBefore(BOM _bomAfter)
    {
        BOM      bomBefore;

        select firstonly bomBefore
            order by LineNum desc
            where bomBefore.bomId == _bomAfter.bomId  &&
            bomBefore.LineNum < _bomAfter.LineNum;

        this.LineNum = decround(((_bomAfter.LineNum - boMbefore.LineNum)/2) + boMbefore.LineNum,8);

        if (this.LineNum == boMbefore.LineNum || this.LineNum == _bomAfter.LineNum)
        {
            // Happens in case rounding is not sufficient to create new linies in between
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    public BOMTypeBase type()
    {
        return BOMTypeBase::construct(this.bomType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (!this.canEdit())
            {
                if (#pmfEnabled)
                {
                    throw error("@PRO2418");
                }
                else
                {
                    throw error("@SYS95147");
                }
            }

            this.pdsDeletePrinciple();

            // check if BOM level recalculation is needed
            BOMLevelCalc::checkLevelRecalcBOM(this);

            // check if the change is to a compensating ingredient type
            this.checkUnaproveFormulasByChangeToCompType();

            this.pdsRequestSyncBatchAttribXfer();

            BOM orig = this.orig();
            super();

            if (this.canUpdateCheckFlag(AxdRecordAction::Update, orig))
            {
                this.updateCheckFlag();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateCheckFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// An extension point for marking BOM as changed that requires circularity check.
    /// </summary>
    /// <param name = "_action">DML type {Insert, Update, Delete}.</param>
    /// <param name = "_orig">The original version of the row. Optional.</param>
    /// <returns>A boolean state whether to update BOM check or not.</returns>
    protected boolean canUpdateCheckFlag(AxdRecordAction _action, BOM _orig = null) 
    { 
        return true; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCheckFlag</Name>
				<Source><![CDATA[
    public void updateCheckFlag()
    {
        if (!this.isTmp())
        {
            BOMTable::setCheckBOM(this.bomId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (FormDataUtil::getFormDataSource(this) && this.isApproved() && BOMParameters::find().BlockEditing)
        {
            if (#pmfEnabled)
            {
                ret = checkFailed("@PRO2418");
            }
            else
            {
                ret = checkFailed("@SYS95147");
            }
        }

        if (#PDSLotGenealogyEnabled && ret && PDSBatchAttribTransfer::existActiveFromBOM(this.RecId))
        {
            ret = checkFailed("@PSC213");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _id)
    {
        boolean ret;

        ret = super(_id);

        switch (fieldExt2Id(_id))
        {
            case fieldnum(BOM,ItemId):
                if (#PmfEnabled
                    && InventTable::isPlanningItem(this.ItemId))
                {
                    ret = checkFailed("@PRO2035");
                }

                if (#PdsApprovedVendorListEnabled && #PmfEnabled)
                {
                    ret = ret && this.pdsCheckApprovedVendorList();
                }
                break;

            case fieldnum(BOM,PmfPctEnable):
                if (!this.validatePercentControlledEnabled())
                {
                    ret = ret && checkFailed("@PDS124");
                }
                break;

            case fieldnum(BOM, VendId) :
                if (#PdsApprovedVendorListEnabled && #PmfEnabled)
                {
                    ret = ret && this.pdsCheckApprovedVendorList();
                }
                break;

            case fieldnum(BOM, PDSIngredientType):
                if (this.inventTable().PDSBaseAttributeId
                    && this.PDSIngredientType != PDSIngredientTypeEnum::None
                    && this.PDSIngredientType != PDSIngredientTypeEnum::Active)
                {
                    ret = ret && checkFailed("@PSC87");
                }

                if (this.PDSIngredientType == PDSIngredientTypeEnum::Compensating
                    || this.PDSIngredientType == PDSIngredientTypeEnum::Filler)
                {
                    if (!this.pdsCheckForActiveIngredient())
                    {
                        ret = ret && checkFailed(strFmt("@PSC637", this.PDSIngredientType));
                    }
                }
                break;

            case fieldnum(BOM, BOMType):
                if (ret && PdsGlobal::pdsIsCWItem(this.ItemId) && this.BOMType == BOMType::Phantom)
                {
                    setPrefix(strFmt("@SYS71901", this.BOMType));
                    ret = checkFailed(strFmt("@PRO1994", this.ItemId));
                }
                break;

            case fieldNum(BOM, UnitId):
                ret = ret && this.checkUnit();
                break;
            case fieldNum(BOM, ItemBOMId):
                if (ret && this.ItemBOMId)
                {
                    InventSiteId subBomSiteId = BOMTable::find(this.ItemBOMId).SiteId;
                    if (subBomSiteId)
                    {
                        InventSiteId bomTableSiteId = this.bomTable().SiteId;
                        if ((bomTableSiteId && bomTableSiteId != subBomSiteId)   // Sites have to match, unless subBOM is siteless
                            || !bomTableSiteId)                                 // Siteless BOMs cannot have site specific subBOMs
                        {
                            ret = checkFailed("@SYS109553");
                        }
                    }
                }

                break;

            case fieldNum(BOM, ProdFlushingPrincip):
                if (this.ProdFlushingPrincip == ProdFlushingPrincipBOM::Picked
                &&  !InventTable::find(this.ItemId).whsItemIsWHSControlled())
                {
                    ret = checkFailed("@WAX:PickFlushPrincipValidation");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>ItemRouteId</c> field of the current record.
    /// </summary>
    /// <param name = "_inventDimBOM">The inventory dimension of the record.</param>
    /// <returns></returns>
    public boolean validateItemRouteId(InventDim _inventDimBOM)
    {
        RouteVersion    routeVersion;
        boolean         ret = true;
        InventDim       inventDim;

        if (this.ItemRouteId && _inventDimBOM.InventSiteId)
        {
            select firstonly RecId from routeVersion
                where routeVersion.RouteId  == this.ItemRouteId
                    && routeVersion.ItemId   == this.ItemId
                exists join inventDim
                    where inventDim.InventDimId     == routeVersion.InventDimId
                        && inventDim.InventSiteId   == _inventDimBOM.InventSiteId;

            if (! routeVersion.RecId)
            {
                ret = checkFailed("@SYS109552");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite(boolean checkCircularity = true)
    {
        #PMFProcessMFG

        if (! super())
        {
            return false;
        }

        if (FormDataUtil::getFormDataSource(this) && this.isApproved() && BOMParameters::find().BlockEditing)
        {
            if (#pmfEnabled)
            {
                return checkFailed("@PRO2418");
            }
            else
            {
                return checkFailed("@SYS95147");
            }
        }

        if (!this.bomQty() && BOMParameters::find().MandatoryQtyAndDate)
        {
            return checkFailed("@SYS95148");
        }

        if ((this.FromDate || this.ToDate) && BOMParameters::find().MandatoryQtyAndDate)
        {
            return checkFailed("@SYS95149");
        }

        if (! this.checkBOMType())
        {
            return false;
        }

        if (! this.checkProductDim())
        {
            return false;
        }

        InventTable inventTable = this.inventTable();

        if (!this.RecId
            && EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(inventTable.ItemId, this.inventDim())
            && !EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(inventTable.ItemId, 
                                                                                             this.InventDimId, 
                                                                                             this.UnitId, 
                                                                                             inventTable.inventUnitId()))
        {
            return checkFailed(strFmt("@SCM:ProductVariantConversionMissing", 
                                      this.UnitId, 
                                      inventTable.inventUnitId(), 
                                      EcoResProductMaster::find(inventTable.Product).productNumber()));
        }

        if (checkCircularity && BOMParameters::find().mustCheckPerLine() && ! this.checkNotCircularity())
        {
            return false;
        }
        if (#PmfEnabled)
        {
            if (!this.validatePercentControlledEnabled())
            {
                return checkFailed("@PDS124");
            }

            if (this.PmfScalable
                && PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                return checkFailed("@PDS125");
            }

            if (this.PmfPlanGroupId)
            {
                if (this.pmfExistsLineWithSamePlanGroupAndItem())
                {
                    return checkFailed(strFmt("@PRO:ExistsSameItemForPmfPlanGroup", this.ItemId, this.inventDim().preFix(), this.PmfPlanGroupId));
                }

                if (this.PmfPlanGroupPriority <=#PMF_PlanZero)
                {
                    return checkFailed("@PRO1071");
                }
            }

            if (!this.inventTable().pmfInventProductType().validateInventUpd())
            {
                return false;
            }

            if (!this.pmfCheckUnitConversion())
            {
                return false;
            }
        }

        if (this.ToDate  && (this.ToDate < this.FromDate))
        {
            return checkFailed("@SYS22806");
        }

        if (this.bomTable().SiteId != this.inventDim().InventSiteId)
        {
            return checkFailed("@SYS117930");
        }

        if (this.mustValidateShelfLife()
            && #PDSLotGenealogyEnabled
            && (this.PDSInheritCoProductShelfLife || this.PDSInheritEndItemShelfLife)
            && !this.inventTable().PdsShelfLife && !this.inventTable().PdsBestBefore)
        {
            warning(strfmt("@PSC189", this.ItemId));
        }

        if (#PDSPotencyEnabled
            && this.PDSIngredientType == PDSIngredientTypeEnum::Active
            && !this.inventTable().PDSBaseAttributeId)
        {
            warning("@PSC280");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfExistsLineWithSamePlanGroupAndItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for existence of a line with same item, dimensions and plan group.
    /// </summary>
    /// <returns>
    /// true if the line exists; otherwise, false.
    /// </returns>
    private boolean pmfExistsLineWithSamePlanGroupAndItem()
    {
        BOM bom;

        select firstonly RecId
            from bom
            where  bom.BOMId          == this.BOMId
                && bom.PmfPlanGroupId == this.PmfPlanGroupId
                && bom.ItemId         == this.ItemId
                && bom.InventDimId    == this.InventDimId
                && bom.RecId          != this.RecId;

        return bom.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePercentControlledEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether catch weight item is percent controlled.
    /// </summary>
    /// <returns>true if catch weight item is percent controlled; otherwise, false.</returns>
    protected boolean validatePercentControlledEnabled()
    {
        return !(this.PmfPctEnable
            && PdsGlobal::pdsIsCWItem(this.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateShelfLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the shelf life must be validated.
    /// </summary>
    /// <returns>true if the shelf life must be validated; otherwise, false.</returns>
    protected boolean mustValidateShelfLife()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendId</Name>
				<Source><![CDATA[
    public VendAccount vendId(
        ItemId                      _parentItemId,
        EcoResItemConfigurationName _parentConfigId,
        ItemRouteId                 _itemRouteId,
        InventSiteId                _siteId
        )
    {
        Route       route = this.route(_itemRouteId);
        RouteOpr    routeOpr;

        if (route)
            routeOpr = route.routeOpr(_parentItemId,_parentConfigId,_siteId, null);

        return this.BOMMap::calcVendId(routeOpr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistConfigValue</Name>
				<Source><![CDATA[
    public static boolean checkExistConfigValue(
        BOMId               _bomNum,
        ConfigGroupId       _configGroupId,
        ItemId              _itemId
        )
    {
        if (_bomNum && _configGroupId && _itemId &&
            !BOM::existConfigValue(_bomNum,_configGroupId,_itemId))
        {
            return checkFailed(strfmt("@SYS24849",_configGroupId,_itemId,_bomNum));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBomChangeItem</Name>
				<Source><![CDATA[
    public static container createBomChangeItem(
        container       _packedQueryRun,
        ItemId          _toItemId,
        TransDate       _fromDate,
        TransDate       _toDate,
        OverwriteAppend _updateMethod
        )
    {
        BOM                 queryBOM;
        BOM                 tmpBOM;
        QueryRun            queryRun;
        InventDim           inventDim;
        Map                 mapTmpBom;
        Map                 mapBOMRecId;
        Map                 mapInventDim;
        Map                 mapBOMNum;
        recId               origRecId;

        tmpBOM.setTmp();

        queryRun = new QueryRun(_packedQueryRun);

        queryRun.recordLevelSecurity(true);

        if (!mapTmpBom)
        {
            mapTmpBom = new Map(typeName2Type(extendedtypestr(recId)), Types::Record);
        }

        if (!mapBOMRecId)
        {
            mapBOMRecId = new Map(typeName2Type(extendedtypestr(recId)), typeName2Type(extendedtypestr(recId)));
        }

        if (!mapInventDim)
        {
            mapInventDim = new Map(Types::String, Types::Record);
        }

        if (!mapBOMNum)
        {
            mapBOMNum = new Map(Types::String, Types::Container);
        }

        while (queryRun.next())
        {
            queryBOM = queryRun.get(tablenum(BOM));

            tmpBOM.data(queryBOM);

            origRecId = tmpBOM.RecId;
            BOMLineCreationSequenceNumber origBOMLineCreationSequenceNumber = tmpBOM.LineCreationSequenceNumber;

            if (_updateMethod == OverwriteAppend::Append)
            {
                tmpBOM.ToDate = _toDate;
                if (tmpBOM.ToDate  && (tmpBOM.ToDate < tmpBOM.FromDate))
                    throw error(strfmt("@SYS86314", tmpBOM.bomId));
                tmpBOM.insert();
                mapTmpBom.insert(tmpBOM.RecId, tmpBOM);
                mapBOMRecId.insert(tmpBOM.RecId, origRecId);

                tmpBOM.ItemId = _toItemId;
                tmpBOM.ToDate = dateNull();
                tmpBOM.FromDate = _fromDate;
                tmpBOM.initFromInventTable(InventTable::find(_toItemId));
                tmpBOM.initPhysicalDimensionsFromBOM(queryBOM);

                if (mapBOMNum.exists(tmpBOM.BOMId))
                {
                    tmpBOM.LineNum = conPeek(mapBOMNum.lookup(tmpBOM.BOMId), 1) + 1;
                    tmpBOM.LineCreationSequenceNumber = conPeek(mapBOMNum.lookup(tmpBOM.BOMId), 2) + 1;
                }
                else
                {
                    tmpBOM.LineNum = BOM::nextLineNum(tmpBOM.bomId);
                }

                tmpBOM.insert();
                mapTmpBom.insert(tmpBOM.RecId, tmpBOM);
                mapBOMRecId.insert(tmpBOM.RecId, tmpBOM.RecId);
                mapBOMNum.insert(tmpBOM.BOMId, [tmpBOM.LineNum, tmpBOM.LineCreationSequenceNumber]);
            }
            else
            {
                tmpBOM.ItemId = _toItemId;
                tmpBOM.initFromInventTable(InventTable::find(_toItemId));
                tmpBOM.LineCreationSequenceNumber = origBOMLineCreationSequenceNumber;
                tmpBOM.initPhysicalDimensionsFromBOM(queryBOM);
                tmpBOM.insert();
                mapTmpBom.insert(tmpBOM.RecId, tmpBOM);
                mapBOMRecId.insert(tmpBOM.RecId, origRecId);
            }
        }

        while select tmpBOM
        {
            inventDim = InventDim::find(tmpBOM.InventDimId);
            if (!mapInventDim.exists(inventDim.InventDimId))
            {
                mapInventDim.insert(inventDim.InventDimId, inventDim);
            }
        }

        return [mapTmpBom.pack(), mapBOMRecId.pack(), mapInventDim.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a record with the specified <c>BOMId</c> exists in the database.
    /// </summary>
    /// <param name="_bomId">
    /// The <c>BOMId</c> to check.
    /// </param>
    /// <returns>
    /// true if a record exists with the specified <c>BOMId</c> value; otherwise, false.
    /// </returns>
    public static boolean existBOMId(BOMId _bomId)
    {
        return _bomId &&
               (select firstonly RecId from bom
                    where bom.BOMId == _bomId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existConfigValue</Name>
				<Source><![CDATA[
    public static boolean existConfigValue(
        BOMId               _bomNum,
        ConfigGroupId       _configGroupId,
        ItemId              _itemId
        )
    {
        return (select bom
                    where bom.bomId              == _bomNum          &&
                          bom.ConfigGroupId      == _configGroupId   &&
                          bom.ItemId             == _itemId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a record with the specified record ID exists in the database.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID to check.
    /// </param>
    /// <returns>
    ///    true if a record exists with the specified record ID; otherwise, false.
    /// </returns>
    public static boolean existRecId(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from bom
                    where bom.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static BOM findRecId(
        recId       _recId,
        boolean     _update = false
        )
    {
        BOM bom;

        if (_recId)
        {
            bom.selectForUpdate(_update);

            select bom
                where bom.RecId == _recId;
        }

        return bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPmfFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BomVersion</c> value is a <c>PmfBOMFormula::Formula</c> enumeration value.
    /// </summary>
    /// <param name="_bomId">
    /// The <c>BomId</c> value of the current record.
    /// </param>
    /// <returns>
    /// true if the <c>BomVersion</c> value is a <c>PmfBOMFormula::Formula</c> enumeration value; otherwise
    /// false.
    /// </returns>
    public static boolean isPmfFormula(BOMId _bomId)
    {
        BOMVersion bomVersion;

        select firstonly RecId
            from bomVersion
            where  bomVersion.bomId      == _bomId
                && bomVersion.PmfTypeId  == PmfBOMFormula::Formula;

        return bomVersion.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    public static LineNum lastLineNum(BOMId _bomNum)
    {
        return (select maxof(LineNum) from bom
                    where bom.bomId == _bomNum).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBomActiveItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a lookup for BOM lines that are linked to potency products.
    /// </summary>
    /// <param name="_ctrl">
    ///     The control calling method.
    /// </param>
    /// <param name="_bomId">
    ///     The ID of the bill of materials containing the BOM lines.
    /// </param>
    public static void lookupBomActiveItems(
        FormStringControl   _ctrl,
        BOMId               _bomId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(BOM), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(BOM));
        qbds.addRange(fieldnum(BOM,PDSIngredientType)).value(enum2str(PDSIngredientTypeEnum::Active));
        qbds.addRange(fieldnum(BOM,BOMId)).value(_bomId);
        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldnum(BOM,ItemID), true);
        sysTableLookup.addLookupfield(fieldnum(BOM,BOMQty));
        sysTableLookup.addLookupMethod(tablemethodstr(BOM, itemName));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupConfigGroupId</Name>
				<Source><![CDATA[
    public static void lookupConfigGroupId(
        FormStringControl   _ctrl,
        BOMId               _bomId,
        ConfigRuleMethod    _method = ConfigRuleMethod::Exclude
        )
    {
        SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tablenum(ConfigGroup),_ctrl);
        Query           query;

        if (!_bomId)
        {
            throw error(strfmt("@SYS19306", funcname()));
        }

        sysTableLookup.addLookupfield(fieldnum(ConfigGroup, ConfigGroupId));
        sysTableLookup.addLookupfield(fieldnum(ConfigGroup, Name));

        if (!prmisdefault(_method))
        {
            query = new Query(
                ConfigExcludeInclude::construct(_method).configGroupIdLookupQuery(_bomId));
        }
        else
        {
            query = new Query(
                new ConfigExclIncl_1Level().configGroupIdLookupQuery(_bomId));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupConfigGroupIdAdv</Name>
				<Source><![CDATA[
    public static void lookupConfigGroupIdAdv(
        FormStringControl   _ctrl,
        BOMId               _bomId,
        boolean             _showInvent
        )
    {
        Args                    args;
        Object                  formRun;

        args = new Args();
        args.name(formstr(ConfigGroupIdLookup));
        args.caller(_ctrl);
        formRun = classfactory.formRunClass(args);
        formRun.setBOMId(_bomId);
        formRun.setShowInvent(_showInvent);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemId</Name>
				<Source><![CDATA[
    public static void lookupItemId(
        FormStringControl   _ctrl,
        BOMId               _bomId,
        ConfigGroupId       _groupId,
        ConfigRuleMethod    _method = ConfigRuleMethod::Exclude
        )
    {
        BOM::lookupItemIdAdv(_ctrl,_bomId,_groupId,false,_method);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdAdv</Name>
				<Source><![CDATA[
    static void lookupItemIdAdv(
        FormStringControl   _ctrl,
        BOMId               _bomId,
        ConfigGroupId       _groupId,
        boolean             _showInvent,
        ConfigRuleMethod    _method = ConfigRuleMethod::Exclude
        )
    {
        Args                    args;
        Object                  formRun;

        args = new Args();
        args.name(formstr(ConfigItemIdLookup));
        args.caller(_ctrl);
        formRun = classfactory.formRunClass(args);
        formRun.setBOMId(_bomId);
        formRun.setConfigGroupId(_groupId);
        formRun.setShowInvent(_showInvent);
        if (! prmisdefault(_method))
        {
            formRun.setMethod(_method);
        }
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductsNoPlanItems</Name>
				<Source><![CDATA[
    public static void lookupProductsNoPlanItems(
        FormStringControl    _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(InventTable), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(InventTable));
        qbds.addRange(fieldnum(InventTable,PmfProductType)).value(strfmt('!%1',enum2str(PmfProductType::MainItem)));

        sysTableLookup.addLookupfield(fieldnum(InventTable,ItemId));
        sysTableLookup.addLookupmethod(tablemethodstr(InventTable,itemGroupId));
        sysTableLookup.addLookupmethod(tablemethodstr(InventTable,defaultProductName));
        sysTableLookup.addLookupfield(fieldnum(InventTable,NameAlias));
        sysTableLookup.addLookupfield(fieldnum(InventTable,ItemType));
        sysTableLookup.addLookupfield(fieldnum(InventTable,PmfProductType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    public static LineNum nextLineNum(BOMId _bomNum)
    {
        return BOM::lastLineNum(_bomNum) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reNumber</Name>
				<Source><![CDATA[
    public static container reNumber(
        BOMId   _bomId,
        boolean _packInContainer = false)
    {
        Map         lines = new Map(typeName2Type(extendedtypestr(recId)), Types::Integer);
        container   packedBOM;
        int         counter;
        BOM         bom;

        if (!_bomId)
        {
            return connull();
        }

        ttsbegin;

        while select RecId from bom index NumIdx
            where bom.bomId == _bomId
        {
            lines.insert(bom.RecId,counter);
            counter++;
        }

        while select forupdate bom
            index hint NumIdx
            where bom.bomId == _bomId
        {
            counter = lines.lookup(bom.RecId);
            bom.LineNum = counter;
            bom.doUpdate();
            if (_packInContainer)
            {
                packedBOM += [bom.data()];
            }
        }
        ttscommit;

        return packedBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sorting</Name>
				<Source><![CDATA[
    public static void sorting(
        BOMId    _bomNum,
        BOMSort  _sortChoice
        )
    {
        BOM         bom;
        InventDim   inventDim;
        Counter     counter;

        if (! BOMTable::find(_bomNum))
        {
            checkFailed(strfmt("@SYS21841",_bomNum));
            throw error("@SYS22271");
        }

        ttsbegin;

        switch (_sortChoice)
        {
            case BOMSort::LineType :
                while select forupdate bom
                    order by bomType,ItemId
                    where bom.bomId == _bomNum
                    join inventDim
                        order ConfigId
                        where inventDim.InventDimId == bom.InventDimId
                {
                    counter++;
                    bom.LineNum      = counter;
                    bom.update();
                }
                break;
            case BOMSort::ItemId:
                while select forupdate bom
                    order by ItemId
                    where bom.bomId == _bomNum
                    join inventDim
                        order ConfigId
                        where inventDim.InventDimId == bom.InventDimId
                {
                    counter++;
                    bom.LineNum      = counter;
                    bom.update();
                }
                break;
            case BOMSort::ConfigGroup:
                while select forupdate bom
                    order by ConfigGroupId,ItemId
                    where bom.bomId == _bomNum
                {
                    counter++;
                    bom.LineNum      = counter;
                    bom.update();
                }
                break;
            case BOMSort::Position:
                while select forupdate bom
                    order by Position,ItemId
                    where bom.bomId == _bomNum
                    join inventDim
                        order ConfigId
                        where inventDim.InventDimId == bom.InventDimId
                {
                    counter++;
                    bom.LineNum      = counter;
                    bom.update();
                }
                break;
            case BOMSort::OprNum:
                while select forupdate bom
                    order by OprNum,ItemId
                    where bom.bomId == _bomNum
                    join inventDim
                        order ConfigId
                        where inventDim.InventDimId == bom.InventDimId
                {
                    counter++;
                    bom.LineNum      = counter;
                    bom.update();
                }
                break;
            default:
                throw error("@SYS19327");
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if unit of measure is valid.
    /// </summary>
    /// <returns>
    /// true if the unit is valid; otherwise, false
    /// </returns>
    boolean checkUnit()
    {
        boolean             ok     = true;
        UnitOfMeasureSymbol unitId = InventTable::find(this.ItemId).inventUnitId();

        if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                          this.InventDimId,
                                                                                          unitId,
                                                                                          this.UnitId))
        {
            ok = checkFailed(strFmt("@SYS28690", unitId, this.UnitId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the current BOM line is eligible to advanced warehousing processes.
    /// </summary>
    /// <returns>
    /// true if both the item and the warehouse in the BOM line are enabled for advanced warehousing processes;
    /// otherwise, false.
    /// </returns>
    public boolean whsEnabled()
    {
        return InventDim::find(this.InventDimId).inventLocation().WHSEnabled &&
               InventTable::find(this.ItemId).whsItemIsWHSControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineNumFromBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the line number based on another BOM line.
    /// </summary>
    /// <param name = "_baseBOM">The BOM line to base the numbering on.</param>
    /// <param name = "_after">A boolean that determines if the new line should be placed after the line given in the <paramname>_baseBOM</paramname> parameter.</param>
    public void initLineNumFromBOM(BOM _baseBOM, boolean _after)
    {
        if (_baseBOM)
        {
            if (_after)
            {
                this.setLineNumAfter(_baseBOM);
            }
            else
            {
                if (!this.setLineNumBefore(_baseBOM))
                {
                    BOM::reNumber(this.bomId, false);
                    _baseBOM.reread();
                    this.setLineNumBefore(_baseBOM);
                }
            }
        }
        else
        {
            this.LineNum = BOM::nextLineNum(this.bomId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductDimensions</Name>
				<Source><![CDATA[
    private void defaultProductDimensions()
    {
        InventTable inventTable = this.getExtensionInventTable();
        InventDim inventDim = this.inventDim();
        inventDim.initProductDimensionsFromInventTable(inventTable, inventDim);
        this.InventDimId = InventDim::findOrCreate(inventDim).inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemDimensions</Name>
				<Source><![CDATA[
    private void defaultItemDimensions()
    {
        InventTable     inventTable = this.getExtensionInventTable();
        InventDimParm   inventDimParm;
        InventDim       inventDim = this.inventDim();
        InventDim       inventDimJoin;
        boolean         isBOMSiteLess;

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDim))
        {
            return;
        }

        inventDimParm.initDimBOM(InventDimGroupSetup::newInventTable(inventTable));
        inventDim.clearNotSelectedDim(inventDimParm);

        if (inventDimParm.InventSiteIdFlag && this.bomId)
        {
            inventDim.InventSiteId  = this.bomTable().SiteId;
            isBOMSiteLess           = inventDim.InventSiteId == '';
        }

        inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Invent, inventDim);

        if (isBOMSiteLess)
        {
            inventDim.InventSiteId      = '';
        }

        if (isBOMSiteLess || this.WrkCtrConsumption)
        {
            inventDim.InventLocationId  = '';
        }

        this.InventDimId        = InventDim::findOrCreate(inventDim).InventDimId;

        // update joined inventDim datasource
        if (FormDataUtil::isFormDataSource(this))
        {
            inventDimJoin = this.joinChildTable(tablenum(InventDim));

            // when called from a new (not saved) record the inventDimJoin buffer is false so the check must be on tableId.
            if (inventDimJoin.TableId == tablenum(InventDim) && FormDataUtil::isFormDataSource(inventDimJoin))
            {
                inventDimJoin.data(inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles reinitialization if needed when an associated <c>InventDim</c> buffer is changed.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer.</param>
    /// <param name = "_inventDimFieldId">The field that was changed.</param>
    public void modifiedInventDim(InventDim _inventDim, FieldId _inventDimFieldId)
    {
        boolean isFieldProductOrSiteDimension = _inventDim.siteOrProductDimFieldModified(_inventDimFieldId);
        this.InventDimId = _inventDim.inventDimId;

        if (isFieldProductOrSiteDimension)
        {
            this.defaultItemDimensions();
        }

        _inventDim.refreshFormDataSource(this.inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultScrapConst</Name>
				<Source><![CDATA[
    private void defaultScrapConst()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)) &&
            (!BomInitDefaultValueForInventTableFlight::instance().isEnabled() || this.isFieldModified(fieldNum(BOM, ItemId))))
        {
            this.setDefaultScrapConst();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultScrapVar</Name>
				<Source><![CDATA[
    private void defaultScrapVar()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)) &&
            (!BomInitDefaultValueForInventTableFlight::instance().isEnabled() || this.isFieldModified(fieldNum(BOM, ItemId))))
        {
            this.setDefaultScrapVar();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBOMType</Name>
				<Source><![CDATA[
    private void defaultBOMType()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)) && 
            (!BomInitDefaultValueForInventTableFlight::instance().isEnabled() || this.isFieldModified(fieldNum(BOM, ItemId))))
        {
            this.setDefaultBOMType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultScrapConst</Name>
				<Source><![CDATA[
    private void initDefaultScrapConst()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.setDefaultScrapConst();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultScrapVar</Name>
				<Source><![CDATA[
    private void initDefaultScrapVar()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.setDefaultScrapVar();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultBOMType</Name>
				<Source><![CDATA[
    private void initDefaultBOMType()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.setDefaultBOMType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultScrapConst</Name>
				<Source><![CDATA[
    private void setDefaultScrapConst()
    {
        this.ScrapConst = this.getExtensionInventTable().ScrapConst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultScrapVar</Name>
				<Source><![CDATA[
    private void setDefaultScrapVar()
    {
        this.ScrapVar = this.getExtensionInventTable().ScrapVar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultBOMType</Name>
				<Source><![CDATA[
    private void setDefaultBOMType()
    {
        if (this.getExtensionInventTable().Phantom)
        {
            this.bomType = BOMType::Phantom;
        }
        else
        {
            this.bomType = BOMType::Item;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPDSIngredientType</Name>
				<Source><![CDATA[
    private void defaultPDSIngredientType()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId))
            && this.getExtensionInventTable().PDSBaseAttributeId)
        {
            this.PDSIngredientType = PDSIngredientTypeEnum::Active;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPDSBaseValue</Name>
				<Source><![CDATA[
    private void defaultPDSBaseValue()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, PDSIngredientType)))
        {
            PdsIngredient pdsIngredient = PdsIngredient::newFromType(this.pdsIngredientType);
            pdsIngredient.defaultBOMField(this, fieldStr(BOM, PDSBaseValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPdsCWQty</Name>
				<Source><![CDATA[
    private void defaultPdsCWQty()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId))
            && PdsGlobal::pdsIsCWItem(this.ItemId) 
            && !this.PdsCWQty)
        {
            this.PdsCWQty = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBOMQty</Name>
				<Source><![CDATA[
    private void defaultBOMQty()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId))
            && !this.bomQty 
            && !this.PmfPlanGroupId)
        {
            this.bomQty = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultUnitId</Name>
				<Source><![CDATA[
    private void defaultUnitId()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.UnitId = this.getExtensionInventTable().bomUnitId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMaterialOverpickPercentage</Name>
				<Source><![CDATA[
    private void defaultMaterialOverpickPercentage()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.MaterialOverpickPercentage = this.whsInventTable().MaterialOverpickPercentage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfDependentFieldIsSet</Name>
				<Source><![CDATA[
    private boolean checkIfDependentFieldIsSet(FieldId _dependentFieldId)
    {
        return (this.isFieldSet(_dependentFieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultHeight</Name>
				<Source><![CDATA[
    private void defaultHeight()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.Height = this.getExtensionInventTable().Height;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWidth</Name>
				<Source><![CDATA[
    private void defaultWidth()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.Width = this.getExtensionInventTable().Width;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDepth</Name>
				<Source><![CDATA[
    private void defaultDepth()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.Depth = this.getExtensionInventTable().Depth;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDensity</Name>
				<Source><![CDATA[
    private void defaultDensity()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.Density = this.getExtensionInventTable().Density;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjSetSubProdToConsumed</Name>
				<Source><![CDATA[
    private void defaultProjSetSubProdToConsumed()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, bomType)))
        {
            if (this.bomType == BOMType::PeggedSupply)
            {
                this.ProjSetSubProdToConsumed = ProjParameters::find().ProjSetSubProdToConsumed;
            }
            else
            {
                this.ProjSetSubProdToConsumed = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultEndSchedConsump</Name>
				<Source><![CDATA[
    private void defaultEndSchedConsump()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, bomType)))
        {
            if (this.ItemId
                && this.itemType() == ItemType::Service
                && this.type().isPeggedSupply())
            {
                this.EndSchedConsump = NoYes::Yes;
            }
            else
            {
                this.EndSchedConsump = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBOMConsump</Name>
				<Source><![CDATA[
    private void defaultBOMConsump()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, PDSIngredientType)))
        {
            PdsIngredient pdsIngredient = PdsIngredient::newFromType(this.pdsIngredientType);
            pdsIngredient.defaultBOMField(this, fieldStr(BOM, BOMConsump));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProdFlushingPrincip</Name>
				<Source><![CDATA[
    private void defaultProdFlushingPrincip()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPercentageEnable</Name>
				<Source><![CDATA[
    protected void defaultPercentageEnable()
    {
        if (#PmfEnabled
            && this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId))
            && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PmfPctEnable = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFormulaPercentage</Name>
				<Source><![CDATA[
    private void defaultFormulaPercentage()
    {
        if (#PmfEnabled
            && this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId))
            && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PmfFormulaPct = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBomWhsReleasePolicy</Name>
				<Source><![CDATA[
    private void defaultBomWhsReleasePolicy()
    {
        if (this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId)))
        {
            this.BomWHSReleasePolicy = this.getExtensionInventTable().BomWHSReleasePolicy;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFormulaScalable</Name>
				<Source><![CDATA[
    private void defaultFormulaScalable()
    {
        if (#PmfEnabled
            && this.checkIfDependentFieldIsSet(fieldNum(BOM, ItemId))
            && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PmfScalable = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(BOM, ScrapConst):
                this.defaultScrapConst();
                break;

            case fieldnum(BOM, ScrapVar):
                this.defaultScrapVar();
                break;

            case fieldnum(BOM, bomType):
                this.defaultBOMType();
                break;

            case fieldnum(BOM, UnitId):
                this.defaultUnitId();
                break;

            case fieldnum(BOM, Height):
                this.defaultHeight();
                break;

            case fieldnum(BOM, Width):
                this.defaultWidth();
                break;

            case fieldnum(BOM, Depth):
                this.defaultDepth();
                break;

            case fieldnum(BOM, Density):
                this.defaultDensity();
                break;

            case fieldnum(BOM, PDSIngredientType):
                this.defaultPDSIngredientType();
                break;

            case fieldnum(BOM, PDSBaseValue):
                this.defaultPDSBaseValue();
                break;

            case fieldnum(BOM, PdsCWQty):
                this.defaultPdsCWQty();
                break;

            case fieldnum(BOM, bomQty):
                this.defaultBOMQty();
                break;

            case fieldnum(BOM, ProjSetSubProdToConsumed):
                this.defaultProjSetSubProdToConsumed();
                break;

            case fieldnum(BOM, EndSchedConsump):
                this.defaultEndSchedConsump();
                break;

            case fieldnum(BOM, BOMConsump):
                this.defaultBOMConsump();
                break;

            case fieldnum(BOM, ProdFlushingPrincip):
                this.defaultProdFlushingPrincip();
                break;

            case fieldnum(BOM, InventDimId):
                this.defaultProductDimensions();
                this.defaultItemDimensions();
                break;

            case fieldnum(BOM, PmfPctEnable):
                this.defaultPercentageEnable();
                break;

            case fieldnum(BOM, PmfFormulaPct):
                this.defaultFormulaPercentage();
                break;

            case fieldnum(BOM, PmfScalable):
                this.defaultFormulaScalable();
                break;

            case fieldNum(BOM, BomWHSReleasePolicy):
                this.defaultBomWhsReleasePolicy();
                break;

            case fieldNum(BOM, MaterialOverpickPercentage):
                this.defaultMaterialOverpickPercentage();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
                [fieldnum(BOM, ScrapConst), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, ScrapVar), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, bomType), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, UnitId), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, Height), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, Width), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, Depth), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, Density), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, PDSIngredientType), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, PDSBaseValue), [fieldnum(BOM, PDSIngredientType)]],          // Defaulting will happen when ItemId is changed
                [fieldnum(BOM, PdsCWQty), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, bomQty), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, ProjSetSubProdToConsumed), [fieldnum(BOM, bomType)]],
                [fieldnum(BOM, EndSchedConsump), [fieldnum(BOM, bomType)]],
                [fieldnum(BOM, BOMConsump), [fieldnum(BOM, PDSIngredientType)]],
                [fieldnum(BOM, ProdFlushingPrincip), [fieldnum(BOM, PDSIngredientType)]],
                [fieldnum(BOM, InventDimId), [fieldnum(BOM, ItemId), fieldnum(BOM, WrkCtrConsumption)]],
                [fieldnum(BOM, PmfPctEnable), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, PmfFormulaPct), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, PmfScalable), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, BomWHSReleasePolicy), [fieldnum(BOM, ItemId)]],
                [fieldnum(BOM, MaterialOverpickPercentage), [fieldnum(BOM, ItemId)]]

        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionInventTable</Name>
				<Source><![CDATA[
    public InventTable getExtensionInventTable()
    {
        return this.inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemTypeIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an icon representation of the item type on the BOM
    /// </summary>
    /// <returns>Container with icon representing the item type of the BOM</returns>
    public display container displayItemTypeIcon()
    {      
        return this.inventTable().displayItemTypeIcon();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPhysicalDimensionsFromBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes physical dimensions from an <c>BOM</c> record.
    /// </summary>
    /// <param name="_fromBom">
    /// A <c>BOM</c> record.
    /// </param>
    public void initPhysicalDimensionsFromBOM(BOM _fromBom)
    {
        this.Height = _fromBom.Height;
        this.Width = _fromBom.Width;
        this.Depth = _fromBom.Depth;
        this.Density = _fromBom.Density;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BOM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124083</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>BOMConsistOf</FormRef>
	<Label>@SYS22174</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BOMId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>NumIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>BOMCreationSequenceIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BOMConfigRule</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOMConfigRule</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PDSBatchAttribTransfer</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PDSBatchAttribTransfer</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PDSCompensationPrinciple</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PDSCompensationPrinciple</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQtySerie</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineCreationSequenceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOM</Name>
			<Label>@SYS7916</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSIngredientType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Calculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BomWHSReleasePolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Consumption</Name>
			<Label>@SYS853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrConsumption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionCalculation</Name>
			<Label>@SYS22165</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Formula</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMQtySerie</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMConsump</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdFlushingPrincip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapConst</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapVar</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Measurement</Name>
			<Label>@SYS2021</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Density</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Constant</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Operation</Name>
			<Label>@SYS101237</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndSchedConsump</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWGrp</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSGenealogy</Name>
			<Label>@PSC182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSInheritEndItemShelfLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSInheritCoProductShelfLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSInheritEndItemBatchAttrib</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSInheritCoProductBatchAttrib</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPotency</Name>
			<Label>@PSC61</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSBaseValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfFormulaGrp</Name>
			<Label>@PRO1115</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Calculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfFormulaPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfPctEnable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfScalable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfPlanGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfPlanGroupPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfPlanGroup</Name>
			<Label>@PRO1063</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfPlanGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfPlanGroupPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectConsumed</Name>
			<Label>@SYS109052</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSetSubProdToConsumed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSC</Name>
			<Label>@PSC61</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSIngredientType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoundingUp</Name>
			<Label>@SCM:Rounding</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoundUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundUpQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Subsupplier</Name>
			<Label>@SYS22167</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Valid</Name>
			<Label>@SYS8553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarehouseProcesses</Name>
			<Label>@WAX:WarehouseProcesses</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaterialOverpickPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMConsumpType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BOMQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BOMQtySerie</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMQtySerie</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Calculation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcBOMLine</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfigGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfigGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Constant</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureConstant</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Density</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureDensity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Depth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureDepth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndSchedConsump</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMEndSchedConsump</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Formula</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMFormula</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<GroupPrompt>@SYS4083</GroupPrompt>
			<Label>@SYS5209</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Height</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemRouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNumBOMLine</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PDSBaseValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBaseValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSIngredientType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSIngredientType</ExtendedDataType>
			<EnumType>PDSIngredientTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritCoProductBatchAttrib</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritBatchAttrib</ExtendedDataType>
			<Label>@PSC179</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritCoProductShelfLife</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritShelfLife</ExtendedDataType>
			<Label>@PSC180</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritEndItemBatchAttrib</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritBatchAttrib</ExtendedDataType>
			<Label>@PSC178</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSInheritEndItemShelfLife</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSInheritShelfLife</ExtendedDataType>
			<Label>@PSC181</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfFormulaPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfFormulaPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfPctEnable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PMF</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PRO73</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PmfPlanGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanGroupIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PmfPlanGroupPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanGroupPriorityBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfScalable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PMF</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PRO76</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Position</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMPosition</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdFlushingPrincip</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:ProdFlushingPrincipleHelpText</HelpText>
			<EnumType>ProdFlushingPrincipBOM</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjSetSubProdToConsumed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSetSubProdToConsumed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundUp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMRoundUp</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundUpQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMRoundUpQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ScrapConst</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ScrapConst</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ScrapVar</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ScrapVar</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
			<GroupPrompt>@SYS8828</GroupPrompt>
			<Label>@SYS14656</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Width</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WrkCtrConsumption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrConsumption</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineCreationSequenceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMLineCreationSequenceNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BomWHSReleasePolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<EnumType>BomWHSReleasePolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaterialOverpickPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaterialOverpickPercentage</ExtendedDataType>
			<FeatureClass>WHSProductionRawMaterialOverpickingFlight</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ConfigGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ConfigGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BOMCreationSequenceIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineCreationSequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BOMMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BOMConsump</MapField>
					<MapFieldTo>BOMConsump</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMId</MapField>
					<MapFieldTo>BOMId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMQty</MapField>
					<MapFieldTo>BOMQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMQtySerie</MapField>
					<MapFieldTo>BOMQtySerie</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMType</MapField>
					<MapFieldTo>BOMType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BomWHSReleasePolicy</MapField>
					<MapFieldTo>BomWHSReleasePolicy</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Calculation</MapField>
					<MapFieldTo>Calculation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Constant</MapField>
					<MapFieldTo>Constant</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Density</MapField>
					<MapFieldTo>Density</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Depth</MapField>
					<MapFieldTo>Depth</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndSchedConsump</MapField>
					<MapFieldTo>EndSchedConsump</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Formula</MapField>
					<MapFieldTo>Formula</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Height</MapField>
					<MapFieldTo>Height</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
					<MapFieldTo>ItemBOMId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
					<MapFieldTo>ItemRouteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaterialOverpickPercentage</MapField>
					<MapFieldTo>MaterialOverpickPercentage</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSBaseValue</MapField>
					<MapFieldTo>PDSBaseValue</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCompensationPrincipleId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSIngredientType</MapField>
					<MapFieldTo>PDSIngredientType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSInheritCoProductBatchAttrib</MapField>
					<MapFieldTo>PDSInheritCoProductBatchAttrib</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSInheritCoProductShelfLife</MapField>
					<MapFieldTo>PDSInheritCoProductShelfLife</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSInheritEndItemBatchAttrib</MapField>
					<MapFieldTo>PDSInheritEndItemBatchAttrib</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSInheritEndItemShelfLife</MapField>
					<MapFieldTo>PDSInheritEndItemShelfLife</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfFormulaPct</MapField>
					<MapFieldTo>PmfFormulaPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfPctEnable</MapField>
					<MapFieldTo>PmfPctEnable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfQtyWithoutYield</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PmfScalable</MapField>
					<MapFieldTo>PmfScalable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>position</MapField>
					<MapFieldTo>Position</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProdFlushingPrincip</MapField>
					<MapFieldTo>ProdFlushingPrincip</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundUp</MapField>
					<MapFieldTo>RoundUp</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundUpQty</MapField>
					<MapFieldTo>RoundUpQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ScrapConst</MapField>
					<MapFieldTo>ScrapConst</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ScrapVar</MapField>
					<MapFieldTo>ScrapVar</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendId</MapField>
					<MapFieldTo>VendId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Width</MapField>
					<MapFieldTo>Width</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrConsumption</MapField>
					<MapFieldTo>WrkCtrConsumption</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BOMTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>BOM</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<SourceEDT>BOMId</SourceEDT>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConfigGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ConfigGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfigGroupId</Name>
					<Field>ConfigGroupId</Field>
					<RelatedField>ConfigGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfPlanGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PmfPlanGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PmfPlanGroupId</Name>
					<Field>PmfPlanGroupId</Field>
					<RelatedField>PmfPlanGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRouteId</Name>
					<Field>ItemRouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SubBOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SubBOMTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BOM</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBOMId</Name>
					<SourceEDT>ItemBOMId</SourceEDT>
					<Field>ItemBOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BomLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitId</Name>
					<Field>UnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendId</Name>
					<Field>VendId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>