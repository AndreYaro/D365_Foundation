<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_Customs_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTrans_Customs_IT extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcVendorGoodsValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the vendor goods value.
    /// </summary>
    /// <returns>
    /// The vendor goods value.
    /// </returns>
    public Amount calcVendorGoodsValue()
    {
        LedgerJournalTrans_Customs_IT   goodsValueTrans;
        LedgerJournalTrans              creditLedgerJournalTrans;
        LedgerJournalTrans              debetLedgerJournalTrans;
    
        if (!this.GoodsValue)
        {
            creditLedgerJournalTrans = LedgerJournalTrans::findRecId(this.LedgerJournalTrans, false);
            if (creditLedgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                select sum(GoodsValue) from goodsValueTrans
                exists join debetLedgerJournalTrans
                    where debetLedgerJournalTrans.JournalNum     == creditLedgerJournalTrans.JournalNum
						&& debetLedgerJournalTrans.Voucher       == creditLedgerJournalTrans.Voucher
						&& debetLedgerJournalTrans.RecId         != creditLedgerJournalTrans.RecId
						&& goodsValueTrans.LedgerJournalTrans    == debetLedgerJournalTrans.RecId;
    
                return goodsValueTrans.GoodsValue;
            }
        }
    
        return this.GoodsValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsPaymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates customs payments.
    /// </summary>
    /// <returns>
    /// The customs payment amount.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display public Amount customsPaymentAmount()
    {
        LedgerJournalTrans_CustomsPayment_IT customsPayment;
    
        select sum(PaymentAmount) from customsPayment
            where customsPayment.LedgerJournalTrans_Customs == this.RecId;
    
        return customsPayment.PaymentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustomsPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes customs payments.
    /// </summary>
    public void deleteCustomsPayment()
    {
        LedgerJournalTrans_CustomsPayment_IT customsPayment;
    
        delete_from customsPayment
            where customsPayment.LedgerJournalTrans_Customs == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTable_Customs</Name>
				<Source><![CDATA[
    public LedgerJournalTable_Customs_IT ledgerJournalTable_Customs()
    {
        return this.LedgerJournalTrans().ledgerJournalTable().ledgerJournalTable_Customs_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the customs journal transaction can be deleted.
    /// </summary>
    /// <returns>
    /// true if the customs journal transaction can be deleted; otherwise, false.
    /// </returns>
    public boolean validateDelete()
    {
        boolean ret = super();
    
        if (this.VendInvoiceJour)
        {
            ret = checkFailed("@CustomsDocumentsIT:CD_ValidateError_LedgerJournalTrans_Customs_IT_CantDelete");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current <c>LedgerJournalTrans_Customs_IT</c>table buffer.
    /// </summary>
    /// <returns>
    /// true if table buffer is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        LedgerJournalTrans_CustomsPayment_IT customsPayment;
        boolean ret = super();
    
		select firstonly customsPayment 
			where customsPayment.LedgerJournalTrans_Customs == this.RecId 
                && this.GoodsValue * customsPayment.PaymentAmount < 0 ;

        if (customsPayment)
		{
            ret = checkFailed("@CustomsDocumentsIT:CD_ValidateError_CustomsPayment_IT_PaymentAmountSignError");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>LedgerJournalTrans_Customs_IT</c> record related to ledger journal transaction if it was not posted.
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    /// A <c>RecId</c> of the related ledger journal transaction.
    /// </param>
    static public void deleteRecord(RefRecId _ledgerJournalTransRecId)
    {
        LedgerJournalTrans_Customs_IT customsTrans;
    
        if (_ledgerJournalTransRecId)
        {
            delete_from customsTrans
                where customsTrans.LedgerJournalTrans == _ledgerJournalTransRecId
                  && !customsTrans.VendInvoiceJour;    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerJournalTrans_Customs_IT</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A value indicating whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalTrans_Customs_IT</c> table record or an empty record.
    /// </returns>
    public static LedgerJournalTrans_Customs_IT find(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalTrans_Customs_IT customsTrans;
    
        customsTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsTrans.concurrencyModel(_concurrencyModel);
        }
    
        if (_recId)
        {
            select firstonly customsTrans
                where customsTrans.RecId == _recId;
        }
    
        return customsTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerJournalTrans_Customs_IT</c> table related to a ledger journal transaction.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> of the related ledger journal transaction.
    /// </param>
    /// <param name="_forupdate">
    /// A value indicating whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalTrans_Customs_IT</c> table record or an empty record.
    /// </returns>
    public static LedgerJournalTrans_Customs_IT findByLedgerJournalTrans(
        RefRecId            _recId,
        boolean             _forupdate = false)
    {
        LedgerJournalTrans_Customs_IT customsTrans;
    
        if (_recId)
        {
            customsTrans.selectForUpdate(_forupdate);
    
            select firstonly customsTrans
                where customsTrans.LedgerJournalTrans == _recId;
        }
    
        return customsTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerJournalTrans_Customs_IT</c> table related to a vendor invoice.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> of the related vendor invoice.
    /// </param>
    /// <param name="_forupdate">
    /// A value indicating whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalTrans_Customs_IT</c> table record or an empty record.
    /// </returns>
    public static LedgerJournalTrans_Customs_IT findByVendInvoiceJour(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalTrans_Customs_IT customsTrans;
    
        customsTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsTrans.concurrencyModel(_concurrencyModel);
        }
    
        if (_recId)
        {
            select firstonly customsTrans
                where customsTrans.VendInvoiceJour == _recId;
        }
    
        return customsTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans LedgerJournalTrans(LedgerJournalTrans _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink(tableStr(LedgerJournalTrans));
        }
        else
        {
            return this.setLink(tableStr(LedgerJournalTrans), _relatedTable);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>IT</CountryRegionCodes>
	<DeveloperDocumentation>@CustomsDocumentsIT:CD_JournalFieldDevDoc_LedgerJournal_Customs_IT</DeveloperDocumentation>
	<Label>@CustomsDocumentsIT:CD_JournalField_LedgerJournal_Customs_IT</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ItemService</TitleField1>
	<TitleField2>GoodsValue</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Ledger</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerJournalTrans_CustomsPayment_IT_LedgerJournalTrans_Customs_IT</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>LedgerJournalTrans_Customs_IT</Relation>
			<Table>LedgerJournalTrans_CustomsPayment_IT</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemService</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GoodsValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoices</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemService</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GoodsValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoices</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemService</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ItemService</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GoodsValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<HelpText>@CustomsDocumentsIT:CD_EntityFieldHelp_GoodsValue</HelpText>
			<Label>@CustomsDocumentsIT:CD_EntityField_GoodsValue</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invoices</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Invoices_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceJour</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInvoiceJourIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceJour</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceJour</Name>
					<Field>VendInvoiceJour</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>