<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportLine_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReportLine_IT extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the record down in the user interface.
    /// </summary>
    public void moveDown()
    {
        if (this.RecId)
        {
            TaxReportLine_IT nextRecord = TaxReportLine_IT::getNextRecord(this);

            if (nextRecord)
            {
                ttsbegin;

                TaxReportLine_IT thisRecord = TaxReportLine_IT::findRecId(this.RecId, true);
                TaxReportLine_IT oneBeforeNextRecord = TaxReportLine_IT::getNextRecord(nextRecord);

                if (oneBeforeNextRecord)
                {
                    thisRecord.LineNum = (nextRecord.LineNum + oneBeforeNextRecord.LineNum) / 2;
                }
                else
                {
                    thisRecord.LineNum = nextRecord.LineNum + 1;
                }

                thisRecord.update();

                ttscommit;

                this.refreshFormDatasource();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the record up in the user interface.
    /// </summary>
    public void moveUp()
    {
        if (this.RecId)
        {
            TaxReportLine_IT prevRecord = TaxReportLine_IT::getPrevRecord(this);

            if (prevRecord)
            {
                ttsbegin;

                TaxReportLine_IT thisRecord = TaxReportLine_IT::findRecId(this.RecId, true);
                TaxReportLine_IT oneBeforePrevRecord = TaxReportLine_IT::getPrevRecord(prevRecord);

                if (oneBeforePrevRecord)
                {
                    thisRecord.LineNum = (prevRecord.LineNum + oneBeforePrevRecord.LineNum) / 2;
                }
                else
                {
                    thisRecord.LineNum = prevRecord.LineNum - 1;
                }

                thisRecord.update();

                ttscommit;

                this.refreshFormDatasource();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the form datasource related to the current record.
    /// </summary>
    private void refreshFormDatasource()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(this) as FormDataSource;

            if (formDataSource)
            {
                RecId currentRecId = this.RecId;
                formDataSource.executeQuery();
                formDataSource.positionToRecord(TaxReportLine_IT::findRecId(currentRecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(TaxReportLine_IT, FieldID) :
                ret = TaxReportLine_IT::validateFieldID(
                    this.FieldID,
                    strFmt("@SYS119897", this.FieldID, fieldPName(TaxReportLine_IT, FieldID))) && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFieldID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the report record by the header record ID and field ID.
    /// </summary>
    /// <param name="_taxReportHeaderRecId">
    /// The header record ID.
    /// </param>
    /// <param name="_fieldID">
    /// The report field ID.
    /// </param>
    /// <param name="_forupdate">
    /// Pass true to select the record for update.
    /// </param>
    /// <returns>
    /// The report record.
    /// </returns>
    public static TaxReportLine_IT findFieldID(RefRecId _taxReportHeaderRecId, TaxReportFieldID_IT _fieldID, boolean _forupdate = false)
    {
        TaxReportLine_IT taxReportLine;

        if (_forupdate)
        {
            taxReportLine.selectForUpdate(true);
        }

        if (_taxReportHeaderRecId && _fieldID)
        {
            select firstonly taxReportLine
                where taxReportLine.TaxReportHeader == _taxReportHeaderRecId
                    && taxReportLine.FieldID == _fieldID;
        }

        return taxReportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the report record by the record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID.
    /// </param>
    /// <param name="_forupdate">
    /// Pass true to select the record for update.
    /// </param>
    /// <returns>
    /// The report record.
    /// </returns>
    public static TaxReportLine_IT findRecId(RefRecId _recId, boolean _forupdate = false)
    {
        TaxReportLine_IT taxReportLine;

        if (_forupdate)
        {
            taxReportLine.selectForUpdate(true);
        }

        if (_recId)
        {
            select firstonly taxReportLine
                where taxReportLine.RecId == _recId;
        }

        return taxReportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next report line record.
    /// </summary>
    /// <param name="_currentRecord">
    /// The current report record.
    /// </param>
    /// <returns>
    /// The next report record, if found; otherwise an empty record.
    /// </returns>
    public static TaxReportLine_IT getNextRecord(TaxReportLine_IT _currentRecord)
    {
        TaxReportLine_IT nextRecord;

        select firstonly nextRecord
            order by LineNum asc
            where nextRecord.TaxReportHeader == _currentRecord.TaxReportHeader
                && nextRecord.LineNum > _currentRecord.LineNum;

        return nextRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous report line record.
    /// </summary>
    /// <param name="_currentRecord">
    /// The current report record.
    /// </param>
    /// <returns>
    /// The previous report record, if found; otherwise an empty record.
    /// </returns>
    public static TaxReportLine_IT getPrevRecord(TaxReportLine_IT _currentRecord)
    {
        TaxReportLine_IT prevRecord;

        select firstonly prevRecord
            order by LineNum desc
            where prevRecord.TaxReportHeader == _currentRecord.TaxReportHeader
                && prevRecord.LineNum < _currentRecord.LineNum;

        return prevRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the format of the tax report field ID specified by the user.
    /// </summary>
    /// <param name="_fieldID">
    /// The field ID.
    /// </param>
    /// <param name="_message">
    /// The error message that should be shown in case of unsuccessful validation.
    /// </param>
    /// <returns>
    /// true, if the field ID is in the correct format; false otherwise.
    /// </returns>
    public static boolean validateFieldID(TaxReportFieldID_IT _fieldID, str _message)
    {
        boolean ret = true;

        if (!isMatch(_fieldID, @'^[A-Z][A-Z0-9]\d{6}$'))
        {
            ret = _message ? checkFailed(_message) : false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYP4881976</DeveloperDocumentation>
	<FormRef>TaxYearlyComReport_IT</FormRef>
	<Label>@SYS35014</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>FieldID</TitleField1>
	<TitleField2>FieldDescription</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>HeaderLineNumIdx</ClusteredIndex>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS130874</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldFormat</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS30289</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxReportHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FieldFormat</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxReportFieldFormat_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportFieldID_IT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportFieldValue_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxReportHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HeaderFieldID</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxReportHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FieldID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HeaderLineNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxReportHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxReportHeader_IT</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TaxReportHeader_IT</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxReportHeader</Name>
					<Field>TaxReportHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>