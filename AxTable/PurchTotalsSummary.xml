<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotalsSummary</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchTotalsSummary extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and returns document totals from <c>PurchTotalsSummary</c> table record.
    /// </summary>
    /// <returns>
    ///     Returns the document's total amount
    /// </returns>
    display AmountCur documentTotal()
    {
        //Make sure the user has access to all the fields
        if (!hasFieldAccess(tableNum(PurchTotalsSummary), fieldNum(PurchTotalsSummary, NetLines), AccessType::View) ||
            !hasFieldAccess(tableNum(PurchTotalsSummary), fieldNum(PurchTotalsSummary, SalesTax), AccessType::View) ||
            !hasFieldAccess(tableNum(PurchTotalsSummary), fieldNum(PurchTotalsSummary, MiscCharges), AccessType::View) ||
            !hasFieldAccess(tableNum(PurchTotalsSummary), fieldNum(PurchTotalsSummary, RoundOff), AccessType::View) ||
            !hasFieldAccess(tableNum(PurchTotalsSummary), fieldNum(PurchTotalsSummary, UseTax), AccessType::View) ||
            !hasFieldAccess(tableNum(PurchTotalsSummary), fieldNum(PurchTotalsSummary, OtherCharges), AccessType::View) )
        {
            throw error("@SYS57330");
        }

        this.recordLevelSecurity(true);

        return  this.NetLines +
                this.SalesTax +
                this.MiscCharges +
                this.RoundOff +
                this.UseTax +
                this.OtherCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and returns vendor totals from <c>PurchTotalsSummary</c> table record
    /// </summary>
    /// <returns>
    ///     Returns the vendor's total amount
    /// </returns>
    display AmountCur vendorTotal()
    {
        //Make sure the user has access to all the fields
        if (!hasFieldAccess(tableNum(PurchTotalsSummary), fieldNum(PurchTotalsSummary, NetLines), AccessType::View) ||
            !hasFieldAccess(tableNum(PurchTotalsSummary), fieldNum(PurchTotalsSummary, SalesTax), AccessType::View) ||
            !hasFieldAccess(tableNum(PurchTotalsSummary), fieldNum(PurchTotalsSummary, MiscCharges), AccessType::View) )
        {
            throw error("@SYS57330");
        }

        this.recordLevelSecurity(true);

        return  this.NetLines +
                this.SalesTax +
                this.MiscCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if a record exists with the given RecId in the <c>PurchTotalsSummary</c> table; if not, an error message
    ///    is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record Id of the <c>PurchTotalsSummary</c> table record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!PurchTotalsSummary::exist(_recId))
        {
            ret = checkFailed(strFmt(PurchTotalsSummary::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a record for the give PO and defaults all values to 0.
    /// </summary>
    /// <param name="_purchId">
    ///     Purchase order id
    /// </param>
    /// <param name="_currencyCode">
    ///     Currency code of the purchase order currency
    /// </param>
    /// <returns>
    ///     newly created record
    /// </returns>
    public static PurchTotalsSummary createRecord(PurchId _purchId, VendCurrencyCode _currencyCode)
    {
        PurchTotalsSummary purchTotalsSummary;

        purchTotalsSummary = PurchTotalsSummary::findByPurchId(_purchId);

        if (!purchTotalsSummary)
        {
            purchTotalsSummary.PurchId = _purchId;
            purchTotalsSummary.MiscCharges = 0.0;
            purchTotalsSummary.LineDiscount = 0.0;
            purchTotalsSummary.NetLines = 0.0;
            purchTotalsSummary.OtherCharges = 0.0;
            purchTotalsSummary.Discounts = 0.0;
            purchTotalsSummary.SalesTax = 0.0;
            purchTotalsSummary.UseTax = 0.0;
            purchTotalsSummary.RoundOff = 0.0;
            purchTotalsSummary.CurrencyCode = _currencyCode;
            purchTotalsSummary.CashDiscount = 0.0;
            purchTotalsSummary.TotalAmount = 0.0;
            purchTotalsSummary.IsValid = false;
            purchTotalsSummary.insert();
        }

        return purchTotalsSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record with the specified RecId exists in the <c>PurchTotalsSummary</c>.
    /// </summary>
    /// <param name="_recId">
    ///    The record Id of the <c>PurchTotalsSummary</c> table record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     purchTotalsSummary
                 where
                     purchTotalsSummary.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PurchTotalsSummary</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record Id of the record to find in the <c>PurchTotalsSummary</c>.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that indicates to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>PurchTotalsSummary</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static PurchTotalsSummary find(
        recId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto
    )
    {
        PurchTotalsSummary  purchTotalsSummary;

        if (_recId)
        {
            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                purchTotalsSummary.concurrencyModel(_concurrencyModel);
            }

            purchTotalsSummary.selectForUpdate(_forUpdate);

            select firstonly purchTotalsSummary
                where purchTotalsSummary.RecId == _recId;
        }

        return purchTotalsSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record for PO in the <c>PurchTotalsSummary</c> table.
    /// </summary>
    /// <param name="_purchId">
    ///    The PurchId of PO for which to find the <c>PurchTotalsSummary</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that indicates to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>PurchTotalsSummary</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static PurchTotalsSummary findByPurchId(
        PurchIdBase         _purchId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto
    )
    {
        PurchTotalsSummary  purchTotalsSummary;

        if (_purchId)
        {
            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                purchTotalsSummary.concurrencyModel(_concurrencyModel);
            }

            purchTotalsSummary.selectForUpdate(_forUpdate);

            select firstonly purchTotalsSummary
                where purchTotalsSummary.PurchId == _purchId;
        }

        return purchTotalsSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the error message to be displayed when a record in the <c>PurchTotalsSummary</c> table does not exists.
    /// </summary>
    /// <returns>
    ///     The error message to be displayed when a record doesn't exist in <c>PurchTotalsSummary</c> table
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SPS1599</DeveloperDocumentation>
	<Label>@SPS1606</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>PurchId</TitleField1>
	<TitleField2>CurrencyCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>PublicSector</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MiscCharges</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OtherCharges</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Discounts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchTotals</Name>
			<Label>@SPS1606</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MiscCharges</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OtherCharges</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Discounts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDiscount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscAmount</ExtendedDataType>
			<Label>@SYS4376</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Discounts</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchEndDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsValid</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDiscount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchSumLineDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MiscCharges</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OtherCharges</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOff</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS340849</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UseTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>