<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollEarningStatement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowDeleteEarningStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the earning statement can be deleted.
    /// </summary>
    /// <returns>
    ///     true if the earning statement can be deleted; false otherwise.
    /// </returns>
    public boolean allowDeleteEarningStatement()
    {
        PayrollEarningStatementLine     payrollEarningStatementLine;
        boolean                         allowDeletion = false;

        if (this.RecId)
        {
            select firstonly RecId from payrollEarningStatementLine
                where payrollEarningStatementLine.EarningStatement == this.RecId
                &&  payrollEarningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Processed;

            if (!payrollEarningStatementLine.RecId)
            {
                allowDeletion = true;
            }
        }

        return allowDeletion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Manages the deletion of a <c>PayrollEarningStatement</c> record buffer.
    /// </summary>
    public void delete()
    {
        if (!PayrollEarningStatementLine::linesProcessedForPayment(this.RecId))
        {
            super();

            // Use the number sequence framework to attempt to release the document number for reuse by another earning statement.
            NumberSeq::releaseNumber(PayrollParameters::numRefEarningStatDocumentNumber().NumberSequenceId, this.DocumentNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes amount for the earnings statement.
    /// </summary>
    /// <returns>
    /// The total of amounts for the earnings statement.
    /// </returns>
    display AmountMST getAmount()
    {
        PayrollEarningStatementLine     payrollEarningStatementLine;

        select EarningStatement, sum(AccountingCurrencyAmount) from payrollEarningStatementLine
            group by payrollEarningStatementLine.EarningStatement
            where payrollEarningStatementLine.EarningStatement == this.RecId;

        return payrollEarningStatementLine.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes quantity for the earnings statement on the basis of earning hours.
    /// </summary>
    /// <returns>
    /// The quantity of the earnings.
    /// </returns>
    display ProjQty getQuantity()
    {
        PayrollEarningStatementLine     payrollEarningStatementLine;
        PayrollEarningCode              payrollEarningCode;

        select EarningStatement, sum(Quantity) from payrollEarningStatementLine
            group by payrollEarningStatementLine.EarningStatement
            where payrollEarningStatementLine.EarningStatement == this.RecId
            exists join QuantityUnit from payrollEarningCode
                where payrollEarningCode.RecId == payrollEarningStatementLine.EarningCode
                    && payrollEarningCode.QuantityUnit == PayrollQuantityUnit::Hours;

        return payrollEarningStatementLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.AutoGeneratedSalary = PayrollAutoGenerateSalary::Active;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert earnings statement record and creates a corresponding source document record.
    /// </summary>
    public void insert()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date of the exchange rate for the source document.
    /// </summary>
    /// <returns>
    /// The exchange rate date.
    /// </returns>
    public AccountingDate parmExchangeRateDate()
    {
        return PayrollPayPeriod::find(this.PayPeriod).PeriodEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the SourceDocumentHeader parameter.
    /// </summary>
    /// <returns>
    /// Always returns null.
    /// </returns>
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header type enum name.
    /// </summary>
    /// <returns>
    /// The value of the source document header type enum name.
    /// </returns>
    public EnumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(SourceDocument_EarningStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header type enum value for a record.
    /// </summary>
    /// <returns>
    /// The value of the source document header type enum.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_EarningStatement::EarningStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the source document record that is associated with the earning statement.
    /// </summary>
    /// <returns>
    /// The <c>SourceDocumentHeader</c> trvotf.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader    sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && !this.allowDeleteEarningStatement())
        {
            ret = false;

            info("@Payroll:OneOrMoreEarningStatementsWasNotDeletedBecauseTheLinesHaveBe");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>PayrollEarningStatement</c> table; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollEarningStatementRecId _recId)
    {
        boolean ret = true;

        if (!PayrollEarningStatement::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollEarningStatement::txtNotExist(), tableId2name(tableNum(PayrollEarningStatement))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PayrollEarningStatement</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollEarningStatementRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollEarningStatement
                    where payrollEarningStatement.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollEarningStatement</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollEarningStatement</c> table; otherwise, an empty record.
    /// </returns>

    public static PayrollEarningStatement find(
        PayrollEarningStatementRecId     _recId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollEarningStatement earningStatement;

        earningStatement.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            earningStatement.concurrencyModel(_concurrencyModel);
        }

        select firstonly earningStatement
             where earningStatement.RecId == _recId;

        return earningStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollEarningStatement</c> table.
    /// </summary>
    /// <param name="_docNum">
    ///    The document number of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollEarningStatement</c> table; otherwise, an empty record.
    /// </returns>

    public static PayrollEarningStatement findByDocumentNumber(
        PayrollEarningStatementId           _docNum,
        boolean                             _forUpdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollEarningStatement earningStatement;

        earningStatement.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            earningStatement.concurrencyModel(_concurrencyModel);
        }

        select firstonly earningStatement
             where earningStatement.DocumentNumber == _docNum;

        return earningStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorkerPayPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollEarningStatement</c> table.
    /// </summary>
    /// <param name="_workerRecId">
    /// The <c>HcmWorker</c> record ID.
    /// </param>
    /// <param name="_payPeriodRecId">
    /// The <c>PayrollPayPeriod</c> record ID.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollEarningStatement</c> table; otherwise, an empty record.
    /// </returns>

    public static PayrollEarningStatement findByWorkerPayPeriod(
        HcmWorkerRecId             _workerRecId,
        PayrollPayPeriodRecId      _payPeriodRecId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollEarningStatement earningStatement;

        earningStatement.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            earningStatement.concurrencyModel(_concurrencyModel);
        }

        select firstonly earningStatement
                    where   earningStatement.Worker == _workerRecId &&
                            earningStatement.PayPeriod == _payPeriodRecId;

        return earningStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReleasedLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     The methods checks if an earning statement has released lines.
    /// </summary>
    /// <param name="_payrollEarningStatementRecId">
    ///     The earning statement RecId.
    /// </param>
    /// <returns>
    ///     A boolean value indicating the existance of released lines.
    /// </returns>

    public static boolean hasReleasedLines(PayrollEarningStatementRecId _payrollEarningStatementRecId)
    {
        PayrollEarningStatementLine     payrollEarningStatementLine;

        select firstonly RecId from payrollEarningStatementLine
            where payrollEarningStatementLine.EarningStatement == _payrollEarningStatementRecId
            &&  payrollEarningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Released;

        return payrollEarningStatementLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS329226";
    }

]]></Source>
			</Method>
			<Method>
				<Name>existEarningCodeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether basis earnings associated with the premium adjustment earning statement line
    /// exists in the <c>PayrollEarningStatement</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <param name="_earningCode">
    /// The <c>PayrollEarningCode</c> table record.
    /// </param>
    /// <returns>
    ///  true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existEarningCodeLines(PayrollEarningStatementRecId _recId, PayrollEarningCodeRecId _earningCode)
    {
        return _recId && (select firstonly RecId from payrollEarningStatementLine
                    where payrollEarningStatementLine.EarningStatement == _recId
                        && payrollEarningStatementLine.EarningCode ==_earningCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overriden to have ability to create event handlers.
    /// </summary>
    public void postLoad()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCacheLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overriden to have ability to create event handlers.
    /// </summary>
    public void postCacheLoad()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollearningstatementTableHoldsTheEarningStatementHeade</DeveloperDocumentation>
	<Label>@Payroll:EarningsStatements</Label>
	<SingularLabel>@Payroll:EarningsStatement</SingularLabel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>DocumentNumber</TitleField1>
	<TitleField2>Worker</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WorkerPayPeriod</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Payroll</Modules>
	<ReplacementKey>DocumentNumberIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Note</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EarningStatement</Name>
			<Label>@Payroll:EarningsStatementHeader</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Note</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Payroll:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Note</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoGeneratedSalary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoGeneratedSalary</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PayrollAutoGenerateSalary</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningStatementId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Note</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PayPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollPayPeriodRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SourceDocumentHeaderRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkerPayPeriod</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PayPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DocumentNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollPayPeriod</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollPayPeriod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEarningStatement</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayPeriod</Name>
					<Field>PayPeriod</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEarningStatement</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Worker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EarningStatement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Worker</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>