<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationBasketLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationBasketLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur amountCur, Qty  qty, TransDate transDate, Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(amountCur, qty, transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>basketTransId</Name>
				<Source><![CDATA[
    TradeInventTransId basketTransId()
    {
        return 'ecq' + strFmt('%1', this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmount(Qty qty = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcGrossAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur  calcGrossAmountExclTax(Qty  qty = this.SalesQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcGrossAmountExclTax(qty, transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty qty = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountExclTax(Qty  qty = this.SalesQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().calcLineAmountExclTax(qty,  transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.SalesQty, PriceDiscPolicyCheckPolicy _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDisc(Qty qty = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcLineDisc(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDiscExclTax(Qty qty = this.SalesQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(qty, transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    // This method is called when setting disc fields
    boolean canEditDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    public CustAccount custAccount()
    {
        return this.salesQuotationBasket().CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    DiscAmount discAmount()
    {
        //    return PriceDisc::discAmount(SalesParameters::find().disc, this.lineDiscAmount(), this.multiLnDiscAmount());
        return PriceDisc::discAmount(SalesParameters::find().Disc, this.LineDisc,this.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    DiscPct   discPercent()
    {
        //    return PriceDisc::discPercent(SalesParameters::find().disc, this.linePercent(), this.multiLnPercent());
        return PriceDisc::discPercent(SalesParameters::find().Disc, this.LinePercent, this.MultiLnPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProductNumber</Name>
				<Source><![CDATA[
    public display EcoResProductDisplayProductNumber displayProductNumber()
    {
        InventDimCombination inventDimCombination = InventDimCombination::findByInventDim(this.ItemId, this.inventDim());
        return EcoResProduct::find(inventDimCombination.DistinctProductVariant).DisplayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editItemConfiguration</Name>
				<Source><![CDATA[
    public edit EcoResProductDisplayProductNumber editItemConfiguration(
        boolean _set,
        EcoResProductDisplayProductNumber _displayProductNumber)
    {
        EcoResProduct                       product;
        InventDimCombination                inventDimCombination;
        InventDim                           localInventDim;
        InventDim                           fromInventDim;
        InventDim                           blankInventDim;
        List                                displaySplit = strSplit(_displayProductNumber, ':');
        ListEnumerator                      displaySplitEnumerator = displaySplit.getEnumerator();
        EcoResProductDisplayProductNumber   displayProductNumber;

        if (_set)
        {
            if (_displayProductNumber)
            {
                while (displaySplitEnumerator.moveNext())
                {
                    if (displayProductNumber)
                    {
                        displayProductNumber += ' : ';
                    }

                    displayProductNumber += strLTrim(strRTrim(displaySplitEnumerator.current()));
                }

                select firstonly product
                where product.DisplayProductNumber == displayProductNumber;

                if (product.isDistinctProductVariant())
                {
                    inventDimCombination = InventDimCombination::findByDistinctProductVariant(product.RecId);
                    fromInventDim = inventDimCombination.inventDim();
                }
                else
                {
                    checkFailed(strFmt("@SYS112224", _displayProductNumber, "@SYS74345", tablePName(InventDimCombination)));
                    _displayProductNumber = '';
                }
            }
            else
            {
                fromInventDim = blankInventDim;
            }
            localInventDim = this.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, fromInventDim, localInventDim);
            this.modifyInventDim(localInventDim);
        }
        else
        {
            _displayProductNumber = this.displayProductNumber();
        }

        return _displayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void  initFromInventTable(InventTable _inventTable,  boolean _useFallBack=false)
    {
        InventDim                   inventDim   = this.inventDim();

        inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Sales, inventDim);

        if (_useFallBack)
        {
            if (!inventDim.InventSiteId)
            {
                inventDim.InventSiteId = InventParameters::find().fallbackSiteId();
            }

            if (!inventDim.InventLocationId)
            {
                if (EcoResDimensionGroupSetup::isWarehouseDimensionMandatoryForItem(_inventTable.ItemId))
                {
                    //Use company fallback warehouse
                    if (!inventDim.InventLocationId)
                    {
                        inventDim.InventLocationId = InventFallbackWarehouse::transportWarehouse(inventDim.InventSiteId);
                    }
                    if (!inventDim.InventLocationId)
                    {
                        inventDim.InventLocationId = InventParameters::find().FallbackInventLocationId;
                    }
                }
            }
        }

        inventDim.initFromInventLocation(inventDim.inventLocation());

        _inventTable.initNonSpecifiedStandardProductDims(inventDim);
        inventDim                   = InventDim::findOrCreate(inventDim);
        this.InventDimId            = inventDim.InventDimId;

        this.SalesUnit              = _inventTable.salesUnitId();

        this.SalesQty               = this.SalesQty
                                ? this.SalesQty
                                : _inventTable.salesStandardQty(this.InventDimId);

        this.PriceUnit              = _inventTable.salesPriceUnit();
        this.LineAmount             = 0;

        this.setPriceDisc(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    void initFromPriceDisc(PriceDisc_Price priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true)
    {
        this.SalesPrice         = priceDisc.price();
        this.PriceUnit          = priceDisc.priceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjCategoryId</Name>
				<Source><![CDATA[
    void initFromProjCategoryId()
    {
        ProjCategory    projCategory;

        projCategory = ProjCategory::find(this.ProjCategoryId);
        if (projCategory)
        {
            this.ProjDescription  = projCategory.Name;
            this.Name             = projCategory.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationBasket</Name>
				<Source><![CDATA[
    void initFromSalesQuotationBasket(SalesQuotationBasket salesQuotationBasket)
    {
        InventDim   inventDim = this.inventDim();

        this.SalesQuotationBasketId = salesQuotationBasket.SalesQuotationBasketId;

        this.CurrencyCode  = salesQuotationBasket.CurrencyCode;

        if (salesQuotationBasket.InventLocationId || salesQuotationBasket.InventSiteId)
        {
            inventDim.InventLocationId  = salesQuotationBasket.InventLocationId;
            inventDim.InventSiteId      = salesQuotationBasket.InventSiteId;
        }

        inventDim.initFromInventLocation(inventDim.inventLocation());
        this.InventDimId   = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        if (this.salesQuotationBasket().QuotationType == QuotationType::Project)
        {
            this.ProjTransType = QuotationProjTransType::Hour;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventTable</c> record that is related to the current item.
    /// </summary>
    /// <param name = "_itemId">The item id; optional.</param>
    /// <param name="_forUpdate">A boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A <c>InventTable</c> record; otherwise, an empty buffer.</returns>
    public InventTable inventTable(
        ItemId  _itemId = this.ItemId,
        boolean _forUpdate = false)
    {
        return InventTable::find(_itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is category based.
    /// </summary>
    /// <returns>
    /// true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDescription</Name>
				<Source><![CDATA[
    display ItemFreeTxt itemDescription(LanguageId  _languageId = CompanyInfo::languageId())
    {
        EcoResDescription   ecoResDescription;
        InventTable         inventTable;

        inventTable = InventTable::find(this.ItemId);
        ecoResDescription = inventTable.productDescription(_languageId, this.InventDimId);

        if (ecoResDescription)
        {
            return ecoResDescription;
        }

        return inventTable.defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    LineDiscCode  itemLineDisc()
    {
        return this.inventTable().salesLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    LineDiscCode  lineDisc()
    {
        return this.salesQuotationBasket().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationBasketLine,ItemId)   :
                this.initFromInventTable(InventTable::find(this.ItemId));
                if (this.ProjTransType == QuotationProjTransType::Item)
                {
                    this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                    this.setProjLineAmount();
                }
                break;

            case fieldNum(SalesQuotationBasketLine,SalesQty) :
            if ((this.ProjTransType ==QuotationProjTransType::Hour)||(this.ProjTransType ==QuotationProjTransType::Fee)||(this.ProjTransType ==QuotationProjTransType::Expense))
                this.setProjLineAmount();
                else
                SalesQuotationBasketLine::modifySalesQty(this,this.inventDim());
                break;

            case fieldNum(SalesQuotationBasketLine,SalesPrice):
            if (this.ProjTransType!=QuotationProjTransType::None)
                this.setProjLineAmount();
                break;

            case fieldNum(SalesQuotationBasketLine, TransDate):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Item :
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;

                    case QuotationProjTransType::Fee  :
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;

                    case QuotationProjTransType::Hour  :
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;

                    case QuotationProjTransType::Expense   :
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;
                }
                break;

            case fieldNum(SalesQuotationBasketLine, ProjectResource):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Fee  :
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;

                    case QuotationProjTransType::Hour  :
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;

                    case QuotationProjTransType::Expense   :
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;
                }
                break;

            case fieldNum(SalesQuotationBasketLine, ProjCategoryId):
            switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Fee  :
                        this.setProjLineProperty();
                        this.initFromProjCategoryId();
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;

                    case QuotationProjTransType::Hour  :
                        this.setProjLineProperty();
                        this.initFromProjCategoryId();
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;

                    case QuotationProjTransType::Item  :
                        this.setProjLineProperty();
                        this.initFromProjCategoryId();
                        this.setProjLineAmount();
                        break;

                    case QuotationProjTransType::Expense   :
                        this.setProjLineProperty();
                        this.initFromProjCategoryId();
                        this.setProjCostSalesPrice(this.salesQuotationBasket().ProjIdRef);
                        this.setProjLineAmount();
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    void modifyInventDim(InventDim _inventDim)
    {
        InventDim   inventDim = InventDim::findOrCreate(_inventDim);

        this.InventDimId = inventDim.InventDimId;
        if (this.ItemId)
        {
            SalesQuotationBasketLine::modifySalesQty(this,inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    CustAccount orderAccount()
    {
        return this.salesQuotationBasket().CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    PriceGroupId  priceGroupId()
    {
        return this.salesQuotationBasket().PriceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationBasket</Name>
				<Source><![CDATA[
    SalesQuotationBasket salesQuotationBasket(boolean _update = false)
    {
        return SalesQuotationBasket::find(this.SalesQuotationBasketId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAlternativeItem</Name>
				<Source><![CDATA[
    void setAlternativeItem()
    {
        SalesAlternativeItem            salesAlternativeItem;
        ItemId                          alternativeItemId;
        InventDim                       localInventDim;
        InventTable                     alternativeInventTable;
        SalesQty                        origSalesQty;
        ItemId                          origItemId;
        EcoResProductDimGroupSetup      dimSetup;

        salesAlternativeItem = SalesAlternativeItem::newAlternativeItem(this);
        if (salesAlternativeItem.existAlternativeItem())
        {
            origSalesQty = this.SalesQty;
            origItemId   = this.ItemId;
            localInventDim      = this.inventDim();

            alternativeItemId   = salesAlternativeItem.alternativeItemId();

            alternativeInventTable = InventTable::find(alternativeItemId);
            dimSetup = EcoResProductDimGroupSetup::newInventTable(alternativeInventTable);
            dimSetup.copyProductDimensions(salesAlternativeItem.alternativeProductDimension(dimSetup, localInventDim), localInventDim);

            this.InventDimId = InventDim::findOrCreate(localInventDim).InventDimId;
            this.ItemId = alternativeItemId;
            this.initFromInventTable(alternativeInventTable);
            this.SalesQty = origSalesQty;

            SalesQuotationBasketLine::modifySalesQty(this, this.inventDim());
            info(strFmt("@SYS79522",origItemId,alternativeItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasketTrandId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the basket transaction ID, which is the equivalent of an inventory transaction ID, on a regular
    /// sales line.
    /// </summary>
    void setBasketTrandId()
    {
        if (!this.BasketTransId)
        {
            ttsbegin;
            this.selectForUpdate(true);
            this.BasketTransId = this.basketTransId();
            this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceAgreement</c> method of the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record that contains the dimensions the price disc should apply for.
    /// </param>
    /// <param name="_doCallPriceDate">
    /// A Boolean value that specifies whether to use the price date or the system date for the price calculation; optional.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class defining if price and discount fields should be updated; optional.
    /// </param>
    /// <param name="_initDateFields">
    /// Indicates if the dates related to prices should be set or not; optional.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceAgreement(
        InventDim					_inventDim,
        boolean						_doCallPriceDate	= false,
        PriceDiscPolicyCheckPolicy  _checkPolicy		= null,
        boolean						_initDateFields		= true)
    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    public void setPriceDisc(InventDim inventDim)
    {
        this.setPriceAgreement(inventDim);
        this.LineAmount = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCostSalesPrice</Name>
				<Source><![CDATA[
    void setProjCostSalesPrice(ProjId   _projId = '',
                       boolean  _calcCostPrice = true) // Set to TRUE if Cost Price is calculated. FALSE will not calculate Cost Price.)
    {
        ProjId  projId  = _projId == '' ? this.salesQuotationBasket().ProjIdRef : _projId;
        ProjPriceParameters priceParams;

        switch (this.ProjTransType)
        {
            case QuotationProjTransType::Hour:
				if (_calcCostPrice)
				{
                    priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
						projId,
						this.ProjectResource,
						this.ProjCategoryId,
						this.LinePropertyId,
						this.TransDate,
						'',
						'',
						'');
                    this.CostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
				}

                priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
					projId,
                    this.ProjectResource,
                    this.ProjCategoryId,
                    this.LinePropertyId,
                    this.CostPrice,
                    this.CurrencyCode,
                    this.TransDate,
                    '',
                    '',
                    '');
                [this.SalesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, false);
                break;

            case QuotationProjTransType::Expense  :
				if (_calcCostPrice)
                {
                    priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(
						projId,
                        this.ProjectResource,
                        this.ProjCategoryId,
                        this.TransDate);
                    this.CostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
                }

                priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
					projId,
                    this.ProjectResource,
                    this.ProjCategoryId,
                    this.CostPrice,
                    CompanyInfoHelper::standardCurrency(),
                    this.CurrencyCode,
                    this.TransDate);
                [this.SalesPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
                break;

            case QuotationProjTransType::Fee      :
            [this.SalesPrice] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(
				projId,
                this.ProjectResource,
                this.ProjCategoryId,
                this.CurrencyCode,
                this.TransDate,
                '',
                false);
                break;

            case QuotationProjTransType::Item     :
                this.SalesPrice = this.calcLineAmount(this.SalesQty);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjLineAmount</Name>
				<Source><![CDATA[
    void setProjLineAmount()
    {
        switch (this.ProjTransType)
        {
            case QuotationProjTransType::Expense      :
                this.LineAmount = this.SalesQty * this.SalesPrice;
                break;

            case QuotationProjTransType::Fee          :
                this.LineAmount = this.SalesQty * this.SalesPrice;
                break;

            case QuotationProjTransType::Hour         :
                this.LineAmount = this.SalesQty * this.SalesPrice;
                break;

            case QuotationProjTransType::Item         :
                this.LineAmount = this.calcLineAmountForced();
                break;

            case QuotationProjTransType::None         :
                this.LineAmount = this.calcLineAmountForced();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjLineProperty</Name>
				<Source><![CDATA[
    void setProjLineProperty()
    {
        this.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.salesQuotationBasket().ProjIdRef,
                                                                    this.ProjCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PriceCur taxPcsPrice(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
        InventTable inventTable = InventTable::find(this.ItemId);
        InventDim   inventDim = this.inventDim();
                
        Enumerator productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDims.moveNext())
        {
            InventProductDimension productDim = productDims.current();

            ret = productDim.checkExistsValueForItem(inventTable, inventDim.(productDim.parmInventDimFieldId())) && ret;
        }

        ret = inventDim.checkDimFieldsValid(inventTable.ItemId, inventDim) && ret;

        if (this.SalesQty < 0)
        {
            ret = checkFailed(strFmt("@SYS60435", this.ItemId)) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        this.salesPurchLineInterface().resetPriceAgreement();
        this.setPriceDisc(this.inventDim());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static SalesQuotationBasketLine findRecId(RecId       recId,
                                 boolean    _forUpdate = false )
    {
        SalesQuotationBasketLine salesQuotationBasketLine;

        salesQuotationBasketLine.selectForUpdate(_forUpdate);

        select salesQuotationBasketLine
        where salesQuotationBasketLine.RecId == recId;

        return salesQuotationBasketLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifySalesQty</Name>
				<Source><![CDATA[
    static void  modifySalesQty(SalesQuotationBasketLine  _salesQuotationBasketLine,
                                   InventDim        _inventDim)
    {
        SalesQuotationLine   salesQuotationLine;

        salesQuotationLine.initFromSalesQuotationBasketLine(_salesQuotationBasketLine);
        InventMovement::setMinMaxQty(salesQuotationLine);
        if (_salesQuotationBasketLine.SalesQty < salesQuotationLine.SalesQty)
        {
            info(strFmt("@SYS77589",salesQuotationLine.SalesQty));
        }
        if (_salesQuotationBasketLine.SalesQty > salesQuotationLine.SalesQty)
        {
            info(strFmt("@SYS77590",salesQuotationLine.SalesQty));
        }
        _salesQuotationBasketLine.SalesQty = salesQuotationLine.SalesQty;
        _salesQuotationBasketLine.salesPurchLineInterface().resetPriceAgreement();
        _salesQuotationBasketLine.setPriceDisc(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>QuotationBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124587</DeveloperDocumentation>
	<Label>@SYS99186</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>SalesQuotationBasketId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SalesQuotationBasketLineIdx</ClusteredIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>SalesQuotationBasketLineIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQuotationBasketId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllFields</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQuotationBasketId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BasketTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBomId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectResource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS80304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectResource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BasketTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnCostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBomId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemRouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Markup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationProjCategory</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjectWorker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjectResource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>QuotationProjTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@SYS23884</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesQuotationBasketId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQuotationBasketId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesQuotationBasketLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesQuotationBasketId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjectResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjectResource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>PriceDiscLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesQuotationBasketId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>CostPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>Markup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Included</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBomId</Name>
					<Field>ItemBomId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationBasketLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BasketTransId</Name>
					<Field>BasketTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryCost</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationBasketLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Cost</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Expense</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryFee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryFee</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationBasketLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Revenue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Fee</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryHour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryHour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationBasketLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCategoryItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationBasketLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType_Extern</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectResource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceView</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesQuotationLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectResource</Name>
					<Field>ProjectResource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRouteId</Name>
					<Field>ItemRouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesQuotationBasket</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationBasket</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesQuotationBasketId</Name>
					<Field>SalesQuotationBasketId</Field>
					<RelatedField>SalesQuotationBasketId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesQuotationBasketIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnit</Name>
					<Field>SalesUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>