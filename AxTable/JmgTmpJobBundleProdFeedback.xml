<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTmpJobBundleProdFeedback</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgTmpJobBundleProdFeedback extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resetAllDimAndReportedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets all invent dimentions and quantities of current object.
    /// </summary>
    [Hookable(false)]
    internal void resetAllDimAndReportedQuantities()
    {
        this.WHSLicensePlate    = null;
        this.InventBatch        = null;
        this.InventSerial       = null;
        this.GoodNow            = 0;
        this.QtyError           = 0;
        this.CalcQty            = 0;
        this.PdsCWCalcQty       = 0;
        this.PdsCWGoodNow       = 0;
        this.PdsCWQtyError      = 0;
        this.ErrorSpecification = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the reported error quantity on this <c>JmgTmpJobBundleProdFeedback</c> record.
    /// </summary>
    /// <returns>
    /// the reported error quantity on this <c>JmgTmpJobBundleProdFeedback</c> record.
    /// </returns>
    public display ProdReportedError errorNow()
    {
        JmgTmpErrorSpecification errorSpec;

        errorSpec = JmgErrorSpecificationForm::decodeErrorSpecification(this.ErrorSpecification);
        select sum(QtyError) from errorSpec;
        return errorSpec.QtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWErrorNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reported catch weight error quantity on this <c>JmgTmpJobBundleProdFeedback</c> record.
    /// </summary>
    /// <returns>
    /// the reported error catch weight quantity on this <c>JmgTmpJobBundleProdFeedback</c> record.
    /// </returns>
    public display PdsCWBatchErr pdsCWErrorNow()
    {
        return JmgErrorSpecificationForm::getTotalPdsCWErrorQuantity(this.ErrorSpecification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForLastOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this feedback record is for the last operation in the production.
    /// </summary>
    /// <returns>
    /// true if this feedback record is for the last operation in the production; otherwise, false.
    /// </returns>
    public boolean isForLastOperation()
    {
        boolean         ret = true;
        ProdRoute       prodRoute;

        ret = ProdTable::find(this.JobRef).RecId != 0;

        if (ret)
        {
            prodRoute = JmgJobTable::find(this.JobId).prodRoute();
            ret = ret && prodRoute.RecId != 0 && prodRoute.isLastOpr();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLicensePlateEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///  check if license plate ID should be enabled while changing feedback.
    /// </summary>
    /// <returns>
    ///  True if license plate ID should be enabled; false otherwise.
    /// </returns>
    public boolean whsLicensePlateEnabled()
    {
        boolean ret = false;

        if (this.GoodNow > 0)
        {
            ret = this.checkWhsLicensePlateEnabledForJob();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWhsLicensePlateEnabledForJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if this production order is license plate enabled.
    /// </summary>
    /// <returns>
    ///     True if the production order is license plate enabled; otherwise false.
    /// </returns>
    public boolean checkWhsLicensePlateEnabledForJob()
    {
        boolean ret = false;

        if (this.isForLastOperation())
        {
            ProdTable prodTable = ProdTable::find(this.JobRef);
            var currentDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));

            ret = prodTable
                    && prodTable.whsEnabled()
                    && prodTable.defaultOutputLocationIsLPControlled(prodTable.ItemId, currentDate);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWhsLicensePlateEnabledForCoByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the co/by-product is warehouse and license plate enabled.
    /// </summary>
    /// <returns>
    ///     true if the co/by-product is warehouse and license plate enabled; otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean checkWhsLicensePlateEnabledForCoByProduct()
    {
        InventTable inventTable = InventTable::find(this.ItemId);
        if (this.isForLastOperation() && this.isCoByProduct() && inventTable.whsItemIsWHSControlled())
        {
            if (this.InventTransId) // Is not co/by product variation
            {
                InventDim coByInventDim = InventDim::find(PmfProdCoBy::findTransId(this.InventTransId).InventDimId);

                if (coByInventDim.wMSLocationId)
                {
                    return WMSLocation::find(coByInventDim.wMSLocationId, coByInventDim.InventLocationId).whsLocationIsLPControlled();
                }
            }

            ProdTable prodTable = ProdTable::find(this.JobRef);
            var currentDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
            return prodTable && prodTable.defaultOutputLocationIsLPControlled(this.ItemId, currentDate);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipBatchNumberValidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if validation of a batch number field should be skipped.
    /// </summary>
    /// <param name = "_itemId">
    ///     The <c>ItemId</c> of the product or batch order.
    /// </param>
    /// <returns>
    ///     True if the system should skip validation of batch number; otherwise false.
    /// </returns>
    /// <remarks>
    ///     The system should skip validation if Tracking number group is not set for a product
    ///     or if the Manual field is set to true on Tracking number group.
    /// </remarks>
    [Hookable(false)]
    internal boolean skipBatchNumberValidation(ItemId _itemId)
    {
        InventTable inventTable = InventTable::find(_itemId);

        return !inventTable.BatchNumGroupId || InventNumGroup::find(inventTable.BatchNumGroupId).ManualAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipSerialNumberValidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if validation of a serial number field should be skipped.
    /// </summary>
    /// <param name = "_itemId">
    ///     The <c>ItemId</c> of the product or batch order.
    /// </param>
    /// <returns>
    ///     True if the system should skip validation of serial number; otherwise false.
    /// </returns>
    /// <remarks>
    ///     The system should skip validation if Tracking number group is not set for a product
    ///     or if the Manual field is set to true on Tracking number group.
    /// </remarks>
    [Hookable(false)]
    internal boolean skipSerialNumberValidation(ItemId _itemId)
    {
        InventTable inventTable = InventTable::find(_itemId);

        return !inventTable.SerialNumGroupId || InventNumGroup::find(inventTable.SerialNumGroupId).ManualAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPmfCoByVarAllow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isPmfCoByVarAllow()
    {
        ProdTable prodTable = ProdTable::find(this.JobRef);

        return prodTable.PmfCoByVarAllow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCoByProduct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isCoByProduct()
    {
        return (this.ProductType == PmfProductType::By_Product
            || this.ProductType == PmfProductType::Co_Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if an operation has any BOM lines.
    /// </summary>
    /// <returns>
    /// true if the operation has any BOM lines; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean hasBom()
    {
        boolean ret;

        ProdTable prodTable = ProdTable::find(this.JobRef);
        
        if (prodTable && prodTable.BOMId)
        {
            JmgJobTable jobTable = JmgJobTable::find(this.JobId);
            ret = ProdBOM::findOprNum(prodTable.ProdId, jobTable.OprNum).RecId;
        }
            
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory unit for the item.
    /// </summary>
    /// <returns>
    /// The inventory unit for the item.
    /// </returns>
    [Hookable(false)]
    internal display UnitOfMeasureSymbol inventUnit()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCWItem</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal boolean isCWItem()
    {
        return PdsGlobal::pdsIsCWItem(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productInformation</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal display str productInformation()
    {
        if (this.isCoByProduct())
        {
            if (this.InventTransId)
            {
                PmfProdCoBy prodCoBy = PmfProdCoBy::findTransId(this.InventTransId);
                return strFmt("@SCM:TwoLinesText", InventTable::getProductNumberForItemDim(prodCoBy.ItemId, prodCoBy.inventDim()), this.JobDescription);
            }
            
            // co/by product variation
            return strFmt("@SCM:TwoLinesText", this.ItemId, this.JobDescription);
        }

        JmgJobTable jobTable = JmgJobTable::find(this.JobId);
        ProdTable prodTable = ProdTable::find(this.JobRef);
        return strFmt("@SCM:TwoLinesText", prodTable.productNumber(), jobTable.productIdentificationLabel());
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingQty</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal display ProdQty remainingQty(JmgTmpJobBundleProdFeedback _jmgTmpJobBundleProdFeedback)
    {
        JmgQtyRemaining remainingQuantity = _jmgTmpJobBundleProdFeedback.CalcQty - _jmgTmpJobBundleProdFeedback.QtyGood;
        if (JmgIncreaseRemainQtyWithErrorQtyFlight::instance().isEnabled())
        {
            JmgJobTable jobTable = JmgJobTable::find(_jmgTmpJobBundleProdFeedback.JobId);
            ProdTable prodTable = ProdTable::find(jobTable.ModuleRefId);
            if (!prodTable.prodParametersDim().IncreaseRemainQtyWithErrorQty)
            {
                remainingQuantity -= _jmgTmpJobBundleProdFeedback.QtyError;
            }
        }
        else
        {
            remainingQuantity -= _jmgTmpJobBundleProdFeedback.QtyError;
        }

        return max(0, remainingQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwRemainingQty</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal display PdsCWRemainQty cwRemainingQty(JmgTmpJobBundleProdFeedback _jmgTmpJobBundleProdFeedback)
    {
        JmgQtyRemaining remainingQuantity = _jmgTmpJobBundleProdFeedback.PdsCWCalcQty - _jmgTmpJobBundleProdFeedback.PdsCWQtyGood;
        if (JmgIncreaseRemainQtyWithErrorQtyFlight::instance().isEnabled())
        {
            JmgJobTable jobTable = JmgJobTable::find(_jmgTmpJobBundleProdFeedback.JobId);
            ProdTable prodTable = ProdTable::find(jobTable.ModuleRefId);
            if (!prodTable.prodParametersDim().IncreaseRemainQtyWithErrorQty)
            {
                remainingQuantity -= _jmgTmpJobBundleProdFeedback.PdsCWQtyError;
            }
        }
        else
        {
            remainingQuantity -= _jmgTmpJobBundleProdFeedback.PdsCWQtyError;
        }

        return max(0, remainingQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProgressPercentage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal int getProgressPercentage()
    {
        int percentage;
        if (JmgIncreaseRemainQtyWithErrorQtyFlight::instance().isEnabled())
        {
            JmgJobTable jobTable = JmgJobTable::find(this.JobId);
            ProdTable prodTable = ProdTable::find(jobTable.ModuleRefId);
            if (prodTable.prodParametersDim().IncreaseRemainQtyWithErrorQty)
            {
                percentage = decRound(this.QtyGood * 100 / max(this.CalcQty, 1), 0);

                if (this.isCWItem())
                {
                    percentage = decRound(this.PdsCWQtyGood * 100 / max(this.PdsCWCalcQty, 1), 0);
                }
            }
            else
            {
                percentage = decRound((this.QtyGood + this.QtyError) * 100 / max(this.CalcQty, 1), 0);

                if (this.isCWItem())
                {
                    percentage = decRound((this.PdsCWQtyGood + this.PdsCWQtyError) * 100 / max(this.PdsCWCalcQty, 1), 0);
                }
            }
        }
        else
        {
            percentage = decRound((this.QtyGood + this.QtyError) * 100 / max(this.CalcQty, 1), 0);

            if (this.isCWItem())
            {
                percentage = decRound((this.PdsCWQtyGood + this.PdsCWQtyError) * 100 / max(this.PdsCWCalcQty, 1), 0);
            }
        }

        return max(0, min(percentage, 100));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgRegistrationEmployees</ConfigurationKey>
	<DeveloperDocumentation>@SYS317322</DeveloperDocumentation>
	<Label>@SYS38449</Label>
	<TitleField1>JobId</TitleField1>
	<TitleField2>JobDescription</TitleField2>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfProductType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CalcQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RouteOprQtyToOpr</ExtendedDataType>
			<Label>@SYS133392</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ErrorSpecification</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgErrorSpecification</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GoodNow</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
			<Label>@SYS70922</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JmgTermRegRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobDescription</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgJobId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgJobRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>RouteJobType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWCalcQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS1569</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWGoodNow</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS1556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyError</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCWBatchErr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyGood</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsCWBatchGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdJournalIdBOM</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProdJournalIdBOM</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyError</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProdReportedError</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyGood</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProdReportedGood</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReportAsFinished</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SYS13194</Label>
			<EnumType>JmgFeedbackStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RouteOprPriority</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>RouteOprPriority</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WHSLicensePlate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventBatch</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<FeatureClass>JmgRegistrationTouchReportProgressBatchSerialNumberEnableFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSerial</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<FeatureClass>JmgRegistrationTouchReportProgressBatchSerialNumberEnableFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PickingProdJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PickingProdJournalTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgTmpJobBundleProdFeedback</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdJournalIdBOM</Name>
					<Field>ProdJournalIdBOM</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>ProdJournalType::Picklist</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WHSLicensePlate</Name>
					<SourceEDT>WHSLicensePlateId</SourceEDT>
					<Field>WHSLicensePlate</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LicensePlateIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventBatch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventBatch</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBatch</Name>
					<SourceEDT>InventBatch</SourceEDT>
					<Field>InventBatch</Field>
					<RelatedField>inventBatchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>