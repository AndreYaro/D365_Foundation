<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqIntercompanyPlanningGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqIntercompanyPlanningGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        ReqIntercompanyPlanningGroup  intercompanyGroup;
        boolean                       ret;

        ret = super();

        if (ret)
        {
            select firstOnly Name from intercompanyGroup
                where   intercompanyGroup.Name  == this.Name
                    &&  intercompanyGroup.RecId != this.RecId;
        }

        if (intercompanyGroup)
        {
            ret = checkFailed(strfmt("@SYS334931", this.Name));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>ReqIntercompanyPlanningGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID to be used for the search.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the <c>ReqIntercompanyPlanningGroup</c> table with the same ID if found,
    /// otherwise empty buffer.
    /// </returns>
    public static ReqIntercompanyPlanningGroup find(RefRecId _recId, boolean _selectForUpdate = false)
    {
        ReqIntercompanyPlanningGroup intercompanyPlanningGroup;

        if (_recid != 0)
        {
            intercompanyPlanningGroup.selectForUpdate(_selectForUpdate);
            select firstOnly intercompanyPlanningGroup where intercompanyPlanningGroup.RecId == _recId;
        }

        return intercompanyPlanningGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>ReqIntercompanyPlanningGroup</c> table.
    /// </summary>
    /// <param name="_groupName">
    /// The name of the intercompany planning group.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the <c>ReqIntercompanyPlanningGroup</c> table if found,
    /// otherwise empty buffer.
    /// </returns>
    public static ReqIntercompanyPlanningGroup findByName(ReqIntercompanyPlanningGroupName _groupName, boolean _selectForUpdate = false)
    {
        ReqIntercompanyPlanningGroup intercompanyPlanningGroup;

        if (_groupName)
        {
            intercompanyPlanningGroup.selectForUpdate(_selectForUpdate);
            select firstOnly intercompanyPlanningGroup where intercompanyPlanningGroup.Name == _groupName;
        }

        return intercompanyPlanningGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first record in the <c>ReqIntercompanyPlanningGroup</c> table.
    /// </summary>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The first record in the <c>ReqIntercompanyPlanningGroup</c> table.
    /// </returns>
    public static ReqIntercompanyPlanningGroup findFirst(boolean _selectForUpdate = false)
    {
        ReqIntercompanyPlanningGroup intercompanyPlanningGroup;

        intercompanyPlanningGroup.selectForUpdate(_selectForUpdate);
        select firstOnly intercompanyPlanningGroup;

        return intercompanyPlanningGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS334920</DeveloperDocumentation>
	<FormRef>ReqIntercompanyPlanningGroupSetup</FormRef>
	<Label>@SYS334909</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IntercompanyPlanningGroup</Name>
			<Label>@SYS334929</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqIntercompanyPlanningGroupDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqIntercompanyPlanningGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>