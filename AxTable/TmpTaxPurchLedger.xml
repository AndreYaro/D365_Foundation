<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpTaxPurchLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpTaxPurchLedger extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAmount</Name>
				<Source><![CDATA[
    /* Note that for combined fields, the signe rules are different from the tax reporting */
    void addAmount(
        TmpTaxPurchLedger       _tmpTaxPurchLedger,
        TaxReportField          _taxReportField,
        AmountMST               _amountMST,
        TaxAmount               _taxInCostPriceMST          = 0
        )
    {
        #taxReportingCodesBE;

        switch (_taxReportField)
        {
            case #field_81:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox81 += (_amountMST + _taxInCostPriceMST);
                break;

            case #field_82:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                break;

            case #field_83:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox83 += (_amountMST + _taxInCostPriceMST);
                break;

            case #field_86:
                _tmpTaxPurchLedger.TaxExemptAmountMSTBox86 += (_amountMST + _taxInCostPriceMST);
                break;

            case #field_87:
                _tmpTaxPurchLedger.TaxExemptAmountMSTBox87 += (_amountMST + _taxInCostPriceMST);
                break;

            case #field_88:
                _tmpTaxPurchLedger.TaxExemptAmountMSTBox88 += (_amountMST + _taxInCostPriceMST);
                break;

            case #field_84:
                _tmpTaxPurchLedger.CreditNoteAmountMSTBox84 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_85:
                _tmpTaxPurchLedger.CreditNoteAmountMSTBox85 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_55:
                _tmpTaxPurchLedger.TaxAmountMSTBox55 += _amountMST;
                break;

            case #field_56:
                _tmpTaxPurchLedger.TaxAmountMSTBox56 += _amountMST;
                break;

            case #field_57:
                _tmpTaxPurchLedger.TaxAmountMSTBox57 += _amountMST;
                break;

            case #field_63:
                _tmpTaxPurchLedger.TaxAmountMSTBox63 -= (_amountMST - _taxInCostPriceMST);
                break;

            case #field_59:
                _tmpTaxPurchLedger.DeductibleAmountMSTBox59 += (_amountMST - _taxInCostPriceMST);
                break;

            case #field_8184:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox81 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.CreditNoteAmountMSTBox84 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_8185:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox81 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.CreditNoteAmountMSTBox85 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_8187:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox81 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.TaxExemptAmountMSTBox87 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_8284:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.CreditNoteAmountMSTBox84 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_8387:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox83 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.TaxExemptAmountMSTBox87 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_8285:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.CreditNoteAmountMSTBox85 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_8384:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox83 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.CreditNoteAmountMSTBox84 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_8385:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox83 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.CreditNoteAmountMSTBox85 -= (_amountMST + _taxInCostPriceMST);
                break;

            case #field_8287:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.TaxExemptAmountMSTBox87 += (_amountMST + _taxInCostPriceMST);
                break;

            case #field_828785:
                _tmpTaxPurchLedger.TaxBaseAmountMSTBox82 += (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.TaxExemptAmountMSTBox87 -= (_amountMST + _taxInCostPriceMST);
                _tmpTaxPurchLedger.CreditNoteAmountMSTBox85 -= (_amountMST + _taxInCostPriceMST);
                break;

            default:
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTaxPurchLedger</Name>
				<Source><![CDATA[
    //Belgian calculation method:
    //There has to be made a difference between an invoice and a creditnote
    //An invoice must be handled in complete and not line per line as an invoice
    //can have lines with negative amounts
    //Partially deducted Vat has to be taken into account

    public TmpTaxPurchLedger createTmpTaxPurchLedger(
        TaxPeriod    _taxPeriod,
        FromDate     _fromDate,
        ToDate       _toDate
        )
    {
        GeneralJournalEntry generalJournalEntry;
        TaxTrans            taxTrans;
        VendTrans           vendTrans;
        TaxTable            taxTable;
        Voucher             oldVoucher;
        TransDate           oldTransDate;
        TmpTaxPurchLedger   tmpTaxPurchLedgerLocal;
        boolean             isInvoice;
        TaxTrans            taxTransTotal;
        AmountMST           amountInclTax;
        TaxPeriodHead       taxPeriodHead= TaxPeriodHead::find(_taxPeriod);
        TransDate           prevFromDate = _toDate, prevToDate = _fromDate;

        if (taxPeriodHead)
        {
            if (taxPeriodHead.PeriodUnit == PeriodUnit::Month && taxPeriodHead.QtyUnit == 1)
            {
                if (TaxReportExtraFieldsBE::exist(_taxPeriod, prevMth(_fromDate), endmth(prevMth(_toDate))))
                {
                    prevFromDate = prevMth(_fromDate);
                    prevToDate   = endmth(prevMth(_toDate));
                }
            }
            if (taxPeriodHead.PeriodUnit == PeriodUnit::Month && taxPeriodHead.QtyUnit == 3)
            {
                if (TaxReportExtraFieldsBE::exist(_taxPeriod, prevQtr(_fromDate), endmth(prevQtr(_toDate))))
                {
                    prevFromDate = prevQtr(_fromDate);
                    prevToDate   = endmth(prevQtr(_toDate));
                }
            }
        }
        while select sum(TaxBaseAmount), sum(TaxAmount) from taxTransTotal
            group by Voucher, TransDate, TaxDirection, TaxRepCounter
            where taxTransTotal.TaxPeriod     == _taxPeriod
               && ((taxTransTotal.TransDate   >= _fromDate
               && taxTransTotal.TransDate     <= _toDate
               && taxTransTotal.TaxRepCounter == TaxRepVersion::Original)
               || (taxTransTotal.TransDate    >= prevFromDate
               && taxTransTotal.TransDate     <= prevToDate
               && taxTransTotal.TaxRepCounter != TaxRepVersion::Original))
               && taxTransTotal.TaxOrigin     != TaxOrigin::TaxReporting
               && (taxTransTotal.TaxDirection == TaxDirection::IncomingTax
                   || taxTransTotal.TaxDirection == TaxDirection::UseTax
                   || taxTransTotal.TaxDirection == TaxDirection::TaxExemptPurchase)
        {
            if (taxTransTotal.TaxBaseAmount > 0)
            {
                isInvoice = true;
            }
            else
            {
                if (taxTransTotal.TaxBaseAmount == 0 && taxTransTotal.TaxAmount > 0)
                {
                    isInvoice = true;
                }
                else
                {
                    isInvoice = false;
                }
            }

            while select sum(TaxBaseAmount), sum(TaxAmount), sum(TaxInCostPriceMST)
                from taxTrans
                group by Voucher, TransDate, TaxCode, TaxDirection
                where taxTrans.Voucher       == taxTransTotal.Voucher
                   && taxTrans.TransDate     == taxTransTotal.TransDate
                   && taxTrans.TaxDirection  == taxTransTotal.TaxDirection
                   && taxTrans.TaxRepCounter == taxTransTotal.TaxRepCounter
            {
                amountInclTax = 0;
                tmpTaxPurchLedgerLocal.clear();
                taxTable = TaxTable::find(taxTrans.TaxCode);
                if (taxTrans.Voucher   != oldVoucher ||
                    taxTrans.TransDate != oldTransDate)
                {
                    generalJournalEntry = GeneralLedgerExtension::findByReferenceNumberAccountingDate(
                        taxTrans.Voucher,
                        taxTrans.TransDate);

                    vendTrans = VendTrans::findVoucherDate(taxTrans.Voucher,
                                                           taxTrans.TransDate);
                    if (vendTrans)
                    {
                        tmpTaxPurchLedgerLocal.VendAccount = vendTrans.AccountNum;
                        tmpTaxPurchLedgerLocal.AmountMSTInclTax = vendTrans.AmountMST;
                    }
                    oldVoucher   = taxTrans.Voucher;
                    oldTransDate = taxTrans.TransDate;
                }
                tmpTaxPurchLedgerLocal.LedgerPostingJournalId = generalJournalEntry.LedgerPostingJournal;
                tmpTaxPurchLedgerLocal.Voucher   = taxTrans.Voucher;
                tmpTaxPurchLedgerLocal.TransDate = taxTrans.TransDate;
                if (taxTrans.TaxDirection == TaxDirection::IncomingTax ) // Domestic purchase
                {
                    if (isInvoice)
                    {
                        //  In case The taxamount is partialy non-deductable then a different amount has to be passed
                        if (taxTrans.TaxInCostPriceMST)
                        {
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxIncoming,(taxTrans.TaxAmount-taxTrans.TaxInCostPriceMST)) ;
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseIncoming, (taxTrans.TaxBaseAmount + taxTrans.TaxInCostPriceMST)/*(taxTrans.taxBaseAmount + (taxTrans.TaxAmount-taxTrans.TaxInCostPriceMST))*/ );
                        }
                        else
                        {
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxIncoming, taxTrans.TaxAmount) ;
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseIncoming, taxTrans.TaxBaseAmount);
                        }
                    }
                    else // creditNote
                    {
                        //  In case the taxamount is partialy non-deductable then a different amount has to be passed
                        if (taxTrans.TaxInCostPriceMST)
                        {
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseIncomingCreditNote, (taxTrans.TaxBaseAmount + taxTrans.TaxInCostPriceMST)/*(taxTrans.taxBaseAmount+ (taxtrans.TaxAmount-taxtrans.TaxInCostPriceMST))*/);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxIncomingCreditNote, (taxTrans.TaxAmount-taxTrans.TaxInCostPriceMST));
                        }
                        else
                        {
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseIncomingCreditNote, taxTrans.TaxBaseAmount);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxIncomingCreditNote, taxTrans.TaxAmount);
                        }
                    }
                    amountInclTax += (taxTrans.TaxBaseAmount + taxTrans.TaxAmount);
                }
                if (taxTrans.TaxDirection == TaxDirection::UseTax)  // Import from EU country/region or when an import license exist
                {
                    if (isInvoice)
                    {
                        //  In case The taxamount is partialy non-deductable then a different amount has to be passed
                        if (taxTrans.TaxInCostPriceMST)
                        {
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTax, taxTrans.TaxBaseAmount + taxTrans.TaxInCostPriceMST);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTaxOffset, taxTrans.TaxBaseAmount);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTax, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTaxOffset, taxTrans.TaxAmount );
                        }
                        else
                        {
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTax, taxTrans.TaxBaseAmount);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTaxOffset, taxTrans.TaxBaseAmount );
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTax, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTaxOffset, taxTrans.TaxAmount);
                        }
                    }
                    else // creditNote
                    {
                        //  In case The taxamount is partialy non-deductable then a different amount has to be passed
                        if (taxTrans.TaxInCostPriceMST)
                        {
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTaxCreditNote, taxTrans.TaxBaseAmount + taxTrans.TaxInCostPriceMST);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTaxOffsetCreditNote, taxTrans.TaxBaseAmount);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTaxCreditNote, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTaxOffsetCreditNote, taxTrans.TaxAmount);
                        }
                        else
                        {
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTaxCreditNote, taxTrans.TaxBaseAmount);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldBaseUseTaxOffsetCreditNote, taxTrans.TaxBaseAmount);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTaxCreditNote, taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST);
                            this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldUseTaxOffsetCreditNote, taxTrans.TaxAmount);
                        }
                    }
                    amountInclTax += (taxTrans.TaxBaseAmount + taxTrans.TaxAmount);
                }
                if (taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase)  // Import
                {
                    if (isInvoice)
                    {
                        this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxFreeBuy, taxTrans.TaxBaseAmount);
                    }
                    else // creditNote
                    {
                        this.addAmount(tmpTaxPurchLedgerLocal,taxTable.RepFieldTaxFreeBuyCreditNote, taxTrans.TaxBaseAmount);
                    }
                    amountInclTax += taxTrans.TaxBaseAmount;
                }

                tmpTaxPurchLedgerLocal.InvoiceId        =  vendTrans.Invoice;
                tmpTaxPurchLedgerLocal.AmountMSTInclTax = amountInclTax;
                this.insertInTmpTaxPurchLedger(tmpTaxPurchLedgerLocal);
            }
        }

        return tmpTaxPurchLedgerLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxPurchLedger</Name>
				<Source><![CDATA[
    void insertInTmpTaxPurchLedger(TmpTaxPurchLedger _tmpTaxPurchLedger)
    {
        TmpTaxPurchLedger  tmpTaxPurchLedger;

        tmpTaxPurchLedger.linkPhysicalTableInstance(_tmpTaxPurchLedger);

        select forupdate tmpTaxPurchLedger
            where tmpTaxPurchLedger.LedgerPostingJournalId == _tmpTaxPurchLedger.LedgerPostingJournalId
               && tmpTaxPurchLedger.Voucher                == _tmpTaxPurchLedger.Voucher
               && tmpTaxPurchLedger.TransDate              == _tmpTaxPurchLedger.TransDate;

        if (tmpTaxPurchLedger)
        {
            tmpTaxPurchLedger.TaxBaseAmountMSTBox81    += _tmpTaxPurchLedger.TaxBaseAmountMSTBox81;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox82    += _tmpTaxPurchLedger.TaxBaseAmountMSTBox82;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox83    += _tmpTaxPurchLedger.TaxBaseAmountMSTBox83;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox86  += _tmpTaxPurchLedger.TaxExemptAmountMSTBox86;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox87  += _tmpTaxPurchLedger.TaxExemptAmountMSTBox87;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox88  += _tmpTaxPurchLedger.TaxExemptAmountMSTBox88;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox84 += _tmpTaxPurchLedger.CreditNoteAmountMSTBox84;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox85 += _tmpTaxPurchLedger.CreditNoteAmountMSTBox85;
            tmpTaxPurchLedger.TaxAmountMSTBox55        += _tmpTaxPurchLedger.TaxAmountMSTBox55;
            tmpTaxPurchLedger.TaxAmountMSTBox56        += _tmpTaxPurchLedger.TaxAmountMSTBox56;
            tmpTaxPurchLedger.TaxAmountMSTBox57        += _tmpTaxPurchLedger.TaxAmountMSTBox57;
            tmpTaxPurchLedger.TaxAmountMSTBox63        += _tmpTaxPurchLedger.TaxAmountMSTBox63;
            tmpTaxPurchLedger.DeductibleAmountMSTBox59 += _tmpTaxPurchLedger.DeductibleAmountMSTBox59;
            tmpTaxPurchLedger.AmountMSTInclTax         += _tmpTaxPurchLedger.AmountMSTInclTax;

            tmpTaxPurchLedger.update();
        }
        else
        {
            tmpTaxPurchLedger.LedgerPostingJournalId   = _tmpTaxPurchLedger.LedgerPostingJournalId;
            tmpTaxPurchLedger.Voucher                  = _tmpTaxPurchLedger.Voucher;
            tmpTaxPurchLedger.TransDate                = _tmpTaxPurchLedger.TransDate;
            tmpTaxPurchLedger.VendAccount              = _tmpTaxPurchLedger.VendAccount;
            tmpTaxPurchLedger.InvoiceId                = _tmpTaxPurchLedger.InvoiceId;
            tmpTaxPurchLedger.AmountMSTInclTax         = _tmpTaxPurchLedger.AmountMSTInclTax;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox81    = _tmpTaxPurchLedger.TaxBaseAmountMSTBox81;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox82    = _tmpTaxPurchLedger.TaxBaseAmountMSTBox82;
            tmpTaxPurchLedger.TaxBaseAmountMSTBox83    = _tmpTaxPurchLedger.TaxBaseAmountMSTBox83;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox86  = _tmpTaxPurchLedger.TaxExemptAmountMSTBox86;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox87  = _tmpTaxPurchLedger.TaxExemptAmountMSTBox87;
            tmpTaxPurchLedger.TaxExemptAmountMSTBox88  = _tmpTaxPurchLedger.TaxExemptAmountMSTBox88;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox84 = _tmpTaxPurchLedger.CreditNoteAmountMSTBox84;
            tmpTaxPurchLedger.CreditNoteAmountMSTBox85 = _tmpTaxPurchLedger.CreditNoteAmountMSTBox85;
            tmpTaxPurchLedger.TaxAmountMSTBox55        = _tmpTaxPurchLedger.TaxAmountMSTBox55;
            tmpTaxPurchLedger.TaxAmountMSTBox56        = _tmpTaxPurchLedger.TaxAmountMSTBox56;
            tmpTaxPurchLedger.TaxAmountMSTBox57        = _tmpTaxPurchLedger.TaxAmountMSTBox57;
            tmpTaxPurchLedger.TaxAmountMSTBox63        = _tmpTaxPurchLedger.TaxAmountMSTBox63;
            tmpTaxPurchLedger.DeductibleAmountMSTBox59 = _tmpTaxPurchLedger.DeductibleAmountMSTBox59;
            tmpTaxPurchLedger.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS86231</Label>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMSTInclTax</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS59320</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CreditNoteAmountMSTBox84</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76467</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CreditNoteAmountMSTBox85</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76466</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeductibleAmountMSTBox59</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76511</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerPostingJournalId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerPostingJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountMSTBox55</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76465</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountMSTBox56</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76141</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountMSTBox57</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76513</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountMSTBox63</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76512</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmountMSTBox81</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76470</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmountMSTBox82</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76471</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmountMSTBox83</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76472</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxExemptAmountMSTBox86</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76469</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxExemptAmountMSTBox87</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76468</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxExemptAmountMSTBox88</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS334501</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountMSTBox61</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@TaxPurchLedgerReport:TaxAmountBox61</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountMSTBox62</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@TaxPurchLedgerReport:TaxAmountBox62</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SortOrderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerPostingJournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerPostingJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerPostingJournal</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerPostingJournalId</Name>
					<SourceEDT>LedgerPostingJournalId</SourceEDT>
					<Field>LedgerPostingJournalId</Field>
					<RelatedField>LedgerPostingJournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Primarykey</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>