<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDevice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDevice extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a field in <c>RetailDevice</c> table.
    /// </summary>
    /// <param name="_fieldId">
    /// The field being modified.
    /// </param>
    /// <remarks>
    /// If the modified field is ActivationStatus then stamp the record's DateTime fields according to the new status.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case (fieldNum(RetailDevice, Type)):
                RetailDeviceTypes deviceType;
                select firstonly1 type from deviceType where deviceType.RecId == this.Type;

                if (deviceType.Type != RetailDeviceTypeBase::CloudPOS)
                {
                    this.UseInMemoryDeviceDataStorage = NoYes::No;
                }
                break;

            case (fieldNum(RetailDevice, ActivationStatus)):
                this.UpdateRecordOnActivationStatusChange();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates new device token, salt and expiration in <c>RetailDevice</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is updated into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public str generateToken()
    {
        str token = RetailData::GenerateRandomSalt();
        this.DeviceTokenSalt = RetailData::GenerateRandomSalt();

        this.DeviceTokenAlgorithm = RetailSharedParameters::find().DeviceTokenAlgorithm;

        this.DeviceTokenData = RetailData::HashData2(token, this.DeviceTokenAlgorithm, this.DeviceId, this.DeviceTokenSalt);

        this.DeviceTokenIssueTime = DateTimeUtil::utcNow();

        this.update();
        return token;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates device token in <c>RetailDevice</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is updated into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public boolean validateToken(str token)
    {
        str tokenAlgorithm = this.DeviceTokenAlgorithm;

        if (tokenAlgorithm == '')
        {
            tokenAlgorithm = RetailSharedParameters::find().DeviceTokenAlgorithm;
        }

        str tokenData =  RetailData::HashData2(token, tokenAlgorithm, this.DeviceId, this.DeviceTokenSalt);
        if (tokenData == this.DeviceTokenData)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTokenExpiration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates device token expiration in <c>RetailDevice</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is updated into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public boolean validateTokenExpiration(str token)
    {
        if ( DateTimeUtil::utcNow() <= DateTimeUtil::addDays(this.DeviceTokenIssueTime, RetailSharedParameters::find().DeviceTokenExpiration))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record in <c>RetailDevice</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is updated into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public void update()
    {
        boolean updateSelfServicePkg = (this.Terminal != this.orig().Terminal);

        ttsbegin;

        if (this.ActivationStatus != this.orig().ActivationStatus)
        {
            RetailDevice::setStatusDateTime(this);

            switch (this.ActivationStatus)
            {
                // Resets the Terminal number field if the device is set to be Disabled.
                case RetailDeviceActivationStatusBase::Disabled:
                    this.Terminal = '';
                    break;
            }
        }
        super();

        ttscommit;

        if (updateSelfServicePkg)
        {
            this.updateSelfServicePackage(this);
            this.updateDefaultSelfServiceMergedPackage(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        RetailDevice    retailDevice;

        ret = super();

        // Validate only if it is not empty.
        if (this.Terminal)
        {
            select firstOnly RecId from retailDevice
                where retailDevice.Terminal == this.Terminal &&
                retailDevice.RecId != this.RecId;

            if (retailDevice)
            {
                ret = checkFailed(strFmt("@REX4520343", this.Terminal, retailDevice.DeviceId));
            }
        }

        // Validate device ID when inserting new device or updating the device ID of existing device
        if (this.orig().RecId == 0 || this.orig().DeviceId != this.DeviceId)
        {
            TextBuffer textBuffer = new TextBuffer();
            textBuffer.setText(this.DeviceId);
            textBuffer.regularExpressions(true);
            if (!textBuffer.find('^[A-Za-z0-9_-]+$'))
            {
                ret = checkFailed(strFmt("@Retail:RetailDeviceIdValidationErrorMessage"));
            }
        }

        // validate maximum active devices
        if (this.IsActivationValidationRequired())
        {
            ret = ret && this.validateActiveDeviceCount();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record by device id.
    /// </summary>
    /// <param name="_deviceId">
    /// Device Id.
    /// </param>
    /// <param name="_forUpdate">
    /// true, if record is selected for update, false - otherwise
    /// </param>
    /// <returns>
    /// Record found.
    /// </returns>
    public static RetailDevice find(RetailDeviceId _deviceId, boolean _forUpdate = false)
    {
        RetailDevice deviceTable;

        if (_deviceId)
        {
            deviceTable.selectForUpdate(_forUpdate);

            select firstonly deviceTable
                where deviceTable.DeviceId == _deviceId;
        }

        return deviceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record by RecId.
    /// </summary>
    /// <param name="_deviceRecId">
    /// Device RecId.
    /// </param>
    /// <param name="_forUpdate">
    /// true, if record is selected for update, false - otherwise
    /// </param>
    /// <returns>
    /// Record found.
    /// </returns>
    public static RetailDevice findRecId(RecId _deviceRecId, boolean _forUpdate = false)
    {
        RetailDevice deviceTable;

        if (_deviceRecId)
        {
            deviceTable.selectForUpdate(_forUpdate);

            select firstonly deviceTable
                where deviceTable.RecId == _deviceRecId;
        }

        return deviceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Activated/Deactivated date and time based on the device status.
    /// </summary>
    /// <param name="_retailDevice">
    /// Device to be updated.
    /// </param>
    /// <remarks>
    /// If the status is:  Pending (Activated=Null, Deactivated= Min. Date), Activated (Activated=Now, Deativated=Null), Deactivated (Activated=Unchanged, Deactivated=Now)
    /// </remarks>
    public static void setStatusDateTime(RetailDevice _retailDevice)
    {
        switch (_retailDevice.ActivationStatus)
        {
            case RetailDeviceActivationStatusBase::Pending:
                _retailDevice.ActivatedDateTime = utcDateTimeNull();
                _retailDevice.DeactivatedDateTime = DateTimeUtil::minValue();
                break;

            case RetailDeviceActivationStatusBase::Activated:
                _retailDevice.ActivatedDateTime = DateTimeUtil::utcNow();
                _retailDevice.DeactivatedDateTime = utcDateTimeNull();
                break;

            case RetailDeviceActivationStatusBase::Deactivated:
                _retailDevice.DeactivatedDateTime = DateTimeUtil::utcNow();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveDeviceCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// validate the device's Activation status against the maximum.
    /// </summary>
    /// <returns>True if the current record's Activation status will not violate the maximum activated device count.</returns>
    /// <remarks>Active Device Count is only enforced when RetailEssentials configuration key is enabled.</remarks>
    public boolean validateActiveDeviceCount()
    {
        boolean valid = false;
        RetailDevice devices;
        int64 maxCount;
        int64 currentCount;

        maxCount = ProvisioningPlanLimit::getNumberOfLicenses(ProvisioningPlanLimitType::MobileDevice);
        currentCount = maxCount;

        // Count all the *other* devices.
        select count(RecId) from devices where
            devices.ActivationStatus == RetailDeviceActivationStatusBase::Activated
            && devices.RecId != this.RecId;

        currentCount = devices.RecId;

        // If the count of all the other active devices is less than the max, then this device can be activated.
        if (currentCount < maxCount)
        {
            valid = true;
        }
        else
        {
            valid =  checkFailed(strFmt('@Retail:RetailDeviceActiveDeviceCountExceeded', this.DeviceId));
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsActivationValidationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether or not the ActivationStatus of the record must be validated.
    /// </summary>
    /// <returns>true if ActivationStatus validation is required; otherwise, false.</returns>
    public boolean IsActivationValidationRequired()
    {
        return (this.ActivationStatus == RetailDeviceActivationStatusBase::Activated)
                && isConfigurationKeyEnabled(configurationKeyNum(RetailEssentials));
    }

]]></Source>
			</Method>
			<Method>
				<Name>CloudPosActivationUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a custom Cloud Pos url for the selected deviceID-terminalID combination,
    /// such that a user can directly copy-paste this url to the browser
    /// and activate a cloud pos device.
    /// </summary>
    /// <returns>Returns a custom Cloud Pos url for a given deviceID-terminalID combination.</returns>
    display str CloudPosActivationUrl()
    {
        str baseCloudPosUrl = this.CloudPOSUrl();
        if (System.String::IsNullOrWhiteSpace(baseCloudPosUrl))
        {
            return "";
        }

        System.UriBuilder urlBuilder = new System.UriBuilder(baseCloudPosUrl);
        urlBuilder.Fragment = strFmt("DeviceId=%1&TerminalId=%2", System.Web.HttpUtility::UrlEncode(this.DeviceId), System.Web.HttpUtility::UrlEncode(this.Terminal));

        System.Uri result = urlBuilder.Uri;
        return result.AbsoluteUri;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CloudPOSUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cloud POS Url for CloudPOS device.
    /// </summary>
    display RetailCloudPOSUrl CloudPOSUrl()
    {
        RetailCloudPOSUrl ret;

        if (this.Terminal)
        {
            ret = RetailChannelProfile::getRetailServerCloudPOSUrl(RetailTerminalTable::find(this.Terminal).StoreRecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateRecordOnActivationStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update record values on <c>ActiviationStatus</c> change.
    /// </summary>
    public void UpdateRecordOnActivationStatusChange()
    {
        RetailDevice::setStatusDateTime(this);

        switch (this.ActivationStatus)
        {
            case RetailDeviceActivationStatusBase::Activated:
                this.ActivationStaffId = curUserId();
                break;

            case RetailDeviceActivationStatusBase::Deactivated:
                this.DeactivationStaffId = curUserId();
                break;

            case RetailDeviceActivationStatusBase::Pending:
                if (this.orig().ActivationStatus == RetailDeviceActivationStatusBase::Activated)
                {
                    info("@Retail:DevicePendingNotification");
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new device record.
    /// </summary>
    public void insert()
    {
        super();

        this.updateSelfServicePackage(this);
        this.updateDefaultSelfServiceMergedPackage(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelfServicePackage</Name>
				<Source><![CDATA[
    private void updateSelfServicePackage(RetailDevice deviceRecord)
    {
        RetailTerminalTable terminalTable;
        RetailDefaultChannelPackages channelPackagesTable;
        RetailDeviceTypes deviceType;
        RetailSharedParameters sharedParameters;

        select * from channelPackagesTable join OfflineDatabaseProfile from terminalTable
                                            where terminalTable.terminalId == deviceRecord.Terminal
                                            && channelPackagesTable.ChannelRecId == terminalTable.StoreRecId;
        select firstonly1 * from sharedParameters;
        select firstonly1 type from deviceType where deviceType.RecId == deviceRecord.Type;

        ttsbegin;

        switch (deviceType.Type)
        {
            case RetailDeviceTypeBase::ModernPOS:
                deviceRecord.SelfServicePackage = (terminalTable.OfflineDatabaseProfile == 0)
                                                ? channelPackagesTable.DefaultModernPOSPackage
                                                : channelPackagesTable.DefaultModernPOSOfflinePackage;
                break;
            case RetailDeviceTypeBase::ModernPOSWindowsPhone:
                deviceRecord.SelfServicePackage = sharedParameters.DefaultMPOSWindowsPhonePkg;
                break;
            case RetailDeviceTypeBase::ModernPOSAndroid:
                deviceRecord.SelfServicePackage = sharedParameters.DefaultMPOSAndroidPkg;
                break;
            case RetailDeviceTypeBase::ModernPOSiOS:
                deviceRecord.SelfServicePackage = sharedParameters.DefaultMPOSiOSPkg;
                break;
        }
        deviceRecord.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultSelfServiceMergedPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the self-service merged reference package on this record to the default ones.
    /// </summary>
    /// <param name = "deviceRecord">The selected record.</param>
    private void updateDefaultSelfServiceMergedPackage(RetailDevice deviceRecord)
    {
        RetailTerminalTable terminalTable;
        RetailDeviceTypes deviceType;
        RetailSelfServiceDefaultPackages defaultPackagesTable;

        select firstonly1 type from deviceType where deviceType.RecId == deviceRecord.Type;

        ttsbegin;

        switch (deviceType.Type)
        {
            case RetailDeviceTypeBase::ModernPOS:

                select firstonly terminalTable
                    where terminalTable.terminalId == deviceRecord.Terminal;

                PackageType packageType = terminalTable.OfflineDatabaseProfile > 0 ? PackageType::ModernPosWithOffline : PackageType::ModernPosWithoutOffline;
                defaultPackagesTable = RetailSelfServiceDefaultPackages::findDefaultPackage(
                    tableNum(RetailStoreTable), packageType, terminalTable.StoreRecId);
                deviceRecord.MergedSelfServicePackageReference = defaultPackagesTable.MergedSelfServicePackageReference;

                break;
            case RetailDeviceTypeBase::ModernPOSWindowsPhone:

                defaultPackagesTable = RetailSelfServiceDefaultPackages::findDefaultPackage(
                    tableNum(RetailSelfServiceDefaultPackages), PackageType::ModernPosWindowsPhone);
                deviceRecord.MergedSelfServicePackageReference = defaultPackagesTable.MergedSelfServicePackageReference;

                break;
            case RetailDeviceTypeBase::ModernPOSAndroid:

                defaultPackagesTable = RetailSelfServiceDefaultPackages::findDefaultPackage(
                    tableNum(RetailSelfServiceDefaultPackages), PackageType::ModernPosAndroid);
                deviceRecord.MergedSelfServicePackageReference = defaultPackagesTable.MergedSelfServicePackageReference;

                break;
            case RetailDeviceTypeBase::ModernPOSiOS:

                defaultPackagesTable = RetailSelfServiceDefaultPackages::findDefaultPackage(
                    tableNum(RetailSelfServiceDefaultPackages), PackageType::ModernPosiOS);
                deviceRecord.MergedSelfServicePackageReference = defaultPackagesTable.MergedSelfServicePackageReference;

                break;
        }

        deviceRecord.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a set of provided validations on a selected field.
    /// </summary>
    /// <param name = "_fieldIdToCheck">Field to validate.</param>
    /// <returns>True: If validation successful.</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                /// Validation => Allow user to only select appropriate types of self-service package.
                /// If register associated to device has offline configured, then choose only offline based packages and vice versa.
                case fieldNum(RetailDevice, SelfServicePackage) :
                    if (this.SelfServicePackage != 0)
                    {
                        RetailTerminalTable terminalTable;
                        RetailSelfServicePackageInfo pkgInfoTable;
                        RetailDeviceTypes deviceType;

                        select firstonly1 type from deviceType where deviceType.RecId == this.Type;

                        select * from pkgInfoTable where pkgInfoTable.RecId == this.SelfServicePackage;
                        select * from terminalTable where terminalTable.terminalId == this.Terminal;

                        switch (deviceType.Type)
                        {
                            case RetailDeviceTypeBase::ModernPOS:
                                if (!System.String::IsNullOrWhiteSpace(this.Terminal))
                                {
                                    if ((terminalTable.OfflineDatabaseProfile == 0) && (pkgInfoTable.PackageType != PackageType::ModernPosWithoutOffline))
                                    {
                                        ret = Global::checkFailed(strFmt("@Retail:InvalidPackageTypeSelected", enum2Str(PackageType::ModernPosWithoutOffline)));
                                    }
                                    else if ((terminalTable.OfflineDatabaseProfile != 0) && (pkgInfoTable.PackageType != PackageType::ModernPosWithOffline))
                                    {
                                        ret = Global::checkFailed(strFmt("@Retail:InvalidPackageTypeSelected", enum2Str(PackageType::ModernPosWithOffline)));
                                    }
                                }
                                break;
                            case RetailDeviceTypeBase::ModernPOSWindowsPhone:
                                if (pkgInfoTable.PackageType != PackageType::ModernPosWindowsPhone)
                                {
                                    ret = Global::checkFailed(strFmt("@Retail:InvalidPackageTypeSelected", enum2Str(PackageType::ModernPosWindowsPhone)));
                                }
                                break;
                            case RetailDeviceTypeBase::ModernPOSAndroid:
                                if (pkgInfoTable.PackageType != PackageType::ModernPOSAndroid)
                                {
                                    ret = Global::checkFailed(strFmt("@Retail:InvalidPackageTypeSelected", enum2Str(PackageType::ModernPOSAndroid)));
                                }
                                break;
                            case RetailDeviceTypeBase::ModernPOSiOS:
                                if (pkgInfoTable.PackageType != PackageType::ModernPOSiOS)
                                {
                                    ret = Global::checkFailed(strFmt("@Retail:InvalidPackageTypeSelected", enum2Str(PackageType::ModernPOSiOS)));
                                }
                                break;
                        }
                    }

                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computePackageTypeFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compute the expected <c>PackageType</c> filter value.
    /// </summary>
    /// <returns>The expecetd <c>PackageType</c>.</returns>
    public PackageType computePackageTypeFilter()
    {
        PackageType result;

        // Check if offline is configured for device
        if (this.TableId == tableNum(RetailDevice))
        {
            RetailTerminalTable terminalTable;
            RetailDeviceTypes deviceType;
            select firstonly1 type from deviceType where deviceType.RecId == this.Type;

            switch (deviceType.Type)
            {
                case RetailDeviceTypeBase::ModernPOS:
                        if (!System.String::IsNullOrWhiteSpace(this.Terminal))
                    {
                        select firstonly1 OfflineDatabaseProfile from terminalTable where terminalTable.terminalId == this.Terminal;
                        result = (terminalTable.OfflineDatabaseProfile != 0)
                                            ? PackageType::ModernPosWithOffline
                                            : PackageType::ModernPosWithoutOffline;
                    }
                    else
                    {
                        result = PackageType::AllModernPOS;
                    }
                    break;
                case RetailDeviceTypeBase::ModernPOSWindowsPhone:
                    result = PackageType::ModernPosWindowsPhone;
                    break;
                case RetailDeviceTypeBase::ModernPOSAndroid:
                    result = PackageType::ModernPosAndroid;
                    break;
                case RetailDeviceTypeBase::ModernPOSiOS:
                    result = PackageType::ModernPosiOS;
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetNextDeviceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next available device identifier.
    /// </summary>
    /// <returns>
    /// The next available device identifier.
    /// </returns>
    public static RetailDeviceId GetNextDeviceId()
    {
        RetailDeviceId newDeviceId = '';
        NumberSeq  numberSeq;

        numberSeq = NumberSeq::newGetNum(RetailParameters::numRefDeviceId());
        newDeviceId = numberSeq.num();
        numberSeq.used();

        return newDeviceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSymbolForValidationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the symbols associated with value.
    /// </summary>
    /// <returns>Container containing image reference.</returns>
    public display container getSymbolForValidationStatus()
    {
        ImageReference  imageReference;
        container       imageContainer;

        switch (this.ActivationValidationStatus)
        {
            case RetailDeviceValidationStatus::Failed:
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Error);
                break;

            case RetailDeviceValidationStatus::Passed:
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::FieldCorrect);
                break;

            case RetailDeviceValidationStatus::NotRun:
                break;
        }

        if (imageReference)
        {
            imageContainer = imageReference.pack();
        }

        return imageContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX3</DeveloperDocumentation>
	<FormRef>RetailDevices</FormRef>
	<Label>@REX20</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>DeviceId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>BrickAndMortarStore</Modules>
	<ReplacementKey>DeviceIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeviceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeviceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeviceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Terminal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeviceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeploymentList</Name>
			<Label>@REX4160096</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Terminal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeviceActivation</Name>
			<Label>@REX1608</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivatedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationStaffId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeactivatedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeactivationStaffId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationValidationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationValidationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationValidationStaffId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowMassActivation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeviceConfigure</Name>
			<Label>@REX21</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeviceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Terminal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysicalDeviceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActivatedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDeviceActivationDateTime</ExtendedDataType>
			<Label>@REX1604</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivationStaffId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
			<Label>@Retail:RetailDeviceTableActivatedStaffId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ActivationStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDeviceActivationStatus</ExtendedDataType>
			<EnumType>RetailDeviceActivationStatusBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeactivateComments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDeviceDeactivateComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DeactivatedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDeviceActivationDateTime</ExtendedDataType>
			<Label>@REX1606</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeactivationStaffId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
			<Label>@Retail:RetailDeviceTableDeactivatedStaffId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDeviceDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeviceId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDeviceId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Terminal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDeviceTypeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhysicalDeviceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPhysicalDeviceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeviceTokenData</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<StringSize>128</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeviceTokenSalt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<StringSize>128</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DeviceTokenIssueTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActivationValidationDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Retail:RetailDeviceTableActivationValidationDateTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivationValidationStaffId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RetailStaffId</ExtendedDataType>
			<Label>@Retail:RetailDeviceTableActivationValidationStaffId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ActivationValidationStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Retail:RetailDeviceTableActivationValidationStatus</Label>
			<EnumType>RetailDeviceValidationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseInMemoryDeviceDataStorage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Retail:RetailDeviceTableUseInMemoryDeviceDataStorage</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrentVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrentVersion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SelfServicePackage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS4007365</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeviceTokenAlgorithm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DeviceTokenAlgorithmName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ActivationGuid</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>RetailCDXBackwardCompatibility</ConfigurationKey>
			<ExtendedDataType>RetailDeviceActivationGUID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowMassActivation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAllowMassActivation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MergedSelfServicePackageReference</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@RetailSelfServiceInstaller:MergedPackageReference</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DeviceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DeviceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TerminalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Terminal</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailDeviceType</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>RetailDeviceTypes</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Type</Name>
					<SourceEDT>RetailDeviceTypeRecId</SourceEDT>
					<Field>Type</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTerminal</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Terminal</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>Terminal</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>terminalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStaffId_Activated</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>hcmworker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivationStaffId</Name>
					<SourceEDT>HcmPersonnelNumberId</SourceEDT>
					<Field>ActivationStaffId</Field>
					<RelatedField>PersonnelNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>HcmWorker_AK2</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStaffId_Deactivated</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>hcmworker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeactivationStaffId</Name>
					<SourceEDT>HcmPersonnelNumberId</SourceEDT>
					<Field>DeactivationStaffId</Field>
					<RelatedField>PersonnelNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>HcmWorker_AK2</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailSelfServicePackageInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailSelfServicePackageInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SelfServicePackage</Name>
					<Field>SelfServicePackage</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStaffId_ActivationValidation</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>hcmworker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivationValidationStaffId</Name>
					<SourceEDT>HcmPersonnelNumberId</SourceEDT>
					<Field>ActivationValidationStaffId</Field>
					<RelatedField>PersonnelNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>HcmWorker_AK2</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailSelfServiceMergedPackages</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailSelfServiceMergedPackages</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MergedSelfServicePackageReference</Name>
					<Field>MergedSelfServicePackageReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>