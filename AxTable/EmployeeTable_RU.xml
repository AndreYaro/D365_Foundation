<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmployeeTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EmployeeTable_RU extends common
{
    /// <summary>
    ///   Deletes record
    /// </summary>
    /// <exception cref="Exception::Error">
    ///   Throws exception if record is used for as ledger dimension attribute value
    /// </exception>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.EmployeeId));
        }

        super();

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIdentityCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns string representation of an Identity Card
    /// </summary>
    /// <returns>
    ///  IdentityCardNumberSeries_RU
    /// </returns>
    display IdentityCardNumberSeries_RU displayIdentityCard()
    {
        const str blank = ' ';
        if (this.fieldAccessRight(fieldStr(EmployeeTable_RU, IdentityCardNumber)) == AccessRight::NoAccess
         || this.fieldAccessRight(fieldStr(EmployeeTable_RU, IdentityCardSeries)) == AccessRight::NoAccess)
        {
            return '';
        }

        return this.IdentityCardNumber ?
               this.IdentityCardSeries + blank + strFmt("@GLS111009", this.IdentityCardNumber) :
               this.IdentityCardSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Name of the employee
    /// </summary>
    /// <returns>
    ///  <c>HcmWorkerName</c>
    /// </returns>
    display HcmWorkerName employeeName()
    {
        return HcmWorker::find(HcmEmployment::find(this.HcmEmployment).Worker).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns a container with advance holder last documents data
    /// </summary>
    /// <returns>
    /// A container with advance holder last documents data
    /// </returns>
    public container employeeStatistics()
    {
        EmplTrans_RU    emplTrans;
        EmplAdvTable_RU emplAdvTable;
        container       ret;

        //selecting last advance report transaction
        select firstonly reverse TransDate, AmountMST from emplAdvTable
            order by TransDate desc
            where emplAdvTable.EmplAccount == this.EmployeeId &&
                  emplAdvTable.Status      == EmplAdvStatus_RU::Posted;

        ret += [emplAdvTable.TransDate, emplAdvTable.AmountMST];

        //selecting payment issue transaction
        select firstonly reverse TransDate, AmountMST from emplTrans
            order by TransDate desc
            where emplTrans.EmplAccount == this.EmployeeId &&
                  emplTrans.AmountMST   > 0                &&
                  emplTrans.AdvanceId   == '';

        ret += [emplTrans.TransDate, emplTrans.AmountMST];

        //selecting payment receipt transaction
        select firstonly reverse TransDate, AmountMST from emplTrans
            order by TransDate desc
            where emplTrans.EmplAccount == this.EmployeeId &&
                  emplTrans.AmountMST   < 0                &&
                  emplTrans.AdvanceId   == '';

        ret += [emplTrans.TransDate, emplTrans.AmountMST];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>identityCardFull</Name>
				<Source><![CDATA[
    /// <summary>
    ///   String description of document
    /// </summary>
    /// <returns>
    ///  <c>PayeeDocument_RU</c>
    /// </returns>
    display PayeeDocument_RU identityCardFull()
    {
        const str blank = ' ';
        PayeeDocument_RU ret = IdentityCardTable_RU::find(this.IdentityCard).IdentityCardNameFull;

        ret = strLwr(subStr(ret, 1, 1)) + subStr(ret, 2, strLen(ret)) + blank + this.displayIdentityCard();

        if (! this.IdentityCardIssueDate && ! this.IdentityCardIssueBy)
        {
            return ret;
        }

        ret += "@GLS104861" +
               (this.IdentityCardIssueDate ?
                blank + strFmt("@GLS106745", this.IdentityCardIssueDate) :
                '') + blank +
               this.IdentityCardIssueBy;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromHRMPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from person details table record.
    /// </summary>
    /// <param name="_personTable">
    /// The person details table record.
    /// </param>
    public void initFromHRMPerson(RHRMPersonTable _personTable)
    {
        if (!this.IdentityCard)
        {
            this.IdentityCard          = _personTable.IdentityCard;
            this.IdentityCardIssueBy   = _personTable.IdentityCardIssueBy;
            this.IdentityCardIssueDate = _personTable.IdentityCardIssueDate;
            this.IdentityCardNumber    = _personTable.IdentityCardNumber;
            this.IdentityCardSeries    = _personTable.IdentityCardSeries;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Handles mofdification if the field value
    /// </summary>
    /// <param name="_fieldName">
    ///   name of the field
    /// </param>
    /// <param name="_arrayIndex">
    ///   array index
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        if (_fieldName == fieldStr(EmployeeTable_RU, IdentityCard))
        {
            this.IdentityCardNumber    = '';
            this.IdentityCardSeries    = '';
            this.IdentityCardIssueDate = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayNotWorkerWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if employee is not a worker and shows a warning.
    /// </summary>
    /// <param name="_transDate">
    /// The effective date for check.
    /// </param>
    public void rPayNotWorkerWarning(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        boolean     warn;
        RPayHistory rPayHistory;

        if (this.RPayCheck)
        {
            warn = !RHRMEmplTable::exist(this.EmployeeId);

            if (!warn)
            {
                select firstonly OperationType, RecId from rPayHistory
                    order by StartDate desc, TransTime desc
                    where rPayHistory.Number    == this.EmployeeId &&
                          rPayHistory.StartDate <= _transDate;

                if (!rPayHistory.RecId || rPayHistory.operationType == RHRMJournalType::Dismiss)
                {
                    warn = true;
                }
            }

            if (warn)
            {
                warning(strFmt("@RUP6161", this.EmployeeId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>titleFields1</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns a string containing title fields
    /// </summary>
    /// <returns>
    ///   A string containing title fields
    /// </returns>
    /// <remarks>
    /// original title fields cannot be used because employee name stored in linked table
    /// </remarks>
    display public Description255 titleFields1()
    {
        return strFmt("%1 : %2", this.EmployeeId, this.worker().name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates record
    /// </summary>
    public void update()
    {
        EmployeeTable_RU originalEmployee = this.orig();

        boolean isSyncRequired = this.EmployeeId != originalEmployee.EmployeeId;
        DimensionValueRenameV2 rename;
        if (isSyncRequired)
        {
            rename = DimensionValueRenameV2::construct(this, originalEmployee);
            rename.syncRenamedValuePreSuper();
        }

        super();

        if (isSyncRequired)
        {
            rename.syncRenamedValuePostSuper();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Check field value
    /// </summary>
    /// <param name="_fieldName">
    ///  Name of the field
    /// </param>
    /// <param name="_arrayIndex">
    ///  Array index
    /// </param>
    /// <returns>
    ///   true if ok
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(EmployeeTable_RU, IdentityCardNumber):
                    ret = IdentityCardEngine_RU::newFromEmployeeTable(this).checkNumber();
                    break;

                case fieldStr(EmployeeTable_RU, IdentityCardSeries):
                    ret = IdentityCardEngine_RU::newFromEmployeeTable(this).checkSeries();
                    break;

                case fieldStr(EmployeeTable_RU, IdentityCardIssueDate):
                    ret = IdentityCardEngine_RU::newFromEmployeeTable(this).checkIssueDate();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret && this.IdentityCard)
        {
            ret = IdentityCardEngine_RU::checkEmployeeTable(this);
        }

        // <RUP>
        if (this.RPayCheck &&
            this.RPayCheck != this.orig().RPayCheck)
        {
            this.rPayNotWorkerWarning();
        }
        // </RUP>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns Worker from employment of the currnet table
    /// </summary>
    /// <returns>
    /// <c>HcmWorker</c>
    /// </returns>
    public HcmWorker worker()
    {
        return HcmWorker::find(HcmEmployment::find(this.HcmEmployment).Worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record Id exists in <c>HcmWorkerAffiliationAdvHolder_RU</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The record Id value.
    /// </param>
    /// <returns>
    /// true if the record Id exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(EmployeeTableRecId_RU _recId)
    {
        boolean ret = true;

        if (!EmployeeTable_RU::exist(_recId))
        {
            ret = checkFailed(strFmt("@SYS329226", tableId2name(tableNum(EmployeeTable_RU))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record Id exists in <c>EmployeeTable_RU</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record Id value.
    /// </param>
    /// <returns>
    /// true if the record Id exists; otherwise, false.
    /// </returns>
    public static boolean exist(EmployeeTableRecId_RU _recId)
    {
        return _recId && (select firstonly RecId from employeeTable_RU
                    where employeeTable_RU.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EmployeeTable_RU</c> table based on a record Id value.
    /// </summary>
    /// <param name="_recId">
    /// The record Id value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>EmployeeTable_RU</c> table.
    /// </returns>
    public static EmployeeTable_RU find(
        EmployeeTableRecId_RU   _recId,
        boolean                 _forUpdate          = false,
        ConcurrencyModel        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        EmployeeTable_RU    employeeTable;

        employeeTable.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            employeeTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly employeeTable
            where employeeTable.RecId == _recId;

        return employeeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByEmployeeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds recoed by ID
    /// </summary>
    /// <param name="_employeeId">
    ///  ID of employee
    /// </param>
    /// <param name="_forUpdate">
    ///  select for update
    /// </param>
    /// <param name="_concurrencyModel">
    ///   ConcurrencyModel
    /// </param>
    /// <returns>
    ///   record found
    /// </returns>
    static public EmployeeTable_RU findByEmployeeId(
        EmployeeId_RU    _employeeId,
        boolean          _forUpdate          = false,
        ConcurrencyModel _concurrencyModel   = ConcurrencyModel::Auto)
    {
        EmployeeTable_RU    employeeTable;

        employeeTable.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            employeeTable.concurrencyModel(_concurrencyModel);
        }

        select employeeTable
            where employeeTable.EmployeeId == _employeeId;

        return employeeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByEmployment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>EmployeeTable_RU</c> table based on supplied value of the <c>Employment</c> field.
    /// </summary>
    /// <param name="_employment">
    /// The value of the <c>Employment</c> field to find.
    /// </param>
    /// <param name="_employeeId">
    /// The value of the <c>EmployeeId</c> field to find.
    /// </param>
    /// <param name="_dataAreaId">
    /// Id of data area where employee to look for; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// Returns either an empty buffer or one or more records from the <c>EmployeeTable_RU</c> table, see remarks.
    /// </returns>
    /// <remarks>
    /// Values for <c>_validFrom</c> and <c>_validTo</c> limit the table selection in the following way.
    /// <list type="number">
    /// <item>
    /// <description>If no values are supplied for both the parameters they default to now. Therefore, the method searches for only active records and returns either an empty or a valid record.</description>
    /// </item>
    /// <item>
    /// <description>If only the first parameter value is supplied the second parameter defaults to the first one.
    /// The method searches for active records as of the supplied datetime value and returns either an empty or a valid record.</description>
    /// </item>
    /// <item>
    /// <description>If both parameters are supplied with values, the method searches for records whose <c>validFrom</c> and <c>ValidTo</c> values fall in that interval. The method may return multiple records.</description>
    /// </item>
    /// </list>
    /// </remarks>
    public static EmployeeTable_RU findByEmployment(
        HcmEmploymentRecId _employment,
        EmployeeId_RU      _employeeId = '',
        SelectableDataArea _dataAreaId = curext(),
        boolean            _forUpdate  = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        EmployeeTable_RU employeeTable;

        employeeTable.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            employeeTable.concurrencyModel(_concurrencyModel);
        }

        if (_employment)
        {
            changecompany(_dataAreaId)
            {
                if (_employeeId)
                {
                    select firstonly employeeTable
                        where employeeTable.HcmEmployment == _employment &&
                              employeeTable.EmployeeId == _employeeId;
                }
                else
                {
                    select firstonly employeeTable
                        where employeeTable.HcmEmployment == _employment;
                }
            }
        }

        return employeeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Processes vie details for Employee Table
    /// </summary>
    /// <param name="_form">
    ///    Form
    /// </param>
    /// <param name="_employeeId_RU">
    ///   Id of employee
    /// </param>
    public static void jumpRef(FormRun          _form,
                               EmployeeId_RU    _employeeId_RU)
    {
        Args args = new Args();

        args.caller(_form);
        args.lookupRecord(EmployeeTable_RU::findByEmployeeId(_employeeId_RU));
        new MenuFunction(menuitemDisplayStr(HcmWorkerAdvHolderTable_RU), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAdvHolder</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Perform lookup for advance holder
    /// </summary>
    /// <param name="_formControl">
    ///   Control used for lookup
    /// </param>
    /// <param name="_companyId">
    ///   Company
    /// </param>
    /// <exception cref="Exception::Error">
    ///   Throws exception if unknown control class used
    /// </exception>
    public static void lookupAdvHolder(
        FormControl         _formControl,
        CompanyId           _companyId = curext())
    {
        SegmentedEntryControl segmentedEntryControl;
        FormStringControl   formStringControl;
        Args        args;
        CompanyId   companyId;
        FormRun     formRun;

        // The following block is needed for the case that intercompany transactions is disabled and someone passes
        // in an empty string. Ideally one would remove the "curext()" defaulting from the paramter list, but this
        // code was added as part of a bug fix, and did not have the scope or need of changing the interface.
        if (!_companyId)
        {
            companyId = curext();
        }
        else
        {
            companyId = _companyId;
            if (! xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666", companyId));
            }
        }

        changecompany(companyId)
        {
            args = new Args();
            args.name(formStr(HcmAdvHolderLookup_RU));
            args.caller(_formControl);
            args.lookupField(fieldNum(EmployeeTable_RU, EmployeeId));
            if (_formControl is FormStringControl)
            {
                formStringControl = _formControl as FormStringControl;
                args.lookupValue(formStringControl.text());
            }
            else if (_formControl is SegmentedEntryControl)
            {
                segmentedEntryControl = _formControl as SegmentedEntryControl;
                args.lookupValue(segmentedEntryControl.valueStr());
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
            formRun = classfactory.formRunClass(args);
            formRun.init();

            #ISOCountryRegionCodes

            boolean lookupAdvanceHoldersOnly = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

            if (lookupAdvanceHoldersOnly)
            {
                EmployeeTable_RU::updateAdvHolderFormLookupQuery(formRun);
            }

            if (_formControl is FormStringControl)
            {
                formStringControl = _formControl as FormStringControl;
                formStringControl.performFormLookup(formRun);
            }
            else if (_formControl is SegmentedEntryControl)
            {
                segmentedEntryControl = _formControl as SegmentedEntryControl;
                segmentedEntryControl.performFormLookup(formRun);
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryPositionTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title of the primary position of the worker if one exists.
    /// </summary>
    /// <param name="_employeeId">
    /// ID of employee
    /// </param>
    /// <returns>
    /// Primary position title
    /// </returns>
    static public str primaryPositionTitle(EmployeeId_RU _employeeId)
    {
        RecId recId = EmployeeTable_RU::findByEmployeeId(_employeeId).worker().RecId;
        str title;
        if (recId)
        {
            title = HcmPosition::find(HcmWorkerHelper::getPrimaryPosition(recId)).title();
        }
        return title;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayNotWorkerWarningStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if employee is not a worker and shows a warning, static method.
    /// </summary>
    /// <param name="employeeId">
    /// The employee id.
    /// </param>
    /// <param name="_transDate">
    /// The effective date for check.
    /// </param>
    public static void rPayNotWorkerWarningStatic(EmployeeId_RU employeeId, TransDate _transDate)
    {
        EmployeeTable_RU employeeTable;

        if (isConfigurationkeyEnabled(configurationkeynum(RPayroll)))
        {
            employeeTable = EmployeeTable_RU::findByEmployeeId(employeeId);
            if (employeeTable)
            {
                employeeTable.rPayNotWorkerWarning(_transDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS94719";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvHolderFormLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds condition for employee query to be advance holder
    /// </summary>
    /// <param name="_form">
    ///   Form
    /// </param>
    static public void updateAdvHolderFormLookupQuery(FormRun _form)
    {
        FormDataSource          formDataSource;
        QueryBuildDataSource    queryDataSource;

        if (! _form)
            return;

        formDataSource  = _form.objectSet();
        if (! formDataSource)
            return;

        queryDataSource = formDataSource.query().dataSourceTable(tableNum(EmployeeTable_RU));
        if (queryDataSource)
        {
            findOrCreateRange_W(queryDataSource, fieldNum(EmployeeTable_RU, AdvHolder), SysQuery::value(NoYes::Yes));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>HRMAdministration</ConfigurationKey>
	<CountryRegionCodes>CZ,EE,HU,LT,LV,PL,RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4082029</DeveloperDocumentation>
	<FormRef>HcmWorkerAdvHolderTable_RU</FormRef>
	<Label>@SYS4705</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>EmployeeId</TitleField1>
	<TitleField2>AdvHolder</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Expense</Modules>
	<ReplacementKey>EmployeeTable_RU_AK1</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmployeeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvHolder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmployeeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvHolder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmEmployment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employeeName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmployeeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmEmployment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AdvHolder</Name>
			<Label>@GLS103488</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdvHolder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LvPaymTransCodes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPayCheck</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmployeeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmEmployment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentityDocument</Name>
			<Label>@GLS105933</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IdentityCard</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IdentityCardSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IdentityCardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IdentityCardIssueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IdentityCardIssueBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkTypeId_RU</Name>
			<Label>@GLS113950</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdvHolder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS100699</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmployeeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EmployeeId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmEmployment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HcmEmploymentRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IdentityCard</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>IdentityCardRecId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IdentityCardIssueBy</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>IdentityCardIssueBy_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IdentityCardIssueDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL,RU</CountryRegionCodes>
			<ExtendedDataType>BaseDate</ExtendedDataType>
			<Label>@GLS106251</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IdentityCardNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>IdentityCardNumber_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IdentityCardSeries</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>IdentityCardSeries_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LvPaymTransCodes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymTransCodeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RPayCheck</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>RPayroll</ConfigurationKey>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@RUP6162</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmWorkerGroupRecId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkTypeId_W</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmployeeTable_RU_AK1</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EmployeeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HcmEmployment</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EmployeeTable_RU_AK2</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EmployeeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmEmploymentIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HcmEmployment</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerGroup_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IdentityCardTable_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IdentityCard</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkTypeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmEmployment_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmEmployment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmEmployment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EmployeeTable_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmEmployment</Name>
					<Field>HcmEmployment</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorkerGroup_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorkerGroup_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorkerGroup_RU</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EmployeeTable_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerGroup</Name>
					<Field>WorkerGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IdentityCardTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IdentityCardTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IdentityCardTable_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EmployeeTable_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IdentityCard</Name>
					<Field>IdentityCard</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LvPaymTransCodes</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LvPaymTransCodes</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LvPaymTransCodes</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EmployeeTable_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LvPaymTransCodes</Name>
					<Field>LvPaymTransCodes</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkTypeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WorkTypeTable_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkTypeTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkTypeTable_EmployeeTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkTypeId</Name>
					<Field>WorkTypeId</Field>
					<RelatedField>WorkTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WorkTypeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>