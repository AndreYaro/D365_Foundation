<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchEncumbranceSummary</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchEncumbranceSummary extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>remainingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and returns remaining amount for <c>PurchEncumbranceSummary</c> table record.
    /// </summary>
    /// <returns>
    ///     Returns the remaining amount
    /// </returns>
    display AmountCur remainingAmount()
    {
        //Make sure the user has access to all the fields
        if (!hasFieldAccess(tableNum(PurchEncumbranceSummary), fieldNum(PurchEncumbranceSummary, EncumberedAmount), AccessType::View) ||
            !hasFieldAccess(tableNum(PurchEncumbranceSummary), fieldNum(PurchEncumbranceSummary, RelievedAmount), AccessType::View) )
        {
            throw error("@SYS57330");
        }

        this.recordLevelSecurity(true);

        return  this.EncumberedAmount - this.RelievedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if a record exists with the given RecId in the <c>PurchEncumbranceSummary</c> table; if not, an error message
    ///    is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record Id of the <c>PurchEncumbranceSummary</c> table record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!PurchEncumbranceSummary::exist(_recId))
        {
            ret = checkFailed(strFmt(PurchEncumbranceSummary::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a record for the given purchase order and sets the currency code, if it does not exists.
    ///     If a record already exists then returns it.
    /// </summary>
    /// <param name="_purchId">
    ///     Purchase order id
    /// </param>
    /// <param name="_currencyCode">
    ///     Currency code to set for the new record
    /// </param>
    /// <returns>
    ///     <c>PurchEncumbranceSummary</c> record for the purchase order
    /// </returns>
    public static PurchEncumbranceSummary createRecord(PurchId _purchId, VendCurrencyCode _currencyCode)
    {
        PurchEncumbranceSummary purchEncumbranceSummary = PurchEncumbranceSummary::findByPurchId(_purchId);

        if (!purchEncumbranceSummary)
        {
            purchEncumbranceSummary.PurchId = _purchId;
            purchEncumbranceSummary.CurrencyCode = _currencyCode;
            purchEncumbranceSummary.IsValid = false;
            purchEncumbranceSummary.insert();
        }

        return purchEncumbranceSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record with the specified RecId exists in the <c>PurchEncumbranceSummary</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record Id of the <c>PurchEncumbranceSummary</c> table record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     purchEncumbranceSummary
                 where
                     purchEncumbranceSummary.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PurchEncumbranceSummary</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record Id of the record to find in the <c>PurchEncumbranceSummary</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that indicates to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>PurchEncumbranceSummary</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static PurchEncumbranceSummary find(
        recId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto
    )
    {
        PurchEncumbranceSummary  purchEncumbranceSummary;

        if (_recId)
        {
            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                purchEncumbranceSummary.concurrencyModel(_concurrencyModel);
            }

            purchEncumbranceSummary.selectForUpdate(_forUpdate);

            select firstonly purchEncumbranceSummary
                where purchEncumbranceSummary.RecId == _recId;
        }

        return purchEncumbranceSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record for purchase order in the <c>PurchEncumbranceSummary</c> table.
    /// </summary>
    /// <param name="_purchId">
    ///    The PurchId of purchase order for which to find the <c>PurchEncumbranceSummary</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that indicates to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>PurchEncumbranceSummary</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static PurchEncumbranceSummary findByPurchId(
        PurchIdBase         _purchId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto
    )
    {
        PurchEncumbranceSummary  purchEncumbranceSummary;

        if (_purchId)
        {
            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                purchEncumbranceSummary.concurrencyModel(_concurrencyModel);
            }

            purchEncumbranceSummary.selectForUpdate(_forUpdate);

            select firstonly purchEncumbranceSummary
                where purchEncumbranceSummary.PurchId == _purchId;
        }

        return purchEncumbranceSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the error message to be displayed when a record in the <c>PurchEncumbranceSummary</c> table does not exists.
    /// </summary>
    /// <returns>
    ///     The error message to be displayed when a record doesn't exist in <c>PurchEncumbranceSummary</c> table
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS1684</DeveloperDocumentation>
	<Label>@SPS1685</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>PurchId</TitleField1>
	<TitleField2>EncumberedAmount</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EncumberedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastCalculatedOn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelievedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EncumbranceSummary</Name>
			<Label>@SPS1685</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EncumberedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastCalculatedOn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelievedAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EncumberedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS318656</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsValid</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastCalculatedOn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<Label>@SPS1689</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RelievedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<HelpText>@SYS318665</HelpText>
			<Label>@SYS318657</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>