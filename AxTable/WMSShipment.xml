<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSShipment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WMSShipment extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the shipment.
    /// </summary>
    /// <param name="_updateShipmentStatus">
    /// true if the shipment status is also updated; otherwise, false.
    /// </param>
    public void activate(boolean _updateShipmentStatus)
    {
        if (this.PickExpeditionStatus == WMSExpeditionStatus::None || this.PickExpeditionStatus == WMSExpeditionStatus::Registered)
        {
            this.activatePick(false);
        }

        if (_updateShipmentStatus)
        {
            this.setStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activatePick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the related picking routes as activated.
    /// </summary>
    /// <param name="_updateShipmentStatus">
    /// true if the shipment status should be updated; otherwise, false.
    /// </param>
    public void activatePick(boolean _updateShipmentStatus = true)
    {
        WMSPickingRoute     wmsPickingRoute;

        while select forupdate wmsPickingRoute
            where wmsPickingRoute.ShipmentId        == this.ShipmentId
               && wmsPickingRoute.ExpeditionStatus  == WMSExpeditionStatus::Registered
        {
            wmsPickingRoute.activate(false);
        }

        if (_updateShipmentStatus)
        {
            this.setStatus(NoYes::Yes, NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAutoAdd</Name>
				<Source><![CDATA[
    public boolean canAutoAdd()
    {
        if (this.AutoAddStop == WMSAutoAddStop::NoAddition)
        {
            return false;
        }

        switch (this.Status)
        {
            //start with the lowest and fall through
            case WMSShipmentStatus::Registered  :
                if (this.AutoAddStop  == WMSAutoAddStop::Registered)
                {
                    return true;
                }
            //fall through
            case WMSShipmentStatus::Reserved    :
                if (this.AutoAddStop == WMSAutoAddStop::Reserved)
                {
                    return true;
                }
            //fall through
            case WMSShipmentStatus::Activated   :
                if (this.AutoAddStop == WMSAutoAddStop::Activated)
                {
                    return true;
                }
            //fall through
            case WMSShipmentStatus::Picked      :
                if (this.AutoAddStop == WMSAutoAddStop::Picked)
                {
                    return true;
                }
            //fall through
            case WMSShipmentStatus::Staged      :
                if (this.AutoAddStop == WMSAutoAddStop::Staged)
                {
                    return true;
                }
            //fall through
            case WMSShipmentStatus::Loaded      :
                if (this.AutoAddStop == WMSAutoAddStop::Loaded)
                {
                    return true;
                }
                break;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDirectlyInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the sales order can be directly invoiced.
    /// </summary>
    /// <returns>
    /// true if the sales order can be directly invoiced; otherwise, false.
    /// </returns>
    public boolean canBeDirectlyInvoiced()
    {
        WMSOrderTrans   wmsOrderTrans;

        if (!this.hasSalesOrderOnly())
        {
            return false;
        }

        //Go through each of the contained sales orders and check if it can be directly invoiced
        while select InventTransRefId from wmsOrderTrans
            group by InventTransRefId
            where wmsOrderTrans.ShipmentId      == this.ShipmentId
               && wmsOrderTrans.InventTransType == InventTransType::Sales
        {
            if (!SalesTable::find(wmsOrderTrans.InventTransRefId).canBeDirectlyInvoiced())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this shipment can be shipped.
    /// </summary>
    /// <returns>true if the shipment can be shipped; otherwise, false.</returns>
    public boolean canBeShipped()
    {
        switch (this.Status)
        {
            case WMSShipmentStatus::Shipped:
                if (this.orig().Status != WMSShipmentStatus::Shipped)
                {
                    return true;
                }
                break;
            case WMSShipmentStatus::Loaded :
            case WMSShipmentStatus::Staged :
            case WMSShipmentStatus::Picked :
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeUnreserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a <c>WMSShipment</c> record can be unreserved.
    /// </summary>
    /// <returns>
    ///     true if the <c>WMSShipment</c> record can be unreserved; otherwise, false.
    /// </returns>
    public boolean canBeUnreserved()
    {
        if ((this.Status                    == WMSShipmentStatus::Registered
         ||  this.Status                    == WMSShipmentStatus::Reserved
         ||  this.Status                    == WMSShipmentStatus::Activated)
         && ((this.PickExpeditionStatus     == WMSExpeditionStatus::Registered
         ||   this.PickExpeditionStatus     == WMSExpeditionStatus::Activated)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a <c>WMSShipment</c> record can be safely deleted.
    /// </summary>
    /// <returns>
    ///     true if the <c>WMSShipment</c> record can be deleted; otherwise, false.
    /// </returns>
    public boolean canBeDeleted()
    {
        return this.Status == WMSShipmentStatus::Registered
                 || this.Status == WMSShipmentStatus::Shipped
                 || this.Status == WMSShipmentStatus::Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFindOrCreatePickingRoute</Name>
				<Source><![CDATA[
    public boolean canFindOrCreatePickingRoute(
        ItemId              _itemId,
        InventLocationId    _inventLocationId)
    {
        if (this.ShipmentType == WMSShipmentType::OrderPick)
        {
            return true;
        }

        if (!InventTable::find(_itemId).inventItemType().mustInventBeControlled())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPhysicalUpdSalesOrder</Name>
				<Source><![CDATA[
    public boolean canPhysicalUpdSalesOrder()
    {
        WMSOrderTrans       wmsOrderTrans;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        if (this.Status != WMSShipmentStatus::Shipped)
        {
            return false;
        }

        select firstonly RecId from wmsOrderTrans
            where wmsOrderTrans.ShipmentId              == this.ShipmentId
               && wmsOrderTrans.InventTransType         == InventTransType::Sales
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId   == wmsOrderTrans.InventTransId
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       && inventTrans.StatusIssue       == StatusIssue::Picked
                       && inventTrans.StatusReceipt     == StatusReceipt::None
                       && inventTrans.PickingRouteID    == wmsOrderTrans.RouteId;

        return (wmsOrderTrans.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPhysicalUpdTransferOrder</Name>
				<Source><![CDATA[
    public boolean canPhysicalUpdTransferOrder()
    {
        WMSOrderTrans       wmsOrderTrans;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        if (this.Status != WMSShipmentStatus::Shipped)
        {
            return false;
        }

        select firstonly RecId from wmsOrderTrans
            where wmsOrderTrans.ShipmentId              == this.ShipmentId
               && wmsOrderTrans.InventTransType         == InventTransType::TransferOrderShip
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId   == wmsOrderTrans.InventTransId
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       && inventTrans.StatusIssue       == StatusIssue::Picked
                       && inventTrans.StatusReceipt     == StatusReceipt::None
                       && inventTrans.PickingRouteID    == wmsOrderTrans.RouteId;

        return (wmsOrderTrans.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipFromStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a <c>WMSShipment</c> record can be shipped.
    /// </summary>
    /// <returns>
    ///     true if the <c>WMSShipment</c> record can be shipped; otherwise, false.
    /// </returns>
    public boolean canShipFromStatus()
    {
        return this.Status == WMSShipmentStatus::Picked
                || this.Status == WMSShipmentStatus::Staged
                || this.Status == WMSShipmentStatus::Loaded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeOutputLocation</Name>
				<Source><![CDATA[
    public void changeOutputLocation(WMSLocationId _wmsLocationId)
    {
        WMSLocation     toLocation = WMSLocation::find(_wmsLocationId, this.InventLocationId);
        WMSOrderTrans   wmsOrderTrans;

        ttsbegin;

        while select forupdate wmsOrderTrans
            where wmsOrderTrans.ShipmentId       == this.ShipmentId
              && (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered
              ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Activated)
        {
            wmsOrderTrans.changeToLocation(toLocation);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPackingSlipExists</Name>
				<Source><![CDATA[
    public boolean  custPackingSlipExists()
    {
        WMSOrderTrans           wmsOrderTrans;
        CustPackingSlipTrans    custPackingSlipTrans;

        select firstonly RecId from wmsOrderTrans
            where wmsOrderTrans.ShipmentId      == this.ShipmentId
               && wmsOrderTrans.InventTransType == InventTransType::Sales
            exists join custPackingSlipTrans
                where custPackingSlipTrans.InventTransId == wmsOrderTrans.InventTransId;

        if (wmsOrderTrans.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _deleteRoutes = true)
    {
        ttsbegin;
        WMSShipmentDelete::deleteShipment(this.ShipmentId, _deleteRoutes);
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreatePickingRoute</Name>
				<Source><![CDATA[
    public WMSPickingRoute findOrCreatePickingRoute(
        WMSOrderTrans       _wmsOrderTrans,
        str                 _pickingAreaId,
        Volume              _volume,
        TimeOfDay           _time)
    {
        WMSPickingRoute                 wmsPickingRoute;
        InventLocation                  inventLocation = _wmsOrderTrans.inventLocation();
        WMSCustomer                     customer;
        LogisticsPostalAddressRecId     deliveryPostalAddress;
        InventTransType                 transType;
        InventTransRefId                transRef;

        switch (this.PackingType)
        {
            case WMSPackingType::All:
                customer = '';
                transType = InventTransType::WMSOrder;
                transRef = '';
                break;
            case WMSPackingType::Customer:
                customer                = _wmsOrderTrans.Customer;
                transType               = InventTransType::WMSOrder;
                deliveryPostalAddress   = _wmsOrderTrans.DeliveryPostalAddress;
                transRef = '';
                break;
            case WMSPackingType::Order:
                customer    = _wmsOrderTrans.Customer;
                transType   = _wmsOrderTrans.InventTransType;
                transRef    = _wmsOrderTrans.InventTransRefId;
                break;
        }
        
        select firstonly forupdate wmsPickingRoute
            where wmsPickingRoute.ShipmentId                == this.ShipmentId
               && wmsPickingRoute.InventLocationId          == inventLocation.InventLocationId
               && wmsPickingRoute.Customer                  == customer
               && wmsPickingRoute.DeliveryPostalAddress     == deliveryPostalAddress
               && wmsPickingRoute.TransType                 == transType
               && wmsPickingRoute.TransRefId                == transRef               
            && (wmsPickingRoute.ExpeditionStatus == WMSExpeditionStatus::None
               || wmsPickingRoute.ExpeditionStatus  == WMSExpeditionStatus::Registered
               || wmsPickingRoute.ExpeditionStatus  == WMSExpeditionStatus::Activated);
        if (wmsPickingRoute.RecId)
        {
            return wmsPickingRoute;
        }        

        wmsPickingRoute = WMSPickingRoute::create( this.ShipmentId,
                                        _pickingAreaId,
                                        inventLocation.InventLocationId,
                                        customer,
                                        transType,
                                        transRef,
                                        deliveryPostalAddress,
                                        NoYes::No);

        this.updateSiteWarehouseFromPickingRoute();

        return wmsPickingRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSiteWarehouseFromPickingRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the warehouse and site of the shipment based on the related picking route.
    /// </summary>
    public void updateSiteWarehouseFromPickingRoute()
    {
        if (!this.inventLocationId)
        {
            WMSPickingRoute wmsPickingRoute;
            select firstonly wmsPickingRoute
                where wmsPickingRoute.shipmentId == this.shipmentId;

            this.inventLocationId   = wmsPickingRoute.inventLocationId;
            this.InventSiteId       = InventLocation::find(this.inventLocationId).InventSiteId;

            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderSpecificButtonInfo</Name>
				<Source><![CDATA[
    public container getOrderSpecificButtonInfo(
        boolean _alreadyFoundSales,
        boolean _alreadyFoundTransfer,
        boolean _alreadyFoundCanPhysicalUpdSales,
        boolean _alreadyFoundCanPhysicalUpdTransfer,
        boolean _alreadyAllCanBeDirectlyInvoiced,
        boolean _alreadyAllPackedAndNotInvoiced,
        boolean _alreadyAllHasBeenInvoiced)
    {
        container   results;

        // These should be executed in the order listed to match the order defined by the pos??? methods.
        results = conIns(results, WMSShipment::posHasSalesOrder(),              _alreadyFoundSales || this.hasSalesOrder());
        results = conIns(results, WMSShipment::posHasTransferOrder(),           _alreadyFoundTransfer || this.hasTransferOrder());
        results = conIns(results, WMSShipment::posCanPhysicalUpdSalesOrder(),   _alreadyFoundCanPhysicalUpdSales || this.isPhysicalUpdated() || this.canPhysicalUpdSalesOrder());
        results = conIns(results, WMSShipment::posCanPhysicalUpdTransferOrder(),_alreadyFoundCanPhysicalUpdTransfer || this.canPhysicalUpdTransferOrder());
        results = conIns(results, WMSShipment::posAllCanBeDirectlyInvoiced(),   _alreadyAllCanBeDirectlyInvoiced && this.canBeDirectlyInvoiced());
        results = conIns(results, WMSShipment::posAllPackedAndNotInvoiced(),    _alreadyAllPackedAndNotInvoiced
                                                                                    && ShipCarrierShipmentPackingSlip::hasBeenDirectlyPackingSlipUpdated(this.ShipmentId)
                                                                                    && !ShipCarrierShipmentInvoice::hasBeenDirectlyInvoiced(this.ShipmentId));
        results = conIns(results, WMSShipment::posAllHasBeenInvoiced(),         _alreadyAllHasBeenInvoiced && ShipCarrierShipmentInvoice::hasBeenDirectlyInvoiced(this.ShipmentId));

        return results;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestedShipDateFromLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the minimum requested ship date from the shipments lines.
    /// </summary>
    /// <returns>
    /// The minimum requested ship date from the shipments lines.
    /// </returns>
    public WMSRequestedShipDate getRequestedShipDateFromLines()
    {
        WMSOrderTrans   wmsOrderTrans;

        select minof(DlvDate) from wmsOrderTrans
            where wmsOrderTrans.ShipmentId          == this.ShipmentId
            &&    wmsOrderTrans.ExpeditionStatus    != WMSExpeditionStatus::Cancelled;

        return wmsOrderTrans.DlvDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesNotInRoutes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether there are <c>wmsOrderTrans</c> records related to this shipment that are not on
    ///    routes or transports.
    /// </summary>
    /// <returns>
    ///    true if there are <c>wmsOrderTrans</c> records related to this shipment that are not on routes or
    ///    transports; otherwise, false.
    /// </returns>
    public boolean hasLinesNotInRoutes()
    {
        return (select firstonly RecId from wmsOrderTrans where wmsOrderTrans.ShipmentId == this.ShipmentId && !wmsOrderTrans.RouteId).RecId !=0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMultipleSalesOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the shipment contains delivery for multiple sales orders.
    /// </summary>
    /// <returns>
    ///    true if the shipment contains delivery for multiple sales orders; otherwise, false.
    /// </returns>
    public boolean hasMultipleSalesOrders()
    {
        WMSOrderTrans   wmsOrderTrans;
        boolean         isFirst = true;

        // A select count(RecId) does not work with the group by condition,
        // using a while select and returning once the desired count is achieved
        while select InventTransRefId from wmsOrderTrans
            group by InventTransRefId
            where wmsOrderTrans.ShipmentId       == this.ShipmentId
               && wmsOrderTrans.InventTransType  == InventTransType::Sales
        {
            if (!isFirst)
            {
                return true;
            }

            isFirst = false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSalesOrder</Name>
				<Source><![CDATA[
    public boolean hasSalesOrder()
    {
        return (select firstonly RecId from wmsOrderTrans
            where wmsOrderTrans.ShipmentId         == this.ShipmentId &&
                  wmsOrderTrans.InventTransType    == InventTransType::Sales).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSalesOrderOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the shipment contains sales order types only.
    /// </summary>
    /// <returns>
    /// true if the shipment contains sales order types only; otherwise, false.
    /// </returns>
    public boolean hasSalesOrderOnly()
    {
        boolean ret;

        ret = (select firstonly RecId from wmsOrderTrans
            where wmsOrderTrans.ShipmentId      == this.ShipmentId
               && wmsOrderTrans.InventTransType != InventTransType::Sales).RecId == 0;

        if (ret)
        {
            ret = this.hasSalesOrder();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransferOrder</Name>
				<Source><![CDATA[
    public boolean hasTransferOrder()
    {
        return (select firstonly RecId from wmsOrderTrans
            where wmsOrderTrans.ShipmentId         == this.ShipmentId &&
                  wmsOrderTrans.InventTransType    == InventTransType::TransferOrderShip).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTemplate</Name>
				<Source><![CDATA[
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public void initFromTemplate(WMSShipmentTemplate _wmsShipmentTemplate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets default officials for <c>WMSShipment</c> record.
    /// </summary>
    public void initOfficials_RU()
    {
        OfficialsServ_RU  officialsServ;

        if (! this || ! OfficialsServ_RU::isFeatureEnabled() || this.OffSessionId_RU)
        {
            return;
        }

        officialsServ = new OfficialsServ_RU();
        officialsServ.initWMSShipment(this);

        this.selectForUpdate(true);
        this.OffSessionId_RU = officialsServ.newId();
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTypeOrderPick</Name>
				<Source><![CDATA[
    /*
        Used to initialize WMSShipment for shipment type Order pick
    */
    public void initTypeOrderPick(boolean _drawNumber = true)
    {
        if (_drawNumber)
        {
            this.ShipmentId             = WMSShipment::numberSeq().num();
        }
        this.PackingType            = WMSPackingType::Order;
        this.AutoAddStop            = WMSAutoAddStop::NoAddition;
        this.Name                   = '';
        this.Status                 = WMSShipmentStatus::Registered;
        this.ShipmentType           = WMSShipmentType::OrderPick;
        this.RequireAllReserved     = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.PackingType = WMSPackingType::Customer;
        this.RequireAllReserved = NoYes::Yes;
        this.ShipmentType   = WMSShipmentType::OrderPick;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record into the <c>WMSShipment</c> table.
    /// </summary>
    public void insert()
    {
        //<GEERU>
        this.TransportInvoiceType_RU = SalesParameters::find().TransportInvoiceType_RU;
        //</GEERU>
        this.setRequestedShipDate();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPhysicalUpdated</Name>
				<Source><![CDATA[
    public NoYes isPhysicalUpdated()
    {
        return (this.Status == WMSShipmentStatus::Picked ||
                this.Status == WMSShipmentStatus::Staged ||
                this.Status == WMSShipmentStatus::Loaded ||
                this.Status == WMSShipmentStatus::Shipped);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatusOkForAddition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the shipment status allows for the addition of WMS orders to this shipment.
    /// </summary>
    /// <returns>
    /// true if a user can add <c>WMSOrders</c> to the shipment; otherwise, false.
    /// </returns>
    public boolean isStatusOkForAddition()
    {
        return (this.Status != WMSShipmentStatus::Shipped && this.Status != WMSShipmentStatus::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the shipment is editable.
    /// </summary>
    /// <returns>
    /// true if the shipment is editable; otherwise, false.
    /// </returns>
    public boolean isEditable()
    {
        return this.Status == WMSShipmentStatus::Activated ||
                this.Status == WMSShipmentStatus::Canceled ||
                this.Status == WMSShipmentStatus::Loaded ||
                this.Status == WMSShipmentStatus::Picked ||
                this.Status == WMSShipmentStatus::Registered ||
                this.Status == WMSShipmentStatus::Reserved ||
                this.Status == WMSShipmentStatus::Staged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldStatusBeUpdatedOnAddingWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the shipment status should be updated when adding a <c>WMSOrder</c> to the shipment.
    /// </summary>
    /// <returns>
    /// true if the shipment status should be updated when adding a <c>WMSOrder</c> to the shipment; otherwise, false.
    /// </returns>
    public boolean shouldStatusBeUpdatedOnAddingWMSOrder()
    {
        return this.Status != WMSShipmentStatus::Registered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the lowest <c>WMSExpeditionStatus</c> of the <c>wmsOrderTrans</c> related to this shipment.
    /// </summary>
    /// <returns>
    ///    The lowest <c>WMSExpeditionStatus</c> of related <c>WMSOrderTrans</c>.
    /// </returns>
    /// <remarks>
    ///    This method only returns status. To determine whether everything on the shipment is reserved, use
    ///    the <c>isAllReserved</c> method.
    /// </remarks>
    public WMSExpeditionStatus lowestLineStatus()
    {
        return ((select minof(ExpeditionStatus) from wmsOrderTrans where wmsOrderTrans.ShipmentId == this.ShipmentId).ExpeditionStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WMSShipment, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                this.updatePackedQuery();
                break;

            case fieldNum(WMSShipment, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
            // <GEERU>
            case fieldNum(WMSShipment, Driver_RU):
                if (this.CarrierType_RU == CarrierType_W::InvoiceAccount)
                {
                    this.DriverName_RU = HcmWorker::findByPersonnelNumber(this.Driver_RU).name();
                }
                else
                {
                    this.DriverName_RU = ContactPerson::find(this.Driver_RU).personName();
                }
                break;
            case fieldNum(WMSShipment, CarrierType_RU):
                this.CarrierCode_RU = '';
                this.Driver_RU = '';
                this.DriverName_RU = '';
                break;
            case fieldNum(WMSShipment, CarrierCode_RU):
                this.Driver_RU = '';
                this.DriverName_RU = '';
                break;
            case fieldNum(WMSShipment, TransportationPayerType_RU):
                this.TransportationPayer_RU = '';
                break;
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyOfLineChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates various fields in the shipment that depends on the shipment lines.
    /// </summary>
    /// <param name="_updatePickStatus">
    /// A <c>NoYes</c> enumeration value that indicates whether the pick expedition state is updated.
    /// </param>
    /// <param name="_updatePalletStatus">
    /// A <c>NoYes</c> enumeration value that indicates whether the pallet expedition status is updated.
    /// </param>
    /// <param name="_updateRequestedShipDate">
    /// A <c>NoYes</c> enumeration value that indicates whether the requested ship date is updated.
    /// </param>
    public void notifyOfLineChange(
        NoYes                   _updatePickStatus           = NoYes::Yes,
        NoYes                   _updatePalletStatus         = NoYes::Yes,
        NoYes                   _updateRequestedShipDate    = NoYes::No)
    {
        if (_updateRequestedShipDate)
        {
            this.setRequestedShipDate();
        }
        //we expect that this call will do the update()
        this.setStatus(_updatePickStatus,_updatePalletStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalUpdateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current shipment is ready to or has already been physically updated.
    /// </summary>
    /// <returns>
    ///    The status of the physical update process.
    /// </returns>
    display WMSPhysicalUpdateStatus physicalUpdateStatus()
    {
        WMSPhysicalUpdateStatus     physicalUpdateStatus;
        WMSOrderTrans               wmsOrderTrans;
        InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;

        if (this.Status == WMSShipmentStatus::Canceled)
        {
            return WMSPhysicalUpdateStatus::None;
        }

        if (this.PickExpeditionStatus == WMSExpeditionStatus::None)
        {
            return WMSPhysicalUpdateStatus::None;
        }

        if (this.Status != WMSShipmentStatus::Shipped)
        {
            return WMSPhysicalUpdateStatus::Waiting;
        }

        select firstonly RecId from wmsOrderTrans
            where wmsOrderTrans.ShipmentId              == this.ShipmentId
               && wmsOrderTrans.ExpeditionStatus        != WMSExpeditionStatus::Cancelled
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId   == wmsOrderTrans.InventTransId
                exists join inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                       && inventTrans.StatusIssue           == StatusIssue::Picked
                       && inventTrans.StatusReceipt         == StatusReceipt::None
                       && inventTrans.PickingRouteID        == wmsOrderTrans.RouteId;

        physicalUpdateStatus = (wmsOrderTrans.RecId == 0) ? WMSPhysicalUpdateStatus::Completed : WMSPhysicalUpdateStatus::Ready;

        return physicalUpdateStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public SysQueryRun queryRun()
    {
        SysQueryRun     queryRun;

        if (!this.PackedQuery)
        {
            this.PackedQuery = WMSShipmentTemplate::initialQuery(this.InventLocationId);
        }

        queryRun    = new SysQueryRun(new Query(this.PackedQuery));
        queryRun.saveUserSetup(false);
        queryRun.userUpdate(this.Status == WMSShipmentStatus::Registered);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserve</Name>
				<Source><![CDATA[
    public void reserve(boolean _showInfo = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendASN</Name>
				<Source><![CDATA[
    void sendASN()
    {
        WMSOrderTrans           wmsOrderTrans;
        CustPackingSlipJour     custPackingSlipJour;
        CustPackingSlipTrans    custPackingSlipTrans;
        boolean                 asnSend;

        ttsbegin;
        asnSend = false;
        while select wmsOrderTrans
            where wmsOrderTrans.ShipmentId      == this.ShipmentId
               && wmsOrderTrans.InventTransType == InventTransType::Sales
            join custPackingSlipTrans
                group by SalesId, PackingSlipId, DeliveryDate
                where custPackingSlipTrans.InventTransId == wmsOrderTrans.InventTransId
        {
            custPackingSlipJour = custPackingSlipTrans.custPackingslipJour();

            if (custPackingSlipJour)
            {
                if (!custPackingSlipJour.canXMLBeSent())
                {
                    warning (strFmt("@SYS99014", custPackingSlipJour.PackingSlipId, this.ShipmentId));
                }
            }
        }
        if (!asnSend)
        {
            warning (strFmt("@SYS99015", this.ShipmentId));
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPickExpeditionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the pick expedition status if needed.
    /// </summary>
    private void setPickExpeditionStatus()
    {
        WMSPickingRoute wmsPickingRoute;
        NumberOfRecords registered;
        NumberOfRecords activated;
        NumberOfRecords started;
        NumberOfRecords complete;

        while select count(RecId) from wmsPickingRoute
            group by ExpeditionStatus
            where wmsPickingRoute.ShipmentId == this.ShipmentId
        {
            switch (wmsPickingRoute.ExpeditionStatus)
            {
                case WMSExpeditionStatus::Registered:
                    registered = wmsPickingRoute.RecId;
                    break;
                case WMSExpeditionStatus::Activated:
                    activated = wmsPickingRoute.RecId;
                    break;
                case WMSExpeditionStatus::Started:
                    started = wmsPickingRoute.RecId;
                    break;
                case WMSExpeditionStatus::Complete:
                    complete = wmsPickingRoute.RecId;
                    break;
            }
        }

        if (registered > 0)
        {
            this.PickExpeditionStatus = WMSExpeditionStatus::Registered;
        }
        else if (activated > 0)
        {
            this.PickExpeditionStatus = WMSExpeditionStatus::Activated;
        }
        else if (started > 0)
        {
            this.PickExpeditionStatus = WMSExpeditionStatus::Started;
        }
        else if (complete > 0)
        {
            this.PickExpeditionStatus = WMSExpeditionStatus::Complete;
        }
        else
        {
            this.PickExpeditionStatus = WMSExpeditionStatus::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestedShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the requested ship date based on the shipment lines.
    /// </summary>
    private void setRequestedShipDate()
    {
        this.RequestedShipDate = this.getRequestedShipDateFromLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipmentStatusDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for setting the shipment status.
    /// </summary>
    /// <param name="_wmsShipment">
    /// The <c>WMSShipment</c> record that called this delegate.
    /// </param>
    /// <param name="_wmsExpeditionStatus">
    /// A <c>WMSExpeditionStatus</c> enum value used to determine the shipment status.
    /// </param>
    delegate void setShipmentStatusDelegate(WMSShipment _wmsShipment, WMSExpeditionStatus _wmsExpeditionStatus)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the shipment status if needed.
    /// </summary>
    private void setShipmentStatus()
    {
        WMSExpeditionStatus wmsExpeditionStatus = this.lowestLineStatus();
        switch (wmsExpeditionStatus)
        {
            case WMSExpeditionStatus::None          :
                this.Status = WMSShipmentStatus::Registered;
                break;
            case WMSExpeditionStatus::Registered    :
                this.Status = (this.hasLinesNotInRoutes() ? WMSShipmentStatus::Registered : WMSShipmentStatus::Reserved);
                break;
            case WMSExpeditionStatus::Activated     :   //fall through
            case WMSExpeditionStatus::Started       :
                this.Status = WMSShipmentStatus::Activated;
                break;
            case WMSExpeditionStatus::Picked        :
                this.Status = WMSShipmentStatus::Picked;
                break;
            case WMSExpeditionStatus::Staged        :
                this.Status = WMSShipmentStatus::Staged;
                break;
            case WMSExpeditionStatus::Loaded        :
                this.Status = WMSShipmentStatus::Loaded;
                break;
            case WMSExpeditionStatus::Cancelled     :
                this.Status = WMSShipmentStatus::Canceled;
                break;
            case WMSExpeditionStatus::Complete      :
                this.Status = WMSShipmentStatus::Shipped;
                break;
        }
        this.setShipmentStatusDelegate(this, wmsExpeditionStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the various status fields on the shipment if needed.
    /// </summary>
    /// <param name="_pick">
    /// If NoYes::Yes is passed the pick expedition status is updated if needed.
    /// </param>
    /// <param name="_pallets">
    /// Ignored, WMSII functionality is obsolete.
    /// </param>
    public void setStatus(
        NoYes                   _pick       = NoYes::Yes,
        NoYes                   _pallets    = NoYes::No)
    {
        if (_pick)
        {
            this.setPickExpeditionStatus();
        }

        this.setShipmentStatus();

        //If the shipment was shipped and we change the status then the bill of lading is no longer valid and needs to be deleted.
        if (this.orig().status == WMSShipmentStatus::Shipped &&
            this.status != WMSShipmentStatus::Shipped)
        {
            WMSBillOfLading::deleteForShipment(this);
        }

        if (this.canBeShipped())
        {
            setPrefix(strFmt("@SYS50560", this.ShipmentId));
            this.ship(false);
        }
        else
        {
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ship</Name>
				<Source><![CDATA[
    public void ship(NoYes _generateBillOfLading = NoYes::No)
    {
        WMSOrderTrans       wmsOrderTrans;
        boolean             hasLinesOkForShip;

        ttsbegin;

        while select wmsOrderTrans
            where wmsOrderTrans.ShipmentId          == this.ShipmentId
            &&    wmsOrderTrans.ExpeditionStatus    != WMSExpeditionStatus::Cancelled
        {
            if (!wmsOrderTrans.isPhysicalUpdated())
            {
                throw(error(strFmt("@SYS50561", wmsOrderTrans.RouteId)));
            }

            hasLinesOkForShip = true;
        }

        if (!hasLinesOkForShip)
        {
            throw error(strFmt("@SYS110941",this.ShipmentId));
        }

        update_recordset wmsOrderTrans
            setting ExpeditionStatus = WMSExpeditionStatus::Complete
            where wmsOrderTrans.ShipmentId          == this.ShipmentId
               && wmsOrderTrans.ExpeditionStatus    != WMSExpeditionStatus::Cancelled
               && wmsOrderTrans.ExpeditionStatus    != WMSExpeditionStatus::Complete;

        this.Status         = WMSShipmentStatus::Shipped;
        this.ShippingDateTime = DateTimeUtil::getSystemDateTime();
        this.update();

        if (_generateBillOfLading)
        {
            WMSBillOfLading::constructFromShipment(this);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackedQuery</Name>
				<Source><![CDATA[
    private void updatePackedQuery()
    {
        if (!this.PackedQuery)
        {
            return;
        }

        this.PackedQuery = conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the shipment can be safely deleted.
    /// </summary>
    /// <returns>
    /// true, if the shipment can be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A shipment that has been sent can be deleted together with the lines, even though completed lines normally cannot be.
    /// </remarks>
    public boolean validateDelete()
    {
        boolean ret;
        WMSOrderTrans wmsOrderTrans;

        ret = super();

        if (!this.canBeDeleted())
        {
            ret = checkFailed(strFmt("@SYS125599", this.ShipmentId));
        }

        if (ret)
        {
            select firstOnly wmsOrderTrans
                 order by expeditionStatus desc
                 where wmsOrderTrans.ShipmentId == this.ShipmentId
                    && wmsOrderTrans.expeditionStatus != WMSExpeditionStatus::Cancelled
                    && wmsOrderTrans.expeditionStatus != WMSExpeditionStatus::Complete;

            if (wmsOrderTrans.RecId)
            {
                ret = wmsOrderTrans.validateDelete();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean         ret;
        WMSOrderTrans   wmsOrderTrans;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WMSShipment, InventLocationId):
                ret = this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                break;

            case fieldNum(WMSShipment, InventSiteId):
                if (this.InventSiteId != this.orig().InventSiteId && ((select firstonly RecId from wmsOrderTrans where wmsOrderTrans.ShipmentId == this.ShipmentId).RecId != 0))
                {
                    ret = checkFailed("@SYS110311");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.OutputPort && !this.wmsLocation())
        {
            ret = checkFailed(strFmt("@SYS53781", this.OutputPort, this.InventLocationId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocation</Name>
				<Source><![CDATA[
    public WMSLocation wmsLocation(boolean _update = false)
    {
        return WMSLocation::find(this.OutputPort, this.InventLocationId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(WMSShipmentId  _wmsShipmentId)
    {
        return _wmsShipmentId && (select firstonly wmsShipment
                    where wmsShipment.ShipmentId  == _wmsShipmentId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WMSShipment find(
        WMSShipmentId   _wmsShipmentId,
        boolean         _update = false)
    {
        WMSShipment  wmsShipment;

        wmsShipment.selectForUpdate(_update);

        if (_wmsShipmentId)
        {
            select firstonly wmsShipment
                where wmsShipment.ShipmentId == _wmsShipmentId;
        }

        return wmsShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicedCustInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the shipment order has been invoiced.
    /// </summary>
    /// <param name="_wmsShipmentId">
    /// The shipment ID of the shipment order.
    /// </param>
    /// <returns>
    /// The invoice id of the shipment invoice transaction; otherwise, an empty string.
    /// </returns>
    public static CustInvoiceId getInvoicedCustInvoiceId(WMSShipmentId _wmsShipmentId)
    {
        WMSOrderTrans       wmsOrderTrans;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select TableId from wmsOrderTrans
            where wmsOrderTrans.ShipmentId == _wmsShipmentId
            join TableId from inventTransOrigin
                where inventTransOrigin.InventTransId   == wmsOrderTrans.InventTransId
                join InvoiceId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId;

        return inventTrans.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficialsForShimpentId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes officials for <c>WMSShipment</c>.
    /// </summary>
    /// <param name="_wmsShipmentId">
    ///     WMSShipmentId for <c>WMSShipment</c> buffer.
    /// </param>
    public static void initOfficialsForShimpentId_RU(WMSShipmentId _wmsShipmentId)
    {
        WMSShipment     wmsShipment;

        ttsbegin;

        wmsShipment = WMSShipment::find(_wmsShipmentId, true);
        wmsShipment.initOfficials_RU();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumberSeqManual</Name>
				<Source><![CDATA[
    public static boolean isNumberSeqManual()
    {
        return WMSShipment::numberSequenceCode() ? NumberSequenceTable::findByNaturalKey(WMSShipment::numberSequenceCode()).Manual : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupShipmentsCanMoveTo</Name>
				<Source><![CDATA[
    public static void lookupShipmentsCanMoveTo(FormStringControl  _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(WMSShipment), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(WMSShipment));
        QueryBuildRange         qbrStatus = queryBuildDataSource.addRange(fieldNum(WMSShipment, Status));

        sysTableLookup.addLookupfield(fieldNum(WMSShipment, ShipmentId));
        sysTableLookup.addLookupfield(fieldNum(WMSShipment, OutputPort));
        sysTableLookup.addLookupfield(fieldNum(WMSShipment, Status));
        sysTableLookup.addLookupfield(fieldNum(WMSShipment, ShipmentType));
        sysTableLookup.addLookupfield(fieldNum(WMSShipment, PackingType));
        sysTableLookup.addLookupfield(fieldNum(WMSShipment, ShippingDateTime));

        qbrStatus.value(WMSQueryRangeUtil::shipmentsInProgress());

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryForInProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query passed as an argument.
    /// </summary>
    /// <param name="_selection">
    /// The selection of the shipments that should be selected
    /// </param>
    /// <param name="_query">
    /// The query that should be modified.
    /// </param>
    /// <remarks>
    /// This method selects records based on the selection enumeration passed in as an argument. This
    /// method is used from the <c>WMSShipment</c> form to handle selection based on the enumeration
    /// <c>WMSShipmentProgressSelection</c>.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The query passed as an argument does not contain a <c>WMSShipment</c> form as a data source.
    /// </exception>
    public static void modifyQueryForInProgress(
        WMSShipmentProgressSelection    _selection,
        Query                           _query)
    {
        QueryBuildDataSource    qbdsShipment;
        QueryBuildRange         qbrStatus;

        if (!_query)
        {
            return;
        }

        qbdsShipment = _query.dataSourceTable(tableNum(WMSShipment));
        if (!qbdsShipment)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        qbrStatus = SysQuery::findOrCreateRange(qbdsShipment,fieldNum(WMSShipment,Status));
        if (!qbrStatus)
        {
            return;
        }

        switch (_selection)
        {
            case WMSShipmentProgressSelection::InProgress   :
                qbrStatus.value(WMSQueryRangeUtil::shipmentsInProgress());
                qbrStatus.status(RangeStatus::Locked);
                break;
            case WMSShipmentProgressSelection::Sent         :
                qbrStatus.value(queryValue(WMSShipmentStatus::Shipped));
                qbrStatus.status(RangeStatus::Locked);
                break;
            case WMSShipmentProgressSelection::All          :   //fall through
            default                                         :
                qbrStatus.value(SysQuery::valueUnlimited());
                qbrStatus.status(RangeStatus::Open);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeq</Name>
				<Source><![CDATA[
    public static NumberSeq numberSeq(
        boolean _makeDecisionLater              = false,
        boolean _dontThrowOnMissingRefSetUp     = false)
    {
        return NumberSeq::newGetNum(
            WMSParameters::numRefWMSShipmentId(),
            _makeDecisionLater,
            _dontThrowOnMissingRefSetUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceCode</Name>
				<Source><![CDATA[
    public static NumberSequenceCode numberSequenceCode()
    {
        return NumberSequenceTable::find(WMSParameters::numRefWMSShipmentId().NumberSequenceId).NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posAllCanBeDirectlyInvoiced</Name>
				<Source><![CDATA[
    static public int posAllCanBeDirectlyInvoiced()
    {
        return 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posAllHasBeenInvoiced</Name>
				<Source><![CDATA[
    static public int posAllHasBeenInvoiced()
    {
        return 7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posAllPackedAndNotInvoiced</Name>
				<Source><![CDATA[
    static public int posAllPackedAndNotInvoiced()
    {
        return 6;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posCanPhysicalUpdSalesOrder</Name>
				<Source><![CDATA[
    static public int posCanPhysicalUpdSalesOrder()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posCanPhysicalUpdTransferOrder</Name>
				<Source><![CDATA[
    static public int posCanPhysicalUpdTransferOrder()
    {
        return 4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posHasSalesOrder</Name>
				<Source><![CDATA[
    static public int posHasSalesOrder()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posHasTransferOrder</Name>
				<Source><![CDATA[
    static public int posHasTransferOrder()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveAndActivate</Name>
				<Source><![CDATA[
    public static void reserveAndActivate(WMSShipmentId _wmsShipmentId)
    {
        #OCCRetryCount
        WMSShipment wmsShipment;

        try
        {
            ttsbegin;
            wmsShipment = WMSShipment::find(_wmsShipmentId, true);

            if (wmsShipment.Status == WMSShipmentStatus::Registered)
            {
                wmsShipment.reserve(true);
                wmsShipment.reread();
            }

            wmsShipment.activate(false);

            wmsShipment.setStatus(NoYes::Yes, NoYes::Yes);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveAndActivatePick</Name>
				<Source><![CDATA[
    public static void reserveAndActivatePick(WMSShipmentId _wmsShipmentId)
    {
        #OCCRetryCount
        WMSShipment wmsShipment;

        try
        {
            ttsbegin;
            wmsShipment = WMSShipment::find(_wmsShipmentId,true);

            if (wmsShipment.Status == WMSShipmentStatus::Registered)
            {
                wmsShipment.reserve(true);
                wmsShipment.reread();
            }

            if (wmsShipment.PickExpeditionStatus == WMSExpeditionStatus::None
                || wmsShipment.PickExpeditionStatus == WMSExpeditionStatus::Registered)
            {
                wmsShipment.activatePick(false);
                wmsShipment.setStatus(NoYes::Yes, NoYes::No);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123922</DeveloperDocumentation>
	<Label>@SYS50389</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>shipmentId</TitleField1>
	<TitleField2>name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ShipmentIdIdx</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ShipmentIdIdx</PrimaryIndex>
	<ReplacementKey>ShipmentIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>OfficialsTrans_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>OfficialsTrans_RU</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>shipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>outputPort</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>packingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pickExpeditionStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>shipmentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Carrier_RU</Name>
			<Label>@SYS50733</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CarrierType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Configuration</Name>
			<Label>@SYS20531</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>packingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>autoAddStop</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>shipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LicenseCard_RU</Name>
			<Label>@GLS111069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicenseCardType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseCardRegNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseCardSeries_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseCardNum_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reservation</Name>
			<Label>@SYS7669</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>requireAllReserved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShipFrom</Name>
			<Label>@SYS50713</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>outputPort</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pickExpeditionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShipDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shippingDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>physicalUpdateStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transportation_RU</Name>
			<Label>@GLS111070</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleModel_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehiclePlateNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaybillNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Driver_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DriverName_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DrivingLicenseNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DriverContact_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportationPayer_RU</Name>
			<Label>@GLS100924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportationPayerType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationPayer_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportInvoice_RU</Name>
			<Label>@GLS221922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportInvoiceType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CargoDescription_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CargoPacking_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>autoAddStop</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSAutoAddStop</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CargoDescription_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CargoDescription_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CargoPacking_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CargoPacking_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CarrierCode_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CarrierType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<EnumType>CarrierType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>DlvDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Driver_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>HcmPersonnelNumberId</ExtendedDataType>
			<Label>@GLS107369</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DriverContact_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DriverContact_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DriverName_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>DriverName_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DrivingLicenseNum_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DrivingLicenseNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdDefault</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isShipmentMultiSiteActivated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSIsMultiSiteActivated</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseCardNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LicenseCardNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseCardRegNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LicenseCardRegNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseCardSeries_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LicenseCardSeries_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LicenseCardType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LicenseCardType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OffSessionId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OffSessionId_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OutboundRuleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSOutboundRuleId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>outputPort</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSOutputPort</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>packedQuery</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PackedQueryRun</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>packingType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSPackingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>palletExpeditionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WMSPallet</ConfigurationKey>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS54254</Label>
			<EnumType>WMSExpeditionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>pickExpeditionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS77773</Label>
			<EnumType>WMSExpeditionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RequestedShipDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSRequestedShipDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>requireAllReserved</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSRequireAllReserved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>reservationSequenceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSReservationSequenceId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shipmentId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSShipmentId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentTemplate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSShipmentTemplateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>shipmentType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSShipmentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>shippingDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSShipmentDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSShipmentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportationPayer_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransportationPayer_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransportationPayerType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TransportationPayerType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportationType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationType_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransportInvoiceType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TransportInvoiceType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleModel_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>VehicleModel_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehiclePlateNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>VehiclePlateNum_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaybillNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WaybillNum_RU</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ShipmentIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>shipmentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WMSShipmentTemplateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>WMSAdvanced</ConfigurationKey>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipmentTemplate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>inventLocationId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>Carrier_CustTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>WMSShipment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Carrier_CustTable_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode_RU</Name>
					<Field>CarrierCode_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::Customer</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Carrier_VendTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Carrier_VendTable_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSShipment</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode_RU</Name>
					<Field>CarrierCode_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::Vendor</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Driver_CustTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Driver_CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSShipment</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Driver_RU</Name>
					<Field>Driver_RU</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::Customer</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Driver_EmplTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Driver_EmplTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSShipment</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Driver_RU</Name>
					<Field>Driver_RU</Field>
					<RelatedField>PersonnelNumber</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::InvoiceAccount</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Driver_VendTable_RU</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Driver_VendTable_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSShipment</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Driver_RU</Name>
					<Field>Driver_RU</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::Vendor</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Standard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffSessionId_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>OfficialsTrans_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffSessionId_RU</Name>
					<SourceEDT>OffSessionId_RU</SourceEDT>
					<Field>OffSessionId_RU</Field>
					<RelatedField>OffSessionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Payer_CustTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Payer_CustTable_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSShipment</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransportationPayerType_RU</Name>
					<Field>TransportationPayerType_RU</Field>
					<ValueStr>TransportationPayerType_RU::ThirdParty</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationPayer_RU</Name>
					<SourceEDT>TransportationPayer_RU</SourceEDT>
					<Field>TransportationPayer_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TransportationTypeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TransportationTypeTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationType_RU</Name>
					<SourceEDT>TransportationType_RU</SourceEDT>
					<Field>TransportationType_RU</Field>
					<RelatedField>Type</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VehicleModelTable_W</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VehicleModelTable_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VehicleModel_RU</Name>
					<SourceEDT>VehicleModel_W</SourceEDT>
					<Field>VehicleModel_RU</Field>
					<RelatedField>VehicleModel</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123914</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<Field>inventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>outputPort</Name>
					<SourceEDT>WMSOutputPort</SourceEDT>
					<Field>outputPort</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>locationType_Extern</Name>
					<SourceEDT>WMSOutputPort</SourceEDT>
					<RelatedField>locationType</RelatedField>
					<ValueStr>WMSLocationType::OutputPort</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSOrderTrans</Name>
			<EntityRelationshipRole>@SYS123923</EntityRelationshipRole>
			<RelatedTable>WMSOrderTrans</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>shipmentId</Name>
					<Field>shipmentId</Field>
					<RelatedField>shipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>