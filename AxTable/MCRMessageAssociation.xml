<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRMessageAssociation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRMessageAssociation extends common
{
    #define.Default('Default')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMessageScriptTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the message text to be displayed in a <c>MCRMessageAssociation</c> grid.
    /// </summary>
    /// <returns>
    /// The actual text of the message for display.
    /// </returns>
    public display MCRScriptID getMessageScriptTitle()
    {
        return MCRScriptTranslation::getTitleOrDefaultTitle(this.mcrScript, SystemParameters::getSystemLanguageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the message text to be displayed in a <c>MCRMessageAssociation</c> grid.
    /// </summary>
    /// <returns>
    /// The actual text of the message for display.
    /// </returns>
    public display MCRScriptNote getMessageText()
    {
        return MCRScriptTranslation::getNoteOrDefaultNote(this.mcrScript, SystemParameters::getSystemLanguageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the message script text to be displayed in a <c>MCRMessageAssociation</c> grid.
    /// </summary>
    /// <returns>
    /// The actual scrip text of the message for display.
    /// </returns>
    public display MCRScriptUse getMessageUse()
    {
        return MCRScript::find(this.mcrScript).ScriptUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.MessageCategory = #Default;
        this.MessageOrder = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean              ret;

        MCRMessageAssociation mcrMessageAssociation;
        MCRScript             mcrScript;

        ret = super();

        //One-time messages cannot be associated twice.
        select ScriptUse, AssociationTypes from mcrScript
            where mcrScript.RecId == this.mcrScript;
        if (mcrScript.ScriptUse == MCRScriptUse::OneTimeUse)
        {
            select firstonly RecId, mcrScript, LinkedTableID from mcrMessageAssociation
                where mcrMessageAssociation.RecId != this.RecId
                && mcrMessageAssociation.mcrScript == this.mcrScript;

            if (mcrMessageAssociation)
            {
                ret = checkFailed(strFmt("@MCR10286", tableId2pname(mcrMessageAssociation.LinkedTableID)));
            }
        }

        //Messages must be associated with the correct table.
        switch (mcrScript.AssociationTypes)
        {
            case MCRMessageAssociationTypes::Item:
                if (this.LinkedTableID != tableNum(InventTable))
                {
                    ret = checkFailed("@MCR12344");
                }
                break;

            case MCRMessageAssociationTypes::Catalog:
                if (this.LinkedTableID != tableNum(Catalog))
                {
                    ret = checkFailed("@MCR40314");
                }
                break;

            case MCRMessageAssociationTypes::CatalogProduct:
                if (this.LinkedTableID != tableNum(CatalogProduct))
                {
                    ret = checkFailed("@MCR40315");
                }
                break;

            case MCRMessageAssociationTypes::SalesOrder:
                if (this.LinkedTableID != tableNum(SalesTable))
                {
                    ret = checkFailed("@MCR12352");
                }
                break;

            case MCRMessageAssociationTypes::Customer:
                if (this.LinkedTableID != tableNum(CustTable))
                {
                    ret = checkFailed("@MCR32821");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies data from the passed <c>Catalog</c> record
    /// to the <c>MCRMessageAssociation</c> with the passed record ID.
    /// </summary>
    /// <param name="_source">
    /// The <c>Catalog</c> record used to create the <c>MCRMessageAssociation</c> records.
    /// </param>
    /// <param name="_targetRecId">
    /// The recID of the <c>MCRMessageAssociation</c> record that is being copied to.
    /// </param>
    public static void copyFromCatalog(Catalog _source,
                                       RecId _targetRecId)
    {
        MCRMessageAssociation mcrMessageSource, mcrMessageTarget;

        if (_targetRecId
            && _source.TableId == tableNum(Catalog))
        {
            insert_recordset mcrMessageTarget
                (LinkedRecID, Active, LinkedTableID, MessageCategory,
                MCRScript, MessageOrder, MessageTiming, Type)
            select _targetRecId, Active, LinkedTableID, MessageCategory,
                    mcrScript, MessageOrder, MessageTiming, Type
                    from mcrMessageSource
            where mcrMessageSource.LinkedRecID == _source.RecId
                && mcrMessageSource.LinkedTableID == _source.TableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoriesOnMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves categories on messages.
    /// </summary>
    /// <param name="_inventTable">
    /// The invent table record to which the message is linked.
    /// </param>
    /// <returns>
    /// A container of categories.
    /// </returns>
    public static container getCategoriesOnMessages(InventTable _inventTable)
    {
        container categories;
        MCRMessageAssociation mcrMessageAssociation;

        while select MessageCategory from mcrMessageAssociation
            group by MessageCategory
            where mcrMessageAssociation.LinkedTableID == _inventTable.TableId
                && mcrMessageAssociation.LinkedRecID == _inventTable.RecId
                && mcrMessageAssociation.Active == NoYes::Yes
        {
            categories += mcrMessageAssociation.MessageCategory;
        }

        return categories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtain customer message.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <returns>
    /// The sales order begin message for the specified customer.
    /// </returns>
    public static MCRScriptNote getCustomerMessage(AccountNum _custAccount)
    {
        MCRScriptNote   fullMessageString;
        CustTable       custTableLocal;

        if (_custAccount)
        {
            custTableLocal = CustTable::find(_custAccount);

            fullMessageString = MCRMessageAssociation::getFullMessage(custTableLocal.TableId,
                custTableLocal.RecId,
                MCRMessageTiming::Begin,
                #Default,
                strFmt("@SYS70279", custTableLocal.AccountNum));
        }

        return fullMessageString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the message string using the passed information.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the record used to build the message.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record used to build the message; optional.
    /// </param>
    /// <param name="_timing">
    /// The timing of the message; optional.
    /// </param>
    /// <param name="_category">
    /// The category of the message; optional.
    /// </param>
    /// <param name="_messageObject">
    /// The object of the message; optional.
    /// </param>
    /// <returns>
    /// The full message.
    /// </returns>
    #define.Default('Default')
    public static MCRScriptNote getFullMessage(TableId             _tableId,
        RecId                _recId          = 0,
        MCRMessageTiming     _timing         = MCRMessageTiming::Begin,
        MCRMessageCategoryID _category       = #Default,
        str                  _messageObject   = '')//Added for script header note.
    {
        MCRMessageAssociation   mcrMessageAssociation;
        MCRScriptTranslation    mcrScriptTranslation;
        MCRScriptNote           fullMessage;
        boolean                 firstMessage = true;
        MCRMessageType          lastMessageType;
        LanguageId              userLanguageId =  Global::currentUserLanguage();

        while select mcrScript, Type from mcrMessageAssociation
            order by MessageOrder
            where mcrMessageAssociation.LinkedTableID == _tableId
                && mcrMessageAssociation.LinkedRecID == _recId
                && mcrMessageAssociation.MessageTiming == _timing
                && mcrMessageAssociation.MessageCategory == _category
                && mcrMessageAssociation.Active == NoYes::Yes
            join Note from mcrScriptTranslation
            where mcrScriptTranslation.mcrScript == mcrMessageAssociation.mcrScript
                && mcrScriptTranslation.LanguageId == userLanguageId
        {
            if (_messageObject && firstMessage)
            {
                fullMessage +=_messageObject;
            }
            if (lastMessageType != mcrMessageAssociation.Type
                || firstMessage)
            {
                firstMessage = false;
                if (fullMessage)
                {
                    fullMessage += '\n';
                }
                if (mcrMessageAssociation.Type == MCRMessageType::Note)
                {
                    fullMessage += "@MCR11926" + ':\n';
                }
                else
                {
                    fullMessage += "@MCR11902" + ':\n';
                }
                lastMessageType = mcrMessageAssociation.Type;
            }
            fullMessage += mcrScriptTranslation.Note + '\n';
        }

        return fullMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemMessage</Name>
				<Source><![CDATA[
/// <summary>
    /// Obtain the item message.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_sourceID">
    /// The source code ID.
    /// </param>
    /// <param name="_upsellOrigin">
    /// The origin of the upsell or crosssell if the item was triggered from upsell or crosssell.
    /// </param>
    /// <param name="_upSellOriginRef">
    /// The item ID that triggered the upsell or crosssell item.
    /// </param>
    /// <returns>
    /// The message attached to an item.
    /// </returns>
    public static MCRScriptNote getItemMessage(ItemId          _itemId,
                                                      MCRSourceID     _sourceID,
                                                      MCRUpSellOrigin _upsellOrigin,
                                                      ItemId          _upSellOriginRef)
    {
        MCRSourceCodeSetup  mcrSourceCodeSetupLocal;
        InventTable         inventTableLocal;
        CatalogProduct      catalogProduct;
        MCRScriptNote       fullMessageString;

        if (_itemId)
        {
            if (_sourceID)
            {
                select firstonly RecId from catalogProduct
                    exists join mcrSourceCodeSetupLocal
                    where mcrSourceCodeSetupLocal.SourceID == _sourceID
                        && catalogProduct.Catalog  == mcrSourceCodeSetupLocal.Catalog
                    exists join inventTableLocal
                    where inventTableLocal.ItemId   ==_itemId
                        && inventTableLocal.Product == catalogProduct.Product;

                if (catalogProduct.RecId)
                {
                    fullMessageString =
                        MCRMessageAssociation::getFullMessage(catalogProduct.TableId,
                            catalogProduct.RecId,
                            MCRMessageTiming::Begin,
                            #Default,
                            strFmt("@SYS14077", _itemId));
                }

                if (!fullMessageString)
                {
                    fullMessageString = MCRMessageAssociation::getSourceMessage(_sourceID);
                }
            }

            if (!fullMessageString)
            {
                if (_upsellOrigin == MCRUpSellOrigin::ItemCrossSell
                    || _upsellOrigin == MCRUpSellOrigin::ItemUpSell)
                {
                    fullMessageString = MCRMessageAssociation::getUpSellItemMessage(_itemId, _upSellOriginRef);
                }

                    if (!fullMessageString)
                    {
                        select firstonly ItemId, TableId, RecId from inventTableLocal
                            where inventTableLocal.ItemId == _itemId;

                        if (inventTableLocal)
                        {
                            fullMessageString = MCRMessageAssociation::getFullMessage(inventTableLocal.TableId,
                                inventTableLocal.RecId,
                                MCRMessageTiming::Begin,
                                #Default,
                                strFmt("@SYS14077", _itemId));
                        }
                    }
                }
            }
        return fullMessageString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageOnType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the message string using the passed information.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the record used to build the message.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the record used to build the message; optional.
    /// </param>
    /// <param name="_messageType">
    /// The type of message; optional.
    /// </param>
    /// <param name="_timing">
    /// The timing of the message; optional.
    /// </param>
    /// <param name="_category">
    /// The category of the message; optional.
    /// </param>
    /// <returns>
    /// The full message for the specified type.
    /// </returns>
    #define.Default('Default')
    public static MCRScriptNote getMessageOnType(TableId _tableId,
        RecId _recId = 0,
        MCRMessageType _messageType = MCRMessageType::Script,
        MCRMessageTiming _timing = MCRMessageTiming::Begin,
        MCRMessageCategoryID _category = #Default)
    {
        MCRMessageAssociation   mcrMessageAssociation;
        MCRScriptTranslation    mcrScriptTranslation;
        MCRScriptNote           message;

        while select RecId from mcrMessageAssociation
            order by MessageOrder
            where mcrMessageAssociation.LinkedTableID == _tableId
                && mcrMessageAssociation.LinkedRecID == _recId
                && mcrMessageAssociation.Type == _messageType
                && mcrMessageAssociation.MessageTiming == _timing
                && mcrMessageAssociation.MessageCategory == _category
                && mcrMessageAssociation.Active == NoYes::Yes
            join Note from mcrScriptTranslation
                 where mcrScriptTranslation.mcrScript == mcrMessageAssociation.mcrScript
                     && mcrScriptTranslation.LanguageId == SystemParameters::getSystemLanguageId()
        {
            message += mcrScriptTranslation.Note + '\n';
        }
        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the message associated with a source code.
    /// </summary>
    /// <param name="_sourceID">
    /// The source code ID.
    /// </param>
    /// <returns>
    /// The message associated with a specified source code.
    /// </returns>
    public static MCRScriptNote getSourceMessage(MCRSourceID _sourceID)
    {
        MCRSourceCodeSetup  mcrSourceCodeSetupLocal;
        Catalog             catalog;
        MCRScriptNote       fullMessageString;

        if (_sourceID)
        {
            select firstonly TableId, RecId from catalog
                exists join mcrSourceCodeSetupLocal
                where mcrSourceCodeSetupLocal.Catalog == catalog.RecId
                    && mcrSourceCodeSetupLocal.SourceID == _sourceID;

            fullMessageString = MCRMessageAssociation::getFullMessage(catalog.TableId,
                catalog.RecId,
                MCRMessageTiming::Begin,
                #Default,
                strFmt("@MCR39725", _sourceID));
        }

        return fullMessageString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartOrderMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the start order message.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_sourceID">
    /// The source code Id.
    /// </param>
    /// <param name="_create">
    /// A boolean to indicate creation of a start order message if one is not found by customer and source code.
    /// </param>
    /// <returns>
    /// The start order message for a specified customer and source code.
    /// </returns>
    public static MCRScriptNote getStartOrderMessage(AccountNum _custAccount,
        MCRSourceID _sourceID,
        boolean     _create)
    {
        MCRScriptNote              fullMessageString;
        MCRSourceCodeSetup         mcrSourceCodeSetupLocal;
        Catalog                    catalog;

        fullMessageString = MCRMessageAssociation::getCustomerMessage(_custAccount);

        if (!fullMessageString && _sourceID)
        {
            select firstonly TableId, RecId from catalog
                exists join mcrSourceCodeSetupLocal
                where catalog.RecId == mcrSourceCodeSetupLocal.Catalog
                    && mcrSourceCodeSetupLocal.SourceID == _sourceID;

            if (catalog)
            {
                fullMessageString = MCRMessageAssociation::getFullMessage(
                    catalog.TableId,
                    catalog.RecId,
                    MCRMessageTiming::Begin,
                    #Default,
                    strFmt("@MCR39725", _sourceID));
            }
        }

        if (!fullMessageString
            && _create)
        {
            fullMessageString = MCRMessageAssociation::getFullMessage(
                tableNum(SalesTable),
                0,
                MCRMessageTiming::Begin);
        }

        return fullMessageString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpSellItemMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the message associated with an item triggered form an upsell or crosssell.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_upSellOriginRef">
    /// The item ID of the item that triggered the upsell or crosssell.
    /// </param>
    /// <returns>
    /// The item message associated with an item triggered from upsell or crosssell.
    /// </returns>
    public static MCRScriptNote getUpSellItemMessage(ItemId _itemId, ItemId _upSellOriginRef)
    {
        MCRUpSellItem       mcrUpSellItem;
        MCRScriptNote       fullMessageString;

        if (_itemId && _upSellOriginRef)
        {
            select firstonly TableId, RecId from mcrUpSellItem
                where mcrUpSellItem.ItemId == _upSellOriginRef
                    && mcrUpSellItem.LinkedItem == _itemId;

            if (mcrUpSellItem)
            {
                fullMessageString =
                    MCRMessageAssociation::getFullMessage(mcrUpSellItem.TableId,
                        mcrUpSellItem.RecId,
                        MCRMessageTiming::Begin,
                        #Default,
                        strFmt("@SYS14077", _itemId));
            }
        }

        return fullMessageString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromCatalogProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the script for catalog products.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The catalog recid to copy from.
    /// </param>
    /// <param name="_targetRecId">
    /// The catalog recid to copy to.
    /// </param>
    public static void copyFromCatalogProduct(RecId _sourceRecId, RecId _targetRecId)
    {
        MCRMessageAssociation targetMessage, sourceMessage;
        CatalogProduct        targetProduct, sourceProduct;

        if (_sourceRecId && _targetRecId)
        {
            insert_recordset targetMessage(LinkedRecID, Active, LinkedTableID, MessageCategory, MCRScript, MessageOrder, MessageTiming, Type)
            select RecId from targetProduct
                where targetProduct.Catalog == _targetRecId
            join sourceProduct
                where sourceProduct.Catalog == _sourceRecId &&
                    sourceProduct.Product == targetProduct.Product
            join Active, LinkedTableID, MessageCategory, MCRScript, MessageOrder, MessageTiming, Type
                from sourceMessage
                    where sourceMessage.LinkedRecID == sourceProduct.RecId &&
                        sourceMessage.LinkedTableID == sourceProduct.TableId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@MCR36360</DeveloperDocumentation>
	<Label>@MCR11910</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>MessageCategory</TitleField1>
	<TitleField2>MCRScript</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LinkedTableID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MessageCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MessageTiming</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MessageOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinkedRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRScript</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MessageGroup</Name>
			<Label>@SYS60279</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LinkedTableID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MessageCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MessageTiming</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MessageOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinkedRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRScript</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MessageOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>getMessageText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRScript</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LinkedRecID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRelatedTableRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LinkedTableID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MCRScript</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MessageCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRMessageCategoryID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MessageOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Priority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MessageTiming</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRMessageTiming</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRMessageType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LinkedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LinkedTableID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LinkedRecID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MessageTiming</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MessageCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Catalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Catalog</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedTableID</Name>
					<SourceEDT>RefTableId</SourceEDT>
					<Field>LinkedTableID</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedRecID</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>LinkedRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CatalogProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatalogProduct</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedRecID</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>LinkedRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedTableID</Name>
					<SourceEDT>RefTableId</SourceEDT>
					<Field>LinkedTableID</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedRecID</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>LinkedRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedTableID</Name>
					<SourceEDT>TableId</SourceEDT>
					<Field>LinkedTableID</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedRecID</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>LinkedRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedTableID</Name>
					<SourceEDT>RefTableId</SourceEDT>
					<Field>LinkedTableID</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRMessageCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MCRMessageCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MCRMessageCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MessageCategory</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MessageCategory</Name>
					<SourceEDT>MCRMessageCategoryID</SourceEDT>
					<Field>MessageCategory</Field>
					<RelatedField>Category</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRScript</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MCRScript</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRScript</Name>
					<Field>MCRScript</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRUpSellItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRUpSellItem</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MCRUpSellItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRUpsllItems</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedRecID</Name>
					<Field>LinkedRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinkedTableID</Name>
					<Field>LinkedTableID</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>