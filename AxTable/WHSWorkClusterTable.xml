<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkClusterTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
using XppRuntimeEventSource = Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource;

public class WHSWorkClusterTable extends common
{  
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateOpenClusterWorkExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates there is open work tied to a cluster.
    /// </summary>
    /// <param name="_clusterId">
    /// The ID of the cluster to be validated.
    /// </param>
    /// <returns>
    /// true if open work exists; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean validateOpenClusterWorkExists(WHSClusterId _clusterId)
    {
        WHSWorkTable        clusterWorkTable;
        WHSWorkClusterLine  workClusterLine;
    
        select firstOnly RecId from clusterWorkTable
            where clusterWorkTable.WorkStatus < WHSWorkStatus::PendingReview
            exists join workClusterLine
                where workClusterLine.WorkId    == clusterWorkTable.WorkId
                &&    workClusterLine.ClusterId == _clusterId;
    
        return clusterWorkTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakCluster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Breaks cluster.
    /// </summary>
    /// <param name="_clusterId">
    /// Id of the cluster to be broken.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the cluster is not open or passes status.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the cluster is locked.
    /// </exception>
    public static void breakCluster(WHSClusterId _clusterId)
    {
        WHSWorkClusterBreaker workClusterBreaker = WHSWorkClusterBreaker::newFromClusterId(_clusterId);
        workClusterBreaker.breakCluster();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupCluster</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cleans up a given cluster if the user cancels the action during creation.
    /// </summary>
    /// <param name="_clusterId">
    ///    The cluster ID to clean up.
    /// </param>
    public static void cleanupCluster(WHSClusterId _clusterId)
    {
        WHSWorkClusterTable clusterTable;
        WHSWorkClusterLine  clusterLine;
        WHSWorkTable        workTable;
        WHSWorkLine         firstWorkLine;

        while select workTable
              join   clusterLine
              where  clusterLine.WorkId     == workTable.WorkId
                  && clusterLine.ClusterId  == _clusterId
              join   firstWorkLine
              where  firstWorkLine.WorkId   == workTable.WorkId
                  && firstWorkLine.LineNum  == 1
        {
            WHSWorkClusterTable::cleanupWorkClusterWorkTable(workTable, firstWorkLine, clusterLine);
        }

        clusterTable = WHSWorkClusterTable::find(_clusterId, true);

        if (clusterTable.RecId != 0)
        {
            ttsbegin;

            if (!clusterTable.validateDelete())
            {
                throw error(strFmt("@WAX:WHSCannotDeleteRecordInTable", tablePName(WHSWorkClusterTable)));
            }
            else
            {
                clusterTable.delete();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWorkClusterWorkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets license plates of entries in the work table, if applicable.
    /// </summary>
    /// <param name = "_workTable">The work table record to clean up</param>
    /// <param name = "_firstWorkLine">The first work line of the work table record</param>
    /// <param name = "_clusterLine">The cluster line being cleaned</param>
    protected static void cleanupWorkClusterWorkTable(
        WHSWorkTable        _workTable,
        WHSWorkLine         _firstWorkLine,
        WHSWorkClusterLine  _clusterLine)
    {
        if (_firstWorkLine.InventQtyRemain == _firstWorkLine.InventQtyWork &&
            !WHSWorkClusterTable::isInboundClusterSupportedForWorkTransType(_workTable.WorkTransType))
        {
            WHSWorkTable::setTargetLicensePlate(_workTable.WorkId, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkClusterTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWorkClusterTable</c> record with given parameters.
    /// </summary>
    /// <param name="_clusterId">
    /// Cluster id of the record to be created.
    /// </param>
    /// <param name="_clusterProfileId">
    /// Cluster profile id of the record to be created.
    /// </param>
    /// <param name="_lockedUser">
    /// Locked user of the record to be created.
    /// </param>
    public static void createWorkClusterTable(
        WHSClusterId        _clusterId,
        WHSClusterProfileId _clusterProfileId,
        WHSLockedUser       _lockedUser = '')
    {
        WHSWorkClusterTable  workClusterTable;

        if (!WHSWorkClusterTable::exist(_clusterId))
        {
            ttsbegin;

            workClusterTable.ClusterId        = _clusterId;
            workClusterTable.ClusterProfileId = _clusterProfileId;
            workClusterTable.ClusterType      = WHSClusterProfile::find(_clusterProfileId).ClusterType;
            workClusterTable.LockedUser       = _lockedUser;
            
            if (!workClusterTable.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSWorkClusterTable)));
            }
            else
            {
                workClusterTable.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>WHSWorkClusterTable</c> record exists.
    /// </summary>
    /// <param name="_clusterId">
    /// Cluster id of the record.
    /// </param>
    /// <returns>
    /// true, if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(WHSClusterId _clusterId)
    {
        return (_clusterId) &&
                (select firstonly whsWorkClusterTable
                 where whsWorkClusterTable.ClusterId         == _clusterId
                    && whsWorkClusterTable.WorkClusterStatus != WHSWorkClusterStatus::Closed).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkClusterTable</c> record with given parameters.
    /// </summary>
    /// <param name="_clusterId">
    /// Cluster id of the record.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// he record that is searched for.
    /// </returns>
    public static WHSWorkClusterTable find(
        WHSClusterId _clusterId,
        boolean      _forUpdate = false)
    {
        WHSWorkClusterTable   workClusterTable;

        if (_clusterId)
        {
            workClusterTable.selectForUpdate(_forUpdate);

            select firstonly workClusterTable
                where workClusterTable.ClusterId         == _clusterId
                   && workClusterTable.WorkClusterStatus != WHSWorkClusterStatus::Closed;
        }

        return workClusterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findClusterReadyForPutaway</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkClusterTable</c> record that is closed or in progress and for putaway.
    /// </summary>
    /// <param name="_clusterId">
    /// Cluster id of the record.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkClusterTable findClusterReadyForPutaway(
        WHSClusterId    _clusterId,
        boolean         _forUpdate = false)
    {
        WHSWorkClusterTable workClusterTable;
        WHSWorkClusterLine workClusterLine;
        WHSWorkTable workTable;
        
        if (_clusterId)
        {
            workClusterTable.selectForUpdate(_forUpdate);

            select firstonly workClusterTable
                where workClusterTable.ClusterId == _clusterId
                    && workClusterTable.ClusterType == WHSClusterType::Putaway
                    && (workClusterTable.WorkClusterStatus == WHSWorkClusterStatus::Closed
                        || workClusterTable.WorkClusterStatus == WHSWorkClusterStatus::Passed
                        || workClusterTable.WorkClusterStatus == WHSWorkClusterStatus::InProcess)
                exists join workClusterLine
                    where workClusterLine.ClusterId == workClusterTable.ClusterId
                    exists join workTable
                        where workTable.WorkId == workClusterLine.WorkId
                            && workTable.WorkStatus < WHSWorkStatus::PendingReview;
        }

        return workClusterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundClusterSupportedForWorkTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given work trans type is supported with inbound clusters.
    /// </summary>
    /// <param name = "_workTransType">
    /// The <c>WHSWorkTransType</c> being checked
    /// </param>
    /// <returns>
    /// A boolean value indicating whether the <c>WHSWorkTransType</c> is supported
    /// </returns>
    protected static boolean isInboundClusterSupportedForWorkTransType(WHSWorkTransType _workTransType)
    {
        return WHSWorkTransactionType::singletonFromTypeOrDefault(_workTransType).isInboundClusterSupported();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockUnlockClusteredWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to lock or unlock all work headers tied to a cluster
    /// </summary>
    /// <param name="_clusterId">
    /// The Id number of the cluster whose work will be updated
    /// </param>
    /// <param name="_userId">
    /// The RF user the clustered work will be updated to. May be blank.
    /// </param>
    public static void lockUnlockClusteredWork(
        WHSClusterId    _clusterId,
        WHSUserId       _userId)
    {
        WHSInstrumentationLogger instrumentationLogger = WHSWorkClusterTable::instrumentationLogger();

        using (var activityContext = instrumentationLogger.workClusterTableActivities().lockUnlockClusteredWork(_clusterId))
        {
            using (WHSWorkLockUnlockWorkContext context = WHSWorkLockUnlockWorkContext::construct())
            {
                WHSWorkClusterLine  workClusterLine;
                WHSWorkTable        workTable;

                ttsbegin;
                
                while select WorkId from workClusterLine
                    where workClusterLine.ClusterId == _clusterId
                    exists join workTable
                        where  workTable.WorkId     == workClusterLine.WorkId
                            && workTable.WorkStatus != WHSWorkStatus::Cancelled
                            && workTable.WorkStatus != WHSWorkStatus::Closed
                {
                    WHSWorkTable::lockUnlockWork(workClusterLine.WorkId, _userId);
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockUnlockWorkCluster</Name>
				<Source><![CDATA[
    public static void lockUnlockWorkCluster(
        WHSClusterId _clusterId,
        WHSUserId    _userId)
    {
        WHSWorkClusterTable workClusterTable;

        ttsbegin;

        workClusterTable = WHSWorkClusterTable::find(_clusterId, true);

        if (   workClusterTable.RecId != 0
            && _userId                != workClusterTable.LockedUser)
        {
            workClusterTable.LockedUser = _userId;
            workClusterTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClusterStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Changes status of cluster.
    /// </summary>
    /// <param name="_clusterId">
    ///     The cluster ID
    /// </param>
    /// <param name="_clusterStatus">
    ///     The new cluster status.
    /// </param>
    public static void updateClusterStatus(
        WHSClusterId         _clusterId,
        WHSWorkClusterStatus _clusterStatus)
    {
        ttsbegin;

        WHSWorkClusterTable clusterTable = WHSWorkClusterTable::find(_clusterId, true);

        if (clusterTable)
        {
            clusterTable.updateStatus(_clusterStatus);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cluster status if it has changed.
    /// </summary>
    /// <param name = "_clusterStatus">The new cluster status.</param>
    [Hookable(false)]
    internal void updateStatus(WHSWorkClusterStatus _clusterStatus)
    {
        if (this.WorkClusterStatus != _clusterStatus)
        {
            this.WorkClusterStatus = _clusterStatus;

            if (this.validateWrite())
            {
                this.update();
            }
            else
            {
                WHSWorkClusterTable::logUpdateClusterStatusValidateWriteFailure(this);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUpdateClusterStatusValidateWriteFailure</Name>
				<Source><![CDATA[
    private static void logUpdateClusterStatusValidateWriteFailure(WHSWorkClusterTable _clusterTable)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();
        serializer.setValue('Message', 'Method clusterTable.validateWrite() failed in WHSWorkClusterTable.updateClusterStatus.');
        serializer.setValue('CallStack', con2Str(xSession::xppCallStack()));
        serializer.setValue('WorkClusterRecId', int642Str(_clusterTable.RecId));

        XppRuntimeEventSource::EventWriteInfoLogMark(Exception::Warning, serializer.toString());
        WHSInstrumentationLogger::createLogger('WriteInfoLogMark').logWarning(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnProcessedDeferredPuts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cluster has any unprocessed deferred put tasks.
    /// </summary>
    /// <returns>true if there are any unprocessed deferred put tasks, otherwise, false.</returns>
    [Hookable(false)]
    internal boolean hasUnProcessedDeferredPuts()
    {
        WHSWorkClusterLine                  workClusterLine;
        WHSWorkDeferredPutProcessingTask    workDeferredPutProcessingTask;

        select firstonly RecId from workClusterLine
            where workClusterLine.ClusterId == this.ClusterId
        exists join workDeferredPutProcessingTask
            where workDeferredPutProcessingTask.Status != WHSWorkDeferredOperationStatus::Completed
                && workDeferredPutProcessingTask.WorkId == workClusterLine.WorkId;

        return (workClusterLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkClusterStatusOnCompletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the cluster status when the cluster is compeleted from the mobile device.
    /// </summary>
    /// <returns>The cluster status.</returns>
    [Hookable(false)]
    internal WHSWorkClusterStatus calculateWorkClusterStatusOnCompletion()
    {
        WHSWorkClusterStatus clusterStatus = WHSWorkClusterStatus::Closed;

        if (this.hasUnProcessedDeferredPuts())
        {
            clusterStatus = WHSWorkClusterStatus::InProcess;
        }
        
        return clusterStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveClusterIdForWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the id of the active cluster that the work with the passed work id is assigned to.
    /// </summary>
    /// <param name = "_workId">
    /// The Work ID to search an active cluster for.
    /// </param>
    /// <returns>
    /// The id of the active cluster that the work with the passed work id is assigned to.
    /// </returns>
    [Hookable(false)]
    internal static WHSClusterId findActiveClusterIdForWorkId(WHSWorkId _workId)
    {
        WHSWorkClusterLine workClusterLine;
        WHSWorkClusterTable workClusterTable;

        // Searching for the work cluster lines related to a workId  
        // is very specific and should be performed first in this query.

        select firstonly forceSelectOrder ClusterId from workClusterLine
            where workClusterLine.WorkId == _workId
        exists join workClusterTable
            where workClusterTable.ClusterId            == workClusterLine.ClusterId
               && workClusterTable.WorkClusterStatus    != WHSWorkClusterStatus::Closed;

        return workClusterLine.ClusterId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithPessimisticLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkClusterTable</c> record with pessimistic lock.
    /// </summary>
    /// <param name="_clusterId">
    /// The id of the cluster.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkClusterTable findWithPessimisticLock(WHSClusterId _clusterId)
    {
        WHSWorkClusterTable workClusterTable;

        if (_clusterId)
        {
            select firstonly pessimisticlock workClusterTable
                where workClusterTable.ClusterId            == _clusterId
                   && workClusterTable.WorkClusterStatus    != WHSWorkClusterStatus::Closed;
        }

        return workClusterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecIdWithPessimisticLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds by record id a specific <c>WHSWorkClusterTable</c> record with pessimistic lock.
    /// </summary>
    /// <param name="_recId">
    /// The record id of the cluster.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkClusterTable findByRecIdWithPessimisticLock(RecId _recId)
    {
        WHSWorkClusterTable workClusterTable;

        if (_recId)
        {
            select firstonly pessimisticlock workClusterTable
                where workClusterTable.RecId == _recid;
        }

        return workClusterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasClusterOpenOrInProcessWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the cluster has any Open or InProcess works associated to it.
    /// </summary>
    /// <returns>True if the cluster has any Open or InProcess works associated to it; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean hasClusterOpenOrInProcessWork()
    {
        WHSWorkClusterLine  workClusterLine;
        WHSWorkTable        workTable;

        select firstonly workClusterLine
            where workClusterLine.ClusterId == this.ClusterId
        exists join workTable
            where workTable.WorkId == workClusterLine.WorkId
               && workTable.WorkStatus <= WHSWorkStatus::InProcess;

        return workClusterLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLockedUserFromClusterThatHasWorkIdAssociated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the locked user of the cluster that has the passed work Id associated.
    /// </summary>
    /// <param name = "_workId">
    /// The Id of the work to check if it is assigned to a cluster locked by user.
    /// </param>
    /// <returns>
    /// true if the work status is associated to a cluster locked by user; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static WHSLockedUser findLockedUserFromClusterThatHasWorkIdAssociated(WHSWorkId _workId)
    {
        WHSWorkClusterLine  workClusterLine;
        WHSWorkClusterTable workClusterTable;

        // The condition workClusterTable.WorkClusterStatus != WHSWorkClusterStatus::Closed helps performance.
        // The query from below should use the ClusterIdIdx index, ClustedId and WorkClusterStatus are part of the index
        // and LockedUser is an included column.

        select firstonly RecId from workClusterLine
            where workClusterLine.WorkId == _workId
        join LockedUser from workClusterTable
            where workClusterTable.ClusterId            == workClusterLine.ClusterId
                && workClusterTable.WorkClusterStatus   != WHSWorkClusterStatus::Closed
                && workClusterTable.LockedUser          != '';

        return workClusterTable.LockedUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closePutawayCluster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates putaway cluster status to closed and locates based on putaway profile configuration.
    /// </summary>
    /// <param name="_clusterId">
    /// The Id of the putaway cluster to close.
    /// </param>
    [Hookable(false)]
    internal static void closePutawayCluster(WHSClusterId _clusterId)
    {
        WHSInstrumentationLogger instrumentationLogger = WHSWorkClusterTable::instrumentationLogger();

        using (var activityContext = instrumentationLogger.clusterPutawayActivities().closePutawayCluster())
        {
            ttsbegin;

            WHSWorkClusterTable workClusterTable = WHSWorkClusterTable::find(_clusterId, true);
    
            instrumentationLogger.logRecordInformation(workClusterTable);

            if (workClusterTable.ClusterType == WHSClusterType::Putaway)
            {
                workClusterTable.LockedUser = '';
                workClusterTable.update();

                if (WHSClusterProfile::find(workClusterTable.ClusterProfileId).PutawayClusterLocate == WHSPutawayClusterLocate::ClusterClose)
                {
                    WHSLocatePutawayCluster locatePutawayCluster = WHSLocatePutawayCluster::construct();
    
                    locatePutawayCluster.locateClusterAtClose(workClusterTable);
                }

                WHSWorkClusterTable::updateClusterStatus(_clusterId, WHSWorkClusterStatus::Closed);
            }
            else
            {
                throw error("@WAX:WHSWorkClusterTableClosePutawayError");
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNestedLPFromCluster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates nested LP structure based on a work cluster.
    /// </summary>
    /// <param name="_clusterId">
    /// The Id of the cluster that will be used to create the nested LPs.
    /// </param>
    [Hookable(false)]
    internal static void createNestedLPFromCluster(WHSClusterId _clusterId)
    {
        WHSWorkTable        workTable;
        WHSWorkClusterLine  workClusterLine;
    
        ttsbegin;

        WHSLicensePlate::createLicensePlate(_clusterId);
    
        while select TargetLicensePlateId from workTable
            exists join workClusterLine
            where workClusterLine.WorkId == workTable.WorkId
                && workClusterLine.ClusterId == _clusterId
        {
            WHSLicensePlate::nestLicensePlate(_clusterId, workTable.TargetLicensePlateId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static WHSInstrumentationLogger instrumentationLogger()
    {
        return WHSInstrumentationLogger::createLogger(tableStr(WHSWorkClusterTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allNonCancelledWorkHeadersHaveTargetLPSetForCluster</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean allNonCancelledWorkHeadersHaveTargetLPSetForCluster(WHSClusterId _clusterId)
    {
        WHSWorkClusterLine  clusterLine;
        WHSWorkTable        workTableNoLP;
    
        select firstonly RecId from clusterLine
            where clusterLine.ClusterId == _clusterId
        exists join workTableNoLP
            where workTableNoLP.WorkId                  == clusterLine.WorkId
               && workTableNoLP.TargetLicensePlateId    == ''
               &&  workTableNoLP.WorkStatus!= WHSWorkStatus::Cancelled;

        return clusterLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClusterTypePicking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isClusterTypePicking(WHSClusterId _clusterId)
    {
        WHSWorkClusterTable clusterTable = WHSWorkClusterTable::find(_clusterId);

        return clusterTable.RecId && clusterTable.ClusterType == WHSClusterType::Picking;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4492</DeveloperDocumentation>
	<Label>@WAX3587</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ClusterId</TitleField1>
	<TitleField2>ClusterProfileId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WHSWorkClusterLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSWorkClusterLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ClusterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClusterProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LockedUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkClusterStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ClusterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClusterProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LockedUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkClusterStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkClusterTransContainer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClusterId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSClusterId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClusterProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSClusterProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LockedUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSLockedUser</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkClusterStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkClusterStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>WorkClusterTransContainer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkClusterTransContainer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClusterType</Name>
			<EnumType>WHSClusterType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ClusterIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ClusterId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkClusterStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LockedUser</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSClusterProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSClusterProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClusterProfileId</Name>
					<SourceEDT>WHSClusterProfileId</SourceEDT>
					<Field>ClusterProfileId</Field>
					<RelatedField>ClusterProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkUser</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LockedUser</Name>
					<SourceEDT>WHSLockedUser</SourceEDT>
					<Field>LockedUser</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>