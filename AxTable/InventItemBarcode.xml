<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemBarcode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemBarcode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventItemBarcode, BarcodeSetupId):
                this.defaultBarcodeSetupId();
                break;

            case fieldNum(InventItemBarcode, Description):
                this.defaultDescription();
                break;

            case fieldNum(InventItemBarcode, RetailVariantId):
                this.defaultRetailVariantId();
                break;

            case fieldNum(InventItemBarcode, InventDimId):
                this.defaultInventDimId();
                break;

            case fieldNum(InventItemBarcode, UnitId):
                this.defaultUnitId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBarcodeSetupId</Name>
				<Source><![CDATA[
    private void defaultBarcodeSetupId()
    {
        if (this.isFieldSet(fieldNum(InventItemBarcode, itemId)))
        {
            BarcodeSetupId  barcodeSetupId = this.retailInventTable().BarcodeSetupId;

            if (barcodeSetupId)
            {
                this.BarcodeSetupId = barcodeSetupId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDescription</Name>
				<Source><![CDATA[
    private void defaultDescription()
    {
        if (this.isFieldSet(fieldNum(InventItemBarcode, itemId)) || this.isFieldSet(fieldNum(InventItemBarcode, inventDimId)))
        {
            if (!this.isFieldSet(fieldNum(InventItemBarcode, inventDimId)))
            {
                this.defaultInventDimId();
            }

            if (this.inventDimId == InventDim::inventDimIdBlank())
            {
                this.Description    = this.inventTable().defaultProductName();
            }
            else
            {
                this.Description    = this.inventDimCombination().defaultProductName();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRetailVariantId</Name>
				<Source><![CDATA[
    private void defaultRetailVariantId()
    {
        if (this.isFieldSet(fieldNum(InventItemBarcode, itemId)) || this.isFieldSet(fieldNum(InventItemBarcode, inventDimId)))
        {
            if (!this.isFieldSet(fieldNum(InventItemBarcode, inventDimId)))
            {
                this.defaultInventDimId();
            }

            if (this.inventDimId == InventDim::inventDimIdBlank())
            {
                this.RetailVariantId    = '';
            }
            else
            {
                this.RetailVariantId    = this.inventDimCombination().RetailVariantId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDimId</Name>
				<Source><![CDATA[
    private void defaultInventDimId()
    {
        if (this.isFieldSet(fieldNum(InventItemBarcode, itemId)))
        {
            this.inventDimId = InventDim::inventDimIdBlank();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultUnitId</Name>
				<Source><![CDATA[
    private void defaultUnitId()
    {
        if (this.isFieldSet(fieldNum(InventItemBarcode, itemId)))
        {
            this.UnitID = this.inventTable().salesUnitId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(InventItemBarcode, Description), this.descriptionDefaultingDependencies()],
            [fieldNum(InventItemBarcode, RetailVariantId), this.retailVariantIdDefaultingDependencies()],
            [fieldNum(InventItemBarcode, InventDimId), this.inventDimIdDefaultingDependencies()],
            [fieldNum(InventItemBarcode, BarcodeSetupId), this.barcodeSetupIdDefaultingDependencies()],
            [fieldNum(InventItemBarcode, UnitID), this.unitIdDefaultingDependencies()]
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>descriptionDefaultingDependencies</Name>
				<Source><![CDATA[
    private container descriptionDefaultingDependencies()
    {
        return [fieldNum(InventItemBarcode, itemId), fieldNum(InventItemBarcode, inventDimId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailVariantIdDefaultingDependencies</Name>
				<Source><![CDATA[
    private container retailVariantIdDefaultingDependencies()
    {
        return [fieldNum(InventItemBarcode, itemId), fieldNum(InventItemBarcode, inventDimId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdDefaultingDependencies</Name>
				<Source><![CDATA[
    private container inventDimIdDefaultingDependencies()
    {
        return [fieldNum(InventItemBarcode, itemId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeSetupIdDefaultingDependencies</Name>
				<Source><![CDATA[
    private container barcodeSetupIdDefaultingDependencies()
    {
        return [fieldNum(InventItemBarcode, itemId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitIdDefaultingDependencies</Name>
				<Source><![CDATA[
    private container unitIdDefaultingDependencies()
    {
        return [fieldNum(InventItemBarcode, itemId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    private InventTable inventTable()
    {
        return InventTable::find(this.itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailInventTable</Name>
				<Source><![CDATA[
    private RetailInventTable retailInventTable()
    {
        return RetailInventTable::find(this.itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimCombination</Name>
				<Source><![CDATA[
    private InventDimCombination inventDimCombination()
    {
        return InventDimCombination::find(this.itemId, this.inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    public void renamePrimaryKey()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailConnActionManagement::errorOnRename(this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        InventDimCombination inventDimCombination;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventItemBarcode, RetailVariantId):
                // The RetailVariantId is a redundant field which can be calculated from the ItemId+InventDimId. It should only be exposed in the UI
                inventDimCombination = InventDimCombination::findVariantId(this.RetailVariantId);
                if (inventDimCombination.RecId)
                {
                    if (this.itemId != inventDimCombination.ItemId)
                    {
                        this.itemId = inventDimCombination.ItemId;
                        this.defaultUnitId();
                    }

                    this.inventDimId        = inventDimCombination.InventDimId;
                    this.defaultDescription();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventItemBarcode, RetailVariantId):
                if (this.RetailVariantId && this.itemId)
                {
                    InventDimCombination inventDimCombination = InventDimCombination::findVariantId(this.RetailVariantId);

                    if (inventDimCombination.RecId && inventDimCombination.ItemId != this.itemId)
                    {
                        ret = checkFailed("@SYS133846");
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowBarcodeReuseWhenScanning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the barcode can be reused when scanning.
    /// </summary>
    /// <returns>true, if the barcode can be reused when scanning; otherwise, false.</returns>
    protected boolean allowBarcodeReuseWhenScanning()
    {
        return !this.UseForInput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be written to the database.
    /// </summary>
    /// <param name="suppressDialogs">
    /// A boolean value that indicates if dialogs should be suppressed; optional.
    /// </param>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite(boolean suppressDialogs = false)
    {
        boolean ret;
        InventItemBarcode   tmpInventItemBarcode;
        InventItemBarcode   itemBarcode;
        ret = super();
        ret = ret && this.checkProductDimensions(this.ItemId, this.inventDim());
        if (this.BarcodeSetupId)
        {
            ret = BarcodeSetup::find(this.BarcodeSetupId).validateBarcode(this.ItemBarCode) && ret;
        }
        if (this.UseForPrinting)
        {
            tmpInventItemBarcode = InventItemBarcode::findPrintByProductDimensions(this.ItemId, this.inventDim());
            if (tmpInventItemBarcode && tmpInventItemBarcode.RecId != this.RecId)
            {
                ret = checkFailed("@SYS63153");
            }
        }
        if (!this.allowBarcodeReuseWhenScanning())
        {
            tmpInventItemBarcode = InventItemBarcode::findInputBarcode(this.ItemBarCode);
            if (tmpInventItemBarcode && tmpInventItemBarcode.RecId != this.RecId)
            {
                ret = checkFailed("@SYS63158");
            }
        }

        if (this.RetailShowForItem)
        {
            tmpInventItemBarcode = InventItemBarcode::findShowForItem(this.itemId);
            if (tmpInventItemBarcode && tmpInventItemBarcode.RecId != this.RecId)
            {
                ret = checkFailed("@RET4165");
            }
        }

        if ( !suppressDialogs
            && isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && ret
            && FormDataUtil::isFormDataSource(this))
        {
            while select itemBarcode
                where   itemBarcode.ItemId == this.ItemId
                   &&   itemBarcode.ItemBarCode != this.ItemBarCode
                   &&   itemBarcode.RetailVariantId == this.RetailVariantId
                   &&   itemBarcode.UnitID == this.UnitID
                   &&   itemBarcode.RecId != this.RecId
            {
                switch (Box::yesYesAllNoCancel(strFmt("@RET4078",itemBarcode.ItemBarCode),DialogButton::No,"@RET4079", true))
                {
                    case DialogButton::YesToAll:
                        return ret;
                    case DialogButton::No:
                    case DialogButton::Cancel:
                        ret = checkFailed("@RET4080");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBarcode</Name>
				<Source><![CDATA[
    public static InventItemBarcode findBarcode(ItemBarCode itemBarCode, boolean onlyPrint, boolean onlyInput, BarcodeSetupId barcodeSetupId = '', boolean _update = false)
    {
        InventItemBarcode   inventItemBarcode;

        inventItemBarcode.selectForUpdate(_update);

        if (barcodeSetupId)
        {
            if (onlyInput && onlyPrint)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemBarCode     == itemBarCode      &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.UseForInput     == NoYes::Yes       &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes;
            }
            else if (onlyPrint)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemBarCode     == itemBarCode      &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes;
            }
            else if (onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemBarCode     == itemBarCode      &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.UseForInput     == NoYes::Yes;
            }
            else
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemBarCode     == itemBarCode      &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId;
            }
        }
        else
        {
            if (onlyInput && onlyPrint)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemBarCode     == itemBarCode  &&
                          inventItemBarcode.UseForInput     == NoYes::Yes   &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes;
            }
            else if (onlyPrint)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemBarCode     == itemBarCode  &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes;
            }
            else if (onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemBarCode     == itemBarCode  &&
                          inventItemBarcode.UseForInput     == NoYes::Yes;
            }
            else
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemBarCode     == itemBarCode;
            }
        }
        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductDimensions</Name>
				<Source><![CDATA[
    [Replaceable]
    public static InventItemBarcode findByProductDimensions(
        ItemId              _itemId,
        InventDim           _inventDimCriteria,
        boolean             _onlyPrint,
        boolean             _onlyInput,
        BarcodeSetupId      _barcodeSetupId = '',
        UnitOfMeasureSymbol _unitId = '',
        boolean             _update = false)
    {
        InventItemBarcode   inventItemBarcode;
        InventDim           inventDim;
        InventDimParm       inventDimParm;

        inventItemBarcode.selectForUpdate(_update);
        if (_itemId == '' && ItemBarcodeSkipQueryEmptyItemIdFlight::instance().isEnabled())
        {
            return inventItemBarcode;
        }

        inventDimParm = EcoResProductDimGroupSetup::newItemId(_itemId).inventDimParmActiveDimensions();
        boolean isTransactionScopeCacheEnabled = !_update && appl.ttsLevel() > 0 &&  ItemBarcodeFindUsingTransactionScopeCacheFlight::instance().isEnabled();

        str cacheScope;
        str cacheKey;

        // Fetch value from transaction scope cache
        if (isTransactionScopeCacheEnabled)
        {
            cacheScope = tableStr(InventItemBarcode);
            cacheKey = strFmt("%1#%2#%3#%4#%5#%6#%7", curext(), _itemId, _inventDimCriteria.mapKey(InventDim::dimProductDimFieldList()), int2Str(_onlyPrint),
                int2Str(_onlyInput), _barcodeSetupId, _unitId);

            if (SysTransactionScopeCache::isSet(cacheScope, cacheKey))
            {
                inventItemBarcode = SysTransactionScopeCache::get(cacheScope, cacheKey, inventItemBarcode);
                return inventItemBarcode;
            }
        }

        boolean isFindBarcodeByInventDimId = ItemBarcodeFindByProductInventDimIdFlight::instance().isEnabled();
        InventDimId  productInventDimId;

        // Calculate inventory dimension Id from product dimensions
        if (isFindBarcodeByInventDimId)
        {
            InventDim productInventDim = _inventDimCriteria.data();
            productInventDim.clearNotSelectedDim(inventDimParm);
            productInventDimId = InventDim::findOrCreate(productInventDim).InventDimId;
        }

        if (_barcodeSetupId)
        {
            if (_onlyPrint && _onlyInput)
            {
                if (!isFindBarcodeByInventDimId || !productInventDimId)
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && inventItemBarcode.BarcodeSetupId  == _barcodeSetupId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForPrinting  == NoYes::Yes
                           && inventItemBarcode.UseForInput     == NoYes::Yes
                        #InventDimExistsJoin(inventItemBarcode.inventDimId, inventDim, _inventDimCriteria, inventDimParm);
                }
                else
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && inventItemBarcode.BarcodeSetupId  == _barcodeSetupId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForPrinting  == NoYes::Yes
                           && inventItemBarcode.UseForInput     == NoYes::Yes
                           && inventItemBarcode.inventDimId     == productInventDimId;
                }
            }
            else if (_onlyPrint)
            {
                if (!isFindBarcodeByInventDimId || !productInventDimId)
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && inventItemBarcode.BarcodeSetupId  == _barcodeSetupId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForPrinting  == NoYes::Yes
                        #InventDimExistsJoin(inventItemBarcode.inventDimId, inventDim, _inventDimCriteria, inventDimParm);
                }
                else
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && inventItemBarcode.BarcodeSetupId  == _barcodeSetupId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForPrinting  == NoYes::Yes
                           && inventItemBarcode.inventDimId     == productInventDimId;
                }
            }
            else if (_onlyInput)
            {
                if (!isFindBarcodeByInventDimId || !productInventDimId)
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && inventItemBarcode.BarcodeSetupId  == _barcodeSetupId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForInput     == NoYes::Yes
                        #InventDimExistsJoin(inventItemBarcode.inventDimId, inventDim, _inventDimCriteria, inventDimParm);
                }
                else
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && inventItemBarcode.BarcodeSetupId  == _barcodeSetupId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForInput     == NoYes::Yes
                           && inventItemBarcode.inventDimId     == productInventDimId;
                }
            }
            else
            {
                if (!isFindBarcodeByInventDimId || !productInventDimId)
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && inventItemBarcode.BarcodeSetupId  == _barcodeSetupId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                        #InventDimExistsJoin(inventItemBarcode.inventDimId, inventDim, _inventDimCriteria, inventDimParm);
                }
                else
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && inventItemBarcode.BarcodeSetupId  == _barcodeSetupId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.inventDimId     == productInventDimId;
                }
            }
        }
        else
        {
            if (_onlyPrint && _onlyInput)
            {
                if (!isFindBarcodeByInventDimId || !productInventDimId)
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForPrinting  == NoYes::Yes
                           && inventItemBarcode.UseForInput     == NoYes::Yes
                        #InventDimExistsJoin(inventItemBarcode.inventDimId, inventDim, _inventDimCriteria, inventDimParm);
                }
                else
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForPrinting  == NoYes::Yes
                           && inventItemBarcode.UseForInput     == NoYes::Yes
                           && inventItemBarcode.inventDimId     == productInventDimId;
                }
            }
            else if (_onlyPrint)
            {
                if (!isFindBarcodeByInventDimId || !productInventDimId)
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForPrinting  == NoYes::Yes
                        #InventDimExistsJoin(inventItemBarcode.inventDimId, inventDim, _inventDimCriteria, inventDimParm);
                }
                else
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForPrinting  == NoYes::Yes
                           && inventItemBarcode.inventDimId     == productInventDimId;
                }
            }
            else if (_onlyInput)
            {
                if (!isFindBarcodeByInventDimId || !productInventDimId)
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForInput     == NoYes::Yes
                        #InventDimExistsJoin(inventItemBarcode.inventDimId, inventDim, _inventDimCriteria, inventDimParm);
                }
                else
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.UseForInput     == NoYes::Yes
                           && inventItemBarcode.inventDimId     == productInventDimId;
                }
            }
            else
            {
                if (!isFindBarcodeByInventDimId || !productInventDimId)
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                        #InventDimExistsJoin(inventItemBarcode.inventDimId, inventDim, _inventDimCriteria, inventDimParm);
                }
                else
                {
                    select firstonly inventItemBarcode
                        where inventItemBarcode.ItemId          == _itemId
                           && (!_unitId || inventItemBarcode.UnitID == _unitId)
                           && inventItemBarcode.inventDimId     == productInventDimId;
                }
            }
        }

        if (isTransactionScopeCacheEnabled)
        {
            SysTransactionScopeCache::set(cacheScope, cacheKey, inventItemBarcode);
        }

        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInputBarcode</Name>
				<Source><![CDATA[
    public static InventItemBarcode findInputBarcode(ItemBarCode itemBarCode, BarcodeSetupId barcodeSetupId = '', boolean _update = false)
    {
        return InventItemBarcode::findBarcode(strLTrim(itemBarCode), false, true, barcodeSetupId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItem</Name>
				<Source><![CDATA[
    public static InventItemBarcode findItem(
        ItemId              itemId,
        InventDimId         inventDimId,
        boolean             onlyPrint,
        boolean             onlyInput,
        BarcodeSetupId      barcodeSetupId = '',
        boolean             _update = false)
    {
        InventItemBarcode   inventItemBarcode;

        inventItemBarcode.selectForUpdate(_update);

        if (barcodeSetupId)
        {
            if (onlyPrint && onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId           &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.InventDimId     == inventDimId      &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes       &&
                          inventItemBarcode.UseForInput     == NoYes::Yes;
            }
            else if (onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId           &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.InventDimId     == inventDimId      &&
                          inventItemBarcode.UseForInput     == NoYes::Yes;
            }
            else if (onlyPrint)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId           &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.InventDimId     == inventDimId      &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes;
            }
            else
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId      == itemId               &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.InventDimId == inventDimId;
            }
        }
        else
        {
            if (onlyPrint && onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId       &&
                          inventItemBarcode.InventDimId     == inventDimId  &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes   &&
                          inventItemBarcode.UseForInput     == NoYes::Yes;
            }
            else if (onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId       &&
                          inventItemBarcode.InventDimId     == inventDimId  &&
                          inventItemBarcode.UseForInput     == NoYes::Yes;
            }
            else if (onlyPrint)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId       &&
                          inventItemBarcode.InventDimId     == inventDimId  &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes;
            }
            else
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId      == itemId       &&
                          inventItemBarcode.InventDimId == inventDimId;
            }
        }
        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemId</Name>
				<Source><![CDATA[
    [Replaceable]
    public static InventItemBarcode findItemId(
        ItemId              itemId,
        boolean             onlyPrint,
        boolean             onlyInput,
        BarcodeSetupId      barcodeSetupId = '',
        boolean             _update = false)
    {
        InventItemBarcode   inventItemBarcode;
        InventTableModule   inventTableModule;

        select firstonly UnitId from inventTableModule
            where inventTableModule.ItemId == itemId
            && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
            && inventTableModule.DataAreaId == curExt();

        inventItemBarcode.selectForUpdate(_update);

        if (barcodeSetupId)
        {
            if (onlyPrint && onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId           &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes       &&
                          inventItemBarcode.UseForInput     == NoYes::Yes       &&
                          inventItemBarcode.InventDimId     == InventDim::inventDimIdBlank()  &&
                          inventItemBarcode.UnitID          == inventTableModule.UnitId;

            }
            else if (onlyPrint)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId           &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes       &&
                          inventItemBarcode.InventDimId     == InventDim::inventDimIdBlank()  &&
                          inventItemBarcode.UnitID          == inventTableModule.UnitId;
            }
            else if (onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId           &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.UseForInput     == NoYes::Yes       &&
                          inventItemBarcode.InventDimId     == InventDim::inventDimIdBlank()  &&
                          inventItemBarcode.UnitID          == inventTableModule.UnitId;
            }
            else
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId           &&
                          inventItemBarcode.BarcodeSetupId  == barcodeSetupId   &&
                          inventItemBarcode.InventDimId     == InventDim::inventDimIdBlank()  &&
                          inventItemBarcode.UnitID          == inventTableModule.UnitId;
            }
        }
        else
        {
            if (onlyPrint && onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId       &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes   &&
                          inventItemBarcode.UseForInput     == NoYes::Yes   &&
                          inventItemBarcode.InventDimId     == InventDim::inventDimIdBlank()  &&
                          inventItemBarcode.UnitID          == inventTableModule.UnitId;
            }
            else if (onlyPrint)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId       &&
                          inventItemBarcode.UseForPrinting  == NoYes::Yes   &&
                          inventItemBarcode.InventDimId     == InventDim::inventDimIdBlank()  &&
                          inventItemBarcode.UnitID          == inventTableModule.UnitId;
            }
            else if (onlyInput)
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId       &&
                          inventItemBarcode.UseForInput     == NoYes::Yes   &&
                          inventItemBarcode.InventDimId     == InventDim::inventDimIdBlank()  &&
                          inventItemBarcode.UnitID          == inventTableModule.UnitId;
            }
            else
            {
                select firstonly inventItemBarcode
                    where inventItemBarcode.ItemId          == itemId       &&
                          inventItemBarcode.InventDimId     == InventDim::inventDimIdBlank()  &&
                          inventItemBarcode.UnitID          == inventTableModule.UnitId;
            }
        }

        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrintByProductDimensions</Name>
				<Source><![CDATA[
    public static InventItemBarcode findPrintByProductDimensions(ItemId itemId, InventDim inventDimCriteria, BarcodeSetupId barcodeSetupId = '', boolean _update = false)
    {
        return InventItemBarcode::findByProductDimensions(itemId, inventDimCriteria, true, false, barcodeSetupId, '', _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrintItemId</Name>
				<Source><![CDATA[
    public static InventItemBarcode findPrintItemId(ItemId itemId, BarcodeSetupId barcodeSetupId = '', boolean _update = false)
    {
        return InventItemBarcode::findItemId(itemId, true, false, barcodeSetupId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchBarcode</Name>
				<Source><![CDATA[
    public static InventItemBarcode findPurchBarcode(ItemId itemId, BarcodeSetupId barcodeSetupId = '')
    {
        InventItemBarcode   inventItemBarcode = InventItemBarcode::findItemId(itemId, false, true, barcodeSetupId);

        if (!inventItemBarcode)
        {
            inventItemBarcode = InventItemBarcode::findItemId(itemId, false, false, barcodeSetupId);
        }
        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchBarcodeDimension</Name>
				<Source><![CDATA[
    public static InventItemBarcode findPurchBarcodeDimension(ItemId _itemId, InventDim _inventDim, BarcodeSetupId _barcodeSetupId = '', UnitOfMeasureSymbol _unitId = '')
    {
        InventItemBarcode inventItemBarcode = InventItemBarcode::findByProductDimensions(_itemId, _inventDim, false, true, _barcodeSetupId, _unitId);

        if (!inventItemBarcode)
        {
            inventItemBarcode = InventItemBarcode::findByProductDimensions(_itemId, _inventDim, false, false, _barcodeSetupId, _unitId);
        }

        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventItemBarcode</c> table for the specified variant number
    /// and unit.
    /// </summary>
    /// <param name="itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="variantId">
    /// The ID of the variant.
    /// </param>
    /// <param name="unitId">
    /// The ID of the unit.
    /// </param>
    /// <param name="showForItem">
    /// A Boolean value that indicates whether to show the product.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventItemBarcode</c> table; otherwise, an empty record.
    /// </returns>
    public static InventItemBarcode findRetail(ItemId              itemId,
                                                      RetailVariantId     variantId,
                                                      UnitOfMeasureSymbol unitId,
                                                      RetailShowForItem   showForItem,
                                                      boolean             _update = false)
    {
        InventItemBarcode   inventItemBarcode;
        inventItemBarcode.selectForUpdate(_update);

        if (itemId && variantId && unitId)
            select firstonly inventItemBarcode
                where inventItemBarcode.ItemId              == itemId
                   && inventItemBarcode.RetailVariantId     == variantId
                   && inventItemBarcode.UnitID              == unitId
                   && inventItemBarcode.RetailShowForItem   == showForItem;

        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRetailBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>InventItemBarcode</c> table for the given bar code.
    /// </summary>
    /// <param name="itemBarCode">
    /// The ID of the bar code.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventItemBarcode</c> table; otherwise, an empty record.
    /// </returns>
    public static InventItemBarcode findRetailBarcode(ItemBarCode itemBarCode,
                                                             boolean     _update = false)
    {
        InventItemBarcode   inventItemBarcode;
        inventItemBarcode.selectForUpdate(_update);

        if (itemBarCode)
        {
            select firstonly inventItemBarcode
                where inventItemBarcode.ItemBarCode == itemBarCode;
        }
        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRetailUseForPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventItemBarcode</c> table for the specified variant and bar
    /// code.
    /// </summary>
    /// <param name="itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="variantId">
    /// The ID of the variant.
    /// </param>
    /// <param name="unitId">
    /// The ID of the unit.
    /// </param>
    /// <param name="useForPrinting">
    /// A Boolean value that indicates whether to use for printing.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventItemBarcode</c> table; otherwise, an empty record.
    /// </returns>
    public static InventItemBarcode findRetailUseForPrinting(ItemId              itemId,
                                                                    RetailVariantId     variantId,
                                                                    UnitOfMeasureSymbol unitId,
                                                                    UseForPrinting      useForPrinting,
                                                                    boolean             _update = false)
    {
        InventItemBarcode   inventItemBarcode;

        inventItemBarcode.selectForUpdate(_update);

        if (itemId && unitId)
        {
            select firstonly inventItemBarcode
                where inventItemBarcode.ItemId          == itemId
                   && inventItemBarcode.RetailVariantId == variantId
                   && inventItemBarcode.UnitID          == unitId
                   && inventItemBarcode.UseForPrinting  == useForPrinting;
        }
        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesBarcode</Name>
				<Source><![CDATA[
    public static InventItemBarcode findSalesBarcode(ItemId itemId, BarcodeSetupId barcodeSetupId = '')
    {
        InventItemBarcode   inventItemBarcode = InventItemBarcode::findItemId(itemId, true, false, barcodeSetupId);

        if (!inventItemBarcode)
        {
            inventItemBarcode = InventItemBarcode::findItemId(itemId, false, false, barcodeSetupId);
        }
        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRetailBarcodeSetupId</Name>
				<Source><![CDATA[
    public server static BarcodeSetupId findRetailBarcodeSetupId (ItemId _itemId, ItemBarCode _itemBarCode, RetailVariantId  _variantId )
    {
        InventItemBarcode   inventItemBarcode;
        inventItemBarcode.selectForUpdate(false);

        if (_itemBarCode)
        {
            select firstonly barcodeSetupId from inventItemBarcode
                where inventItemBarcode.ItemBarCode == _itemBarCode
                    && inventItemBarcode.ItemId == _itemId
                    && inventItemBarcode.RetailVariantId == _variantId;
        }
        
        return inventItemBarcode.barcodeSetupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesBarcodeDimension</Name>
				<Source><![CDATA[
    public static InventItemBarcode findSalesBarcodeDimension(ItemId _itemId, InventDim _inventDim, BarcodeSetupId _barcodeSetupId = '', UnitOfMeasureSymbol _unitId = '')
    {
        InventItemBarcode inventItemBarcode = InventItemBarcode::findByProductDimensions(_itemId, _inventDim, true, false, _barcodeSetupId, _unitId);

        if (!inventItemBarcode)
        {
            inventItemBarcode = InventItemBarcode::findByProductDimensions(_itemId, _inventDim, false, false, _barcodeSetupId, _unitId);
        }

        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findShowForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventItemBarcode</c> table for the specified item.
    /// </summary>
    /// <param name="itemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventItemBarcode</c> table; otherwise, an empty record.
    /// </returns>
    public static InventItemBarcode findShowForItem(ItemId  itemId,
                                                           boolean _update = false)
    {
        InventItemBarcode   inventItemBarcode;

        inventItemBarcode.selectForUpdate(_update);

        if (itemId)
        {
            select firstonly inventItemBarcode
                where inventItemBarcode.ItemId              == itemId
                   && inventItemBarcode.RetailShowForItem   == true;
        }
        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        EcoResProductBarcodeAssociation::insertWithInventItemBarcode(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispBarcodeMaskId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the barcode mask based on BarcodeSetupId.
    /// </summary>
    /// <param name = "_inventItemBarcode">The <c>InventItemBarcode</c> table buffer.</param>
    /// <returns>The Barcode mask value.</returns>
    public display RetailBarcodeMask dispBarcodeMaskId(InventItemBarcode _inventItemBarcode)
    {
        return BarcodeSetup::find(_inventItemBarcode.barcodeSetupId).RetailBarcodeMask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductDimensions</Name>
				<Source><![CDATA[
    protected boolean checkProductDimensions(ItemId _itemId, InventDim _inventDim)
    {
        return InventTable::checkProductDimensions(_ItemId, _inventDim);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123975</DeveloperDocumentation>
	<FormRef>InventItemBarcode</FormRef>
	<Label>@SYS63146</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>itemId</TitleField1>
	<TitleField2>itemBarCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailDiscountCode</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RetailDiscountCode</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemBarCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>barcodeSetupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemBarCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailVariantId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Barcode</Name>
			<Label>@SYS24296</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemBarCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>barcodeSetupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>useForPrinting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>useForInput</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailShowForItem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>barcodeSetupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BarcodeSetupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>Blocked</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>itemBarCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBarCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>itemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetailShowForItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailShowForItem</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailVariantId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailVariantId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>useForInput</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UseForInput</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>useForPrinting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UseForPrinting</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BarcodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>itemBarCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BarcodeSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BarcodeSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>barcodeSetupId</Name>
					<Field>barcodeSetupId</Field>
					<RelatedField>barcodeSetupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BarcodeSetupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventDimId</Name>
					<Field>inventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDimCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailVariantId</Name>
					<SourceEDT>RetailVariantId</SourceEDT>
					<Field>RetailVariantId</Field>
					<RelatedField>RetailVariantId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<EntityRelationshipRole>@SYS123828</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>itemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>itemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>