<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalBudgetLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the totals of the <c>OriginalBudget</c> field, the <c>CommittedRevisions</c> field, the
    /// <c>UncommittedRevisions</c> field and the <c>TotalBudget</c> fields.
    /// </summary>
    /// <param name="_projId">
    /// The project ID of the top level of the desired hierarchy.
    /// </param>
    /// <returns>
    /// A buffer of the <c>ProjBudgetLine</c> table that contains the total of the <c>OriginalBudget</c>
    /// field, the <c>CommittedRevisions</c> field, the <c>UncommittedRevisions</c> field and the
    /// <c>TotalBudget</c> fields.
    /// </returns>
    public ProjBudgetLine calcTotalBudgetLine(ProjId _projId)
    {
        ProjBudgetLine  projBudgetLineLocal;
        #define.Star("*");

        switch (this.ProjBudgetLineType)
            {
                case ProjBudgetLineType::Cost:
                            select sum(OriginalBudget),sum(CommittedRevisions),sum(UncommittedRevisions), sum(TotalBudget)
                            from projBudgetLineLocal
                            where projBudgetLineLocal.ProjBudget == this.ProjBudget
                            &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Cost
                            &&    projBudgetLineLocal.ProjId like _projId + #Star;
                            break;

                case ProjBudgetLineType::Revenue:
                            select sum(OriginalBudget),sum(CommittedRevisions),sum(UncommittedRevisions), sum(TotalBudget)
                            from projBudgetLineLocal
                            where projBudgetLineLocal.ProjBudget == this.ProjBudget
                            &&    projBudgetLineLocal.ProjBudgetLineType == ProjBudgetLineType::Revenue
                            &&    projBudgetLineLocal.ProjId like _projId + #Star;
                            break;
            }

        return projBudgetLineLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayActivityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the Activity.
    /// </summary>
    /// <param name="_projBudgetLine">
    /// The record of <c>ProjBudgetLine</c> table.
    /// </param>
    /// <returns>
    /// The name of the Activity.
    /// </returns>
    public display Name displayActivityName(ProjBudgetLine _projBudgetLine)
    {
        smmActivities smmActivities;

        select firstonly Purpose from smmActivities
                where smmActivities.ActivityNumber == _projBudgetLine.ActivityNumber;

        return smmActivities.Purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjCostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value of the <c>ProjCostType</c> type that is specified by the <c>ProjTransType</c> field
    /// of a record in the <c>ProjBudgetLine</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to update the <c>ProjTransType</c> field of the
    /// <c>ProjBudgetLine</c> table.
    /// </param>
    /// <param name="_projCostType">
    /// A <c>ProjCostType</c> type value that indicates the value of <c>ProjTransType</c> field of the
    /// <c>ProjBudgetLine</c> table.
    /// </param>
    /// <returns>
    /// A value of the <c>ProjCostType</c> type that indicates the value of the revenue transaction type.
    /// </returns>
    public edit ProjCostType editProjCostType(boolean _set, ProjCostType _projCostType)
    {
        ProjCostType projCostType;

        projCostType = this.ProjBudgetLineMap::editProjCostType(_set, _projCostType);

        return projCostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjRevenueType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value of the <c>ProjRevenueType</c> type that is specified by the <c>ProjTransType</c>
    /// field of a record in the <c>ProjBudgetLine</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to update the <c>ProjTransType</c> field of the
    /// <c>ProjBudgetLine</c> table.
    /// </param>
    /// <param name="_projRevenueType">
    /// A value of the <c>ProjRevenueType</c> type that indicates the value of the <c>ProjTransType</c>
    /// field of the <c>ProjBudgetLine</c> table.
    /// </param>
    /// <returns>
    /// A value of the <c>ProjRevenueType</c> type that determines the value of a revenue transaction type.
    /// </returns>
    public edit ProjRevenueType editProjRevenueType(boolean _set, ProjRevenueType _projRevenueType)
    {
        ProjRevenueType projRevenueType;

        projRevenueType = this.ProjBudgetLineMap::editProjRevenueType(_set, _projRevenueType);

        return projRevenueType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcTotalBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>TotalBudget</c> field of the <c>ProjBudgetLine</c> table.
    /// </summary>
    private void recalcTotalBudget ()
    {
        this.TotalBudget = this.OriginalBudget + this.CommittedRevisions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining budget amount of a record.
    /// </summary>
    /// <returns>
    /// The remaining budget amount.
    /// </returns>
    AmountCur remainingBudget()
    {
        ProjBudgetAllocationLine    projBudgetAllocationLine;

        select sum(TotalAllocationAmount), sum(ReductionAmount)
            from projBudgetAllocationLine
            where projBudgetAllocationLine.ProjBudgetLine == this.RecId;

        return projBudgetAllocationLine.TotalAllocationAmount - projBudgetAllocationLine.ReductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(ProjBudgetLine, CategoryId) :
                    ret = this.ProjBudgetLineMap::validateField(_fieldIdToCheck);
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && ret && !ProjCategory::validCategory(this.CategoryId))
                    {
                        ret = checkFailed("@PSA11059");
                    }
                    break;

                case fieldNum(ProjBudgetLine, ProjId) :
                    ret = this.validateProjBudgetProjId();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjBudgetProjId</Name>
				<Source><![CDATA[
    private boolean validateProjBudgetProjId()
    {
        ProjBudget  projBudget;
        ProjTable   projTable;

        boolean     ret;

        projBudget = ProjBudget::find(this.ProjBudget);
        projTable = ProjTable::find(projBudget.RootProjId);

        switch (projTable.ProjBudgetManagement)
        {
            case ProjBudgetManagement::Independent:
                ret = this.ProjId == projBudget.RootProjId;
                break;
            case ProjBudgetManagement::None:
            default:
                ret = this.ProjId like projBudget.RootProjId + "@SYS35668";
        }

        if (!ret)
        {
            ret = checkFailed("@SYS331106");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;
        RecId   recId;
        ProjTable           projTable           = ProjTable::find(this.ProjId);
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();

        if (this.ProjBudgetLineType == ProjBudgetLineType::Revenue && this.ProjTransType == ProjTransType::Revenue &&
            !ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projTable, this.ProjTransType))
        {
            error("@SYP4881400");
            this.ProjTransType = ProjTransType::Hour;
            this.CategoryId = "";
            this.OriginalBudget = 0.0;
            ret = false;
        }
        else
        {
            recId = ProjBudgetLine::findRecord(this.ProjId, this.ProjTransType, this.CategoryId, this.ProjBudget, this.ProjBudgetLineType, this.ActivityNumber).RecId;
            if (!recId)
            {
            ret = false;
            }
        }

        if (ret && !this.RecId)
        {
            ret = checkFailed(strFmt("@SYS307225",this.CategoryId));
        }
        else
        {
            ret = true;
        }

        if (ret)
        {
            if (!this.CategoryId)
            {
                ret = checkFailed(strFmt("@SYS84753","@SYS69410"));
            }
            else
            {
                ret = projValCheckTrans.validateMandatory(this);
            }
        }

        if (ret)
        {
            if (!projTable.status().checkRule(ProjStatusRule::CreateForecast))
            {
                ret = checkFailed(strFmt("@SYS53010", projTable.Stage()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>ProjBudgetLine</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetLine</c> table record to be checked for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist( RecId _recId)
    {
        boolean ret = true;

        if (!ProjBudgetLine::exist(_recId))
        {
            ret = checkFailed(strFmt(ProjBudgetLine::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertProjTransType2ProjBudgetLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value of the <c>ProjTransType</c> type that is specified by the <c>ProjTransType</c>
    /// field of a record in the <c>ProjBudgetLine</c> table.
    /// </summary>
    /// <param name="_projBudgetTransType">
    /// A value of the <c>ProjTransType</c> type that indicates the value of the <c>ProjTransType</c> field
    /// of the <c>ProjBudgetLine</c> table.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjBudgetLine</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetLineType convertProjTransType2ProjBudgetLineType(ProjBudgetTransType _projBudgetTransType)
    {
        ProjBudgetLineType projBudgetLineType;

        switch (_projBudgetTransType)
        {
            case ProjBudgetTransType::ExpenseRevenues:
            case ProjBudgetTransType::Fees:
            case ProjBudgetTransType::HourRevenues:
            case ProjBudgetTransType::ItemRevenues:
                projBudgetLineType = ProjBudgetLineType::Revenue;
            break;

            case ProjBudgetTransType::ExpenseCosts:
            case ProjBudgetTransType::HourCosts:
            case ProjBudgetTransType::ItemCosts:
                projBudgetLineType = ProjBudgetLineType::Cost;
            break;
        }

        return projBudgetLineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertProjTransType2ProjBudgetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the specified <c>ProjTransType</c> and <c>ProjBudgetLineType</c> values into a
    /// <c>ProjBudgetTransType</c> value.
    /// </summary>
    /// <param name="_projTransType">
    /// A <c>ProjTransType</c> value that determines the transaction type.
    /// </param>
    /// <param name="_projBudgetLineType">
    /// A <c>ProjBudgetLineType</c> value that determines the budget line type.
    /// </param>
    /// <returns>
    /// A <c>ProjBudgetTransType</c> value.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The <c>ProjBudgetLineType</c> value is not valid.
    /// </exception>
    public static ProjBudgetTransType convertProjTransType2ProjBudgetTransType(ProjTransType _projTransType,ProjBudgetLineType _projBudgetLineType)
    {
        ProjBudgetTransType projBudgetTransType;

        switch ( _projBudgetLineType)
        {
            case ProjBudgetLineType::Cost:
                    switch (_projTransType)
                    {
                        case ProjTransType::Cost:
                                                projBudgetTransType = ProjBudgetTransType::ExpenseCosts;
                                                break;
                        case ProjTransType::Hour:
                                                projBudgetTransType = ProjBudgetTransType::HourCosts;
                                                break;
                        case ProjTransType::Item:
                                                projBudgetTransType = ProjBudgetTransType::ItemCosts;
                                                break;
                        default:
                            projBudgetTransType = ProjBudgetTransType::ExpenseCosts;
                            break;
                    }
                    break;

            case ProjBudgetLineType::Revenue:
                    switch (_projTransType)
                    {
                        case ProjTransType::Cost:
                                                projBudgetTransType = ProjBudgetTransType::ExpenseRevenues;
                                                break;
                        case ProjTransType::Hour:
                                                projBudgetTransType = ProjBudgetTransType::HourRevenues;
                                                break;
                        case ProjTransType::Item:
                                                projBudgetTransType = ProjBudgetTransType::ItemRevenues;
                                                break;
                        case ProjTransType::Revenue:
                                                projBudgetTransType = ProjBudgetTransType::Fees;
                                                break;
                        default:
                            projBudgetTransType = ProjBudgetTransType::ExpenseRevenues;
                            break;
                    }
                    break;
            default:
                throw error(strFmt("@SYS68912",funcName()));
        }
        return projBudgetTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ProjBudgetLine</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetLine</c> table record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     projBudgetLine
                 where
                     projBudgetLine.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetLine</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjBudgetLine</c> table; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetLine find(
        RecId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetLine    projBudgetLine;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetLine.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            projBudgetLine.selectForUpdate(_forUpdate);

            select firstonly projBudgetLine
                where projBudgetLine.RecId == _recId;
        }

        return projBudgetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetLine</c> table.
    /// </summary>
    /// <param name="_projId">
    /// A <c>ProjId</c> type value that determines the value of <c>ProjId</c> field of the
    /// <c>ProjBudgetLine</c> table.
    /// </param>
    /// <param name="_projTransType">
    /// A <c>ProjTransType</c> type value that determines the value of <c>ProjTransType</c> field of the
    /// <c>ProjBudgetLine</c> table.
    /// </param>
    /// <param name="_categoryId">
    /// The <c>CategoryId</c> record ID of the <c>ProjBudgetLine</c> table to find.
    /// </param>
    /// <param name="_projBudget">
    /// The <c>projBudget</c> record ID of the <c>ProjBudgetLine</c> table to find.
    /// </param>
    /// <param name="_projBudgetLineType">
    /// A <c>ProjBudgetLineType</c> type value that determines the value of <c>ProjBudgetLineType</c> field
    /// of the <c>ProjBudgetLine</c> table.
    /// </param>
    /// <param name="_activityNumber">
    /// The activity number of the <c>ProjBudgetLine</c> table to find.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetLine</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetLine findRecord(
        ProjId          _projId,
        ProjTransType   _projTransType,
        CategoryId      _categoryId,
        RecId           _projBudget,
        ProjBudgetLineType _projBudgetLineType,
        ProjActivityNumber _activityNumber)
    {
        ProjBudgetLine      projBudgetLine;

        select projBudgetLine
             where  projBudgetLine.ProjId == _projId &&
                    projBudgetLine.ProjTransType == _projTransType &&
                    projBudgetLine.CategoryId == _categoryId &&
                    projBudgetLine.ActivityNumber == _activityNumber &&
                    projBudgetLine.ProjBudget == _projBudget &&
                    projBudgetLine.ProjBudgetLineType == _projBudgetLineType;

        return projBudgetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProjTransType</c> type value that is specified by the <c>ProjTransType</c> field of a record in the <c>ProjBudgetLine</c> table.
    /// </summary>
    /// <param name="_projBudgetTransType">
    /// A <c>ProjTransType</c> type value that determines the value of <c>ProjTransType</c> field of the <c>ProjBudgetLine</c> table.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetLine</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjTransType getProjTransType(ProjBudgetTransType _projBudgetTransType)
    {
        ProjTransType projTransType;

        switch (_projBudgetTransType)
        {
            case ProjBudgetTransType::ExpenseRevenues:
            case ProjBudgetTransType::ExpenseCosts:
                projTransType = ProjTransType::Cost;
            break;

            case ProjBudgetTransType::HourCosts:
            case ProjBudgetTransType::HourRevenues:
                projTransType = ProjTransType::Hour;
            break;

            case ProjBudgetTransType::ItemCosts:
            case ProjBudgetTransType::ItemRevenues:
                projTransType = ProjTransType::Item;
            break;

            case ProjBudgetTransType::Fees:
                projTransType = ProjTransType::Revenue;
        }

        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCategoriesByProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the category ID look up.
    /// </summary>
    /// <param name="_ctrl">
    /// An object of the <c>FormStringControl</c> type that determines from which control this method is
    /// called.
    /// </param>
    /// <param name="_projTransType">
    /// The transaction type on which record to be filter.
    /// </param>
    /// <param name="_projId">
    /// The project id on which project/category validation is imposed.
    /// </param>
    /// <param name="_tableNumber">
    /// TableNumber for building query on projCategoryLookup.
    /// </param>
    public static void lookupCategoriesByProject(
        FormStringControl _ctrl,
        ProjTransType _projTransType,
        ProjId _projId,
        TableId _tableNumber)
    {
        SysTableLookup          transCategoriesLookup;
        Query                   query = new Query();
        ProjCategoryLookup      projCategoryLookup;

        transCategoriesLookup =
            SysTableLookup::newParameters(tableNum(ProjCategory), _ctrl, true);
        transCategoriesLookup.addLookupfield(fieldNum(ProjCategory, CategoryId));
        transCategoriesLookup.addLookupfield(fieldNum(ProjCategory, Name));
        transCategoriesLookup.addLookupfield(fieldNum(ProjCategory, CategoryType));

        projCategoryLookup = new ProjCategoryLookup();
        projCategoryLookup.parmCategoryType(
            ProjCategory::transType2CategoryType(_projTransType));
        projCategoryLookup.parmIsIntercompany(false);

        projCategoryLookup.parmFilterEstimate(NoYes::Yes);
        projCategoryLookup.parmFilterIndirectComponent(NoYes::Yes);

        query = projCategoryLookup.buildQuery(_tableNumber, _projId, 0);

        transCategoriesLookup.parmQuery(query);

        transCategoriesLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTransCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the category ID lookup.
    /// </summary>
    /// <param name="_ctrl">
    /// An object of the <c>FormStringControl</c> type that determines from which control this method is
    /// called.
    /// </param>
    /// <param name="_transType">
    /// The transaction type that indicates on which record to filter.
    /// </param>
    /// <param name="_projBudget">
    /// The record ID of the project budget.
    /// </param>
    public static void lookupTransCategories(FormStringControl _ctrl, ProjBudgetTransType _transType, RecId _projBudget)
    {
        SysTableLookup          transCategoriesLookup;
        Query                   query = new Query();
        QueryBuildDataSource    projCategoryQbds, budgetLineQbds;
        QueryBuildRange         queryBuildRange;
        ProjBudgetLineType      projBudgetLineType;
        ProjTransType           projTransType;

        projTransType       = ProjBudgetLine::getProjTransType(_transType);

        projBudgetLineType  = ProjBudgetLine::convertProjTransType2ProjBudgetLineType(_transType);

        transCategoriesLookup = SysTableLookup::newParameters(tableNum(ProjCategory), _ctrl);
        transCategoriesLookup.addLookupfield(fieldNum(ProjCategory, CategoryId));

        projCategoryQbds = query.addDataSource(tableNum(ProjCategory));

        budgetLineQbds = projCategoryQbds.addDataSource(tableNum(ProjBudgetLine));
        budgetLineQbds.addLink(fieldNum(ProjCategory, CategoryId), fieldNum(ProjBudgetLine, CategoryId));
        budgetLineQbds.joinMode(JoinMode::ExistsJoin);

        queryBuildRange = budgetLineQbds.addRange(fieldNum(ProjBudgetLine, ProjBudgetLineType));
        queryBuildRange.value(enum2str(projBudgetLineType));

        queryBuildRange = budgetLineQbds.addRange(fieldNum(ProjBudgetLine, ProjTransType));
        queryBuildRange.value(enum2str(projTransType));

        queryBuildRange = budgetLineQbds.addRange(fieldNum(ProjBudgetLine, ProjBudget));
        queryBuildRange.value(SysQuery::value(_projBudget));

        transCategoriesLookup.parmQuery(query);

        transCategoriesLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS153507</DeveloperDocumentation>
	<Label>@SYS153346</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>CategoryId</TitleField1>
	<TitleField2>ProjBudgetLineType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProjBudgetLineIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>ProjBudgetLineIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjBudgetAllocationLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjBudgetAllocationLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjBudgetRevisionLine</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjBudgetRevisionLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommittedRevisions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UncommittedRevisions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalBudget</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetLineType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommittedRevisions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UncommittedRevisions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalBudget</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjAllocationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetLineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<Label>@SYS38381</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CategoryId</ExtendedDataType>
			<Label>@SYS69410</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CommittedRevisions</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS325176</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalBudget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS103933</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjAllocationMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjAllocationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudget</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS15292</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjBudgetLineType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjBudgetLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Label>@SYS80304</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>ProjTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalBudget</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS103934</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UncommittedRevisions</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS325187</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjBudgetLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudget</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjBudgetLineType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjBudgetLineType</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudgetLineType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ProjBudgetLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransType</MapField>
					<MapFieldTo>ProjTransType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParentRecId</MapField>
					<MapFieldTo>ProjBudget</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjBudgetLineType</MapField>
					<MapFieldTo>ProjBudgetLineType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CategoryTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CategoryTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CategoryTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBudgetLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>CategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudget</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudget</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetHeader</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>BudgetLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudget</Name>
					<Field>ProjBudget</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjBudgetLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Activities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ActivityNumber</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>