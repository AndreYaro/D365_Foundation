<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalRevenueDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProposalRevenueDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    display AmountCur lineAmount()
    {
        return ProjTrans::newProjProposalRevenueSale(this.projProposalRevenue(), this, this.projRevenueTransSale()).transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls methods appropriate to modified fields.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the field that is modified.
    /// </param>
    /// <remarks>
    ///    This method executes when any field in the table is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldnum(ProjProposalRevenueDetail, SalesPrice):
				ProjProposalRevenue projProposalRevenue			= this.projProposalRevenue();
				ProjProposalJour ProjProposalJour				= projProposalRevenue.projProposalJour();
				ProjFundingSourceRefId projFundingSourceRefId	= ProjProposalJour.FundingSource;
				ProjProposalId projProposalId					= ProjProposalJour.ProposalId;
				TransactionID transId							= projProposalRevenue.TransId;

                ProjRevenueTrans projRevTrans = ProjRevenueTrans::find(transId);
				AmountCur newSalesPrice           = this.SalesPrice;
				AmountCur originalSalesPrice      = CurrencyExchangeHelper::amount(projProposalRevenue.qty() * this.orig().SalesPrice, ProjProposalJour.CurrencyId);
                this.AmountCur					  = newSalesPrice;

                ProjInvoiceProposalTransUpdate::updateProposalSummaryWithCategory(projProposalId, newSalesPrice,
                                                            originalSalesPrice, projRevTrans.ProjId, projRevTrans.CategoryId);

                this.update();

                break;

            default:
            super(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalRevenue</Name>
				<Source><![CDATA[
    public ProjProposalRevenue projProposalRevenue(boolean _forUpdate = false)
    {
        return (ProjProposalRevenue::findRecId(this.ProposalRefRecId, _forUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projRevenueTransSale</Name>
				<Source><![CDATA[
    public ProjRevenueTransSale projRevenueTransSale()
    {
        return (ProjRevenueTransSale::find(this.SaleRefRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceInclTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales price including included taxes for this transaction.
    /// </summary>
    /// <param name="_includedTaxPercent_BR">
    /// Tax percentage to include in the price
    /// </param>
    /// <returns>
    /// The sales price including included taxes for this transaction.
    /// </returns>
    public display SalesPriceInclTax_BR salesPriceInclTax_BR(TaxValue _includedTaxPercent_BR = this.projProposalRevenue().IncludedTaxPercent_BR)
    {
        return this.salesPrice / (1 -  _includedTaxPercent_BR / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                 ret;
        ProjRevenueTrans        projRevenueTrans;
        AmountCur               finalLineAmount;
        ProjTrans               projTrans;
        ProjFundingSourceRefId  fundingSource;

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(ProjProposalRevenueDetail, SalesPrice):
                projRevenueTrans  = this.projRevenueTransSale().projRevenueTrans();
                projTrans         = ProjTrans::construct(projRevenueTrans);
                finalLineAmount   = this.SalesPrice - this.orig().SalesPrice;
                fundingSource     = this.projProposalRevenue().projProposalJour().FundingSource;

                if (!this.verifyAndUpdateFundingLimit(projTrans, finalLineAmount, fundingSource))
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyAndUpdateFundingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies and updates funding limit if the new line amount is within the funding limit.
    /// </summary>
    /// <param name="_projTrans">
    /// The <c>ProjTrans</c> record to verify and update.
    /// </param>
    /// <param name="_lineAmount">
    /// The line amount to check.
    /// </param>
    /// <param name="_fundingsource">
    /// The <c>RefId</c> value of the funding source.
    /// </param>
    /// <returns>
    /// True if the line amount is within the funding limits; otherwise, false.
    /// </returns>
    public boolean verifyAndUpdateFundingLimit(ProjTrans _projTrans, AmountCur _lineAmount, ProjFundingSourceRefId _fundingsource)
    {
        if (this.SalesPrice != this.orig().SalesPrice && 
            !ProjInvoiceProposalTransUpdate::validateFundingLimit(_lineAmount,
                                                                _projTrans,
                                                                _fundingsource))
        {
            return  checkFailed("@SYS136009");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjProposalRevenueDetail find(RefRecId _saleRefRecId, ProjProposalId _proposalId = '', boolean _forUpdate = false)
    {
        ProjProposalId              proposalId = _proposalId;
        ProjProposalRevenue         projProposalRevenue = null;
        ProjProposalRevenueDetail   projProposalRevenueDetail = null;

        if (! proposalId)
        {
            proposalId  = ProjProposalRevenueDetail::findActiveProposalId(_saleRefRecId);
        }

        projProposalRevenueDetail.selectForUpdate(_forUpdate);

        if (_saleRefRecId && proposalId)
        {
            select projProposalRevenueDetail
                where projProposalRevenueDetail.SaleRefRecId == _saleRefRecId
                    join ProposalId, RecId from projProposalRevenue
                        where projProposalRevenue.RecId == projProposalRevenueDetail.ProposalRefRecId &&
                            projProposalRevenue.ProposalId == proposalId;
        }

        return projProposalRevenueDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveProposalId</Name>
				<Source><![CDATA[
    public static ProjProposalId findActiveProposalId(RefRecId _saleRefRecId)
    {
        RefRecId                    saleRefRecId = _saleRefRecId;
        ProjProposalId              proposalId;
        ProjRevenueTransSale        projRevenueTransSale = ProjRevenueTransSale::find(_saleRefRecId);
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjProposalJour            projProposalJour;
        ProjInvoiceRevenue          projInvoiceRevenue;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;

        if (projRevenueTransSale.TransStatus   == ProjTransStatus::Posted      ||
            projRevenueTransSale.TransStatus   == ProjTransStatus::Adjusted    ||
            projRevenueTransSale.TransStatus   == ProjTransStatus::Estimated   ||
            projRevenueTransSale.TransStatus   == ProjTransStatus::Eliminated)
        {
            return '';
        }

    //  test if only one proposal return this
        select count(RecId) from projProposalRevenueDetail
            where projProposalRevenueDetail.SaleRefRecId  == saleRefRecId;

        if (projProposalRevenueDetail.RecId <= 1)
        {
            select firstonly projProposalRevenueDetail
                where projProposalRevenueDetail.SaleRefRecId == saleRefRecId
                    join projProposalRevenue
                        where projProposalRevenue.RecId == projProposalRevenueDetail.ProposalRefRecId;

            proposalId = projProposalRevenue.ProposalId;
        }
        else
        {
    //  test if no invoice exists for proposal - return this
            select projProposalRevenueDetail
                where projProposalRevenueDetail.SaleRefRecId == _saleRefRecId
                    join projProposalRevenue
                        where projProposalRevenue.RecId == projProposalRevenueDetail.ProposalRefRecId
                        exists join projProposalJour
                            where projProposalJour.ProposalId == projProposalRevenue.ProposalId
                            notexists join projInvoiceRevenue
                                where projInvoiceRevenue.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                join projInvoiceRevenueDetail
                                    where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                                       && projInvoiceRevenueDetail.SaleRefRecId == projProposalRevenueDetail.SaleRefRecId;

            if (projProposalRevenue)
            {
                proposalId = projProposalRevenue.ProposalId;
            }
            else
            {
    //  test if invoice with no-ref exists for proposal - return this
                select RecId from projProposalRevenueDetail
                    where projProposalRevenueDetail.SaleRefRecId == _saleRefRecId
                        join projProposalRevenue
                            where projProposalRevenue.RecId == projProposalRevenueDetail.ProposalRefRecId
                            exists join projProposalJour
                                where projProposalJour.ProposalId == projProposalRevenue.ProposalId
                                join RecId from projInvoiceRevenue
                                    where projInvoiceRevenue.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                    join RecId from projInvoiceRevenueDetail
                                    where  projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                                       &&  projInvoiceRevenueDetail.SaleRefRecId == _saleRefRecId
                                       && !projInvoiceRevenueDetail.RefRecId;

                if (projProposalRevenue)
                {
                    proposalId  = projProposalRevenue.ProposalId;
                }
            }
        }

        return proposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposaleFromTrans</Name>
				<Source><![CDATA[
    public static ProjProposalRevenueDetail initProposaleFromTrans(ProjRevenueTransSale _projRevenueTransSale)
    {
        ProjProposalRevenueDetail projProposalRevenueDetail;

        projProposalRevenueDetail.SaleRefRecId    = _projRevenueTransSale.RecId;
        projProposalRevenueDetail.SalesPrice      = _projRevenueTransSale.SalesPrice;
        projProposalRevenueDetail.AmountCur       = _projRevenueTransSale.LineAmount;

        return projProposalRevenueDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // <GTE>
        ProjProposalRevenueDetail orig = this.orig();
        // </GTE>

        super();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && this.SalesPrice != orig.SalesPrice)
        {
            this.projProposalRevenue().markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS320568</DeveloperDocumentation>
	<Label>@SYS55264</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SaleRefRecId</TitleField1>
	<TitleField2>SalesPrice</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Proposal</Name>
			<Label>@SYS26457</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSARetentionPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProposalRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSARetentionPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@PSA11241</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SaleRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProposalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SaleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SaleRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProjProposalRevenue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjProposalRevenue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProposalRefRecId</Name>
					<Field>ProposalRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjRevenueTransSale</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjRevenueTransSale</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SaleRefRecId</Name>
					<Field>SaleRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>