<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTmpInvoiceInfoTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendTmpInvoiceInfoTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the table by populating it with pending invoices.
    /// </summary>
    /// <param name="_inventTrans">
    ///    A table buffer instance that relates to the <c>InventTrans</c> table.
    /// </param>
    /// <remarks>
    ///    The data in the table is restricted to all the pending invoices for the specified
    ///    <c>InventTrans</c> record.
    /// </remarks>
    public void initFromInventTrans(InventTrans _inventTrans)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        VendPackingSlipTrans vendPackingSlipTrans;
        InventTransOrigin inventTransOrigin;

        vendInvoiceInfoTable.recordLevelSecurity(true);

        // Copy all active invoices into the VendTmpInvoiceInfoTable for a given InventTrans record.
        insert_recordset this (
                PurchID,
                DocumentDate,
                Num,
                Hold,
                CurrencyCode,
                VendInvoiceSaveStatus,
                InvoiceAccount,
                TableRefId,
                ParmId,
                Ordering)
            select PurchId, DocumentDate, Num, Hold, CurrencyCode, VendInvoiceSaveStatus,
                      InvoiceAccount, TableRefId, ParmId, Ordering from vendInvoiceInfoTable
                where vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                    && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                   && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
            exists join vendPackingSlipTrans
                where vendPackingSlipTrans.CostLedgerVoucher == _inventTrans.VoucherPhysical
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == _inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == vendPackingSlipTrans.InventTransId
            exists join vendInvoiceInfoSubLine
                where vendInvoiceInfoSubLine.LineRefRecId == vendInvoiceInfoLine.RecId
                   && vendInvoiceInfoSubLine.JournalRefRecId == vendPackingSlipTrans.RecId
                   && vendInvoiceInfoSubLine.JournalRefTableId == vendPackingSlipTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the table by populating it with pending invoices.
    /// </summary>
    /// <param name="_purchTable">
    ///    A table buffer instance that relates to the <c>PurchTable</c> table.
    /// </param>
    /// <remarks>
    ///    The data in the table is restricted to all the pending invoices for the specified purchase order.
    /// </remarks>
    public void initFromPurchTable(PurchTable _purchTable)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        vendInvoiceInfoTable.recordLevelSecurity(true);

        //Copy all active invoices into the tmpPurchParmTable for a given purchase order.
        insert_recordset this (
                PurchID,
                DocumentDate,
                Num,
                Hold,
                CurrencyCode,
                VendInvoiceSaveStatus,
                InvoiceAccount,
                VendInvoiceGroup,
                VendPaymentGroup,
                TableRefId,
                ParmId,
                Ordering)
            select PurchId, DocumentDate, Num, Hold, CurrencyCode, VendInvoiceSaveStatus,
                      InvoiceAccount, VendInvoiceGroup, VendPaymentGroup, TableRefId, ParmId, Ordering from vendInvoiceInfoTable
                where vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                    && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
                    && vendInvoiceInfoLine.OrigPurchId == _purchTable.PurchId;

        // Copy all invoices where the PO is at the header but not on any of the lines
        vendInvoiceInfoLine = null;
        vendInvoiceInfoTable = null;

        insert_recordset this (
                PurchId,
                DocumentDate,
                Num,
                Hold,
                CurrencyCode,
                VendInvoiceSaveStatus,
                InvoiceAccount,
                VendInvoiceGroup,
                VendPaymentGroup,
                TableRefId,
                ParmId,
                Ordering)
            select PurchId, DocumentDate, Num, Hold, CurrencyCode, VendInvoiceSaveStatus,
                    InvoiceAccount, VendInvoiceGroup, VendPaymentGroup, TableRefId, ParmId, Ordering from vendInvoiceInfoTable
                where vendInvoiceInfoTable.PurchId == _purchTable.PurchId
                    && vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                    && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
            notexists join vendInvoiceInfoLine // exclude invoices with lines from this PO; they were included above
                where vendInvoiceInfoLine.OrigPurchId == _purchTable.PurchId
                    && vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and populates a table with pending invoices.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// A record that relates to the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <remarks>
    /// The data in the table is restricted to the pending invoice provided.
    /// </remarks>
    public void initFromVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        vendInvoiceInfoTable.recordLevelSecurity(true);

        //Copy active invoice into VendTmpInvoiceInfoTable for a given invoice.
        insert_recordset this (
                PurchID,
                DocumentDate,
                Num,
                Hold,
                CurrencyCode,
                VendInvoiceSaveStatus,
                InvoiceAccount,
                VendInvoiceGroup,
                VendPaymentGroup,
                TableRefId,
                ParmId,
                Ordering)
            select PurchId, DocumentDate, Num, Hold, CurrencyCode, VendInvoiceSaveStatus,
                      InvoiceAccount, VendInvoiceGroup, VendPaymentGroup, TableRefId, ParmId, Ordering from vendInvoiceInfoTable
                where vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                    && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
                    && vendInvoiceInfoTable.TableRefId == _vendInvoiceInfoTable.TableRefId
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the table by populating it with pending invoices.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    ///    A table buffer instance that relates to the <c>VendPackingSlipTrans</c> table.
    /// </param>
    /// <remarks>
    ///    The data in the table is restricted to all the pending invoices for the specified packing slip.
    /// </remarks>
    public void initFromVendPackingSlipTrans(VendPackingSlipTrans _vendPackingSlipTrans)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;

        vendInvoiceInfoTable.recordLevelSecurity(true);

        // Copy all active invoices into the vendTmpInvoiceInfoTable for a given packing slip.
        insert_recordset this (
                PurchID,
                DocumentDate,
                Num,
                Hold,
                CurrencyCode,
                VendInvoiceSaveStatus,
                InvoiceAccount,
                TableRefId,
                ParmId,
                Ordering)
            select PurchId, DocumentDate, Num, Hold, CurrencyCode, VendInvoiceSaveStatus,
                      InvoiceAccount, TableRefId, ParmId, Ordering from vendInvoiceInfoTable
                where vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                    && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
            exists join vendInvoiceInfoSubLine
                where vendInvoiceInfoSubLine.JournalRefTableId == _vendPackingSlipTrans.TableId
                    && vendInvoiceInfoSubLine.JournalRefRecId == _vendPackingSlipTrans.RecId
                    && vendInvoiceInfoSubLine.LineRefRecId == vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the table by populating it with pending invoices from the <c>VendInvoiceInfoTable</c> table.
    /// </summary>
    /// <param name="_vendTable">
    ///    A table buffer instance related to the <c>VendTable</c> table.
    /// </param>
    /// <remarks>
    ///    The data in the table is restricted to all the pending invoices for a given vendor.
    /// </remarks>
    public void initFromVendTable(VendTable _vendTable)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        vendInvoiceInfoTable.recordLevelSecurity(true);

        //Copy all active invoices into the vendTmpInvoiceInfoTable for a given vendor.
        insert_recordset this (
                PurchID,
                DocumentDate,
                Num,
                Hold,
                CurrencyCode,
                VendInvoiceSaveStatus,
                InvoiceAccount,
                TableRefId,
                ParmId,
                Ordering)
            select PurchId, DocumentDate, Num, Hold, CurrencyCode, VendInvoiceSaveStatus,
                      InvoiceAccount, TableRefId, ParmId, Ordering from vendInvoiceInfoTable
                where vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                    && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
                    && vendInvoiceInfoTable.OrderAccount == _vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice IDs of any unposted invoices.
    /// </summary>
    /// <returns>
    /// An invoice ID for the pending invoice; otherwise, new.
    /// </returns>
    /// <remarks>
    ///  The following invoice IDs can be returned from this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>New; if there is a single unposted invoice that does not have an ID
    ///   assigned.</description>
    ///   </item>
    ///   <item>
    ///   <description>Invoice ID; if there is a single invoice that has an ID assigned.</description>
    ///   </item>
    ///  </list>
    ///   This method also includes unposted invoices saved in batches or being edited and those actually
    ///  saved as pending.
    /// </remarks>
    public display VendInvoiceId invoiceNumber()
    {
        VendInvoiceId invoiceId;

        if (this.Num == '')
        {
            invoiceId = "@SYS2055";
        }
        else
        {
            invoiceId = this.Num;
        }

        return invoiceId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<Label>@SYS108835</Label>
	<TableGroup>TransactionHeader</TableGroup>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TableRefIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<PrimaryIndex>TableRefIdx</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceSaveStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrencyShow</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultDimension</Name>
			<Label>@SYS301426</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS101280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceGrouping</Name>
			<Label>@SYS130609</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS9455</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendPaymentGroup</Name>
			<Label>@SYS133130</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendPaymentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Hold</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>Hold</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Num</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
			<Label>@SYS12128</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceGrouping</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendInvoiceSaveStatus</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<EnumType>VendInvoiceSaveStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPaymentGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendPaymentGrouping</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Ordering</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TableRefIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_VendTmpInvoiceInfoTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>VendInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>