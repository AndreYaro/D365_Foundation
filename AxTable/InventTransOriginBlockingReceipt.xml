<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransOriginBlockingReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransOriginBlockingReceipt extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteOriginRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the relationship between the inventory transactions originator of the received transactions and the inventory blocking.
    /// </summary>
    /// <param name="_inventTransOriginId">
    /// The ID of the inventory transactions originator. It is the primary key on the <c>InventTransOrigin</c> table.
    /// </param>
    public static void deleteOriginRelationship(InventTransOriginId _inventTransOriginId)
    {
        InventTransOriginBlockingReceipt  inventTransOriginBlockingReceipt;

        ttsbegin;

        delete_from inventTransOriginBlockingReceipt
            where inventTransOriginBlockingReceipt.InventTransOrigin == _inventTransOriginId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the relationship between the inventory transactions originator of the received transactions and the inventory blocking.
    /// </summary>
    /// <param name="_inventBlockingId">
    /// The ID of the inventory blocking. It is the primary key on the <c>InventBlocking</c> table.
    /// </param>
    public static void deleteOwnerRelationship(RefRecId _inventBlockingId)
    {
        InventTransOriginBlockingReceipt  inventTransOriginBlockingReceipt;

        ttsbegin;

        delete_from inventTransOriginBlockingReceipt
            where inventTransOriginBlockingReceipt.InventBlockingReceipt == _inventBlockingId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the inventory transactions originator of the received transactions for the
    ///    inventory blocking.
    /// </summary>
    /// <param name="_inventBlockingId">
    ///    The ID of the inventory blocking. It is the primary key on the <c>InventBlocking</c> table.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transactions originator.
    /// </returns>
    public static InventTransOriginId findInventTransOriginId(RefRecId _inventBlockingId)
    {
        InventTransOriginBlockingReceipt  inventTransOriginBlockingReceipt;

        select firstonly InventTransOrigin from inventTransOriginBlockingReceipt
            where inventTransOriginBlockingReceipt.InventBlockingReceipt == _inventBlockingId;

        return inventTransOriginBlockingReceipt.InventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the blocking order that is related to the ID of the inventory transactions originator.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The ID of the inventory transactions originator. It is the primary key on the
    ///    <c>InventTransOrigin</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the buffer should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A related record in the <c>InventBlocking</c> table if one exists; otherwise, an empty record.
    /// </returns>
    public static InventBlocking inventBlocking(InventTransOriginId _inventTransOriginId,
                                                       boolean             _forUpdate = false)
    {
        InventBlocking                      inventBlocking;
        InventTransOriginBlockingReceipt    inventTransOriginBlockingReceipt;

        inventBlocking.selectForUpdate(_forUpdate);

        select firstonly inventBlocking
            exists join inventTransOriginBlockingReceipt
            where inventTransOriginBlockingReceipt.InventBlockingReceipt    == inventBlocking.RecId
               && inventTransOriginBlockingReceipt.InventTransOrigin        == _inventTransOriginId;

        return inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the relationship between the inventory transactions originator of the received transactions and the inventory blocking.
    /// </summary>
    /// <param name="_inventBlockingId">
    /// The ID of the inventory blocking. It is the primary key on the <c>InventBlocking</c> table.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The ID of the inventory transactions originator. It is the primary key on the <c>InventTransOrigin</c> table.
    /// </param>
    public static void writeOriginOwnerRelationship(RefRecId _inventBlockingId, InventTransOriginId _inventTransOriginId)
    {
        InventTransOriginBlockingReceipt  inventTransOriginBlockingReceipt;
        Counter                         logCount = infologLine();

        ttsbegin;

        try
        {
            inventTransOriginBlockingReceipt.InventBlockingReceipt  = _inventBlockingId;
            inventTransOriginBlockingReceipt.InventTransOrigin      = _inventTransOriginId;

            inventTransOriginBlockingReceipt.insert();
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::lastDuplicateKeyViolatingTable() == inventTransOriginBlockingReceipt.TableId)
            {
                update_recordset inventTransOriginBlockingReceipt
                setting InventTransOrigin = _inventTransOriginId
                where inventTransOriginBlockingReceipt.InventBlockingReceipt == _inventBlockingId
                   && inventTransOriginBlockingReceipt.InventTransOrigin     != _inventTransOriginId;
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
            infolog.clear(logCount);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS325116</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS133566</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InventTransOrigin</TitleField1>
	<TitleField2>InventBlockingReceipt</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>InventBlockingReceiptIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>InventBlockingReceiptIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBlockingReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventBlockingReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBlockingReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventBlockingReceipt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventBlockingReceiptIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventBlockingReceipt</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransOriginIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBlocking</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventBlocking</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventBlocking_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBlocking_InventTransOriginBlockingReceipt</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBlockingReceipt</Name>
					<Field>InventBlockingReceipt</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransOrigin_InventTransOriginBlockingReceipt</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransOrigin</Name>
					<Field>InventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>