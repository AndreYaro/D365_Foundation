<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetTransactionLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the transaction amount by using the correct sign, and rounds by using the general
    /// round-off setting for the currency on the line.
    /// </summary>
    /// <param name="_amount">
    /// The amount, in transaction currency, to set on the line.
    /// </param>
    /// <param name="_calculateAccountingAmount">
    /// Determines whether the accounting currency amount is calculated and set; optional.
    /// </param>
    private void calculateTransactionCurrencyAmount(AmountCur _amount, boolean _calculateAccountingAmount = true)
    {
        int signMultiplier = 1;
        
        if (this.BudgetType == BudgetType::Revenue)
        {
            // The sign on the amount should match what the user entered.
            // Flip the sign of the amount for Revenue transactions.
            signMultiplier = -1;
        }

        this.TransactionCurrencyAmount = CurrencyExchangeHelper::amount(_amount * signMultiplier, this.TransactionCurrency);

        if (_calculateAccountingAmount)
        {
            // When the transaction currency amount is changed recalculate the accounting currency amount.
            this.AccountingCurrencyAmount = this.calculateTransAmountToAccountingAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransAmountToAccountingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amount of the budget transaction line in the accounting currency of the ledger.
    /// </summary>
    /// <param name="_suppressErrors">
    ///    Determines if messages should be logged for validation failures; optional.
    /// </param>
    /// <returns>
    ///    The amount on the budget transaction line in the accounting currency of the ledger.
    /// </returns>
    public AmountMST calculateTransAmountToAccountingAmount(boolean _suppressErrors = false)
    {
        return BudgetTransactionManager::calculateTransAmountToAccountingAmount(
                this.TransactionCurrencyAmount,
                this.TransactionCurrency,
                this.Date,
                0,
                _suppressErrors);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for a field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID that corresponds to the field being set.
    /// </param>
    /// <param name="_axBudgetTransactionLine">
    /// The instance of the <c>AxBudgetTransactionLine</c> class that is associated with the defaulted
    /// field; optional.
    /// </param>
    /// <remarks>
    /// Passed when it is called through the AIF framework.
    /// </remarks>
    public void defaultField(fieldId _fieldId)
    {
        BudgetTransLineType budgetTransLineType;

        budgetTransLineType = this.type();

        if (budgetTransLineType)
        {
            budgetTransLineType.defaultField(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default field values for a <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <param name="_axBudgetTransactionLine">
    /// An instance of the <c>AxBudgetTransactionLine</c> class that is associated with the set row;
    /// optional.
    /// </param>
    /// <remarks>
    /// Passed when it is called through the AIF framework.
    /// </remarks>
    public void defaultRow()
    {
        BudgetTransLineType budgetTransLineType;

        budgetTransLineType = this.type();

        if (budgetTransLineType)
        {
            budgetTransLineType.defaultRow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Remove the budget before calling super to ensure any potential failures that throw an error
        // will prevent the super call from cascade deleting the related budget source tables.
        BudgetControlBudgetTransactionProcessor::submitBudgetTransLineToRemoveBudget(this.RecId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the amount as entered by the user on a budget transaction line.
    /// </summary>
    /// <returns>
    ///    The accounting amount of the budget transaction line.
    /// </returns>
    /// <remarks>
    ///    The sign of the amount will be changed when it is retrieved from the table if the line has a
    ///    <c>BudgetType</c> enumeration value of <c>Revenue</c>.
    /// </remarks>
    public display AmountMST displayAccountingAmount()
    {
        int signMultiplier = 1;

        if (this.BudgetType == BudgetType::Revenue)
        {
            // The sign on the amount should match what the user entered.
            // Flip the sign of the amount for Revenue transactions.
            signMultiplier = -1;
        }

        return this.AccountingCurrencyAmount * signMultiplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountingCurAmountCredit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// display method to show the accounting amount credit.
    /// </summary>
    /// <returns>
    /// amount credit.
    /// </returns>
    public display LedgerAmountMSTCredit_CN displayAccountingCurAmountCredit_CN()
    {
        return LedgerShowDebCredRecord_CN::constructFromRecord(this).accountingCurrencyCreditAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountingCurAmountDebit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// display method to show the accounting amount debit.
    /// </summary>
    /// <returns>
    /// amount debit.
    /// </returns>
    public display LedgerAmountMSTDebit_CN displayAccountingCurAmountDebit_CN()
    {
        return LedgerShowDebCredRecord_CN::constructFromRecord(this).accountingCurrencyDebitAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget check result value for the record.
    /// </summary>
    /// <returns>
    /// The budget check result value for the record.
    /// </returns>
    public display BudgetCheckResult displayBudgetCheckResult()
    {
        return this.getBudgetCheckResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCheckResultText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text that represents the budget check result value for the <c>BudgetTransactionLine</c>
    /// record.
    /// </summary>
    /// <returns>
    /// The text that represents the budget check result value for the <c>BudgetTransactionLine</c> record.
    /// </returns>
    public display BudgetCheckResultText displayBudgetCheckResultText()
    {
        return BudgetControlResult::getBudgetCheckResultToolTip(this.getBudgetCheckResult());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetTransactionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the transaction number of the budget transaction.
    /// </summary>
    /// <returns>
    ///    The transaction number of the budget transaction.
    /// </returns>
    public display BudgetTransactionId displayBudgetTransactionNumber()
    {
        return this.getBudgetTransactionHeader().TransactionNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionCurAmountCredit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// display transaction currency amount credit.
    /// </summary>
    /// <returns>
    /// return the amount credit.
    /// </returns>
    public display AmountCurCredit displayTransactionCurAmountCredit_CN()
    {
        return LedgerShowDebCredRecord_CN::constructFromRecord(this).transactionCurrencyCreditAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionCurAmountDebit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// display method to show the currency amount debit.
    /// </summary>
    /// <returns>
    /// the currency amount debit.
    /// </returns>
    public display AmountCurDebit displayTransactionCurAmountDebit_CN()
    {
        return LedgerShowDebCredRecord_CN::constructFromRecord(this).transactionCurrencyDebitAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkflowStatusImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the reference to the workflow symbol for the <c>BudgetTransactionLine</c> record to indicate a workflow action is needed.
    /// </summary>
    /// <returns>
    ///     A container with the reference to the workflow symbol for the <c>BudgetTransactionLine</c> record to indicate a workflow action is needed.
    /// </returns>
    public display container displayWorkflowStatusImage()
    {
        ListEnumerator workItemEnumerator;
        WorkflowWorkItemTable workItemTable;
        SymbolFontGlyphName symbol;
        LabelString toolTip;

        if (this.WorkflowStatus == BudgetTransactionWorkflowStatus::Rejected ||
            this.WorkflowStatus == BudgetTransactionWorkflowStatus::Submitted)
        {
            if (hasTableAccess(tableNum(WorkflowWorkItemTable))
                && hasTableAccess(tableNum(WorkflowWorkItemQueueAssignee)))
            {
                // Get the work items for this record to determine if an action is needed.
                workItemEnumerator = Workflow::findWorkItemsForCurrentUser(this).getEnumerator();

                while (workItemEnumerator.moveNext())
                {
                    workItemTable = WorkflowWorkItemTable::find(workItemEnumerator.current());

                    if (workItemTable.Type == WorkflowWorkItemType::WorkItem ||
                        workItemTable.Type == WorkflowWorkItemType::Return ||
                        workItemTable.Type == WorkflowWorkItemType::RequestChange)
                    {
                        // Indicate to the user that a workflow action is needed.
                        symbol = ImageReferenceSymbol::Workflow;
                        toolTip = "@Budget:RegisterEntryWorkflowActionRequiredTooltip";
                        break;
                    }
                }
            }
        }

        ImageReference imageReference = ImageReference::constructForSymbol(symbol, toolTip);

        return imageReference.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBudgetType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages the setting of the budget type on a budget transaction line.
    /// </summary>
    /// <param name="_set">
    ///    The value that specified whether to set the budget type.
    /// </param>
    /// <param name="_budgetType">
    ///    The budget type of the budget transaction line.
    /// </param>
    /// <returns>
    ///    The budget type of the budget transaction line.
    /// </returns>
    /// <remarks>
    ///    The amount fields on the line are recalculated when a budget type is changed.
    /// </remarks>
    public edit BudgetType editBudgetType(boolean _set, BudgetType _budgetType)
    {
        if (_set)
        {
            if (this.BudgetType != _budgetType)
            {
                // The budget type on the line has changed; switch the sign of the amounts.
                this.TransactionCurrencyAmount = this.TransactionCurrencyAmount * -1;
                this.AccountingCurrencyAmount = this.AccountingCurrencyAmount * -1;

                this.BudgetType = _budgetType;
            }
        }

        return this.BudgetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages the setting of the price on a budget transaction line.
    /// </summary>
    /// <param name="_set">
    ///    Determines if the price is being set or read.
    /// </param>
    /// <param name="_price">
    ///    The price of the budget transaction line.
    /// </param>
    /// <returns>
    ///    The price of the budget transaction line.
    /// </returns>
    /// <remarks>
    ///    The amount fields on the line are recalculated when a price is set.
    /// </remarks>
    public edit Price editPrice(boolean _set, Price _price)
    {
        if (_set)
        {
            // Round the price based on the General round-off setting for the currency on the line.
            this.Price = CurrencyExchangeHelper::price(_price, this.TransactionCurrency);

            // Set the transaction currency amount field to the product of price and quantity.
            this.calculateTransactionCurrencyAmount(this.Quantity * this.Price);
        }

        return this.Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages the setting of the quantity on a budget transaction line.
    /// </summary>
    /// <param name="_set">
    ///    Determines if the quantity is being set or read.
    /// </param>
    /// <param name="_qty">
    ///    The quantity of the budget transaction line.
    /// </param>
    /// <returns>
    ///    The quantity of the budget transaction line.
    /// </returns>
    /// <remarks>
    ///    The amount fields on the line are recalculated when a quantity is set.
    /// </remarks>
    public edit Qty editQuantity(boolean _set, Qty _qty)
    {
        if (_set)
        {
            // Round the quantity to 2 decimal places.
            this.Quantity = decRound(_qty, 2);

            // Set the transaction currency amount field to the product of price and quantity.
            this.calculateTransactionCurrencyAmount(this.Quantity * this.Price);
        }

        return this.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTransactionCurAmountCredit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit the amount credit as entered by the user on a budget transaction line.
    /// </summary>
    /// <param name="_set">
    /// Determines if the amount is being set or read.
    /// </param>
    /// <param name="_amount">
    /// The amount of the transaction currency amount credit.
    /// </param>
    /// <returns>
    /// The accounting credit amount of the budget transaction line.
    /// </returns>
    public edit AmountCurCredit editTransactionCurAmountCredit_CN(boolean _set, AmountCur _amount)
    {
        if (_set && this.BudgetType != BudgetType::Revenue)
        {
            this.BudgetType = BudgetType::Revenue;
        }
        this.editTransactionCurrencyAmount(_set, _amount);

        return this.displayTransactionCurAmountCredit_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTransactionCurAmountDebit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit the amount debit as entered by the user on a budget transaction line.
    /// </summary>
    /// <param name="_set">
    /// Determines if the amount is being set or read.
    /// </param>
    /// <param name="_amount">
    /// The amount of the transaction currency amount debit.
    /// </param>
    /// <returns>
    /// The accounting debit amount of the budget transaction line.
    /// </returns>
    public edit AmountCurDebit editTransactionCurAmountDebit_CN(boolean _set, AmountCur _amount)
    {
        if (_set && this.BudgetType != BudgetType::Expense)
        {
            this.BudgetType = BudgetType::Expense;
        }
        this.editTransactionCurrencyAmount(_set, _amount);
        return this.displayTransactionCurAmountDebit_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transaction currency amount on a budget transaction line.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set the amount.
    /// </param>
    /// <param name="_amount">
    /// The amount of the budget transaction line.
    /// </param>
    /// <returns>
    /// The amount in the transaction currency on the budget transaction line.
    /// </returns>
    /// <remarks>
    /// The sign of the amount will be changed before it is written or retrieved from the table when the
    /// transaction has a <c>BudgetType::Revenue</c> enumeration value.The quantity and price are reset
    /// when the amount is edited.
    /// </remarks>
    public edit AmountCur editTransactionCurrencyAmount(boolean _set, AmountCur _amount)
    {
        return this.setTransactionCurrencyAmount(_set, _amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the <c>BudgetCheckResult</c> value for the specified <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>BudgetCheckResult</c> value that is calculated by using the query.
    /// </returns>
    public display BudgetCheckResult getBudgetCheckResult()
    {
        BudgetCheckResult budgetCheckResult;

        budgetCheckResult = BudgetSourceBudgetTransactionLine::findBudgetCheckResult(this.RecId);

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the budget transaction header for this line.
    /// </summary>
    /// <returns>
    ///    The <c>BudgetTransactionHeader</c> record that is the parent for this line.
    /// </returns>
    public BudgetTransactionHeader getBudgetTransactionHeader()
    {
        return BudgetTransactionHeader::find(this.BudgetTransactionHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowWorkItemForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the pending <c>WorkflowWorkItemTable</c> record for the current <c>BudgetTransactionLine</c> record
    ///    and current user.
    /// </summary>
    /// <param name = "_allowWorkItemsForHeader">
    ///    If true, check for work items for the header if there is not one for the line.  The default value is true.
    /// </param>
    /// <returns>
    ///    The <c>WorkflowWorkItemTable</c> record.
    /// </returns>
    public WorkflowWorkItemTable getWorkflowWorkItemForCurrentUser(boolean _allowWorkItemsForHeader = true)
    {
        WorkflowWorkItemTable workflowWorkItemTable;
        BudgetTransactionHeader budgetTransactionHeader;

        select firstonly workflowWorkItemTable
            where workflowWorkItemTable.RefTableId == this.TableId &&
                workflowWorkItemTable.RefRecId == this.RecId &&
                workflowWorkItemTable.UserId == curUserId() &&
                workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending;

        if (!workflowWorkItemTable && _allowWorkItemsForHeader)
        {
            // There is no work item for the line.  Check if there is one for the header.
            budgetTransactionHeader = this.getBudgetTransactionHeader();

            select firstonly workflowWorkItemTable
                where workflowWorkItemTable.RefTableId == budgetTransactionHeader.TableId &&
                    workflowWorkItemTable.RefRecId == budgetTransactionHeader.RecId &&
                    workflowWorkItemTable.UserId == curUserId() &&
                    workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending;
        }

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBudgetTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a budget transaction line using the specified budget transaction header.
    /// </summary>
    /// <param name="_header">
    ///    The budget transaction header to use to initialize this budget transaction line.
    /// </param>
    public void initFromBudgetTransactionHeader(BudgetTransactionHeader _header)
    {
        this.BudgetTransactionHeader = _header.RecId;
        this.Date = _header.Date;
        this.IncludeInCashFlowForecast = _header.isBudgetModelIncludedInCashFlowForecast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.TransactionCurrency)
        {
            // Set the transaction currency on the line to the ledger's accounting currency.
            this.TransactionCurrency = Ledger::accountingCurrency();
        }

        super();

        this.initWorkflowStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the workflow status for the budget transaction header instance.
    /// </summary>
    public void initWorkflowStatus()
    {
        this.WorkflowStatus = this.getBudgetTransactionHeader().WorkflowStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets kind of activity.
    /// </summary>
    /// <returns>
    ///     Basic type of activity.
    /// </returns>
    public InventProfileType_RU inventProfileType_RU()
    {
        return InventProfileType_RU::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashFlowEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the cash flow forecasting is enabled for the <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <returns>
    ///    true if the <c>BudgetTransactionLine</c> record is enabled for cash flow forecasting; otherwise,
    ///    false.
    /// </returns>
    /// <remarks>
    ///    The line must have a MainAccount in its ledger dimension, be marked for cash flow forecasting, not
    ///    be a reversed or reversal line, and the budget model of the parent <c>BudgetTransactionHeader</c>
    ///    record must be enabled for cash flow forecasting.
    /// </remarks>
    public boolean isCashFlowEnabled()
    {
        return (this.ledgerDimensionHasMainAccount()                                             &&
                (BudgetTransactionLineReverse::isTransactionLineInReversal(this.RecId) == false) &&
                (this.IncludeInCashFlowForecast == NoYes::Yes)                                   &&
                BudgetModel::cov(this.getBudgetTransactionHeader().BudgetModelId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowAbleToSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget transaction line can submit to workflow.
    /// </summary>
    /// <returns>
    /// true if the budget transaction line can submit to workflow; otherwise, false.
    /// </returns>
    public boolean isWorkflowAbleToSubmit()
    {
        // A line is not able to be directly submitted.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowUserPermittedToEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current user is permitted to modify the <c>BudgetTransactionLine</c> record
    /// for the current workflow status.
    /// </summary>
    /// <returns>
    /// true if the current user is permitted to modify the <c>BudgetTransactionLine</c> record; otherwise,
    /// false.
    /// </returns>
    public boolean isWorkflowUserPermittedToEdit()
    {
        boolean isPermittedToEdit;
        WorkflowWorkItemTable workflowWorkItemTable;
        BudgetTransactionHeader budgetTransactionHeader;

        if (this.WorkflowStatus == BudgetTransactionWorkflowStatus::Submitted ||
            this.WorkflowStatus == BudgetTransactionWorkflowStatus::Rejected)
        {
            // The line is in the workflow review process.
            workflowWorkItemTable = this.getWorkflowWorkItemForCurrentUser();

            if (workflowWorkItemTable &&
                (workflowWorkItemTable.Type == WorkflowWorkItemType::Return ||
                workflowWorkItemTable.Type == WorkflowWorkItemType::RequestChange))
            {
                // The user can edit the line.
                isPermittedToEdit = true;
            }
        }
        else
        {
            budgetTransactionHeader = this.getBudgetTransactionHeader();

            if (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::Rejected ||
                budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::Submitted)
            {
                // The line is no longer in the workflow review process but the header still is.
                isPermittedToEdit = false;
            }
            else
            {
                // The header and line are not in the workflow review process.
                isPermittedToEdit = true;
            }
        }

        return isPermittedToEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStructureName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the account structure name for the ledger dimension associated with the line, if set.  Otherwise gets the name for the specified account structure.
    /// </summary>
    /// <param name="_accountStructureId">
    ///    The account structure Id.
    /// </param>
    /// <returns>
    ///    The account structure name.
    /// </returns>
    public Name getAccountStructureName(RecId _accountStructureId)
    {
        DimensionHierarchy accountStructure;
        Name accountStructureName;

        if (this.LedgerDimension != 0)
        {
            if (hasTableAccess(tableNum(DimensionAttributeValueCombination))
                && hasTableAccess(tableNum(DimensionHierarchy)))
            {
                // The line has a ledger dimension value; get the account structure from the ledger dimension.
                accountStructure = DimensionHierarchy::find(DimensionAttributeValueCombination::find(this.LedgerDimension).AccountStructure);
            }
        }
        else
        {
            if (hasTableAccess(tableNum(DimensionHierarchy)))
            {
                accountStructure = DimensionHierarchy::find(_accountStructureId);
            }
        }

        if (accountStructure &&
            !accountStructure.IsSystemGenerated)
        {
            // Only show the name when IsSystemGenerated is false to prevent showing a GUID in a consolidated company.
            accountStructureName = accountStructure.Name;
        }

        return accountStructureName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionHasMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the <c>BudgetTransactionLine</c> record has a main account dimension value
    ///    in the ledger dimension.
    /// </summary>
    /// <returns>
    ///    true if the <c>BudgetTransactionLine</c> record has a main account dimension value; otherwise, false.
    /// </returns>
    public boolean ledgerDimensionHasMainAccount()
    {
        recId mainAccountId;

        mainAccountId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(this.LedgerDimension);

        return (mainAccountId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(BudgetTransactionLine, TransactionCurrency):
            case fieldNum(BudgetTransactionLine, Date):
                // If the currency/date on the line is changed, the accounting amount must be recalculated.
                this.AccountingCurrencyAmount = this.calculateTransAmountToAccountingAmount();
                break;
            case fieldNum(BudgetTransactionLine, LedgerDimension):
                // Defaulting the budget type based on the main account type being specific as revenue or expense.
                MainAccountNum mainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.LedgerDimension);

                if (mainAccount)
                {
                    this.BudgetType = BudgetTransactionLine::determineBudgetTypeFromMainAccount(mainAccount);
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets posting profile ID.
    /// </summary>
    /// <returns>
    ///     An empty string, default value of posting profile ID.
    /// </returns>
    public PostingProfile postingProfile_RU()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transaction currency amount on a budget transaction line.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set the amount.
    /// </param>
    /// <param name="_amount">
    /// The amount of the budget transaction line.
    /// </param>
    /// <param name="_calculateAccountingAmount">
    /// A Boolean value that determines whether the accounting currency amount is calculated and set;
    /// optional.
    /// </param>
    /// <returns>
    /// The amount in the transaction currency on the budget transaction line.
    /// </returns>
    /// <remarks>
    /// The sign of the amount will be changed before it is written or retrieved from the table when the
    /// transaction has a <c>BudgetType::Revenue</c> enumeration value.The quantity and price are reset
    /// when the transaction currency amount is edited.
    /// </remarks>
    public AmountCur setTransactionCurrencyAmount(boolean _set, AmountCur _amount, boolean _calculateAccountingAmount = true)
    {
        int signMultiplier = 1;

        if (this.BudgetType == BudgetType::Revenue)
        {
            // The sign on the amount should match what the user entered.
            // Flip the sign of the amount for Revenue type.
            signMultiplier = -1;
        }

        if (_set)
        {
            this.calculateTransactionCurrencyAmount(_amount, _calculateAccountingAmount);

            // If the user entered an amount then reset the price and quantity fields to zero, when
            // Quantity*Price is not equal to TransactionCurrencyAmount
            if (this.TransactionCurrencyAmount != CurrencyExchangeHelper::amount(this.Quantity * this.Price * signMultiplier, this.TransactionCurrency))
            {
                this.Quantity = 0;
                this.Price = 0;
            }
        }

        return this.TransactionCurrencyAmount * signMultiplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    private BudgetTransLineType type()
    {
        return BudgetTransLineType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCashflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts for the <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <param name = "_ledgerCoverage">The cash flow forecasting calculations.</param>
    public void updateLedgerCashflow(LedgerCoverage _ledgerCoverage)
    {
        LedgerAccountCov        ledgerAccountCov;
        LedgerCoverage          ledgerCoverage = _ledgerCoverage;
        TaxBudgetTransaction    taxBudgetTransaction;
        MainAccountRecId        mainAccountId;
        DimensionDefault        dimensionDefault;
        ExchangeRateTypeRecId   budgetExchangeRateTypeId;
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        ledgerCoverage.init(this);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ledgerCoverage.parmPostingProfile_RU(this.postingProfile_RU());
            ledgerCoverage.parmInventProfileType_RU(this.inventProfileType_RU());
        }
        // </GEERU>

        if (this.isCashFlowEnabled())
        {
            mainAccountId = LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(this.LedgerDimension);
            dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(this.LedgerDimension);
            budgetExchangeRateTypeId = Ledger::budgetExchangeRateType();

            ledgerCoverage.setRemainPercent(this.Date, BudgetParameters::find().CashFlowForecastPeriodAllocationKey);

            while select ledgerAccountCov
                where ledgerAccountCov.TransBudget == TransBudget::Budget &&
                    ledgerAccountCov.FromMainAccount == mainAccountId
            {
                AmountCur transactionCurrencyAmount = this.TransactionCurrencyAmount * ledgerAccountCov.Value / 100;
                transactionCurrencyAmount = transactionCurrencyAmount * -1;

                ledgerCoverage.updateSum(PaymTerm::advanceDate(ledgerAccountCov.Payment, this.Date),
                                         ledgerAccountCov.Posting,
                                         ledgerAccountCov.ToMainAccount,
                                         dimensionDefault,
                                         this.TransactionCurrency,
                                         transactionCurrencyAmount,
                                         1,
                                         0,
                                         naStr(),
                                         naStr(),
                                         naStr(),
                                         dateNull(),
                                         budgetExchangeRateTypeId);

                if (this.TaxGroup)
                {
                    taxBudgetTransaction = new TaxBudgetTransaction(this, ledgerCoverage, ledgerAccountCov);
                    taxBudgetTransaction.createTaxTransactions();
                }
            }
        }

        ledgerCoverage.endCov();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid;
        BudgetTransactionHeader budgetTransactionHeader;

        isValid = super();

        if (isValid == true)
        {
            budgetTransactionHeader = this.getBudgetTransactionHeader();

            // Only Draft transactions can be deleted.
            isValid = BudgetTransactionManager::checkTransactionStatusForDelete(budgetTransactionHeader.TransactionStatus, budgetTransactionHeader.TransactionNumber);

            // Check that the transaction isn't in use by a different user.
            isValid = !budgetTransactionHeader.isUserBlocked() && isValid;

            // Transactions with workflow status of Rejected or Submitted can't be deleted.
            isValid = BudgetTransactionManager::checkWorkflowStatusForDelete(budgetTransactionHeader.WorkflowStatus, budgetTransactionHeader.TransactionNumber, FormDataUtil::isFormDataSource(this), false) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean isValid;
        BudgetTransLineType budgetTransLineType;

        // This logic is placed before the validation done by the kernel because the kernel validation
        // does not get logged to AIF.  All errors must be returned to the consumer (service or form).
        budgetTransLineType = this.type();
        isValid = budgetTransLineType.validateField(_fieldIdToCheck);

        if (isValid)
        {
            isValid = super(_fieldIdToCheck);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;
        BudgetTransactionHeader budgetTransactionHeader = this.getBudgetTransactionHeader();

        isValid = super();

        // Only Draft transactions can be written.
        isValid = BudgetTransactionManager::checkTransactionStatusForWrite(budgetTransactionHeader.TransactionStatus, budgetTransactionHeader.TransactionNumber) && isValid;

        isValid = BudgetTransactionManager::validateAccountStructure(this) && isValid;

        isValid = BudgetTransactionManager::validateBudgetType(budgetTransactionHeader, this.BudgetType) && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        // A budget transaction line is required for budgetary control.
        // Therefore, must call super before checking for budget.
        super();

        if ((this.BudgetType == BudgetType::Expense))
        {
            // Only perform budgetary control check if:
            //    The budget type is Expense.
            //    The line is not being written from a service.
            BudgetControlBudgetTransactionProcessor::submitBudgetTransLineToCheckBudget(this.RecId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record occurs in the <c>BudgetTransactionLine</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!BudgetTransactionLine::exist(_recId))
        {
            ret = checkFailed(strFmt(BudgetTransactionLine::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record occurs in the <c>BudgetTransactionLine</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly RecId from budgetTransactionLine
                     where budgetTransactionLine.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BudgetTransactionLine</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetTransactionLine</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BudgetTransactionLine</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetTransactionLine find(
        recId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetTransactionLine budgetTransactionLine;

        budgetTransactionLine.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetTransactionLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetTransactionLine
            where budgetTransactionLine.RecId == _recId;

        return budgetTransactionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTransactionHeaderLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BudgetTransactionLine</c> table.
    /// </summary>
    /// <param name="_budgetTransactionHeader">
    ///    The record ID of the budget transaction header for the line.
    /// </param>
    /// <param name="_lineNumber">
    ///    The line number of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BudgetTransactionLine</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetTransactionLine findByTransactionHeaderLineNum(
        RefRecId            _budgetTransactionHeader,
        LineNum             _lineNumber,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetTransactionLine budgetTransactionLine;

        budgetTransactionLine.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetTransactionLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly budgetTransactionLine
            where budgetTransactionLine.BudgetTransactionHeader == _budgetTransactionHeader &&
                  budgetTransactionLine.LineNumber == _lineNumber;

        return budgetTransactionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the work flow status for a <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <param name="_budgetTransactionLineRecId">
    /// The record ID of the <c>BudgetTransactionLine</c> record for which to set the workflow status.
    /// </param>
    /// <param name="_workflowStatus">
    /// The workflow status to set.
    /// </param>
    public static void setWorkflowStatus(
        recId _budgetTransactionLineRecId,
        BudgetTransactionWorkflowStatus _workflowStatus)
    {
        BudgetTransactionHeader budgetTransactionHeader;
        BudgetTransactionLine budgetTransactionLine;

        ttsbegin;

        budgetTransactionLine = BudgetTransactionLine::find(_budgetTransactionLineRecId, true);
        budgetTransactionHeader = budgetTransactionLine.getBudgetTransactionHeader();

        if (budgetTransactionLine &&
            budgetTransactionLine.WorkflowStatus != _workflowStatus &&
            budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft)
        {
            budgetTransactionLine.WorkflowStatus = _workflowStatus;
            budgetTransactionLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineBudgetTypeFromMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the Budget Type based on the Main Account of <c>BudgetTransactionLine</c> table.
    /// </summary>
    /// <param name="_mainAccount">
    ///    The Main Account.
    /// <returns>
    ///    A <c>BudgetType</c> enumeration value.
    /// </returns>
    internal static BudgetType determineBudgetTypeFromMainAccount(MainAccountNum _mainAccount)
    {
        BudgetType budgetType;

        switch (MainAccount::findByMainAccountId(_mainAccount).Type)
        {
            case DimensionLedgerAccountType::Expense:
                budgetType = BudgetType::Expense;
                break;

            case DimensionLedgerAccountType::Revenue:
                budgetType = BudgetType::Revenue;
                break;

            default:
                budgetType = BudgetType::Expense;
        }

        return budgetType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@SYS127771</DeveloperDocumentation>
	<Label>@SYS127777</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LedgerDimension</TitleField1>
	<TitleField2>Date</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>LineNumberIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BudgetTransactionLineReverse</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BudgetTransactionLineReverse</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editTransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editTransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetTransactionHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountingCurrencyAmount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editTransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editBudgetType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashflowForecast</Name>
			<Label>@SYS5727</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeInCashFlowForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Comment</Name>
			<Label>@SYS35300</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GeneralJournalEntry</Name>
			<Label>@SYS317091</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GeneralJournalEntry</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransactionCurrencyAmount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Workflow</Name>
			<Label>@SYS319145</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS116253</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayBudgetTransactionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editTransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayBudgetCheckResultText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccountingCurrencyAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetBudget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetTransactionHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS35300</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Date</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GeneralJournalEntry</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>GeneralJournalEntryRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeInCashFlowForecast</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<Label>@Budget:BudgetTransactionLine_IncludeInCashFlowForecast</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionBudget</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransBudgetTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS152258</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetTransactionWorkflowStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetBudget_RU</Name>
			<ConfigurationKey>RAsset</ConfigurationKey>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LineNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetTransactionHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetTransactionHeader</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Date</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GeneralJournalEntryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>GeneralJournalEntry</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeDateAmountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetTransactionHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Date</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountingCurrencyAmount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LedgerDimTransactionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerDimension</MapField>
					<MapFieldTo>LedgerDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MainAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBudget</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS301557</EntityRelationshipRole>
			<RelatedTable>AssetBudget</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBudget</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBudget</Name>
					<Field>AssetBudget</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetTransactionHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS4925</EntityRelationshipRole>
			<RelatedTable>BudgetTransactionHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetTransactionHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetTransactionHeader</Name>
					<Field>BudgetTransactionHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS7572</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TransactionCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GeneralJournalEntry</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS317091</EntityRelationshipRole>
			<RelatedTable>GeneralJournalEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>GeneralJournalEntry</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GeneralJournalEntry</Name>
					<Field>GeneralJournalEntry</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS24500</EntityRelationshipRole>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123571</EntityRelationshipRole>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetBudgetTrans_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS116425</EntityRelationshipRole>
			<RelatedTable>RAssetBudgetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetBudgetTrans_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetTransactionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBudget_RU</Name>
					<Field>AssetBudget_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>