<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTaxEmplSum</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RPayTaxEmplSum extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetClassCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display PaymentOrderBudgetReceiptClassCode_RU budgetClassCode()
    {
        ;
        return RPayTaxIncomeGroupTable::findCode(this.RpayTaxIncomeGroupCode).PaymBudgetReceiptClassCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxSumBaseData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes record from another <c>RPayTaxEmplSum</c> table record.
    /// </summary>
    /// <param name="_taxSum">
    /// The <c>RPayTaxEmplSum</c> table record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromTaxSumBaseData(RPayTaxEmplSum _taxSum)
    {
        this.CorrectedPeriod = _taxSum.CorrectedPeriod;
        this.PayPeriod       = _taxSum.PayPeriod;
        this.EmplId          = _taxSum.EmplId;
        this.BranchId        = _taxSum.BranchId;
        this.TaxRateCode     = _taxSum.TaxRateCode;
        this.RpayTaxIncomeGroupCode = _taxSum.RpayTaxIncomeGroupCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display RPayEmplTaxStatus taxStatus()
    {
        ;
        return RPayTaxIncomeGroupTable::findCode(this.RpayTaxIncomeGroupCode).EmplTaxStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        RPayTaxEmplTrans  taxEmplTrans;
        boolean ret;

        if (this.PayPeriod)
        {
             this.PayPeriod = endmth(this.PayPeriod);
        }

        ret = super();

        if (ret && this.Source == NoYes::No && this.RecId)
        {
            select firstonly RecId from taxEmplTrans
                where taxEmplTrans.TaxSumRecId == this.RecId &&
                      taxEmplTrans.Manual      == NoYes::Yes;

            ret = checkFailed(strFmt("@GLS107196", fieldId2pname(tableNum(RPayTaxEmplSum), fieldNum(RPayTaxEmplSum, Source))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayTaxEmplSum find(RHRMPayMainEmplId      _emplId,
                                      ReportPeriod_RU        _payPeriod,
                                      RPayCorrectedPeriod    _corPeriod,
                                      RpayTaxIncomeGroupCode _taxIncomeGroupCode,
                                      NoYes                  _source,
                                      BranchId_RU            _branchId,
                                      boolean                _forupdate = false)
    {
        RPayTaxEmplSum taxEmplSum;

        taxEmplSum.selectForUpdate(_forupdate);

        if (_emplId && _payPeriod && _taxIncomeGroupCode && _corPeriod)
        {
            select firstonly taxEmplSum
                where taxEmplSum.EmplId                 == _emplId             &&
                      taxEmplSum.PayPeriod              == _payPeriod          &&
                      taxEmplSum.CorrectedPeriod        == _corPeriod          &&
                      taxEmplSum.RpayTaxIncomeGroupCode == _taxIncomeGroupCode &&
                      taxEmplSum.BranchId               == _branchId           &&
                      taxEmplSum.Source                 == _source;
        }

        return taxEmplSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastTaxStatusBranch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds tax status and branch id.
    /// </summary>
    /// <param name="_payPeriod">
    /// The calculation period.
    /// </param>
    /// <param name="_corPeriod">
    /// The corrective period.
    /// </param>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    /// <returns>
    /// The container containing tax status and branch id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container findLastTaxStatusBranch(ReportPeriod_RU      _payPeriod,
                                                    RPayCorrectedPeriod  _corPeriod,
                                                    RHRMPayMainEmplId    _emplId)
    {
        RPayTaxIncomeGroupTable taxGroupTable;
        RPayTaxEmplSum          taxEmplSum;
        ReportPeriod_RU         payPeriodPrev;
        BranchId_RU             branchId1, branchId2, branchIdRet;
        RPayEmplTaxStatus       taxStatus1, taxStatus2, taxStatusRet;

        //define status and branch by previous period
        select firstonly BranchId, PayPeriod, PayPeriod from taxEmplSum
            order by PayPeriod desc
            where  taxEmplSum.EmplId          == _emplId
                && taxEmplSum.CorrectedPeriod == _corPeriod
                && taxEmplSum.PayPeriod       <  _payPeriod
                && taxEmplSum.Source          == false
            join firstonly EmplTaxStatus from taxGroupTable
                where taxGroupTable.RpayTaxIncomeGroupCode == taxEmplSum.RpayTaxIncomeGroupCode;

        branchId1       = taxEmplSum.BranchId;
        taxStatus1      = taxGroupTable.EmplTaxStatus;
        payPeriodPrev   = taxEmplSum.PayPeriod;

        //ensure that defined branch is not reverse of previous branch
        select firstonly BranchId, PayPeriod, RecId from taxEmplSum
            where  taxEmplSum.EmplId          == _emplId
                && taxEmplSum.CorrectedPeriod == _corPeriod
                && taxEmplSum.PayPeriod       == payPeriodPrev
                && taxEmplSum.BranchId        != branchId1
                && taxEmplSum.Source          == false;

        if (taxEmplSum.RecId)
        {
            payPeriodPrev = taxEmplSum.PayPeriod;
            branchId2     = taxEmplSum.BranchId;

            select firstonly RecId from taxEmplSum
                where  taxEmplSum.EmplId          == _emplId
                    && taxEmplSum.CorrectedPeriod == _corPeriod
                    && taxEmplSum.PayPeriod       < payPeriodPrev
                    && taxEmplSum.BranchId        == branchId2
                    && taxEmplSum.Source          == false;

            if (taxEmplSum.RecId)
            {
                branchIdRet = branchId1;
            }
            else
            {
                branchIdRet = branchId2;
            }
        }
        else
        {
            branchIdRet = branchId1;
        }

        //ensure that defined status is not reverse of previous status
        select firstonly PayPeriod, RecId from taxEmplSum
            order by PayPeriod desc
            where  taxEmplSum.EmplId          == _emplId
                && taxEmplSum.CorrectedPeriod == _corPeriod
                && taxEmplSum.PayPeriod       ==  payPeriodPrev
                && taxEmplSum.Source          == false
            join firstonly EmplTaxStatus from taxGroupTable
                where  taxGroupTable.RpayTaxIncomeGroupCode == taxEmplSum.RpayTaxIncomeGroupCode
                    && taxGroupTable.EmplTaxStatus != taxStatus1;

        if (taxEmplSum.RecId)
        {
            payPeriodPrev = taxEmplSum.PayPeriod;
            taxStatus2    = taxGroupTable.EmplTaxStatus;

            select firstonly RecId from taxEmplSum
                order by PayPeriod desc
                where  taxEmplSum.EmplId          == _emplId
                    && taxEmplSum.CorrectedPeriod == _corPeriod
                    && taxEmplSum.PayPeriod       <  payPeriodPrev
                    && taxEmplSum.Source          == false
                join firstonly EmplTaxStatus from taxGroupTable
                    where  taxGroupTable.RpayTaxIncomeGroupCode == taxEmplSum.RpayTaxIncomeGroupCode
                        && taxGroupTable.EmplTaxStatus == taxStatus2;

            if (taxEmplSum.RecId)
            {
                taxStatusRet = taxStatus1;
            }
            else
            {
                taxStatusRet = taxStatus2;
            }
        }
        else
        {
            taxStatusRet = taxStatus1;
        }

        return [taxStatusRet, branchIdRet];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static RPayTaxEmplSum findRecId(RecId _recId, boolean _forupdate = false)
    {
        RPayTaxEmplSum  taxEmplSum;

        taxEmplSum.selectForUpdate(_forupdate);

        if (_recId)
        {
            select firstonly taxEmplSum
                where taxEmplSum.RecId == _recId;
        }

        return taxEmplSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddTaxAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayAmount getAddTaxAmount(RHRMPayMainEmplId      _emplId,
                                                    RpayTaxIncomeGroupCode _incomeGroup,
                                                    ReportPeriod_RU        _startDate = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                    ReportPeriod_RU        _endDate = endmth(prevMth(RPayParameters::payPeriod())))
    {
        RPayTaxEmplSum rPayTaxEmplSum;
        ;
        select sum(AddTaxAmount) from rPayTaxEmplSum
            where rPayTaxEmplSum.EmplId                 == _emplId      &&
                  rPayTaxEmplSum.RpayTaxIncomeGroupCode == _incomeGroup &&
                  rPayTaxEmplSum.Source                 == NoYes::No    &&
                  rPayTaxEmplSum.PayPeriod              >= _startDate   &&
                  rPayTaxEmplSum.PayPeriod              <= _endDate;

        return rPayTaxEmplSum.AddTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddTaxLinkedAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayAmount getAddTaxLinkedAmount(RHRMPayMainEmplId      _emplId,
                                                          RpayTaxIncomeGroupCode _incomeGroup,
                                                          ReportPeriod_RU        _startDate = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                          ReportPeriod_RU        _endDate = endmth(prevMth(RPayParameters::payPeriod())))
    {
        Query                   q;
        QueryBuildDataSource    qbds;
        QueryRun                qr;

        RPayTaxIncomeGroupTable incomeGroupTable = RPayTaxIncomeGroupTable::findCode(_incomeGroup);
        RPayTaxEmplSum rPayTaxEmplSum;
        container      con = incomeGroupTable.linkedTaxCodes();
        int i;
        ;

        q = new Query();

        qbds = q.addDataSource(tableNum(RPayTaxEmplSum));
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, AddTaxAmount), SelectionField::Sum);

        for (i = 1; i <= conLen(con); i++)
        {
            qbds.addRange(fieldNum(RPayTaxEmplSum, RpayTaxIncomeGroupCode)).value(queryValue(conPeek(con, i)));
        }

        findOrCreateRange_W(qbds, fieldNum(RPayTaxEmplSum, EmplId), queryValue(_emplId));
        findOrCreateRange_W(qbds, fieldNum(RPayTaxEmplSum, Source), queryValue(NoYes::No));
        findOrCreateRange_W(qbds, fieldNum(RPayTaxEmplSum, PayPeriod), SysQuery::range(_startDate, _endDate));

        qr = new QueryRun(q);
        qr.next();
        rPayTaxEmplSum = qr.getNo(1);

        return rPayTaxEmplSum.AddTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEffectiveDeductTaxCodeAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayAmount getEffectiveDeductTaxCodeAmount(RHRMPayMainEmplId      _emplId,
                                                                    RpayTaxIncomeGroupCode _incomeGroup,
                                                                    RpayTaxIncDedCode      _taxCode,
                                                                    ReportPeriod_RU        _startDate = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                                    ReportPeriod_RU        _endDate = endmth(prevMth(RPayParameters::payPeriod())),
                                                                    boolean                _onlymanual = false)
    {
        RPayTaxEmplSum rPayTaxEmplSum;
        RPayTaxEmplTrans  rPayTaxEmplTrans;
        RPayTaxDeductionTable   taxDeductionTable;

        RPayRatePeriodFrequency codeFrequency;
        RPayAmount amount;
        ;

        codeFrequency = RPayTaxDeductionTable::find(_taxCode).RpayPeriodFrequence;

        select forceplaceholders sum(Amount) from rPayTaxEmplTrans order by RpayTaxIncDedCode
            where rPayTaxEmplTrans.RpayTaxType          == RpayTaxType::Deduction &&
                  rPayTaxEmplTrans.RpayTaxIncDedCode    <  _taxCode               &&
                 (rPayTaxEmplTrans.Manual               == NoYes::Yes ||
                 (_onlymanual  ? false : true))
        exists join rPayTaxEmplSum
            where rPayTaxEmplSum.EmplId                 == _emplId                &&
                  rPayTaxEmplSum.RpayTaxIncomeGroupCode == _incomeGroup           &&
                  rPayTaxEmplSum.PayPeriod              >= _startDate             &&
                  rPayTaxEmplSum.PayPeriod              <= _endDate               &&
                  rPayTaxEmplTrans.TaxSumRecId          == rPayTaxEmplSum.RecId;

        amount = rPayTaxEmplTrans.Amount;

        if (codeFrequency == RPayRatePeriodFrequency::Unlimeted || codeFrequency == RPayRatePeriodFrequency::Year)
        {
            select forceplaceholders sum(Amount) from rPayTaxEmplTrans order by RpayTaxIncDedCode
                where rPayTaxEmplTrans.RpayTaxType          == RpayTaxType::Deduction &&
                      rPayTaxEmplTrans.RpayTaxIncDedCode    >  _taxCode               &&
                     (rPayTaxEmplTrans.Manual               == NoYes::Yes ||
                     (_onlymanual  ? false : true))
            exists join taxDeductionTable
                where taxDeductionTable.RpayTaxDeductionCode == rPayTaxEmplTrans.RpayTaxIncDedCode &&
                      taxDeductionTable.RpayPeriodFrequence  <  codeFrequency
            exists join rPayTaxEmplSum
                where rPayTaxEmplSum.EmplId                 == _emplId                &&
                      rPayTaxEmplSum.RpayTaxIncomeGroupCode == _incomeGroup           &&
                      rPayTaxEmplSum.PayPeriod              >= _startDate             &&
                      rPayTaxEmplSum.PayPeriod              <= _endDate               &&
                      rPayTaxEmplTrans.TaxSumRecId          == rPayTaxEmplSum.RecId;

            amount += rPayTaxEmplTrans.Amount;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncome_Source</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayAmount getIncome_Source(RHRMPayMainEmplId      _emplId,
                                                     RpayTaxIncomeGroupCode _incomeGroup,
                                                     ReportPeriod_RU        _startDate = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                     ReportPeriod_RU        _endDate   = endmth(prevMth(RPayParameters::payPeriod())),
                                                     boolean                _sourceAll = false)
    {
        RPayTaxEmplSum rPayTaxEmplSum;
        ;
        select sum(IncomeAmount), sum(DeductionOtherAmount) from rPayTaxEmplSum
            where rPayTaxEmplSum.EmplId                 == _emplId      &&
                  rPayTaxEmplSum.RpayTaxIncomeGroupCode == _incomeGroup &&
                  rPayTaxEmplSum.PayPeriod              >= _startDate   &&
                  rPayTaxEmplSum.PayPeriod              <= _endDate     &&
                 (rPayTaxEmplSum.Source == NoYes::Yes || _sourceAll)
                  ;

        return rPayTaxEmplSum.IncomeAmount - rPayTaxEmplSum.DeductionOtherAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncomeLinkedAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayAmount getIncomeLinkedAmount(RHRMPayMainEmplId      _emplId,
                                                          RpayTaxIncomeGroupCode _incomeGroup,
                                                          ReportPeriod_RU        _startDate = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                          ReportPeriod_RU        _endDate = endmth(prevMth(RPayParameters::payPeriod())))
    {
        Query                   q;
        QueryBuildDataSource    qbds;
        QueryRun                qr;

        RPayTaxIncomeGroupTable incomeGroupTable = RPayTaxIncomeGroupTable::findCode(_incomeGroup);
        RPayTaxEmplSum rPayTaxEmplSum;
        container      con = incomeGroupTable.linkedTaxCodes();
        int i;
        ;

        q = new Query();

        qbds = q.addDataSource(tableNum(RPayTaxEmplSum));
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, DeductionStandardAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, DeductionOtherAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, IncomeAmount), SelectionField::Sum);

        for (i = 1; i <= conLen(con); i++)
        {
            qbds.addRange(fieldNum(RPayTaxEmplSum, RpayTaxIncomeGroupCode)).value(queryValue(conPeek(con, i)));
        }

        findOrCreateRange_W(qbds, fieldNum(RPayTaxEmplSum, EmplId), queryValue(_emplId));
        findOrCreateRange_W(qbds, fieldNum(RPayTaxEmplSum, Source), queryValue(NoYes::No));
        findOrCreateRange_W(qbds, fieldNum(RPayTaxEmplSum, PayPeriod), SysQuery::range(_startDate, _endDate));

        qr = new QueryRun(q);
        qr.next();
        rPayTaxEmplSum = qr.getNo(1);

        return rPayTaxEmplSum.IncomeAmount - rPayTaxEmplSum.DeductionStandardAmount - rPayTaxEmplSum.DeductionOtherAmount ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncomeNetAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayAmount getIncomeNetAmount(RHRMPayMainEmplId      _emplId,
                                                       RpayTaxIncomeGroupCode _incomeGroup,
                                                       ReportPeriod_RU        _startDate = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                       ReportPeriod_RU        _endDate = endmth(prevMth(RPayParameters::payPeriod())))
    {
        RPayTaxEmplSum rPayTaxEmplSum;
        ;
        select sum(DeductionStandardAmount),sum(DeductionOtherAmount),sum(IncomeAmount) from rPayTaxEmplSum
            where rPayTaxEmplSum.EmplId                 == _emplId      &&
                  rPayTaxEmplSum.RpayTaxIncomeGroupCode == _incomeGroup &&
                  rPayTaxEmplSum.Source                 == NoYes::No    &&
                  rPayTaxEmplSum.PayPeriod              >= _startDate   &&
                  rPayTaxEmplSum.PayPeriod              <= _endDate;

        return rPayTaxEmplSum.IncomeAmount - rPayTaxEmplSum.DeductionStandardAmount - rPayTaxEmplSum.DeductionOtherAmount ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinkedTaxSum</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static container getLinkedTaxSum (RHRMPayMainEmplId      _emplId,
                                                    RpayTaxIncomeGroupCode _incomeGroupCode,
                                                    ReportPeriod_RU        _startDate     = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                    ReportPeriod_RU        _endDate       = endmth(prevMth(RPayParameters::payPeriod())),
                                                    boolean                _onlyOwnIncome = false)
    {
        Query                   q;
        QueryBuildDataSource    qbds;
        QueryRun                qr;

        RPayTaxIncomeGroupTable incomeGroupTable = RPayTaxIncomeGroupTable::findCode(_incomeGroupCode);
        RPayTaxEmplSum rPayTaxEmplSum;
        container      con = incomeGroupTable.linkedTaxCodes();
        int i;
        ;

        q = new Query();

        qbds = q.addDataSource(tableNum(RPayTaxEmplSum));
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, IncomeAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, DeductionStandardAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, DeductionOtherAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, DeductTaxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, AddTaxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, ReckoningTaxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, DeductTaxAmountFuture), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, Acquittance), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, AcquittanceFuturePeriod), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, PassToGni), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RPayTaxEmplSum, PayrollRedemptionAmount), SelectionField::Sum);

        for (i = 1; i <= conLen(con); i++)
        {
            qbds.addRange(fieldNum(RPayTaxEmplSum, RpayTaxIncomeGroupCode)).value(queryValue(conPeek(con, i)));
        }

        findOrCreateRange_W(qbds, fieldNum(RPayTaxEmplSum, EmplId), queryValue(_emplId));

        if (_onlyOwnIncome)
            findOrCreateRange_W(qbds, fieldNum(RPayTaxEmplSum, Source), queryValue(NoYes::No));

        findOrCreateRange_W(qbds, fieldNum(RPayTaxEmplSum, PayPeriod), SysQuery::range(_startDate, _endDate));

        qr = new QueryRun(q);
        qr.next();
        rPayTaxEmplSum = qr.getNo(1);

        return [rPayTaxEmplSum.IncomeAmount,            rPayTaxEmplSum.DeductionStandardAmount,
                rPayTaxEmplSum.DeductionOtherAmount,    rPayTaxEmplSum.DeductTaxAmount,
                rPayTaxEmplSum.AddTaxAmount,            rPayTaxEmplSum.ReckoningTaxAmount,
                rPayTaxEmplSum.DeductTaxAmountFuture,   rPayTaxEmplSum.Acquittance,
                rPayTaxEmplSum.AcquittanceFuturePeriod, rPayTaxEmplSum.PassToGni,
                rPayTaxEmplSum.PayrollRedemptionAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNetIncomeManual</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayAmount getNetIncomeManual(RHRMPayMainEmplId      _emplId,
                                                       RpayTaxIncomeGroupCode _incomeGroup,
                                                       ReportPeriod_RU        _payPeriod,
                                                       NoYes                  _source = NoYes::No)
    {
        RPayAmount       incomeAmount;
        RPayTaxEmplSum   rPayTaxEmplSum;
        RPayTaxEmplTrans rPayTaxEmplTrans;
        ;
        while select RpayTaxType,RpayTaxDeductionCode,Amount, Deduction from rPayTaxEmplTrans
                 where  rPayTaxEmplTrans.Manual == NoYes::Yes
              exists join rPayTaxEmplSum
                  where rPayTaxEmplTrans.TaxSumRecId          == rPayTaxEmplSum.RecId &&
                        rPayTaxEmplSum.EmplId                 == _emplId              &&
                        rPayTaxEmplSum.Source                 == _source              &&
                        rPayTaxEmplSum.PayPeriod              == _payPeriod           &&
                        rPayTaxEmplSum.RpayTaxIncomeGroupCode == _incomeGroup
        {
            if (rPayTaxEmplTrans.RpayTaxType == RpayTaxType::Deduction)
            {
                if (RPayTaxDeductionTable::find(rPayTaxEmplTrans.RpayTaxDeductionCode).RpayTaxDeductionType != RpayTaxDeductionType::Standard)
                {
                    incomeAmount = incomeAmount - rPayTaxEmplTrans.Amount;
                }
            }
            else
            {
                incomeAmount = incomeAmount + (rPayTaxEmplTrans.Amount - rPayTaxEmplTrans.Deduction);
            }
        }

        return incomeAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReckoningTaxAmount</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayAmount getReckoningTaxAmount(RHRMPayMainEmplId      _emplId,
                                                          RpayTaxIncomeGroupCode _incomeGroup,
                                                          ReportPeriod_RU        _startDate = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                          ReportPeriod_RU        _endDate   = endmth(prevMth(RPayParameters::payPeriod())))
    {
        RPayTaxEmplSum rPayTaxEmplSum;
        ;
        select sum(ReckoningTaxAmount) from rPayTaxEmplSum
            where rPayTaxEmplSum.EmplId                 == _emplId      &&
                  rPayTaxEmplSum.RpayTaxIncomeGroupCode == _incomeGroup &&
                  rPayTaxEmplSum.Source                 == NoYes::No    &&
                  rPayTaxEmplSum.PayPeriod              >= _startDate   &&
                  rPayTaxEmplSum.PayPeriod              <= _endDate;

        return rPayTaxEmplSum.ReckoningTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCodeSum</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static container getTaxCodeSum(RHRMPayMainEmplId      _emplId,
                                                 RpayTaxIncomeGroupCode _incomeGroup,
                                                 RpayTaxIncDedCode      _taxCode,
                                                 ReportPeriod_RU        _startDate  = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                 ReportPeriod_RU        _endDate    = endmth(prevMth(RPayParameters::payPeriod())),
                                                 boolean                _onlymanual = false,
                                                 RHRMFamilyRecId        _familyRecId = 0)
    {
        RPayTaxEmplSum rPayTaxEmplSum;
        RPayTaxEmplTrans  rPayTaxEmplTrans;
        ;

        select forceplaceholders sum(Deduction),sum(Amount) from rPayTaxEmplTrans
            exists join rPayTaxEmplSum where rPayTaxEmplSum.EmplId                 == _emplId              &&
                                             rPayTaxEmplSum.RpayTaxIncomeGroupCode == _incomeGroup         &&
                                             rPayTaxEmplSum.PayPeriod              >= _startDate           &&
                                             rPayTaxEmplSum.PayPeriod              <= _endDate             &&
                                             rPayTaxEmplTrans.TaxSumRecId          == rPayTaxEmplSum.RecId &&
                                             rPayTaxEmplTrans.RpayTaxIncDedCode    == _taxCode             &&
                                             (rPayTaxEmplTrans.FamilyRecId          == _familyRecId || !_familyRecId) &&
                                            (rPayTaxEmplTrans.Manual               == NoYes::Yes ||
                                            (_onlymanual  ? false : true));

        return [ rPayTaxEmplTrans.Amount, rPayTaxEmplTrans.Deduction ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxSum</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static container getTaxSum(RHRMPayMainEmplId      _emplId,
                                             RpayTaxIncomeGroupCode _incomeGroup,
                                             ReportPeriod_RU        _startDate     = endmth(dateStartYr(RPayParameters::payPeriod())),
                                             ReportPeriod_RU        _endDate       = endmth(prevMth(RPayParameters::payPeriod())),
                                             RPayCorrectedPeriod    _corStartDate  = dateNull(),
                                             RPayCorrectedPeriod    _corEndDate    = dateMax(),
                                             boolean                _onlyOwnIncome = false)
    {
        RPayTaxEmplSum rPayTaxEmplSum;
        ;

        select sum(DeductionStandardAmount),sum(DeductionOtherAmount),sum(AcquittanceFuturePeriod),
               sum(IncomeAmount),sum(DeductTaxAmountFuture),sum(Acquittance),sum(PassToGni),
               sum(DeductTaxAmount),sum(AddTaxAmount),sum(ReckoningTaxAmount), sum(PayrollRedemptionAmount) from rPayTaxEmplSum
            where rPayTaxEmplSum.EmplId                 == _emplId       &&
                  (! _incomeGroup                                        ||
                  rPayTaxEmplSum.RpayTaxIncomeGroupCode == _incomeGroup) &&
                  rPayTaxEmplSum.PayPeriod              >= _startDate    &&
                  rPayTaxEmplSum.PayPeriod              <= _endDate      &&
                  rPayTaxEmplSum.CorrectedPeriod        >= _corStartDate &&
                  rPayTaxEmplSum.CorrectedPeriod        <= _corEndDate   &&
                 (rPayTaxEmplSum.Source == NoYes::No ||
                 (_onlyOwnIncome ? false : true));

        return [rPayTaxEmplSum.IncomeAmount,rPayTaxEmplSum.DeductionStandardAmount,
                rPayTaxEmplSum.DeductionOtherAmount,rPayTaxEmplSum.DeductTaxAmount,
                rPayTaxEmplSum.AddTaxAmount,rPayTaxEmplSum.ReckoningTaxAmount,
                rPayTaxEmplSum.DeductTaxAmountFuture,rPayTaxEmplSum.Acquittance,
                rPayTaxEmplSum.AcquittanceFuturePeriod,rPayTaxEmplSum.PassToGni, rPayTaxEmplSum.PayrollRedemptionAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxSumTotal</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static container getTaxSumTotal(RHRMPayMainEmplId _emplId,
                                                  ReportPeriod_RU   _startDate     = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                  ReportPeriod_RU   _endDate       = endmth(prevMth(RPayParameters::payPeriod())),
                                                  boolean           _onlyOwnIncome = false)
    {
        RPayTaxEmplSum rPayTaxEmplSum;
        ;
        select sum(DeductionStandardAmount),sum(DeductionOtherAmount),sum(AcquittanceFuturePeriod),
               sum(IncomeAmount),sum(DeductTaxAmountFuture),sum(Acquittance),sum(PassToGni),
               sum(DeductTaxAmount),sum(AddTaxAmount),sum(ReckoningTaxAmount) from rPayTaxEmplSum
            where rPayTaxEmplSum.EmplId    == _emplId    &&
                  rPayTaxEmplSum.PayPeriod >= _startDate &&
                  rPayTaxEmplSum.PayPeriod <= _endDate   &&
                 (rPayTaxEmplSum.Source == NoYes::No    ||
                 (_onlyOwnIncome ? false : true));

        return [rPayTaxEmplSum.IncomeAmount,rPayTaxEmplSum.DeductionStandardAmount,
                rPayTaxEmplSum.DeductionOtherAmount,rPayTaxEmplSum.DeductTaxAmount,
                rPayTaxEmplSum.AddTaxAmount,rPayTaxEmplSum.ReckoningTaxAmount,
                rPayTaxEmplSum.DeductTaxAmountFuture,rPayTaxEmplSum.Acquittance,
                rPayTaxEmplSum.AcquittanceFuturePeriod,rPayTaxEmplSum.PassToGni];
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSumForRateBranch</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static container taxSumForRateBranch(RHRMPayMainEmplId _emplId,
                                                       RPayRateCode      _payRateCode,
                                                       BranchId_RU       _branchId,
                                                       ReportPeriod_RU   _startDate     = endmth(dateStartYr(RPayParameters::payPeriod())),
                                                       ReportPeriod_RU   _endDate       = endmth(prevMth(RPayParameters::payPeriod())),
                                                       boolean           _onlyOwnIncome = false,
                                                       boolean           _taxByBranch   = false,
                                                       TransDate         _reportDate    = _endDate)
    {
        RPayTaxEmplSum          rPayTaxEmplSum;
        RPayTaxIncomeGroupTable rPayTaxIncomeGroupTable;
        ;

        select sum(DeductionStandardAmount), sum(DeductionOtherAmount), sum(AcquittanceFuturePeriod),
               sum(IncomeAmount), sum(DeductTaxAmountFuture), sum(Acquittance), sum(PassToGni),
               sum(DeductTaxAmount), sum(AddTaxAmount), sum(ReckoningTaxAmount), sum(PayrollRedemptionAmount) from rPayTaxEmplSum
            where rPayTaxEmplSum.EmplId    == _emplId    &&
                ((rPayTaxEmplSum.CorrectedPeriod == dateNull() &&
                  rPayTaxEmplSum.PayPeriod >= _startDate &&
                  rPayTaxEmplSum.PayPeriod <= _endDate) ||
                 (rPayTaxEmplSum.CorrectedPeriod != dateNull() &&
                  rPayTaxEmplSum.CorrectedPeriod >= _startDate &&
                  rPayTaxEmplSum.CorrectedPeriod <= _endDate &&
                  rPayTaxEmplSum.PayPeriod <= _reportDate)) &&
                 (rPayTaxEmplSum.Source    == NoYes::No  ||
                 (_onlyOwnIncome ? false : true)) &&
                 (!_taxByBranch || rPayTaxEmplSum.BranchId == _branchId)
        exists join rPayTaxIncomeGroupTable
            where rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode == rPayTaxEmplSum.RpayTaxIncomeGroupCode &&
                 (rPayTaxIncomeGroupTable.RateCode               == _payRateCode ||
                  rPayTaxIncomeGroupTable.RateCodeGroup          == _payRateCode ||
                  !_payRateCode);

        return [rPayTaxEmplSum.IncomeAmount,            rPayTaxEmplSum.DeductionStandardAmount,
                rPayTaxEmplSum.DeductionOtherAmount,    rPayTaxEmplSum.DeductTaxAmount,
                rPayTaxEmplSum.AddTaxAmount,            rPayTaxEmplSum.ReckoningTaxAmount,
                rPayTaxEmplSum.DeductTaxAmountFuture,   rPayTaxEmplSum.Acquittance,
                rPayTaxEmplSum.AcquittanceFuturePeriod, rPayTaxEmplSum.PassToGni,
                rPayTaxEmplSum.PayrollRedemptionAmount];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RPayTax</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@RUP6157</DeveloperDocumentation>
	<FormRef>RpayTaxSum</FormRef>
	<Label>@RUP571</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>EmplId</TitleField1>
	<TitleField2>PayPeriod</TitleField2>
	<ClusteredIndex>EmplPeriodGroupIdx</ClusteredIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>EmplPeriodGroupIdx</PrimaryIndex>
	<ReplacementKey>EmplPeriodGroupIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RPayTaxEmplTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RPayTaxEmplTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpayTaxIncomeGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpayTaxIncomeGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRateCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LastYearsDebtsRepayment</Name>
			<Label>@RUP1245</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Acquittance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquittanceFuturePeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PassToGni</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpayTaxIncomeGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncomeAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductionStandardAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductionOtherAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecalculationSums</Name>
			<Label>@RUP1241</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReckoningTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductTaxAmountFuture</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayrollRedemptionAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Acquittance</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP1235</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AcquittanceFuturePeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP1242</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AddTaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP577</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BranchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BranchId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCorrectedPeriod</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeductionOtherAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP573</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeductionStandardAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP575</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeductTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP579</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeductTaxAmountFuture</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP51</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmplId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RHRMPayMainEmplId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IncomeAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@SYS55266</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PassToGni</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP1237</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PayPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportPeriod_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PayrollRedemptionAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP3136</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReckoningTaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP756</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RpayTaxIncomeGroupCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RpayTaxIncomeGroupCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS27472</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxRateCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayRateCode</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmplPeriodGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EmplId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Source</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RpayTaxIncomeGroupCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BranchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Branches_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Branches_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BranchId</Name>
					<SourceEDT>BranchId_RU</SourceEDT>
					<Field>BranchId</Field>
					<RelatedField>BranchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BranchIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RHRMEmplTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RHRMEmplTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EmplId</Name>
					<Field>EmplId</Field>
					<RelatedField>PayMainEmplId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayRateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayRateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRateCode</Name>
					<SourceEDT>RPayRateCode</SourceEDT>
					<Field>TaxRateCode</Field>
					<RelatedField>PayRate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PayRateIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RpayTaxEmplTrans</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>RPayTaxEmplTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>TaxSumRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayTaxIncomeGroupTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayTaxIncomeGroupTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RpayTaxIncomeGroupCode</Name>
					<Field>RpayTaxIncomeGroupCode</Field>
					<RelatedField>RpayTaxIncomeGroupCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>