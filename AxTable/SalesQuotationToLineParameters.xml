<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationToLineParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationToLineParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field label for the <c>SalesQuotationTable</c> field related to the
    /// <c>SalesQuotationToLineParameters</c> record.
    /// </summary>
    /// <returns>
    /// The field label for the <c>SalesQuotationTable</c> field related to the
    /// <c>SalesQuotationToLineParameters</c> record.
    /// </returns>
    display FieldLabel fieldName()
    {
        FieldLabel  label;

        if (this.FieldId == fieldNum(SalesQuotationTable, DefaultDimension))
        {
            label = "@SYS14926";
        }
        else if (this.FieldId == fieldNum(SalesQuotationTable, InventLocationId))
        {
            label = "@SYS108783";
        }
        else
        {
            label = fieldId2pname(tableNum(SalesQuotationTable), this.FieldId);
        }
        return label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record exist for a field ID.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID to check if a record exists.
    /// </param>
    /// <returns>
    /// true if a record exist for a field ID; otherwise, false.
    /// </returns>
    static boolean exist(FieldId    _fieldId)
    {
        if (!_fieldId)
        {
            return false;
        }

        return (select firstonly RecId
                    from salesQuotationToLineParameters
                        where salesQuotationToLineParameters.FieldId == _fieldId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enabled state of a field based on the configuration key defined for the field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    /// <returns>
    /// true if the field is enabled; otherwise, false.
    /// </returns>
    static boolean fieldEnabled(FieldId _fieldId)
    {
        boolean                 enabled                 = true;
        DictField               dictField               = new DictField(tableNum(SalesQuotationTable), _fieldId);
        DictConfigurationKey    dictConfigurationKey    = new DictConfigurationKey(dictField.configurationKeyId());

        if (dictConfigurationKey)
        {
            enabled = dictConfigurationKey.enabled();
        }

        if (_fieldId == fieldNum(SalesQuotationTable, OverrideSalesTax)
            && !(Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales)
                || Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project)))
        {
            enabled = false;
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>SalesQuotationToLineParameters</c> record.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID to find a record for.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether the record is to be selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>SalesQuotationToLineParameters</c> record.
    /// </returns>
    static SalesQuotationToLineParameters   find(FieldId   _fieldId,boolean   _update = false)
    {
        SalesQuotationToLineParameters   salesQuotationToLineParameters;

        if (_fieldId)
        {
            salesQuotationToLineParameters.selectForUpdate (_update);

            select firstonly salesQuotationToLineParameters
                where salesQuotationToLineParameters.FieldId == _fieldId;
        }

        return salesQuotationToLineParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header2LineFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the list of fields to be included in the header to lines update.
    /// </summary>
    /// <returns>
    /// The list of fields to be included in the header to lines update.
    /// </returns>
    static container header2LineFieldIdList()
    {
        int             i,h;
        container       fList;
        SysDictField    sysDictField;
        DictFieldGroup  dictFieldGroup;
        DictTable       dictTable = new DictTable(tableNum(SalesQuotationTable));

        for (i=1;i<=dictTable.fieldGroupCnt();i++)
        {
            if (dictTable.fieldGroup(i) == tableFieldgroupStr(SalesQuotationTable, HeaderToLineUpdate))
            {
                dictFieldGroup = new DictFieldGroup(tableNum(SalesQuotationTable),dictTable.fieldGroup(i));
                for (h=1;h<=dictFieldGroup.numberOfFields();h++)
                {
                    sysDictField = new SysDictField(tableNum(SalesQuotationTable), dictFieldGroup.field(h));
                    fList += sysDictField.id();
                }
                return fList;
            }
        }
        return fList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes records for the header to line fields
    /// </summary>
    static void initiate()
    {
        SalesQuotationToLineParameters   salesQuotationToLineParameters;
        container                       header2LineFieldIds;
        int                             pos = 1;

        if (!SalesQuotationToLineParameters::initiated())
        {
            header2LineFieldIds = SalesQuotationToLineParameters::header2LineFieldIdList();

            ttsbegin;

            while (pos <= conLen(header2LineFieldIds))
            {
                salesQuotationToLineParameters.clear();
                salesQuotationToLineParameters.initValue();
                salesQuotationToLineParameters.FieldId           = conPeek(header2LineFieldIds, pos);
                salesQuotationToLineParameters.Table2LineUpdate  = TradeTable2LineUpdate::Prompt;
                salesQuotationToLineParameters.insert();

                pos++;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the records for header to line fields were created.
    /// </summary>
    /// <returns>
    /// true if the records for header to line fields were created; otherwise, false.
    /// </returns>
    static boolean initiated()
    {
        SalesQuotationToLineParameters salesQuotationToLineParameters;

        select firstonly RecId from salesQuotationToLineParameters;

        return salesQuotationToLineParameters.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@GLS180175</DeveloperDocumentation>
	<Label>@GLS180176</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>FieldId</TitleField1>
	<TitleField2>Table2LineUpdate</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>SalesTable2LineParametersIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>SalesTable2LineParametersIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Table2LineUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Update</Name>
			<Label>@SYS2934</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Table2LineUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
			<RelatedTable>SalesQuotationTable</RelatedTable>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Table2LineUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TradeTable2LineUpdate</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesTable2LineParametersIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchTableToLineParameters</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>FieldId</MapField>
					<MapFieldTo>FieldId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Table2LineUpdate</MapField>
					<MapFieldTo>Table2LineUpdate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations />
	<StateMachines />
</AxTable>