<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approximateTaxValue_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the approximate tax value for the current item
    /// </summary>
    /// <returns>
    /// The approximate tax value for the current item
    /// </returns>
    public ApproximateTaxValue_BR approximateTaxValue_BR()
    {
        if (this.ApproxTaxValue_BR)
        {
            return this.ApproxTaxValue_BR;
        }
        else if (this.ExceptionCode_BR)
        {
            return this.TaxationOrigin_BR == FITaxationOrigin_BR::National ?
                                      ExceptionCodeTable_BR::approximateTaxValueNational(this.ExceptionCode_BR, this.TaxFiscalClassification_BR)
                                    : ExceptionCodeTable_BR::approximateTaxValueImported(this.ExceptionCode_BR, this.TaxFiscalClassification_BR);
        }
        else
        {
            return this.TaxationOrigin_BR == FITaxationOrigin_BR::National ?
                                                  TaxFiscalClassification_BR::approximateTaxValueNational(this.TaxFiscalClassification_BR)
                                                : TaxFiscalClassification_BR::approximateTaxValueImported(this.TaxFiscalClassification_BR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomCalcGroup</Name>
				<Source><![CDATA[
    public BOMCalcGroup bomCalcGroup()
    {
        BOMCalcGroup    bomCalcGroup;

        if (this.bomCalcGroupId)
        {
            bomCalcGroup = BOMCalcGroup::find(this.bomCalcGroupId);

            if (!bomCalcGroup)
            {
                warning(strFmt("@SYS94157", this.bomCalcGroupId, this.ItemId), '', InventTable::infoActionBOMCalcGroup(this.ItemId, this));
            }
        }

        // fallback to inventory parameters if not found on items
        if (!bomCalcGroup)
        {
            bomCalcGroup = BOMParameters::bomCalcGroup();
        }

        return bomCalcGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    public BOMId bomId(
        TransDate   _searchDate,
        FromQty     _searchQty,
        InventDim   _searchInventDim)
    {
        return BOMVersion::findActive(this.ItemId, _searchDate, _searchQty, _searchInventDim).bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item sales tax group ID for the given item.
    /// </summary>
    /// <param name = "_moduleType">The type of tax group ID.</param>
    /// <param name = "_itemId">The ID of the item for which to get the tax group ID.</param>
    /// <param name = "_inventDimId">The ID of an inventory dimension record containing the product dimension for which to get the tax group ID. Optional.</param>
    /// <returns>The tax group ID specific to the item and product dimensions if it is a variant and it is specifically defined, otherwise the tax group ID defined on the item master or distinct item.</returns>
    internal static TaxItemGroup getTaxItemGroupId(
        ModuleInventPurchSales _moduleType,
        ItemId _itemId,
        InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        TaxItemGroup taxItemGroup;

        if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
            && (_moduleType ==ModuleInventPurchSales::Purch
                || _moduleType ==ModuleInventPurchSales::Sales)
            && _inventDimId != InventDim::inventDimIdBlank())
        {
            InventDim inventDimProduct = InventDim::find(_inventDimId);
            inventDimProduct.clearNotProductDim(InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId));
            inventDimProduct = InventDim::findOrCreate(inventDimProduct);

            InventDimCombination inventDimCombination = InventDimCombination::findByInventDim(_itemId, inventDimProduct);

            if (inventDimCombination)
            {
                return inventDimCombination.getTaxItemGroupId(_moduleType);
            }
        }

        return InventTableModule::find(_itemId, _moduleType).TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomIdConstruction</Name>
				<Source><![CDATA[
    public BOMId bomIdConstruction(
        BOMRouteVersionSelect   _bomRouteVersionSelect,
        TransDate               _searchDate,
        FromQty                 _searchQty,
        InventDim               _searchInventDim)
    {
        if (!this.RecId || (!this.isBOMAllowed() && !this.isFormulaAllowed()))
        {
            return '';
        }

        if (_bomRouteVersionSelect == BOMRouteVersionSelect::Active || !isConfigurationkeyEnabled(configurationKeyNum(BOMVersion)))
        {
            return this.bomId(_searchDate, _searchQty, _searchInventDim);
        }

        BOMVersion bomVersion = BOMVersion::selectBomVersion(this.ItemId, _searchDate, _searchQty, _searchInventDim, true, true, true, true, true, '', false, true);

        if (_bomRouteVersionSelect == BOMRouteVersionSelect::Selected)
        {
            return bomVersion.bomId;
        }

        return bomVersion.RecId ? bomVersion.bomId : this.bomId(_searchDate, _searchQty, _searchInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomUnitId</Name>
				<Source><![CDATA[
    public BOMUnitId bomUnitId()
    {
        if (this.bomUnitId)
        {
            return this.bomUnitId;
        }

        return this.inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the category name of the selected category record.
    /// </summary>
    /// <returns>
    /// The category name that was selected from the category lookup.
    /// </returns>
    public display EcoResCategoryName categoryName()
    {
        return EcoResProductCategory::findCategoryByProduct(this.Product).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAltInventDimCombination</Name>
				<Source><![CDATA[
    private boolean checkAltInventDimCombination()
    {
        InventDim inventDim;
        inventDim.initAlternativeProductDimensionsFromInventTable(this);
        return inventDim.validateWriteProductDimensions(this.AltItemId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkColorId</Name>
				<Source><![CDATA[
    public boolean checkColorId(EcoResItemColorName _inventColorId, boolean _silence = false)
    {
        return InventProductDimensionColor::getInstance().checkExistsValueForItem(this, _inventColorId, _silence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfigId</Name>
				<Source><![CDATA[
    public boolean checkConfigId(EcoResItemConfigurationName _configId, boolean _silence = false)
    {
        return InventProductDimensionConfig::getInstance().checkExistsValueForItem(this, _configId, _silence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCostGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the cost group type of the current cost group is correct with regard to the
    /// product type.
    /// </summary>
    /// <returns>
    /// true if cost group type is correct; otherwise, false.
    /// </returns>
    public boolean checkCostGroupId()
    {
        boolean ret = true;

        if (this.CostGroupId)
        {
            ret = this.inventItemType().isCostGroupTypeValid();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimGroupForBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the assigned dimension group is valid for the item.
    /// </summary>
    /// <returns>
    /// true if the assigned dimension group is valid; otherwise, false.
    /// </returns>
    public boolean checkDimGroupForBatch()
    {
        boolean ret = true;

        if (#PdsShelfEnabled)
        {
            if ((select firstonly inventBatch
                    where  inventBatch.ItemId == this.ItemId
                        && inventBatch.ExpDate).RecId != 0)
            {
                if (!this.isItemBatchActivated())
                {
                    ret = checkFailed(strFmt("@PRO961", fieldPName(InventDim, InventBatchId)));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFiscalLIFOValuePrevYear</Name>
				<Source><![CDATA[
    private boolean checkFiscalLIFOValuePrevYear()
    {
        InventFiscalLIFOJournalTable    inventFiscalLIFOJournalTable;
        InventFiscalLIFOJournalTrans    inventFiscalLIFOJournalTrans;

        if (!this.ItemId)
        {
            return false;
        }

        select sum(QtyReceipt), sum(QtyIssue) from inventFiscalLIFOJournalTrans
            group by ItemId
            where inventFiscalLIFOJournalTrans.ItemId    == this.ItemId
               && inventFiscalLIFOJournalTrans.ItemGroup == ItemGroup::Item
            exists join inventFiscalLIFOJournalTable
            where inventFiscalLIFOJournalTable.JournalId         == inventFiscalLIFOJournalTrans.JournalId
               && inventFiscalLIFOJournalTable.JournalType       == InventFiscalLIFOJournalType::FinalReport
               && inventFiscalLIFOJournalTable.FinalReportClosed == NoYes::Yes;

        return (inventFiscalLIFOJournalTrans.QtyReceipt - inventFiscalLIFOJournalTrans.QtyIssue) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkICMSOnService_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks if the field ICMS on Service is checked even when the Item Type is not Service.
    /// </summary>
    /// <returns>
    /// Returns a error message.
    /// </returns>
    public boolean checkICMSOnService_BR()
    {
        boolean ret;

        ret = true;

        if (this.ItemType != ItemType::Service && this.icmsOnService_BR == NoYes::Yes)
        {
            ret = checkFailed (strFmt("@SYS92012", fieldPName(InventTable, icmsOnService_BR)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipStandardVariantValidationInCurrentTransactionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables or enables the validation of standard product dimensions in the current transaction scope.
    /// </summary>
    /// <param name="_mustSkip">A boolean value indicating whether the validation must be skipped.</param>
    /// <returns>A boolean value indicating whether the validation must be skipped.</returns>
    public static boolean skipStandardVariantValidationInCurrentTransactionScope(boolean _mustSkip = false)
    {
        return InventTable::skipLogicInCurrentTransactionScope('SkipStandardVariantValidation', _mustSkip, !prmIsDefault(_mustSkip));
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAlternativeVariantValidationInCurrentTransactionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables or enables the validation of alternative product dimensions in the current transaction scope.
    /// </summary>
    /// <param name="_mustSkip">A boolean value indicating whether the validation must be skipped.</param>
    /// <returns>A boolean value indicating whether the validation must be skipped.</returns>
    public static boolean skipAlternativeVariantValidationInCurrentTransactionScope(boolean _mustSkip = false)
    {
        return InventTable::skipLogicInCurrentTransactionScope('SkipAlternativeVariantValidation', _mustSkip, !prmIsDefault(_mustSkip));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDimCombination</Name>
				<Source><![CDATA[
    public boolean checkInventDimCombination()
    {
        boolean skipStandardVariantValidation = InventTable::skipStandardVariantValidationInCurrentTransactionScope();
        boolean skipAlternativeVariantValidation = InventTable::skipAlternativeVariantValidationInCurrentTransactionScope();
        return (skipStandardVariantValidation || this.checkStandardInventDimCombination())
            && (skipAlternativeVariantValidation || this.checkAltInventDimCombination());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCode_RU</Name>
				<Source><![CDATA[
    public void checkMarkupCode_RU()
    {
        MarkupTable markupTable;

        if (this.isMarkupCodeEnabled_RU() && this.MarkupCode_RU)
        {
            markupTable = MarkupTable::find(MarkupModuleType::Vend, this.MarkupCode_RU);

            if (markupTable.CustType != MarkupType::LedgerAccount || markupTable.VendType != MarkupType::CustVend)
            {
                this.MarkupCode_RU = '';
                warning("@Inventory_Localization:OnlyDebitTypeCustomerVendorAllowed");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPhantom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item is a phantom item.
    /// </summary>
    /// <returns>
    /// true if the item is a phantom item; otherwise, false.
    /// </returns>
    public boolean checkPhantom()
    {
        return this.Phantom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPlanningItemCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the cost allocation for a planning item is valid.
    /// </summary>
    /// <param name="_bomVersion">
    /// The <c>BOMVersion</c> record to check the cost allocation for.
    /// </param>
    /// <returns>
    /// true if the cost allocation is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The cost allocation of co-products associated with formula version for a planning item
    /// must add up to 100% as the planning item cannot have any cost allocated to it.
    /// </remarks>
    public boolean checkPlanningItemCost(BOMVersion _bomVersion = null)
    {
        BOMVersion                  bomVersion;
        boolean                     ret = true;
        PmfCostAllocationPct        pct;
        #define.PMF_DEC4ROUND(4)

        if (this.PmfProductType == PmfProductType::MainItem)
        {
            if (!_bomVersion)
            {
                while select bomId from bomVersion
                    where bomVersion.ItemId == this.ItemId
                        && bomVersion.Approved  == NoYes::Yes
                        && bomVersion.Active    == NoYes::Yes
                {
                    pct = bomVersion.pmfTotalCostAlloc();

                    if (decRound(100-pct, #PMF_DEC4Round)!= 0)
                    {
                        ret = checkFailed(strFmt("@PRO2332", bomVersion.bomId));
                    }
                }
            }
            else
            {
                pct = _bomVersion.pmfTotalCostAlloc();

                if (decRound(100-pct, #PMF_DEC4Round)!= 0)
                {
                    ret = checkFailed(strFmt("@PRO2332", bomVersion.bomId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the assigned production type is valid for service or purchased items.
    /// </summary>
    /// <returns>
    /// true if the production type is valid; otherwise, false.
    /// </returns>
    public boolean checkProductType()
    {
        boolean     ret = true;

        if (#PmfEnabled)
        {
            if (this.PmfProductType != PmfProductType::None)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectCategoryTypeValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the project category type is valid.
    /// </summary>
    /// <param name = "_projCategoryType">The project category type.</param>
    /// <returns>true if it is valid; otherwise, false.</returns>
    protected boolean isProjectCategoryTypeValid(ProjCategoryType _projCategoryType)
    {
        return _projCategoryType == ProjCategoryType::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategoryId</Name>
				<Source><![CDATA[
    public boolean checkProjCategoryId()
    {
        boolean ret = true;

        if (this.ProjCategoryId)
        {
            ProjCategory projCategory = ProjCategory::find(this.ProjCategoryId);

            if (!this.isProjectCategoryTypeValid(projCategory.CategoryType))
            {
                ret = checkFailed(strFmt("@SYS54897", this.ProjCategoryId));
            }
            ret = ret && projCategory.validateIfInactiveAllowed();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRefInventTrans</Name>
				<Source><![CDATA[
    public boolean checkRefInventTrans(InventTrans _inventTrans)
    {
        if (this.ItemId != _inventTrans.ItemId)
        {
            return checkFailed("@SYS7549");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSizeId</Name>
				<Source><![CDATA[
    public boolean checkSizeId(EcoResItemSizeName _inventSizeId, boolean _silence = false)
    {
        return InventProductDimensionSize::getInstance().checkExistsValueForItem(this, _inventSizeId, _silence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStandardInventDimCombination</Name>
				<Source><![CDATA[
    private boolean checkStandardInventDimCombination()
    {
        InventDim inventDim;

        setPrefix("@SYS73762");

        this.initStandardProductDimensions(inventDim);

        return inventDim.validateWriteInventDimCombination(this.ItemId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStyleId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the specified style name is valid for this item.
    /// </summary>
    /// <param name="_inventStyleId">
    ///    The style name
    /// </param>
    /// <returns>
    ///    true if the style is valid; otherwise, false.
    /// </returns>
    public boolean checkStyleId(EcoResItemStyleName _inventStyleId)
    {
        return InventProductDimensionStyle::getInstance().checkExistsValueForItem(this, _inventStyleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the specified version name is valid for this item.
    /// </summary>
    /// <param name="_inventVersionId">
    ///    The version name
    /// </param>
    /// <returns>
    ///    true if the version is valid; otherwise, false.
    /// </returns>
    public boolean checkProductVersionId(EcoResItemVersionName _inventVersionId)
    {
        return InventProductDimensionVersion::getInstance().checkExistsValueForItem(this, _inventVersionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    public boolean checkValid(ItemId _itemId)
    {
        boolean         ok = true;

        if (! _itemId)
        {
            ok = checkFailed("@SYS16661");
        }

        if (! this && _itemId)
        {
            ok = checkFailed(strFmt(InventTable::txtNotExist(), _itemId) );
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>colorActive</Name>
				<Source><![CDATA[
    public display boolean colorActive()
    {
        return EcoResProductDimGroupSetup::newItemId(this.ItemId).getFieldSetup(fieldNum(InventDim, InventColorId)).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>configActive</Name>
				<Source><![CDATA[
    public display boolean configActive()
    {
        return EcoResProductDimGroupSetup::newItemId(this.ItemId).getFieldSetup(fieldNum(InventDim, ConfigId)).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost group.
    /// </summary>
    /// <returns>
    /// The cost group.
    /// </returns>
    /// <remarks>
    /// If the cost group on the item is blank, the default cost group is returned.
    /// </remarks>
    public CostGroupId costGroup()
    {
        if (this.CostGroupId)
        {
            return this.CostGroupId;
        }
        return this.inventItemType().defaultCostGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPcsPrice</Name>
				<Source><![CDATA[
    public display CostPrice costPcsPrice(
        InventDimId             _inventDimId                = '',   // can be = '' if setting the _inventDim buffer
        InventDim               _inventDim                  = null, // set this parameter for better performance if avail
        InventTableModule       _inventTableModuleInvent    = null, // set this parameter for better performance if avail
        PriceDate               _priceDate                  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean                 _throwError                 = false)
    {
        str         cacheScope;
        container   cacheKey;
        container   cacheValue;
        container   notFoundValue = [''];
        CostPrice   result;

        cacheScope = tableStr(InventTable) + ":" + tableMethodStr(InventTable, costPcsPrice);
        cacheKey = [this.ItemId,
                    _inventDimId ? _inventDimId : (_inventDim ? _inventDim.InventDimId : ''),
                    _inventTableModuleInvent ? enum2Value(_inventTableModuleInvent.ModuleType) : '',
                    _priceDate];
        cacheValue = SysTransactionScopeCache::get(cacheScope, cacheKey, notFoundValue);
        if (cacheValue == notFoundValue)
        {
            result = this.inventCostPriceMap(_inventDimId, _inventDim, _inventTableModuleInvent, _priceDate ? _priceDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), '', _throwError).pcsPrice();
            SysTransactionScopeCache::set(cacheScope, cacheKey, [result]);
        }
        else
        {
            [result] = cacheValue;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCostPrice2Amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the cost price to cost amount.
    /// </summary>
    /// <param name = "_unit">The sales unit ID.</param>
    /// <param name = "_costPrice">The cost price of the transaction.</param>
    /// <param name = "_priceUnit">The price unit for the transaction.</param>
    /// <param name = "_inventDimId">The ID of the inventDim.</param>
    /// <param name = "_inventDim">The <c>InventDim</c> object.</param>
    /// <returns>The converted cost amount for the given cost price.</returns>
    public CostAmount convertCostPrice2Amount(
        InventUnitId    _unit,
        CostPrice       _costPrice,
        PriceUnit       _priceUnit,
        InventDimId     _inventDimId = '',
        InventDim       _inventDim = null)
    {
        container   notFoundValue = [''];
        CostAmount  result;

        str cacheScope = tableStr(InventTable) + ":" + tableMethodStr(InventTable, convertCostPrice2Amount);
        container cacheKey = [this.ItemId,
                    _inventDimId ? _inventDimId : (_inventDim ? _inventDim.InventDimId : ''),
                    _inventDim];
        container cacheValue = SysTransactionScopeCache::get(cacheScope, cacheKey, notFoundValue);
        if (cacheValue == notFoundValue)
        {
            InventPriceMap inventPriceMap = this.inventCostPriceMap(_inventDimId, _inventDim, null);
        
            InventQty qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                  _inventDimId,
                                                                                                  1,
                                                                                                  _unit,
                                                                                                  this.inventUnitId(),
                                                                                                  NoYes::Yes);

            result = PriceDisc::price2Amount(_costPrice,
                                        _priceUnit,
                                        0,
                                        qty,
                                        qty,
                                        inventPriceMap.Markup(),
                                        0,
                                        '',
                                        0,
                                        true);
            SysTransactionScopeCache::set(cacheScope, cacheKey, [result]);
        }
        else
        {
            [result] = cacheValue;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPcsPriceSecCur_RU</Name>
				<Source><![CDATA[
    public display CostPriceSecCur_RU costPcsPriceSecCur_RU(
        InventDimId       _inventDimId             = '',
        InventDim         _inventDim               = null,
        InventTableModule _inventTableModuleInvent = null,
        PriceDate         _priceDate               = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean           _throwError              = false)
    {
        str         cacheScope;
        container   cacheKey;
        container   cacheValue;
        container   notFoundValue = [''];
        CostPrice   result;

        cacheScope = tableStr(InventTable) + ":" + tableMethodStr(InventTable, costPcsPriceSecCur_RU);
        cacheKey = [this.ItemId,
                    _inventDimId ? _inventDimId : (_inventDim ? _inventDim.InventDimId : ''),
                    _inventTableModuleInvent ? enum2Value(_inventTableModuleInvent.ModuleType) : '',
                    _priceDate];

        cacheValue = SysTransactionScopeCache::get(cacheScope, cacheKey, notFoundValue);
        if (cacheValue == notFoundValue)
        {
            result = this.inventCostPriceMapSecCur_RU(_inventDimId, _inventDim, _inventTableModuleInvent, _priceDate ? _priceDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), '', _throwError).pcsPriceSecCur_RU();
            SysTransactionScopeCache::set(cacheScope, cacheKey, [result]);
        }
        else
        {
            [result] = cacheValue;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendExternalItemDescription</Name>
				<Source><![CDATA[
    private CustVendExternalItemDescription custVendExternalItemDescription(
        ModuleInventCustVend    _moduleInventCustVend,
        CustVendAC              _custVendAccount)
    {
        CustVendExternalItemDescription custVendExternalItemDescription;
        InventDim                       inventDimBlank;

        if (_moduleInventCustVend == ModuleInventCustVend::Cust)
        {
            custVendExternalItemDescription = new CustExternalItemDescription(this.ItemId, inventDimBlank, _custVendAccount);
        }
        else
        {
            custVendExternalItemDescription = new VendExternalItemDescription(this.ItemId, inventDimBlank, _custVendAccount);
        }
        if (_custVendAccount)
        {
            custVendExternalItemDescription.findExternalDescription();
        }

        return custVendExternalItemDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCustVendExternalItemDescription</Name>
				<Source><![CDATA[
    private CustVendExternalItemDescription defaultCustVendExternalItemDescription()
    {
        ModuleInventCustVend    moduleType;
        CustVendAC              custVendAccount;

        if (VendTable::isVendor(true))
        {
            moduleType = ModuleInventCustVend::Vend;
            custVendAccount = DirPersonUserEx::vendAccount(DirPersonUser::current());
        }
        else
        {
            moduleType = ModuleInventCustVend::Invent;
            custVendAccount = '';
        }

        return this.custVendExternalItemDescription(moduleType, custVendAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExternalItemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves an external description of an item.
    /// </summary>
    /// <returns>
    ///     If a current user is a vendor then a description for a vendor is returned; otherwise, a description for a customer is returned.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display ExternalItemFreeTxt defaultExternalItemDescription()
    {
        return this.defaultCustVendExternalItemDescription().externalItemFreeTxt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExternalItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves an external ID of an item.
    /// </summary>
    /// <returns>
    ///     If a current user is a vendor then an ID for a vendor is returned; otherwise, an ID for a customer is returned.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display ExternalItemId defaultExternalItemId()
    {
        return this.defaultCustVendExternalItemDescription().externalItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description of a product that this item represents.
    /// </summary>
    /// <returns>
    /// The description of a product in the company language.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display EcoResDescription defaultProductDescription()
    {
        return this.productDescription(this.defaultProductLanguageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a product that this item represents.
    /// </summary>
    /// <returns>
    /// A name of a product in the company language.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display EcoResProductName defaultProductName()
    {
        return this.productName(this.defaultProductLanguageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductNameInSystemLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a product that this item represents in system language.
    /// </summary>
    /// <returns>
    /// A name of a product in system language.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display EcoResProductName defaultProductNameInSystemLanguage()
    {
        return this.productNameInSystemLanguage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ItemId itemIdOrig = this.ItemId;
        EcoResProductSubtype productSubType = this.productSubtype();
        boolean canHaveBOM = this.inventItemType().canHaveBOM();
        
        InventInstrumentationLogger logger = InventInstrumentationLogger::createLogger(tableStr(InventTable));

        using (var activityContext = logger.items().delete())
        {
            logger.logItemInformation(this.RecId);

            ttsbegin;

            this.preDeleteCrossCompany(canHaveBOM);

            super();

            this.postDeleteCrossCompany(itemIdOrig, productSubType);

            ttscommit;

            this.clearCacheAcrossAOSes(this.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preDeleteCrossCompany</Name>
				<Source><![CDATA[
    private void preDeleteCrossCompany(boolean _canHaveBOM)
    {
        this.dimensionAttributeValueUpdateCurrentCompany();
        this.deleteBOMVersionCurrentCompany(_canHaveBOM);

        if (InventTableDataSharingFeature::isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this, policy.RecId);
                QueryRun    queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    InventTable companyInventTable = queryRun.get(this.TableId);
                    DataAreaId company = companyInventTable.DataAreaId;

                    if (companyInventTable && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            InventTable inventTable = InventTable::find(companyInventTable.ItemId, true);
                            if (inventTable.RecId)
                            {
                                inventTable.dimensionAttributeValueUpdateCurrentCompany();
                                inventTable.deleteBOMVersionCurrentCompany(_canHaveBOM);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttributeValueUpdateCurrentCompany</Name>
				<Source><![CDATA[
    private void dimensionAttributeValueUpdateCurrentCompany()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.ItemId));
        }

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBOMVersionCurrentCompany</Name>
				<Source><![CDATA[
    private void deleteBOMVersionCurrentCompany(boolean _canHaveBOM)
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(BOMVersion)) && _canHaveBOM)
        {
            BOMVersion bomVersion;
            BOMVersion bomVersion2;
            while select bomVersion
                        group by bomId
                        where bomVersion.ItemId == this.ItemId
                   notexists join bomVersion2
                        where bomVersion2.bomId == bomVersion.bomId &&
                              bomVersion2.ItemId != this.ItemId
            {
                BOMTable bomTable;
                delete_from bomTable
                        where bomTable.bomId == bomVersion.bomId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDeleteCrossCompany</Name>
				<Source><![CDATA[
    private void postDeleteCrossCompany(ItemId _itemId, EcoResProductSubtype _productSubType)
    {
        this.deleteInventDistinctProductCurrentCompany(_itemId, _productSubType);

        if (InventTableDataSharingFeature::isEnabled())
        {
            boolean isItemDeleted = !InventTable::find(_itemId).Recid;

            ttsbegin;
            SetEnumerator crossCompanySet = SysDataSharingPolicy::crossCompaniesByCompanyAndTable(curExt(), tableStr(InventTable));
            while (crossCompanySet.moveNext())
            {
                DataAreaId company = crossCompanySet.current();
                changecompany(company)
                {
                    this.deleteInventDistinctProductCurrentCompany(_itemId, _productSubType);

                    if (isItemDeleted)
                    {
                        this.deleteAllOrderSettingsAndWarehouseItemsCurrentCompany(_itemId);
                    }
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllOrderSettingsAndWarehouseItemsCurrentCompany</Name>
				<Source><![CDATA[
    private void deleteAllOrderSettingsAndWarehouseItemsCurrentCompany(ItemId _itemId)
    {
        // If item is deleted in primary company then we should delete all records for that item in
        // InventItemInventSetup, InventItemPurchSetup, InventItemSalesSetup, InventItemLocation, WHSReservationHierarchyItem and InventDimCombination
        // validateDelete is not required, since item is delete and cleanup in all companies for item is required.
        InventItemInventSetup inventItemInventSetup;
        inventItemInventSetup.skipDeleteMethod(true);
        inventItemInventSetup.skipDeleteActions(true);
        delete_from inventItemInventSetup where inventItemInventSetup.ItemId == _itemId;

        InventItemSalesSetup inventItemSalesSetup;
        inventItemSalesSetup.skipDeleteMethod(true);
        inventItemSalesSetup.skipDeleteActions(true);
        delete_from inventItemSalesSetup where inventItemSalesSetup.ItemId == _itemId;

        InventItemPurchSetup inventItemPurchSetup;
        inventItemPurchSetup.skipDeleteMethod(true);
        inventItemPurchSetup.skipDeleteActions(true);
        delete_from inventItemPurchSetup where inventItemPurchSetup.ItemId == _itemId;

        InventItemLocation inventItemLocation;
        inventItemLocation.skipDeleteMethod(true);
        inventItemLocation.skipDeleteActions(true);
        delete_from inventItemLocation where inventItemLocation.ItemId == _itemId;

        WHSReservationHierarchyItem reservationHierarchyItem;
        reservationHierarchyItem.skipDeleteMethod(true);
        reservationHierarchyItem.skipDeleteActions(true);
        delete_from reservationHierarchyItem where reservationHierarchyItem.ItemId == _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventDistinctProductCurrentCompany</Name>
				<Source><![CDATA[
    private void deleteInventDistinctProductCurrentCompany(ItemId _itemId, EcoResProductSubtype _productSubType)
    {
        if (_productSubType == EcoResProductSubtype::Product)
        {
            InventDistinctProduct::deleteReleasedItem(_itemId, InventDim::inventDimIdBlank());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTMSInventEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets whether the item is TMS enabled
    /// </summary>
    /// <param name="_set">
    /// A <c>TMSEnabled</c> indicating whether to set the value.
    /// </param>
    /// <param name="_tmsEnabled">
    /// The new TMS enabled value when <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    /// true if the item is TMS enabled; otherwise, false.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit TMSEnabled editTMSInventEnabled(boolean _set, TMSEnabled _tmsEnabled)
    {
        if (_set)
        {
            TMSInventEnabled::updateItem(this.ItemId, _tmsEnabled);
        }

        return TMSInventEnabled::exist(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsWithCNPJ_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// It verifies if exist at least one record on <c>InventTable</c> with the CNPJ code
    /// </summary>
    /// <param name="_cnpj">
    /// CNPJ that needs to be verified
    /// </param>
    /// <returns>
    /// It returns true if at least one record is found
    /// </returns>
    // <GBR>
    public static boolean existsWithCNPJ_BR(CNPJCPFNum_BR _cnpj)
    {
        InventTable inventTable;
        
        return _cnpj && (select firstonly RecId from inventTable
                            where inventTable.CNPJ_BR == _cnpj).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsWithScaleIndicator_BR</Name>
				<Source><![CDATA[
    // </GBR>
    /// <summary>
    /// It verifies if exist at least one record on <c>InventTable</c> with the Scale indicator
    /// </summary>
    /// <param name="_scaleIndicator">
    /// ScaleIndicator that needs to be verified
    /// </param>
    /// <returns>
    /// It returns true if at least one record is found
    /// </returns>
    // <GBR>
    public static boolean existsWithScaleIndicator_BR(ScaleIndicator_BR _scaleIndicator)
    {
        InventTable inventTable;
        
        return _scaleIndicator && (select firstonly RecId from inventTable
                                        where inventTable.ScaleIndicator_BR == _scaleIndicator).RecId;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsVendInvoiceTrans_RU</Name>
				<Source><![CDATA[
    public boolean existsVendInvoiceTrans_RU()
    {
        return (select firstonly RecId from vendInvoiceTrans
                    where vendInvoiceTrans.ItemId == this.ItemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the external description of an item.
    /// </summary>
    /// <param name="_moduleInventCustVend">
    /// The module for which to retrieve a description.
    /// </param>
    /// <param name="_custVendAccount">
    /// A customer or vendor account.
    /// </param>
    /// <returns>
    /// An item description for a customer or a vendor.
    /// </returns>
    public ExternalItemFreeTxt externalItemDescription(
        ModuleInventCustVend    _moduleInventCustVend,
        CustVendAC              _custVendAccount)
    {
        return this.custVendExternalItemDescription(
            _moduleInventCustVend,
            _custVendAccount).externalItemFreeTxt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the external ID of an item.
    /// </summary>
    /// <param name="_moduleInventCustVend">
    /// A module for which to retrieve an external ID.
    /// </param>
    /// <param name="_custVendAccount">
    /// A customer or vendor account.
    /// </param>
    /// <returns>
    /// An item ID for a customer or a vendor.
    /// </returns>
    public ExternalItemId externalItemId(
        ModuleInventCustVend    _moduleInventCustVend,
        CustVendAC              _custVendAccount)
    {
        return this.custVendExternalItemDescription(
            _moduleInventCustVend,
            _custVendAccount).externalItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBomAndRouteForCoProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a BOM and Route data for a co-product based on the search criteria.
    /// </summary>
    /// <param name="_bomRouteVersionSelect">
    /// A specified <c>BOMRouteVersionSelect</c> BOM search principle.
    /// </param>
    /// <param name="_searchDate">
    /// A specified date search criterion.
    /// </param>
    /// <param name="_searchQty">
    ///  A specified quantity search criterion.
    /// </param>
    /// <param name="_searchInventDim">
    ///  A specified <c>InventDim</c> search criterion.
    /// </param>
    /// <returns>
    /// A <c>container</c> with a BOM and Route data for a co-product based on the search criteria.
    /// </returns>
    public container findBomAndRouteForCoProd(
        BOMRouteVersionSelect   _bomRouteVersionSelect,
        TransDate               _searchDate,
        FromQty                 _searchQty,
        InventDim               _searchInventDim)
    {
        BOMVersion          bomVersion;
        RouteVersion        routeVersion;
        PmfFormulaCoBy      pmfFormulaCoBy;
        InventDim           inventDimCoBy;
        InventDimParm       inventDimParmCoBy;

        if (#PmfEnabled && this.PmfProductType == PmfProductType::Co_Product && this.PmfPlanningItemId)
        {
            inventDimParmCoBy.initFromInventDim(_searchInventDim);

            switch(_bomRouteVersionSelect)
            {
                case BOMRouteVersionSelect::Active:
                    if (!bomVersion)
                    {
                        while select bomVersion
                            order by FromQty desc
                            where bomVersion.ItemId == this.PmfPlanningItemId
                               && bomVersion.Active == NoYes::Yes
                               && (bomVersion.FromDate  <= _searchDate || !bomVersion.FromDate)
                               && (bomVersion.ToDate    >= _searchDate || !bomVersion.ToDate)
                                join CostAllocationPct, CoByQty, CoByQtySerie, RecId from pmfFormulaCoBy
                                    where pmfFormulaCoBy.ItemId             == this.ItemId
                                       && pmfFormulaCoBy.bomVersionRefRecId == bomVersion.RecId
                                       && pmfFormulaCoBy.CoByQty > 0
                                    #InventDimExistsJoin(pmfFormulaCoBy.InventDimId, inventDimCoby, _searchInventDim, inventDimParmCoBy)
                        {
                            InventQty planningItemQty = _searchQty / (pmfFormulaCoBy.CoByQty / (pmfFormulaCoBy.CoByQtySerie ? pmfFormulaCoBy.CoByQtySerie : 1));
                            if (bomVersion.FromQty <= planningItemQty)
                            {
                                select firstonly RouteId from routeVersion
                                        order by FromQty desc
                                            where routeVersion.ItemId       == this.PmfPlanningItemId
                                               && bomVersion.Active         == NoYes::Yes
                                               && !(routeVersion.FromDate   > bomVersion.ToDate)
                                               && !(routeVersion.ToDate     < bomVersion.FromDate)
                                               && routeVersion.FromQty      <= bomVersion.FromQty;
                                break;
                            }
                        }
                    }
                    break;

                default:
                    select firstonly bomVersion
                        where bomVersion.ItemId == this.PmfPlanningItemId
                           && bomVersion.Construction == NoYes::Yes
                            join CostAllocationPct, CoByQty, CoByQtySerie, RecId from pmfFormulaCoBy
                                where pmfFormulaCoBy.ItemId             == this.ItemId
                                   && pmfFormulaCoBy.bomVersionRefRecId == bomVersion.RecId
                                   && pmfFormulaCoBy.CoByQty > 0
                                #InventDimExistsJoin(pmfFormulaCoBy.InventDimId, inventDimCoby, _searchInventDim, inventDimParmCoBy);

                    if (bomVersion)
                    {
                        select firstonly RouteId from routeVersion
                            order by FromQty
                            where routeVersion.ItemId == this.PmfPlanningItemId
                               && routeVersion.Construction == NoYes::Yes
                               && !(routeVersion.FromDate  > bomVersion.ToDate)
                               && !(routeVersion.ToDate    < bomVersion.FromDate)
                               && routeVersion.FromQty     >= bomVersion.FromQty;
                    }
            }
        }

        return [bomVersion, routeVersion.RouteId, pmfFormulaCoBy];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPriceAgreement</Name>
				<Source><![CDATA[
    public container getSalesPriceAgreement(
        InventDim           _inventDim,
        Qty                 _qty,
        UnitOfMeasureSymbol _unit,
        CustAccount         _accountNum,
        CurrencyCode        _currencyCode)
    {
        return this.salesPriceAgreement(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), _inventDim, _qty, _unit, _accountNum, _currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossVolume</Name>
				<Source><![CDATA[
    public Volume grossVolume()
    {
        return this.GrossDepth * this.GrossHeight * this.GrossWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossWeight</Name>
				<Source><![CDATA[
    public display ItemGrossWeight grossWeight()
    {
        return this.NetWeight + this.TaraWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveAltItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an active alternative item setup exists for this item.
    /// </summary>
    /// <returns>
    /// true if an active alternative item setup exists for this item; otherwise, false.
    /// </returns>
    public boolean hasActiveAltItemId()
    {
        return (this.AltItemId && this.UseAltItemId != ItemNumAlternative::Never);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemActiveForPlanning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an item is active for planning
    /// </summary>
    /// <returns>
    /// true if an item is active for planning; otherwise, false.
    /// </returns>
    internal static EcoResProductLifecycleStateIsActiveForPlanning isItemActiveForPlanning(ItemId _itemId)
    {
        EcoResProductLifecycleStateId stateId = InventTable::find(_itemId).ProductLifecycleStateId;
        return EcoResProductLifecycleState::isStateActiveForPlanning(stateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasConfigs</Name>
				<Source><![CDATA[
    public boolean hasConfigs()
    {
        return EcoResProductVariantDimValue::newProductVariantDim_ConfigId().getDimValuesCount(this.Product) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasVersions</Name>
				<Source><![CDATA[
    public boolean hasVersions()
    {
        return EcoResProductVariantDimValue::newProductVariantDim_InventVersionId().getDimValuesCount(this.Product) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasForecastPurch</Name>
				<Source><![CDATA[
    public display ForecastHasPurch hasForecastPurch()
    {
        return (select forecastPurch
                    where forecastPurch.ItemId == this.ItemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasForecastSales</Name>
				<Source><![CDATA[
    public display ForecastHasSales hasForecastSales()
    {
        return (select forecastSales
                    where forecastSales.ItemId == this.ItemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether any inventory transactions exist for this item.
    /// </summary>
    /// <returns>
    /// true if <c>InventTrans</c> table records exist for this item; otherwise false.
    /// </returns>
    public boolean hasInventTrans()
    {
        return (select firstonly RecId from inventTrans where inventTrans.ItemId == this.ItemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProductDimensions</Name>
				<Source><![CDATA[
    public boolean hasProductDimensions()
    {
        InventDimParm   inventDimParm = EcoResProductDimGroupSetup::newInventTable(this).inventDimParmActiveDimensions();

        return !inventDimParm.isAllFlagNo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating whether any of the tracking dimensions are active or sales process active
    /// </summary>
    /// <returns>
    ///    true if at least one of the tracking dimensions is active or sales process active; otherwise, false.
    /// </returns>
    public boolean hasTrackingDimensions()
    {
        InventDimParm inventDimParm = EcoResTrackingDimGroupSetupCache::active(this.trackingDimensionGroup());
        inventDimParm = InventDimParm::orParms(inventDimParm, EcoResTrackingDimGroupSetupCache::salesProcessActivated(this.trackingDimensionGroup()));

        return !inventDimParm.isAllFlagNo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyNonSerialNumberTrackingDimensionActivated</Name>
				<Source><![CDATA[
    internal boolean isAnyNonSerialNumberTrackingDimensionActivated()
    {
        InventDimParm inventDimParm = EcoResTrackingDimGroupSetupCache::active(this.trackingDimensionGroup());
        inventDimParm.InventSerialIdFlag = NoYes::No;

        return !inventDimParm.isAllFlagNo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPerformItemTracing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether item tracing can be done of the item.
    /// </summary>
    /// <returns>
    /// true if item tracing can be done of the item; otherwise, false
    /// </returns>
    public boolean canPerformItemTracing()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return this.hasTrackingDimensions();
        }

        InventDimParm inventDimParm = EcoResTrackingDimGroupSetupCache::active(this.trackingDimensionGroup());
        inventDimParm = InventDimParm::orParms(inventDimParm, EcoResTrackingDimGroupSetupCache::salesProcessActivated(this.trackingDimensionGroup()));

        return inventDimParm.InventBatchIdFlag || inventDimParm.InventSerialIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>InventTable</c> record with the values from an <c>EcoResProduct</c> record.
    /// </summary>
    /// <param name="_ecoResProduct">
    /// The <c>EcoResProduct</c> record.
    /// </param>
    public void initFromEcoResProduct(EcoResProduct _ecoResProduct)
    {
        EcoResProductMaster ecoResProductMaster;

        this.ItemId         = _ecoResProduct.productNumber();
        this.Product        = _ecoResProduct.RecId;
        this.NameAlias      = _ecoResProduct.SearchName;
        this.ItemType       = InventTable::itemTypeByProductType(_ecoResProduct.ProductType);

        if (_ecoResProduct.PdsCWProduct)
        {
            this.PmfProductType = PmfProductType::Formula;
            this.PmfYieldPct    = 100.0;
        }
        else
        {
            this.PmfProductType = (this.inventItemType().canHaveBOM()
                                              ? PmfProductType::BOM
                                              : PmfProductType::None);
        }

        if (_ecoResProduct is EcoResProductMaster)
        {
            ecoResProductMaster         = _ecoResProduct as EcoResProductMaster;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNonSpecifiedStandardProductDims</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the standard item dimensions that are not already specified.
    /// </summary>
    /// <param name="_inventDim">
    /// An existing set of inventory dimensions.
    /// </param>
    public void initNonSpecifiedStandardProductDims(InventDim _inventDim)
    {
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();

        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();
            FieldId fieldId = productDim.parmInventDimFieldId();

            if (productDim.isActiveForItem(this))
            {
                if (!_inventDim.(fieldId))
                {
                    _inventDim.(fieldId) = productDim.parmDefaultValueForItem(this);
                }
            }
            else
            {
                _inventDim.clearField(fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPdsVendorCheckFromInventModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the vendor check from the item model group.
    /// </summary>
    public void initPdsVendorCheckFromInventModelGroup()
    {
        InventModelGroupItem    modelGroupRelation = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId);
        InventModelGroup        modelGroup = InventModelGroup::find(modelGroupRelation.ModelGroupId);

        if (modelGroup)
        {
            this.PdsVendorCheckItem = modelGroup.PdsVendorCheckItem;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStandardProductDimensions</Name>
				<Source><![CDATA[
    public void initStandardProductDimensions(InventDim _inventDim)
    {
        Enumerator productDimensions = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDimensions.moveNext())
        {
            InventProductDimension productDimension = productDimensions.current();

            _inventDim.(productDimension.parmInventDimFieldId()) = productDimension.parmDefaultValueForItem(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default products dimensions defined on the released product if any exist.
    /// </summary>
    /// <param name = "_inventDim">The current dimensions.</param>
    /// <returns>The defaulted dimensions.</returns>
    public InventDim getDefaultProductDimensions(InventDim _inventDim)
    {
        _inventDim.initProductDimensionsFromInventTable(this, _inventDim);

        return InventDim::findOrCreate(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.initValueCrossCompany();

        this.BOMUnitId = InventParameters::find().DefaultUnitId;

        if (this.isFormulaAllowed())
        {
            this.PmfYieldPct = 100;
        }

        this.NameAlias = '';

        // Initialize the values for allow price adjust and allow returns on an item to Yes.
        MCRInventTable mcrInventTable = this.mcrInventTable();
        mcrInventTable.AllowPriceAdjust = NoYes::Yes;
        mcrInventTable.AllowReturn = NoYes::Yes;
        this.mcrPackMCRInventTable(mcrInventTable);

        this.ProductLifecycleStateId = EcoResProductLifecycleState::findDefaultStateForProductRelease().StateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueCrossCompany</Name>
				<Source><![CDATA[
    private void initValueCrossCompany()
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            SetEnumerator crossCompanySet = SysDataSharingPolicy::crossCompaniesByCompanyAndTable(curExt(), tableStr(InventTable));
            while (crossCompanySet.moveNext())
            {
                DataAreaId company = crossCompanySet.current();
                changecompany(company)
                {
                    InventParameters::find();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _doInsert = true)
    {
        RetailInventTable retailInventTable;

        #OCCRetryCount
        if (_doInsert)
        {
            if (!this.pdsValidateBestBeforeDays())
            {
                throw error(strFmt("@SYS85685", tableId2pname(tableNum(InventTable))));
            }
            try
            {
                ttsbegin;
                
                BOMLevelCalc::checkLevelRecalcInventTable(this);
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    retailInventTable.initFromInventTable(this);
                    retailInventTable.insert();
                }
                super();

                this.SysExtensionSerializerMap::postInsert();

                this.insertInventDistinctProduct();

                this.insertInventItemOrderSetup();

                this.initPdsVendorCheckFromInventModelGroup();

                ttscommit;

                this.clearCacheAcrossAOSes(this.ItemId);
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }

            DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(this, fieldNum(InventTable, ItemId), this, fieldNum(InventTable, DefaultDimension));

            this.insertCrossCompany();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCrossCompany</Name>
				<Source><![CDATA[
    private void insertCrossCompany()
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this, policy.RecId);
                QueryRun    queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    InventTable companyInventTable = queryRun.get(this.TableId);
                    DataAreaId company = companyInventTable.DataAreaId;
        
                    if (companyInventTable && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            InventTable inventTable = InventTable::find(companyInventTable.ItemId, true);
                            if (inventTable.RecId)
                            {
                                BOMLevelCalc::checkLevelRecalcInventTable(inventTable);
                
                                if (!InventDistinctProduct::isTablePopulated())
                                {
                                    inventTable.insertInventDistinctProduct();
                                }

                                inventTable.insertInventItemOrderSetup();

                                inventTable.initPdsVendorCheckFromInventModelGroup();

                                DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(inventTable, fieldNum(InventTable, ItemId), inventTable, fieldNum(InventTable, DefaultDimension));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventDistinctProduct</Name>
				<Source><![CDATA[
    private void insertInventDistinctProduct()
    {
        if (this.productSubtype() == EcoResProductSubtype::Product)
        {
            InventDistinctProduct::insertReleasedItem(this, InventDim::inventDimIdBlank());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBOMTable</Name>
				<Source><![CDATA[
    private void insertBOMTable()
    {
        BOMTable            bomTable;
        BOMVersion          bomVersion;

        //Model group and item group must be set up in order to be able to insert BOMTable
        if (!this.isItemGroupSetup() || !this.isModelGroupSetup())
        {
            return;
        }
        if (!this.isFormulaOrBOMAllowed() || !this.isStocked())
        {
            return;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(BOMVersion)))
        {
            return;
        }

        bomTable.initFromInventTable(this);

        // Do not create if already exist
        if (BOMTable::find(bomTable.bomId))
        {
            return;
        }

        bomTable.initFromInventTable(this);
        bomTable.insert();
        bomVersion.initFromInventTable(this);
        bomVersion.initFromBOMTable(bomTable);
        bomVersion.Active       = true;
        bomVersion.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventItemOrderSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts default values into item order settings tables for a given item number.
    /// </summary>
    protected void insertInventItemOrderSetup()
    {
        if (!InventItemPurchSetup::findDefault(this.ItemId))
        {
            InventItemPurchSetup::insertDefault(this.ItemId);
        }

        if (!InventItemInventSetup::findDefault(this.ItemId))
        {
            InventItemInventSetup::insertDefault(this.ItemId);
        }

        if (!InventItemSalesSetup::findDefault(this.ItemId))
        {
            InventItemSalesSetup::insertDefault(this.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyBlockedPurch</Name>
				<Source><![CDATA[
    public boolean  interCompanyBlockedPurch()
    {
        return this.inventTableModulePurch().InterCompanyBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyBlockedSales</Name>
				<Source><![CDATA[
    public boolean  interCompanyBlockedSales()
    {
        return this.inventTableModuleSales().InterCompanyBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostPriceMap</Name>
				<Source><![CDATA[
    public InventPriceMap inventCostPriceMap(
        InventDimId             _inventDimId                = '',   // can be = '' if setting the _inventDim buffer
        InventDim               _inventDim                  = null, // set this parameter for better performance if avail
        InventTableModule       _inventTableModuleInvent    = null, // set this parameter for better performance if avail
        TransDate               _transDate                  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        InventSiteId            _newSiteId                  = '',
        boolean                 _throwError                 = false)
    {
        InventDimId     inventDimId;

        void initInventDimId()
        {
            if (!_inventDimId && _inventDim)
            {
                inventDimId = _inventDim.InventDimId;
            }
            else
            {
                inventDimId =_inventDimId;
            }

            if (!inventDimId)
            {
                inventDimId = InventDim::findDim(_inventDim).InventDimId;
            }
        }

        initInventDimId();
        return this.modelGroup().inventModelType().inventCostPriceMap(this, inventDimId, _inventTableModuleInvent, _transDate, _newSiteId, _throwError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostPriceMapSecCur_RU</Name>
				<Source><![CDATA[
    public InventPriceMap inventCostPriceMapSecCur_RU(
        InventDimId             _inventDimId                = '',
        InventDim               _inventDim                  = null,
        InventTableModule       _inventTableModuleInvent    = null,
        TransDate               _transDate                  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        InventSiteId            _newSiteId                  = '',
        boolean                 _throwError                 = false)
    {
        InventPriceMap  inventPriceMap;
        InventDimId     inventDimId;

        void initInventDimId()
        {
            if (!_inventDimId && _inventDim)
            {
                inventDimId = _inventDim.InventDimId;
            }
            else
            {
                inventDimId =_inventDimId;
            }

            if (!inventDimId)
            {
                inventDimId = InventDim::findDim(_inventDim).InventDimId;
            }
        }

        initInventDimId();

        if (InventDim::find(inventDimId).isOwnerCurrentLegalEntity())
        {
            if (this.modelGroup().inventModelTypeSecCur_RU().stdCostBased())
            {
                inventPriceMap = InventItemPrice::stdCostFindDate(this, _transDate, _inventDimId, _inventDim, _newSiteId, _throwError);
            }
            else
            {
                inventPriceMap = InventItemPrice::findCurrent(this.ItemId, CostingVersionPriceType::Cost, inventDimId, _transDate, _newSiteId);

                if (! inventPriceMap.RecId)
                {
                    inventPriceMap =_inventTableModuleInvent.RecId ? _inventTableModuleInvent : InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent);
                }
            }
        }

        return inventPriceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimLinkedDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault inventDimLinkedDefaultDimension(InventDim  _inventDim)
    {
        return InventSite::changeDimension(this.DefaultDimension, _inventDim.InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmActiveDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines all active dimensions that belong to the current item.
    /// </summary>
    /// <returns>
    ///     An <c>InventDimParm</c> buffer.
    /// </returns>
    public InventDimParm inventDimParmActiveDimensions()
    {
        InventDimParm   inventDimParmActive;

        InventDimGroupSetup::newInventTable(this).inventDimParmActive(inventDimParmActive);
        return inventDimParmActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmCovDimensions</Name>
				<Source><![CDATA[
    public InventDimParm inventDimParmCovDimensions()
    {
        InventDimParm   inventDimParmItem;

        inventDimParmItem.initCovPrDimension(InventDimGroupSetup::newInventTable(this));
        return inventDimParmItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmPrimaryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines all active primary dimensions that belong to the current item.
    /// </summary>
    /// <returns>
    /// An <c>InventDimParm</c> buffer.
    /// </returns>
    public InventDimParm inventDimParmPrimaryDimensions()
    {
        InventDimParm   inventDimParmPrimary;

        InventDimGroupSetup::newInventTable(this).inventDimParmActivePrimaryDimension(inventDimParmPrimary);
        return inventDimParmPrimary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmProductDimensions</Name>
				<Source><![CDATA[
    public InventDimParm inventDimParmProductDimensions()
    {
        return EcoResProductDimGroupSetup::newInventTable(this).inventDimParmActiveDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmSalesProcessActiveDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines all sales process active dimensions that belong to the current item.
    /// </summary>
    /// <returns>
    ///     An <c>InventDimParm</c> buffer.
    /// </returns>
    public InventDimParm inventDimParmSalesProcessActiveDim()
    {
        InventDimParm   inventDimParm;

        InventDimGroupSetup::newInventTable(this).inventDimParmSalesProcessActive(inventDimParm);

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimPrimaryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all non primary dimensions on the <c>InventDim</c> parameter.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record from which to remove all non primary dimensions.
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> buffer that contains only primary dimensions.
    /// </returns>
    public InventDim inventDimPrimaryDimensions(InventDim _inventDim)
    {
        InventDimParm   inventDimParmPrimary = this.inventDimParmPrimaryDimensions();

        _inventDim.clearNotSelectedDim(inventDimParmPrimary);
        return InventDim::findOrCreate(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimProductDimensions</Name>
				<Source><![CDATA[
    public InventDim inventDimProductDimensions(InventDim _inventDim)
    {
        InventDimParm   inventDimParmItem = this.inventDimParmProductDimensions();

        _inventDim.clearNotSelectedDim(inventDimParmItem);
        return InventDim::findOrCreate(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>areShelfLifeDatesSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the shelf life dates are specified.
    /// </summary>
    /// <returns>true if the shelf life dates are specified.</returns>
    [Hookable(false)]
    internal boolean areShelfLifeDatesSpecified()
    {
        return (this.PdsShelfLife || this.PdsBestBefore || this.PdsShelfAdvice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetShelfLifeDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets shelf life dates.
    /// </summary>
    [Hookable(false)]
    internal void resetShelfLifeDates()
    {
        this.PdsShelfLife = 0;
        this.PdsBestBefore = 0;
        this.PdsShelfAdvice = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the site for inventory operations.
    /// </summary>
    /// <param name = "_inventSiteId">A suggested site to evaluate; optional.</param>
    /// <param name = "_inventDimId">The product dimensions to get the site for; optional.</param>
    /// <returns>The site applicable for inventory operations.</returns>
    public display InventInventSiteId inventInventSiteId(InventSiteId _inventSiteId = '', InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        return this.inventItemInventSetup(_inventDimId).inventSiteId(_inventSiteId, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemGroupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventItemGroupItem</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>InventItemGroupItem</c> record.
    /// </returns>
    public InventItemGroupItem inventItemGroupItem()
    {
        return InventItemGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemInventSetup</Name>
				<Source><![CDATA[
    public InventItemInventSetup inventItemInventSetup(
        InventDimId _inventDimId    = InventDim::inventDimIdBlank(),
        boolean     _forUpdate      = false)
    {
        return InventItemInventSetup::find(this.ItemId, _inventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemOrderSetupMap</Name>
				<Source><![CDATA[
    public InventItemOrderSetupMap inventItemOrderSetupMap(
        InventItemOrderSetupType    _setupType,
        InventDimId                 _inventDimId    = InventDim::inventDimIdBlank(),
        boolean                     _forUpdate      = false)
    {
        return InventItemOrderSetupMap::find(this.ItemId, _setupType, _inventDimId, _forUpdate, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemPurchSetup</Name>
				<Source><![CDATA[
    public InventItemPurchSetup inventItemPurchSetup(
        InventDimId     _inventDimId    = InventDim::inventDimIdBlank(),
        boolean         _forUpdate      = false)
    {
        return InventItemPurchSetup::find(this.ItemId, _inventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemSalesSetup</Name>
				<Source><![CDATA[
    public InventItemSalesSetup inventItemSalesSetup(
        InventDimId _inventDimId    = InventDim::inventDimIdBlank(),
        boolean     _forUpdate      = false)
    {
        return InventItemSalesSetup::find(this.ItemId, _inventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemSetupSupplyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventItemSetupSupplyType</c> record that is related to the
    /// current item.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional
    /// </param>
    /// <returns>
    /// A <c>InventItemSetupSupplyType</c> record; otherwise, an empty buffer.
    /// </returns>
    public InventItemSetupSupplyType inventItemSetupSupplyType(boolean _forUpdate=false)
    {
        return InventItemSetupSupplyType::find(this.ItemId, this.DataAreaId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemType</Name>
				<Source><![CDATA[
    public InventItemType inventItemType()
    {
        return InventItemType::newInventTable(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an inventory warehouse ID.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The current inventory warehouse ID.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID for which to find the settings; optional.
    /// </param>
    /// <param name="_inventSiteIdParent">
    /// An inventory site ID to which the inventory warehouse belongs; optional.
    /// </param>
    /// <returns>
    /// An inventory warehouse ID.
    /// </returns>
    /// <remarks>
    /// The value of the <paramref name="_inventLocationId" /> parameter will be returned if it is not
    /// empty and the mandatory warehouse parameter is not set in the inventory order settings for the
    /// item.If the <paramref name="_inventDimId" /> parameter is not specified the default settings are
    /// used.The <paramref name="_inventSiteIdParent" /> parameter applies only when the <paramref
    /// name="_inventLocationId" /> parameter is specified.If the <paramref name="_inventSiteIdParent" />
    /// and <paramref name="_inventLocationId" /> parameters are specified and no site specific settings
    /// are found, a check whether the value of the <paramref name="_inventLocationId" /> parameter belongs
    /// to the site that is specified by the <paramref name="_inventSiteIdParent" /> parameter will be
    /// performed. If the check fails, an empty string will be returned; otherwise, the value of the
    /// <paramref name="_inventLocationId" /> parameter will be returned.
    /// </remarks>
    public display InventLocationId inventLocationId(
        InventLocationId    _inventLocationId   = '',
        InventDimId         _inventDimId        = InventDim::inventDimIdBlank(),
        InventSiteId        _inventSiteIdParent = '')
    {
        return this.inventItemInventSetup(_inventDimId).inventLocationId(_inventLocationId, this, _inventSiteIdParent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationIdBOM</Name>
				<Source><![CDATA[
    public display InventLocationId inventLocationIdBOM(
        InventLocationId    _inventLocationId   = '',
        InventDimId         _inventDimId        = InventDim::inventDimIdBlank(),
        InventSiteId        _inventSiteIdParent = '')
    {
        return this.inventItemInventSetup(_inventDimId).inventLocationId(_inventLocationId, this, _inventSiteIdParent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a minimum allowed inventory order quantity.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension ID; optional.
    /// </param>
    /// <returns>
    /// A minimum allowed inventory order quantity.
    /// </returns>
    public display QtyLowest inventLowestQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        return this.inventItemInventSetup(_inventDimId).getLowestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventModelGroupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventModelGroupItem</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>InventModelGroupItem</c> record.
    /// </returns>
    public InventModelGroupItem inventModelGroupItem()
    {
        return InventModelGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoriedPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventTableInventoriedPolicy</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>InventTableInventoriedPolicy</c> class.
    /// </returns>
    public InventTableInventoriedPolicy inventoriedPolicy()
    {
        return InventTableInventoriedPolicy::newInventModelGroupItem(InventModelGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventStandardQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a standard inventory order quantity.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension ID settings to find; optional.
    /// </param>
    /// <returns>
    /// A standard inventory order quantity.
    /// </returns>
    /// <remarks>
    /// If the settings are not specified, the default settings are used.
    /// </remarks>
    public display QtyStandard inventStandardQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        return this.inventItemInventSetup(_inventDimId).getStandardQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModuleInvent</Name>
				<Source><![CDATA[
    public InventTableModule inventTableModuleInvent(boolean _forUpdate = false)
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModulePurch</Name>
				<Source><![CDATA[
    public InventTableModule inventTableModulePurch(boolean _forUpdate = false)
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModuleSales</Name>
				<Source><![CDATA[
    public InventTableModule inventTableModuleSales(boolean _forUpdate = false)
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    public display UnitOfMeasureSymbol inventUnitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveInSalesProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the given Item belongs to a Tracking Dimension that has the "Active in Sales Process" flag enabled and item is stocked.
    /// </summary>
    /// <returns>
    ///    true if the Item is "Active in Sales Process; otherwise, false.
    /// </returns>
    public boolean isActiveInSalesProcess()
    {
        return this.isStocked() && EcoResTrackingDimensionGroupItem::isItemActiveInSalesProcess(this.DataAreaId, this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item can have a BOM.
    /// </summary>
    /// <returns>
    /// true if the item can have a BOM; otherwise false.
    /// </returns>
    public boolean isBOMAllowed()
    {
        boolean ret = this.inventItemType().canHaveBOM();

        if (ret && #PmfEnabled)
        {
            ret = this.PmfProductType == PmfProductType::BOM;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMProducedByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item should be produced by default with a production order.
    /// </summary>
    /// <returns>
    /// true if the item is produced by default with a production order; otherwise false.
    /// </returns>
    public boolean isBOMProducedByDefault()
    {
        return this.isBOMAllowed() && this.isProducedByDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item is a by-product.
    /// </summary>
    /// <returns>
    /// true if the item is a by-product; otherwise, false.
    /// </returns>
    public boolean isByProduct()
    {
        return this.PmfProductType == PmfProductType::By_Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCoByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item is a co-product or by-product.
    /// </summary>
    /// <returns>
    /// true if the item is a co-product or by-product; otherwise, false.
    /// </returns>
    public boolean isCoByProduct()
    {
        return this.isCoProduct() || this.isByProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurable</Name>
				<Source><![CDATA[
    public boolean isConfigurable()
    {
        return EcoResProductMaster::find(this.Product).isDimensionBased()
            && this.isBOMAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConstraintBasedConfigurable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that this item is configurable by constraint-based product configuration.
    /// </summary>
    /// <returns>
    /// true if the item is compatible with constraint-based configuration; otherwise, false.
    /// </returns>
    public boolean isConstraintBasedConfigurable()
    {
        return  EcoResProductMaster::find(this.Product).isConstraintBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item is a co-product.
    /// </summary>
    /// <returns>
    /// true if the item is a co-product; otherwise, false.
    /// </returns>
    public boolean isCoProduct()
    {
        return this.PmfProductType == PmfProductType::Co_Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item can have formula.
    /// </summary>
    /// <returns>
    /// true if the item can have a formula; otherwise false.
    /// </returns>
    public boolean isFormulaAllowed()
    {
        return (this.PmfProductType == PmfProductType::Formula || this.PmfProductType  == PmfProductType::MainItem) && this.inventItemType().canHaveBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaOrBOMAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item can have a BOM or formula.
    /// </summary>
    /// <returns>
    /// true if the item can have a BOM or formula; otherwise false.
    /// </returns>
    public boolean isFormulaOrBOMAllowed()
    {
        return this.inventItemType().canHaveBOM()
            && (!#PmfEnabled
                || this.PmfProductType == PmfProductType::BOM
                || this.PmfProductType == PmfProductType::Formula
                || this.PmfProductType == PmfProductType::MainItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaProducedByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item should be produced by default with a batch order.
    /// </summary>
    /// <returns>
    /// true if the item is produced by default with a batch order; otherwise false.
    /// </returns>
    public boolean isFormulaProducedByDefault()
    {
        return this.isFormulaOrBOMAllowed() && this.isProducedByDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemBatchActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the batch number inventory dimension is active for the item.
    /// </summary>
    /// <returns>
    /// true if the batch number dimension is active; otherwise, false.
    /// </returns>
    public boolean isItemBatchActivated()
    {
        EcoResTrackingDimensionGroupFldSetup  ecoResTrackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.trackingDimensionGroup(), fieldNum(InventDim, InventBatchId));

        if (!ecoResTrackingDimensionGroupFldSetup || !ecoResTrackingDimensionGroupFldSetup.IsActive)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemGTDActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the GTD number inventory dimension is active for the item.
    /// </summary>
    /// <returns>
    /// true if the GTD number dimension is active; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean isItemGTDActivated()
    {
        EcoResTrackingDimensionGroupFldSetup  ecoResTrackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.trackingDimensionGroup(), fieldNum(InventDim, InventGTDId_RU));

        if (!ecoResTrackingDimensionGroupFldSetup || !ecoResTrackingDimensionGroupFldSetup.IsActive)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemSerialNumberActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the serial number inventory dimension is active for the item.
    /// </summary>
    /// <returns>
    /// true if the serial number dimension is active; otherwise, false.
    /// </returns>
    public boolean isItemSerialNumberActivated()
    {
        return EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventSerialId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemProfileIdActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the profile Id inventory dimension is active for the item.
    /// </summary>
    /// <returns>
    /// true if the profile Id dimension is active; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isItemProfileIdActivated()
    {
        return EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemOwnerIdActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the owner Id inventory dimension is active for the item.
    /// </summary>
    /// <returns>
    /// true if the owner Id dimension is active; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isItemOwnerIdActivated()
    {
        return EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventOwnerId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemGTDNumberActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the GTD number inventory dimension is active for the item.
    /// </summary>
    /// <returns>
    /// true if the GTD number dimension is active; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isItemGTDNumberActivated()
    {
        return EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventGtdId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemSerialNumberControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the item is serial number control enabled.
    /// </summary>
    /// <returns>
    /// true if the serial number control is enabled for the item; otherwise, false.
    /// </returns>
    public boolean isItemSerialNumberControlled()
    {
        EcoResTrackingDimensionGroup ecoResTrackingDimensionGroup = EcoResTrackingDimensionGroup::find(this.trackingDimensionGroup());

        return ecoResTrackingDimensionGroup.IsSerialNumberControlEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemInventoryOwnerActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory owner inventory dimension is active for the item.
    /// </summary>
    /// <returns>
    /// true if the inventory owner dimension is active; otherwise, false.
    /// </returns>
    public boolean isItemInventoryOwnerActivated()
    {
        EcoResTrackingDimensionGroupFldSetup ecoResTrackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(this.trackingDimensionGroup(), fieldNum(InventDim, InventOwnerId_RU));

        if (!ecoResTrackingDimensionGroupFldSetup || !ecoResTrackingDimensionGroupFldSetup.IsActive)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemGroupSetup</Name>
				<Source><![CDATA[
    private boolean isItemGroupSetup()
    {
        InventItemGroupItem    inventItemGroupItem;
        inventItemGroupItem = InventItemGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId);
        return (inventItemGroupItem.RecId && inventItemGroupItem.ItemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupCodeEnabled_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the field MarkupCode_RU is enabled.
    /// </summary>
    /// <returns>
    ///     true if the item is not stocked; otherwise, false.
    /// </returns>
    public boolean isMarkupCodeEnabled_RU()
    {
        return ! this.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isModelGroupSetup</Name>
				<Source><![CDATA[
    private boolean isModelGroupSetup()
    {
        InventModelGroupItem    inventModelGroupItem;
        inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId);
        return (inventModelGroupItem.RecId && inventModelGroupItem.ModelGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProducedByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the item should be produced by default (default order is set to production).
    /// </summary>
    /// <returns>
    ///    A boolean value that specifies if the item should be produced by default.
    /// </returns>
    public boolean isProducedByDefault()
    {
        return  this.isFormulaOrBOMAllowed() &&
                this.inventItemSetupSupplyType().DefaultOrderType == ReqPOType::Production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShelfLifeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item is a shelf life item.
    /// </summary>
    /// <returns>
    /// true if the item is a shelf life item; otherwise, false.
    /// </returns>
    public boolean isShelfLifeItem()
    {
        boolean shelfLifeItem = false;

        if (#PdsShelfEnabled)
        {
            shelfLifeItem = this.PdsShelfLife != 0;
        }

        return shelfLifeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSellableDaysApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether sellable days calculations are applicable for the item.
    /// </summary>
    /// <returns>
    /// true if sellable days calculations are applicable for the item; otherwise, false.
    /// </returns>
    public boolean isSellableDaysApplicable()
    {
        boolean isSellableDaysApplicable = this.isItemBatchActivated();

        return isSellableDaysApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the policy is stocked.
    /// </summary>
    /// <returns>
    /// The policy as defined in the <c>InventModelGroup</c> object.
    /// </returns>
    /// <remarks>
    /// Inventory transactions will exist for items or services where this method returns true.
    /// </remarks>
    public boolean isStocked()
    {
        return this.modelGroup().isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDescriptionOrName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description or name of a product that this item represents.
    /// </summary>
    /// <param name="_languageId">
    /// The ID of a language in which to retrieve a description or name.
    /// </param>
    /// <returns>
    /// The description of a product if it exists; otherwise, the name of a product.
    /// </returns>
    public display EcoResDescription itemDescriptionOrName(LanguageId _languageId = CompanyInfo::languageId())
    {
        EcoResDescription ecoResDescription = this.productDescription(_languageId);
        if (!ecoResDescription)
        {
            ecoResDescription = this.productName(_languageId);
        }
        return ecoResDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item group of the current item.
    /// </summary>
    /// <returns>
    /// An item group.
    /// </returns>
    public InventItemGroup itemGroup()
    {
        return InventItemGroupItem::itemGroupByItemIdLegalEntity(this.ItemId, this.DataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>planningItemBOMLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the planning item BOM level of the current item.
    /// </summary>
    /// <returns>
    /// An item BOM level.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display ItemBOMLevel planningItemBOMLevel()
    {
        return InventDistinctProduct::findByProduct(this.Product).Level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item group ID of the current item.
    /// </summary>
    /// <returns>
    /// An item group ID.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display ItemGroupId itemGroupId()
    {
        return InventItemGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId).ItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdAndDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>ItemId</c> field concatenated with the description or name of a
    /// product that this item represents.
    /// </summary>
    /// <param name="_languageId">
    /// The ID of a language in which to retrieve a description or name.
    /// </param>
    /// <returns>
    /// A string with the ID of the item concatenated with a description or a name.
    /// </returns>
    public display EcoResDescription itemIdAndDescription(LanguageId _languageId = CompanyInfo::languageId())
    {
        return this.ItemId + '\n' + this.itemDescriptionOrName(_languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display ItemNameDisplay itemName(Common _common = null)
    {
        InventDimCombination    inventDimCombination;
        InventDim               inventDim;
        EcoResProductName       productName;
        EcoResProductName       productVariantName;

        if (_common is InventDim)
        {
            inventDim = _common as InventDim;
        }
        
        boolean isFallbackFeatureEnabled = FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackFeature::instance());
        boolean isFallbackTranslationToggleEnabled = EcoResProductParameters::find().UseFallbackTranslation;

        productName = isFallbackFeatureEnabled && isFallbackTranslationToggleEnabled ? this.productNameInSpecificLanguage() : this.defaultProductNameInSystemLanguage();

        if (!inventDim.anyProductDimensionSpecified())
        {
            return productName;
        }

        inventDimCombination = InventDimCombination::findByInventDim(this.ItemId, inventDim);
        if (inventDimCombination.RecId)
        {
            productVariantName = isFallbackFeatureEnabled && isFallbackTranslationToggleEnabled ?
                                        inventDimCombination.productName(EcoResProductParametersFallbackLanguage::getSelectedFallbackLanguage()) : inventDimCombination.defaultProductName();
        }
        return productVariantName
                ? productName + ' / ' + productVariantName
                : productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNameByInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item name.
    /// </summary>
    /// <param name = "_inventDimId">
    /// The product dimensions.
    /// </param>
    /// <returns>
    /// The <c>ItemNameDisplay</c> record.
    /// </returns>
    public ItemNameDisplay itemNameByInventDimId(InventDimId _inventDimId)
    {
        InventDim inventDim = InventDim::find(_inventDimId);

        return this.itemName(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the product master for the current item.
    /// </summary>
    /// <returns>
    ///     The <c>EcoResProductMaster</c> record for the current item.
    /// </returns>
    public EcoResProductMaster mcrGetProductMaster()
    {
        return EcoResProductMaster::find(this.Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the packed table <c>MCRInventTable</c>.
    /// </summary>
    /// <returns>
    ///     The packed <c>MCRInventTable</c>.
    /// </returns>
    public MCRInventTable mcrInventTable()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(MCRInventTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInventUnitOfMeasureClass</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the unit of measure class for the current item's unit ID.
    /// </summary>
    /// <returns>
    ///     The unit of measure for the current item's unit ID.
    /// </returns>
    public UnitOfMeasureClass mcrInventUnitOfMeasureClass()
    {
        return UnitOfMeasure::findBySymbol(this.inventUnitId()).UnitOfMeasureClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPackMCRInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Packs the extended <c>MCRInventTable</c> after setting the record ID
    ///     on the current record.
    /// </summary>
    /// <param name="_mcrInventTable">
    ///     The passed <c>MCRInventTable</c> record associated with the current record.
    /// </param>
    public void mcrPackMCRInventTable(MCRInventTable _mcrInventTable)
    {
        _mcrInventTable.InventTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_mcrInventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field of this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// The first dimension set to merge with the current <c>defaultDimension</c> field of this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// The second dimension set to merge with the current <c>defaultDimension</c> field of this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field of
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an item model group for the current item.
    /// </summary>
    /// <returns>
    /// An item model group.
    /// </returns>
    public InventModelGroup modelGroup()
    {
        return InventModelGroupItem::modelGroupByItemIdLegalEntity(this.ItemId, this.DataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of an item model group for an item.
    /// </summary>
    /// <returns>
    /// The ID of an item model group.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display InventModelGroupId modelGroupId()
    {
        return InventModelGroupItem::findByItemIdLegalEntity(this.ItemId, this.DataAreaId).ModelGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default product language id.
    /// </summary>
    /// <returns>The default product language id</returns>
    protected LanguageId defaultProductLanguageId()
    {
        return CompanyInfo::languageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        #InventDimDevelop

        return  [
            // [field that needs defaulting,
            //      [fields that affect the default value]]

            [fieldNum(InventTable, AltConfigId),
                    [fieldNum(InventTable, AltItemId)]],

            [fieldNum(InventTable, AltInventColorId),
                    [fieldNum(InventTable, AltItemId)]],

            [fieldNum(InventTable, AltInventStyleId),
                    [fieldNum(InventTable, AltItemId)]],
            
            [fieldNum(InventTable, AltInventVersionId),
                    [fieldNum(InventTable, AltItemId)]],

            [fieldNum(InventTable, AltInventSizeId),
                    [fieldNum(InventTable, AltItemId)]],

            [fieldNum(InventTable, AutoReportFinished),
                    [fieldNum(InventTable, Phantom)]],

            [fieldNum(InventTable, OrigStateId),
                    [fieldNum(InventTable, OrigCountryRegionId)]],

            [fieldNum(InventTable, Phantom),
                    [fieldNum(InventTable, PmfProductType)]],

            [fieldNum(InventTable, PmfPlanningItemId),
                    [fieldNum(InventTable, PmfProductType)]],

            [fieldNum(InventTable, PmfYieldPct),
                    [fieldNum(InventTable, PmfProductType)]],

            [fieldNum(InventTable, pdsTargetFactor),
                    [fieldNum(InventTable, pdsBaseAttributeId)]],

            [fieldNum(InventTable, IntrastatProcId_CZ),
                        [fieldNum(InventTable, IntrastatCommodity)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        #InventDimDevelop

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventTable, AutoReportFinished):
                if (this.Phantom)
                {
                    this.AutoReportFinished = NoYes::No;
                }
                break;

            case fieldNum(InventTable, AltConfigId):
                if (this.isFieldSet(fieldNum(InventTable, AltItemId)))
                {
                    this.AltConfigId = '';
                }
                break;

            case fieldNum(InventTable, AltInventColorId):
                if (this.isFieldSet(fieldNum(InventTable, AltItemId)))
                {
                    this.AltInventColorId = '';
                }
                break;

            case fieldNum(InventTable, AltInventStyleId):
                if (this.isFieldSet(fieldNum(InventTable, AltItemId)))
                {
                    this.AltInventStyleId = '';
                }
                break;

            case fieldNum(InventTable, AltInventVersionId):
                if (this.isFieldSet(fieldNum(InventTable, AltItemId)))
                {
                    this.AltInventVersionId = '';
                }
                break;

            case fieldNum(InventTable, AltInventSizeId):
                if (this.isFieldSet(fieldNum(InventTable, AltItemId)))
                {
                    this.AltInventSizeId = '';
                }
                break;

            case fieldNum(InventTable, OrigStateId):
                if (this.isFieldSet(fieldNum(InventTable, OrigCountryRegionId)))
                {
                    this.OrigStateId = '';
                }
                break;

            case fieldNum(InventTable, Phantom):
                if (!this.canBePhantom())
                {
                    this.Phantom = NoYes::No;
                }
                break;

            case fieldNum(InventTable, PmfPlanningItemId):
                if (this.PmfProductType != PmfProductType::Co_Product && this.PmfProductType != PmfProductType::By_Product)
                {
                    this.PmfPlanningItemId = '';
                }
                break;

            case fieldNum(InventTable, PmfYieldPct):
                if (this.isFormulaAllowed())
                {
                    if (this.PmfYieldPct <= 0)
                    {
                        this.PmfYieldPct = 100;
                    }
                }
                else
                {
                    this.PmfYieldPct = 0;
                }
                break;

            case fieldNum(InventTable, pdsTargetFactor):
                this.pdsTargetFactor = this.pdsBaseAttributeId ? str2num(this.pdsBaseValueDisplay()) : 0;
                break;

            case fieldNum(InventTable, IntrastatProcId_CZ):
                if (this.IntrastatProcId_CZ && !IntrastatStatProc::exist(this.IntrastatCommodity, this.IntrastatProcId_CZ))
                {
                    this.IntrastatProcId_CZ = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventTable, MarkupCode_RU):
                this.checkMarkupCode_RU();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProductDatesSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the existence of product specific dates.
    /// </summary>
    /// <param name = "_inventTable">
    ///     A record buffer for table <c>InventTable</c>.
    /// </param>
    /// <returns>
    ///     true if any product specific date exists; otherwise, false.
    /// </returns>
    public boolean anyProductDatesSpecified()
    {
        return (this.PdsShelfLife || this.PdsBestBefore || this.PdsShelfAdvice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBaseValueDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base value from <c>PdsBatchAttributeByItem</c> table.
    /// </summary>
    /// <returns>
    /// The base value for item and base attribute combination if found.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PDSBaseValue pdsBaseValueDisplay()
    {
        PdsBatchAttribByItem    attribByItem;

        if (this.pdsBaseAttributeId != '')
        {
            select firstonly pdsBaseValue
                from attribByItem
                where  attribByItem.PdsBatchAttribItemId    == this.ItemId
                    && attribByItem.PdsBatchAttribCode      == TableGroupAll::Table
                    && attribByItem.PdsBatchAttribRelation  == this.pdsBaseAttributeId;
        }

        return attribByItem.pdsBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup selection for batch attributes that can be used as the potency attribute.
    /// </summary>
    /// <param name="_formControl">
    /// The control for which lookup is performed.
    /// </param>
    /// <param name="_filterstr">
    /// The filter to reduce list of data shown.
    /// </param>
    /// <param name="_datasource">
    /// The datasource for the current record to enable filtering.
    /// </param>
    public void pdsBatchLookup(
        FormStringControl   _formControl,
        str                 _filterstr,
        FormDataSource      _datasource)
    {
        SysTableLookup          lookup;
        boolean                 filter =  SysTableLookup::filterLookupPreRun(_formControl, _formControl, _datasource);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        lookup = SysTableLookup::newParameters(tableNum(PdsBatchAttrib), _formControl);
        qbds = query.addDataSource(tableNum(PdsBatchAttrib));
        qbds.addRange(fieldNum(PdsBatchAttrib, PdsBatchAttribType)).value(SysQuery::value(PdsBatchAttribType::Integer));
        qbds.addRange(fieldNum(PdsBatchAttrib, PdsBatchAttribType)).value(SysQuery::value(PdsBatchAttribType::Realnumber));
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldNum(PdsBatchAttrib, PdsBatchAttribId));
        lookup.performFormLookup();

        SysTableLookup::filterLookupPostRun(filter, _filterstr, _formControl, _datasource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the shelf life tests should be executed for the item.
    /// </summary>
    /// <returns>
    /// true if the shelf life tests must be executed; otherwise, false.
    /// </returns>
    public PdsCheck pdsCheck()
    {
        return #PdsShelfEnabled && this.modelGroup().PdsCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item has an approved vendor list.
    /// </summary>
    /// <returns>
    /// true if the item has a valid approved vendor list; otherwise, false.
    /// </returns>
    private boolean pdsCheckApprovedVendorList()
    {
        PdsApprovedVendorListCheck  avlCheck;
        boolean                     ret = true;

        avlCheck = PdsApprovedVendorListCheck::newFromTable(this);
        ret = avlCheck.validateCheck();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckCWItemSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the catch weigh has been completely defined.
    /// </summary>
    /// <returns>
    ///    true if the item has been defined; otherwise false.
    /// </returns>
    public boolean pdsCheckCWItemSetup()
    {
        boolean ret = true;

        if (this.productHasCWSetup() && !this.pdsCWItem())
        {
            ret = checkFailed("@PDS1969");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckSameLot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item can be used for the same lot batch reservation.
    /// </summary>
    /// <returns>
    /// true if the item can be used for the same lot batch reservation functionality; otherwise, false
    /// </returns>
    public boolean pdsCheckSameLot()
    {
        EcoResTrackingDimGroupSetup      ecoResTrackingDimGroupSetup = EcoResTrackingDimGroupSetup::newDimensionGroup(this.trackingDimensionGroup());

        return this.modelGroup().PdsSameLot
            && ecoResTrackingDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventBatchId)).isActive()
            && ecoResTrackingDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventBatchId)).isCoveragePlanByDimensionEnabled()
            && ! ecoResTrackingDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventSerialId)).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCheckBatchNumGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the assigned batch number group is valid for a catch weight item.
    /// </summary>
    /// <returns>
    /// true if the batch number group is valid; otherwise, false.
    /// </returns>
    public boolean pdsCWCheckBatchNumGroupId()
    {
        InventNumGroup      numGroup;
        boolean             ret = true;

        if (this.BatchNumGroupId)
        {
            numGroup = InventNumGroup::find(this.BatchNumGroupId);
            if (numGroup.PerQty)
            {
                ret = checkFailed(strFmt("@PDS116", fieldPName(InventTable, BatchNumGroupId)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCheckItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item and production type are valid for a catch weight item.
    /// </summary>
    /// <returns>
    /// true if the item and production type are valid for a catch weight item; otherwise, false.
    /// </returns>
    public boolean pdsCWCheckItemType()
    {
        boolean ret = true;

        if (#PdsCatchWeightEnabled)
        {
            if (this.PmfProductType == PmfProductType::BOM
                || this.ItemType    == ItemType::Service)
            {
                ret = checkFailed("@PDS117");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCheckSerialNumGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the assigned serial number group is valid for a catch weight item.
    /// </summary>
    /// <returns>
    /// true if the assigned serial number group is valid for a catch weight item; otherwise, false.
    /// </returns>
    public boolean pdsCWCheckSerialNumGroupId()
    {
        InventNumGroup      numGroup;
        boolean             ret = true;

        if (this.SerialNumGroupId)
        {
            numGroup = InventNumGroup::find(this.SerialNumGroupId);
            if (numGroup.PerQty)
            {
                ret = checkFailed(strFmt("@PDS116", fieldPName(InventTable, SerialNumGroupId)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item is a catch weight item.
    /// </summary>
    /// <returns>
    /// true if the item is a catch weight item; otherwise, false.
    /// </returns>
    public display NoYes pdsCWItem()
    {
        return PdsGlobal::pdsIsCWItem(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDefaultOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the default order type of the product, for the current legal entity.
    /// </summary>
    /// <returns>
    ///     The default order type of the product
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display ReqPOType pdsDefaultOrderType()
    {
        return this.inventItemSetupSupplyType().DefaultOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsEffectExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the effective expiry date for this item.
    /// </summary>
    /// <param name="_prodDate">
    /// The base date to calculate the effective date from.
    /// </param>
    /// <returns>
    /// The effective expiry date for the item.
    /// </returns>
    public date pdsEffectExpiryDate(date _prodDate)
    {
        date                expDate;

        if (#PdsShelfEnabled && this.PdsShelfLife)
        {
            expDate = _prodDate + this.pdsExpiryDays();
        }

        return expDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsExpiryDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of days until an inventory batch for this item expires.
    /// </summary>
    /// <returns>
    /// The number of days until an inventory batch expires.
    /// </returns>
    public PdsLeadTimeLife pdsExpiryDays()
    {
        InventModelGroup    modelGroup;
        PdsLeadTimeLife     expDays;

        if (#PdsShelfEnabled && this.PdsShelfLife)
        {
            expDays = this.PdsShelfLife;

            modelGroup = this.modelGroup();

            if (modelGroup.PdsCheck && modelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate)
            {
                expDays -= (this.PdsBestBefore + 1);
            }
        }

        return expDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsBestBeforeMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if this product must have a best before date defined.
    /// </summary>
    /// <returns>
    ///     true if the item is shelf life capable, the model group has FEFO logic defined and pick criteria is set to best before date.
    /// </returns>
    public boolean pdsIsBestBeforeMandatory()
    {
        InventModelGroupItem    modelGroupItem  = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId);
        InventModelGroup        modelGroup      = InventModelGroup::find(modelGroupItem.ModelGroupId);

        return this.pdsIsShelfLifeCapable()
            && (modelGroup.PdsCheck == NoYes::Yes)
            && (modelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsShelfLifeCapable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if this product allows editing of shelf Life information.
    /// </summary>
    /// <returns>
    ///     true if the item has batch dimension active, is not a service item and is marked as a stocked product.
    /// </returns>
    public boolean pdsIsShelfLifeCapable()
    {
        InventModelGroupItem    modelGroupItem  = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId);
        InventModelGroup        modelGroup      = InventModelGroup::find(modelGroupItem.ModelGroupId);

        return #PdsShelfEnabled
            && this.isItemBatchActivated()
            && (this.ItemType != ItemType::Service)
            && modelGroup   // is defined
            && modelGroup.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsShelfLifeMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if this product must have a shelf Life date defined.
    /// </summary>
    /// <returns>
    ///     true if the item is shelf life capable, the model group has FEFO logic defined and pick criteria is set to expiry date.
    /// </returns>
    public boolean pdsIsShelfLifeMandatory()
    {
        InventModelGroupItem    modelGroupItem  = InventModelGroupItem::findByItemIdLegalEntity(this.ItemId);
        InventModelGroup        modelGroup      = InventModelGroup::find(modelGroupItem.ModelGroupId);

        return this.pdsIsShelfLifeCapable()
            && (modelGroup.PdsCheck == NoYes::Yes)
            && (modelGroup.PdsPickCriteria == PdsPickCriteria::ExpiryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMRCRegulatedMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item is a regulated material.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> value if the item is a regulated material; otherwise the <c>NoYes::No</c> enumeration value.
    /// </returns>
    public display NoYes pdsMRCRegulatedMaterial()
    {
        NoYes ret;

        ret = PdsMRCRegulatedCountry::isRegulated(this.ItemId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMRCRestrictedMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item is a restricted material.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if the item is a restricted material;
    /// otherwise, the <c>NoYes::No</c> enumeration value.
    /// </returns>
    public display NoYes pdsMRCRestrictedMaterial()
    {
        NoYes ret;

        ret = PdsMRCRestrictedListByItem::checkItemIsRestricted(this.ItemId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsQualOrdWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows a warning for additional requirements.
    /// </summary>
    /// <remarks>
    /// These additional requirements do not prohibit the saving of the item record.
    /// </remarks>
    public void pdsQualOrdWarning()
    {
        if (this.pdsPotencyAttribRecording == PDSPotencyAttribRecordingEnum::Quality
            && this.orig().pdsPotencyAttribRecording != PDSPotencyAttribRecordingEnum::Quality)
        {
            warning("@PSC235");
            warning("@PSC236");
            warning("@PSC237");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePdsShelfLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all pds shelf life related fields of the item.
    /// </summary>
    /// <returns>true if the fields are valid; otherwise false.</returns>
    /// <remarks>
    /// When no relevant fields are set, we can skip checking shelf life capability, thus avoiding two find calls.
    /// </remarks>
    protected boolean validatePdsShelfLife()
    {
        boolean ret = true;

        if (this.anyProductDatesSpecified())
        {
            ret = this.pdsIsShelfLifeCapable()
                ? this.validateBestBeforePeriod()
                : checkFailed("@SCM:EcoResPdsShelfLifeIncapableWarning");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateBestBeforeDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the best before days field is valid for the item.
    /// </summary>
    /// <returns>
    /// true if the best before days are valid; otherwise, false.
    /// </returns>
    private boolean pdsValidateBestBeforeDays()
    {
        boolean ret = true;

        if (this.pdsIsShelfLifeCapable())
        {
            ret = this.validateBestBeforePeriod();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBestBeforePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the best before period.
    /// </summary>
    /// <returns>true if the best before period is valid; otherwise false.</returns>
    private boolean validateBestBeforePeriod()
    {
        if (this.isBestBeforePeriodValid())
        {
            return checkFailed("@PRO1972");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBestBeforePeriodValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the best before period is valid compared to the shelf life period.
    /// </summary>
    /// <returns>true if the best before days and shelf life field is valid; otherwise, false.</returns>
    protected boolean isBestBeforePeriodValid()
    {
        return  !(this.PdsBestBefore == 0 && this.PdsShelfLife == 0)
                && this.PdsBestBefore >= this.PdsShelfLife;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfHasFormulaWithCoProdOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item is a formula or planning item that has additional co-product outputs.
    /// </summary>
    /// <returns>
    /// true if the item is a formula or planning item that has additional co-product outputs; otherwise, false.
    /// </returns>
    public boolean pmfHasFormulaWithCoProdOutput()
    {
        BOMVersion      bomVersion;
        PmfFormulaCoBy  pmfFormulaCoBy;
        boolean         ret = false;

        if (this.PmfProductType == PmfProductType::MainItem)
        {
            ret = true;
        }
        else
        {
            if (this.PmfProductType == PmfProductType::Formula)
            {
                select firstonly RecId from bomVersion
                    where bomVersion.ItemId == this.ItemId
                    exists join pmfFormulaCoBy
                        where pmfFormulaCoBy.bomVersionRefRecId == bomVersion.RecId
                           && pmfFormulaCoBy.ProductType        == PmfProductType::Co_Product;

                ret = (bomVersion.RecId != 0);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfImageResNo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the image resource matching the item type and production type of the item.
    /// </summary>
    /// <returns>
    /// The image resource for the item.
    /// </returns>
    public int pmfImageResNo()
    {
        #resAppl
        int imageResNo;

        if (this.ItemType == ItemType::Item)
        {
            switch (this.PmfProductType)
            {
                case PmfProductType::Co_Product :
                    imageResNo = #ImageConflictManuallyResolvedBelow;
                    break;
                case PmfProductType::By_Product :
                    imageResNo = #ImageConflictResolvableBelow;
                    break;
                default :
                    break;
            }
        }
        else
        {
            imageResNo = #ImageOverlayPrinterArchive;
        }
        return imageResNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInventProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PmfInventProductType</c> class that corresponds to the current <c>InventTable</c> record.
    /// </summary>
    /// <returns>
    /// A <c>PmfInventProductType</c> class corresponding to the current <c>InventTable</c> record.
    /// </returns>
    public PmfInventProductType pmfInventProductType()
    {
        return PmfInventProductType::newInventTable(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryVendorId</Name>
				<Source><![CDATA[
    public VendAccount primaryVendorId(
        InventDimId     _inventDimId    = '',           // can be = '' if setting the _inventDim buffer
        InventDim       _inventDim      = null)         // set this parameter for better performance if avail
    {
        ReqSetupDim     reqSetupDim;

        if (! _inventDimId && prmisDefault(_inventDim))
        {
            return this.PrimaryVendorId;
        }

        reqSetupDim = ReqSetupDim::newInventTable(this, _inventDimId, _inventDim);

        if (reqSetupDim)
        {
            return reqSetupDim.primaryVendId();
        }

        return this.PrimaryVendorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related product image.
    /// </summary>
    /// <returns>Packed image reference.</returns>
    public display container productImage()
    {
        ImageReference imageData = EcoResProductImage::releasedProductImage(this);
        return imageData.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImageThumbnail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related product image thumbnail.
    /// </summary>
    /// <returns>Packed image reference.</returns>
    public display container productImageThumbnail()
    {
        ImageReference imageData = EcoResProductImage::releasedProductImage(this, EcoResProductImageSize::Thumbnail);
        return imageData.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description of the product that this item represents.
    /// </summary>
    /// <param name="_languageId">
    /// The ID of a language in which to retrieve the name.
    /// </param>
    /// <param name="_inventDimId">
    /// The record ID of the <c>InventDim</c> record for which to retrieve the description.
    /// </param>
    /// <returns>
    /// The description of a product.
    /// </returns>
    /// <remarks>
    /// The function tries to find a product variant based on the value of the <paramref
    /// name="_inventDimId" /> parameter.If the product variant is found then the description is returned;
    /// Otherwise, the description of a product that this item represents is returned.
    /// </remarks>
    public EcoResDescription productDescription(
        LanguageId      _languageId,
        InventDimId     _inventDimId = InventDim::inventDimIdBlank())
    {
        EcoResProductRecId  productRecId;
        InventDim           inventDim;

        //check if a variant
        if (!prmisDefault(_inventDimId))
        {
            inventDim = InventDim::find(_inventDimId);
            productRecId = InventDimCombination::findByInventDim(this.ItemId, inventDim).DistinctProductVariant;
        }
        //variant not found, get product from this
        if (!productRecId)
        {
            productRecId = this.Product;
        }

        return EcoResProductTranslation::getDescriptionOrDefaultDescription(productRecId, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a product dimension group ID related to the current item.
    /// </summary>
    /// <returns>
    /// A product dimension group ID.
    /// </returns>
    public display EcoResProductDimensionGroupRecId productDimensionGroup()
    {
        return EcoResProductDimensionGroupProduct::findByProduct(this.Product).ProductDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a product dimension group name that is related to the current item.
    /// </summary>
    /// <returns>
    /// A product dimension group name.
    /// </returns>
    public display EcoResProductDimensionGroupName productDimensionGroupName()
    {
        EcoResProductDimensionGroup ecoResProductDimensionGroup;

        ecoResProductDimensionGroup = EcoResProductDimensionGroup::find(this.productDimensionGroup());
        return ecoResProductDimensionGroup.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productHasCWSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the product definition for this item has catch-weight setup.
    /// </summary>
    /// <returns>
    /// true if the product definition for this item has catch weight setup; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Method is cached as the product setup will never change.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(false)]
    public display NoYes productHasCWSetup()
    {
        return EcoResProduct::find(this.Product).PdsCWProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a product that this item represents.
    /// </summary>
    /// <param name="_languageId">
    /// The ID of the language for which the name is retrieved.
    /// </param>
    /// <param name="_inventDimId">
    /// The ID of an <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// The name of a product.
    /// </returns>
    /// <remarks>
    /// The method finds a product variant that is based on the value of the <c>_inventDimId</c>
    /// parameter.If the product variant is found then its name is returned; otherwise, the name of a
    /// product that this item represents is returned.
    /// </remarks>
    public EcoResProductName productName(
        LanguageId      _languageId,
        InventDimId     _inventDimId = InventDim::inventDimIdBlank())
    {
        EcoResProductRecId  productRecId = this.getProductRecId(_inventDimId);

        return EcoResProduct::find(productRecId).productName(_languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductNameFromInventDim</Name>
				<Source><![CDATA[
    public EcoResProductName getProductNameFromInventDim(
        LanguageId  _languageId,
        InventDim   _inventDim)
    {
        EcoResProductRecId  productRecId = this.getProductRecIdFromInventDim(_inventDim);

        return EcoResProduct::find(productRecId).productName(_languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameInSystemLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a product that this item represents in system language.
    /// </summary>
    /// <param name="_inventDimId">
    /// The ID of an <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// The name of a product in system language.
    /// </returns>
    /// <remarks>
    /// If the product variant is found then its name in system language is returned.
    /// </remarks>
    public EcoResProductName productNameInSystemLanguage(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        EcoResProductRecId  productRecId = this.getProductRecId(_inventDimId);
        return EcoResProduct::find(productRecId).productName(SystemParameters::getSystemLanguageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameInUserLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a product that this item represents in the current user language.
    /// </summary>
    /// <param name="_inventDimId">
    /// The ID of an <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// The name of a product in the current user language.
    /// </returns>
    /// <remarks>
    /// If the product variant is found then its name in the current user language is returned.
    /// </remarks>
    [Hookable(false)]
    public EcoResProductName productNameInUserLanguage(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        EcoResProductRecId  productRecId = this.getProductRecId(_inventDimId);
        return EcoResProduct::find(productRecId).productName(currentUserLanguage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameInSpecificLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a product that this item represents based on the <c>EcoResProductParametersFallbackLanguage</c> record for the current user.
    /// </summary>
    /// <param name="_inventDimId">
    /// The ID of an <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// The name of a product in the specified language based on the <c>EcoResProductParametersFallbackLanguage</c> record for the current user.
    /// </returns>
    /// <remarks>
    /// If the product variant is found then its name in the specified language is returned.
    /// </remarks>
    [Hookable(false)]
    public EcoResProductName productNameInSpecificLanguage(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        EcoResProductRecId  productRecId = this.getProductRecId(_inventDimId);
        return EcoResProduct::find(productRecId).productName(EcoResProductParametersFallbackLanguage::getSelectedFallbackLanguage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameInInfologLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a product that this item represents in the current infolog language.
    /// </summary>
    /// <param name="_inventDimId">
    /// The ID of an <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// The name of a product in the current infolog language.
    /// </returns>
    /// <remarks>
    /// If the product variant is found then its name in the current infolog language is returned.
    /// </remarks>
    [Hookable(false)]
    public EcoResProductName productNameInInfologLanguage(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        EcoResProductRecId  productRecId = this.getProductRecId(_inventDimId);
        return EcoResProduct::find(productRecId).productName(infolog.language());
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameWhsWorkExecute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the product name in infolog language if the <c>EcoResProductTranslationFallbackFeature</c> is enabled,
    /// else retrieve the product name in company language. Applicable for whs app.
    /// </summary>
    /// <returns> The name of a product in infolog language if <c>EcoResProductTranslationFallbackFeature</c> is enabled, else company language.</returns>
    [Hookable(false)]
    public EcoResProductName productNameWhsWorkExecute()
    {
        boolean isFallbackFeatureAndParameterEnabled = FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackFeature::instance())
            && EcoResProductParameters::find().UseFallbackTranslation;

        EcoResProductName productName = isFallbackFeatureAndParameterEnabled ? this.productNameInInfologLanguage() : this.defaultProductName();

        if (FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackSpecificLanguageFeature::instance()))
        {
            EcoResProductParametersFallbackLanguage paramFallbackLanguage = EcoResProductParametersFallbackLanguage::findRecordByUserId();
            productName = paramFallbackLanguage && paramFallbackLanguage.UseUserLanguage == NoYes::No ? this.productNameInSpecificLanguage() : productName;
        }
        return productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductRecId</Name>
				<Source><![CDATA[
    public EcoResProductRecId getProductRecId(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        EcoResProductRecId  productRecId;

        //check if a variant
        if (!prmisDefault(_inventDimId))
        {
            InventDim inventDim = InventDim::find(_inventDimId);
            productRecId = InventDimCombination::findByInventDim(this.ItemId, inventDim).DistinctProductVariant;
        }
        //variant not found, get product from this
        if (!productRecId)
        {
            productRecId = this.Product;
        }

        //table selected with field list
        if (!productRecId && this.ItemId)
        {
            productRecId = InventTable::find(this.ItemId).Product;
        }

        return productRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductRecIdFromInventDim</Name>
				<Source><![CDATA[
    public EcoResProductRecId getProductRecIdFromInventDim(InventDim _inventDim)
    {
        EcoResProductRecId  productRecId = InventDimCombination::findByInventDim(this.ItemId, _inventDim).DistinctProductVariant;

        //variant not found, get product from this
        if (!productRecId)
        {
            productRecId = this.Product;
        }

        //table selected with field list
        if (!productRecId && this.ItemId)
        {
            productRecId = InventTable::find(this.ItemId).Product;
        }

        return productRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productSubtype</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a product subtype related to the current item.
    /// </summary>
    /// <returns>
    /// A product subtype.
    /// </returns>
    public display EcoResProductSubtype productSubtype()
    {
        return this.Product().productSubtype();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a purchase warehouse ID.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The current purchase warehouse ID.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID for which to retrieve a warehouse; optional.
    /// </param>
    /// <param name="_inventSiteIdParent">
    /// A purchase site ID to which the <paramref name="_inventLocationId" /> parameter belongs; optional.
    /// </param>
    /// <returns>
    /// A purchase warehouse ID.
    /// </returns>
    /// <remarks>
    /// The value of the <paramref name="_inventLocationId" /> will be returned back if it is not empty and
    /// the mandatory warehouse parameter is not set on the item's purchase order settings.If the <paramref
    /// name="_inventDimId" /> parameter is not specified, the default settings are used.The <paramref
    /// name="_inventSiteIdParent" /> parameter applies only when the <paramref name="_inventLocationId" />
    /// parameter is specified.If the <paramref name="_inventSiteIdParent" /> and <paramref
    /// name="_inventLocationId" /> parameters are passed and no site specific settings are found, the
    /// check whether the passed <paramref name="_inventLocationId" /> parameter belongs to the site
    /// specified by the <paramref name="_inventSiteIdParent" /> parameter will be performed, and if it
    /// does not, then an empty string will be returned back, but if it does, then the <paramref
    /// name="_inventLocationId" /> parameter is returned.
    /// </remarks>
    public display InventLocationId purchInventLocationId(
        InventLocationId    _inventLocationId   = '',
        InventDimId         _inventDimId        = InventDim::inventDimIdBlank(),
        InventSiteId        _inventSiteIdParent = '')
    {
        return this.inventItemPurchSetup(_inventDimId).inventLocationId(_inventLocationId, this, _inventSiteIdParent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the site for purchase operations.
    /// </summary>
    /// <param name = "_inventSiteId">A suggested site to evaluate; optional.</param>
    /// <param name = "_inventDimId">The product dimensions to get the site for; optional.</param>
    /// <returns>The site applicable for purchase operations.</returns>
    public display PurchInventSiteId purchInventSiteId(InventSiteId _inventSiteId = '', InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        return this.inventItemPurchSetup(_inventDimId).inventSiteId(_inventSiteId, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineDisc</Name>
				<Source><![CDATA[
    public display LineDiscCode    purchLineDisc()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the minimum allowed inventory order quantity.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension ID settings for which to find; optional.
    /// </param>
    /// <returns>
    /// A minimum allowed inventory order quantity.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_inventDimId" /> parameter is not specified, the default settings are used.
    /// </remarks>
    public display QtyLowest purchLowestQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        return this.inventItemPurchSetup(_inventDimId).getLowestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupGroup</Name>
				<Source><![CDATA[
    public display MarkupGroupId  purchMarkupGroup()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).MarkupGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMultiLineDisc</Name>
				<Source><![CDATA[
    public display PriceGroupId purchMultiLineDisc()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).MultiLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchOverDeliveryPct</Name>
				<Source><![CDATA[
    public display PurchOverDeliveryPct  purchOverDeliveryPct()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).OverDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPcsPrice</Name>
				<Source><![CDATA[
    public display Price purchPcsPrice()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).pcsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPriceAgreement</Name>
				<Source><![CDATA[
    public container purchPriceAgreement(
        TransDate           _priceDate,
        InventDim           _inventDim,
        Qty                 _qty,
        UnitOfMeasureSymbol _unit,
        VendAccount         _accountNum         = this.primaryVendorId(_inventDim.InventDimId, _inventDim),
        CurrencyCode        _currencyCode       = VendTable::find(_accountNum).Currency,
        boolean             _includeLineDisc    = true)
    {
        InventPurchPriceAgreementCalculationParameters parameters = InventPurchPriceAgreementCalculationParameters::newFromInventTable(this);

        parameters.priceDate = _priceDate;
        parameters.inventDim = _inventDim;
        parameters.qty = _qty;
        parameters.unit = _unit;
        parameters.accountNum = _accountNum;
        parameters.currencyCode = _currencyCode;
        parameters.includeLineDisc = _includeLineDisc;

        InventPurchPriceAgreementCalculationResult result = InventPurchPriceAgreementCalculation::newFromParameters(parameters).purchPriceAgreement();
        
        return [result.costPrice,
                result.costPriceUnit,
                result.costMarkup,
                result.priceDiscFromDate,
                result.priceDiscToDate,
                result.costPriceSecCur,
                result.costMarkupSecCur];
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchPriceUnit</Name>
				<Source><![CDATA[
    public display PriceUnit  purchPriceUnit()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).getPriceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchStandardQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the standard purchase order quantity.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension ID settings for which to find; optional.
    /// </param>
    /// <returns>
    /// A standard purchase order quantity.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_inventDimId" /> parameter is not specified, the default settings are used.
    /// </remarks>
    public display QtyStandard purchStandardQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        return this.inventItemPurchSetup(_inventDimId).getStandardQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchSuppItemGroupId</Name>
				<Source><![CDATA[
    public display InventSuppItemGroupId purchSuppItemGroupId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).SuppItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTaxItemGroupId</Name>
				<Source><![CDATA[
    public display TaxItemGroup purchTaxItemGroupId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchUnderDeliveryPct</Name>
				<Source><![CDATA[
    public display PurchUnderDeliveryPct  purchUnderDeliveryPct()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchUnitId</Name>
				<Source><![CDATA[
    public display PurchUnit  purchUnitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void renamePrimaryKey()
    {
        ItemId oldItemId = this.orig().ItemId;

        if (!this.isRenameItemIdPrimaryKeyFlightEnabled() && this.existsTransactionsCrossCompany(oldItemId))
        {
            throw error("@SCM:RenameItemIdDenied");
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailConnActionManagement::errorOnRename(this);
        }

        ttsbegin;

        InventTable inventTable = this.orig().data(); // remember selected record

        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, inventTable);
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();

        this.renameBOMTableCurrentCompany(oldItemId);

        this.renameDimensionValueAndBOMTableCrossCompany(inventTable);

        if (FormDataUtil::getFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).research();
            if (inventTable) // restore selected record
            {
                FormDataUtil::getFormDataSource(this).findRecord(inventTable);
            }
        }
        ttscommit;

        this.clearCacheAcrossAOSes(oldItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTransactionsCrossCompany</Name>
				<Source><![CDATA[
    private boolean existsTransactionsCrossCompany(ItemId _oldItemId)
    {
        boolean existsTransactions =  InventTrans::transactionsExist(_oldItemId);
        if (!existsTransactions && InventTableDataSharingFeature::isEnabled())
        {
            SetEnumerator crossCompanySet = SysDataSharingPolicy::crossCompaniesByCompanyAndTable(curExt(), tableStr(InventTable));
        
            while (crossCompanySet.moveNext())
            {
                DataAreaId company = crossCompanySet.current();
                changecompany(company)
                {
                    existsTransactions =  InventTrans::transactionsExist(_oldItemId);
                    if (existsTransactions)
                    {
                        break;
                    }
                }
            }
        }

        return existsTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameBOMTableCurrentCompany</Name>
				<Source><![CDATA[
    private void renameBOMTableCurrentCompany(ItemId _oldItemId)
    {
        if (!BOMVersion::dictConfigurationKey().enabled())
        {
            BOMTable bomTable = BOMTable::find(_oldItemId);
            if (bomTable)
            {
                bomTable.bomId = this.ItemId;
                bomTable.renamePrimaryKey();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameDimensionValueAndBOMTableCrossCompany</Name>
				<Source><![CDATA[
    private void renameDimensionValueAndBOMTableCrossCompany(InventTable _origInventTable)
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            SetEnumerator crossCompanySet = SysDataSharingPolicy::crossCompaniesByCompanyAndTable(curExt(), tableStr(InventTable));
        
            while (crossCompanySet.moveNext())
            {
                DataAreaId company = crossCompanySet.current();
                changecompany(company)
                {
                    // Both methods must be called even though there is no super() being wrapped in order to get all telemetry and update the records
                    DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, _origInventTable);
                    rename.syncRenamedValuePreSuper();
                    rename.syncRenamedValuePostSuper();

                    this.renameBOMTableCurrentCompany(_origInventTable.ItemId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeId</Name>
				<Source><![CDATA[
    public RouteId routeId(
        TransDate   _searchDate,
        FromQty     _searchQty,
        InventDim   _searchInventDim)
    {
        return RouteVersion::findActive(this.ItemId, _searchDate, _searchQty, _searchInventDim).RouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeIdConstruction</Name>
				<Source><![CDATA[
    public RouteId routeIdConstruction(
        BOMRouteVersionSelect   _bomRouteVersionSelect,
        TransDate               _searchDate,
        FromQty                 _searchQty,
        InventDim               _searchInventDim)
    {
        if (!this.RecId || !this.inventItemType().canHaveRoutes())
        {
            return '';
        }

        if (_bomRouteVersionSelect == BOMRouteVersionSelect::Active)
        {
            return this.routeId(_searchDate, _searchQty, _searchInventDim);
        }

        RouteVersion routeVersion = RouteVersion::selectRouteVersion(this.ItemId, _searchDate, _searchQty, _searchInventDim, true, true, true, true, true, '', false, true);

        if (_bomRouteVersionSelect == BOMRouteVersionSelect::Selected)
        {
            return routeVersion.RouteId;
        }

        return routeVersion.RecId ? routeVersion.RouteId : this.routeId(_searchDate, _searchQty, _searchInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a sales warehouse ID.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The current sales warehouse ID.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID settings to find.
    /// </param>
    /// <param name="_inventSiteIdParent">
    /// A sales site ID that the <paramref name="_inventLocationId" /> parameter should belong to; optional.
    /// </param>
    /// <returns>
    /// A sales warehouse ID.
    /// </returns>
    public display InventLocationId salesInventLocationId(
        InventLocationId    _inventLocationId   = '',
        InventDimId         _inventDimId        = InventDim::inventDimIdBlank(),
        InventSiteId        _inventSiteIdParent = '')
    {
        return this.inventItemSalesSetup(_inventDimId).inventLocationId(_inventLocationId, this, _inventSiteIdParent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the site for sales operations.
    /// </summary>
    /// <param name = "_inventSiteId">A suggested site to evaluate; optional.</param>
    /// <param name = "_inventDimId">The product dimensions to get the site for; optional.</param>
    /// <returns>The site applicable for sales operations.</returns>
    public display SalesInventSiteId salesInventSiteId(InventSiteId _inventSiteId = '', InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        return this.inventItemSalesSetup(_inventDimId).inventSiteId(_inventSiteId, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineDisc</Name>
				<Source><![CDATA[
    public display LineDiscCode    salesLineDisc()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupGroup</Name>
				<Source><![CDATA[
    public display MarkupGroupId  salesMarkupGroup()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).MarkupGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMultiLineDisc</Name>
				<Source><![CDATA[
    public display PriceGroupId salesMultiLineDisc()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).MultiLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesOverDeliveryPct</Name>
				<Source><![CDATA[
    public display SalesOverDeliveryPct  salesOverDeliveryPct()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).OverDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPcsPrice</Name>
				<Source><![CDATA[
    public display Price salesPcsPrice()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).pcsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceAgreement</Name>
				<Source><![CDATA[
    public container salesPriceAgreement(
        TransDate           _searchDate,
        InventDim           _inventDim,
        Qty                 _qty,
        UnitOfMeasureSymbol _unit,
        CustAccount         _accountNum,
        CurrencyCode        _currencyCode,
        PriceGroupId        _priceGroupId = '')
    {
        PriceDisc           priceDisc;
        InventTableModule   inventTableModule   = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales);
        CustTable           custTable;
        PriceGroupId        priceGroupId;

        if (_unit != inventTableModule.UnitId)
        {
            _qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                         _inventDim.inventDimId,
                                                                                         _qty,
                                                                                         _unit,
                                                                                         inventTableModule.UnitId,
                                                                                         NoYes::Yes);
        }

        if (_priceGroupId)
        {
            priceGroupId = _priceGroupId;
        }
        else
        {
            custTable = CustTable::find(_accountNum);
            priceGroupId = custTable.PriceGroup;
        }

        priceDisc = this.createPriceDiscInstance(this.createAndInitPriceDiscParameters(ModuleInventPurchSales::Sales,
                                  this.ItemId,
                                  _inventDim,
                                  inventTableModule.UnitId,
                                  _searchDate,
                                  _qty,
                                  _accountNum,
                                  _currencyCode));


        if (!priceDisc.findPrice(priceGroupId))
        {
            priceDisc.findItemPrice();
        }

        return [priceDisc.price(), priceDisc.priceUnit(), priceDisc.markup()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_module">A <c>ModuleInventPurchSales</c> value.</param>
    /// <param name = "_itemid">An <c>ItemId</c> value.</param>
    /// <param name = "_inventDim">An <c>InventDim</c> record.</param>
    /// <param name = "_unitId">A <c>UnitOfMeasureSymbol</c> value.</param>
    /// <param name = "_priceDiscDate">A <c>TransDate</c>.</param>
    /// <param name = "_quantity">A <c>Qty</c> value.</param>
    /// <param name = "_accountNum">A <c>CustVendAC</c> value.</param>
    /// <param name = "_currencyCode">A <c>CurrencyCode</c> value.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters(ModuleInventPurchSales _module,
        ItemId          _itemid,
        InventDim       _inventDim,
        UnitOfMeasureSymbol _unitId,
        TransDate       _priceDiscDate,
        Qty             _quantity,
        CustVendAC      _accountNum,
        CurrencyCode    _currencyCode)
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();

        parameters.parmModuleType(_module);
        parameters.parmItemId(_itemid);
        parameters.parmInventDim(_inventDim);
        parameters.parmUnitID(_unitId);
        parameters.parmPriceDiscDate(_priceDiscDate);
        parameters.parmQty(_quantity);
        parameters.parmAccountNum(_accountNum);
        parameters.parmCurrencyCode(_currencyCode);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callCreateAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call to create and initialize instance of <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_module">A <c>ModuleInventPurchSales</c> value.</param>
    /// <param name = "_itemid">An <c>ItemId</c> value.</param>
    /// <param name = "_inventDim">An <c>InventDim</c> record.</param>
    /// <param name = "_unitId">A <c>UnitOfMeasureSymbol</c> value.</param>
    /// <param name = "_priceDiscDate">A <c>TransDate</c>.</param>
    /// <param name = "_quantity">A <c>Qty</c> value.</param>
    /// <param name = "_accountNum">A <c>CustVendAC</c> value.</param>
    /// <param name = "_currencyCode">A <c>CurrencyCode</c> value.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    public PriceDiscParameters callCreateAndInitPriceDiscParameters(ModuleInventPurchSales _module,
        ItemId          _itemid,
        InventDim       _inventDim,
        UnitOfMeasureSymbol _unitId,
        TransDate       _priceDiscDate,
        Qty             _quantity,
        CustVendAC      _accountNum,
        CurrencyCode    _currencyCode)
    {
        return this.createAndInitPriceDiscParameters(_module, _itemid, _inventDim, _unitId, _priceDiscDate, _quantity, _accountNum, _currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callCreatePriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call to create instance of <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    public PriceDisc callCreatePriceDiscInstance(PriceDiscParameters _parameters)
    {
        return this.createPriceDiscInstance(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceUnit</Name>
				<Source><![CDATA[
    public display PriceUnit  salesPriceUnit()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).getPriceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesStandardQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a standard sales order quantity.
    /// </summary>
    /// <param name="_inventDimId">
    /// The inventory dimension ID settings to find; optional.
    /// </param>
    /// <returns>
    /// A standard sales order quantity.
    /// </returns>
    public display QtyStandard salesStandardQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        return this.inventItemSalesSetup(_inventDimId).getStandardQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesSuppItemGroupId</Name>
				<Source><![CDATA[
    public display InventSuppItemGroupId salesSuppItemGroupId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).SuppItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTaxItemGroupId</Name>
				<Source><![CDATA[
    public display TaxItemGroup salesTaxItemGroupId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnderDeliveryPct</Name>
				<Source><![CDATA[
    public display SalesUnderDeliveryPct  salesUnderDeliveryPct()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnitId</Name>
				<Source><![CDATA[
    public display SalesUnit  salesUnitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the service code for a service.
    /// </summary>
    /// <param name="_logisticsPostalAddress"><c>LogisticsPostalAddress</c> related to the service code</param>
    /// <returns>Returns the company service code if a <c>LogisticsPostalAddress</c> is not provided. Otherwise return the the child service code related to the <c>LogisticsPostalAddress</c></returns>
    public TaxServiceCode_BR serviceCode_BR(LogisticsPostalAddress _logisticsPostalAddress = null)
    {
        if (_logisticsPostalAddress)
        {
            return TaxServiceCode_BR::findDlvServiceCode(this.TaxServiceCode_BR,
                                                        _logisticsPostalAddress.CountryRegionId,
                                                        _logisticsPostalAddress.State,
                                                        _logisticsPostalAddress.City);
        }
        return TaxServiceCode_BR::findCompanyServiceCode(this.TaxServiceCode_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sizeActive</Name>
				<Source><![CDATA[
    public display boolean sizeActive()
    {
        return EcoResProductDimGroupSetup::newItemId(this.ItemId).getFieldSetup(fieldNum(InventDim, InventSizeId)).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>storageDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of a storage dimension group that is related to the current item.
    /// </summary>
    /// <returns>
    /// The ID of a storage dimension group.
    /// </returns>
    public EcoResStorageDimensionGroupRecId storageDimensionGroup()
    {
        return EcoResStorageDimensionGroupItem::findByItem(this.DataAreaId, this.ItemId).StorageDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>styleActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the style dimension is active for this item.
    /// </summary>
    /// <returns>
    ///    true if the style dimension is active; otherwise, false.
    /// </returns>
    public display boolean styleActive()
    {
        return EcoResProductDimGroupSetup::newItemId(this.ItemId).getFieldSetup(fieldNum(InventDim, InventStyleId)).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productVersionActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the version dimension is active for this item.
    /// </summary>
    /// <returns>
    ///    true if the version dimension is active; otherwise, false.
    /// </returns>
    public display boolean productVersionActive()
    {
        return EcoResProductDimGroupSetup::newItemId(this.ItemId).getFieldSetup(fieldNum(InventDim, InventVersionId)).isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID and a product name of the current product per company and combines it into a title.
    /// </summary>
    /// <returns>
    ///    The title of the current product per company.
    /// </returns>
    /// <remarks>
    ///    The method is used as a title in product per company list page and details forms.
    /// </remarks>
    [SysClientCacheDataMethodAttribute]
    public display EcoResProductTitle title()
    {
        EcoResProductName   productName;

        productName = EcoResProductTranslation::getNameOrDefaultName(this.Product, CompanyInfo::languageId());
        if (productName)
        {
            return strFmt('%1 : %2', this.ItemId, productName);
        }

        return this.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAvailPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total physical quantity available for the specified item.
    /// </summary>
    /// <returns>
    /// the available physical quantity value.
    /// </returns>
    display InventQtyAvailPhysical totalAvailPhysical()
    {
        return InventSum::hhtAvailPhysical(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDimensionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of a tracking dimension group that is related to the current item.
    /// </summary>
    /// <returns>
    /// The ID of a tracking dimension group.
    /// </returns>
    public EcoResTrackingDimensionGroupRecId trackingDimensionGroup()
    {
        return EcoResTrackingDimensionGroupItem::findByItem(this.DataAreaId, this.ItemId).TrackingDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventTable     this_Orig           = this.orig();
        boolean         productHasCWSetup   = this.productHasCWSetup();

        InventItemSetupSupplyType   inventItemSetupSupplyType;

        if (!this.pdsValidateBestBeforeDays())
        {
            return;
        }

        ttsbegin;

        if (this.isModelGroupSetup())
        {
            this.modelGroup().inventModelType().preUpdateInventTable(this);
        }

        BOMLevelCalc::checkLevelRecalcInventTable(this);

        if (this.PmfProductType != this_Orig.PmfProductType
            && ( (this.PmfProductType == PmfProductType::Formula && !productHasCWSetup)
               || this.PmfProductType == PmfProductType::MainItem
               || this.PmfProductType == PmfProductType::Co_Product)
            && !InventTable::skipUpdateOfInventItemSetupSupplyType())
        {
            inventItemSetupSupplyType = this.inventItemSetupSupplyType(true);
            inventItemSetupSupplyType.DefaultOrderType = ReqPOType::Production;
            inventItemSetupSupplyType.update();
        }

        var crossTableData = this.crossTableData();

        if (crossTableData && crossTableData.parmMustDeleteBOMVersions())
        {
            BOMVersion::deleteVersions(this.ItemId);
        }

        if (crossTableData && crossTableData.parmMustRemoveBOMVersionApprovals())
        {
            BOMVersion::pmfUnapproveVersions(this.ItemId);
        }

        super();

        this.SysExtensionSerializerMap::postUpdate();

        if (this_Orig.SalesModel                != this.SalesModel              ||
            this_Orig.SalesPriceModelBasic      != this.SalesPriceModelBasic    ||
            this_Orig.SalesContributionRatio    != this.SalesContributionRatio  ||
            this_Orig.SalesPercentMarkup        != this.SalesPercentMarkup)
        {
            InventTable::updateAutoSalesPrice(this.ItemId);
        }

        if (this.shouldUpdatePhysicalDimensionInventoryUnitOfMeasure(this_Orig))
        {
            this.updatePhysicalDimensionInventoryUnitOfMeasure();
        }

        this.insertBOMTable();

        if (this.PmfPlanningItemId != this_orig.PmfPlanningItemId || this.PmfProductType != this_orig.PmfProductType)
        {
            InventDistinctProduct::updatePMFFields(this);
        }

        if (this.ProductLifecycleStateId != this_orig.ProductLifecycleStateId && !this.Product().isProductMaster())
        {
            InventDistinctProduct::updateProductLifecycleStateFromInventTable(this);
        }

        // Update the full text search table.
        MCRFullTextSearch::update(InventDistinctProduct::findByProduct(this.product));

        ttscommit;

        if (this.ItemId != this_Orig.ItemId)
        {
            this.clearCacheAcrossAOSes(this_Orig.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutoSalesPercent</Name>
				<Source><![CDATA[
    public boolean updateAutoSalesPercent()
    {
        InventTableModule   inventTableSales;
        InventTableModule   inventTableBasic;

        if (this.SalesModel == SalesPriceModel::None)
        {
            return false;
        }

        inventTableSales = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales, true);

        inventTableBasic = InventTableModule::findBasedOnSalesPriceModelBasic(this.ItemId, this.SalesPriceModelBasic);

        if (! inventTableSales || ! inventTableBasic)
        {
            return false;
        }

        switch (this.SalesModel)
        {
            case SalesPriceModel::Contributionratio:
                if (inventTableSales.pcsPrice())
                {
                    this.SalesContributionRatio = (inventTableSales.pcsPrice() - inventTableBasic.pcsPrice()) * 100 / inventTableSales.pcsPrice();
                }
                break;
            case SalesPriceModel::PercentMarkup:
                if (inventTableBasic.pcsPrice())
                {
                    this.SalesPercentMarkup = (inventTableSales.pcsPrice() - inventTableBasic.pcsPrice()) * 100 / inventTableBasic.pcsPrice();
                    this.SalesPercentMarkup = this.SalesPercentMarkup < 0 ? 0 : this.SalesPercentMarkup; // SalesPercentMarkup should never be negative
                }
                break;
            default:
        }

        this.update();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCheckFix</Name>
				<Source><![CDATA[
    public void updateCheckFix(InventConsistencyCheck_Table _inventConsistencyCheck_Table)
    {
        InventTableModule                   inventTableModule;
        InventItemLocation                  inventItemLocation;
        InventDimGroupFieldSetup            inventDimGroupFieldSetup;
        Counter                             serialNoErrors;
        InventSum                           inventSum;
        InventSerial                        inventSerial;

        void addError(str _str)
        {
            checkFailed(_str, '', SysInfoAction_TableField::newBuffer(this));
        }

        setPrefix(fieldLabelValue(this.TableId, fieldNum(InventTable, ItemId), this.ItemId));

        inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch, true);
        if (! inventTableModule)
        {
            addError(strFmt("@SYS55203", ModuleInventPurchSales::Purch));
            if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
            {
                inventTableModule.initValue();
                inventTableModule.ItemId        = this.ItemId;
                inventTableModule.ModuleType    = ModuleInventPurchSales::Purch;
                inventTableModule.insert();

                _inventConsistencyCheck_Table.updateCorrected();
            }
        }

        inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent, true);
        if (! inventTableModule)
        {
            addError(strFmt("@SYS55203", ModuleInventPurchSales::Invent));
            if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
            {
                inventTableModule.initValue();
                inventTableModule.ItemId        = this.ItemId;
                inventTableModule.ModuleType    = ModuleInventPurchSales::Invent;
                inventTableModule.insert();

                _inventConsistencyCheck_Table.updateCorrected();
            }
        }

        inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales, true);
        if (! inventTableModule)
        {
            addError(strFmt("@SYS55203", ModuleInventPurchSales::Sales));
            if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
            {
                inventTableModule.initValue();
                inventTableModule.ItemId        = this.ItemId;
                inventTableModule.ModuleType    = ModuleInventPurchSales::Sales;
                inventTableModule.insert();

                _inventConsistencyCheck_Table.updateCorrected();
            }
        }

        inventItemLocation = InventItemLocation::findDefault(this.ItemId, true);
        if (! inventItemLocation)
        {
            addError("@SYS55204");
            if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
            {
                inventItemLocation.initValue();
                inventItemLocation.ItemId        = this.ItemId;
                inventItemLocation.InventDimId   = InventDim::inventDimIdBlank();
                inventItemLocation.insert();

                _inventConsistencyCheck_Table.updateCorrected();
            }
        }

        // Check the extra serial number control
        inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(this.ItemId, fieldNum(InventDim, InventSerialId));
        if (   inventDimGroupFieldSetup.dimFieldId()
            && inventDimGroupFieldSetup.isActive()
            && inventDimGroupFieldSetup.isSerialNumberControlEnabled())
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select InventSerialId from inventSum
                where inventSum.ItemId          == this.ItemId      &&
                      inventSum.ClosedQty       == NoYes::No        &&
                      inventSum.InventSerialId  != ''               &&
                      (inventSum.PhysicalInvent != 0                ||
                       inventSum.Arrived        != 0)
                notexists join inventSerial
                    where inventSerial.InventSerialId   == inventSum.InventSerialId &&
                          inventSerial.ItemId           == this.ItemId

                {
                    serialNoErrors++;
                    if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
                    {
                        inventSerial.ItemId             = this.ItemId;
                        inventSerial.InventSerialId     = inventSum.InventSerialId;
                        inventSerial.insert();
                    }
                }
            }
            else
            {
                InventDim                           inventDim;

                while select InventDimId from inventSum
                where inventSum.ItemId      == this.ItemId      &&
                      inventSum.ClosedQty   == NoYes::No        &&
                      (inventSum.PhysicalInvent != 0            ||
                       inventSum.Arrived        != 0)
                {
                    inventDim = inventSum.inventDim();
                    if (inventDim.InventSerialId && !InventSerial::exist(inventDim.InventSerialId, this.ItemId))
                    {
                        serialNoErrors++;
                        if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
                        {
                            inventSerial.ItemId             = this.ItemId;
                            inventSerial.InventSerialId     = inventDim.InventSerialId;
                            inventSerial.insert();
                        }
                    }
                }
            }
            if (serialNoErrors > 0)
            {
                addError(strFmt("@SYS68715", this.ItemId, serialNoErrors));
                if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
                {
                    _inventConsistencyCheck_Table.updateCorrected();
                }
            }
        }

        if (InventConsistencyCheckItemSetupSupplyTypeFlight::instance().isEnabled())
        {
            InventItemSetupSupplyType inventItemSetupSupplyType = InventItemSetupSupplyType::find(this.ItemId, this.DataAreaId);
            if (!inventItemSetupSupplyType)
            {
                addError(strFmt("@SYS94719", tablePName(InventItemSetupSupplyType)));
            
                if (_inventConsistencyCheck_Table.checkFix() == CheckFix::Fix)
                {
                    inventItemSetupSupplyType.initFromInventTable(this);
                
                    if (!this.pmfInventProductType().canBeDefaultOrderTypePurchase()
                        && this.inventItemType().canBeProduced())
                    {
                        inventItemSetupSupplyType.initDefaultOrderType(ReqPOType::Production);
                    }
                    else
                    {
                        inventItemSetupSupplyType.initDefaultOrderType(ReqPOType::Purch);
                    }

                    inventItemSetupSupplyType.insert();

                    _inventConsistencyCheck_Table.updateCorrected();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastCostPrice</Name>
				<Source><![CDATA[
    public void updateLastCostPrice(
        CostAmount      _value,
        InventQty       _qty,
        PriceDate       _priceDate,
        InventDim       _inventDim)
    {
        InventTableModule       inventTableModule;
        CostPrice       costPrice;

        void initInventTableModule()
        {
            inventTableModule.Price     = costPrice;
            inventTableModule.Markup    = 0;
            inventTableModule.PriceDate = _priceDate;
        }

        if (!_value
            || !_inventDim.isOwnerCurrentLegalEntity())
        {
            return;
        }

        if (this.CostModel && _qty > 0 && _value  > 0 && this.modelGroup().inventModelType().mustUpdateInventTableCostPrice())
        {
            inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent);
            costPrice         = this.getCostPrice(_value, _qty, _priceDate, _inventDim);

            if (inventTableModule.PriceDate <= _priceDate)
            {
                if (costPrice != inventTableModule.Price)
                {
                    inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent, true);

                    initInventTableModule();
                    inventTableModule.update(false);
                }
            }

            initInventTableModule();
            InventItemPrice::updateLastCostPrice(inventTableModule, _inventDim, _priceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    protected CostPrice getCostPrice(
        CostAmount      _value,
        InventQty       _qty,
        PriceDate       _priceDate,
        InventDim       _inventDim)
    {
        return CurrencyExchangeHelper::price(InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).getPriceUnit() * _value / _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastCostPriceSecCur_RU</Name>
				<Source><![CDATA[
    public void updateLastCostPriceSecCur_RU(
        CostAmount       _value,
        InventQty        _qty,
        PriceDate        _priceDate,
        InventDim        _inventDim)
    {
        InventTableModule       inventTableModule;
        CostPrice               costPrice;

        void initInventTableModule()
        {
            inventTableModule.PriceSecCur_RU  = costPrice;
            inventTableModule.MarkupSecCur_RU = 0;
            inventTableModule.PriceDate       = _priceDate;
        }

        if (!_value
            || !_inventDim.isOwnerCurrentLegalEntity())
        {
            return;
        }

        if (this.CostModel && _qty > 0 && _value  > 0 && this.modelGroup().inventModelTypeSecCur_RU().mustUpdateInventTableCostPrice())
        {
            inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent);
            costPrice = CurrencyExchangeHelper::price(inventTableModule.priceUnit() * _value / _qty, CompanyInfoHelper::secondaryCurrency_RU());

            if (inventTableModule.PriceDate <= _priceDate)
            {
                if (costPrice != inventTableModule.PriceSecCur_RU)
                {
                    inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent, true);

                    initInventTableModule();
                    inventTableModule.update(false);
                }
            }

            initInventTableModule();
            InventItemPrice::updateLastCostPrice(inventTableModule, _inventDim, _priceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastPurchPrice</Name>
				<Source><![CDATA[
    public void updateLastPurchPrice(
        TransDate       _transDate,
        CurrencyCode    _currencyCode,
        Price           _purchPrice,
        PriceUnit       _priceUnit,
        PriceMarkup     _priceMarkup,
        PurchUnit       _purchUnit,
        InventDim       _inventDim)
    {
        InventTableModule   inventTableModule;
        Price               price;
        PriceMarkup         markup;

        void initInventTableModule()
        {
            inventTableModule.Price     = price;
            inventTableModule.PriceUnit = _priceUnit;
            inventTableModule.Markup    = markup;
            inventTableModule.PriceDate = _transDate;
        }

        if (!_purchPrice)
        {
            return;
        }

        if (this.PurchModel)
        {
            inventTableModule   = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch);

            EcoResProductUnitConverter	ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(inventTableModule.ItemId,
                                                                                                                                       _inventDim.inventDimId,
                                                                                                                                       inventTableModule.UnitId,
                                                                                                                                       _purchUnit,
                                                                                                                                       NoYes::Yes,
                                                                                                                                       NoYes::No);
            price  = ecoResProductUnitConverter.convertValue(ExchangeRateHelper::mstPrice(_purchPrice, _currencyCode, _transDate));
            markup = ecoResProductUnitConverter.convertValue(ExchangeRateHelper::mstPrice(_priceMarkup, _currencyCode, _transDate));

            if (inventTableModule.PriceDate <= _transDate)
            {
                if (price)
                {
                    if (price != inventTableModule.Price || markup != inventTableModule.Markup || inventTableModule.PriceUnit != _priceUnit)
                    {
                        inventTableModule = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Purch, true);
                        initInventTableModule();
                        inventTableModule.update(false);
                    }
                    initInventTableModule();
                    InventItemPrice::updateLastPurchPrice(inventTableModule, _inventDim, _transDate);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        #ISOCountryRegionCodes
        boolean         ret;
        BOM             bomLines;
        BOMId           activeBOMId;
        str             warningStr;
        InventDim       inventDim;

        ret = super();

        //check if the item is used in a bom line template in Product Configuration
        ret = ret && PCModelingLibrary::validateDeleteItem(this);

        if (! ret)
        {
            return ret;
        }

        inventDim.InventSiteId = this.inventInventSiteId();

        if (   isConfigurationkeyEnabled(configurationKeyNum(BOMVersion))
            && this.inventItemType().canHaveBOM()
            && this.storageDimensionGroup()
            && this.trackingDimensionGroup())
        {
            activeBOMId = BOMVersion::findActive(this.ItemId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), this.inventStandardQty(), inventDim).bomId;

            select firstonly RecId from bomLines
                where bomLines.bomId == activeBOMId;

            if (bomLines.RecId)
            {
                warningStr = "@SYS81601";
            }
        }

        if (warningStr
            && !this.mustSkipValidateDeleteDialog()
            && Box::yesNo(warningStr+'\n\n'+"@SYS62458", DialogButton::No, strFmt("@SYS81613", this.ItemId)) == DialogButton::No)
        {
            ret = false;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            InventBaileeCalcSetup_RU::existCalcItemId(this.ItemId))
        {
            ret = checkFailed("@GLS115685");
        }

        ret = ret && AgreementLine::validateAgreementLineIsDeleted(this.ItemId, this.DataAreaId);

        // check to see if this item is associated to any Commerce product hierarchy
        RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup;

        select firstonly retailAttributesLegalEntityLookup
            where retailAttributesLegalEntityLookup.SalesAltItemId == this.ItemId
                && retailAttributesLegalEntityLookup.LegalEntity == CompanyInfo::current();

        if (retailAttributesLegalEntityLookup)
        {
            return checkFailed(strfmt(("@Retail:RetailAttributesLegalEntityLookupPropertiesDeleteValidation"), this.ItemId, EcoResCategory::find(retailAttributesLegalEntityLookup.Category).Name));
        }

        // Check to see if this item is added as component or substitute to any retail kit.
        RetailKitComponent retailKitComponent;
        RetailKitComponentSubstitute retailKitComponentSubstitute;

        select firstonly retailKitComponent
            where retailKitComponent.Component == this.Product;

        select * from retailKitComponentSubstitute
                where retailKitComponentSubstitute.SubstituteProduct == this.Product;

        if (retailKitComponent || retailKitComponentSubstitute)
        {
            return checkFailed(strfmt(("@Retail:RetailKitComponentAndSubstituteDeleteValidation"), this.ItemId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipValidateDeleteDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip additional dialog for <c>validateDelete</c> method.
    /// </summary>
    /// <returns>true if dialog must be skipped; otherwise, false.</returns>
    protected boolean mustSkipValidateDeleteDialog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        #ISOCountryRegionCodes

        boolean ret = super(_fieldName, _arrayIndex);

        CustomsTariffCodeTable_IN customsTariffCodeTable;
        boolean isCustomsEnabled = TaxParameters::isCustomsEnable_IN();

        switch (_fieldName)
        {
            case fieldStr(InventTable, ProjCategoryId):
                ret = ret && this.checkProjCategoryId();
                break;

            case fieldStr(InventTable, InventFiscalLIFOGroup):
                if (this.RecId
                    && (!InventFiscalLIFOGroup::find(this.InventFiscalLIFOGroup).Individual
                        || !InventFiscalLIFOGroup::find(this.orig().InventFiscalLIFOGroup).Individual)
                    && !SysRecordTemplate::isTemplateEditFormRecord(this)
                    && this.checkFiscalLIFOValuePrevYear())
                {
                    ret = checkFailed("@SYS99199");
                }
                break;

            case fieldStr(InventTable, MatchingPolicy):
                ret = ret && this.validateMatchingPolicy();
                break;

            case fieldStr(InventTable, CostGroupId):
                ret = ret && this.checkCostGroupId();
                break;

            case fieldStr(InventTable, MarkupCode_RU):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                    && this.isMarkupCodeEnabled_RU()
                    && this.existsVendInvoiceTrans_RU())
                {
                    ret = checkFailed(strFmt("@GLS114517", this.ItemId));
                }
                break;

            case fieldStr(InventTable, AssetGroupId_RU):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                    &&  this.orig().AssetGroupId_RU
                    &&  this.existsVendInvoiceTrans_RU())
                {
                    ret = checkFailed(strFmt("@GLS114517", this.ItemId));
                }
                break;

            case fieldStr(InventTable, ItemType):
                if (BrazilParameters::isEnabled())
                {
                    if (this.ItemType == ItemType::Service
                        && this.TaxFiscalClassification_BR)
                    {
                        ret = checkFailed("@GLS430");
                    }

                    if (this.ItemType != ItemType::Service
                        && this.TaxServiceCode_BR)
                    {
                        ret = checkFailed("@GLS60421");
                    }
                }
                break;

            case fieldStr(InventTable, TaxFiscalClassification_BR) :
                if (this.ItemType == ItemType::Service
                    && this.TaxFiscalClassification_BR)
                {
                    ret = checkFailed("@GLS430");
                }
                break;

            case fieldStr(InventTable, TaxServiceCode_BR) :
                if (this.TaxServiceCode_BR)
                {
                    if (!TaxServiceCode_BR::findCompanyServiceCode(this.TaxServiceCode_BR))
                    {
                        ret = checkFailed("@GLS60420");
                    }
                    if (this.ItemType != ItemType::Service)
                    {
                        ret = checkFailed("@GLS60421");
                    }
                }
                break;

            case fieldStr(InventTable, icmsOnService_BR) :
                ret = ret && this.checkICMSOnService_BR();
                break;

            case fieldStr(InventTable, CustomsImportTariffCodeTable_IN):
                if (isCustomsEnabled
                    && this.CustomsImportTariffCodeTable_IN)
                {
                    customsTariffCodeTable = CustomsTariffCodeTable_IN::find(this.CustomsImportTariffCodeTable_IN);
                    if (ret && customsTariffCodeTable.Direction != Direction_IN::Import)
                    {
                        ret = checkFailed(strFmt("@GLS5200", customsTariffCodeTable.TariffCode, Direction_IN::Import));
                    }
                }
                break;

            case fieldStr(InventTable, CustomsExportTariffCodeTable_IN):
                if (isCustomsEnabled
                    && this.CustomsExportTariffCodeTable_IN)
                {
                    customsTariffCodeTable = CustomsTariffCodeTable_IN::find(this.CustomsExportTariffCodeTable_IN);
                    if (ret && customsTariffCodeTable.Direction != Direction_IN::Export)
                    {
                        ret = checkFailed(strFmt("@GLS5200", customsTariffCodeTable.TariffCode, Direction_IN::Export));
                    }
                }
                break;

            case fieldStr(InventTable, ProdFlushingPrincip):
                if (this.ProdFlushingPrincip == ProdFlushingPrincipItem::Picked
                &&  !this.whsItemIsWHSControlled())
                {
                    ret = checkFailed("@WAX:PickFlushPrincipValidation");
                }
                break;

            case fieldStr(InventTable, IntrastatProcId_CZ):
                if (this.IntrastatProcId_CZ
                    && IntrastatStatProc::isRelationByCommodityEnabled()
                    && !IntrastatStatProc::exist(this.IntrastatCommodity, this.IntrastatProcId_CZ))
                {
                    ret = checkFailed(strFmt(
                        "@GLS180006",
                        this.IntrastatProcId_CZ,
                        fieldPName(IntrastatStatProc, StatProcId),
                        tablePName(IntrastatStatProc)));
                }
                break;
        }

        if (ret && #PdsApprovedVendorListEnabled)
        {
            switch (_fieldName)
            {
                case fieldStr(InventTable, PrimaryVendorId):
                    ret = this.pdsCheckApprovedVendorList();
                    break;

                case fieldStr(InventTable, PdsVendorCheckItem):
                    if (this.PdsVendorCheckItem == PdsVendorCheckItem::NotAllowed
                        && !this.pdsCheckApprovedVendorList())
                    {
                        ret = checkFailed(strFmt("@PDS632",
                            new DictEnum(enumNum(PdsVendorCheckItem)).value2Label(
                                PdsVendorCheckItem::NotAllowed)));
                    }
                    break;
            }
        }

        switch (_fieldName)
        {
            case fieldStr(InventTable, PmfProductType):
                if (ret
                    && this.orig().isFormulaAllowed()
                    && !this.isFormulaAllowed())
                {
                    InventTable inventTable;
                    select firstonly RecId from inventTable
                        where inventTable.PmfPlanningItemId == this.ItemId;
                    if (inventTable.RecId)
                    {
                        ret = checkFailed("@PDS1389");
                    }
                }

                if (ret && PdsGlobal::pdsIsCWItem(this.ItemId))
                {
                    if (this.PmfProductType  == PmfProductType::MainItem)
                    {
                        ret = checkFailed("@PDS112");
                    }
                    if (this.PmfProductType == PmfProductType::BOM)
                    {
                        ret = checkFailed("@PRO2642");
                    }
                }

                if (ret
                    && this.orig().isCoByProduct()
                    && !this.isCoByProduct())
                {
                    if (PmfFormulaCoBy::existItemId(this.ItemId))
                    {
                        ret = checkFailed("@PRO2643");
                    }
                    else
                    {
                        //clear the value for planning item
                        this.PmfPlanningItemId = '';
                    }
                }

                ret = ret && this.validateProductionTransactions();
                break;

            case fieldStr(InventTable, BatchNumGroupId):
                if (ret
                    && PdsGlobal::pdsIsCWItem(this.ItemId)
                    && this.BatchNumGroupId)
                {
                    ret = this.pdsCWCheckBatchNumGroupId();
                }
                break;

            case fieldStr(InventTable, SerialNumGroupId):
                if (ret
                    && PdsGlobal::pdsIsCWItem(this.ItemId)
                    && this.SerialNumGroupId)
                {
                    ret = this.pdsCWCheckSerialNumGroupId();
                }
                break;

            case fieldStr(InventTable, ItemType):
                if (ret
                    && PdsGlobal::pdsIsCWItem(this.ItemId))
                {
                    ret = this.pdsCWCheckItemType();
                }

                if (this.ItemType           == ItemType::Service
                    && this.PmfProductType  == PmfProductType::Co_Product)
                {
                    ret = checkFailed("@PRO2590");
                }

                if (this.ItemType           == ItemType::Service
                    && this.PmfProductType  == PmfProductType::By_Product)
                {
                    ret = checkFailed("@PRO2591");
                }
                break;

            case fieldStr(InventTable, PdsShelfAdvice),
                 fieldStr(InventTable, PdsBestBefore),
                 fieldStr(InventTable, PdsShelfLife):

                if (ret && this.(fieldName2id(tableNum(InventTable), _fieldName)) < 0)
                {
                    switch (_fieldName)
                    {
                        case fieldStr(InventTable, PdsShelfAdvice) :
                            ret = checkFailed(strFmt(
                                        "@SYS69681",
                                        fieldPName(InventTable, PdsShelfAdvice)));
                            break;
                        case fieldStr(InventTable, PdsBestBefore) :
                            ret = checkFailed(strFmt(
                                        "@SYS69681",
                                        fieldPName(InventTable, PdsBestBefore)));
                            break;
                        case fieldStr(InventTable, PdsShelfLife) :
                            ret = checkFailed(strFmt(
                                        "@SYS69681",
                                        fieldPName(InventTable, PdsShelfLife)));
                            break;
                    }
                }

                if (ret)
                {
                    ret = this.pdsValidateBestBeforeDays();
                }
                break;

            case fieldStr(InventTable, PmfPlanningItemId):
                if (   this.PmfPlanningItemId != ''
                   && !InventTable::find(this.PmfPlanningItemId).isFormulaAllowed())
                {
                    ret = checkFailed(strFmt("@PRO2023", PmfProductType::Formula, PmfProductType::MainItem));
                }
                break;

            case fieldStr(InventTable, PmfYieldPct):
                if (ret)
                {
                    boolean isFormulaAllowed = this.isFormulaAllowed();
                    if (isFormulaAllowed && this.PmfYieldPct <= 0)
                    {
                        ret = checkFailed(strFmt("@PRO214", fieldLabelValue(tableNum(InventTable), fieldNum(InventTable, PmfYieldPct), "")));
                    }
                    else if (!isFormulaAllowed && this.PmfYieldPct)
                    {
                        ret = checkFailed("@SCM:OnlyFormulaAndPlanningItemsCanHaveYieldPercentage");
                    }
                }
                break;

            case fieldStr(InventTable, pdsBaseAttributeId):
                if (this.pdsBaseAttributeId != this.orig().pdsBaseAttributeId)
                {
                    if (this.pdsBaseAttributeId)
                    {
                        PdsBatchAttribType batchAttribType = PdsBatchAttrib::findAttribType(PdsBatchAttribByItem::findItemId(this.ItemId, this.pdsBaseAttributeId, TableGroupAll::Table).PdsBatchAttribRelation);
                        if (batchAttribType != PdsBatchAttribType::Integer && batchAttribType != PdsBatchAttribType::Realnumber)
                        {
                            ret = checkFailed(strFmt("@PSC768", enum2str(PdsBatchAttribType::Integer), enum2str(PdsBatchAttribType::Realnumber)));
                        }
                    }

                    if (ret)
                    {
                        this.pdsTargetFactor           = 0.00;
                        this.pdsPotencyAttribRecording = PDSPotencyAttribRecordingEnum::PurchProdReceipt;
                    }
                }
                break;

            case fieldStr(InventTable, PdsFreightAllocationGroupId):
                if (this.PdsFreightAllocationGroupId && this.ItemType == ItemType::Service)
                {
                    ret = checkFailed("@SCM:ServiceItemCannotHaveFreightAllocationGroup");
                }
                break;

            case fieldStr(InventTable, StandardInventColorId):
                ret = ret && EcoResProductVariantDimValue::newProductVariantDim_InventColorId().checkExist(this.Product, this.StandardInventColorId);
                break;

            case fieldStr(InventTable, StandardInventStyleId):
                ret = ret && EcoResProductVariantDimValue::newProductVariantDim_InventStyleId().checkExist(this.Product, this.StandardInventStyleId);
                break;
            
            case fieldStr(InventTable, StandardInventVersionId):
                ret = ret && EcoResProductVariantDimValue::newProductVariantDim_InventVersionId().checkExist(this.Product, this.StandardInventVersionId);
                break;

            case fieldStr(InventTable, StandardInventSizeId):
                ret = ret && EcoResProductVariantDimValue::newProductVariantDim_InventSizeId().checkExist(this.Product, this.StandardInventSizeId);
                break;

            case fieldStr(InventTable, StandardConfigId):
                ret = ret && EcoResProductVariantDimValue::newProductVariantDim_ConfigId().checkExist(this.Product, this.StandardConfigId);
                break;

            case fieldStr(InventTable, AltInventColorId):
                ret = ret && this.checkAlternativeProductDimension(fieldNum(InventTable, AltInventColorId), fieldNum(InventDim, InventColorId));
                break;

            case fieldStr(InventTable, AltInventStyleId):
                ret = ret && this.checkAlternativeProductDimension(fieldNum(InventTable, AltInventStyleId), fieldNum(InventDim, InventStyleId));
                break;

            case fieldStr(InventTable, AltInventVersionId):
                ret = ret && this.checkAlternativeProductDimension(fieldNum(InventTable, AltInventVersionId), fieldNum(InventDim, InventVersionId));
                break;

            case fieldStr(InventTable, AltInventSizeId):
                ret = ret && this.checkAlternativeProductDimension(fieldNum(InventTable, AltInventSizeId), fieldNum(InventDim, InventSizeId));
                break;

            case fieldStr(InventTable, AltConfigId):
                ret = ret && this.checkAlternativeProductDimension(fieldNum(InventTable, AltConfigId), fieldNum(InventDim, configId));
                break;
        }

        if (this.isModelGroupSetup())
        {
            ret = ret && this.modelGroup().inventModelType().validateFieldInventTable(this, _fieldName, _arrayIndex);
        }

        ret = ret && this.validateFieldValueCrossCompany(_fieldName, _arrayIndex);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValueCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateFieldValueCrossCompany(FieldName _fieldName, int _arrayIndex = 1)
    {
        #ISOCountryRegionCodes

        boolean ret = true;
        if (InventTableDataSharingFeature::isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this, policy.RecId);
                QueryRun    queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    InventTable companyInventTable = queryRun.get(this.TableId);
                    DataAreaId company = companyInventTable.DataAreaId;
        
                    if (companyInventTable && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            InventTable inventTable = InventTable::find(companyInventTable.ItemId, true);
                            if (inventTable.RecId)
                            {
                                buf2Buf(this, inventTable);

                                if (ret)
                                {
                                    switch (_fieldName)
                                    {
                                        case fieldStr(InventTable, InventFiscalLIFOGroup):
                                            if (inventTable.checkFiscalLIFOValuePrevYear())
                                            {
                                                ret = checkFailed("@SYS99199");
                                            }
                                            break;

                                        case fieldStr(InventTable, MatchingPolicy):
                                            ret = inventTable.validateMatchingPolicy();
                                            break;

                                        case fieldStr(InventTable, MarkupCode_RU):
                                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                                            && inventTable.isMarkupCodeEnabled_RU()
                                            && inventTable.existsVendInvoiceTrans_RU())
                                            {
                                                ret = checkFailed(strFmt("@GLS114517", inventTable.ItemId));
                                            }
                                            break;

                                        case fieldStr(InventTable, AssetGroupId_RU):
                                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                                            && inventTable.orig().AssetGroupId_RU
                                            && inventTable.existsVendInvoiceTrans_RU())
                                            {
                                                ret = checkFailed(strFmt("@GLS114517", inventTable.ItemId));
                                            }

                                            break;

                                        case fieldStr(InventTable, PmfProductType):
                                            ret = inventTable.validateProductionTransactions();
                                            break;
                                    }

                                    if (ret && inventTable.isModelGroupSetup())
                                    {
                                        ret = inventTable.modelGroup().inventModelType().validateFieldInventTable(inventTable, _fieldName, _arrayIndex);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMatchingPolicy</Name>
				<Source><![CDATA[
    private boolean validateMatchingPolicy()
    {
        boolean ret = true;
        if (!this.RecId || this.MatchingPolicy != this.orig().MatchingPolicy)
        {
            if (!PurchMatchingPolicyManager::canMatchingPolicyWithNotSetBeChanged(this.MatchingPolicy))
            {
                ret = checkFailed(strFmt("@SYS130454", VendParameters::find().MatchingPolicy));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductionTransactions</Name>
				<Source><![CDATA[
    private boolean validateProductionTransactions()
    {
        boolean ret = true;
        if (   this.orig().PmfProductType != this.PmfProductType
            && this.orig().inventItemType().canBeProduced())
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            select firstonly RecId from inventTrans
                where inventTrans.ItemId == this.ItemId
                    && inventTrans.StatusIssue != StatusIssue::Sold
                    && inventTrans.StatusReceipt != StatusReceipt::Purchased
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        && (inventTransOrigin.ReferenceCategory == InventTransType::ProdLine
                        || inventTransOrigin.ReferenceCategory == InventTransType::Production);

            if (inventTrans.RecId)
            {
                ret = checkFailed(strFmt("@SYS4000201", this.PmfProductType));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAlternativeProductDimension</Name>
				<Source><![CDATA[
    private boolean checkAlternativeProductDimension(FieldId _alternativeProductDimensionFieldId, FieldId _inventDimFieldId)
    {
        boolean isValid = true;
        Name alternativeProductDimensionValue = this.(_alternativeProductDimensionFieldId);

        if (alternativeProductDimensionValue && !this.AltItemId)
        {
            isValid = checkFailed("@SYS308707");
        }
        else
        {
            EcoResProductRecId altProductRecId = InventTable::itemProduct(this.AltItemId);
            isValid = EcoResProductVariantDimValue::newEcoResProductVariantDimValue(_inventDimFieldId).checkExist(altProductRecId, alternativeProductDimensionValue);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipProductVariantUnitConversionValidationInCurrentTransactionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables or enables the validation of product variant specific unit of measure conversion in the current transaction scope.
    /// </summary>
    /// <param name="_mustSkip">A boolean value indicating whether the validation must be skipped.</param>
    /// <returns>A boolean value indicating whether the validation must be skipped.</returns>
    public static boolean skipProductVariantUnitConversionValidationInCurrentTransactionScope(boolean _mustSkip = false)
    {
        return InventTable::skipLogicInCurrentTransactionScope('SkipProductVariantUnitConversionValidation', _mustSkip, !prmIsDefault(_mustSkip));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether data is valid and ready to be written.
    /// </summary>
    /// <param name="_skipProductVariantUnitConversionValidation">
    /// Boolean parameter to determine whether the product variant unit conversion validation must be skipped or not.
    /// </param>
    /// <returns>
    /// Returns true if data is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite(boolean _skipProductVariantUnitConversionValidation = false)
    {
        InventTable orig = this.orig();
        #ISOCountryRegionCodes

        boolean ret = super();
        ret = ret && this.checkProjCategoryId();
        ret = ret && this.checkInventDimCombination();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.isModelGroupSetup())
            {
                ret = ret && this.modelGroup().inventModelTypeSecCur_RU().validateWriteInventTable(this);
            }

            if (this.MarkupCode_RU && ! this.isMarkupCodeEnabled_RU() )
            {
                ret = checkFailed(strFmt("@GLS114518", enum2str(ItemType::Service)));
            }

            if (this.AlcoholProductionTypeId_RU)
            {
                if (! this.AlcoholStrength_RU)
                {
                    ret = checkFailed(strFmt("@GLS103654", "@SYS4002922"));
                }

                if (! this.AlcoholManufacturerId_RU)
                {
                    ret = checkFailed(strFmt("@GLS103654", "@SYS4002911"));
                }
            }

            if (this.AlcoholStrength_RU < 0 ||
                this.AlcoholStrength_RU > 100)
            {
                ret = checkFailed(strFmt("@GLS106085", "@SYS4002922"));
            }
        }

        if (this.isModelGroupSetup())
        {
            ret = ret && this.validateModelGroupSetup();
        }

        if (BrazilParameters::isEnabled())
        {
            if (FormDataUtil::isFormDataSource(this) && this.ItemType == ItemType::Service &&!this.TaxServiceCode_BR)
            {
                ret = checkFailed (strFmt("@SYS26332", fieldPName(InventTable, TaxServiceCode_BR)));
            }

            ret = ret && this.checkICMSOnService_BR();
        }

        this.validatePackingGrossWeightVolume();

        if (ret)
        {
            ret = this.validatePdsShelfLife();

            if (ret && #PmfEnabled)
            {
                ret = this.pmfInventProductType().validatePmfProductType();
            }

            if (ret
                && (this.PmfProductType == PmfProductType::Formula
                    || this.PmfProductType == PmfProductType::MainItem)
                && this.PmfYieldPct <= 0)
            {
                ret = checkFailed(strFmt("@PRO214", fieldLabelValue(tableNum(InventTable), fieldNum(InventTable, PmfYieldPct), "")));
            }

            if (ret
                && this.PmfProductType   == PmfProductType::MainItem
                && orig.PmfProductType   == PmfProductType::MainItem)
            {
                ret = this.checkPlanningItemCost();
            }
        }

        if (ret)
        {
            this.validateExistItemCoverage(orig);
        }
        
        // notify the user for the correct quality setup if this
        // is a potency item with value registered in quality order
        this.pdsQualOrdWarning();

        if (ret)
        {
            this.validateVendorCheckItem(orig);
        }
        
        if (FormDataUtil::isFormDataSource(this)
            && FormDataUtil::getFormDataSource(this).formRun().args().name() == formStr(EcoResProductDetailsExtended))
        {
            _skipProductVariantUnitConversionValidation = true;
        }

        if (ret
            && !_skipProductVariantUnitConversionValidation
            && this.isProductVariantUnitConversionEnabled()
            && !InventTable::skipProductVariantUnitConversionValidationInCurrentTransactionScope())
        {
            ret = this.validateProductVariantUnitConversion();
        }

        if (ret && this.RecId)
        {
            var crossTableData = this.crossTableData();
            boolean mustDeleteBOMVersions = crossTableData && crossTableData.parmMustDeleteBOMVersions();
            boolean mustRemoveBOMVersionApprovals = crossTableData && crossTableData.parmMustRemoveBOMVersionApprovals();

            if (this.mustDeleteBOMVersionsBeforeChangingProductionType(orig))
            {
                if (!mustDeleteBOMVersions && BOMVersion::existsForItem(this.ItemId))
                {
                    ret = checkFailed(strFmt("@SCM:BOMVersionsMustBeDeletedToChangeProductionType", orig.PmfProductType, this.PmfProductType));
                }
            }
            else if (this.mustDeleteFormulaVersionsBeforeChangingProductionType(orig))
            {
                if (!mustDeleteBOMVersions && BOMVersion::existsForItem(this.ItemId))
                {
                    ret = checkFailed(strFmt("@SCM:FormulaVersionsMustBeDeletedToChangeProductionType", orig.PmfProductType, this.PmfProductType));
                }
            }
            else if (this.mustRemoveFormulaVersionsApprovalBeforeChangingProductionType(orig))
            {
                if (!mustRemoveBOMVersionApprovals && BOMVersion::existsApprovedForItem(this.ItemId))
                {
                    ret = checkFailed(strFmt("@SCM:FormulaVersionApprovalsMustBeRemovedToChangeProductionType", orig.PmfProductType, this.PmfProductType));
                }
            }
        }

        ret = ret && this.validateWriteCrossCompany();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateWriteCrossCompany()
    {
        boolean ret = true;
        if (InventTableDataSharingFeature::isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this, policy.RecId);
                QueryRun    queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    InventTable companyInventTable = queryRun.get(this.TableId);
                    DataAreaId company = companyInventTable.DataAreaId;
                    if (companyInventTable && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            InventTable inventTable = InventTable::find(companyInventTable.ItemId, true);
                            if (inventTable.RecId)
                            {
                                InventTable orig = inventTable.orig();
                                buf2Buf(this, inventTable);
                    
                                ret = ret && inventTable.checkInventDimCombination();
                    
                                if (inventTable.isModelGroupSetup())
                                {
                                    ret = ret && inventTable.validateModelGroupSetup();
                                }
                    
                                inventTable.validatePackingGrossWeightVolume();
                    
                                ret = ret && inventTable.validatePdsShelfLife();
                                if (ret && #PmfEnabled)
                                {
                                    ret = inventTable.pmfInventProductType().validatePmfProductType();
                                }
                    
                                if (ret)
                                {
                                    inventTable.validateExistItemCoverage(orig);
                                }

                                if (ret)
                                {
                                    inventTable.validateVendorCheckItem(orig);
                                }
                            }
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModelGroupSetup</Name>
				<Source><![CDATA[
    private boolean validateModelGroupSetup()
    {
        boolean ret = this.modelGroup().inventModelType().validateWriteInventTable(this);

        if (WHSCatchWeightHelper::isCatchWeightProduct(this.Product)
            && this.modelGroup().NegativePhysical
            && EcoResStorageDimensionGroup::find(EcoResStorageDimensionGroupItem::findByItem(this.DataAreaId, this.ItemId).StorageDimensionGroup).IsWarehouseWHSEnabled)
        {
            // Catch weight items cannot have both physical negative inventory and warehousing enabled.
            ret = ret && checkFailed("@WAX:Error_NegativeInventoryNotAllowedForWHSCWItems");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePackingGrossWeightVolume</Name>
				<Source><![CDATA[
    private void validatePackingGrossWeightVolume()
    {
        // If an item's gross volume or weight is zero, warn the user.  The user
        // should still be allowed to save the record.
        MCRInventTable mcrInventTableLocal = this.mcrInventTable();
        if (MCRPackingBoxLogic::isPackingBoxLogicEnabled()
            && mcrInventTableLocal.IsPackingBoxable
            && (this.grossVolume() == 0 || this.grossWeight() == 0))
        {
            warning("@MCR24036");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistItemCoverage</Name>
				<Source><![CDATA[
    private void validateExistItemCoverage(InventTable _origInventTable)
    {
        if (   this.PmfProductType != _origInventTable.PmfProductType
            && ReqItemTable::pmfExistItemCoverage(this.ItemId))
        {
            info("@PRO2628");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendorCheckItem</Name>
				<Source><![CDATA[
    private void validateVendorCheckItem(InventTable _origInventTable)
    {
        // Display a warning if two vendor approval methods are enabled for a single released product.
        if (    _origInventTable.PdsVendorCheckItem != this.PdsVendorCheckItem
            &&  this.PdsVendorCheckItem != PdsVendorCheckItem::NoCheck
            &&  WHSInventEnabled::exist(this.ItemId)
            &&  WHSParameters::find().EnableVendFilters == NoYes::Yes)
        {
            warning("@WAX5492");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsAllowPhysNeg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value indicating whether the physical inventory be negative or not.
    /// </summary>
    /// <returns>
    /// true, if physical inventory may be negative, otherwise False.
    /// </returns>
    public boolean whsAllowPhysNeg()
    {
        return this.modelGroup().NegativePhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsBatchActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value
    /// indicating whether the Batch inventory dimension is active for current item or not.
    /// </summary>
    /// <returns>
    /// true - if Batch inventory dimension is active for current item, otherwise - False.
    /// </returns>
    boolean whsBatchActive()
    {
        return EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsDisplayHasTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an integer flag
    /// indicating whether there are open inventory transactions for current item or not.
    /// </summary>
    /// <returns>
    /// Integer 1 if there are open inventory transactions for current item, otherwise - integer 0.
    /// </returns>
    display Integer whsDisplayHasTransactions()
    {
        int     ret;

        ret = InventTrans::openTransactionsExist(this.ItemId)
            || (WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled() && WHSInventReserve::itemHasReservations(this.ItemId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsItemIsWHSControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the current <c>InventTable</c> record is WHS controlled.
    /// </summary>
    /// <returns>
    ///    true if the current record is WHS controlled; otherwise, false.
    /// </returns>
    boolean whsItemIsWHSControlled()
    {
        return EcoResStorageDimensionGroup::find(this.storageDimensionGroup()).IsWarehouseWHSEnabled == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsReservationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the ID of the reservation hierarchy that is related to the current item.
    /// </summary>
    /// <returns>
    ///     The <c>WHSReservationHierarchyRecId</c> ID of the reservation hierarchy.
    /// </returns>
    public WHSReservationHierarchyRecId whsReservationHierarchy()
    {
        WHSReservationHierarchyRecId ret = 0;

        if (WHSInventEnabled::exist(this.ItemId))
        {
            ret = WHSReservationHierarchyItem::findByItem(this.DataAreaId, this.ItemId).ReservationHierarchy;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsReservationHierarchyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the name of the reservation hierarchy that is related to the current item.
    /// </summary>
    /// <returns>
    ///     The <c>WHSReservationHierarchyName</c> name of the reservation hierarchy.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display WHSReservationHierarchyName whsReservationHierarchyName()
    {
        WHSReservationHierarchyName whsReservationHierarchyName;

        if (WHSInventEnabled::exist(this.ItemId))
        {
            whsReservationHierarchyName = WHSReservationHierarchy::find(this.whsReservationHierarchy()).Name;
        }

        return whsReservationHierarchyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsSerialActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value
    /// indicating whether the Serial Number inventory dimension is active for current item or not.
    /// </summary>
    /// <returns>
    /// true - if Serial Number inventory dimension is active for current item, otherwise - False.
    /// </returns>
    [SysObsolete('Use InventTable.isItemSerialNumberActivated() instead.', false, 30\11\2017)]
    boolean whsSerialActive()
    {
        return this.isItemSerialNumberActivated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsItemInventoryOwnershipEnabled</Name>
				<Source><![CDATA[
    internal boolean whsItemInventoryOwnershipEnabled()
    {
        return this.ItemId
            && WHSWarehouseInventoryOwnerFlight::instance().isEnabled()
            && this.whsItemIsWHSControlled()
            && this.isItemOwnerIdActivated()
            && this.inventModelTypeAllowsInventoryOwner();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventModelTypeAllowsInventoryOwner</Name>
				<Source><![CDATA[
    private boolean inventModelTypeAllowsInventoryOwner()
    {
        InventModelGroup inventoryModelGroup = this.modelGroup();
        InventModelType inventoryModelType = inventoryModelGroup.inventModelType();

        if (inventoryModelType is InventModelType_NonValuated
            && inventoryModelType.isInventoryOwnerAllowed()
            && inventoryModelGroup.PostOnhandFinancial == NoYes::No
            && inventoryModelGroup.PostOnhandPhysical == NoYes::No)
        {
            return true;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMultipleDialogStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the text for the dialog to adjust for the transaction quantity based on the multiple unit defined.
    /// </summary>
    /// <param name="_multipleQty">
    ///     The predefined multiple unit size.
    /// </param>
    /// <param name="_transQty">
    ///     The specified transaction quantity.
    /// </param>
    /// <param name="_roundedUpQty">
    ///     The suggested adjusted quantity.
    /// </param>
    /// <param name="_allowUserInteraction">
    ///     A boolean value indicating whether the user can accept or cancel the adjustment operation.
    /// </param>
    /// <param name="_showRoundedUp">
    ///     A boolean value indicating whether the dialog shows the suggested quantity to the user.
    /// </param>
    /// <returns>
    ///     The string produced used to compose the dialog.
    /// </returns>
    public static TempStr buildMultipleDialogStr(
        Qty     _multipleQty,
        Qty     _transQty,
        Qty     _roundedUpQty,
        boolean _allowUserInteraction)
    {
        TempStr multipleDialogStr;

        multipleDialogStr = InventTable::buildDialogStrWithLabel("@SCM:QuantityMustBeMultipleMessage", _multipleQty);

        if (_allowUserInteraction)
        {
            multipleDialogStr += InventTable::buildDialogStrWithLabel("@SCM:RoundUpQuantityMessage", _roundedUpQty);
        }

        return multipleDialogStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDialogStrWithLabel</Name>
				<Source><![CDATA[
    public static TempStr buildDialogStrWithLabel(TempStr _label, Qty _qty)
    {
        return strFmt(_label, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAssetId_RU</Name>
				<Source><![CDATA[
    public static RAssetId checkAssetId_RU(ItemId _itemId)
    {
        return InventTable::find(_itemId).AssetId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkColor</Name>
				<Source><![CDATA[
    public static boolean checkColor(
        ItemId              _itemId,
        EcoResItemColorName _inventColorId)
    {
        return InventProductDimensionColor::getInstance().checkValueForItem(InventTable::find(_itemId), _inventColorId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfig</Name>
				<Source><![CDATA[
    public static boolean checkConfig(
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId)
    {
        return InventProductDimensionConfig::getInstance().checkValueForItem(InventTable::find(_itemId), _configId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(ItemId _itemId)
    {
        if (_itemId && !InventTable::exist(_itemId))
        {
            return checkFailed(strFmt(InventTable::txtNotExist(), _itemId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the product dimensions are valid for the specified item.
    /// </summary>
    /// <param name="_itemId">
    /// The item to validate.
    /// </param>
    /// <param name="_inventDim">
    /// A set of inventory dimensions.
    /// </param>
    /// <param name="_onlyTestSpecifiedDimensions">
    /// true if only specified inventory dimensions should be tested; otherwise, false.
    /// </param>
    /// <returns>
    /// true if the product dimensions are valid; otherwise, false.
    /// </returns>
    public static boolean checkProductDimensions(
        ItemId      _itemId,
        InventDim   _inventDim,
        boolean     _onlyTestSpecifiedDimensions = false
        )
    {
        boolean ok   = true;

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        InventTable inventTable = InventTable::find(_itemId);

        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current();
            FieldId fieldId = productDim.parmInventDimFieldId();

            if (!_onlyTestSpecifiedDimensions || _inventDim.(fieldId))
            {
                ok = ok && productDim.checkValueForItem(inventTable, _inventDim.(fieldId));
            }
        }

        ok = ok && _inventDim.validateWriteInventDimCombination(_itemId);
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSize</Name>
				<Source><![CDATA[
    public static boolean checkSize(
        ItemId              _itemId,
        EcoResItemSizeName  _inventSizeId)
    {
        return InventProductDimensionSize::getInstance().checkValueForItem(InventTable::find(_itemId), _inventSizeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStyle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if a style name is valid for an item.
    /// </summary>
    /// <param name="_itemId">
    ///    An item ID.
    /// </param>
    /// <param name="_inventStyleId">
    ///    A style name.
    /// </param>
    /// <returns>
    ///    true if a style is valid for an item; otherwise, false.
    /// </returns>
    public static boolean checkStyle(
        ItemId              _itemId,
        EcoResItemStyleName _inventStyleId)
    {
        return InventProductDimensionStyle::getInstance().checkValueForItem(InventTable::find(_itemId), _inventStyleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if a version name is valid for an item.
    /// </summary>
    /// <param name="_itemId">
    ///    An item ID.
    /// </param>
    /// <param name="_inventVersionId">
    ///    A version name.
    /// </param>
    /// <returns>
    ///    true if a version is valid for an item; otherwise, false.
    /// </returns>
    public static boolean checkProductVersion(
        ItemId                _itemId,
        EcoResItemVersionName _inventVersionId)
    {
        return InventProductDimensionVersion::getInstance().checkValueForItem(InventTable::find(_itemId), _inventVersionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ItemId  _itemId)
    {
        if (_itemId)
        {
            if (InventTableCacheFlight::instance().isEnabled())
            {
                SysGlobalObjectCache cache = classFactory.globalObjectCache();
                container key = [curExt(), _itemId];
                str scope = InventTable::cacheScope();

                container result = cache.find(scope, key);
                if (!result)
                {
                    result = [InventTable::existInternal(_itemId)];
                    cache.insert(scope, key, result);
                }
                return conPeek(result, 1);
            }
            return InventTable::existInternal(_itemId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInternal</Name>
				<Source><![CDATA[
    private static boolean existInternal(ItemId _itemId)
    {
        return _itemId && (select RecId from inventTable
                    where inventTable.ItemId == _itemId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static InventTable find(
        ItemId      _itemId,
        boolean     _update = false)
    {
        InventTable  inventTable;

        inventTable.selectForUpdate(_update);

        if (_itemId)
        {
            select firstonly inventTable
                where inventTable.ItemId == _itemId;
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAlternativeItem</Name>
				<Source><![CDATA[
    public static container findAlternativeItem(
        ItemId          _itemId,
        InventDim       _inventDim,
        InventQty       _qty)
    {
        InventDim                   newInventDim;
        ItemId                      newItemId       = _itemId;
        InventTable                 inventTable     = InventTable::find(_itemId);

        EcoResProductDimGroupSetup::newInventTable(inventTable).copyProductDimensions(_inventDim, newInventDim);

        if (inventTable.hasActiveAltItemId())
        {
            boolean tryNextItem     = true;
            Set     visitedItems    = new Set(Types::String);

            do
            {
                visitedItems.add(newItemId);

                InventAlternativeProductUsageRequest request = InventAlternativeProductUsageRequest::newRequest();
                request.initializeRequest(newItemId, newInventDim, _qty);

                InventAlternativeProductUsageStrategy strategy = InventAlternativeProductUsageStrategy::newStrategy(request);
                
                InventAlternativeProductUsageResponse response = strategy.verifyAlternativeProductUse();

                if (response.parmReplaceWithAlternativeProduct())
                {
                    newItemId    = response.parmAlternativeItemid();
                    newInventDim = response.parmAlternativeInventDim();
                    inventTable = InventTable::find(newItemId);

                    if (visitedItems.in(newItemId))
                    {
                        newItemId       = _itemId;
                        newInventDim    = _inventDim;
                        tryNextItem     = false;
                    }
                }
                else
                {
                    tryNextItem = false;
                }
            }
            while (tryNextItem);
        }
        return [newItemId, newInventDim];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProduct</Name>
				<Source><![CDATA[
    static public InventTable findByProduct(
        RefRecId   _product,
        boolean    _update = false)
    {
        InventTable  inventTable;

        inventTable.selectForUpdate(_update);

        if (_product)
        {
            select firstonly inventTable
                where inventTable.Product == _product;
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductInCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventTable</c> table.
    /// </summary>
    /// <param name="_product">
    ///    The ID of the <c>EcoResProduct</c> record to find.
    /// </param>
    /// <param name="_companyId">
    ///    The company for the item record.
    /// </param>
    /// <param name="_update">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventTable</c> table; otherwise, an empty record.
    /// </returns>
    static public InventTable findByProductInCompany(
        EcoResProductRecId  _product,
        CompanyId           _companyId,
        boolean             _update = false)
    {
        InventTable  inventTable;

        if (_product && _companyId)
        {
            changecompany(_companyId)
            {
                inventTable = InventTable::findByProduct(_product, _update);
            }
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostPcsPrice</Name>
				<Source><![CDATA[
    public static Price findCostPcsPrice(
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventDim   _inventDim   = null,  // set this parameter for better performance if avail
        PriceDate   _priceDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return InventTable::find(_itemId).costPcsPrice(_inventDimId, _inventDim, null, _priceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostPcsPriceSecCur_RU</Name>
				<Source><![CDATA[
    public static Price findCostPcsPriceSecCur_RU(
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventDim   _inventDim   = null,  // set this parameter for better performance if avail
        PriceDate   _priceDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return InventTable::find(_itemId).costPcsPriceSecCur_RU(_inventDimId, _inventDim, null, _priceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExternalItemId</Name>
				<Source><![CDATA[
    public static container findExternalItemId(
        ModuleInventCustVend    _moduleInventCustVend,
        CustVendAC              _custVendAccount,
        ExternalItemId          _externalItemId)
    {
        CustVendExternalItem                custVendExternalItem;
        ModuleInventPurchSalesVendCustGroup moduleInventPurchSalesVendCustGroup;
        CustVendItemGroupId                 custVendItemGroupId;

        if (_custVendAccount && _externalItemId)
        {
            if (_moduleInventCustVend == ModuleInventCustVend::Cust)
            {
                moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::Cust;
            }
            else
            {
                moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::Vend;
            }

            custVendExternalItem    = CustVendExternalItem::findExternalItemId(moduleInventPurchSalesVendCustGroup, _custVendAccount, _externalItemId);

            if (!custVendExternalItem)
            {
                if (_moduleInventCustVend == ModuleInventCustVend::Cust)
                {
                    moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::CustGroup;
                    custVendItemGroupId                 = CustTable::find(_custVendAccount).CustItemGroupId;
                }
                else
                {
                    moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::VendGroup;
                    custVendItemGroupId                 = VendTable::find(_custVendAccount).VendItemGroupId;
                }

                custVendExternalItem    = CustVendExternalItem::findExternalItemId(moduleInventPurchSalesVendCustGroup, custVendItemGroupId, _externalItemId);
            }
        }

        return [custVendExternalItem.ItemId, custVendExternalItem.inventDim()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHavingPotencyAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>InventTable</c> table that is tied to a product-specific potency attribute.
    /// </summary>
    /// <param name="_itemId">
    ///     The item ID.
    /// </param>
    /// <param name="_recordAttribValue">
    ///     The indication of when the attribute value must be recorded.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>InventTable</c> table; otherwise, an empty record.
    /// </returns>
    public static InventTable findHavingPotencyAttribute(
        ItemId                          _itemId,
        PDSPotencyAttribRecordingEnum   _recordAttribValue = PDSPotencyAttribRecordingEnum::PurchProdReceipt,
        boolean                         _forUpdate = false)
    {
        InventTable             inventTable;
        PdsBatchAttribByItem    pdsBatchAttribByItem;

        inventTable = InventTable::find(_itemId, _forUpdate);

        if (inventTable.pdsBaseAttributeId
        &&  inventTable.pdsTargetFactor             != 0
        &&  inventTable.pdsPotencyAttribRecording   == _recordAttribValue)
        {
            pdsBatchAttribByItem = InventTable::pdsFindBaseAttribute(inventTable.ItemId);
        }

        if (pdsBatchAttribByItem.PdsBatchAttribMin != 0 || pdsBatchAttribByItem.PdsBatchAttribMax != 0)
        {
            return inventTable;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified <c>InventTable</c> record.
    /// </summary>
    /// <param name="_itemId">
    /// A string value that represents the item ID of the record to find.
    /// </param>
    /// <param name="_dataAreaId">
    /// A string value that represents the <c>dataAreaId</c> value for a legal entity.
    /// </param>
    /// <returns>
    /// The specified <c>InventTable</c> record if found; otherwise, an empty record.
    /// </returns>
    public static InventTable findInLegalEntity(
        ItemId      _itemId,
        DataAreaId  _dataAreaId)
    {
        InventTable     inventTable;

        if (   _itemId
            && _dataAreaId)
        {
            select firstonly crosscompany inventTable
                where inventTable.ItemId     == _itemId
                   && inventTable.DataAreaId == _dataAreaId;
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static InventTable findRecId(
        RecId       _recId,
        DataAreaId  _dataAreaId = curExt2dataareaid(tableNum(InventTable)),
        boolean     _update     = false)
    {
        InventTable  inventTable;

        inventTable.selectForUpdate(_update);

        if (_recId)
        {
            select firstonly crossCompany inventTable
            where   inventTable.RecId       == _recId
                &&  inventTable.DataAreaId  == _dataAreaId;
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistinctProductRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of a <c>EcoResDistinctProduct</c> or <c>EcoResDistinctProductVariant</c>
    /// record.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID to use to find a <c>EcoResDistinctProduct</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record to use to find a <c>EcoResDistinctProductVariant</c> record.
    /// </param>
    /// <returns>
    /// The record ID of a <c>EcoResDistinctProduct</c> or <c>EcoResDistinctProductVariant</c> record if
    /// found; otherwise, 0.
    /// </returns>
    /// <remarks>
    /// This method searches for products in the context of the current company.
    /// </remarks>
    public static EcoResDistinctProductRecId getDistinctProductRecId(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        EcoResProductRecId          productRecId;

        if (!_itemId)
        {
            throw error("@SYS16661");
        }

        productRecId = InventTable::itemProduct(_itemId);

        if (!productRecId)
        {
            return 0; //no product found for itemId in this company
        }

        if (EcoResProduct::find(productRecId).isDistinctProduct())
        {
            return productRecId;
        }

        return InventDimCombination::findByInventDim(_itemId, _inventDim).DistinctProductVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductNumberForItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the display product number for an Item/Dim combination.
    /// </summary>
    /// <param name = "_itemId">The item Id.</param>
    /// <param name = "_inventDim">The product dimension.</param>
    /// <returns>The display product number</returns>
    public static EcoResProductDisplayProductNumber getProductNumberForItemDim(ItemId _itemId, InventDim _inventDim)
    {
        return EcoResProduct::find(InventTable::getDistinctProductRecId(_itemId, _inventDim)).DisplayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    public static InventDimId getInventDimId(ItemId _itemId)
    {
        InventDimId inventDimId;
        InventTable inventTable = InventTable::find(_itemId);
        InventDim   inventDim;

        if (inventTable)
        {
            if (inventTable.hasProductDimensions())
            {
                inventTable.initStandardProductDimensions(inventDim);
                inventDimId = InventDim::findOrCreate(inventDim).InventDimId;
            }
            else
            {
                inventDimId = InventDim::inventDimIdBlank();
            }
        }
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoActionBOMCalcGroup</Name>
				<Source><![CDATA[
    private static SysInfoAction_Formrun infoActionBOMCalcGroup(
        ItemId          _itemId,
        InventTable     _inventTable = null) // set this parameter for better performance
    {
        SysInfoAction_Formrun   infoActionBOMCalcGroup;

        infoActionBOMCalcGroup = SysInfoAction_Formrun::newFormnameControlname(formStr(EcoResProductDetailsExtended),
                                                                               identifierStr(EngineerBOMCalculation_BOMCalcGroupId));
        if (!_inventTable)
        {
            _inventTable = InventTable::find(_itemId);
        }

        infoActionBOMCalcGroup.parmCallerBuffer(_inventTable);

        return infoActionBOMCalcGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoActionItemId</Name>
				<Source><![CDATA[
    public static SysInfoAction_Formrun infoActionItemId(
        ItemId          _itemId,
        InventTable     _inventTable = null) // set this parameter for better performance
    {
        SysInfoAction_Formrun   infoActionItemId;

        infoActionItemId = SysInfoAction_Formrun::newFormnameControlname(formStr(EcoResProductDetailsExtended),
                                                                         identifierStr(InventTable_ItemId));
        if (!_inventTable)
        {
            _inventTable = InventTable::find(_itemId);
        }

        infoActionItemId.parmCallerBuffer(_inventTable);

        return infoActionItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDecimals</Name>
				<Source><![CDATA[
    public static UnitOfMeasureDecimalPrecision inventDecimals(ItemId _itemId)
    {
        return UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(
            InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRoundingToInventQty</Name>
				<Source><![CDATA[
    public static Qty applyRoundingToInventQty(Qty _qty, ItemId _itemId)
    {
        if (_itemId)
        {
            _qty = decRound(_qty, InventTable::inventDecimals(_itemId));
        }
        return _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchReceiptRequired</Name>
				<Source><![CDATA[
    public static boolean isBatchReceiptRequired(ItemId _itemId)
    {
        InventDimGroupFieldSetup    inventDimGroupFieldSetup;

        inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(_itemId, fieldNum(InventDim, InventBatchId));

        if (!inventDimGroupFieldSetup.dimFieldId()
         || !inventDimGroupFieldSetup.isActive()
         ||  inventDimGroupFieldSetup.isAllowBlankReceiptEnabled())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBatchRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the batch number is required for the item.
    /// </summary>
    /// <returns>
    ///     true if batch is enabled for the item; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The check passes when item is batch number enabled,
    /// batch number group is not set for an item or
    /// physical update is set to No for the batch number group.
    /// </remarks>
    [Hookable(false)]
    internal boolean inventBatchRequired()
    {
        if (!InventTable::isBatchReceiptRequired(this.ItemId))
        {
            return false;
        }

        if (!this.BatchNumGroupId)
        {
            return true;
        }

        InventNumGroup inventBatchNumGroup = InventNumGroup::find(this.BatchNumGroupId);
        return !inventBatchNumGroup.PhysicalUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemAndProductAndTrackingDimensionsPopulated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isItemAndProductAndTrackingDimensionsPopulated(ItemId _itemId, InventDim _inventDim)
    {
        if (_itemId)
        {
            return InventTable::allProductDimensionsPopulated(_itemId, _inventDim)
                && InventTable::allTrackingDimensionsPopulated(_itemId, _inventDim);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allProductDimensionsPopulated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean allProductDimensionsPopulated(ItemId _itemId, InventDim _inventDim)
    {
        ListEnumerator le = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();
        while (le.moveNext())
        {
            if (!_inventDim.(le.current()))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allTrackingDimensionsPopulated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean allTrackingDimensionsPopulated(ItemId _itemId, InventDim _inventDim)
    {
        ListEnumerator le = InventDimGroupSetup::newItemIdTrackingDimensionsOnly(_itemId).activeFields().getEnumerator();
        while (le.moveNext())
        {
            if (!_inventDim.(le.current()))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoTrackingEnabled</Name>
				<Source><![CDATA[
    public boolean isAutoTrackingEnabled()
    {
        if (!this.itemRequiresManualDimTracking(InventTrackingDimType::Batch)
            || !this.itemRequiresManualDimTracking(InventTrackingDimType::Serial))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemRequiresManualDimTracking</Name>
				<Source><![CDATA[
    public boolean itemRequiresManualDimTracking(InventTrackingDimType _type = InventTrackingDimType::Batch)
    {
        switch (_type)
        {
            case InventTrackingDimType::Batch:
                if (this.BatchNumGroupId != '' && !InventNumGroup::find(this.BatchNumGroupId).ManualAllocation)
                {
                    return false;
                }
            case InventTrackingDimType::Serial:
                if (this.SerialNumGroupId != '' && !InventNumGroup::find(this.SerialNumGroupId).ManualAllocation)
                {
                    return false;
                }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWarehouseCoverageDimension</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean hasWarehouseCoverageDimension(ItemId _itemId)
    {
        boolean whsExistsInCovPlan = false;

        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);

        if (inventDimGroupSetup)
        {
            whsExistsInCovPlan = inventDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventLocationId)).isCoveragePlanByDimensionEnabled();
        }

        return whsExistsInCovPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialReceiptRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether a serial is required for the item.
    /// </summary>
    /// <param name = "_itemId">
    /// The ID of the item.
    /// </param>
    /// <returns>
    /// true if serial is required for the item; otherwise, false.
    /// </returns>
    public static boolean isSerialReceiptRequired(ItemId _itemId)
    {
        InventDimGroupFieldSetup inventDimGroupFieldSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(_itemId, fieldNum(InventDim, InventSerialId));
    
        if (!inventDimGroupFieldSetup.dimFieldId()
         || !inventDimGroupFieldSetup.isActive()
         ||  inventDimGroupFieldSetup.isAllowBlankReceiptEnabled())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCoByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an item is a co-product or by-product.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <returns>
    /// true if the item is a co-product or by-product; otherwise, false.
    /// </returns>
    public static boolean isCoByItem(ItemId _itemId)
    {
        return InventTable::find(_itemId).isCoByProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an item is a formula item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <returns>
    /// true if the item is a formula item; otherwise, false.
    /// </returns>
    public static boolean isFormulaItem(ItemId _itemId)
    {
        return InventTable::find(_itemId).PmfProductType == PmfProductType::Formula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPlanningItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an item is a planning item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <returns>
    /// true if the item is a planning item; otherwise, false.
    /// </returns>
    public static boolean isPlanningItem(ItemId _itemId)
    {
        return InventTable::find(_itemId).PmfProductType == PmfProductType::MainItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPotencyItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item is a potency item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <returns>
    /// true if the item is a potency item; otherwise, false.
    /// </returns>
    public static boolean isPotencyItem(ItemId  _itemId)
    {
        return InventTable::find(_itemId).pdsBaseAttributeId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroupByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an item group for an item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of an item.
    /// </param>
    /// <param name="_dataAreaId">
    /// The ID of company in which the item exists.
    /// </param>
    /// <returns>
    /// An item group.
    /// </returns>
    public static InventItemGroup itemGroupByItemId(ItemId _itemId, DataAreaId _dataAreaId = curExt2dataareaid(tableNum(InventTable)))
    {
        return InventItemGroupItem::itemGroupByItemIdLegalEntity(_itemId, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroupIdByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an item group ID for an item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of an item.
    /// </param>
    /// <param name="_dataAreaId">
    /// The ID of company in which the item exists.
    /// </param>
    /// <returns>
    /// An item group ID.
    /// </returns>
    public static ItemGroupId itemGroupIdByItemId(ItemId _itemId, DataAreaId _dataAreaId = curExt2dataareaid(tableNum(InventTable)))
    {
        return InventItemGroupItem::itemGroupId(_itemId, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the reference record ID for the specified <c>ItemId</c> record
    /// </summary>
    /// <param name="_itemId">
    /// The specified <c>ItemId</c> record.
    /// </param>
    /// <returns>
    /// The product reference record ID of the record.
    /// </returns>
    public static RefRecId itemProduct(ItemId _itemId)
    {
        return InventTable::find(_itemId).Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemProductDimensionGroup</Name>
				<Source><![CDATA[
    public static RefRecId itemProductDimensionGroup(ItemId _itemId)
    {
        return InventTable::find(_itemId).productDimensionGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemTypeByProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a product type to an item type.
    /// </summary>
    /// <param name="_productType">
    /// An <c>EcoResProductType</c> enumeration value.
    /// </param>
    /// <returns>
    /// An <c>ItemType</c> enumeration value.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An <c>EcoResProductType</c> enumeration value cannot be converted.
    /// </exception>
    public static ItemType itemTypeByProductType(EcoResProductType _productType)
    {
        switch (_productType)
        {
            case EcoResProductType::Item:
                return ItemType::Item;

            case EcoResProductType::Service:
                return ItemType::Service;

            default:
                // "Invalid argument."
                throw error("@SYS111577");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the open main table functionality for an item.
    /// </summary>
    /// <param name="_itemId">The ID of an item.</param>
    /// <param name="_openMode">The open mode.</param>
    public static void jumpRefItemId(ItemId _itemId, OpenMode _openMode = OpenMode::Auto)
    {
        InventTable     inventTable;
        MenuFunction    menuFunction;
        Args            args = new Args();

        if (_itemId)
        {
            inventTable = InventTable::find(_itemId);
        }

        if (!inventTable)
        {
            return;
        }

        args.record(inventTable);

        menuFunction = new MenuFunction(menuitemDisplayStr(EcoResProductDetailsExtended), MenuItemType::Display);
        menuFunction.openMode(_openMode);
        menuFunction.formViewOption(FormViewOption::Details);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefItemIdProductInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the open product information dialog functionality for an item.
    /// </summary>
    /// <param name="_itemId">The ID of an item.</param>
    public static void jumpRefItemIdProductInformation(ItemId _itemId)
    {
        if (_itemId)
        {
            InventTable inventTable = InventTable::find(_itemId);

            if (inventTable)
            {
                Args args = new Args();
                args.record(inventTable);

                new MenuFunction(menuItemDisplayStr(EcoResProductInformation), MenuItemType::Display).run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a lookup on the <c>BOMVersio</c> table.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///    The <c>FormStringControl</c> control that the lookup will be attached to.
    /// </param>
    /// <param name="_itemId">
    ///    The item that is used to filter the lookup.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The inventory dimensions that are used to filter the lookup.
    /// </param>
    /// <param name="_onlyApproved">
    ///    A Boolean value that indicates if only approved BOM versions are shown in the lookup; optional.
    /// </param>
    /// <param name="_onlyActive">
    ///    A Boolean value that indicates if only active BOM versions are shown in the lookup; optional.
    /// </param>
    public static void lookupBOMId(
        FormStringControl   _lookupCtrl,
        ItemId              _itemId,
        InventDim           _inventDimCriteria,
        boolean             _onlyApproved  = false,
        boolean             _onlyActive    = false)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(BOMVersion));
        QueryBuildRange         queryBuildRange;

        InventDimParm           inventDimParm;
        inventDimParm.initDimBOMRouteVersion(InventDimGroupSetup::newItemId(_itemId));

        if (_itemId)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(BOMVersion, ItemId));
            queryBuildRange.value(queryValue(_itemId));
        }

        if (_onlyApproved && isConfigurationkeyEnabled(configurationKeyNum(BOMApprove)))
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(BOMVersion, Approved));
            queryBuildRange.value(queryValue(NoYes::Yes));
        }

        if (_onlyActive)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(BOMVersion, Active));
            queryBuildRange.value(queryValue(NoYes::Yes));
        }

        queryBuildDataSource.addSelectionField(fieldNum(BOMVersion, InventDimId)); // needed below for the addLookupMethod

        InventTable::lookupAddInventDimDS(queryBuildDataSource, _inventDimCriteria, inventDimParm);
        
        queryBuildDataSource.addSortField(fieldNum(BOMVersion, bomId), SortOrder::Descending);

        SysTableLookup sysTableLookup = InventTable::initializeBOMLookup(_lookupCtrl, inventDimParm, _itemId);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBOMLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>SysTableLookup</c> instance used to perform a lookup on the <c>BOMVersio</c> table.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///    The <c>FormStringControl</c> control that the lookup will be attached to.
    /// </param>
    /// <param name = "_inventDimParm">
    ///     The <c>inventDimParm</c> record buffer related to the BOM version record.
    /// </param>
    /// <param name="_itemId">
    ///    The item that is used to filter the lookup.
    /// </param>
    /// <returns></returns>
    protected static SysTableLookup initializeBOMLookup(FormStringControl _lookupCtrl, InventDimParm _inventDimParm, ItemId _itemId)
    {
        SysTableLookup  sysTableLookup  = SysTableLookup::newParameters(tableNum(BOMVersion), _lookupCtrl);
        ListEnumerator  enumerator      = InventDim::dimFieldListEnumerator();
        FieldId         dimFieldId;
        FieldId         dimParmFieldId;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            if (_inventDimParm.(dimParmFieldId))  //dimension is active for the item
            {
                if (tableHasInstanceMethod(new DictTable(tableNum(BOMVersion)), fieldId2name(tableNum(InventDim), dimFieldId)))
                {
                    sysTableLookup.addLookupMethod(fieldId2name(tableNum(InventDim), dimFieldId));
                }
            }
        }

        sysTableLookup.addLookupfield(fieldNum(BOMVersion, bomId));
        sysTableLookup.addLookupfield(fieldNum(BOMVersion, Name));

        sysTableLookup.addLookupfield(fieldNum(BOMVersion, FromDate));
        sysTableLookup.addLookupfield(fieldNum(BOMVersion, ToDate));

        if (InventTable::find(_itemId).isFormulaAllowed())
        {
            sysTableLookup.addLookupfield(fieldNum(BOMVersion, PmfBatchSize));
        }
        else
        {
            sysTableLookup.addLookupfield(fieldNum(BOMVersion, FromQty));
        }

        sysTableLookup.addLookupfield(fieldNum(BOMVersion, Active));
        sysTableLookup.addLookupfield(fieldNum(BOMVersion, Approved));
        sysTableLookup.addLookupfield(fieldNum(BOMVersion, Approver));

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBOMItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table containing only BOM items.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupBOMItemId(FormStringControl _ctrl)
    {
        InventItemIdLookup::lookupBOMItemId(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBulkPackItemForSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table containing only items compatible with the containerized packaging.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupBulkPackItemForSetup(
        FormStringControl   _ctrl)
    {
        InventItemIdLookup::lookupBulkPackItemForSetup(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFormulaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>BOMVersion</c> table containing only formulas.
    /// </summary>
    /// <param name="_lookupCtrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item to filter the records with.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// The inventory dimension filter criteria.
    /// </param>
    public static void lookupFormulaId(
        FormStringControl   _lookupCtrl,
        ItemId              _itemId,
        InventDim           _inventDimCriteria)
    {
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(BOMVersion));

        InventDimParm inventDimParm;
        inventDimParm.initDimBOMRouteVersion(InventDimGroupSetup::newItemId(_itemId));

        InventTable::lookupAddInventDimDS(queryBuildDataSource, _inventDimCriteria, inventDimParm);

        if (!_itemId)
        {
            throw error("@SYS23094");
        }

        if (_itemId)
        {
            queryBuildDataSource.addRange(fieldNum(BOMVersion, ItemId)).value(queryValue(_itemId));
        }

        new InventLookup(_lookupCtrl, query, formStr(PmfFormulaLookupSimple)).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFormulaItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table containing only BOM items.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_includeCoProducts">
    /// If set to true, items of type co product are included in lookup.
    /// </param>
    /// <param name="_itemId">
    /// <c>ItemId</c> used in filtering the lookup.
    /// </param>
    /// <remarks>
    /// Performs a lookup of items with item type of formula.  If the item with _itemId is a co-product,
    /// only items that have formulas with the _itemId as a co-product are included in the lookup.
    /// </remarks>
    public static void lookupFormulaItemId(
        FormStringControl   _ctrl,
        boolean             _includeCoProducts = false,
        ItemId              _itemId = '')
    {
        InventItemIdLookup::lookupFormulaItemId(_ctrl, _includeCoProducts, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table, optional show only WHS enabled items
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_showOnlyWHSEnabled">
    /// A Boolean value that indicates whether to show only WHS enabled items; optional.
    /// </param>
    [Replaceable]
    public static void lookupItem(FormStringControl _ctrl, boolean _showOnlyWHSEnabled = false)
    {
        InventItemIdLookup::lookupItem(_ctrl, _showOnlyWHSEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemByTrackingDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and displays a lookup from which the user can select for items tracked by a specific dimension only.
    /// </summary>
    /// <param name="_control">
    ///    The calling form control.
    /// </param>
    /// <param name="_inventDimTrackingFieldId">
    ///    The inventory dimension tracking field ID that must be an active dimension for the items shown in the lookup; optional.
    /// </param>
    /// <remarks>
    ///    If <paramref name="_inventDimTrackingFieldId"/> is not specified then it defaults to the inventory batch dimension field.
    /// </remarks>
    public static void lookupItemByTrackingDimension(FormStringControl _control, FieldId _inventDimTrackingFieldId = fieldNum(InventDim, InventBatchId))
    {
        InventItemIdLookup::lookupItemByTrackingDimension(_control, _inventDimTrackingFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdAsset_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find asset items.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    /// <param name="_showAsset">
    ///    true if the asset group ID should be displayed; otherwise, false.
    /// </param>
    public static void lookupItemIdAsset_RU(FormStringControl _ctrl,
                                                   boolean           _showAsset = true)
    {
        InventItemIdLookup::lookupItemIdAsset_RU(_ctrl, _showAsset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanBeProduced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens items lookup for items that can be produced.
    /// </summary>
    /// <param name = "_ctrl">Control from which to open the lookup.</param>
    public static void lookupItemIdCanBeProduced(FormStringControl _ctrl)
    {
        InventItemIdLookup::lookupItemIdCanBeProduced(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanBeTracked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and displays a lookup from which the user can select for trackable items only
    /// </summary>
    /// <param name="_ctrl">
    ///    The calling form control
    /// </param>
    public static void lookupItemIdCanBeTracked(FormStringControl  _ctrl)
    {
        InventItemIdLookup::lookupItemIdCanBeTracked(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanBeTransferred</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds items that can be transferred.
    /// </summary>
    /// <param name="_lookupctrl">
    ///    The <c>FormStringControl</c> object where the lookup values should be displayed.
    /// </param>
    /// <remarks>
    ///    Whether an item can be transferred depends on its item type, and is determined by the return value of the <c>InventItemType.canBeTransferred</c> method.
    /// </remarks>
    public static void lookupItemIdCanBeTransferred(FormStringControl _lookupctrl)
    {
        InventItemIdLookup::lookupItemIdCanBeTransferred(_lookupctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanHaveBOMFormula</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find BOM and formula items.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void lookupItemIdCanHaveBOMFormula(
        FormStringControl _ctrl)
    {
        InventItemIdLookup::lookupItemIdCanHaveBOMFormula(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdCanHaveCoProdBOMFormula</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find BOM items, formula items and co-products.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void lookupItemIdCanHaveCoProdBOMFormula(
        FormStringControl _ctrl)
    {
        InventItemIdLookup::lookupItemIdCanHaveCoProdBOMFormula(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdDefaultOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a lookup for selecting items with the specified default order type.
    /// </summary>
    /// <param name="_ctrl">
    ///     The string control calling the lookup.
    /// </param>
    /// <param name="_poType">
    ///     The default order type to search for.
    /// </param>
    /// <param name="_stockedProduct">
    ///     A <c>NoYes</c> value that specifies the stocking policy for the item.
    /// </param>
    public static void lookupItemIdDefaultOrderType(FormStringControl _ctrl, ReqPOType _poType, NoYes _stockedProduct)
    {
        InventItemIdLookup::lookupItemIdDefaultOrderType(_ctrl, _poType, _stockedProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens item lookup for given Item Model group.
    /// </summary>
    /// <param name = "_ctrl">Control for which lookup is opened.</param>
    /// <param name = "_itemGroupId">Item Group Id</param>
    /// <param name = "_showBOM">Whether BOMs are included.</param>
    /// <param name = "_showRoute">Whether Routes are included.</param>
    /// <param name = "_showFormula">Whether Formulas are included.</param>
    public static void lookupItemIdGroup(
        FormStringControl   _ctrl,
        ItemGroupId         _itemGroupId,
        boolean             _showBOM     = false,
        boolean             _showRoute   = false,
        boolean             _showFormula = false
        )
    {
        InventItemIdLookup::lookupItemIdGroup(_ctrl, _itemGroupId, _showBOM, _showRoute, _showFormula);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens items lookup for given item types.
    /// </summary>
    /// <param name = "_ctrl">Control for which the lookup is opened</param>
    /// <param name = "_filterStr">Item Id filter.</param>
    /// <param name = "_itemTypes">Item Types filter.</param>
    public static void lookupItemIdType(
        FormStringControl   _ctrl,
        str                 _filterStr,
        Set                 _itemTypes)
    {
        InventItemIdLookup::lookupItemIdType(_ctrl, _filterStr, _itemTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdTypePricingTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find items that can be used for a commodity pricing template.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    /// <param name="_filterStr">
    ///    A filter expression for the item ID.
    /// </param>
    /// <param name="_itemTypes">
    ///    A list of product types to filter the result list.
    /// </param>
    public static void lookupItemIdTypePricingTemplate(
        FormStringControl   _ctrl,
        str                 _filterStr,
        Set                 _itemTypes)
    {
        InventItemIdLookup::lookupItemIdTypePricingTemplate(_ctrl, _filterStr, _itemTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemsForQuotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the items which belongs to a catalog for a specified <c>MCRSourceID</c> source code.
    /// </summary>
    /// <param name="_callingControl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_sourceID">
    /// A specified <c>MCRSourceID</c> source code.
    /// </param>
    static void lookupItemsForQuotes(FormControl _callingControl, MCRSourceID _sourceID)
    {
        InventItemIdLookup::lookupItemsForQuotes(_callingControl, _sourceID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemTypeCoByProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find co-products and by-products.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void lookupItemTypeCoByProducts(FormStringControl _ctrl)
    {
        InventItemIdLookup::lookupItemTypeCoByProducts(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPmfBulkItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds bulk items for the specified BOMId.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    /// <param name="_bomId">
    ///    The ID of the BOM.
    /// </param>
    /// <param name="_packedItemId">
    ///     The ID of the packed item.
    /// </param>
    public static void lookupPmfBulkItem(
        FormStringControl   _lookupCtrl,
        BOMId               _bomId,
        ItemId              _packedItemId
        )
    {
        InventItemIdLookup::lookupPmfBulkItem(_lookupCtrl, _bomId, _packedItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPmfPlanningItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a lookup form for formula or planning items that can be used for planning a given co-product item.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control that initiated this lookup.
    /// </param>
    /// <param name="_coProductId">
    /// The co-product item id for which this lookup is for.
    /// </param>
    /// <remarks>
    /// The lookup that this creates will show only formula or planning items that can
    /// be used as a planning item for <paramref name="_coProductId"/>. If
    /// the planning item is defined for the co-product then just that
    /// formula item will be shown. Otherwise, this will show all the formula
    /// items that have the co-product on any of its BOM versions, ignoring the
    /// active status of those BOM versions.
    /// </remarks>
    public static void lookupPmfPlanningItem(
        FormStringControl   _ctrl,
        ItemId              _coProductId)
    {
        InventItemIdLookup::lookupPmfPlanningItem(_ctrl, _coProductId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs a lookup on the <c>RouteVersion</c> table.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///    The <c>FormStringControl</c> control that the lookup will be attached to.
    /// </param>
    /// <param name="_itemId">
    ///    The item that is used to filter the lookup.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The inventory dimensions that are used to filter the lookup.
    /// </param>
    /// <param name="_onlyApproved">
    ///    A Boolean value that indicates if only approved route versions are shown in the lookup; optional.
    /// </param>
    /// <param name="_onlyActive">
    ///    A Boolean value that indicates if only active route versions are shown in the lookup; optional.
    /// </param>
    public static void lookupRouteId(
        FormStringControl   _lookupCtrl,
        ItemId              _itemId,
        InventDim           _inventDimCriteria,
        boolean             _onlyApproved  = false,
        boolean             _onlyActive    = false)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(RouteVersion), _lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(RouteVersion));
        QueryBuildRange         queryBuildRange;

        QueryBuildDataSource    qbdsDim;

        InventDimParm           inventDimParm;
        ListEnumerator          enumerator  = InventDim::dimFieldListEnumerator();
        FieldId                 dimFieldId;
        FieldId                 dimParmFieldId;

        inventDimParm.initDimBOMRouteVersion(InventDimGroupSetup::newItemId(_itemId));

        if (_itemId)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(RouteVersion, ItemId));
            queryBuildRange.value(queryValue(_itemId));
        }

        if (_onlyApproved && isConfigurationkeyEnabled(configurationKeyNum(RouteApprove)))
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(RouteVersion, Approved));
            queryBuildRange.value(queryValue(NoYes::Yes));
        }

        if (_onlyActive)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(RouteVersion, Active));
            queryBuildRange.value(queryValue(NoYes::Yes));
        }

        queryBuildDataSource.addSelectionField(fieldNum(RouteVersion, InventDimId)); // needed below for the addLookupMethod

        qbdsDim = queryBuildDataSource.addDataSource(tableNum(InventDim));
        qbdsDim.joinMode(JoinMode::InnerJoin);
        qbdsDim.relations(true);

        //Adding inventory dimensions
        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            if (inventDimParm.(dimParmFieldId))  //dimension is active for the item
            {
                if (_inventDimCriteria.(dimFieldId)) //limitation is specified
                {
                    qbdsDim.addRange(dimFieldId).value(queryValue(_inventDimCriteria.(dimFieldId)));
                    qbdsDim.addRange(dimFieldId).value(SysQuery::valueEmptyString());
                    qbdsDim.addSortField(dimFieldId);
                }

                if (tableHasInstanceMethod(new DictTable(tableNum(RouteVersion)), fieldId2name(tableNum(InventDim), dimFieldId)))
                {
                    sysTableLookup.addLookupMethod(fieldId2name(tableNum(InventDim), dimFieldId));
                }
            }
        }

        InventTable::addFieldsToRouteIdLookup(sysTableLookup);

        queryBuildDataSource.addSortField(fieldNum(RouteVersion, RouteId), SortOrder::Descending);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToRouteIdLookup</Name>
				<Source><![CDATA[
    protected static void addFieldsToRouteIdLookup(SysTableLookup _sysTableLookup)
    {
        _sysTableLookup.addLookupfield(fieldNum(RouteVersion, RouteId));
        _sysTableLookup.addLookupfield(fieldNum(RouteVersion, Name));
        _sysTableLookup.addLookupfield(fieldNum(RouteVersion, FromDate));
        _sysTableLookup.addLookupfield(fieldNum(RouteVersion, ToDate));
        _sysTableLookup.addLookupfield(fieldNum(RouteVersion, FromQty));
        _sysTableLookup.addLookupfield(fieldNum(RouteVersion, Active));
        _sysTableLookup.addLookupMethod(tableMethodStr(RouteVersion, approverPersonnelNumber));
        _sysTableLookup.addLookupfield(fieldNum(RouteVersion, Approved));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindByContinuitySchedId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventTable</c> record via the passed continuity schedule ID.
    /// </summary>
    /// <param name="_schedId">
    /// The continuity schedule ID used to find the inventory table record.
    /// </param>
    /// <param name="update">
    /// A boolean that determines whether to select the <c>InventTable</c> record
    /// for update; optional.
    /// </param>
    /// <returns>
    /// The <c>InventTable</c> record found via the passed continuity schedule ID.
    /// </returns>
    public static InventTable mcrFindByContinuitySchedId(MCRContinuityScheduleId _schedId,
                                                        boolean update = false)
    {
        InventTable  inventTable;
        MCRInventTable mcrInventTable;

        inventTable.selectForUpdate(update);

        if (_schedId)
        {
            select firstonly inventTable
                exists join mcrInventTable
                    where mcrInventTable.InventTable == inventTable.RecId
                        && mcrInventTable.ContinuityScheduleID == _schedId;
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindUpcomingProdOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first upcoming scheduled production order for a given item and item dimensions,
    /// whose scheduled end date is after today.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> of the item used to search for the upcoming scheduled production order.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions used for finding the upcoming scheduled production order.
    /// </param>
    /// <param name="_inventDimParm">
    /// The <c>InventDimParm</c> table record to be used for finding the upcoming scheduled production order.
    /// </param>
    /// <returns>
    /// The first upcoming scheduled production order for a given item and item dimensions.
    /// </returns>
    public static ProdTable mcrFindUpcomingProdOrder(ItemId _itemId, InventDim _inventDim, InventDimParm _inventDimParm)
    {
        ProdTable prodTable;
        InventDim inventDim;

        select firstonly prodTable
            order by SchedEnd asc
            where  prodTable.ItemId == _itemId
                && (prodTable.ProdStatus == ProdStatus::Created
                    || prodTable.ProdStatus == ProdStatus::CostEstimated
                    || prodTable.ProdStatus == ProdStatus::Scheduled
                    || prodTable.ProdStatus == ProdStatus::Released
                    || prodTable.ProdStatus == ProdStatus::StartedUp)
                && prodTable.QtySched > 0
                && prodTable.SchedEnd > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
            #InventDimJoin(prodTable.InventDimId, inventDim, _inventDim, _inventDimParm);

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindUpcomingPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first upcoming open purchase line for a given item and item
    /// dimensions, whose delivery date is after today.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> of the item used to search for the upcoming open purchase lines.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions used for finding the upcoming open purchase lines.
    /// </param>
    /// <param name="_inventDimParm">
    /// The <c>InventDimParm</c> table record to be used for finding the upcoming open purchase lines.
    /// </param>
    /// <returns>
    /// The first upcoming open purchase line for a given item and item
    /// dimensions, whose delivery date is after today.
    /// </returns>
    public static PurchLine mcrFindUpcomingPurchLine(ItemId _itemId, InventDim _inventDim, InventDimParm _inventDimParm)
    {
        PurchLine           purchLine;
        InventTransOrigin   purchInventTransOrigin;
        InventTrans         purchInventTrans;
        InventDim           inventDim;

        select firstonly purchLine
            order by DeliveryDate asc
            exists join purchInventTransOrigin
            where purchInventTransOrigin.ItemId == _itemId
                && purchInventTransOrigin.InventTransId == purchLine.InventTransId
                && purchInventTransOrigin.ReferenceCategory == InventTransType::Purch
                && purchLine.DeliveryDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
            exists join purchInventTrans
            where  purchInventTrans.InventTransOrigin == purchInventTransOrigin.RecId
                && purchInventTrans.StatusReceipt == StatusReceipt::Ordered
                && purchInventTrans.Qty > 0
            #InventDimJoin(purchInventTrans.InventDimId, inventDim, _inventDim, _inventDimParm);

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetUpcomingInventAvailDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first upcoming date after today that the item with given item
    /// dimensions will become available.
    /// </summary>
    /// <param name="_inventTable">
    /// The item used to search for the upcoming date after today that the item with given item
    /// dimensions and will become available.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions used for finding the upcoming date after today that the item with given item
    /// dimensions and will become available.
    /// </param>
    /// <param name="_inventDimParm">
    /// The <c>InventDimParm</c> table record to be used for finding the upcoming date after today that the item with
    /// given item  dimensions and will become available.
    /// </param>
    /// <returns>
    /// The first upcoming date after today that the item with given item
    /// dimensions and will become available.
    /// </returns>
    public static TransDate mcrGetUpcomingInventAvailDate(InventTable _inventTable, InventDim _inventDim, InventDimParm _inventDimParm)
    {
        if (_inventTable.isProducedByDefault())
        {
            return InventTable::MCRFindUpcomingProdOrder(_inventTable.ItemId, _inventDim, _inventDimParm).SchedEnd;
        }
        else if (_inventTable.ItemType == ItemType::Item)
        {
            return InventTable::MCRFindUpcomingPurchLine(_inventTable.ItemId, _inventDim, _inventDimParm).DeliveryDate;
        }
        else if (_inventTable.ItemType == ItemType::Service)
        {
            // A service item should be marked as FTC exempt.
            return datenull();
        }
        else
        {
            throw error(strfmt("@SYS19306", funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrIsItemContinuity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether or not the item is a continuity item.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> of the item to check for a continuity schedule.
    /// </param>
    /// <returns>
    /// true if the item is a continuity item; otherwise, false.
    /// </returns>
    public static boolean mcrIsItemContinuity(Itemid _itemId)
    {
        MCRInventTable  mcrInventTable = MCRInventTable::findByItemId(_itemId);

        if (mcrInventTable && mcrInventTable.ContinuityScheduleID)
        {
            return  true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrValidateItemIdFromSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the item that are part of the catalog associated with the specified source code.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> of the item to check for a continuity schedule.
    /// </param>
    /// <param name="_sourceId">
    /// A specified <c>MCRSourceID</c> source code.
    /// </param>
    /// <returns>
    /// true if the item is associated with the specified source code; otherwise, false.
    /// </returns>
    public static boolean mcrValidateItemIdFromSourceId(ItemId _itemId, MCRSourceID _sourceId)
    {
        InventTable             inventTable;
        CatalogProduct          catalogProduct;
        MCRSourceCodeSetup      mcrSourceCodeSetup;

        if (_sourceId)
        {
            select firstonly inventTable
                    where inventTable.ItemId == _itemId
                join mcrSourceCodeSetup
                    where mcrSourceCodeSetup.SourceID == _sourceId
                join catalogProduct
                    where catalogProduct.Product == inventTable.Product
                        && catalogProduct.Catalog == mcrSourceCodeSetup.Catalog;
            
            if (!inventTable)
            {
                return false;
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLookupContinuityItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up continuity schedules and continuity customer information lines
    /// on items that are continuity.
    /// </summary>
    /// <param name="_ctrl">
    /// The form control that fired the lookup.
    /// </param>
    public static void mcrLookupContinuityItems(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        queryBuildDataSource    mcrInventTableQueryBuildDataSource;

        sysTableLookup.addLookupfield(fieldNum(InventTable, itemId));
        sysTableLookup.addLookupfield(fieldNum(InventTable, Product));
        sysTableLookup.addLookupMethod(tablemethodstr(InventTable, defaultProductName));
        sysTableLookup.addLookupMethod(tablemethodstr(InventTable, itemGroupId));
        mcrInventTableQueryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(MCRInventTable));
        mcrInventTableQueryBuildDataSource.relations(true);
        mcrInventTableQueryBuildDataSource.joinMode(JoinMode::InnerJoin);
        mcrInventTableQueryBuildDataSource.addRange(fieldnum(MCRInventTable, ContinuityScheduleId)).value(sysQuery::valueNotEmptyString());

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLookupItemIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up basic item information.
    /// </summary>
    /// <param name="_ctrl">
    /// The form control that fired the lookup.
    /// </param>
    public static void mcrLookupItemIds(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        Query                   query = new Query();

        query.addDataSource(tableNum(InventTable));

        sysTableLookup.addLookupfield(fieldNum(InventTable, itemId));
        sysTableLookup.addLookupfield(fieldNum(InventTable, Product));
        sysTableLookup.addLookupMethod(tablemethodstr(InventTable, defaultProductName));
        sysTableLookup.addLookupMethod(tablemethodstr(InventTable, itemGroupId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLookupNonContinuityItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the continuity schedules and continuity customer information lines
    /// on items that are continuity and cannot be added at the line level.
    /// </summary>
    /// <param name="_ctrl">
    /// The form control that fired the lookup.
    /// </param>
    public static void mcrLookupNonContinuityItems(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        queryBuildDataSource    mcrInventTableQueryBuildDataSource;

        sysTableLookup.addLookupfield(fieldNum(InventTable, itemId));
        sysTableLookup.addLookupfield(fieldNum(InventTable, Product));
        sysTableLookup.addLookupMethod(tablemethodstr(InventTable, defaultProductName));
        sysTableLookup.addLookupMethod(tablemethodstr(InventTable, itemGroupId));
        mcrInventTableQueryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(MCRInventTable));
        mcrInventTableQueryBuildDataSource.relations(true);
        mcrInventTableQueryBuildDataSource.joinMode(JoinMode::InnerJoin);
        mcrInventTableQueryBuildDataSource.addRange(fieldnum(MCRInventTable, ContinuityScheduleID)).value(sysQuery::valueEmptyString());

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrValidStartEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the start and end dates are valid.
    /// </summary>
    /// <param name="_ItemId">
    /// The item's ID for which this method validates start and end dates.
    /// </param>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record for which this method validates start and end dates.
    /// </param>
    /// <returns>
    /// true if the start and end dates are valid; otherwise, false.
    /// </returns>
    public static NoYes mcrValidStartEndDate(ItemId _ItemId, InventTable _inventTable = null)
    {
        InventTable inventTableLocal = _inventTable;
        MCRInventTable mcrInventTableLocal;

        if (!inventTableLocal)
        {
            inventTableLocal = InventTable::find(_itemId);
        }
        mcrInventTableLocal = inventTableLocal.mcrInventTable();

        if ((((DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) > mcrInventTableLocal.SellEndDate)
            && (mcrInventTableLocal.SellEndDate != datenull()))
            || ((DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) < mcrInventTableLocal.SellStartDate)
            && (mcrInventTableLocal.SellStartDate != datenull())) ) )
        {
            return NoYes::No;
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelGroupByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an item model group for an item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of an item.
    /// </param>
    /// <param name="_dataAreaId">
    /// The ID of the company in which the item exists.
    /// </param>
    /// <returns>
    /// An item model group.
    /// </returns>
    public static InventModelGroup modelGroupByItemId(ItemId _itemId, DataAreaId _dataAreaId = curExt2dataareaid(tableNum(InventTable)))
    {
        return InventModelGroupItem::modelGroupByItemIdLegalEntity(_itemId, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelGroupIdByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an item model group ID for an item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of an item.
    /// </param>
    /// <param name="_dataAreaId">
    /// The ID of company in which the item exists.
    /// </param>
    /// <returns>
    /// An item model group ID.
    /// </returns>
    public static InventModelGroupId modelGroupIdByItemId(ItemId _itemId, DataAreaId _dataAreaId = curExt2dataareaid(tableNum(InventTable)))
    {
        return InventModelGroupItem::modelGroupId(_itemId, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public static Name name(
        ItemId      _itemId,
        InventDim   _inventDim = null,
        LanguageId  _languageId = null)
    {
        if (_inventDim.InventDimId)
        {
            if (!_languageId)
            {
                _languageId = CompanyInfo::languageId();
            }
            return InventTable::find(_itemId).productName(_languageId, _inventDim.InventDimId);
        }
        return InventTable::find(_itemId).defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsFillDefaultBatchAttribforItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of batch attributes for an item.
    /// </summary>
    /// <param name="_itemId">
    /// Item for which to get batch attributes.
    /// </param>
    /// <param name="_custAcct">
    /// Customer account to get the list of batch attributes.
    /// </param>
    /// <returns>
    /// List of batch attributes for the item in a temporary table.
    /// </returns>
    public static TmpPdsBatchAttribSelect  pdsFillDefaultBatchAttribforItem(
        ItemId      _itemId,
        CustAccount _custAcct = '')
    {
        UnitOfMeasureDecimalPrecision   decimals;
        TmpPdsBatchAttribSelect         tmpAttrSel;
        PdsBatchAttribByItem            itemAttrs;
        PdsBatchAttribByAttribGroup     groupAttrs;
        boolean                         attrsFound;
        PdsBatchAttrib                  pdsBatchAttrib;
        #define.emptyStr('')

        decimals = PdsBatchAttrib::realTypeDecimals();

        if (#PdsBatchAttribEnabled)
        {
            itemAttrs.recordLevelSecurity(true);

            while select PdsBatchAttribRelation, PdsBatchAttribMin, PdsBatchAttribMax
                from itemAttrs
                where  itemAttrs.PdsBatchAttribItemId == _itemId
                    && itemAttrs.PdsBatchAttribCode   == TableGroupAll::Table
            {
                select firstonly tmpAttrSel
                    where tmpAttrSel.PdsBatchAttribId == itemAttrs.PdsBatchAttribRelation;

                if (!tmpAttrSel.RecId)
                {
                    tmpAttrSel.clear();
                    tmpAttrSel.PdsBatchAttribId     = itemAttrs.PdsBatchAttribRelation;
                    tmpAttrSel.PdsBatchAttribOpr1   = PdsBatchAttribOpr::MoreEqual;
                    tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::LessEqual;

                    switch (PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId).PdsBatchAttribType)
                    {
                        case PdsBatchAttribType::Enumerate :
                            tmpAttrSel.PdsBatchAttribValue1 =
                                (select firstonly PdsAttribEnumValue
                                    from pdsBatchAttribEnumValues
                                    order by PdsAttribEnumSeq asc
                                    where pdsBatchAttribEnumValues.PdsBatchAttribId
                                            == tmpAttrSel.PdsBatchAttribId)
                                .PdsAttribEnumValue;

                            tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                            tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
                            break;

                        case PdsBatchAttribType::String :
                            tmpAttrSel.PdsBatchAttribValue1 = #emptyStr;
                            tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                            tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
                            break;

                        case PdsBatchAttribType::Date :
                            tmpAttrSel.PdsBatchAttribValue1 = PdsBatchAttrib::date2StorageType(dateNull());
                            tmpAttrSel.PdsBatchAttribValue2 = PdsBatchAttrib::date2StorageType( maxDate());
                            break;

                        case PdsBatchAttribType::Integer :
                        //Fallthrough
                        case PdsBatchAttribType::Realnumber :
                            tmpAttrSel.PdsBatchAttribValue1 = num2str(itemAttrs.PdsBatchAttribMin, 0, decimals, 1, 0);
                            tmpAttrSel.PdsBatchAttribValue2 = num2str(itemAttrs.PdsBatchAttribMax, 0, decimals, 1, 0);
                            break;
                    }

                    tmpAttrSel.insert();
                    attrsFound = true;
                }
            }

            //Check group records
            groupAttrs.recordLevelSecurity(true);

            while select RecId
                from itemAttrs
                where  itemAttrs.PdsBatchAttribItemId   == _itemId
                    && itemAttrs.PdsBatchAttribCode     == TableGroupAll::GroupId
                join PdsBatchAttribAttribId, PdsBatchAttribMin, PdsBatchAttribMax
                from groupAttrs
                where groupAttrs.PdsBatchAttribGroupId  == itemAttrs.PdsBatchAttribRelation
            {
                select firstonly tmpAttrSel
                    where tmpAttrSel.PdsBatchAttribId   == groupAttrs.PdsBatchAttribAttribId;

                if (!tmpAttrSel.RecId)
                {
                    tmpAttrSel.clear();
                    tmpAttrSel.PdsBatchAttribId     = groupAttrs.PdsBatchAttribAttribId;
                    tmpAttrSel.PdsBatchAttribOpr1   = PdsBatchAttribOpr::MoreEqual;
                    tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::LessEqual;

                    switch (PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId).PdsBatchAttribType)
                    {
                        case PdsBatchAttribType::Enumerate :
                            tmpAttrSel.PdsBatchAttribValue1 =
                                (select firstonly PdsAttribEnumValue
                                    from pdsBatchAttribEnumValues
                                    order by PdsAttribEnumSeq asc
                                    where pdsBatchAttribEnumValues.PdsBatchAttribId == tmpAttrSel.PdsBatchAttribId)
                                .PdsAttribEnumValue;
                            tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                            tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
                            break;

                        case PdsBatchAttribType::String :
                            tmpAttrSel.PdsBatchAttribValue1 = #emptyStr;
                            tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                            tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
                            break;

                        case PdsBatchAttribType::Date :
                            tmpAttrSel.PdsBatchAttribValue1 = PdsBatchAttrib::date2StorageType(dateNull());
                            tmpAttrSel.PdsBatchAttribValue2 = PdsBatchAttrib::date2StorageType(maxDate());
                            break;

                        case PdsBatchAttribType::Integer :
                        //Fallthrough
                        case PdsBatchAttribType::Realnumber :
                            tmpAttrSel.PdsBatchAttribValue1 = num2str(groupAttrs.PdsBatchAttribMin, 0, decimals, 1, 0);
                            tmpAttrSel.PdsBatchAttribValue2 = num2str(groupAttrs.PdsBatchAttribMax, 0, decimals, 1, 0);
                            break;
                    }

                    tmpAttrSel.insert();
                    attrsFound = true;
                }
            }

            itemAttrs.recordLevelSecurity(true);

            select firstonly RecId from itemAttrs
                where itemAttrs.PdsBatchAttribItemId == _itemId
                    && itemAttrs.PdsBatchAttribCode   == TableGroupAll::All;

            if (itemAttrs.RecId)
            {
                while select pdsBatchAttrib
                {
                    select firstonly tmpAttrSel
                        where tmpAttrSel.PdsBatchAttribId == pdsBatchAttrib.PdsBatchAttribId;

                    if (!tmpAttrSel.RecId)
                    {
                        tmpAttrSel.clear();
                        tmpAttrSel.PdsBatchAttribId     = pdsBatchAttrib.PdsBatchAttribId;
                        tmpAttrSel.PdsBatchAttribOpr1   = PdsBatchAttribOpr::MoreEqual;
                        tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::LessEqual;

                        switch (PdsBatchAttrib::find(tmpAttrSel.PdsBatchAttribId).PdsBatchAttribType)
                        {
                            case PdsBatchAttribType::Enumerate :
                                tmpAttrSel.PdsBatchAttribValue1 =
                                    (select firstonly PdsAttribEnumValue
                                        from pdsBatchAttribEnumValues
                                        order by PdsAttribEnumSeq asc
                                        where pdsBatchAttribEnumValues.PdsBatchAttribId
                                                == tmpAttrSel.PdsBatchAttribId)
                                        .PdsAttribEnumValue;

                                tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                                tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
                                break;

                            case PdsBatchAttribType::String :
                                tmpAttrSel.PdsBatchAttribValue1 = #emptyStr;
                                tmpAttrSel.PdsBatchAttribOpr2   = PdsBatchAttribOpr::empty;
                                tmpAttrSel.PdsBatchAttribValue2 = #emptyStr;
                                break;

                            case PdsBatchAttribType::Date :
                                tmpAttrSel.PdsBatchAttribValue1 = PdsBatchAttrib::date2StorageType(dateNull());
                                tmpAttrSel.PdsBatchAttribValue2 = PdsBatchAttrib::date2StorageType( maxDate());
                                break;

                            case PdsBatchAttribType::Integer :
                            case PdsBatchAttribType::Realnumber :
                                tmpAttrSel.PdsBatchAttribValue1 = num2str(pdsBatchAttrib.PdsBatchAttribMin, 0, decimals, 1, 0);
                                tmpAttrSel.PdsBatchAttribValue2 = num2str(pdsBatchAttrib.PdsBatchAttribMax, 0, decimals, 1, 0);
                                break;
                        }
                        tmpAttrSel.insert();
                        attrsFound = true;
                    }
                }
            }

            if (attrsFound
                && _custAcct != ''
                && PdsBatchAttribByItemCustomer::existAnyCustRelation(_custAcct, _itemId)
                )
            {
                tmpAttrSel = PdsBatchAttribByItemCustomer::updateAttrSelList(tmpAttrSel, _itemId, _custAcct);
            }
        }

        return tmpAttrSel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsFindBaseAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the Base Batch Attribute for a given item.
    /// </summary>
    /// <param name="_itemId">Item Identification that is searched.</param>
    /// <returns>
    /// a PdsBatchAttribByItem record, for the base attribute if one is defined, an empty record
    /// </returns>
    public static PdsBatchAttribByItem pdsFindBaseAttribute(ItemId _itemId)
    {
        InventTable             inventTable;
        PdsBatchAttribByItem    attrib;

        inventTable = InventTable::find(_itemId);
        if (inventTable.pdsBaseAttributeId)
        {
            attrib = PdsBatchAttribByItem::findItemId(_itemId, inventTable.pdsBaseAttributeId, TableGroupAll::Table);
        }

        return attrib;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckAllowQuality</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether quality orders can be created for an item.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <returns>
    /// true if a quality order can be created for the item; otherwise, false.
    /// </returns>
    public static boolean pmfCheckAllowQuality(ItemId _itemId)
    {
        InventTable inventTable = InventTable::find(_itemId);
        boolean     ret         = true;

        if (inventTable.PmfProductType == PmfProductType::MainItem)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCheckFormulaItemForCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether a formula item has assigned co-products or by-products.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item.
    /// </param>
    /// <returns>
    /// true if a co-product or by-product is assigned to the item; otherwise, false.
    /// </returns>
    public static boolean pmfCheckFormulaItemForCoBy(
        ItemId _itemId)
    {
        BOMVersion      bomVersion;
        PmfFormulaCoBy coBy;

        select firstonly RecId from bomVersion
            where  bomVersion.ItemId    == _itemId
                && bomVersion.PmfTypeId == PmfBOMFormula::Formula
            exists join coBy
                where coBy.bomId == bomVersion.bomId;

        return bomVersion.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmflookupItemIdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find co-products and by-products.
    /// </summary>
    /// <param name="_ctrl">
    ///    The FormStringControl object where the lookup values should be displayed.
    /// </param>
    public static void pmflookupItemIdCoBy(
        FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(InventTable));

        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId), true);
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        sysTableLookup.addLookupfield(fieldNum(InventTable, PmfProductType));

        queryBuildDataSource.addRange(fieldNum(InventTable, PmfProductType)).value(queryValue(PmfProductType::Co_Product));
        queryBuildDataSource.addRange(fieldNum(InventTable, PmfProductType)).value(queryValue(PmfProductType::By_Product));
        
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an inventory dimension for storing the price of an item price.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID that is converted.
    /// </param>
    /// <returns>
    /// The inventory dimension ID for a specific dimension/site combination.
    /// </returns>
    public static InventDimId priceInventDimId(
        ItemId      _itemId,
        InventDimId _inventDimId)
    {
        return InventTable::priceInventDim(_itemId, InventDim::find(_inventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an inventory dimension for storing the price of an item price.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension that is converted.
    /// </param>
    /// <returns>
    /// The inventory dimension ID for a specific dimension/site combination.
    /// </returns>
    public static InventDimId priceInventDim(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        InventTable inventTable = InventTable::find(_itemId);

        InventDim inventDim;
        inventDim.data(_inventDim);

        if (inventTable.ItemDimCostPrice)
        {
            inventDim.clearNotSiteAndProductDim(InventDimGroupSetup::newInventTable(inventTable));
        }
        else
        {
            InventDimParm   inventDimParm;

            inventDimParm.InventSiteIdFlag = NoYes::Yes;
            inventDim.clearNotSelectedDim(inventDimParm);
        }

        return InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryIsBomOrFormulaAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the user query to ensure only BOM items or formula items are selected.
    /// </summary>
    /// <param name="_queryRun">
    /// The user query to be modified.
    /// </param>
    /// <returns>
    /// The filtered user query to be modified.
    /// </returns>
    /// <remarks>
    /// Only certain kinds of items can be selected for margin update calculation. As
    /// the user can choose to select any item, this method is used to add criteria
    /// to ensure that only items with the correct production type will be selected.
    /// </remarks>
    public static QueryRun queryIsBomOrFormulaAllowed(QueryRun _queryRun)
    {
        QueryRun                    qr = _queryRun;
        QueryBuildDataSource        ds;
        QueryBuildRange             range;

        ds = SysQuery::findOrCreateDataSource(qr.query(), tableNum(InventTable));

        range = SysQuery::findOrCreateRange(ds, fieldNum(InventTable, PmfProductType));

        range.value(strFmt('((%1==%2) || (%1==%3))', fieldStr(InventTable, PmfProductType), any2Int(PmfProductType::Formula), any2Int(PmfProductType::BOM)));

        return qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOrderQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines a quantity that conforms with the minimum, maximum and multiple settings of an item.
    /// </summary>
    /// <param name="_inventItemOrderSetupMap">
    ///    A <c>InventItemOrderSetupMap</c> map.
    /// </param>
    /// <param name="_productInventDimId">
    ///		The dimension ID to use for conversion.
    /// </param>
    /// <param name="_transQty">
    ///    The quantity specified in the transaction unit.
    /// </param>
    /// <param name="_transUnitId">
    ///    The transaction unit.
    /// </param>
    /// <param name="_displayInformationToUser">
    ///    A boolean value that defines if the information should be shown to the user.
    /// </param>
    /// <param name="_lockMinQtyCheck">
    ///    A boolean value that defines if the minimum quantity must be adjusted without user interaction if the requirement is not met.
    /// </param>
    /// <param name="_lockMaxQtyCheck">
    ///    A boolean value that defines if the maximum quantity must be adjusted without user interaction if the requirement is not met.
    /// </param>
    /// <param name="_lockMultipleCheck">
    ///    A boolean value that defines if the multiple quantity must be adjusted without user interaction if the requirement is not met.
    /// </param>
    /// <param name="_doMultipleCheck">
    ///    A boolean value that defines if the multiple quantity should be validated after it is adjusted.
    /// </param>
    /// <param name="_doMinQtyCheck">
    ///    A boolean value that defines if the minimum quantity should be validated after it is adjusted.
    /// </param>
    /// <param name="_doMaxQtyCheck">
    ///    A boolean value that defines if the maximum quantity should be validated after it is adjusted.
    /// </param>
    /// <returns>
    ///    The adjusted transaction quantity.
    /// </returns>
    public static Qty calculateOrderQuantity(
        InventItemOrderSetupMap _inventItemOrderSetupMap,
        InventDimId				_productInventDimId,
        Qty                     _transQty,
        UnitOfMeasureSymbol     _transUnitId,
        boolean                 _displayInformationToUser   = true,
        boolean                 _lockMinQtyCheck            = false,
        boolean                 _lockMaxQtyCheck            = false,
        boolean                 _lockMultipleCheck          = false,
        boolean                 _doMultipleCheck            = true,
        boolean                 _doMinQtyCheck              = true,
        boolean                 _doMaxQtyCheck              = true)
    {
        InventMovementQuantityValidatorParameters parameters = InventMovementQuantityValidatorParameters::construct();

        parameters.inventItemOrderSetupMap  = _inventItemOrderSetupMap;
        parameters.productInventDimId		= _productInventDimId;
        parameters.displayInformationToUser = _displayInformationToUser;
        parameters.lockMinQtyCheck		    = _lockMinQtyCheck;
        parameters.lockMaxQtyCheck			= _lockMaxQtyCheck;
        parameters.lockMultipleCheck		= _lockMultipleCheck;
        parameters.doMultipleCheck			= _doMultipleCheck;
        parameters.doMinQtyCheck			= _doMinQtyCheck;
        parameters.doMaxQtyCheck		    = _doMaxQtyCheck;

        var resolver = InventMovementQuantityValidator::createInventMovementQuantityValidator(parameters);

        return resolver.acceptableQty(_transQty, _transUnitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMinMaxQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines a quantity that conforms with the minimum, maximum and multiple settings of an ItemAccount.
    /// </summary>
    /// <param name="_inventItemOrderSetupMap">
    ///    A <c>InventItemOrderSetupMap</c> map.
    /// </param>
    /// <param name="_transQty">
    ///    The quantity specified in the transaction unit.
    /// </param>
    /// <param name="_transUnitId">
    ///    The transaction unit.
    /// </param>
    /// <param name="_displayInformationToUser">
    ///    A boolean value that defines if the information should be shown to the user.
    /// </param>
    /// <param name="_lockMinQtyCheck">
    ///    A boolean value that defines if the minimum quantity must be adjusted without user interaction if the requirement is not met.
    /// </param>
    /// <param name="_lockMaxQtyCheck">
    ///    A boolean value that defines if the maximum quantity must be adjusted without user interaction if the requirement is not met.
    /// </param>
    /// <param name="_lockMultipleCheck">
    ///    A boolean value that defines if the multiple quantity must be adjusted without user interaction if the requirement is not met.
    /// </param>
    /// <param name="_doMultipleCheck">
    ///    A boolean value that defines if the multiple quantity should be validated after corrected.
    /// </param>
    /// <param name="_doMinQtyCheck">
    ///    A boolean value that defines if the minimum quantity should be validated after corrected.
    /// </param>
    /// <param name="_doMaxQtyCheck">
    ///    A boolean value that defines if the maximum quantity should be validated after corrected.
    /// </param>
    /// <returns>
    ///    The adjusted transaction quantity.
    /// </returns>
    [SysObsolete('This method is deprecated use calculateOrderQuantity instead.', false, 31\03\2019)]
    public static Qty setMinMaxQty(
        InventItemOrderSetupMap _inventItemOrderSetupMap,
        Qty                     _transQty,
        UnitOfMeasureSymbol     _transUnitId,
        boolean                 _displayInformationToUser   = true,
        boolean                 _lockMinQtyCheck            = false,
        boolean                 _lockMaxQtyCheck            = false,
        boolean                 _lockMultipleCheck          = false,
        boolean                 _doMultipleCheck            = true,
        boolean                 _doMinQtyCheck              = true,
        boolean                 _doMaxQtyCheck              = true)
    {
        return InventTable::calculateOrderQuantity(_inventItemOrderSetupMap,
                                                    '',
                                                    _transQty,
                                                     _transUnitId,
                                                   _displayInformationToUser,
                                                    _lockMinQtyCheck,
                                                    _lockMaxQtyCheck,
                                                   _lockMultipleCheck,
                                                   _doMultipleCheck,
                                                   _doMinQtyCheck,
                                                   _doMaxQtyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showItemSiteAndProductDim</Name>
				<Source><![CDATA[
    public static str showItemSiteAndProductDim(
        ItemId          _itemId,
        InventDim       _inventDim,
        InventSiteId    _newSiteId)
    {
        InventDim   inventDim;
        str         preFix;

        inventDim.data(_inventDim);
        inventDim.InventSiteId = _newSiteId;
        inventDim.clearNotSiteAndProductDim(InventDimGroupSetup::newItemId(_itemId));

        preFix = inventDim.preFix();
        return (prefix) ? strFmt("%1 %2", _itemId, preFix) : strFmt("%1", _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS10752";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvert</Name>
				<Source><![CDATA[
    public static Qty  unitConvert(
        ItemId              _itemId,
        UnitOfMeasureSymbol _unitFrom,
        UnitOfMeasureSymbol _unitTo,
        UnitOfMeasureSymbol _unitInvent,
        Qty                                 _valueFrom = 1,
        InventDimId                         _inventDimId = '',
        EcoResReleasedProductUnitConverter  _releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct())
    {
        InventQty           inventQty;

        if (_unitFrom != _unitTo)
        {
            inventQty   = _releasedProductUnitConverter.convert(
                _valueFrom,
                UnitOfMeasure::unitOfMeasureIdBySymbol(_unitFrom),
                UnitOfMeasure::unitOfMeasureIdBySymbol(_unitInvent),
                NoYes::Yes,
                _itemId,
                _inventDimId);

            return _releasedProductUnitConverter.convert(
                inventQty,
                UnitOfMeasure::unitOfMeasureIdBySymbol(_unitInvent),
                UnitOfMeasure::unitOfMeasureIdBySymbol(_unitTo),
                NoYes::Yes,
                _itemId,
                _inventDimId);
        }

        return _valueFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertValue</Name>
				<Source><![CDATA[
    public static real  unitConvertValue(
        ItemId              _itemId,
        UnitOfMeasureSymbol _unitFrom,
        UnitOfMeasureSymbol _unitTo,
        UnitOfMeasureSymbol _unitInvent,
        real                                _valueFrom,
        InventDimId                         _inventDimId = '',
        EcoResReleasedProductUnitConverter  _releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct())
    {
        real    inventValue;

        if (_unitFrom != _unitTo)
        {
            inventValue   = _releasedProductUnitConverter.convert(
                _valueFrom,
                UnitOfMeasure::unitOfMeasureIdBySymbol(_unitFrom),
                UnitOfMeasure::unitOfMeasureIdBySymbol(_unitInvent),
                NoYes::No,
                _itemId,
                _inventDimId,
                NoYes::No);

            return _releasedProductUnitConverter.convert(
                inventValue,
                UnitOfMeasure::unitOfMeasureIdBySymbol(_unitInvent),
                UnitOfMeasure::unitOfMeasureIdBySymbol(_unitTo),
                NoYes::No,
                _itemId,
                _inventDimId,
                NoYes::No);
        }

        return _valueFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetId_RU</Name>
				<Source><![CDATA[
    public static void updateAssetId_RU(RAssetId   _assetId,
                                        ItemId     _itemId)
    {
        InventTable inventTable;

        ttsbegin;
        inventTable = InventTable::find(_itemId, true);
        if (inventTable)
        {
            inventTable.AssetId_RU = _assetId;
            inventTable.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAutoUpdateSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the auto sales price can be updated.
    /// </summary>
    /// <param name = "_inventTable">
    ///     The item to update auto sales price for.
    /// </param>
    /// <returns>
    ///     true if the auto sales price can be updated; otherwise, false.
    /// </returns>
    protected static boolean canAutoUpdateSalesPrice(InventTable _inventTable)
    {
        return _inventTable.SalesModel != SalesPriceModel::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutoSalesPrice</Name>
				<Source><![CDATA[
    public static void updateAutoSalesPrice(
        ItemId      _itemId,
        PriceDate   _priceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        InventTable         inventTable = InventTable::find(_itemId);
        InventTableModule   inventTableSales;
        InventTableModule   inventTableBasic;

        if (!InventTable::canAutoUpdateSalesPrice(inventTable))
        {
            return;
        }

        inventTableSales = InventTableModule::find(_itemId, ModuleInventPurchSales::Sales, true);
        // For SalesPriceModelBasic::CostPrice, the sales price should always be calculated based on the current CostPrice.
        if (inventTable.SalesPriceModelBasic != SalesPriceModelBasic::CostPrice
         && _priceDate < inventTableSales.PriceDate)
        {
            return;
        }

        inventTableBasic = InventTableModule::findBasedOnSalesPriceModelBasic(_itemId, inventTable.SalesPriceModelBasic);

        if (! inventTableSales || ! inventTableBasic)
        {
            return;
        }

        inventTableSales.calcSalesPrice(inventTable, inventTableBasic);
        inventTableSales.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsPalletTypeId</Name>
				<Source><![CDATA[
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public static WMSPalletTypeId wmsPalletTypeId(ItemId _itemId)
    {
        WMSPalletTypeId wmsPalletTypeId = InventTable::find(_itemId).wmsPalletTypeId;
        if (!wmsPalletTypeId)
        {
            wmsPalletTypeId = WMSParameters::find().DefaultPalletTypeId;
        }
        return wmsPalletTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Product</Name>
				<Source><![CDATA[
    public EcoResProduct Product(EcoResProduct _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('EcoResProduct');
        }
        else
        {
            return this.setLink('EcoResProduct', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductVariant</Name>
				<Source><![CDATA[
    [SysObsolete('Please use the InventProductDimension hierarchy instead.', false, 30\11\2017)]
    public boolean checkProductVariant(FieldId _dimensionField, anytype _dimensionValue, boolean _silence = false)
    {
        InventProductDimension productDimension = InventDimension::singletonFromInventDimFieldId(_dimensionField) as InventProductDimension;
        if (productDimension)
        {
            return productDimension.checkExistsValueForItem(this, _dimensionValue, _silence);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductVariantUnitConversionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether product variant unit conversion is enabled for the item.
    /// </summary>
    /// <returns>
    /// true if product variant unit conversion is enabled; otherwise, false.
    /// </returns>
    public boolean isProductVariantUnitConversionEnabled()
    {
        EcoResProduct ecoResProduct = EcoResProduct::find(this.Product);
        return ecoResProduct.isProductMasterWithProductVariantConversionEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesProcessSerialActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value indicating whether the Serial Number inventory dimension is active for sales process for the current item.
    /// </summary>
    /// <returns>
    /// true if Serial Number inventory dimension is active for sales process for the current item; otherwise, false.
    /// </returns>
    public boolean isSalesProcessSerialActive()
    {
        return EcoResDimensionGroupSetup::isInventoryDimensionSalesProcessActive(this.ItemId, fieldNum(InventDim, InventSerialId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductVariantUnitConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current item is valid for enabling variant-level unit of conversion.
    /// </summary>
    /// <param name="_inventUnit">
    /// The current Inventory Unit symbol.
    /// </param>
    /// <param name="_purchUnit">
    /// The current Purchase Unit symbol.
    /// </param>
    /// <param name="_salesUnit">
    /// The current Sales Unit symbol.
    /// </param>
    /// <param name="_isItemWHSControlled">
    /// A boolean parameter that indicates whether the item uses warehouse management processes.
    /// </param>
    /// <returns>
    /// true if the item is valid for variant-level unit of conversion; otherwise false.
    /// </returns>
    public boolean validateProductVariantUnitConversion(
                                                UnitOfMeasureSymbol _inventUnit = this.inventTableModuleInvent().UnitId,
                                                UnitOfMeasureSymbol _purchUnit  = this.inventTableModulePurch().UnitId,
                                                UnitOfMeasureSymbol _salesUnit  = this.inventTableModuleSales().UnitId,
                                                boolean             _isItemWHSControlled = this.whsItemIsWHSControlled())
    {
        boolean     ret = true;
      
        if (!EcoResProductUnitConverter::isProductUnitConversionPerVariantEnabled())
        {
            if (!_isItemWHSControlled)
            {
                return checkFailed(strFmt("@SYP4986006", this.ItemId, curext()));
            }

            if (ret)
            {
                if (this.BOMUnitId != ''
                        && (this.BOMUnitId != _inventUnit
                        ||  this.BOMUnitId != _purchUnit
                        ||  this.BOMUnitId != _salesUnit))
                {
                    return checkFailed(strFmt("@SYP4986005", this.ItemId, curext()));
                }
            }
        }
        if (ret)
        {
            ret = this.mustValidateProductVariantsConversion(_inventUnit,
                                                             _purchUnit,
                                                             _salesUnit);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areProductVariantsDifferent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies if two product variants are different.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item.
    /// </param>
    /// <param name="_inventDimId">
    ///     InventDimId value representing the product dimensions to test.
    /// </param>
    /// <param name="_otherInventDimId">
    ///     InventDimId value representing the product dimensions to test against the first parameter.
    /// </param>
    /// <returns>
    ///     true if the Item supports product variant unit conversions and the two <c>InventDim</c>
    ///         records are different on the product dimensions; otherwise, false.
    /// </returns>
    public static boolean areProductVariantsDifferent(
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventDimId _otherInventDimId)
    {
        InventDim       inventDim;
        InventDim       otherInventDim;
        InventDimParm   inventDimParmProduct;
        InventTable     inventTable;
        boolean         ret = false;

        if (_inventDimId == _otherInventDimId)
        {
            return false;
        }

        inventTable = InventTable::find(_itemId);

        if (inventTable.isProductVariantUnitConversionEnabled())
        {
            inventDimParmProduct = inventTable.inventDimParmProductDimensions();
            inventDim            = InventDim::find(_inventDimId);
            otherInventDim       = inventDim::find(_otherInventDimId);

            if (!InventDim::isInventDimParmEqual(inventDim, otherInventDim, inventDimParmProduct, false))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemIdHasReleasedVariants</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a lookup for selecting product master items that have released variants.
    /// </summary>
    /// <param name="_ctrl">
    ///     The string control calling the lookup.
    /// </param>
    public static void lookupItemIdHasReleasedVariants(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _ctrl);
        Query                   query = new Query();

        QueryBuildDataSource    qbdsItem                    = query.addDataSource(tableNum(InventTable));
        QueryBuildDataSource    qbdsReleasedVariants        = qbdsItem.addDataSource(tableNum(InventDimCombination));

        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        sysTableLookup.addSelectionField(fieldNum(InventTable, Product));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, defaultProductName));
        sysTableLookup.addLookupfield(fieldNum(InventTable, NameAlias));

        qbdsReleasedVariants.relations(true);
        qbdsReleasedVariants.joinMode(JoinMode::ExistsJoin);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stockedOnlyFields</Name>
				<Source><![CDATA[
    public static container stockedOnlyFields()
    {
        return [fieldNum(InventTable, BatchNumGroupId),
                fieldNum(InventTable, SerialNumGroupId),
                fieldNum(InventTable, bomUnitId),
                fieldNum(InventTable, ScrapConst),
                fieldNum(InventTable, ScrapVar),
                fieldNum(InventTable, bomLevel),
                fieldNum(InventTable, bomCalcGroupId),
                fieldNum(InventTable, ProdPoolId),
                fieldNum(InventTable, ProdGroupId),
                fieldNum(InventTable, PropertyId),
                fieldNum(InventTable, bomManualReceipt),
                fieldNum(InventTable, ProdFlushingPrincip),
                fieldNum(InventTable, ForecastDMPInclude),
                fieldNum(InventTable, ReqGroupId),
                fieldNum(InventTable, BomWHSReleasePolicy)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBePhantom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item can be marked as phantom.
    /// </summary>
    /// <param name="_crossTableData">An object that provides information about related records.</param>
    /// <returns>True, if the item can be marked as phantom; otherwise, false.</returns>
    public boolean canBePhantom(EcoResIReleasedProductCrossTableData _crossTableData = this.crossTableData())
    {
        boolean result = this.PmfProductType != PmfProductType::MainItem;
        result = result && this.isStockedCrossTable(_crossTableData);
        result = result && this.isFormulaOrBOMAllowed();
        result = result && !PdsGlobal::pdsIsCWItem(this.ItemId);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoReportAsFinishedAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item allows to enable automatic report as finished.
    /// </summary>
    /// <param name="_crossTableData">An object that provides information about related records.</param>
    /// <returns>True, if the item allows to enable automatic report as finished; otherwise, false.</returns>
    public boolean isAutoReportAsFinishedAllowed(EcoResIReleasedProductCrossTableData _crossTableData = this.crossTableData())
    {
        boolean result = this.inventItemType().canBeProduced();
        result = result && !this.Phantom;
        result = result && this.isStockedCrossTable(_crossTableData);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossTableData</Name>
				<Source><![CDATA[
    private EcoResIReleasedProductCrossTableData crossTableData()
    {
        return EcoResProductCrossTableManager::crossTableData(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockedCrossTable</Name>
				<Source><![CDATA[
    private boolean isStockedCrossTable(EcoResIReleasedProductCrossTableData _crossTableData = EcoResProductCrossTableManager::crossTableData(this))
    {
        return EcoResProductCrossTableManager::isItemStocked(this.ItemId, this.DataAreaId, _crossTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeleteBOMVersionsBeforeChangingProductionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether BOM versions of this item must be deleted to allow switching
    /// the item to the new production type.
    /// </summary>
    /// <param name="_orig">Original state of the invent table record.</param>
    /// <returns>True, if BOM versions for this item must be deleted; otherwise, false.</returns>
    public boolean mustDeleteBOMVersionsBeforeChangingProductionType(InventTable _orig = this.orig())
    {
        return _orig.PmfProductType != this.PmfProductType
            && _orig.PmfProductType == PmfProductType::BOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeleteFormulaVersionsBeforeChangingProductionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether formula versions of this item must be deleted to allow switching
    /// the item to the new production type.
    /// </summary>
    /// <param name="_orig">Original state of the invent table record.</param>
    /// <returns>True, if formula versions for this item must be deleted; otherwise, false.</returns>
    public boolean mustDeleteFormulaVersionsBeforeChangingProductionType(InventTable _orig = this.orig())
    {
        if (_orig.PmfProductType != this.PmfProductType)
        {
            switch (_orig.PmfProductType)
            {
                case PmfProductType::MainItem:
                case PmfProductType::None:
                case PmfProductType::Formula:
                    return !(this.PmfProductType == PmfProductType::MainItem || this.PmfProductType == PmfProductType::Formula);
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRemoveFormulaVersionsApprovalBeforeChangingProductionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether approval must be removed for formula versions of this item to allow switching
    /// the item to the new production type.
    /// </summary>
    /// <param name="_orig">Original state of the invent table record.</param>
    /// <returns>True, if approval must be removed for formula versions of this item; otherwise, false.</returns>
    public boolean mustRemoveFormulaVersionsApprovalBeforeChangingProductionType(InventTable _orig = this.orig())
    {
        if (_orig.PmfProductType != this.PmfProductType)
        {
            switch (_orig.PmfProductType)
            {
                case PmfProductType::MainItem:
                case PmfProductType::None:
                case PmfProductType::Formula:
                    return this.PmfProductType == PmfProductType::MainItem || this.PmfProductType == PmfProductType::Formula;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tariffCode_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits <c>TariffCode_IN</c> field.
    /// </summary>
    /// <param name = "_set">True to set.</param>
    /// <param name = "_tariffCode_IN">The <c>TariffCode_IN</c> field value.</param>
    /// <returns>The <c>TariffCode_IN</c> field value.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit TariffCode_IN tariffCode_IN(boolean _set, TariffCode_IN _tariffCode_IN)
    {
        if (_set)
        {
            this.ExciseTariffCodes_IN = ExciseTariffCodes_IN::findByTariffCode(_tariffCode_IN).RecId;
        }

        return ExciseTariffCodes_IN::find(this.ExciseTariffCodes_IN).TariffCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceCode_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits <c>ServiceCode_IN</c> field.
    /// </summary>
    /// <param name = "_set">True to set.</param>
    /// <param name = "_serviceCode_IN">The <c>ServiceCode_IN</c> field value.</param>
    /// <returns>The <c>ServiceCodeTable_IN</c> field value.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit ServiceCode_IN serviceCode_IN(boolean _set, ServiceCode_IN _serviceCode_IN)
    {
        if (_set)
        {
            this.ServiceCodeTable_IN = ServiceCodeTable_IN::findByServiceCode(_serviceCode_IN).RecId;
        }

        return  ServiceCodeTable_IN::find(this.ServiceCodeTable_IN).ServiceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eximProductGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits <c>EximProductGroupTable_IN</c> field.
    /// </summary>
    /// <param name = "_set">True to set.</param>
    /// <param name = "_eximProductGroup_IN">The <c>EximProductGroupTable_IN</c> field value.</param>
    /// <returns>The <c>EximProductGroupTable_IN</c> field value.</returns>
    [
        SysClientCacheDataMethodAttribute(true),
        SysObsolete('eximProductGroup_IN is obsolete.', true, 4\2\2021)
    ]
    public edit EximProductGroup_IN eximProductGroup_IN(boolean _set, EximProductGroup_IN _eximProductGroup_IN)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsExportTariffCode_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits <c>CustomsExportTariffCodeTable_IN</c> field.
    /// </summary>
    /// <param name = "_set">True to set.</param>
    /// <param name = "_customsTariffCode_IN">The <c>CustomsExportTariffCodeTable_IN</c> field value.</param>
    /// <returns>The <c>CustomsTariffCode_IN</c> field value.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit CustomsTariffCode_IN customsExportTariffCode_IN(boolean _set, CustomsTariffCode_IN _customsTariffCode_IN)
    {
        if (_set)
        {
            this.CustomsExportTariffCodeTable_IN = CustomsTariffCodeTable_IN::findByTariffCodeAndDirection(_customsTariffCode_IN, Direction_IN::Export).RecId;
        }

        return CustomsTariffCodeTable_IN::find(this.CustomsExportTariffCodeTable_IN).TariffCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsImportTariffCode_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits <c>CustomsImportTariffCodeTable_IN</c> field.
    /// </summary>
    /// <param name = "_set">True to set.</param>
    /// <param name = "_customsTariffCode_IN">The <c>CustomsImportTariffCodeTable_IN</c> field value.</param>
    /// <returns>The <c>CustomsTariffCode_IN</c> field value.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit CustomsTariffCode_IN customsImportTariffCode_IN(boolean _set, CustomsTariffCode_IN _customsTariffCode_IN)
    {
        if (_set)
        {
            this.CustomsImportTariffCodeTable_IN = CustomsTariffCodeTable_IN::findByTariffCodeAndDirection(_customsTariffCode_IN, Direction_IN::Import).RecId;
        }

        return CustomsTariffCodeTable_IN::find(this.CustomsImportTariffCodeTable_IN).TariffCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ngpCodesTable_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits <c>NGPCodesTable_FR</c> field.
    /// </summary>
    /// <param name = "_set">True to set.</param>
    /// <param name = "_ngpCodesTable_FR">The <c>NGPCodesTable_FR</c> field value.</param>
    /// <returns>The <c>NGPCodesTable_FR</c> field value.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit NGP_FR ngpCodesTable_FR(boolean _set, NGP_FR _ngpCodesTable_FR)
    {
        if (_set)
        {
            this.NGPCodesTable_FR = NGPCodesTable_FR::findByNGPCode(_ngpCodesTable_FR).RecId;
        }

        return NGPCodesTable_FR::find(this.NGPCodesTable_FR).NGPCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventFiscalLIFOGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits <c>InventFiscalLIFOGroup</c> field.
    /// </summary>
    /// <param name = "_set">True to set.</param>
    /// <param name = "_inventFiscalLIFOGroupId">The <c>InventFiscalLIFOGroup</c> field value.</param>
    /// <returns>The <c>InventFiscalLIFOGroupId</c> field value.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public edit InventFiscalLIFOGroupId inventFiscalLIFOGroup(boolean _set, InventFiscalLIFOGroupId _inventFiscalLIFOGroupId)
    {
        if (_set)
        {
            this.InventFiscalLIFOGroup = InventFiscalLIFOGroup::findByGroupId(_inventFiscalLIFOGroupId).RecId;
        }

        return InventFiscalLIFOGroup::find(this.InventFiscalLIFOGroup).GroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFormWithInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open a given form with the current <c>InventTable</c> record.
    /// </summary>
    /// <param name = "_menuitemDisplayStr">The form to open.</param>
    /// <param name = "_caller">The calling form.</param>
    /// <param name = "_copyCallerQuery">Specifies whether to copy the query from the calling form to the target form; optional.</param>
    public void openFormWithInventTable(str _menuitemDisplayStr, Object _caller, boolean _copyCallerQuery = false)
    {
        MenuFunction menuFunction = new MenuFunction(_menuitemDisplayStr, MenuItemType::Display);

        // Check access rights
        if (!menuFunction || !menuFunction.checkAccessRights())
        {
            // Access rights are not sufficient to use this function.
            throw error("@SYS81158");
        }

        Args args = new Args();
        args.record(this);
        args.caller(_caller);
        args.copyCallerQuery(_copyCallerQuery);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemTypeIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an icon representation of the item type
    /// </summary>
    /// <returns>Container with icon representing the item type</returns>
    public display container displayItemTypeIcon()
    {
        ImageReference  imageReference;

        switch (this.ItemType)
        {
            case ItemType::Service:
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Operations, strFmt("@SCM:ItemTypeToolTip", enum2str(this.ItemType)));
                break;

            case ItemType::Item:
                if (this.isProducedByDefault())
                {
                    imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Organization, strFmt("@SCM:ItemTypeToolTip", "@SYS7916"));
                }
                else
                {
                    imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Products, strFmt("@SCM:ItemTypeToolTip", enum2str(this.ItemType)));
                }
                break;

            default:
                imageReference = ImageReference::constructForSymbol(ImageReferenceSymbol::Products, "@SYS3305");

        }

        return imageReference.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLogicInCurrentTransactionScope</Name>
				<Source><![CDATA[
    private static boolean skipLogicInCurrentTransactionScope(str _skipType, boolean _mustSkip, boolean _setValue)
    {
        if (_setValue)
        {
            SysTransactionScopeCache::set(tableStr(InventTable), _skipType, _mustSkip);
            return _mustSkip;
        }

        boolean defaultResult = false;
        return SysTransactionScopeCache::get(tableStr(InventTable), _skipType, defaultResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdateOfInventItemSetupSupplyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables or enables the update of related table InventItemSetupSupplyType during update of the table in the current transaction scope.
    /// </summary>
    /// <param name="_mustSkip">A boolean value indicating whether the update must be skipped.</param>
    /// <returns>A boolean value indicating whether the update must be skipped.</returns>
    public static boolean skipUpdateOfInventItemSetupSupplyType(boolean _mustSkip = false)
    {
        return InventTable::skipLogicInCurrentTransactionScope('UpdateInventItemSetupSupplyType', _mustSkip, !prmIsDefault(_mustSkip));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAddInventDimDS</Name>
				<Source><![CDATA[
    private static void lookupAddInventDimDS(
        QueryBuildDataSource    _queryBuildDataSource,
        InventDim               _inventDimCriteria,
        InventDimParm           _inventDimParm)
    {
        QueryBuildDataSource qbdsDim = _queryBuildDataSource.addDataSource(tableNum(InventDim));
        qbdsDim.joinMode(JoinMode::InnerJoin);
        qbdsDim.relations(true);

        List            dimFields       = InventDim::dimFieldsList();
        ListEnumerator  dimFieldsEnum   = dimFields.getEnumerator();

        while (dimFieldsEnum.moveNext())
        {
            FieldId dimFieldId = dimFieldsEnum.current();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);

            if (_inventDimParm.(dimParmFieldId))  //dimension is active for the item
            {
                if (_inventDimCriteria.(dimFieldId))  //limitation is specified
                {
                    qbdsDim.addRange(dimFieldId).value(queryValue(_inventDimCriteria.(dimFieldId)));
                    qbdsDim.addRange(dimFieldId).value(queryValue(InventDim::emptyDimField(dimFieldId)));
                    qbdsDim.addSortField(dimFieldId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExcludeValidateField_SysRecordTemplate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(SysRecordTemplate), delegatestr(SysRecordTemplate, onExcludeValidateField))]
    static void onExcludeValidateField_SysRecordTemplate(Set _exclusion, common _common)
    {
        if (_common.TableId == tableNum(InventTable))
        {
            _exclusion.add(fieldnum(InventTable, ProdFlushingPrincip));
            _exclusion.add(fieldnum(InventTable, MarkupCode_RU));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch(_fieldIdToCheck)
        {
            case fieldNum(InventTable, HSNCodeTable_IN) :
            case fieldNum(InventTable, ServiceAccountingCodeTable_IN) :
                if (this.HSNCodeTable_IN && this.ServiceAccountingCodeTable_IN)
                {
                    ret = ret && checkFailed("@TaxGST:HSNAndSACCodeCheck");
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePhysicalDimensionInventoryUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the physical dimension table based on the inventory unit of measure.
    /// </summary>
    public void updatePhysicalDimensionInventoryUnitOfMeasure()
    {
        if (!this.PreventPhysicalDimensionSync)
        {
            ttsbegin;

            WHSPhysDimUOM physicalDimensionUOM = WHSPhysDimUOM::findByItemIdAndUnitOfMeasure(
                                                                    this.ItemId,
                                                                    WHSCatchWeightHelper::inventHandlingUnitId(this.ItemId),
                                                                    true);

            if (physicalDimensionUOM)
            {
                physicalDimensionUOM.Depth  = this.grossDepth;
                physicalDimensionUOM.Height	= this.grossHeight;
                physicalDimensionUOM.Width  = this.grossWidth;
                physicalDimensionUOM.Weight = this.grossWeight();
                physicalDimensionUOM.syncPhysicalDimensionsFromInventTable();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPhysicalDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record from a physical dimensions records.
    /// </summary>
    /// <param name = "_physDimUOM">
    /// A <c>_physDimUOM</c> record.
    /// </param>
    [Hookable(false)]
    final public void initFromPhysicalDimensions(WHSPhysDimUOM _physDimUOM)
    {
        this.GrossDepth  = _physDimUOM.Depth;
        this.GrossWidth  = _physDimUOM.Width;
        this.GrossHeight = _physDimUOM.Height;
        this.NetWeight   = _physDimUOM.Weight - this.TaraWeight;
        this.UnitVolume  = _physDimUOM.Depth * _physDimUOM.Width * _physDimUOM.Height;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPhysicalDimensionsFromWHSPhysDimUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the physical dimensions from the phsyical dimensions to the released product.
    /// </summary>
    /// <remarks>
    /// This method should be called to avoid a circular dependency when updating the physical dimensions table.
    /// </remarks>
    [Hookable(false)]
    final internal void syncPhysicalDimensionsFromWHSPhysDimUOM()
    {
        try
        {
            this.PreventPhysicalDimensionSync = NoYes::Yes;

            this.write();
        }
        finally
        {
            this.PreventPhysicalDimensionSync = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdatePhysicalDimensionInventoryUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the physical dimensions for the inventory unit of measure should be updated.
    /// </summary>
    /// <param name="_inventTable">An <c>InventTable</c> record used for the comparison of physical dimensions.
    /// </param>
    /// <returns>
    /// true, if the physical dimensions should be updated; otherwise, false.
    /// </returns>
    public boolean shouldUpdatePhysicalDimensionInventoryUnitOfMeasure(InventTable _inventTable)
    {
        return (this.grossDepth != _inventTable.grossDepth
                || this.grossHeight != _inventTable.grossHeight
                || this.grossWidth != _inventTable.grossWidth
                || this.TaraWeight != _inventTable.TaraWeight
                || this.NetWeight != _inventTable.NetWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that valid dimension groups exist.
    /// </summary>
    /// <returns>True when storage and tracking dimension group exists; otherwise, false.</returns>
    public boolean checkDimensionGroups()
    {
        if (!this.storageDimensionGroup() || !this.trackingDimensionGroup())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DimensionAttributeDelegates_getTablesToAddCopiedValuesTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of tables and fields to update when copying the values to default dimensions on existing values.
    /// </summary>
    /// <param name = "_tableSet">A <c>Set</c> of <c>DimensionCopyValuesDataContract</c> values.</param>
    [SubscribesTo(classStr(DimensionAttributeDelegates), delegateStr(DimensionAttributeDelegates, getTablesToAddCopiedValuesTo))]
    public static void DimensionAttributeDelegates_getTablesToAddCopiedValuesTo(Set _tableSet)
    {
        DimensionCopyValueDataContract contract = DimensionCopyValueDataContract::construct(tableNum(InventTable), fieldNum(InventTable, DefaultDimension));
        contract.addKeyFieldDimensionPair(tableNum(InventTable), fieldNum(InventTable, ItemId));
        _tableSet.add(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get item type.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id.
    /// </param>
    /// <returns>
    /// The item type.
    /// </returns>
    public static ItemType getItemType(ItemId _itemId)
    {
        return InventTable::find(_itemId).ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateProductVariantsConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current item has valid unit conversions at the variant-level.
    /// </summary>
    /// <param name="_inventUnit">
    /// The current inventory unit symbol.
    /// </param>
    /// <param name="_purchUnit">
    /// The current purchase unit symbol.
    /// </param>
    /// <param name="_salesUnit">
    /// The current sales unit symbol.
    /// </param>
    /// <returns>true if the item has valid variant-level unit conversions; otherwise, false.</returns>
    [Replaceable]
    public boolean mustValidateProductVariantsConversion(UnitOfMeasureSymbol _inventUnit,
                                                         UnitOfMeasureSymbol _purchUnit,
                                                         UnitOfMeasureSymbol _salesUnit)
    {
        if (EcoResProductUnitConverter::isProductMasterWithProductVariantConversionEnabled(this.ItemId))
        {
            Set unitsOfMeasure = new Set(Types::String);

            unitsOfMeasure.add(_inventUnit);
            unitsOfMeasure.add(_purchUnit);
            unitsOfMeasure.add(_salesUnit);
            unitsOfMeasure.add(this.BOMUnitId);

            if (unitsOfMeasure.elements() > 1)
            {
                SetEnumerator se = unitsOfMeasure.getEnumerator();

                while (se.moveNext())
                {
                    // Validate that all the default UOMs are setup to convert to inventory UOM.
                    UnitOfMeasureSymbol currentUOM = se.current();

                    if (currentUOM
                        && currentUOM != _inventUnit
                        && !this.existUnitConversionForProduct(_inventUnit, currentUOM))
                    {
                        return checkFailed(strFmt("@SYS28690", _inventUnit, currentUOM));
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCatchWeightAndWarehouseProcessEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item is catch weight enabled and used in warehouse processes.
    /// </summary>
    /// <param name = "_itemId">The item to validate.</param>
    /// <returns></returns>
    public static boolean isItemCatchWeightAndWarehouseProcessEnabled(ItemId _itemId)
    {
        return PdsGlobal::pdsIsCWItem(_itemId) && WHSInventEnabled::exist(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRenameItemIdPrimaryKeyFlightEnabled</Name>
				<Source><![CDATA[
    private boolean isRenameItemIdPrimaryKeyFlightEnabled()
    {
        return isFlightEnabled(EcoResFlighting::RenameItemIdPrimaryKeyFeatureFlightingName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUnitConversionForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all product master and variants have conversions setup. The method is required so we so not break any extensibility request done for the existConversionForAllVariants method.
    /// EcoResProductUnitConverter::existConversionForAllVariants implicitly can find conversions for product master but only when variants exist.
    /// EcoResProductUnitConverter::existConversionForProductMaster will be called if we don't have any variants released but we have a unit conversion for the product master.
    /// </summary>
    internal boolean existUnitConversionForProduct(
        UnitOfMeasureSymbol _fromUnitOfMeasureSymbol,
        UnitOfMeasureSymbol _toUnitOfMeasureSymbol)
    {
        return EcoResProductUnitConverter::existConversionForAllVariants(_fromUnitOfMeasureSymbol, _toUnitOfMeasureSymbol, this.Product) ||
               EcoResProductUnitConverter::existConversionForProductMaster(_fromUnitOfMeasureSymbol, _toUnitOfMeasureSymbol, this.Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditProductLifecycleStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether product lifecycle state may be changed directly.
    /// </summary>
    /// <returns>true if state may be change; otherwise, false.</returns>
    public boolean allowEditProductLifecycleStateId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSharingTableList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of tables that must be shared when the <c>InventTable</c> table is shared.
    /// </summary>
    /// <returns>
    /// The <c>List</c> of tables.
    /// </returns>
    [Hookable(false)]
    internal static List dataSharingTableList()
    {
        List sharingList = new List(Types::String);
        
        sharingList.addEnd(tableStr(InventTable));
        sharingList.addEnd(tableStr(InventTableModule));
        
        if (isConfigurationkeyEnabled(configurationKeyNum(PdsBatchAttrib)))
        {
            sharingList.addEnd(tableStr(PdsBatchAttribByItem));
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            sharingList.addEnd(tableStr(WHSInventTable));
            sharingList.addEnd(tableStr(WHSInventEnabled));
            sharingList.addEnd(tableStr(TMSInventEnabled));
            sharingList.addEnd(tableStr(WHSPhysDimUOM));
        }
        
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            sharingList.addEnd(tableStr(RetailInventTable));
        }
        
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            sharingList.addEnd(tableStr(MCRInventTable));
        }

        return sharingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompanyEqualToPolicyMasterCompany</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isCompanyEqualToPolicyMasterCompany(DataAreaId _company = this.DataAreaId)
    {
        boolean foundMasterCompanyInPolicy = true;
        
        if (InventTableDataSharingFeature::isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(_company, tableStr(InventTable));
            foundMasterCompanyInPolicy = policy.RecId && policy.IsEnabled && policy.MasterCompany == _company;
        }

        return foundMasterCompanyInPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingTableFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a set of fields that cannot be shared when the <c>InventTable</c> table is shared.
    /// </summary>
    /// <returns>
    /// The <c>Set</c> of fields.
    /// </returns>
    [Hookable(false)]
    internal static Set unsupportedDataSharingTableFieldSet()
    {
        Set sharingSet = new Set(Types::String);

        // Country fields
        sharingSet.add(fieldstr(InventTable, AlcoholManufacturerId_RU));
        sharingSet.add(fieldstr(InventTable, AlcoholProductionTypeId_RU));
        sharingSet.add(fieldstr(InventTable, AlcoholStrength_RU));
        sharingSet.add(fieldstr(InventTable, AssetGroupId_RU));
        sharingSet.add(fieldstr(InventTable, AssetId_RU));
        sharingSet.add(fieldstr(InventTable, BrandCodeId_MX));
        sharingSet.add(fieldstr(InventTable, CustomsExportTariffCodeTable_IN));
        sharingSet.add(fieldstr(InventTable, CustomsImportTariffCodeTable_IN));
        sharingSet.add(fieldstr(InventTable, ExceptionCode_BR));
        sharingSet.add(fieldstr(InventTable, ExciseTariffCodes_IN));
        sharingSet.add(fieldstr(InventTable, EximProductGroupTable_IN));
        sharingSet.add(fieldstr(InventTable, ICMSOnService_BR));
        sharingSet.add(fieldstr(InventTable, InventProductType_BR));
        sharingSet.add(fieldstr(InventTable, MarkupCode_RU));
        sharingSet.add(fieldstr(InventTable, NGPCodesTable_FR));
        sharingSet.add(fieldstr(InventTable, NRTaxGroup_LV));
        sharingSet.add(fieldstr(InventTable, Packing_RU));
        sharingSet.add(fieldstr(InventTable, ServiceCodeTable_IN));
        sharingSet.add(fieldstr(InventTable, SkipIntraCompanySync_RU));
        sharingSet.add(fieldstr(InventTable, TaxationOrigin_BR));
        sharingSet.add(fieldstr(InventTable, TaxFiscalClassification_BR));
        sharingSet.add(fieldstr(InventTable, TaxServiceCode_BR));
        sharingSet.add(fieldstr(InventTable, DSA_IN));
        sharingSet.add(fieldstr(InventTable, ExciseRecordType_IN));
        sharingSet.add(fieldstr(InventTable, SATCodeId_MX));
        sharingSet.add(fieldstr(InventTable, SATTariffFraction_MX));
        sharingSet.add(fieldstr(InventTable, HSNCodeTable_IN));
        sharingSet.add(fieldstr(InventTable, ServiceAccountingCodeTable_IN));
        sharingSet.add(fieldstr(InventTable, Exempt_IN));
        sharingSet.add(fieldstr(InventTable, ScaleIndicator_BR));
        sharingSet.add(fieldstr(InventTable, CNPJ_BR));
        sharingSet.add(fieldstr(InventTable, NonGST_IN));
        
        // Fields not supported for version 1 of product data sharing
        sharingSet.add(fieldstr(InventTable, PrimaryVendorId)); // Sharing vendors is not part of the scope
 
        return sharingSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingCountryRegions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static container unsupportedDataSharingCountryRegions()
    {
        #ISOCountryRegionCodes

        return [#isoBR, #isoRU, #isoIN, #isoMX, #isoLV];
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFinancialTrackingDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean hasFinancialTrackingDim()
    {
        InventDimParm inventDimParmFinancial;
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);
        inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParmFinancial);

        return inventDimParmFinancial.anyTrackingDimensionFlagSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    private static str cacheScope()
    {
        return tableStr(InventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheItemIdKey</Name>
				<Source><![CDATA[
    private container cacheItemIdKey(ItemId _itemId)
    {
        return [this.DataAreaId, _itemId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheAcrossAOSes</Name>
				<Source><![CDATA[
    private void clearCacheAcrossAOSes(ItemId _itemId)
    {
        if (InventTableCacheFlight::instance().isEnabled())
        {
            // Ensure cache is populated to ensure data is removed on all AOSes
            InventTable::exist(_itemId);

            SysGlobalObjectCache cache = classFactory.globalObjectCache();
            cache.remove(InventTable::cacheScope(), this.cacheItemIdKey(_itemId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123844</DeveloperDocumentation>
	<FormRef>EcoResProductInformation</FormRef>
	<Label>@SYS15649</Label>
	<ListPageRef>EcoResProductDetailsExtendedGrid</ListPageRef>
	<PreviewPartRef>InventTablePreview</PreviewPartRef>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>NameAlias</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>ItemIdx</PrimaryIndex>
	<ReplacementKey>ItemIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TMSInventEnabled</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TMSInventEnabled</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WHSInventEnabled</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSInventEnabled</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PMFSeqReqRouteChanges</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PMFSeqReqRouteChanges</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailLabelGeneration</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailLabelGeneration</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxInventVATCommodityCode_IN</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxInventVATCommodityCode_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailInventTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailInventTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventBaileeCalcTrans_RU</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventBaileeCalcTrans_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>FEACCInventTable_RU</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>FEACCInventTable_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximSionLine_IN</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EximSionLine_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximSionItemTable_IN</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EximSionItemTable_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>BOM</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>BOM</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>BOMVersion</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BOMVersion</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CommissionCalc</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CommissionCalc</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustVendExternalItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendExternalItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResStorageDimensionGroupItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResStorageDimensionGroupItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResTrackingDimensionGroupItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResTrackingDimensionGroupItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ExtCodeValueTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ExtCodeValueTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ForecastPurch</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ForecastPurch</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ForecastSales</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ForecastSales</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventDimCombination</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventDimCombination</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemBarcode</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemBarcode</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemGroupItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemGroupItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemGTIN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemGTIN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemInventSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemInventSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemLocation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemLocation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemPrice</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemPrice</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemPriceSim</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemPriceSim</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemPurchSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemPurchSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemSalesSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemSalesSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemSetupSupplyType</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemSetupSupplyType</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventJournalTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventJournalTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventModelGroupItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventModelGroupItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventPosting</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventPosting</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventProdcomSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventProdcomSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventSum</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventSum</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventTableModule</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventTableModule</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventTestAssociationTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventTestAssociationTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventTestItemQualityGroup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventTestItemQualityGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionPayablesTrans</Name>
			<Relation></Relation>
			<Table>JournalizingDefinitionPayablesTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PriceDiscTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PriceDiscTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProdBOM</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProdBOM</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProdTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProdTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchLine</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>PurchLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchPriceTolerance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchPriceTolerance</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ReqItemTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ReqItemTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ReqTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ReqTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RouteOpr</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RouteOpr</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RouteVersion</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RouteVersion</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SalesLine</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>SalesLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendItemMatchingPolicy</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendItemMatchingPolicy</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRItemListLine</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>modelGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>projCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>defaultProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>configActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>productVersionActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>defaultProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ABC</Name>
			<Label>@SYS19424</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ABCValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ABCContributionMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ABCRevenue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ABCTieUp</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AlcoholDeclaration_RU</Name>
			<Label>@SYS4002797</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AlcoholProductionTypeId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlcoholManufacturerId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlcoholStrength_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllFields</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ABCContributionMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ABCRevenue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ABCTieUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ABCValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltConfigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoReportFinished</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchNumGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMCalcGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMManualReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissionGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Density</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalLIFOAvoidCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalLIFONormalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalLIFONormalValueCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastDMPInclude</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>grossDepth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>grossHeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>grossWidth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventFiscalLIFOGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDimCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemPriceToleranceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchingPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NGPCodesTable_FR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackagingGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Phantom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryVendorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdFlushingPrincip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>projCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesContributionRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPercentMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceModelBasic</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapConst</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapVar</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialNumGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sortCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardConfigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardInventVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardInventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardInventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatisticsFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaraWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPackagingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseAltItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSArrivalHandlingTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BomWHSReleasePolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AlternativeProduct</Name>
			<Label>@SYS300188</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseAltItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltConfigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventVersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOM</Name>
			<Label>@SYS300199</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapConst</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScrapVar</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Phantom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoReportFinished</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMCalculation</Name>
			<Label>@SYS5681</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMCalcGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>defaultProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>productSubtype</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>productDimensionGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Costing</Name>
			<Label>@SYS12539</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDimCostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Coverage</Name>
			<Label>@SYS26726</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomsTariff_IN</Name>
			<Label>@GLS5189</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsImportTariffCodeTable_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsExportTariffCodeTable_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultProductDimensions</Name>
			<Label>@SYS73762</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StandardConfigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardInventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardInventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardInventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardInventVersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Deleted</Name>
			<Label>@SYS4197</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPExternalItem</Name>
			<Label>@SYS54845</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>defaultExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>defaultExternalItemDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPItem</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExciseTariffcode_IN</Name>
			<Label>@GLS5263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExciseTariffCodes_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EximIncentiveSchemes_IN</Name>
			<Label>@GLS61430</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EximProductGroupTable_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxationOrigin_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxFiscalClassification_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExceptionCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProductType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ICMSOnService_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApproxTaxValue_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScaleIndicator_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CNPJ_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalLIFO</Name>
			<Label>@SYS93008</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventFiscalLIFOGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalLIFOAvoidCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalLIFONormalValueCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalLIFONormalValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets_RU</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroupId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Forecast</Name>
			<Label>@SYS13699</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForecastDMPInclude</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatProcId_CZ</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatisticsFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NGPCodesTable_FR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatExclude</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Groups</Name>
			<Label>@SYS1177</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>modelGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>productDimensionGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommissionGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchNumGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialNumGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackagingGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemPriceToleranceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Handling</Name>
			<Label>@SYS55210</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Integration</Name>
			<Label>@SYS119497</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IntraCompany_RU</Name>
			<Label>@GLS220550</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SkipIntraCompanySync_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatProcId_CZ</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NGPCodesTable_FR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatisticsFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatChargePerKg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatExclude</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventPriceUpdate</Name>
			<Label>@SYS25118</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostModel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceMatching</Name>
			<Label>@SYS113690</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MatchingPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemAlternative</Name>
			<Label>@SYS21956</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseAltItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltConfigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventVersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemCoverage</Name>
			<Label>@SYS21672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrimaryVendorId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemData</Name>
			<Label>@SYS23860</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPackagingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaraWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Packing_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MarkupCode_RU</Name>
			<Label>@SYS116804</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Measurement</Name>
			<Label>@SYS2021</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Density</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>defaultProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>defaultProductDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NaturalTax_LV</Name>
			<Label>@SYS4080933</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NRTaxGroup_LV</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Origin</Name>
			<Label>@SYS17860</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Packaging</Name>
			<Label>@SYS300202</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackagingGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPackagingQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsApprovedVendor</Name>
			<Label>@PRO1545</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsVendorCheckItem</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsItemCustomData</Name>
			<Label>@PRO1371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsFreightAllocationGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsItemData</Name>
			<Label>@SYS23860</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsShelfAdvice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsShelfLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBestBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchMergeDateCalculationMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsItemRebateGroup</Name>
			<Label>@PRO1317</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsItemRebateGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPotency</Name>
			<Label>@PSC61</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSBaseAttributeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSTargetFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PDSPotencyAttribRecording</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PhysicalDimensions</Name>
			<Label>@SYS50219</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>grossDepth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>grossWidth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>grossHeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitVolume</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfFormulaPlanning</Name>
			<Label>@PRO413</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfProductType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfPlanningItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfYield</Name>
			<Label>@PRO68</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfYieldPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PriceUpdate</Name>
			<Label>@SYS25118</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceModelBasic</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesContributionRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPercentMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductConfigurator</Name>
			<Label>@SYS26331</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StandardConfigId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Production</Name>
			<Label>@SYS4398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMManualReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdFlushingPrincip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BomWHSReleasePolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjAdministration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>projCategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>projCategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseAdministration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemPriceToleranceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryVendorId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchasePriceUpdate</Name>
			<Label>@SYS25118</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchModel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SAD</Name>
			<Label>@GLS109238</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SADRateCode_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesAdministration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommissionGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PKWiUCode_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPriceUpdate</Name>
			<Label>@SYS25118</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceModelBasic</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesContributionRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPercentMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceCode_IN</Name>
			<Label>@GLS5065</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCodeTable_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShippingAndReceiving</Name>
			<Label>@SYS300201</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WMSArrivalHandlingTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sortCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tracking</Name>
			<Label>@SYS116849</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BatchNumGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialNumGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarehouseManagement</Name>
			<Label>@SYS50169</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sortCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSArrivalHandlingTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WeightMeasurements</Name>
			<Label>@SYS300200</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaraWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>grossWeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Excise_IN</Name>
			<Label>@GLS5005</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DSA_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExciseRecordType_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExciseTariffCodes_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SATCodeId_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATTariffFraction_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade_MX</Name>
			<Label>@MexicoCFDI:ForeignTrade</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BrandCodeId_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GST_IN</Name>
			<Label>@TAXGST:GST</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HSNCodeTable_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceAccountingCodeTable_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Exempt_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonGST_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxRateTypeGroup</Name>
			<Label>@TaxGST:TaxRateType</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HMIMHazardousMaterial</Name>
			<Label>@SCM:HazardousMaterial</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMIMIndicator</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>COODualUseProduct</Name>
			<Label>@SCM:DualUseProducts</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>COODualUseProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>COODualUseCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs_IN</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EximProductGroupTable_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ABCContributionMargin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<GroupPrompt>@SYS5446</GroupPrompt>
			<Label>@SYS11930</Label>
			<EnumType>ABC</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ABCRevenue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<GroupPrompt>@SYS10074</GroupPrompt>
			<Label>@SYS7295</Label>
			<EnumType>ABC</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ABCTieUp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<GroupPrompt>@SYS14545</GroupPrompt>
			<Label>@SYS7296</Label>
			<EnumType>ABC</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ABCValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<GroupPrompt>@SYS11762</GroupPrompt>
			<Label>@SYS10478</Label>
			<EnumType>ABC</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AlcoholManufacturerId_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AlcoholManufacturerId_RU</ExtendedDataType>
			<Label>@SYS4002801</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AlcoholProductionTypeId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AlcoholProductionTypeId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AlcoholStrength_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AlcoholStrength_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltConfigId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfigIdAlternative</ExtendedDataType>
			<GroupPrompt>@SYS14011</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltInventColorId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
			<GroupPrompt>@SYS73726</GroupPrompt>
			<Label>@SYS308676</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltInventSizeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
			<GroupPrompt>@SYS73727</GroupPrompt>
			<Label>@SYS308675</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltInventStyleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
			<GroupPrompt>@FPK270000</GroupPrompt>
			<Label>@FPK270014</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltInventVersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemVersionName</ExtendedDataType>
			<GroupPrompt>@SCM:Version</GroupPrompt>
			<Label>@SCM:AlternativeVersion</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdAlternative</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ApproxTaxValue_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ApproximateTaxValue_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroupId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetMainGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoReportFinished</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemAutoReportFinished</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchMergeDateCalculationMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventBatchMergeDateCalculationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BatchNumGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNumGroupId</ExtendedDataType>
			<Label>@SYS53815</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMCalcGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BOMLevel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMManualReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMManualReceipt</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMUnitId</ExtendedDataType>
			<Label>@SYS3622</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BrandCodeId_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BrandCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommissionGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommissItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS23785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemCostModel</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsExportTariffCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5331</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsImportTariffCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5188</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Density</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureDensity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Depth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureDepth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExceptionCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExceptionCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExciseTariffCodes_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EximProductGroupTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS58238</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FiscalLIFOAvoidCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventFiscalLIFOAvoidCalc</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FiscalLIFONormalValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventFiscalLIFONormalValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FiscalLIFONormalValueCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventFiscalLIFONormalValueCalc</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForecastDMPInclude</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastDMPInclude</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>grossDepth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDepth</ExtendedDataType>
			<Label>@SYS50291</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>grossHeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventHeight</ExtendedDataType>
			<Label>@SYS50287</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>grossWidth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventWidth</ExtendedDataType>
			<Label>@SYS50289</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Height</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ICMSOnService_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ICMSonService_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntrastatExclude</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatExclude</ExtendedDataType>
			<FeatureClass>IntrastatExcludeToggle</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatProcId_CZ</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcIdInInventTableToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventFiscalLIFOGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventFiscalLIFOGroupRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProductType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProductTypeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBuyerGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBuyerGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemDimCostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemDimCostPrice</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemPriceToleranceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemPriceToleranceGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ItemType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupCodeVend_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchingPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchMatchingPolicyWithNotSetOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>MCRPackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinimumPalletQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSMinimumPalletQuantity</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NameAlias</Name>
			<AliasFor>ItemId</AliasFor>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemNameAlias</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemNetWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NGPCodesTable_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NGPCodesTableFRId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NRTaxGroup_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvNRTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackagingGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemPackagingGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Packing_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemPackingType_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PDSBaseAttributeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBaseAttributeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PdsBestBefore</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsLeadTimeBest</ExtendedDataType>
			<Label>@PDS257</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWWMSMinimumPalletQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWMinimumPalletQty</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWWMSQtyPerLayer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyPerLayer</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWWMSStandardPalletQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCwStandardPalletQty</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsFreightAllocationGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsFreightAllocationGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsItemRebateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsItemRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PDSPotencyAttribRecording</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PDSPotencyAttribRecordingEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PdsShelfAdvice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsLeadTimeAdvice</ExtendedDataType>
			<Label>@PDS255</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PdsShelfLife</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsLeadTimeLife</ExtendedDataType>
			<Label>@PRO67</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PDSTargetFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSTargetFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsVendorCheckItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsVendorCheckItem</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Phantom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemPhantom</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PKWiUCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlPKWiUCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PmfPlanningItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfPlanningItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfProductType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfProductType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfYieldPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfYieldPct</ExtendedDataType>
			<Label>@PRO131</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrimaryVendorId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemPrimaryVendId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdFlushingPrincip</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdFlushingPrincipItem</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemProdGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdPoolId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemProdPoolId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>projCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS6114</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PropertyIdItem</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemPurchModel</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qtyPerLayer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSQtyPerLayer</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SADRateCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlSADRateCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesContributionRatio</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemSalesContributionRatio</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemSalesModel</ExtendedDataType>
			<EnumType>SalesPriceModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPercentMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemSalesPercentMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesPriceModelBasic</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesPriceModelBasic</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ScrapConst</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ScrapConst</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ScrapVar</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ScrapVar</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SerialNumGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNumGroupId</ExtendedDataType>
			<Label>@SYS53816</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5065</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipIntraCompanySync_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SkipIntraCompanySync_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>sortCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSSortCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StandardConfigId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfigIdStandard</ExtendedDataType>
			<GroupPrompt>@SYS14011</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StandardInventColorId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
			<GroupPrompt>@SYS73726</GroupPrompt>
			<Label>@SYS308672</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StandardInventSizeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
			<GroupPrompt>@SYS73727</GroupPrompt>
			<Label>@SYS308673</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StandardInventStyleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
			<GroupPrompt>@FPK270000</GroupPrompt>
			<Label>@FPK270016</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StandardInventVersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemVersionName</ExtendedDataType>
			<GroupPrompt>@SCM:Version</GroupPrompt>
			<Label>@SCM:DefaultVersion</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>standardPalletQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSStandardPalletQuantity</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StatisticsFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatMarkupPct</ExtendedDataType>
			<FeatureClass>IntrastatMarkupPctToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaraWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemTaraWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxationOrigin_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FITaxationOrigin_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxFiscalClassification_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxFiscalClassificationId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxPackagingQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPackagingQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxServiceCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitVolume</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemVolume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseAltItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemUseAlternative</ExtendedDataType>
			<Label>@SYS300190</Label>
			<EnumType>ItemNumAlternative</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Width</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMMeasureWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>WMSArrivalHandlingTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSArrivalHandlingTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSPalletTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPalletTypeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>WMSPickingQtyTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WMSAdvanced</ConfigurationKey>
			<ExtendedDataType>TimeHour24</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS51198</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DSA_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<Label>@GLS5341</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseRecordType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Intracode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>DEL_IntrastatItemCodeId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATCodeId_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceExtCodeId_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATTariffFraction_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SATTariffFraction_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HSNCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxGST:EnterHSNCode</HelpText>
			<Label>@TaxGST:HSNCodes</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceAccountingCodeTable_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxGST:EnterSAC</HelpText>
			<Label>@TaxGST:SAC</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfExempt</HelpText>
			<Label>@SYS24552</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProductLifecycleStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductLifecycleStateId</ExtendedDataType>
			<Label>@SCM:EcoResProductLifecycleState</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ScaleIndicator_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ScaleIndicator_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CNPJ_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CNPJMan_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NonGST_IN</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@TaxGST:NonGST</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxRateType</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@TaxGST:TaxRateType</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntrastatChargePerKg</Name>
			<ExtendedDataType>IntrastatMarkupPerKg</ExtendedDataType>
			<FeatureClass>IntrastatMiscChargesPerKgFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HMIMIndicator</Name>
			<ExtendedDataType>HMIMIndicator</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>COODualUseProduct</Name>
			<ConfigurationKey>COOCertification</ConfigurationKey>
			<Label>@SCM:DualUseProducts</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>COODualUseCode</Name>
			<ConfigurationKey>COOCertification</ConfigurationKey>
			<ExtendedDataType>COODualUseCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PreventPhysicalDimensionSync</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSPreventPhysicalDimensionSync</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CostBOMLevel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostBOMLevel</ExtendedDataType>
			<FeatureClass>BOMCalcJobExcludeProdOrderFromCostCalculationFeature</FeatureClass>
		</AxTableField>
        <AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Null>Yes</Null>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BomWHSReleasePolicy</Name>
			<EnumType>BomWHSReleasePolicy</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes>
		<AxTableFullTextIndex>
			<Name>FullTextIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>NameAlias</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableFullTextIndex>
	</FullTextIndexes>
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NameAliasIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>NameAlias</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventFiscalLIFOGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventFiscalLIFOGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ExciseTariffCodes_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>CRSEIndia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ExciseTariffCodes_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustomsExportTariffCodeTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>CRSEIndia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsExportTariffCodeTable_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustomsImportTariffCodeTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>CRSEIndia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsImportTariffCodeTable_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ServiceCodeTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>CRSEIndia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceCodeTable_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EximProductGroupTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>CRSEIndia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EximProductGroupTable_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PmfProductTypePlanningItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PmfPlanningItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PmfProductType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDimCostPriceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemDimCostPrice</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PmfProductType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CostGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemProductIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HSNCODETABLE_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>CRSEIndia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>HSNCodeTable_IN</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>MCRPackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>IntrastatTransferMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
					<MapFieldTo>IntrastatCommodity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatExclude</MapField>
					<MapFieldTo>IntrastatExclude</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatTransferMap</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntraUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemType</MapField>
					<MapFieldTo>ItemType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupPct</MapField>
					<MapFieldTo>StatisticsFactor</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NetWeightByUnit</MapField>
					<MapFieldTo>NetWeight</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NGPCodesTable_FR</MapField>
					<MapFieldTo>NGPCodesTable_FR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigCountryRegionId</MapField>
					<MapFieldTo>OrigCountryRegionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigState</MapField>
					<MapFieldTo>OrigStateId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Port</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatProcId</MapField>
					<MapFieldTo>IntrastatProcId_CZ</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Transport</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Weight</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AlcoholManufacturer_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AlcoholManufacturer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AlcoholManufacturerId_RU</Name>
					<SourceEDT>AlcoholManufacturerId_RU</SourceEDT>
					<Field>AlcoholManufacturerId_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AlcoholProductionType_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AlcoholProductionType_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AlcoholProductionTypeId_RU</Name>
					<SourceEDT>AlcoholProductionTypeId_RU</SourceEDT>
					<Field>AlcoholProductionTypeId_RU</Field>
					<RelatedField>TypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AltEcoResColor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResColor</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AltEcoResColor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltInventColorId</Name>
					<Field>AltInventColorId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AltEcoResConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResConfiguration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AltEcoResConfiguration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltConfigId</Name>
					<Field>AltConfigId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AltEcoResSize</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResSize</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AltEcoResSize</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltInventSizeId</Name>
					<Field>AltInventSizeId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AltEcoResStyle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResStyle</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AltEcoResstyle</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltInventStyleId</Name>
					<Field>AltInventStyleId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AltEcoResVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AltEcoResVersion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltInventVersionId</Name>
					<Field>AltInventVersionId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AlternativeInventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltItemId</Name>
					<SourceEDT>ItemIdAlternative</SourceEDT>
					<Field>AltItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BatchNumGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventNumGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BatchNumGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BatchNumGroupId</Name>
					<SourceEDT>InventNumGroupId</SourceEDT>
					<Field>BatchNumGroupId</Field>
					<RelatedField>NumGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCalcGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCalcGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMCalcGroupId</Name>
					<Field>BOMCalcGroupId</Field>
					<RelatedField>CalcGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalcGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCostGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCostGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostGroupId</Name>
					<Field>CostGroupId</Field>
					<RelatedField>CostGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CostGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CommissionItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CommissionItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CommissionGroupId</Name>
					<Field>CommissionGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsExportTariffCodeTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5331</EntityRelationshipRole>
			<RelatedTable>CustomsTariffCodeTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustomsTariffCodeTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsTariffCodeTable_IN_InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsExportTariffCodeTable_IN</Name>
					<Field>CustomsExportTariffCodeTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsImportTariffCodeTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5188</EntityRelationshipRole>
			<RelatedTable>CustomsTariffCodeTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustomsTariffCodeTable_IN_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsTariffCodeTable_IN_1_InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsImportTariffCodeTable_IN</Name>
					<Field>CustomsImportTariffCodeTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<NavigationPropertyMethodNameOverride>Product</NavigationPropertyMethodNameOverride>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProduct</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResProduct_InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ExceptionCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ExceptionCodeTable_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxFiscalClassification_BR</Name>
					<Field>TaxFiscalClassification_BR</Field>
					<RelatedField>TaxFiscalClassificationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExceptionCode_BR</Name>
					<Field>ExceptionCode_BR</Field>
					<RelatedField>ExceptionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExciseTariffCodes_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5344</EntityRelationshipRole>
			<RelatedTable>ExciseTariffCodes_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ExciseTariffCodes_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ExciseTariffCodes_IN_InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExciseTariffCodes_IN</Name>
					<Field>ExciseTariffCodes_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximProductGroupTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximProductGroupTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EximProductGroupTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximProductGroupTable_IN_InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EximProductGroupTable_IN</Name>
					<Field>EximProductGroupTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatProcId_CZ</Name>
					<Field>IntrastatProcId_CZ</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBuyerGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventBuyerGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBuyerGroupId</Name>
					<Field>ItemBuyerGroupId</Field>
					<RelatedField>Group</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventFiscalLIFOGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventFiscalLIFOGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventFiscalLIFOGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventFiscalLIFOGroup_InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventFiscalLIFOGroup</Name>
					<Field>InventFiscalLIFOGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemPriceToleranceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemPriceToleranceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemPriceToleranceGroupId</Name>
					<Field>ItemPriceToleranceGroupId</Field>
					<RelatedField>ItemPriceToleranceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventPackagingGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventPackagingGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackagingGroupId</Name>
					<Field>PackagingGroupId</Field>
					<RelatedField>PackagingGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PackagingGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventProductType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventProductTypeTable_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProductType_BR</Name>
					<SourceEDT>InventProductTypeId_BR</SourceEDT>
					<Field>InventProductType_BR</Field>
					<RelatedField>ProductTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LvNRTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LvNRTaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NRTaxGroup_LV</Name>
					<SourceEDT>LvNRTaxGroup</SourceEDT>
					<Field>NRTaxGroup_LV</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupCodeVend</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ModuleType_Extern</Name>
					<RelatedField>ModuleType</RelatedField>
					<ValueStr>MarkupModuleType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupCode_RU</Name>
					<Field>MarkupCode_RU</Field>
					<RelatedField>MarkupCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NGPCodesTable_FR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NGPCodesTable_FR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Role>NGPCodesTable_FR</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NGPCodesTable_FR</Name>
					<Field>NGPCodesTable_FR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OriginCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OriginCounty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountyId</Name>
					<Field>OrigCountyId</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OriginState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttrib</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsBatchAttrib</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PDSBaseAttributeId</Name>
					<Field>PDSBaseAttributeId</Field>
					<RelatedField>PdsBatchAttribId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttribByItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsBatchAttribByItem</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PDSBaseAttributeId</Name>
					<Field>PDSBaseAttributeId</Field>
					<RelatedField>PdsBatchAttribRelation</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PdsBatchAttribCode_Extern</Name>
					<RelatedField>PdsBatchAttribCode</RelatedField>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>PdsBatchAttribItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsFreightGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsFreightGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsFreightAllocationGroupId</Name>
					<Field>PdsFreightAllocationGroupId</Field>
					<RelatedField>PdsFreightAllocationCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsItemRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsItemRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PdsItemRebateGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsItemRebateGroupId</Name>
					<Field>PdsItemRebateGroupId</Field>
					<RelatedField>PdsItemRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlSADRateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlSADRateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SADRateCode_PL</Name>
					<Field>SADRateCode_PL</Field>
					<RelatedField>SADRateCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SadRateGroups</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfPlanningItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CoProductPlanningItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CoProduct</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PmfPlanningItemId</Name>
					<SourceEDT>PmfPlanningItemId</SourceEDT>
					<Field>PmfPlanningItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PrimaryVendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrimaryVendorId</Name>
					<Field>PrimaryVendorId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdGroupId</Name>
					<Field>ProdGroupId</Field>
					<RelatedField>ProdGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdPool</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdPool</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdPoolId</Name>
					<Field>ProdPoolId</Field>
					<RelatedField>ProdPoolId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PoolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>projCategoryId</Name>
					<Field>projCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetMainGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetMainGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetMainGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroupId_RU</Name>
					<SourceEDT>RAssetMainGroupID</SourceEDT>
					<Field>AssetGroupId_RU</Field>
					<RelatedField>AssetMainGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId_RU</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AssetId_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqGroupId</Name>
					<Field>ReqGroupId</Field>
					<RelatedField>ReqGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SerialNumGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventNumGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SerialNumGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SerialNumGroupId</Name>
					<SourceEDT>InventNumGroupId</SourceEDT>
					<Field>SerialNumGroupId</Field>
					<RelatedField>NumGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ServiceCodeTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5065</EntityRelationshipRole>
			<RelatedTable>ServiceCodeTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ServiceCodeTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceCodeTable_IN_InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceCodeTable_IN</Name>
					<Field>ServiceCodeTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>StandardEcoResColor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResColor</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>StandardEcoResColor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StandardInventColorId</Name>
					<Field>StandardInventColorId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>StandardEcoResConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResConfiguration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>StandardEcoResConfiguration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StandardConfigId</Name>
					<Field>StandardConfigId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>StandardEcoResSize</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResSize</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>StandardEcoResSize</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StandardInventSizeId</Name>
					<Field>StandardInventSizeId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>StandardEcoResStyle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResStyle</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>StandardEcoResStyle</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StandardInventStyleId</Name>
					<Field>StandardInventStyleId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>StandardEcoResVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>StandardEcoResVersion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StandardInventVersionId</Name>
					<Field>StandardInventVersionId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxFiscalClassification_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxFiscalClassification_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxFiscalClassification_BR</Name>
					<Field>TaxFiscalClassification_BR</Field>
					<RelatedField>FiscalClassificationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxServiceCode_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable_TaxServiceCode_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxServiceCode_BR</Name>
					<Field>TaxServiceCode_BR</Field>
					<RelatedField>ServiceCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMUnitId</Name>
					<Field>BOMUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSPalletType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSPalletType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSPalletType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSPalletTypeId</Name>
					<Field>WMSPalletTypeId</Field>
					<RelatedField>palletTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PalletTypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PropertyId</Name>
					<Field>PropertyId</Field>
					<RelatedField>PropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PropertyIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATProductCode_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTableProductCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATCodeId_MX</Name>
					<Field>SATCodeId_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATTariffFraction_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATTariffFraction_MX</Name>
					<Field>SATTariffFraction_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>6</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Brand_MX</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BrandTable_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BrandCodeId_MX</Name>
					<Field>BrandCodeId_MX</Field>
					<RelatedField>BrandCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HSNCodeTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HSNCodeTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HSNCodeTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HSNCodeTable_IN_InventTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HSNCodeTable_IN</Name>
					<Field>HSNCodeTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ServiceAccountingCodeTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ServiceAccountingCodeTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ServiceAccountingCodeTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceAccountingCodeTable_IN_InventTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceAccountingCodeTable_IN</Name>
					<Field>ServiceAccountingCodeTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductLifecycleState</Name>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResProductLifecycleState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductLifecycleStateId</Name>
					<Field>ProductLifecycleStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRateType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRateType</Name>
					<Field>TaxRateType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>COODualUseCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>COODualUseCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>COODualUseCode</Name>
					<Field>COODualUseCode</Field>
					<RelatedField>DualUseCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>