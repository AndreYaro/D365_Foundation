<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResNomenclature</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResNomenclature extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildFromNomenclatureInput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a string based on the segments of the nomenclature.
    /// </summary>
    /// <param name = "_input">The input containing build parameters.</param>
    /// <returns>A nomenclature result string.</returns>
    public static EcoResNomenclatureOutput buildFromNomenclatureInput(EcoResNomenclatureInput _input)
    {
        EcoResNomenclatureOutput result;
        EcoResNomenclatureSegment segment;
        EcoResNomenclatureSegmentAttributeValue attributeSegment;

        while select segment
            order by SegmentNumber asc
            where segment.Nomenclature == _input.parmNomenclatureRecId()
        {
            attributeSegment = segment as EcoResNomenclatureSegmentAttributeValue;

            if (attributeSegment.RecId
                && attributeSegment.AttributeSegmentType == EcoResNomenclatureAttributeSegmentType::Name)
            {
                result += attributeSegment.getSegmentAttributeName();
            }
            else
            {
                result += segment.getSegmentValue(_input);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nomenclatureSample</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a sample of the nomenclature to display to the users.
    /// </summary>
    /// <returns>A sample nomenclature string.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display EcoResNomenclatureOutput nomenclatureSample()
    {
        EcoResNomenclatureInput nomenclatureInput = EcoResNomenclatureInput::construct();

        EcoResNomenclatureOutput result;
        EcoResNomenclatureSegment segment;
        EcoResNomenclatureSegmentAttributeValue attributeSegment;

        while select segment
            order by SegmentNumber asc
            where segment.Nomenclature == this.RecId
        {
            attributeSegment = segment as EcoResNomenclatureSegmentAttributeValue;

            if (attributeSegment.RecId
                && attributeSegment.AttributeSegmentType == EcoResNomenclatureAttributeSegmentType::Name)
            {
                result += attributeSegment.getSegmentAttributeName();
            }
            else
            {
                result += segment.getSegmentSampleValue(nomenclatureInput);
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nomenclatureTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type name of the specific instance of the table.
    /// </summary>
    /// <returns>A type name.</returns>
    public display Name nomenclatureTypeName()
    {
        return tableId2PName(int642int(this.InstanceRelationType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowedSegments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Map</c> with TableId and the corresponding table label of the allowed segment types.
    /// </summary>
    /// <param name = "_nomenclatureType">The id of a table extending EcoResNomenclature.</param>
    /// <returns>A map of the allowed segment sub tables.</returns>
    public static Map getAllowedSegments(TableId _nomenclatureType)
    {
        Map allowedSegments = new Map(Types::String, Types::Int64);
        SysDictTable dictTable = new SysDictTable(tableNum(EcoResNomenclatureSegment));        
        ListEnumerator childEnumerator = dictTable.extendedBy(true).getEnumerator();

        while (childEnumerator.moveNext())
        {
            SysDictTable segmentChildDictTable = new SysDictTable(childEnumerator.current());
            
            if (isConfigurationkeyEnabled(segmentChildDictTable.configurationKeyId()))
            {
                boolean isAllowed = segmentChildDictTable.callStatic(tableStaticMethodStr(EcoResNomenclatureSegment, isSegmentAllowedForNomenclatureType), _nomenclatureType);
                
                if (isAllowed)
                {
                    if (segmentChildDictTable.id() == tableNum(EcoResNomenclatureSegmentAttributeValue))
                    {
                        EcoResNomenclatureSegmentAttributeValue::addSegmentAllowedForNomenclatureType(
                            segmentChildDictTable.id(),
                            allowedSegments);
                    }
                    else 
                    {
                        allowedSegments.insert(segmentChildDictTable.label(), segmentChildDictTable.id());
                    }
                }        
            }
        }

        return allowedSegments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editInSimpleForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the form for editing the segments of the nomenclature.
    /// </summary>
    /// <param name = "_callerRecord">The main record of the caller form (like PCClass or BOMTable).</param>
    /// <param name = "_caller">The caller form.</param>
    public void editInSimpleForm(Common _callerRecord, Object _caller)
    {
        Args args = new Args();
        args.caller(_caller);
        args.record(_callerRecord);
        args.lookupRecord(this);
        args.openMode(OpenMode::Edit);

        new Menufunction(menuitemdisplaystr(EcoResNomenclature),menuitemtype::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResNomenclature</c> table based on it's name.    
    /// </summary>
    /// <remarks>
    ///     Please note that the name does not have to be unique, there can be two nomenclature records with the same name.
    /// </remarks>
    /// <param name="_nomenclatureName">
    ///    The string name of the <c>EcoResNomenclature</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResNomenclature</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResNomenclature findByName(Name _nomenclatureName, boolean _forUpdate = false)
    {
        EcoResNomenclature nomenclature;

        nomenclature.selectForUpdate(_forUpdate);

        if (_nomenclatureName != '')
        {
            select firstonly nomenclature
                where nomenclature.Name == _nomenclatureName;
        }

        return nomenclature;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes a deep copy of the nomenclature and all its segments.
    /// </summary>
    /// <param name = "_newName">The name to assign to the copy.</param>
    public EcoResNomenclature duplicate(Name _newName)
    {
        EcoResNomenclature newRecord;

        ttsbegin;

        newRecord = DictTable::createRecord(tableId2Name(this.TableId));
        newRecord.data(this);
        newRecord.Name = _newName;
        newRecord.insert();

        EcoResNomenclatureSegment segment;

        while select segment
            where segment.Nomenclature == this.RecId
        {
            EcoResNomenclatureSegment newSegment = DictTable::createRecord(tableId2Name(int642int(segment.InstanceRelationType)));
            newSegment.data(segment);
            newSegment.Nomenclature = newRecord.RecId;
            newSegment.insert();
        }

        ttscommit;

        return newRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the nomenclature is in use.
    /// </summary>
    /// <returns>True if the nomenclature is in use; otherwise, false.</returns>
    /// <exception cref="M:Exception::Error">
    /// The method should be overridden on the subtype tables.
    /// </exception>
    public boolean isInUse()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResNomenclatureDevDoc</DeveloperDocumentation>
	<FormRef>EcoResNomenclature</FormRef>
	<Label>@SCM:EcoResNomenclature</Label>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<Abstract>Yes</Abstract>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InstanceRelationType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>