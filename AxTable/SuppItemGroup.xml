<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SuppItemGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SuppItemGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.deleteSuppItemTable();

        this.deleteCrossCompany(tableMethodStr(SuppItemGroup, delete));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSuppItemTable</Name>
				<Source><![CDATA[
    private void deleteSuppItemTable()
    {
        SuppItemTable suppItemTable;
        if (this.module == ModuleInventCustVend::Invent)
        {
            delete_from suppItemTable
                where suppItemTable.itemCode        == TableGroupAll::GroupId   &&
                      suppItemTable.itemRelation    == this.groupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCrossCompany</Name>
				<Source><![CDATA[
    private void deleteCrossCompany(str _methodName)
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query    query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun queryRun = new QueryRun(query);

            while (queryRun.Next())
            {
                SuppItemGroup companySuppItemGroup = queryRun.get(this.TableId);
                DataAreaId company = companySuppItemGroup.DataAreaId;
                if (companySuppItemGroup && company && company != curExt())
                {
                    changecompany(company)
                    {
                        SuppItemGroup suppItemGroup = SuppItemGroup::find(companySuppItemGroup.Module, companySuppItemGroup.GroupId);
                        if (suppItemGroup.RecId)
                        {
                            buf2Buf(this, suppItemGroup);
                            switch (_methodName)
                            {
                                case tableMethodStr(SuppItemGroup, delete):
                                if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(SuppItemTable)))
                                {
                                    suppItemGroup.deleteSuppItemTable();
                                }
                                break;
                            }
                        }
                            
                    }
                }
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(SuppItemModule    _module,
                              SuppItemGroupId   _groupId)
    {
        if (! SuppItemGroup::exist(_module, _groupId))
        {
            return checkFailed(strfmt("@SYS14690", _groupId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(SuppItemModule    _module,
                         SuppItemGroupId   _groupId
    )
    {
        if (_groupId)
        {
            return (select firstonly recId from suppItemGroup
                        index hint SuppItemGroupIdx
                        where suppItemGroup.module     == _module       &&
                              suppItemGroup.groupId    == _groupId
                   ).recId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static SuppItemGroup  find(SuppItemModule    _module,
                               SuppItemGroupId   _groupId,
                               boolean           _update = false)
    {
        SuppItemGroup   suppItemGroup;

        if (_groupId)
        {
            suppItemGroup.selectForUpdate(_update);

            select firstonly suppItemGroup
                index hint SuppItemGroupIdx
                where suppItemGroup.module  == _module &&
                      suppItemGroup.groupId == _groupId;
        }

        return suppItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    static SuppItemGroupName name(SuppItemModule    _module,
                                  SuppItemGroupId   _groupId)
    {
        return SuppItemGroup::find(_module, _groupId).name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();
    
        RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup;

        select firstonly retailAttributesLegalEntityLookup
            where (retailAttributesLegalEntityLookup.PurchaseSuppItemGroupId == this.GroupId
                || retailAttributesLegalEntityLookup.SalesSuppItemGroupId == this.GroupId)
                && retailAttributesLegalEntityLookup.LegalEntity == CompanyInfo::current();

        if (retailAttributesLegalEntityLookup)
        {
            return checkFailed(strfmt(("@Retail:RetailAttributesLegalEntityLookupPropertiesDeleteValidation"), this.GroupId, EcoResCategory::find(retailAttributesLegalEntityLookup.Category).Name));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SuppItem</ConfigurationKey>
	<DeveloperDocumentation>@SYS123954</DeveloperDocumentation>
	<FormRef>SuppItemGroup</FormRef>
	<Label>@SYS58265</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>GroupId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>SuppItemGroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>SuppItemGroupIdx</PrimaryIndex>
	<TableContents>BaseDefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SuppItemTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SuppItemTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SuppItemGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Module</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SuppItemModule</ExtendedDataType>
			<EnumType>ModuleInventCustVend</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SuppItemGroupName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SuppItemGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>