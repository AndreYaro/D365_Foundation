<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ShipCarrierInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ShipCarrierInterface extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isClipperShip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the shipping carrier is the Clipper Ship company.
    /// </summary>
    /// <returns>
    ///    true if the carrier is Clipper Ship; otherwise, false.
    /// </returns>
    public boolean isClipperShip()
    {
        return this.CarrierInterfaceId  == ShipCarrierInterfaceId::ClipperShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFedEx</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the shipping carrier is the FedEx company.
    /// </summary>
    /// <returns>
    ///    true if the carrier is FedEx; otherwise, false.
    /// </returns>
    public boolean isFedEx()
    {
        return this.CarrierInterfaceId  == ShipCarrierInterfaceId::FedEx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUPS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the shipping carrier is the UPS company.
    /// </summary>
    /// <returns>
    ///    true if the carrier is UPS; otherwise, false.
    /// </returns>
    public boolean isUPS()
    {
        return this.CarrierInterfaceId  == ShipCarrierInterfaceId::UPS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        DlvMode     dlvMode;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                //when shipping module is turned on, we have to make sure all the mode of delivery has be setup properly
                case fieldNum(ShipCarrierInterface, Enabled):
                    if (this.Enabled)
                    {
                        select firstonly RecId from dlvMode
                            where  ( dlvMode.ShipCarrierId == ''
                                  || dlvMode.ShipCarrierAccountCode    == '')
                                && ( dlvMode.ShipCarrierDlvType == ShipCarrierDlvType::Air
                                  || dlvMode.ShipCarrierDlvType == ShipCarrierDlvType::Ground);

                        if (dlvMode.RecId != 0)
                        {
                            return checkFailed(strFmt("@SYS117096",
                                                      fieldPName(DlvMode, ShipCarrierId),
                                                      fieldPName(DlvMode, ShipCarrierAccountCode),
                                                      tablePName(DlvMode) ));  //"%1 and %2 of all %3 must be specified."
                        }
                    }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <see cref="T:ShipCarrierInterface" />, if
    ///    not, an error message is displayed.
    /// </summary>
    /// <param name="_interfaceId">
    ///    The interface ID of the <c>ShipCarrierInterface</c> table record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(ShipCarrierInterfaceId _interfaceId)
    {
        boolean ret = true;

        if (!ShipCarrierInterface::exist(_interfaceId))
        {
            ret = checkFailed(strFmt(ShipCarrierInterface::txtNotExist(), _interfaceId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the default data for the <see cref="T:ShipCarrierInterface" />.
    /// </summary>
    /// <returns>
    ///    true if new records were created; otherwise, false.
    /// </returns>
    public static boolean createDefaultData()
    {
        ShipCarrierInterface        shipCarrierInterface;
        SysDictEnum                 sysDictEnum = new SysDictEnum(enumNum(ShipCarrierInterfaceId));
        Counter                     i = 0;
        ShipCarrierInterfaceId      shipCarrierInterfaceId;
        boolean                     updated = false;

        try
        {
            ttsbegin;

            shipCarrierInterfaceId       = sysDictEnum.firstValue();

            while (i < enumCnt(ShipCarrierInterfaceId))
            {
                select firstonly shipCarrierInterface
                    where shipCarrierInterface.CarrierInterfaceId == shipCarrierInterfaceId;

                if (!shipCarrierInterface)
                {
                    shipCarrierInterface.initValue();
                    shipCarrierInterface.CarrierInterfaceId = shipCarrierInterfaceId;
                    shipCarrierInterface.insert();

                    updated = true;
                }

                shipCarrierInterfaceId = sysDictEnum.nextValue(shipCarrierInterfaceId);
                i++;
            }

            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            retry;
        }

        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <see cref="T:ShipCarrierInterface" /> exists.
    /// </summary>
    /// <param name="_interfaceId">
    ///    The interface ID of the <c>ShipCarrierInterface</c> table record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(ShipCarrierInterfaceId _interfaceId)
    {
        boolean found;

        found = (select firstonly RecId from shipCarrierInterface
                 where shipCarrierInterface.CarrierInterfaceId == _interfaceId).RecId != 0;
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <see cref="T:ShipCarrierInterface" />.
    /// </summary>
    /// <param name="_interfaceId">
    ///    The interface ID of the <c>ShipCarrierInterface</c> table record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ShipCarrierInterface</c> table or an empty record.
    /// </returns>
    public static ShipCarrierInterface find(
        ShipCarrierInterfaceId  _interfaceId,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ShipCarrierInterface      shipCarrierInterface;

        shipCarrierInterface.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            shipCarrierInterface.concurrencyModel(_concurrencyModel);
        }

        if (_interfaceId)
        {
            shipCarrierInterface.selectForUpdate (_forUpdate);
            shipCarrierInterface.selectLocked    (_forUpdate);

            select firstonly shipCarrierInterface
                where shipCarrierInterface.CarrierInterfaceId == _interfaceId;
        }

        return shipCarrierInterface;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the carrier interface is enabled.
    /// </summary>
    /// <returns>
    /// true if the carrier interface is enabled; otherwise, false.
    /// </returns>
    public static boolean interfaceEnabled()
    {
        ShipCarrierInterface    shipCarrierInterface;

        select RecId from shipCarrierInterface
            where shipCarrierInterface.Enabled;

        return shipCarrierInterface.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>ShipCarrierInterface</c> table does not
    ///    exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates that the record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        //Record with Ship Carrier Interface ID %1 does not exist
        return "@SYS121370";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ShipCarrier</ConfigurationKey>
	<DeveloperDocumentation>@SYS126967</DeveloperDocumentation>
	<Label>@SYS116800</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CarrierInterfaceId</TitleField1>
	<TitleField2>Enabled</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>IdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>IdIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Enabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierInterfaceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Enabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS110464</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CarrierInterfaceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Enabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CarrierInterfaceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ShipCarrierInterfaceId</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Enabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ShipCarrierEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TestMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ShipCarrierTestMode</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CarrierInterfaceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>