<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocChorusProServiceCodeTable_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
using Newtonsoft.Json.Linq;

public class BusinessDocChorusProServiceCodeTable_FR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFrom</Name>
				<Source><![CDATA[
    private void initFrom(BusinessDocChorusProSiretCacheTable_FR _siretCacheTable, BusinessDocChorusProService _service)
    {
        this.SiretRefRecId = _siretCacheTable.RecId;
        this.ServiceCode = _service.parmCode();
        this.ServiceLabel = _service.parmLabel();
        this.ServiceCodeId = _service.parmId();
        this.Active = _service.parmActive();
        this.IsDeleted = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromJArrayServiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update table records for a given <c>_siret</c>.
    /// </summary>
    /// <param name = "_siret">A siret.</param>
    /// <param name = "_serviceList">A list of Chorus Pro services.</param>
    /// <param name = "_forceUpdate">Select for update; optional.</param>
    /// <returns>True, if successfully updated; otherwise, false.</returns>
    internal static boolean updateFromJArrayServiceList(str _siret, JArray _serviceList, boolean _forceUpdate = false)
    {
        boolean ret = false;

        var services = BusinessDocChorusProServiceCollection::constructFromJArray(_serviceList);
        int servicesHashSum = services.GetHashCode();

        BusinessDocChorusProSiretCacheTable_FR siretCacheTable;
        select firstonly siretCacheTable
            where siretCacheTable.Siret == _siret;
        
        if (siretCacheTable.RecId == 0)
        {
            throw error("@BusinessDocumentSubmissionService:SiretNotFound");
        }

        if (_forceUpdate || siretCacheTable.ServiceCodesHashSum == 0 || siretCacheTable.ServiceCodesHashSum != servicesHashSum)
        {
            ttsbegin;

            BusinessDocChorusProServiceCodeTable_FR::deleteServiceCodes(siretCacheTable.RecId);            
            BusinessDocChorusProServiceCodeTable_FR::fillFromServiceCollection(siretCacheTable, services);

            siretCacheTable.selectForUpdate(true);
            siretCacheTable.ServiceCodesHashSum = servicesHashSum;
            siretCacheTable.update();

            ttscommit;

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteServiceCodes</Name>
				<Source><![CDATA[
    private static void deleteServiceCodes(RefRecId _siretCacheTableRecId)
    {
        BusinessDocChorusProServiceCodeTable_FR serviceCodeTable;
        update_recordset serviceCodeTable
            setting IsDeleted = NoYes::Yes,
            SiretRefRecId = 0
            where serviceCodeTable.SiretRefRecId == _siretCacheTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFromServiceCollection</Name>
				<Source><![CDATA[
    private static void fillFromServiceCollection(BusinessDocChorusProSiretCacheTable_FR _siretCacheTable, BusinessDocChorusProServiceCollection _services)
    {
        Enumerator i = _services.getEnumerator();
        while (i.moveNext())
        {
            BusinessDocChorusProService service = i.current();
            BusinessDocChorusProServiceCodeTable_FR serviceCodeTable;
            select forupdate firstonly serviceCodeTable
                where serviceCodeTable.ServiceCode == service.parmCode() && serviceCodeTable.ServiceCodeId == service.parmId();
            serviceCodeTable.initFrom(_siretCacheTable, service);
            if (serviceCodeTable.RecId == 0)
            {
                serviceCodeTable.insert();
            }
            else
            {
                serviceCodeTable.update();
            }
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BusinessDocChorusProServiceCodeTable_FR find(
        RecId _recId,
        boolean _update = false)
    {
        BusinessDocChorusProServiceCodeTable_FR  serviceCodeTable;

        serviceCodeTable.selectForUpdate(_update);

        if (_recId)
        {
            select firstonly serviceCodeTable
                where serviceCodeTable.RecId == _recId;
        }

        return serviceCodeTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionContextField>FR</CountryRegionContextField>
	<DeveloperDocumentation>@BusinessDocumentSubmissionService:ChorusProServiceCodeDevDoc</DeveloperDocumentation>
	<Label>@BusinessDocumentSubmissionService:ChorusProServiceCodeTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ServiceCode</TitleField1>
	<TitleField2>ServiceLabel</TitleField2>
	<Modules>EInvoice</Modules>
	<ReplacementKey>SiretServiceCodeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiretRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceLabel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceCode</Name>
			<ExtendedDataType>BusinessDocInvoiceAccountServiceCode_FR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceLabel</Name>
			<ExtendedDataType>BusinessDocInvoiceAccountServiceLabel_FR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<Label>@BusinessDocumentSubmissionService:Active</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SiretRefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@BusinessDocumentSubmissionService:Siret</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ServiceCodeId</Name>
			<ExtendedDataType>BusinessDocumentServiceCodeId_FR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDeleted</Name>
			<Label>@BusinessDocumentSubmissionService:IsDeleted</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SiretServiceCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ServiceCodeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Siret</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BusinessDocChorusProSiretCacheTable_FR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SiretRefRecId</Name>
					<Field>SiretRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>