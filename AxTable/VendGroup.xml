<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendGroup extends Common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearingPeriod</Name>
				<Source><![CDATA[
    ClearingPeriod clearingPeriod()
    {
        return (this.ClearingPeriod ? this.ClearingPeriod : VendParameters::find().Due2Payment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strfmt("@SYS134392", this.VendGroup));
        }

        ttsbegin;

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        this.writeCrossCompany(tableMethodStr(VendGroup, delete));

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasForecastPurch</Name>
				<Source><![CDATA[
    display ForecastHasPurch hasForecastPurch()
    {
        return (select firstonly forecastPurch where forecastPurch.VendGroupId == this.VendGroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the foreign keys in other tables according to the change of the corresponding primary key
    /// value in this table.
    /// </summary>
    public void renamePrimaryKey()
    {
        Common originalRecord = this.orig();

        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, originalRecord);
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();

        this.writeCrossCompany(tableMethodStr(VendGroup, renamePrimaryKey), originalRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(VendGroupId _vendGroup )
    {
        boolean ret = true;

        if (!VendGroup::exist(_vendGroup))
        {
            ret = checkFailed(strfmt(VendGroup::txtNotExist(), _vendGroup));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(VendGroupId _vendGroup )
    {
        return (select firstonly RecId from vendGroup
                    where vendGroup.VendGroup == _vendGroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendGroup find(
        VendGroupId _vendGroup ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendGroup vendGroup;

        vendGroup.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendGroup where vendGroup.VendGroup == _vendGroup;

        return vendGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendorGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>VendGroup</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    static void lookupVendorGroup(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(VendGroup),_ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(VendGroup));
        sysTableLookup.addLookupfield(fieldnum(VendGroup, VendGroup));
        sysTableLookup.addLookupfield(fieldnum(VendGroup, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcRlookupVendGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a lookup selection for vendor groups.
    /// </summary>
    /// <param name="_ctrl">
    /// The control for which lookup is performed.
    /// </param>
    public static void mcRlookupVendGroup(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(VendGroup),_ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(VendGroup));

        sysTableLookup.addLookupfield(fieldNum(VendGroup,VendGroup));
        sysTableLookup.addLookupfield(fieldNum(VendGroup,Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    static Name name(VendGroupId _vendGroup)
    {
        return VendGroup::find(_vendGroup).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS11764";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.VendAccountNumSeq)
            {
                NumberSequenceReference vendAccountOnAPParameter = VendParameters::numRefVendAccount();

                if (!vendAccountOnAPParameter.NumberSequenceId || !CustVendCopyDataUtil::isVendAccountNumSequenceGlobal())
                {
                    ret = false;
                    Error("@AccountsPayable:ErrorForCannotAssignNumSeqForGroup");
                }
                else
                {
                    NumberSequenceTable numSeqVendAccountOnARParameter = NumberSequenceTable::find(vendAccountOnAPParameter.NumberSequenceId);
                
                    if (numSeqVendAccountOnARParameter != null)
                    {
                        NumberSequenceTable numSeqVendAccountOnGroup = NumberSequenceTable::find(this.VendAccountNumSeq);

                        if (numSeqVendAccountOnGroup.NumberSequenceScope != numSeqVendAccountOnARParameter.NumberSequenceScope)
                        {
                            ret = false;
                            error("@AccountsPayable:ScopeErrorForNumSeqOnVendGroup");
                        }
                    }
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesAnyGroupHaveVendAccountNumberSequenceSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if any vendor group in current company has number sequence set for vendor account number.
    /// </summary>
    /// <returns> True if any vendor group has number sequence set for vendor account; false, otherwise.</returns>
    public static boolean doesAnyGroupHaveVendAccountNumberSequenceSet()
    {
        boolean found;

        found =  (select firstonly
                    RecId
                  from
                        vendGroup
                  where
                        vendGroup.VendAccountNumSeq > 0).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCrossCompany</Name>
				<Source><![CDATA[
    private void writeCrossCompany(str _methodName, Common _originalRecord = null)
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun    queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                VendGroup companyVendGroup = queryRun.get(this.TableId);
                DataAreaId company = companyVendGroup.DataAreaId;

                if (companyVendGroup && company && company != curExt())
                {
                    changecompany(company)
                    {
                        VendGroup vendGroup = VendGroup::find(companyVendGroup.VendGroup);
                        if (vendGroup.RecId)
                        {
                            buf2Buf(this, vendGroup);

                            switch (_methodName)
                            {
                                case tableMethodStr(VendGroup, delete):
                                    if (!DimensionValidation::canDeleteEntityValue(vendGroup))
                                    {
                                        throw error(strfmt("@SYS134392", vendGroup.VendGroup));
                                    }

                                    DimensionAttributeValue::updateForEntityValueDelete(vendGroup);
                                    break;
                                case tableMethodStr(VendGroup, renamePrimaryKey):
                                    // Both methods must be called even though there is no super() being wrapped in order to get all telemetry and update the records
                                    DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(vendGroup, _originalRecord);
                                    rename.syncRenamedValuePreSuper();
                                    rename.syncRenamedValuePostSuper();
                                    break;
                                default:
                                    return;
                            }
                        }
                            
                    }
                }
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(this, fieldNum(VendGroup, VendGroup), this, fieldNum(VendGroup, DefaultDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>DimensionAttributeDelegates_getTablesToAddCopiedValuesTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of tables and fields to update when copying the values to default dimensions on existing values.
    /// </summary>
    /// <param name = "_tableSet">A <c>Set</c> of <c>DimensionCopyValuesDataContract</c> values.</param>
    [SubscribesTo(classStr(DimensionAttributeDelegates), delegateStr(DimensionAttributeDelegates, getTablesToAddCopiedValuesTo))]
    public static void DimensionAttributeDelegates_getTablesToAddCopiedValuesTo(Set _tableSet)
    {
        DimensionCopyValueDataContract contract = DimensionCopyValueDataContract::construct(tableNum(VendGroup), fieldNum(VendGroup, DefaultDimension));
        contract.addKeyFieldDimensionPair(tableNum(VendGroup), fieldNum(VendGroup, VendGroup));
        _tableSet.add(contract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126045</DeveloperDocumentation>
	<FormRef>VendGroup</FormRef>
	<Label>@SYS10022</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>VendGroup</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>GroupIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Vendor</Modules>
	<PrimaryIndex>GroupIdx</PrimaryIndex>
	<ReplacementKey>GroupIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventPosting</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventPosting</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClearingPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClearingPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExcludeFromSignup_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccountNumSeq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyExchangeRateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchangeRateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClearingPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax_PL</Name>
			<Label>@SYS22916</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClearingPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<ExtendedDataType>VendClearingPeriod</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymTermId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendTaxGroup</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExcludeFromSignup_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendRequestSignupExcludeVendor_PSN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendAccountNumSeq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingCurrencyExchangeRateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>CustVendExchRateTypeEnhancementFeature</FeatureClass>
			<Label>@Ledger:DefaultExchangeRateType</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReportingCurrencyExchangeRateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>CustVendExchRateTypeEnhancementFeature</FeatureClass>
			<Label>@Ledger:ReportingCurrencyExchangeRateType</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendGroup</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingCurrencyExchangeRateType</MapField>
					<MapFieldTo>AccountingCurrencyExchangeRateType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ClearingPeriod</MapField>
					<MapFieldTo>ClearingPeriod</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GroupId</MapField>
					<MapFieldTo>VendGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymTermId</MapField>
					<MapFieldTo>PaymTermId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchangeRateType</MapField>
					<MapFieldTo>ReportingCurrencyExchangeRateType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymTermId</Name>
					<SourceEDT>PaymTermId</SourceEDT>
					<Field>PaymTermId</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTermClearingPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTermClearingPeriod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClearingPeriod</Name>
					<SourceEDT>ClearingPeriod</SourceEDT>
					<Field>ClearingPeriod</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendGroup</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>CustVendTaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendAccountNumSeqRelation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccountNumSeq</Name>
					<Field>VendAccountNumSeq</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AccountingCurrencyExchangeRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ExchangeRateType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingCurrencyExchangeRateType</Name>
					<Field>AccountingCurrencyExchangeRateType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReportingExchangeRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ExchangeRateType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReportingCurrencyExchangeRateType</Name>
					<Field>ReportingCurrencyExchangeRateType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>