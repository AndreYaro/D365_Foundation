<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesBasketLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesBasketLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountSales</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountSales()
    {
        SalesCategory salesCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
            this.ItemId,
            EcoResCategoryNamedHierarchyRole::Sales).Category;
        return InventPosting::accountItemLedgerDimensionFromParameters(this.buildAccountItemLedgerDimensionParameter(salesCategory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_salesCategory">A sales category.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(SalesCategory _salesCategory)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            InventAccountType::SalesRevenue,
            this.ItemId,
            this.inventTable().itemGroupId(),
            _salesCategory,
            this.custAccount(),
            this.custGroup(),
            this.TaxGroup,
            this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur amountCur, Qty  qty, TransDate transDate, Tax _tax = null, boolean _skipRounding = false , boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(amountCur, qty, transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>basketTransId</Name>
				<Source><![CDATA[
    str basketTransId()
    {
        return 'ecp'+strFmt('%1',this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmount(Qty qty = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcGrossAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur  calcGrossAmountExclTax(Qty _qty = this.SalesQty,
                                             TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                             Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcGrossAmountExclTax(_qty, _transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty qty = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountExclTax(Qty  qty = this.SalesQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().calcLineAmountExclTax(qty,  transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.SalesQty, PriceDiscPolicyCheckPolicy _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDisc(Qty qty = this.SalesQty)
    {
        return this.salesPurchLineInterface().calcLineDisc(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDiscExclTax(Qty qty = this.SalesQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(qty, transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    // This method is called when setting disc fields
    boolean canEditDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(CurrencyCode            _currencyCode,
                                TradeCurencyConversion  _tradeCurrencyConversion = TradeCurencyConversion::ExchRate)
    {
        ttsbegin;

        this.SalesPrice   = ExchangeRateHelper::curPrice2CurPrice(this.SalesPrice, this.CurrencyCode, _currencyCode);
        this.LineDisc     = ExchangeRateHelper::curPrice2CurPrice(this.LineDisc, this.CurrencyCode, _currencyCode);
        this.MultiLnDisc  = ExchangeRateHelper::curPrice2CurPrice(this.MultiLnDisc, this.CurrencyCode, _currencyCode);
        this.SalesMarkup  = ExchangeRateHelper::curPrice2CurPrice(this.SalesMarkup, this.CurrencyCode, _currencyCode);
        this.LineAmount   = CurrencyExchangeHelper::curAmount2CurAmount(this.LineAmount, this.CurrencyCode, _currencyCode);
        this.CurrencyCode = _currencyCode;

        this.updateBasedOnTradeCurrencyConversion(_tradeCurrencyConversion);
        this.LineAmount   = this.calcLineAmount();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnTradeCurrencyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the line amounts, price and discounts based on <c>TradeCurencyConversion</c>.
    /// </summary>
    /// <param name = "_tradeCurrencyConversion">A trade currency conversion value.</param>
    [Hookable]
    private void updateBasedOnTradeCurrencyConversion(TradeCurencyConversion _tradeCurrencyConversion)
    {
        switch (_tradeCurrencyConversion)
        {
            case TradeCurencyConversion::ExchRate:
                break;
            case TradeCurencyConversion::TradeAgreements:
                this.salesPurchLineInterface().resetPriceAgreement();
                this.setPriceDisc(this.inventDim());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    void createMarkupTrans(SalesBasket  salesBasket)
    {
        CustTable   custTable = CustTable::find(salesBasket.CustAccount);

        Markup::insertMarkupTrans(HeadingLine::Line,
                                  MarkupModuleType::Cust,
                                  this,
                                  salesBasket.CustAccount,
                                  salesBasket.markupGroup(),
                                  salesBasket.CurrencyCode,
                                  salesBasket.languageId(),
                                  this.ItemId,
                                  this.inventTable().salesMarkupGroup(),
                                 (this.LineAmount < 0),    // invert sign on creditnotes
                                  true,
                                  custTable.DlvMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    CustAccount custAccount()
    {
        return this.salesBasket().CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custGroup</Name>
				<Source><![CDATA[
    CustGroupId custGroup()
    {
        return this.salesBasket().custTable_CustAccount().CustGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault defaultDimension()
    {
        return this.salesBasket().defaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    public SalesShippingDate deliveryDate(SalesShippingDate blankDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.salesBasket().DeliveryDate)
        {
            return this.salesBasket().DeliveryDate;
        }

        return blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    DiscAmount discAmount()
    {
        //    return PriceDisc::discAmount(SalesParameters::find().disc, this.lineDiscAmount(), this.multiLnDiscAmount());
        return PriceDisc::discAmount(SalesParameters::find().Disc, this.LineDisc, this.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    DiscPct   discPercent()
    {
        //    return PriceDisc::discPercent(SalesParameters::find().disc, this.linePercent(), this.multiLnPercent());
        return PriceDisc::discPercent(SalesParameters::find().Disc, this.LinePercent, this.MultiLnPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProductNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product number.
    /// </summary>
    /// <returns>
    /// The product number that is based on the product name and dimensions in the <c>SalesBasketLine</c>
    /// record.
    /// </returns>
    public display EcoResProductDisplayProductNumber displayProductNumber()
    {
        InventDimCombination inventDimCombination = InventDimCombination::findByInventDim(this.ItemId, this.inventDim());
        return EcoResProduct::find(inventDimCombination.DistinctProductVariant).DisplayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editItemConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the item configuration.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the item configuration should be set.
    /// </param>
    /// <param name="_displayProductNumber">
    /// The item configuration.
    /// </param>
    /// <returns>
    /// The item configuration corresponding to the record in the <c>SalesBasketLine</c> table.
    /// </returns>
    public edit EcoResProductDisplayProductNumber editItemConfiguration(
        boolean _set,
        EcoResProductDisplayProductNumber _displayProductNumber)
    {
        EcoResProduct                       product;
        InventDimCombination                inventDimCombination;
        InventDim                           localInventDim;
        InventDim                           fromInventDim;
        InventDim                           blankInventDim;
        List                                displaySplit = strSplit(_displayProductNumber, ':');
        ListEnumerator                      displaySplitEnumerator = displaySplit.getEnumerator();
        EcoResProductDisplayProductNumber   displayProductNumber;

        if (_set)
        {
            if (_displayProductNumber)
            {
                while (displaySplitEnumerator.moveNext())
                {
                    if (displayProductNumber)
                    {
                        displayProductNumber += ' : ';
                    }

                    displayProductNumber += strLTrim(strRTrim(displaySplitEnumerator.current()));
                }

                select firstonly product
                    where product.DisplayProductNumber == displayProductNumber;

                if (product.isDistinctProductVariant())
                {
                    inventDimCombination = InventDimCombination::findByDistinctProductVariant(product.RecId);
                    fromInventDim = inventDimCombination.inventDim();
                }
                else
                {
                    checkFailed(strFmt("@SYS112224", _displayProductNumber, "@SYS74345", tablePName(InventDimCombination)));
                    _displayProductNumber = '';
                }
            }
            else
            {
                fromInventDim = blankInventDim;
            }
            localInventDim = this.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, fromInventDim, localInventDim);
            this.modifyInventDim(localInventDim);
        }
        else
        {
            _displayProductNumber = this.displayProductNumber();
        }

        return _displayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOnlyLineAmount</Name>
				<Source><![CDATA[
    boolean hasOnlyLineAmount()
    {
        return this.PriceDiscLine::hasOnlyLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void  initFromInventTable(InventTable _inventTable, boolean _useFallBack=false)
    {
        InventDim                   inventDim               = this.inventDim();
        InventDim                   inventDimDimId = this.inventDim();  // remains unchanged during this method
        List                        dimFieldList = InventDim::dimProductDimFieldList();
        ListEnumerator              enumerator = (dimFieldList) ? dimFieldList.getEnumerator() : null;
        FieldId                     dimFieldId;

        inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Sales, inventDim);

        if (_useFallBack)
        {
            if (!inventDim.InventSiteId)
            {
                inventDim.InventSiteId = InventParameters::find().fallbackSiteId();
            }

            if (!inventDim.InventLocationId)
            {
                if (EcoResDimensionGroupSetup::isWarehouseDimensionMandatoryForItem(_inventTable.ItemId))
                {
                    //Use company fallback warehouse
                    if (!inventDim.InventLocationId)
                    {
                        inventDim.InventLocationId = InventFallbackWarehouse::transportWarehouse(inventDim.InventSiteId);
                    }
                    if (!inventDim.InventLocationId)
                    {
                        inventDim.InventLocationId = InventParameters::find().FallbackInventLocationId;
                    }
                }
            }
        }

        inventDim.initFromInventLocation(inventDim.inventLocation());

        if (enumerator)
        {
            while (enumerator.moveNext())
            {
                dimFieldId = enumerator.current();
                if (inventDimDimId.(dimFieldId))
                {
                    inventDim.(dimFieldId) = inventDimDimId.(dimFieldId);
                }
            }
        }
        inventDim                   = InventDim::findOrCreate(inventDim);
        this.InventDimId            = inventDim.InventDimId;

        this.SalesUnit              = _inventTable.salesUnitId();

        this.SalesQty               = this.SalesQty
                                    ? this.SalesQty
                                    : _inventTable.salesStandardQty(this.InventDimId);

        this.PriceUnit              = _inventTable.salesPriceUnit();
        this.LineAmount             = 0;

        this.TaxItemGroup           = _inventTable.salesTaxItemGroupId();

        this.setPriceDisc(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    void initFromPriceDisc(PriceDisc_Price priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true)
    {
        this.SalesPrice         = priceDisc.price();
        this.PriceUnit          = priceDisc.priceUnit();
        this.SalesMarkup        = priceDisc.priceMarkup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesBasket</Name>
				<Source><![CDATA[
    void initFromSalesBasket(SalesBasket salesBasket)
    {
        InventDim   inventDim = this.inventDim();

        this.SalesBasketId = salesBasket.SalesBasketId;

        this.CurrencyCode  = salesBasket.CurrencyCode;
        this.TaxGroup      = salesBasket.taxGroup();

        if (salesBasket.InventLocationId || salesBasket.InventSiteId)
        {
            inventDim.InventLocationId  = salesBasket.InventLocationId;
            inventDim.InventSiteId      = salesBasket.InventSiteId;
        }

        inventDim.initFromInventLocation(inventDim.inventLocation());
        this.InventDimId   = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(
        ItemId  _itemId       = this.ItemId,
        boolean _forUpdate    = false)
    {
            return InventTable::find(_itemId, _forUpdate);
	}

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
    InventTableModule  inventTableModule(ItemId     itemId = this.ItemId)
    {
        return InventTableModule::find(itemId, this.moduleType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is category based.
    /// </summary>
    /// <returns>
    /// true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item description based on the language parameter and the dimensions in a
    /// <c>SalesBasketLine</c> record.
    /// </summary>
    /// <param name="_languageId">
    /// The language ID; optional.
    /// </param>
    /// <returns>
    /// The language dependent item description that may contain item dimension information.
    /// </returns>
    display ItemFreeTxt  itemDescription(LanguageId  _languageId = CompanyInfo::languageId())
    {
        InventTable         inventTable;
        EcoResDescription   ecoResDescription;

        inventTable = InventTable::find(this.ItemId);

        ecoResDescription = inventTable.productDescription(_languageId, this.InventDimId);

        if (ecoResDescription)
        {
            return ecoResDescription;
        }

        return inventTable.defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    LineDiscCode  itemLineDisc()
    {
        return this.inventTable().salesLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item name that is based on the language parameter and dimensions in the
    /// <c>SalesBasketLine</c> record.
    /// </summary>
    /// <returns>
    /// The language dependent item description that can contain item dimension information.
    /// </returns>
    EcoResProductName itemName()
    {
        LanguageId languageId = CompanyInfo::find().LanguageId;

        return this.inventTable().productName(languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    LineDiscCode  lineDisc()
    {
        return this.salesBasket().LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    void modifyInventDim(InventDim _inventDim)
    {
        InventDim   inventDim = InventDim::findOrCreate(_inventDim);

        this.InventDimId = inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    CustAccount orderAccount()
    {
        return this.salesBasket().CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    PriceGroupId  priceGroupId()
    {
        return this.salesBasket().PriceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesBasket</Name>
				<Source><![CDATA[
    SalesBasket salesBasket(boolean _update = false)
    {
        return SalesBasket::find(this.SalesBasketId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAlternativeItem</Name>
				<Source><![CDATA[
    void setAlternativeItem()
    {
        SalesAlternativeItem            salesAlternativeItem;
        ItemId                          alternativeItemId;
        InventDim                       localInventDim;
        InventTable                     alternativeInventTable;
        SalesQty                        origSalesQty;
        ItemId                          origItemId;
        EcoResProductDimGroupSetup      dimSetup;

        salesAlternativeItem = SalesAlternativeItem::newAlternativeItem(this);
        if (salesAlternativeItem.existAlternativeItem())
        {
            origSalesQty = this.SalesQty;
            origItemId   = this.ItemId;

            alternativeItemId   = salesAlternativeItem.alternativeItemId();
            localInventDim      = this.inventDim();
            alternativeInventTable = InventTable::find(alternativeItemId);
            dimSetup = EcoResProductDimGroupSetup::newInventTable(alternativeInventTable);
            dimSetup.copyProductDimensions(salesAlternativeItem.alternativeProductDimension(dimSetup, localInventDim), localInventDim);

            this.InventDimId = InventDim::findOrCreate(localInventDim).InventDimId;
            this.ItemId = alternativeItemId;
            this.initFromInventTable(alternativeInventTable);
            this.SalesQty = origSalesQty;

            info(strFmt("@SYS79522",origItemId,alternativeItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasketTrandId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the basket transaction ID, which is the equivalent of the invent transaction ID on a regular
    /// sales line.
    /// </summary>
    void setBasketTrandId()
    {
        if (!this.BasketTransId)
        {
            ttsbegin;
            this.selectForUpdate(true);
            this.BasketTransId = this.basketTransId();
            this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceAgreement</c> method of the <c>PriceDiscResultFields</c> table map.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record that contains the dimensions the price disc should apply for.
    /// </param>
    /// <param name="_doCallPriceDate">
    ///    A Boolean value that specifies whether to use the price date or the system date for the price calculation.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class defining if price and discount fields
    /// should be updated; optional.
    /// </param>
    /// <param name="_initDateFields">
    /// Indicates if the dates related to prices should be set or not; optional.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceAgreement(
        InventDim					_inventDim,
        boolean						_doCallPriceDate	= false,
        PriceDiscPolicyCheckPolicy  _checkPolicy		= null,
        boolean						_initDateFields		= true)
    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    public void setPriceDisc(InventDim _inventDim)
    {
        this.setPriceAgreement(_inventDim);
        this.LineAmount = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PriceCur taxPcsPrice(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(_transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        InventTable inventTable = InventTable::find(this.ItemId);
        InventDim   inventDim = this.inventDim();

        Enumerator productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDims.moveNext())
        {
            InventProductDimension productDim = productDims.current();

            ret = productDim.checkExistsValueForItem(inventTable, inventDim.(productDim.parmInventDimFieldId())) && ret;
        }
        ret = inventDim.checkDimFieldsValid(inventTable.ItemId, inventDim) && ret;

        if (this.salesBasket().SalesType != SalesType::ReturnItem && this.SalesQty < 0)
        {
            ret = checkFailed(strFmt("@SYS60435", this.ItemId));
        }

        ret = ret && inventTable.inventItemSalesSetup(this.InventDimId).checkNotStopped(false);

        if (ret && #PmfEnabled)
        {
            ret = inventTable.pmfInventProductType().validateInventUpd();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        this.salesPurchLineInterface().resetPriceAgreement();
        this.setPriceDisc(this.inventDim());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static SalesBasketLine findRecId(RecId       recId,
                                     boolean    _forUpdate = false )
    {
        SalesBasketLine salesBasketLine;

        salesBasketLine.selectForUpdate(_forUpdate);

        select salesBasketLine
            where salesBasketLine.RecId == recId;

        return salesBasketLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemConfigurationLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of field names to be displayed in the dataset lookup.
    /// </summary>
    /// <returns>
    /// A list of field names to be displayed in the dataset lookup.
    /// </returns>
    static public List itemConfigurationLookupFields()
    {
        List lookupFieldList = new List(Types::String);

        lookupFieldList.addEnd(fieldStr(EcoResDistinctProductVariant, DisplayProductNumber));
        lookupFieldList.addEnd(tableStr(EcoResProductTranslation) + '!' + fieldStr(EcoResProductTranslation, Name));

        return lookupFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemConfigurationLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a query that will be used in the dataset lookup.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item on which to base the lookup.
    /// </param>
    /// <returns>
    /// A query that will be used in the dataset lookup.
    /// </returns>
    static public Query itemConfigurationLookupQuery(ItemId _itemId)
    {
        Query                           query;
        EcoResProduct                   ecoResProduct;

        // find product for item
        ecoResProduct = EcoResProduct::find(InventTable::itemProduct(_itemId));

        // init query
        query = new Query(queryStr(EcoResProductVariantPerCompany));

        // applicable only for product masters
        if (ecoResProduct.isProductMaster())
        {
            // filter by specified product master FK
            query.dataSourceTable(tableNum(EcoResDistinctProductVariant)).
                addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster)).value(queryValue(ecoResProduct.RecId));

            // filter product translation by system language
            EcoResProductTranslation::queryAddDefaultLanguage(query);
        }
        else
        {
            query.dataSourceTable(tableNum(EcoResDistinctProductVariant)).
                addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster)).value(queryValue(-1));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124519</DeveloperDocumentation>
	<Label>@SYS75387</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>SalesBasketId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SalesBasketLineIdx</ClusteredIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>SalesBasketLineIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesBasketId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesBasket</Name>
			<Label>@SYS58656</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesBasketId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>basketTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesQuantity</Name>
			<Label>@SYS11990</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>basketTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDateRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemRouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ManualEntryChangepolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicyManual</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesBasketId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesBasketId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesOrderedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SystemEntryChangePolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceDiscPolicySystem</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemEntrySource</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>PriceDiscSystemSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesBasketLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesBasketId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>SalesQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
					<MapFieldTo>SalesUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesBasketId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>SalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>SalesMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Included</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>SalesBasketId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBOMId</Name>
					<Field>ItemBOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>basketTransId</Name>
					<Field>basketTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_SalesBasketLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SystemEntryChangePolicy</Name>
					<Field>SystemEntryChangePolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PriceDiscChangePolicyRecId2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscChangePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscChangePolicy_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscChangePolicy_1_SalesBasketLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ManualEntryChangepolicy</Name>
					<Field>ManualEntryChangepolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRouteId</Name>
					<Field>ItemRouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesBasket</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesBasket</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesBasketId</Name>
					<Field>SalesBasketId</Field>
					<RelatedField>SalesBasketId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesBasketIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesUnit</Name>
					<Field>SalesUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>