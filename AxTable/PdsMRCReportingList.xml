<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsMRCReportingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsMRCReportingList extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCountryName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    public display LogisticsAddressCountryRegionShortName getCountryName()
    {
        return LogisticsAddressCountryRegionTranslation::find(
                        this.CountryId,
                        CompanyInfo::find().LanguageId).ShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStateName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(false)]
    public display LogisticsAddressStatename getStateName()
    {
        return LogisticsAddressState::find(this.CountryId, this.StateId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        PdsMRCRegulatedCountry          pdsMRCRegulatedCountry;
        PdsMRCRegulatedCountry          pdsMRCRegulatedCountrySelect;
        LogisticsAddressCountryRegionId thisCountryId   = this.CountryId;
        LogisticsAddressStateId         thisStateId     = this.StateId;

        ttsBegin;

        super();

        if (!this.Reported)
        {
            if (this.StateId)
            {
                // copy from regulated reported by country/region+state, and regulated by country/region without state
                insert_recordset pdsMRCRegulatedCountry (CountryId, StateId, ItemId)
                    select CountryId, thisStateId, ItemId from pdsMRCRegulatedCountrySelect
                    group by CountryId, StateId, ItemId
                    where   (       pdsMRCRegulatedCountrySelect.Reported   == NoYes::Yes
                                &&  pdsMRCRegulatedCountrySelect.CountryId  == this.CountryId
                                &&  pdsMRCRegulatedCountrySelect.StateId    == this.StateId)
                        ||  (       pdsMRCRegulatedCountrySelect.Reported   == NoYes::No
                                &&  pdsMRCRegulatedCountrySelect.CountryId  == this.CountryId
                                &&  pdsMRCRegulatedCountrySelect.StateId    == '');
            }
            else
            {
                // copy from regulated reported by country/region only
                insert_recordset pdsMRCRegulatedCountry (CountryId, StateId, ItemId)
                    select CountryId, thisStateId, ItemId from pdsMRCRegulatedCountrySelect
                    group by CountryId, ItemId
                    where   pdsMRCRegulatedCountrySelect.Reported   == NoYes::Yes
                        &&  pdsMRCRegulatedCountrySelect.CountryId  == this.CountryId
                        &&  pdsMRCRegulatedCountrySelect.StateId    == '';
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(PdsMRCReportingList, StateId),
                [fieldNum(PdsMRCReportingList, CountryId)]],
            [fieldNum(PdsMRCReportingList, ListId),
                [fieldNum(PdsMRCReportingList, Reported)]],
            [fieldNum(PdsMRCReportingList, Description),
                [fieldNum(PdsMRCReportingList, Reported)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PdsMRCReportingList, StateId):
                this.defaultStateId();
                break;

            case fieldNum(PdsMRCReportingList, ListId):
                this.defaultListId();
                break;

            case fieldNum(PdsMRCReportingList, Description):
                this.defaultDescription();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStateId</Name>
				<Source><![CDATA[
    private void defaultStateId()
    {
        if (this.StateId && !LogisticsAddressState::exist(this.CountryId, this.StateId))
        {
            this.StateId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultListId</Name>
				<Source><![CDATA[
    private void defaultListId()
    {
        if (!this.Reported)
        {
            this.ListId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDescription</Name>
				<Source><![CDATA[
    private void defaultDescription()
    {
        if (!this.Reported)
        {
            this.Description = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.Reported && !this.ListId)
        {
            ret = checkFailed("@SCM:PdsMRCReportingListReportedNoListIdError");
        }

        if (ret && !this.Reported && (this.ListId || this.Description))
        {
            ret = checkFailed("@SCM:PdsMRCReportingListDescriptionListIdSetReportedNotSet");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that record can be deleted.
    /// </summary>
    /// <returns>
    /// Result of Validation.  Check to make sure there are no related record before the record can be deleted.
    /// </returns>
    public boolean validateDelete()
    {
        PdsMRCRegulatedCountry      regulatedCountry;
        boolean                     ret;

        ret = super();

        // check for associated records
        if (ret)
        {
            select firstonly RecId
                from    regulatedCountry
                where   regulatedCountry.CountryId    == this.CountryId
                    &&  regulatedCountry.StateId      == this.StateId
                    &&  regulatedCountry.Reported     == this.Reported
                    &&  regulatedCountry.ListId       == this.ListId;

            if (regulatedCountry.RecId)
            {
                ret = checkFailed("@PDS859");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        PdsMRCListId            _listId,
        AddressCountryRegionId  _country,
        LogisticsAddressStateId _stateId,
        NoYes                   _reported)
    {
        PdsMRCReportingList pdsMRCReportingList;

        select RecId from pdsMRCReportingList
            where  pdsMRCReportingList.ListId       == _listId
                && pdsMRCReportingList.CountryId    == _country
                && pdsMRCReportingList.StateId      == _stateId
                && pdsMRCReportingList.Reported     == _reported;

        return pdsMRCReportingList.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsMRCReportingList find(
        PdsMRCRegulatedListId   _listId,
        AddressCountryRegionId  _countryId,
        LogisticsAddressStateId _stateId,
        NoYes                   _reported,
        boolean                 _forUpdate = false)
    {
        PdsMRCReportingList reportList;

        reportList.selectForUpdate(_forUpdate);

        select firstonly reportList
            where   reportList.ListId       == _listId
                &&  reportList.CountryId    == _countryId
                &&  reportList.StateId      == _stateId
                &&  reportList.Reported     == _reported;

        return reportList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupExistingCountries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup based on existing reporting lists.
    /// </summary>
    /// <param name="_callerControl">
    /// Caller form control.
    /// </param>
    /// <param name="_reported">
    /// If Yes, looks up regulated reported lists; otherwise, only regulated.
    /// </param>
    public static void lookupExistingCountries(FormControl _callerControl, NoYes _reported)
    {
        SysTableLookup          lookup;
        Query                   query;
        QueryBuildDataSource    qbds;

        query = new Query();

        qbds = query.addDataSource(tableNum(PdsMRCReportingList));

        qbds.addRange(fieldNum(PdsMRCReportingList, Reported)).value(SysQuery::value(_reported));
        qbds.addGroupByField(fieldNum(PdsMRCReportingList, CountryId));

        lookup = SysTableLookup::newParameters(tableNum(PdsMRCReportingList), _callerControl);

        lookup.parmQuery(query);

        lookup.addLookupfield(fieldNum(PdsMRCReportingList, CountryId));
        lookup.addLookupMethod(tableMethodStr(PdsMRCReportingList, getCountryName));

        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupExistingLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup based on existing reporting lists.
    /// </summary>
    /// <param name="_callerControl">
    /// Caller form control.
    /// </param>
    /// <param name="_reported">
    /// If Yes, looks up regulated reported lists; otherwise, only regulated.
    /// </param>
    /// <param name="_countryId">
    /// Country/region that the lists should belong to.
    /// </param>
    /// <param name="_stateId">
    /// State that the lists should belong to.
    /// </param>
    public static void lookupExistingLists(
        FormControl                     _callerControl,
        NoYes                           _reported,
        LogisticsAddressCountryRegionId _countryId,
        LogisticsAddressStateId         _stateId)
    {
        SysTableLookup          lookup;
        Query                   query;
        QueryBuildDataSource    qbdsRegulated;

        query = new Query();

        qbdsRegulated = query.addDataSource(tableNum(PdsMRCReportingList));

        qbdsRegulated.addRange(fieldNum(PdsMRCReportingList, Reported)).value(SysQuery::value(_reported));
        qbdsRegulated.addRange(fieldNum(PdsMRCReportingList, CountryId)).value(_countryId ? _countryId : SysQuery::valueEmptyString());
        qbdsRegulated.addRange(fieldNum(PdsMRCReportingList, StateId)).value(_stateId ? _stateId : SysQuery::valueEmptyString());

        lookup = SysTableLookup::newParameters(tableNum(PdsMRCReportingList), _callerControl);

        lookup.parmQuery(query);

        lookup.addLookupfield(fieldNum(PdsMRCReportingList, ListId));
        lookup.addLookupfield(fieldNum(PdsMRCReportingList, Description));

        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupExistingStates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup based on existing reporting lists.
    /// </summary>
    /// <param name="_callerControl">
    /// Caller form control.
    /// </param>
    /// <param name="_reported">
    /// If Yes, looks up regulated reported lists; otherwise, only regulated.
    /// </param>
    /// <param name="_countryId">
    /// Country/Region that the states should belong to.
    /// </param>
    public static void lookupExistingStates(
        FormControl                     _callerControl,
        NoYes                           _reported,
        LogisticsAddressCountryRegionId _countryId)
    {
        SysTableLookup          lookup;
        Query                   query;
        QueryBuildDataSource    qbdsState;
        QueryBuildDataSource    qbdsRegulated;

        query = new Query();

        qbdsState = query.addDataSource(tableNum(LogisticsAddressState));

        qbdsRegulated = qbdsState.addDataSource(tableNum(PdsMRCReportingList));

        qbdsRegulated.addRange(fieldNum(PdsMRCReportingList, Reported)).value(SysQuery::value(_reported));
        qbdsRegulated.addRange(fieldNum(PdsMRCReportingList, CountryId)).value(_countryId ? _countryId : SysQuery::valueEmptyString());

        qbdsRegulated.joinMode(JoinMode::InnerJoin);
        qbdsRegulated.fetchMode(QueryFetchMode::One2One);
        qbdsRegulated.addLink(fieldNum(LogisticsAddressState, CountryRegionId), fieldNum(PdsMRCReportingList, CountryId));
        qbdsRegulated.addLink(fieldNum(LogisticsAddressState, StateId),         fieldNum(PdsMRCReportingList, StateId));

        lookup = SysTableLookup::newParameters(tableNum(LogisticsAddressState), _callerControl);

        lookup.parmQuery(query);

        lookup.addLookupfield(fieldNum(LogisticsAddressState, StateId));
        lookup.addLookupfield(fieldNum(LogisticsAddressState, Name));

        lookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsMRC</ConfigurationKey>
	<DeveloperDocumentation>@PDS1087</DeveloperDocumentation>
	<FormRef>PdsMRCReportingList</FormRef>
	<Label>@PDS875</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CountryId</TitleField1>
	<TitleField2>ListId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ReportingListsIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>ReportingListsIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reported</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reported</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reported</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsMRCDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ListId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsMRCListId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reported</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsMRCReported</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportingListsIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ListId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CountryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LogisticsAddressStateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CountryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<Field>CountryId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StateId</Name>
					<Field>StateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>