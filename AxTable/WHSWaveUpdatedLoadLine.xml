<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveUpdatedLoadLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWaveUpdatedLoadLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        WHSWaveId           _waveId,
        WHSloadLineRefRecId _loadLineRefRecId)
    {
        return (_waveId && _loadLineRefRecId)
        &&     (select firstOnly RecId from WHSWaveUpdatedLoadLine
                where WHSWaveUpdatedLoadLine.WaveId             == _waveId
                &&    WHSWaveUpdatedLoadLine.LoadLineRefRecId   == _loadLineRefRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForLoadLine</Name>
				<Source><![CDATA[
    public static boolean existForLoadLine(WHSloadLineRefRecId _loadLineRefRecId)
    {
        return _loadLineRefRecId != 0
            && (select firstOnly RecId from WHSWaveUpdatedLoadLine
                    where WHSWaveUpdatedLoadLine.LoadLineRefRecId == _loadLineRefRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstForWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find any existing <c>WHSWaveUpdatedLoadLine</c> table record for the provided wave identifier.
    /// </summary>
    /// <param name = "_waveId">Id of the wave to filter on.</param>
    /// <param name = "_forUpdate">Should the found record be selected for update?</param>
    /// <returns>The first available <c>WHSWaveUpdatedLoadLine</c> table record with the specified wave Id.</returns>
    public static WHSWaveUpdatedLoadLine findFirstForWave(WHSWaveId _waveId, boolean _forUpdate = false)
    {
        WHSWaveUpdatedLoadLine waveUpdatedLoadLine;

        if (_waveId)
        {
            waveUpdatedLoadLine.selectForUpdate(_forUpdate);

            select firstonly waveUpdatedLoadLine
                where waveUpdatedLoadLine.WaveId == _waveId
                    && waveUpdatedLoadLine.WorkCreatedQtyDelta > 0;
        }

        return waveUpdatedLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSWaveUpdatedLoadLine find(
        WHSWaveId           _waveId,
        WHSloadLineRefRecId _loadLineRefRecId,
        boolean             _forUpdate = false)
    {
        WHSWaveUpdatedLoadLine waveUpdatedLoadLine;

        if (_waveId
        &&  _loadLineRefRecId)
        {
            if (_forUpdate)
            {
                waveUpdatedLoadLine.selectForUpdate(_forUpdate);
            }

            select firstonly waveUpdatedLoadLine
                where waveUpdatedLoadLine.WaveId            == _waveId
                &&    waveUpdatedLoadLine.loadLineRefRecId  == _loadLineRefRecId;
        }

        return waveUpdatedLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackDeltaQuantitiesSkipWorkCreatedAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates <c>WHSWaveUpdatedLoadLine</c> record based on change of load line
    ///  quantity values and marks the record for skipping the work created quantity adjustment.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id currently being processed.
    /// </param>
    /// <param name="_loadLineRefRecId">
    /// The RecId of the load line that was updated.
    /// </param>
    /// <param name="_changeInWorkCreatedQty">
    /// The change in work created quantity; optional.
    /// </param>
    public static void trackDeltaQuantitiesSkipWorkCreatedAdjustment(
        WHSWaveId           _waveId,
        WHSLoadLineRefRecId _loadLineRefRecId,
        WHSWorkCreatedQty   _changeInWorkCreatedQty)
    {
        using (WHSWaveProcessingLoadLineAllocationContext context = WHSWaveProcessingLoadLineAllocationContext::construct())
        {
            context.skipDeltaLoadLineWorkCreatedQtyAdjust = true;
            WHSWaveUpdatedLoadLine::trackDeltaQuantities(_waveId, _loadLineRefRecId, _changeInWorkCreatedQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackDeltaQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates <c>WHSWaveUpdatedLoadLine</c> record based on change of load line quantity values.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id currently being processed.
    /// </param>
    /// <param name="_loadLineRefRecId">
    /// The RecId of the load line that was updated.
    /// </param>
    /// <param name="_changeInWorkCreatedQty">
    /// The change in work created quantity; optional.
    /// </param>
    /// <param name="_changeInPickedQty">
    /// The change in picked quantity; optional.
    /// </param>
    public static void trackDeltaQuantities(
        WHSWaveId           _waveId,
        WHSLoadLineRefRecId _loadLineRefRecId,
        WHSWorkCreatedQty   _changeInWorkCreatedQty = 0,
        WHSPickedQty        _changeInPickedQty = 0)
    {
        if (!WHSWaveUpdatedLoadLine::validTrackDeltaQuantitiesParams(_changeInWorkCreatedQty, _changeInPickedQty))
        {
            return;
        }

        ttsbegin;

        WHSWaveUpdatedLoadLine::createOrUpdateWaveUpdatedLoadLine(_waveId , _loadLineRefRecId, _changeInWorkCreatedQty, _changeInPickedQty);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateWaveUpdatedLoadLine</Name>
				<Source><![CDATA[
    private static void createOrUpdateWaveUpdatedLoadLine(
        WHSWaveId           _waveId,
        WHSLoadLineRefRecId _loadLineRefRecId,
        WHSWorkCreatedQty   _changeInWorkCreatedQty = 0,
        WHSPickedQty        _changeInPickedQty = 0)
    {
        WHSWaveUpdatedLoadLine waveUpdatedLoadLine = WHSWaveUpdatedLoadLine::find(_waveId, _loadLineRefRecId, true);

        waveUpdatedLoadLine.SkipDeltaLoadLineQuantitiesAdjustment = WHSWaveUpdatedLoadLine::shouldDeltaLoadLineWorkCreatedQtyAdjustmentBeSkipped();

        if (waveUpdatedLoadLine.RecId == 0)
        {
            waveUpdatedLoadLine.WaveId  = _waveId;
            waveUpdatedLoadLine.LoadLineRefRecId = _loadLineRefRecId;
            waveUpdatedLoadLine.WorkCreatedQtyDelta = _changeInWorkCreatedQty;
            waveUpdatedLoadLine.PickedQtyDelta = _changeInPickedQty;
        }
        else
        {
            waveUpdatedLoadLine.WorkCreatedQtyDelta += _changeInWorkCreatedQty;
            waveUpdatedLoadLine.PickedQtyDelta += _changeInPickedQty;
        }

        waveUpdatedLoadLine.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWaveUpdatedLoadLineRecordsForWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete <c>WHSWaveUpdatedLoadLine</c> records for the corresponding <c>WhsWaveId</c>.
    /// </summary>
    /// <param name="_waveId">The wave Id to delete records for.</param>
    /// <returns>The number of records deleted.</returns>
    internal static NumberOfRecords deleteWaveUpdatedLoadLineRecordsForWaveId(WHSWaveId _waveId)
    {
        WHSWaveUpdatedLoadLine waveUpdatedLoadLine;

        Microsoft.Dynamics.Ax.Xpp.PlatformExtensions.CommonExtensions::SetSqlDeleteIndexHint(waveUpdatedLoadLine, indexStr(WHSWaveUpdatedLoadLine, WaveIdLoadLineRefRecIdIdx));

        delete_from waveUpdatedLoadLine
            where waveUpdatedLoadLine.WaveId == _waveId;

        return waveUpdatedLoadLine.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeltaLoadLineWorkCreatedQtyAdjustmentBeSkipped</Name>
				<Source><![CDATA[
    private static NoYes shouldDeltaLoadLineWorkCreatedQtyAdjustmentBeSkipped()
    {
        WHSWaveProcessingLoadLineAllocationContext context = WHSWaveProcessingLoadLineAllocationContext::current();

        return context && context.skipDeltaLoadLineWorkCreatedQtyAdjust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validTrackDeltaQuantitiesParams</Name>
				<Source><![CDATA[
    private static boolean validTrackDeltaQuantitiesParams(
        WHSWorkCreatedQty   _changeInWorkCreatedQty = 0,
        WHSPickedQty        _changeInPickedQty = 0
        )
    {
        return _changeInWorkCreatedQty
            ||  _changeInPickedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WaveUpdatedLoadLineDeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:WaveUpdatedLoadLineLabel</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>WaveId</TitleField1>
	<TitleField2>WorkCreatedQtyDelta</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WaveIdLoadLineRefRecIdIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WaveIdLoadLineRefRecIdIdx</PrimaryIndex>
	<ReplacementKey>WaveIdLoadLineRefRecIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickedQtyDelta</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCreatedQtyDelta</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SkipDeltaLoadLineQuantitiesAdjustment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickedQtyDelta</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCreatedQtyDelta</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadLineRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSLoadLineRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PickedQtyDelta</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPickedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WorkCreatedQtyDelta</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkCreatedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipDeltaLoadLineQuantitiesAdjustment</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WaveIdLoadLineRefRecIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SkipDeltaLoadLineQuantitiesAdjustment</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadLineRefRecIdWaveIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSLoadLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLoadLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadLineRefRecId</Name>
					<Field>LoadLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>