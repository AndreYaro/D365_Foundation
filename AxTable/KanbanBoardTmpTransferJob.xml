<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardTmpTransferJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanBoardTmpTransferJob extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUpdateCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>Carrier</c> field can be updated.
    /// </summary>
    /// <returns>
    /// true if the carrier could be updated; otherwise, false.
    /// </returns>
    public boolean canUpdateCarrier()
    {
        return    this.CarrierCode
               && this.Status < LeanKanbanJobStatus::InProgress
               && this.FreightedBy == WMSFreightedBy::Carrier
               && !KanbanJobPurchaseLine::findKanbanJob(this.Job).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProcessJobBoard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts new records to this table by adding the kanban transfer jobs that belong to the specified work cell.
    /// </summary>
    /// <param name="_workCellFilterRecId">
    ///    A work cell record identifier to filter by it.
    /// </param>
    /// <param name="_legalEntity">
    ///    A legal entity identification.
    /// </param>
    public void initProcessJobBoard(
        WrkCtrResourceGroupRefRecId _workCellFilterRecId,
        LegalEntity                 _legalEntity = CompanyInfo::current())
    {
        this.insertContainer(KanbanBoardTmpTransferJob::recordsProcessJobBoardServer(_workCellFilterRecId,_legalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransferJobBoard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new records to this table by adding the kanban transfer jobs that match the specified filter criteria.
    /// </summary>
    /// <param name="_kanbanBoardTmpFilterCriteria">
    /// A <c>KanbanBoardTmpFilterCriteria</c> table buffer that specifies the filter criteria.
    /// </param>
    /// <param name="_maxRecordsNotPlanned">
    /// The maximum number of records in not planned status.
    /// </param>
    /// <param name="_maxRecordsInProgress">
    /// The maximum number of records in in progress status.
    /// </param>
    /// <param name="_maxRecordsCompleted">
    /// The maximum number of records in completed status.
    /// </param>
    /// <param name="_singleJobMode">
    /// A flag indicating if only one job is to be retrieved.
    /// </param>
    public void initTransferJobBoard(
        KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria,
        int                          _maxRecordsNotPlanned = maxInt(),
        int                          _maxRecordsInProgress = maxInt(),
        int                          _maxRecordsCompleted  = maxInt(),
        boolean                      _singleJobMode        = false)
    {
        container       kanbanTransferJobs;

        if (_singleJobMode)
        {
            kanbanTransferJobs = KanbanBoardTmpTransferJob::recordsTransferJobBoardServerSingleJob(_kanbanBoardTmpFilterCriteria);
            this.insertContainer(kanbanTransferJobs);
        }
        else
        {
            //created
            kanbanTransferJobs = KanbanBoardTmpTransferJob::recordsTransferJobBoardServer(_kanbanBoardTmpFilterCriteria,
                                                                                          _maxRecordsNotPlanned,
                                                                                          LeanKanbanJobStatus::NotPlanned);
            this.insertContainer(kanbanTransferJobs);

            //started
            kanbanTransferJobs = KanbanBoardTmpTransferJob::recordsTransferJobBoardServer(_kanbanBoardTmpFilterCriteria,
                                                                                          _maxRecordsInProgress,
                                                                                          LeanKanbanJobStatus::InProgress);
            this.insertContainer(kanbanTransferJobs);

            //ended
            kanbanTransferJobs = KanbanBoardTmpTransferJob::recordsTransferJobBoardServer(_kanbanBoardTmpFilterCriteria,
                                                                                          _maxRecordsCompleted,
                                                                                          LeanKanbanJobStatus::Completed);
            this.insertContainer(kanbanTransferJobs);
        }

        // clear the local cache used during the identification of the plan activity services
        PlanActivityServiceFindCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the contents of the container into the temporary table.
    /// </summary>
    /// <param name="_container">
    /// A <c>container</c> that contains the <c>KanbanBoardTmpTransferJob</c> records.
    /// </param>
    private void insertContainer(container _container)
    {
        int             numRecords;
        int             i;

        if (_container)
        {
            numRecords = conLen(_container);
            for (i=1;i<=numRecords;i++)
            {
                this.clear();
                this.data(conPeek(_container,i));
                this.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the related <c>KanbanJob</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that defines if the record must be selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>KanbanJob</c> record.
    /// </returns>
    public KanbanJob kanbanJob(boolean _forUpdate = false)
    {
        return KanbanJob::find(this.Job,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>KanbanJob</c> record that is related to the current record.
    /// </summary>
    /// <remarks>
    /// Most fields in this table are read-only. The quantity field can be changed and when the field
    /// changes, the kanban job must be synchronized.
    /// </remarks>
    public void updateKanbanJob()
    {
        KanbanJob   kanbanJob;

        if (this.Quantity != this.orig().Quantity)
        {
            ttsbegin;
            kanbanJob                 = this.kanbanJob(true);
            kanbanJob.QuantityOrdered = this.Quantity;
            kanbanJob.update();
            kanbanJob.updateOrderedQuantities(kanbanJob.QuantityOrdered);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJobPlanActivityService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the reference between the kanban job and the plan activity service.
    /// </summary>
    /// <param name="_planActivityServiceRecId">
    /// The kanban job to plan activity service reference record ID.
    /// </param>
    /// <remarks>
    /// Most fields in this table are read-only. The carrier name field can be changed and when it is
    /// changed, the plan activity service reference must be synchronized.
    /// </remarks>
    public void updateKanbanJobPlanActivityService(RefRecId _planActivityServiceRecId)
    {
        PlanActivityService             planActivityService;
        KanbanJob                       kanbanJob = this.kanbanJob();

        // Find the new service
        planActivityService = PlanActivityService::find(_planActivityServiceRecId);

        // Reassign the job to the service
        KanbanJobPlanActivityService::assignKanbanJobToPlanActivityService(kanbanJob, planActivityService);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        Kanban      kanban;
        KanbanRule  kanbanRule;
        KanbanJob   kanbanJob;
        boolean result;

        result = super(_fieldIdToCheck);

        if (result)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(KanbanBoardTmpTransferJob,Quantity):
                    if (!this.Quantity)
                    {
                        result = checkFailed(strFmt("@SYS313383",this.KanbanId));
                    }
                    if (result)
                    {
                        kanban     = Kanban::findKanbanId(this.KanbanId);
                        kanbanRule = kanban.kanbanRule();

                        result     = kanban.CurrentJob == this.Job;
                        if (!result)
                        {
                            result = checkFailed(strFmt("@SYS313384",this.KanbanId));
                        }

                        if (   result
                            && kanbanRule.AllowDeviatingQuantity)
                        {
                            result =    this.Quantity >= kanban.QuantityOrdered - kanbanRule.MinimumDeviatingQuantity
                                     && this.Quantity <= kanban.QuantityOrdered + kanbanRule.MaximumDeviatingQuantity
                                     && result;
                        }
                        else
                        {
                            result =    this.Quantity == kanban.QuantityOrdered
                                     && result;
                        }
                        if (!result)
                        {
                            result = checkFailed(strFmt("@SYS313385",
                                                 this.KanbanId,
                                                 kanbanRule.AllowDeviatingQuantity ? kanbanRule.MinimumDeviatingQuantity : 0,
                                                 kanbanRule.AllowDeviatingQuantity ? kanbanRule.MaximumDeviatingQuantity : 0));
                        }
                        else
                        {
                            kanbanJob = KanbanJob::find(this.Job);
                            kanbanJob = kanbanJob.previousJob();
                            if (   kanbanJob
                                && kanbanJob.QuantityReceived < this.Quantity)
                            {
                                result = checkFailed(strFmt("@SYS313386",this.KanbanId,kanbanJob.PlanActivityName));
                            }
                        }
                    }
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobStatusImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Given the current job status type this method will return the appropriate symbol.
    /// </summary>
    /// <returns>
    ///     Container with the image for the current record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display container jobStatusImage()
    {
        return KanbanJob::getJobStatusImage(this.Status);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransferJobSelectionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all the selection fields needed for populating the temp table buffer.
    /// </summary>
    /// <param name="_query">
    /// The query object that is to be added selection fields.
    /// </param>
    private static void addTransferJobSelectionFields(Query _query)
    {
        QueryBuildDataSource    kanbanJob_ds;
        QueryBuildDataSource    kanban_ds;
        QueryBuildDataSource    planReference_ds;
        QueryBuildDataSource    planActivity_ds;
        QueryBuildDataSource    leanProductionFlowActivity_ds;

        if (_query == null)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        kanbanJob_ds = _query.dataSourceTable(tableNum(KanbanJob));
        kanbanJob_ds.fields().clearFieldList();
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,RecId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,Status));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,RecId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,LeanScheduleGroupColor));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,LeanScheduleGroupName));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,QuantityOrdered));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,DueDateTime));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,ExpectedDateTime));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,ActualEndDateTime));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,LeanProductionFlowActivity));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,IssueInventTransDataAreaId));      // for wmsShipment()
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,IssueInventTransId));      // for wmsShipment()
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,InventLocationId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,InventLocationDataAreaId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,wmsLocationId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,wmsLocationDataAreaId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,Kanban));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,InventDimId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob,InventDimDataAreaId));

        kanban_ds = _query.dataSourceTable(tableNum(Kanban));
        kanban_ds.fields().clearFieldList();
        kanban_ds.fields().addField(fieldNum(Kanban, RecId));
        kanban_ds.fields().addField(fieldNum(Kanban,Express));
        kanban_ds.fields().addField(fieldNum(Kanban,ItemId));
        kanban_ds.fields().addField(fieldNum(Kanban,KanbanRule));
        kanban_ds.fields().addField(fieldNum(Kanban,InventDimId));
        kanban_ds.fields().addField(fieldNum(Kanban,KanbanId));
        kanban_ds.fields().addField(fieldNum(Kanban,Status));
        kanban_ds.fields().addField(fieldNum(Kanban,KanbanCardId));
        kanban_ds.fields().addField(fieldNum(Kanban,QuantityOrdered));

        planActivity_ds = _query.dataSourceTable(tableNum(PlanActivity));
        planActivity_ds.fields().clearFieldList();
        planActivity_ds.fields().addField(fieldNum(PlanActivity,RecId));
        planActivity_ds.fields().addField(fieldNum(PlanActivity,PlanActivityType));
        planActivity_ds.fields().addField(fieldNum(PlanActivity,Name));
        planActivity_ds.fields().addField(fieldNum(PlanActivity,FreightedBy));

        planReference_ds = _query.dataSourceTable(tableNum(PlanReference));
        planReference_ds.fields().clearFieldList();
        planReference_ds.fields().addField(fieldNum(PlanReference,PlanName));

        leanProductionFlowActivity_ds = _query.dataSourceTable(tableNum(LeanProductionFlowActivity));
        leanProductionFlowActivity_ds.fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryProcessJobBoard</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query which will return all transfer jobs related to process jobs in a given work cell.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///     The work cell record identifier.
    /// </param>
    /// <param name="_legalEntity">
    ///     A legal entity identifier.
    /// </param>
    /// <returns>
    ///     The query object.
    /// </returns>
    private static Query buildQueryProcessJobBoard(
        WrkCtrResourceGroupRefRecId _wrkCtrResourceGroupRecId,
        LegalEntity                 _legalEntity = CompanyInfo::current())
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsKanbanJob;
        QueryBuildDataSource    qbdsKanban;
        QueryBuildDataSource    qbdsTransferLeanProductionFlowActivity;
        QueryBuildDataSource    qbdsTransferPlanActivity;
        QueryBuildDataSource    qbdsPlanActivityRelationship;
        QueryBuildDataSource    qbdsProcessLeanProductionFlowActivity;
        QueryBuildRange         queryBuildRange;

        // Transfer jobs
        qbdsKanbanJob = query.addDataSource(tableNum(KanbanJob));

        queryBuildRange = qbdsKanbanJob.addRange(fieldNum(KanbanJob,Type));
        queryBuildRange.value(queryValue(LeanKanbanJobType::Transfer));
        queryBuildRange = qbdsKanbanJob.addRange(fieldNum(KanbanJob,Status));
        queryBuildRange.value(queryValue(LeanKanbanJobStatus::NotPlanned));
        queryBuildRange = qbdsKanbanJob.addRange(fieldNum(KanbanJob,Status));
        queryBuildRange.value(queryValue(LeanKanbanJobStatus::InProgress));

        // Kanban
        qbdsKanban = qbdsKanbanJob.addDataSource(tableNum(Kanban));
        qbdsKanban.fetchMode(QueryFetchMode::One2One);
        qbdsKanban.joinMode(JoinMode::InnerJoin);
        qbdsKanban.addLink(fieldNum(KanbanJob, Kanban), fieldNum(Kanban, RecId));

        // We are interested only in the current transfer job
        qbdsKanban.addLink(fieldNum(KanbanJob, RecId), fieldNum(Kanban, CurrentJob));

        // restrict by legal entity
        qbdsKanban.addRange(fieldNum(Kanban,LegalEntity)).value(queryValue(_legalEntity));

        // Transfer Lean ProductionFlowActivity
        qbdsTransferLeanProductionFlowActivity = qbdsKanbanJob.addDataSource(tableNum(LeanProductionFlowActivity), 'transfer');
        qbdsTransferLeanProductionFlowActivity.fetchMode(QueryFetchMode::One2One);
        qbdsTransferLeanProductionFlowActivity.joinMode(JoinMode::InnerJoin);
        qbdsTransferLeanProductionFlowActivity.addLink(fieldNum(KanbanJob, LeanProductionFlowActivity), fieldNum(LeanProductionFlowActivity, RecId));

        // Transfer plan activity
        qbdsTransferPlanActivity = qbdsTransferLeanProductionFlowActivity.addDataSource(tableNum(PlanActivity));
        qbdsTransferPlanActivity.fetchMode(QueryFetchMode::One2One);
        qbdsTransferPlanActivity.joinMode(JoinMode::InnerJoin);
        qbdsTransferPlanActivity.addLink(fieldNum(LeanProductionFlowActivity, PlanActivity), fieldNum(PlanActivity, RecId));

        // The transfer activity has a relationship to a process job
        qbdsPlanActivityRelationship = qbdsTransferLeanProductionFlowActivity.addDataSource(tableNum(PlanActivityRelationship));
        qbdsPlanActivityRelationship.joinMode(JoinMode::ExistsJoin);

        queryBuildRange = qbdsPlanActivityRelationship.addRange(fieldNum(PlanActivityRelationship, RecId));
        queryBuildRange.value(strFmt('((%1.%2 == %3.%4) || (%5.%6 == %7.%8))',
            qbdsPlanActivityRelationship.name(),
            fieldStr(PlanActivityRelationship, IndependentPlanActivity),
            qbdsTransferLeanProductionFlowActivity.name(),
            fieldStr(LeanProductionFlowActivity, PlanActivity),
            qbdsPlanActivityRelationship.name(),
            fieldStr(PlanActivityRelationship, DependentPlanActivity),
            qbdsTransferLeanProductionFlowActivity.name(),
            fieldStr(LeanProductionFlowActivity, PlanActivity)));

        // The process activity that is related to the transfer activity
        qbdsProcessLeanProductionFlowActivity = qbdsPlanActivityRelationship.addDataSource(tableNum(LeanProductionFlowActivity), 'process');
        qbdsProcessLeanProductionFlowActivity.joinMode(JoinMode::ExistsJoin);

        // The other activity is either dependent or independent
        queryBuildRange = qbdsProcessLeanProductionFlowActivity.addRange(fieldNum(LeanProductionFlowActivity, RecId));
        queryBuildRange.value(strFmt('((%1.%2 == %3.%4) || (%5.%6 == %7.%8))',
            qbdsPlanActivityRelationship.name(),
            fieldStr(PlanActivityRelationship, IndependentPlanActivity),
            qbdsProcessLeanProductionFlowActivity.name(),
            fieldStr(LeanProductionFlowActivity, PlanActivity),
            qbdsPlanActivityRelationship.name(),
            fieldStr(PlanActivityRelationship, DependentPlanActivity),
            qbdsProcessLeanProductionFlowActivity.name(),
            fieldStr(LeanProductionFlowActivity, PlanActivity)));

        // Activities must be different
        queryBuildRange = qbdsProcessLeanProductionFlowActivity.addRange(fieldNum(LeanProductionFlowActivity, PlanActivity));
        queryBuildRange.value(strFmt('(%1.%2 != %3.%4)',
            qbdsProcessLeanProductionFlowActivity.name(),
            fieldStr(LeanProductionFlowActivity, PlanActivity),
            qbdsTransferLeanProductionFlowActivity.name(),
            fieldStr(LeanProductionFlowActivity, PlanActivity)));

        // Verify that it is a process by checking the work cell and also match it against the valid workcells
        if (_wrkCtrResourceGroupRecId)
        {
            queryBuildRange = qbdsProcessLeanProductionFlowActivity.addRange(fieldNum(LeanProductionFlowActivity, WrkCtrResourceGroup));
            queryBuildRange.value(SysQuery::value(_wrkCtrResourceGroupRecId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpRecordForKanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a single record for a specific <c>KanbanId</c>.
    /// </summary>
    /// <param name = "_kanbanId">
    /// The <c>KanbanId</c> used to build the record.
    /// </param>
    /// <returns>
    /// The created record.
    /// </returns>
    public static KanbanBoardTmpTransferJob createTmpRecordForKanbanId(KanbanId _kanbanId)
    {
        Query kanQuery = new Query(queryStr(KanbanBoardTransferJob));
        QueryBuildDataSource qbdsKanban = kanQuery.dataSourceTable(tableNum(Kanban));
        qbdsKanban.addRange(fieldNum(Kanban, KanbanId)).value(_kanbanId);

        QueryRun qr = new QueryRun(kanQuery);

        KanbanBoardTmpTransferJob kanbanTmpTransferJob;

        if (qr.next())
        {
            Kanban          kan     = qr.get(tableNum(Kanban));
            KanbanJob       kanJob  = qr.get(tableNum(KanbanJob));
            PlanReference   planRef = qr.get(tableNum(PlanReference));
            PlanActivity    planAct = qr.get(tableNum(PlanActivity));

            InventTable          invent          = InventTable::find(kan.ItemId);
            KanbanRule           kanRule         = KanbanRule::find(kan.KanbanRule);
            KanbanRuleFixed      kanRuleFixed    = KanbanRuleFixed::findParentRecId(kanRule.RecId);
            PlanActivityService  planActService  = PlanActivityService::findKanbanJob(kanJob, true);
            PlanActivityLocation planActLocation = planAct.issueLocation();
            WMSShipment          wmsShipment     = kanJob.wmsShipment();

            ttsbegin;

            kanbanTmpTransferJob.IssueInventLocationId      = planActLocation.InventLocationId;
            kanbanTmpTransferJob.IssueWMSLocationId         = planActLocation.wmsLocationId;
            kanbanTmpTransferJob.ReceiptInventLocationId    = kanJob.InventLocationId;
            kanbanTmpTransferJob.ReceiptWMSLocationId       = kanJob.wmsLocationId;
            kanbanTmpTransferJob.KanbanRule                 = kan.KanbanRule;
            kanbanTmpTransferJob.ItemId                     = kan.ItemId;
            kanbanTmpTransferJob.InventDimId                = kan.InventDimId;
            kanbanTmpTransferJob.Express                    = kan.Express;
            kanbanTmpTransferJob.CardId                     = kan.KanbanCardId;
            kanbanTmpTransferJob.QuantityOrdered            = kan.QuantityOrdered;
            kanbanTmpTransferJob.Status                     = kanJob.Status;
            kanbanTmpTransferJob.Job                        = kanJob.RecId;
            kanbanTmpTransferJob.ExpectedDateTime           = kanJob.ExpectedDateTime;
            kanbanTmpTransferJob.DueDateTime                = kanJob.DueDateTime;
            kanbanTmpTransferJob.ActualEndDateTime          = kanJob.ActualEndDateTime;
            kanbanTmpTransferJob.Color                      = kanJob.LeanScheduleGroupColor;
            kanbanTmpTransferJob.ScheduleGroupName          = kanJob.LeanScheduleGroupName;
            kanbanTmpTransferJob.KanbanId                   = kan.KanbanId;
            kanbanTmpTransferJob.Kanban                     = kan.RecId;
            kanbanTmpTransferJob.KanbanStatus               = kan.Status;
            kanbanTmpTransferJob.ActivityName               = planAct.Name;
            kanbanTmpTransferJob.PlanReferenceName          = planRef.PlanName;
            kanbanTmpTransferJob.InventUnitId               = invent.inventUnitId();
            kanbanTmpTransferJob.ShipmentId                 = wmsShipment.ShipmentId;
            kanbanTmpTransferJob.ShippingDateTime           = wmsShipment.ShippingDateTime;
            kanbanTmpTransferJob.Quantity                   = kanJob.QuantityOrdered;
            kanbanTmpTransferJob.IsOverdue                  = KanbanJob::isOverdue(kanJob.DueDateTime,
                                                                                   kanJob.ExpectedDateTime,
                                                                                   kanJob.Status,
                                                                                   kanRule.ReplenishmentStrategy,
                                                                                   kanRuleFixed.ReplenishmentLeadTime);
            if (planActService.RecId)
            {
                kanbanTmpTransferJob.FreightedBy            = planAct.FreightedBy;
                kanbanTmpTransferJob.CarrierIdDataAreaId    = planActService.CarrierIdDataAreaId;
                kanbanTmpTransferJob.CarrierCode            = planActService.CarrierCode;
                kanbanTmpTransferJob.VendAccount            = planActService.vendorAccount();
            }

            kanbanTmpTransferJob.insert();

            ttscommit;
        }

        return kanbanTmpTransferJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryTransferJobBoard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query run object that will return transfer jobs matching the specified filter criteria.
    /// </summary>
    /// <param name="_kanbanBoardTmpFilterCriteria">
    /// A <c>KanbanBoardTmpFilterCriteria</c> table buffer that specifies the filter criteria.
    /// </param>
    /// <param name="_maxRecords">
    /// The maximum number of records to retrieve.
    /// </param>
    /// <param name="_filterByStatus">
    /// A flag indicating if the results should be filtered by the provided status.
    /// </param>
    /// <param name="_leanKanbanJobStatus">
    /// A <c>LeanKanbanJobStatus</c> value that used used as an additional filter criteria.
    /// </param>
    /// <returns>
    /// A <c>QueryRun</c> object.
    /// </returns>
    private static QueryRun buildQueryTransferJobBoard(
        KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria,
        int                          _maxRecords,
        boolean                      _filterByStatus      = false,
        LeanKanbanJobStatus          _leanKanbanJobStatus = LeanKanbanJobStatus::NotPlanned)
    {
        QueryRun                queryRun;
        Query                   query;
        QueryBuildDataSource    qbdsKanbanJob;
        QueryBuildDataSource    qbdsLeanProductionFlowActivity;
        QueryBuildDataSource    qbdsPlanActivity;
        QueryBuildRange         queryBuildRange;

        if (_maxRecords != 0)
        {
            query = new Query(queryStr(KanbanBoardTransferJob));

            //transfer jobs
            qbdsKanbanJob   = query.dataSourceTable(tableNum(KanbanJob));
            queryBuildRange = qbdsKanbanJob.addRange(fieldNum(KanbanJob,Type));
            queryBuildRange.value(queryValue(LeanKanbanJobType::Transfer));

            //specified status
            if (_filterByStatus)
            {
                queryBuildRange = qbdsKanbanJob.addRange(fieldNum(KanbanJob,Status));
                queryBuildRange.value(queryValue(_leanKanbanJobStatus));
            }

            //apply filter
            if (_kanbanBoardTmpFilterCriteria.isFilterCriteriaSet())
            {
                qbdsLeanProductionFlowActivity = qbdsKanbanJob.addDataSource(tableNum(LeanProductionFlowActivity));
                qbdsLeanProductionFlowActivity.fetchMode(QueryFetchMode::One2One);
                qbdsLeanProductionFlowActivity.joinMode(JoinMode::InnerJoin);
                qbdsLeanProductionFlowActivity.addLink(fieldNum(KanbanJob,LeanProductionFlowActivity),fieldNum(LeanProductionFlowActivity,RecId));

                qbdsPlanActivity = qbdsLeanProductionFlowActivity.addDataSource(tableNum(PlanActivity));
                qbdsPlanActivity.fetchMode(QueryFetchMode::One2One);
                qbdsPlanActivity.joinMode(JoinMode::InnerJoin);
                qbdsPlanActivity.addLink(fieldNum(LeanProductionFlowActivity,PlanActivity),fieldNum(PlanActivity,RecId));
                _kanbanBoardTmpFilterCriteria.applyFilterCriteria(qbdsPlanActivity);
            }

            if (query)
            {
                // add the selection fields
                KanbanBoardTmpTransferJob::addTransferJobSelectionFields(query);
                queryRun = new QueryRun(query);
                KanbanBoardTmpTransferJob::limitQueryResuts(queryRun, _maxRecords);
            }
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitQueryResuts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Limits the query results to the specified number of records.
    /// </summary>
    /// <param name="_queryRun">
    /// The query object to be limited.
    /// </param>
    /// <param name="_maxRecords">
    /// The maximum number of records to be retrieved.
    /// </param>
    private static void limitQueryResuts(QueryRun _queryRun, int _maxRecords)
    {
        if (_queryRun == null)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (_maxRecords != maxInt())
        {
            _queryRun.enablePositionPaging(true);
            _queryRun.addPageRange(1, _maxRecords);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransferJobResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the kanban jobs matched by the query and adds them to a container.
    /// </summary>
    /// <param name="_queryRun">
    /// The query run used for matching the kanban jobs.
    /// </param>
    /// <returns>
    /// A container that holds all jobs matching the criteria, otherwise empty container.
    /// </returns>
    private static container processTransferJobResults(QueryRun _queryRun)
    {
        KanbanJob                   kanbanJob;
        Kanban                      kanban;
        KanbanRule                  kanbanRule;
        KanbanRuleFixed             kanbanRuleFixed;
        PlanReference               planReference;
        PlanActivity                planActivity;
        PlanActivityLocation        planActivityLocation;
        PlanActivityService         planActivityService;
        WMSShipment                 wmsShipment;
        InventTable                 inventTable;

        KanbanBoardTmpTransferJob   kanbanBoardTmpTransferJob;
        container                   targetContainer = conNull();

        // Fill the table from the results of the query
        while (_queryRun.next())
        {
            kanban               = _queryRun.get(tableNum(Kanban));
            kanbanJob            = _queryRun.get(tableNum(KanbanJob));
            planReference        = _queryRun.get(tableNum(PlanReference));
            planActivity         = _queryRun.get(tableNum(PlanActivity));

            kanbanRule           = KanbanRule::find(kanban.KanbanRule);
            kanbanRuleFixed      = KanbanRuleFixed::findParentRecId(kanbanRule.RecId);
            inventTable          = InventTable::find(kanban.ItemId);
            planActivityService  = PlanActivityService::findKanbanJob(kanbanJob, true);

            planActivityLocation = planActivity.issueLocation();
            wmsShipment          = kanbanJob.wmsShipment();

            kanbanBoardTmpTransferJob.clear();
            kanbanBoardTmpTransferJob.IssueInventLocationId           = planActivityLocation.InventLocationId;
            kanbanBoardTmpTransferJob.IssueWMSLocationId              = planActivityLocation.wmsLocationId;
            kanbanBoardTmpTransferJob.ReceiptInventLocationId         = kanbanJob.InventLocationId;
            kanbanBoardTmpTransferJob.ReceiptWMSLocationId            = kanbanJob.wmsLocationId;
            kanbanBoardTmpTransferJob.KanbanRule                      = kanban.KanbanRule;
            kanbanBoardTmpTransferJob.ItemId                          = kanban.ItemId;
            kanbanBoardTmpTransferJob.InventDimId                     = kanban.InventDimId;
            kanbanBoardTmpTransferJob.Express                         = kanban.Express;
            kanbanBoardTmpTransferJob.CardId                          = kanban.KanbanCardId;
            kanbanBoardTmpTransferJob.QuantityOrdered                 = kanban.QuantityOrdered;
            kanbanBoardTmpTransferJob.Status                          = kanbanJob.Status;
            kanbanBoardTmpTransferJob.Job                             = kanbanJob.RecId;
            kanbanBoardTmpTransferJob.ExpectedDateTime                = kanbanJob.ExpectedDateTime;
            kanbanBoardTmpTransferJob.DueDateTime                     = kanbanJob.DueDateTime;
            kanbanBoardTmpTransferJob.ActualEndDateTime               = kanbanJob.ActualEndDateTime;
            kanbanBoardTmpTransferJob.Color                           = kanbanJob.LeanScheduleGroupColor;
            kanbanBoardTmpTransferJob.ScheduleGroupName               = kanbanJob.LeanScheduleGroupName;
            kanbanBoardTmpTransferJob.KanbanId                        = kanban.KanbanId;
            kanbanBoardTmpTransferJob.Kanban                          = kanban.RecId;
            kanbanBoardTmpTransferJob.KanbanStatus                    = kanban.Status;
            kanbanBoardTmpTransferJob.ActivityName                    = planActivity.Name;
            kanbanBoardTmpTransferJob.PlanReferenceName               = planReference.PlanName;
            kanbanBoardTmpTransferJob.InventUnitId                    = inventTable.inventUnitId();
            kanbanBoardTmpTransferJob.ShipmentId                      = wmsShipment.ShipmentId;
            kanbanBoardTmpTransferJob.ShippingDateTime                = wmsShipment.ShippingDateTime;
            kanbanBoardTmpTransferJob.Quantity                        = kanbanJob.QuantityOrdered;
            kanbanBoardTmpTransferJob.IsOverdue                       = KanbanJob::isOverdue(
                                                                                        kanbanJob.DueDateTime,
                                                                                        kanbanJob.ExpectedDateTime,
                                                                                        kanbanJob.Status,
                                                                                        kanbanRule.ReplenishmentStrategy,
                                                                                        kanbanRuleFixed.ReplenishmentLeadTime);
            if (planActivityService.RecId)
            {
                kanbanBoardTmpTransferJob.CarrierIdDataAreaId             = planActivityService.CarrierIdDataAreaId;
                kanbanBoardTmpTransferJob.CarrierCode                     = planActivityService.CarrierCode;
                kanbanBoardTmpTransferJob.FreightedBy                     = planActivity.FreightedBy;
                kanbanBoardTmpTransferJob.VendAccount                     = planActivityService.vendorAccount();
            }

            targetContainer += [kanbanBoardTmpTransferJob];
        }

        return targetContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordsProcessJobBoardServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban transfer jobs that belong to a specific work cell into a container.
    /// </summary>
    /// <param name="_workCellFilterRecId">
    ///    A work cell record identifier to filter by it.
    /// </param>
    /// <param name="_legalEntity">
    ///    A legal entity identification.
    /// </param>
    /// <returns>
    ///    The container with the kanban transfer jobs.
    /// </returns>
    private static container recordsProcessJobBoardServer(
        WrkCtrResourceGroupRefRecId _workCellFilterRecId,
        LegalEntity                 _legalEntity = CompanyInfo::current())
    {
        KanbanBoardTmpTransferJob   kanbanBoardTmpTransferJob;
        QueryRun                    queryRun;
        KanbanJob                   kanbanJob;
        Kanban                      kanban;
        KanbanRule                  kanbanRule;
        KanbanRuleFixed             kanbanRuleFixed;
        PlanActivity                planActivity;
        PlanActivityLocation        planActivityLocation;
        QueryBuildDataSource        kanbanJob_ds;
        QueryBuildDataSource        kanban_ds;
        QueryBuildDataSource        planActivity_ds;
        QueryBuildDataSource        leanProductionFlowActivity_ds;
        container                   targetContainer = conNull();

        queryRun = new QueryRun(KanbanBoardTmpTransferJob::buildQueryProcessJobBoard(_workCellFilterRecId,_legalEntity));

        kanbanJob_ds = queryRun.query().dataSourceTable(tableNum(KanbanJob));
        kanbanJob_ds.fields().clearFieldList();
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, RecId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, Status));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, RecId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, LeanScheduleGroupColor));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, LeanScheduleGroupName));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, QuantityOrdered));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, DueDateTime));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, ExpectedDateTime));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, ActualEndDateTime));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, LeanProductionFlowActivity));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, InventLocationId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, InventLocationDataAreaId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, wmsLocationId));
        kanbanJob_ds.fields().addField(fieldNum(KanbanJob, wmsLocationDataAreaId));

        kanban_ds = queryRun.query().dataSourceTable(tableNum(Kanban));
        kanban_ds.fields().clearFieldList();
        kanban_ds.fields().addField(fieldNum(Kanban, RecId));
        kanban_ds.fields().addField(fieldNum(Kanban, Express));
        kanban_ds.fields().addField(fieldNum(Kanban, ItemId));
        kanban_ds.fields().addField(fieldNum(Kanban, KanbanRule));
        kanban_ds.fields().addField(fieldNum(Kanban, KanbanId));
        kanban_ds.fields().addField(fieldNum(Kanban, KanbanCardId));
        kanban_ds.fields().addField(fieldNum(Kanban, InventDimId));

        planActivity_ds = queryRun.query().dataSourceTable(tableNum(PlanActivity));
        planActivity_ds.fields().clearFieldList();
        planActivity_ds.fields().addField(fieldNum(PlanActivity, RecId));
        planActivity_ds.fields().addField(fieldNum(PlanActivity, PlanActivityType));
        planActivity_ds.fields().addField(fieldNum(PlanActivity, Name));

        leanProductionFlowActivity_ds = queryRun.query().dataSourceTable(tableNum(LeanProductionFlowActivity));
        leanProductionFlowActivity_ds.fields().clearFieldList();

        // Fill the table from the results of the query
        while (queryRun.next())
        {
            kanban              = queryRun.get(tableNum(Kanban));
            kanbanJob       = queryRun.get(tableNum(KanbanJob));
            planActivity    = queryRun.get(tableNum(PlanActivity));

            kanbanRule      = KanbanRule::find(kanban.KanbanRule);
            kanbanRuleFixed = KanbanRuleFixed::findParentRecId(kanbanRule.RecId);

            planActivityLocation = planActivity.issueLocation();

            kanbanBoardTmpTransferJob.clear();
            kanbanBoardTmpTransferJob.IssueInventLocationId   = planActivityLocation.InventLocationId;
            kanbanBoardTmpTransferJob.IssueWMSLocationId      = planActivityLocation.wmsLocationId;
            kanbanBoardTmpTransferJob.ReceiptInventLocationId = kanbanJob.InventLocationId;
            kanbanBoardTmpTransferJob.ReceiptWMSLocationId    = kanbanJob.wmsLocationId;
            kanbanBoardTmpTransferJob.KanbanRule              = kanban.KanbanRule;
            kanbanBoardTmpTransferJob.ItemId                  = kanban.ItemId;
            kanbanBoardTmpTransferJob.InventDimId             = kanban.InventDimId;
            kanbanBoardTmpTransferJob.Express                 = kanban.Express;
            kanbanBoardTmpTransferJob.CardId                  = kanban.KanbanCardId;
            kanbanBoardTmpTransferJob.KanbanId                = kanban.KanbanId;
            kanbanBoardTmpTransferJob.Kanban                  = kanban.RecId;
            kanbanBoardTmpTransferJob.QuantityOrdered         = kanbanJob.QuantityOrdered;
            kanbanBoardTmpTransferJob.Status                  = kanbanJob.Status;
            kanbanBoardTmpTransferJob.Job                     = kanbanJob.RecId;
            kanbanBoardTmpTransferJob.ExpectedDateTime        = kanbanJob.ExpectedDateTime;
            kanbanBoardTmpTransferJob.DueDateTime             = kanbanJob.DueDateTime;
            kanbanBoardTmpTransferJob.ActualEndDateTime       = kanbanJob.ActualEndDateTime;
            kanbanBoardTmpTransferJob.Color                   = kanbanJob.LeanScheduleGroupColor;
            kanbanBoardTmpTransferJob.ScheduleGroupName       = kanbanJob.LeanScheduleGroupName;
            kanbanBoardTmpTransferJob.ActivityName            = planActivity.Name;
            kanbanBoardTmpTransferJob.IsOverdue               = KanbanJob::isOverdue(
                                                                                kanbanJob.DueDateTime,
                                                                                kanbanJob.ExpectedDateTime,
                                                                                kanbanJob.Status,
                                                                                kanbanRule.ReplenishmentStrategy,
                                                                                kanbanRuleFixed.ReplenishmentLeadTime);

            targetContainer += [kanbanBoardTmpTransferJob];
        }

        return targetContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordsTransferJobBoardServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the kanban transfer jobs for the <c>KanbanBoardTransferJob</c> form.
    /// </summary>
    /// <param name="_kanbanBoardTmpFilterCriteria">
    ///  A <c>KanbanBoardTmpFilterCriteria</c> table buffer that specifies the filter criteria.
    /// </param>
    /// <param name="_maxRecords">
    /// The maximum number of records to retrieve.
    /// </param>
    /// <param name="_leanKanbanJobStatus">
    /// A <c>LeanKanbanJobStatus</c> value that used used as an additional filter criteria.
    /// </param>
    /// <returns>
    /// The container with the kanban transfer jobs.
    /// </returns>
    private static container recordsTransferJobBoardServer(
        KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria,
        int                          _maxRecords,
        LeanKanbanJobStatus          _leanKanbanJobStatus)
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    kanbanJob_ds;

        container               targetContainer = conNull();

        if (_maxRecords != 0)
        {
            queryRun = KanbanBoardTmpTransferJob::buildQueryTransferJobBoard(_kanbanBoardTmpFilterCriteria,
                                                                          _maxRecords,
                                                                          true,
                                                                          _leanKanbanJobStatus);
            if (queryRun)
            {
                // Completed jobs are sorted by recently completed, not sequence
                query = queryRun.query();
                query.clearOrderBy();
                kanbanJob_ds = query.dataSourceTable(tableNum(KanbanJob));

                if (_leanKanbanJobStatus == LeanKanbanJobStatus::Completed)
                {
                    kanbanJob_ds.addOrderByField(fieldNum(KanbanJob, ActualEndDateTime), SortOrder::Descending);
                }
                else
                {
                    kanbanJob_ds.addOrderByField(fieldNum(KanbanJob, DueDateTime), SortOrder::Ascending);
                }

                targetContainer = KanbanBoardTmpTransferJob::processTransferJobResults(queryRun);
            }
        }

        return targetContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordsTransferJobBoardServerSingleJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the kanban transfer jobs for the <c>KanbanBoardTransferJob</c> form.
    /// </summary>
    /// <param name="_kanbanBoardTmpFilterCriteria">
    ///  A <c>KanbanBoardTmpFilterCriteria</c> table buffer that specifies the filter criteria.
    /// </param>
    /// <returns>
    /// The container with the kanban transfer jobs.
    /// </returns>
    private static container recordsTransferJobBoardServerSingleJob(KanbanBoardTmpFilterCriteria _kanbanBoardTmpFilterCriteria)
    {
        Query                       query;
        QueryRun                    queryRun;
        QueryBuildRange             queryRange;
        QueryBuildDataSource        kanbanJob_ds;

        KanbanBoardTmpTransferJob   localBuffer;

        #define.recordCount(1)

        container               targetContainer = conNull();

        if (_kanbanBoardTmpFilterCriteria.KanbanCardId)
        {
            queryRun = KanbanBoardTmpTransferJob::buildQueryTransferJobBoard(_kanbanBoardTmpFilterCriteria,
                                                                            #recordCount);
            if (queryRun)
            {
                query = queryRun.query();
                query.clearOrderBy();
                kanbanJob_ds = query.dataSourceTable(tableNum(KanbanJob));

                // add filtering by card id
                queryRange = SysQuery::findOrCreateRange(
                                        query.dataSourceTable(tableNum(Kanban)),
                                        fieldNum(Kanban, KanbanCardId));
                queryRange.value(queryValue(_kanbanBoardTmpFilterCriteria.KanbanCardId));

                // add sort order to fetch last completed job
                kanbanJob_ds.addOrderByField(fieldNum(KanbanJob, Status), SortOrder::Ascending);
                kanbanJob_ds.addOrderByField(fieldNum(KanbanJob, Sequence), SortOrder::Descending);

                targetContainer = KanbanBoardTmpTransferJob::processTransferJobResults(queryRun);

                if (conLen(targetContainer) == #recordCount)
                {
                    [localBuffer] = targetContainer;

                    // if last job is not completed, we fetch first job that's not completed
                    if (localBuffer.Status != LeanKanbanJobStatus::Completed)
                    {
                        query.clearOrderBy();

                        // add sort order to fetch first job in lowest status
                        kanbanJob_ds.addOrderByField(fieldNum(KanbanJob, Sequence), SortOrder::Ascending);

                        queryRange = SysQuery::findOrCreateRange(
                                                query.dataSourceTable(tableNum(KanbanJob)),
                                                fieldNum(KanbanJob, Status));
                        queryRange.value(SysQuery::valueNot(LeanKanbanJobStatus::Completed));

                        queryRun.reset();

                        targetContainer = KanbanBoardTmpTransferJob::processTransferJobResults(queryRun);
                    }
                }
            }
        }

        return targetContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<Label>@SYS134589</Label>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PlanActivityName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActualEndDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanJobEndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanCardId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSCarrierCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierIdDataAreaId</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Color</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LeanScheduleGroupColor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DueDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanJobDueDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpectedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanJobScheduleExpectedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Express</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanExpress</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreightedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>WMSFreightedBy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>IconImage</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LeanKanbanJobIcon</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventUnitId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOverdue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssueInventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssueWMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Label>@SYS131933</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Job</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS131642</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Kanban</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KanbanId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KanbanRule</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS131579</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KanbanStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>LeanKanbanStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlanReferenceName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PlanName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanJobQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityOrdered</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KanbanJobQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiptInventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceiptWMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Label>@sys131934</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ScheduleGroupName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LeanScheduleGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shipmentId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WMSShipmentId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>shippingDateTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WMSShipmentDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>LeanKanbanJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ItemInventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>IssueInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IssueInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssueInventLocationId</Name>
					<Field>IssueInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>IssueWMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IssueWMSLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssueInventLocationId</Name>
					<Field>IssueInventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssueWMSLocationId</Name>
					<Field>IssueWMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Kanban</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Kanban</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Kanban</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KanbanId</Name>
					<Field>KanbanId</Field>
					<RelatedField>KanbanId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>KanbanCard</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>KanbanCard</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Card</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CardId</Name>
					<Field>CardId</Field>
					<RelatedField>CardId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>KanbanJob</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>KanbanJob</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>KanbanJob</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Job</Name>
					<Field>Job</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>KanbanRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>KanbanRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>KanbanRule</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KanbanRule</Name>
					<Field>KanbanRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReceiptInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReceiptInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceiptInventLocationId</Name>
					<Field>ReceiptInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReceiptWMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReceiptWMSLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceiptInventLocationId</Name>
					<Field>ReceiptInventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceiptWMSLocationId</Name>
					<Field>ReceiptWMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TMSCarrier</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TMSCarrier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<Field>CarrierCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJob</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventUnitId</Name>
					<Field>InventUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSShipment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSShipment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>shipmentId</Name>
					<Field>shipmentId</Field>
					<RelatedField>shipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ShipmentIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>