<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceLicense</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSMobileDeviceLicense extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean exists(WHSMobileAppDeviceId _deviceId)
    {
        WHSMobileDeviceLicense license;

        if (_deviceId)
        {
            select firstonly RecId from license 
                where license.DeviceId == _deviceId;
        }

        return license.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIfNotExists</Name>
				<Source><![CDATA[
    private static void createIfNotExists(WHSMobileAppDeviceId _deviceId)
    {
        if (!WHSMobileDeviceLicense::exists(_deviceId))
        {
            int infologLine = infologLine();
            ttsbegin;

            try
            {
                WHSMobileDeviceLicense license;
                license.DeviceId = _deviceId;
                license.insert();
            }
            catch (Exception::DuplicateKeyException)
            {
                // If it was already created, just continue
                infolog.clear(infologLine);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLicense</Name>
				<Source><![CDATA[
    private static void deleteLicense(WHSMobileAppDeviceId _deviceId)
    {
        ttsbegin;

        WHSMobileDeviceLicense license;

        delete_from license
            where license.DeviceId == _deviceId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDevice</Name>
				<Source><![CDATA[
    internal static void registerDevice(WHSMobileDevice _mobileDevice)
    {
        using (var instrumentationTask = WHSMobileRequestInstrumentationTask::newFromDeviceLicenseRegistration(_mobileDevice))
        {
            switch (_mobileDevice.DeviceLicense)
            {
                case WHSMobileDeviceLicenseType::Auto:
                case WHSMobileDeviceLicenseType::BlockSharedUsage:
                    WHSMobileDeviceLicense::deleteLicense(_mobileDevice.DeviceId);
                    break;

                case WHSMobileDeviceLicenseType::Licensed:
                case WHSMobileDeviceLicenseType::LicenseRequired:
                    WHSMobileDeviceLicense::createIfNotExists(_mobileDevice.DeviceId);
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Framework</TableGroup>
	<Visibility>Internal</Visibility>
	<Visible>No</Visible>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>DeviceId</Name>
			<AssetClassification>EUPI</AssetClassification>
			<ExtendedDataType>WHSMobileAppDeviceId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DeviceIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DeviceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSMobileDevice</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSMobileDevice</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeviceId</Name>
					<Field>DeviceId</Field>
					<RelatedField>DeviceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>