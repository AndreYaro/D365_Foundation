<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransitDocumentType_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TransitDocumentType_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
    {
        if (!TransitDocumentType_IN::exist(_recId))
        {
            return checkFailed(strFmt(TransitDocumentType_IN::txtNotExist(), _recId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines a new type of transit document.
    /// </summary>
    /// <param name="_tableId">
    /// Table ID for the transit document.
    /// </param>
    /// <param name="_distinguishFieldId">
    /// Field ID for distinguishing different types of transit document from the same table.
    /// </param>
    /// <param name="_distinguishFieldValue">
    /// Field value for distinguishing different types of transit document from the same table.
    /// </param>
    /// <param name="_useRuleExtension">
    /// Indicates if to use rule extension or not.
    /// </param>
    /// <returns>
    /// The <c>TransitDocumentType_IN</c> record for the newly-defined transit document type.
    /// </returns>
    public static TransitDocumentType_IN defineType(
        RefTableId  _tableId,
        FieldId     _distinguishFieldId = 0,
        Integer     _distinguishFieldValue = 0,
        NoYes       _useRuleExtension = NoYes::No)
    {
        TransitDocumentType_IN  newType;

        ttsBegin;

        newType.RefTableId                  = _tableId;
        newType.DistinguishFieldId          = _distinguishFieldId;
        newType.DistinguishFieldValue       = _distinguishFieldValue;
        newType.UseRuleExtension            = _useRuleExtension;
        newType.insert();

        ttsCommit;

        return newType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the transit document type.
    /// </summary>
    /// <param name="_tableId">
    /// Table ID for the transit document.
    /// </param>
    /// <param name="_distinguishFieldId">
    /// Field ID for distinguishing different types of transit document from the same table.
    /// </param>
    /// <param name="_distinguishFieldValue">
    /// Field value for distinguishing different types of transit document from the same table.
    /// </param>
    /// <param name="_forUpdate">
    /// Whether the record is found for updating purposes, false by default.
    /// </param>
    /// <returns>
    /// The <c>TransitDocumentType_IN</c> record for the newly-defined transit document type.
    /// </returns>
    public static TransitDocumentType_IN findType(
        RefTableId  _tableId,
        FieldId     _distinguishFieldId = 0,
        Integer     _distinguishFieldValue = 0,
        boolean     _forUpdate = false)
    {
        TransitDocumentType_IN  documentType;

        documentType.selectForUpdate(_forUpdate);

        select firstOnly documentType
            where documentType.RefTableId == _tableId
            && documentType.DistinguishFieldId == _distinguishFieldId
            && documentType.DistinguishFieldValue == _distinguishFieldValue;

        return documentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrDefineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the transit document type.
    /// </summary>
    /// <param name="_tableId">
    /// Table ID for the transit document.
    /// </param>
    /// <param name="_distinguishFieldId">
    /// Field ID for distinguishing different types of transit document from the same table.
    /// </param>
    /// <param name="_distinguishFieldValue">
    /// Field value for distinguishing different types of transit document from the same table.
    /// </param>
    /// <param name="_useRuleExtension">
    /// Indicates if to use rule extension or not.
    /// </param>
    /// <returns>
    /// The <c>TransitDocumentType_IN</c> record for the newly-defined transit document type.
    /// </returns>
    public static TransitDocumentType_IN findOrDefineType(
        RefTableId  _tableId,
        FieldId     _distinguishFieldId = 0,
        Integer     _distinguishFieldValue = 0,
        NoYes       _useRuleExtension = NoYes::No)
    {
        TransitDocumentType_IN  documentType = TransitDocumentType_IN::findType(_tableId, _distinguishFieldId, _distinguishFieldValue);
        if (!documentType.RecId)
        {
            documentType = TransitDocumentType_IN::defineType(_tableId, _distinguishFieldId, _distinguishFieldValue, _useRuleExtension);
        }
        else if(documentType.UseRuleExtension != _useRuleExtension)
        {
            ttsBegin;
            documentType.selectForUpdate(true);
            documentType.UseRuleExtension = _useRuleExtension;
            documentType.update();
            ttsCommit;
        }
        return documentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        TransitDocumentType_IN  type;

        select firstOnly RecId from type
            where type.RecId == _recId;

        return type.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnyTransitDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether any transit document type exists.
    /// </summary>
    /// <returns>
    /// true if the transit document type exists; false if no transit document type exists.
    /// </returns>
    public static boolean existsAnyTransitDocType()
    {
        TransitDocumentType_IN transitDocumentType_IN;

        select count(RecId) from transitDocumentType_IN;

        return transitDocumentType_IN.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TransitDocumentType_IN</c> record by the give RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <param name="_forUpdate">
    /// Whether the record is found for updating purposes, false by default.
    /// </param>
    /// <returns>
    /// The <c>TransitDocumentType_IN</c> for the transit document type.
    /// </returns>
    public static TransitDocumentType_IN find(RecId _recId, boolean _forUpdate = false)
    {
        TransitDocumentType_IN  documentType;

        if (_recId)
        {
            documentType.selectForUpdate(_forUpdate);

            select firstOnly documentType
                where documentType.RecId == _recId;
        }

        return documentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return strFmt("@SYS102169");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYP4880649</DeveloperDocumentation>
	<TableGroup>Main</TableGroup>
	<Visible>No</Visible>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>APARShared</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DistinguishFieldValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DistinguishFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DistinguishFieldId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FieldId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DistinguishFieldValue</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseRuleExtension</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DistinguishFieldId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DistinguishFieldValue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>