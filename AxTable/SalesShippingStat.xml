<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesShippingStat</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesShippingStat extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    void clear()
    {
        super();

        this.initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesParmSubTable</Name>
				<Source><![CDATA[
    void initFromSalesParmSubTable(SalesParmSubTable _salesParmSubTable)
    {
        this.ParmId         = _salesParmSubTable.ParmId;
        this.OrigSalesId    = _salesParmSubTable.OrigSalesId;
        this.TableRefId     = _salesParmSubTable.TableRefId;
        this.SalesId        = _salesParmSubTable.salesParmTable().SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesShippingStatHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record in the <c>SalesShippingStat</c> table that is based on a record in the
    /// <c>SalesShippingStatHistory</c> table.
    /// </summary>
    /// <param name="_salesShippingStatHistory">
    /// The record in the <c>SalesShippingStatHistory</c> table on which to base the initialization.
    /// </param>
    public void initFromSalesShippingStatHistory(SalesShippingStatHistory _salesShippingStatHistory)
    {
        this.Volume             = _salesShippingStatHistory.Volume;
        this.NetWeight          = _salesShippingStatHistory.NetWeight;
        this.GrossWeight        = _salesShippingStatHistory.GrossWeight;
        this.FreightZone        = _salesShippingStatHistory.FreightZone;
        this.CartonsQty         = _salesShippingStatHistory.CartonsQty;
        this.UnitWeight         = _salesShippingStatHistory.UnitWeight;
        this.Quantity           = _salesShippingStatHistory.Quantity;
        this.Nolabels           = _salesShippingStatHistory.Nolabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    void initFromSalesTable(SalesTable _salesTable)
    {
        this.FreightZone    = _salesTable.FreightZone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTotals</Name>
				<Source><![CDATA[
    void initFromSalesTotals(SalesTotals _salesTotals)
    {
        this.NetWeight      = _salesTotals.totalRemainInventWeight();
        this.GrossWeight    = _salesTotals.totalRemainInventGrossWeight();
        this.Volume         = _salesTotals.totalRemainInventVolume();
        this.Quantity       = _salesTotals.totalInventRemainQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.Nolabels = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.OrigSalesId)
        {
            this.OrigSalesId = this.SalesId;
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(SalesShippingStat, NetWeight),
                fieldStr(SalesShippingStat, UnitWeight):
                this.GrossWeight = this.NetWeight + this.UnitWeight + this.origTaraWeight();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>origTaraWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tara weight from the <c>orig</c> value for the buffer.
    /// </summary>
    /// <returns>
    /// The tara weight that is calculated from the <c>orig</c> value for the buffer.
    /// </returns>
    public ItemTaraWeight origTaraWeight()
    {
        SalesShippingStat orig = this.orig();
        return orig.GrossWeight - orig.NetWeight - orig.UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    void  printJournal(FormletterJournalPrint _journalPrint = null,
                       RecordSortedList       _journalList  = null)
    {
        Args                parameters = new Args();
        MenuFunction        salesShippingLabelMenu;

        salesShippingLabelMenu = new MenuFunction(menuitemOutputStr(SalesShippingLabel),MenuItemType::Output);
        parameters.caller(_journalPrint);
        if (_journalList)
            parameters.object(_journalList);
        else
            parameters.record(this);

        salesShippingLabelMenu.run(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesShippingStat</Name>
				<Source><![CDATA[
    static void createSalesShippingStat(SalesParmSubTable   _salesParmSubTable,
                                        SalesParmUpdate     _salesParmUpdate)
    {
        SalesShippingStat    localSalesShippingStat;
        SalesTotals          shippingSalesTotals;
        SalesParmTable       salesParmTable;

        if (SalesParameters::find().useShippingStat(_salesParmUpdate.DocumentStatus))
        {
            ttsbegin;

            salesParmTable = _salesParmSubTable.salesParmTable();
            if (salesParmTable.CustPackingSlipJour)
            {
                localSalesShippingStat = SalesShippingStat::findFromPackingSlipJour(salesParmTable.CustPackingSlipJour, _salesParmSubTable.OrigSalesId);
            }

            if (!localSalesShippingStat.RecId)
            {
                SalesShippingStat::deleteFromSalesParmSubTable(_salesParmSubTable);

                localSalesShippingStat.initFromSalesTable(_salesParmSubTable.salesTable());
            }

            // <GBR>
            localSalesShippingStat.VolumeType_BR  = BrazilParameters::find().VolumeType_BR;
            localSalesShippingStat.VolumeQty_BR   = BrazilParameters::find().VolumeQty_BR;
            // </GBR>

            if (localSalesShippingStat.ParmId || !localSalesShippingStat.RecId)
            {
                shippingSalesTotals = SalesTotals::construct(_salesParmSubTable, _salesParmUpdate.SpecQty, AccountOrder::None, _salesParmUpdate.ParmId, '', _salesParmUpdate.DocumentStatus);
                shippingSalesTotals.prepareRemainQuantitiesCalculation();
                localSalesShippingStat.initFromSalesTotals(shippingSalesTotals);
            }

            localSalesShippingStat.initFromSalesParmSubTable(_salesParmSubTable);
            localSalesShippingStat.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromSalesParmSubTable</Name>
				<Source><![CDATA[
    static void deleteFromSalesParmSubTable(SalesParmSubTable _salesParmSubTable)
    {
        try
        {
            SalesShippingStat salesShippingStat;

            if (SalesShippingStatSkipDeleteActionsManuallyDeleteFlight::instance().isEnabled())
            {
                SalesShippingStatHistory salesShippingStatHistory;

                salesShippingStat.skipDeleteActions(true);

                delete_from salesShippingStatHistory
                exists join salesShippingStat
                where salesShippingStat.RecId       == salesShippingStatHistory.SalesShippingStat &&
                      salesShippingStat.ParmId      == _salesParmSubTable.ParmId                  &&
                      salesShippingStat.TableRefId  == _salesParmSubTable.TableRefId              &&
                      salesShippingStat.OrigSalesId == _salesParmSubTable.OrigSalesId;
            }

            delete_from salesShippingStat
                where salesShippingStat.ParmId      == _salesParmSubTable.ParmId        &&
                      salesShippingStat.TableRefId  == _salesParmSubTable.TableRefId    &&
                      salesShippingStat.OrigSalesId == _salesParmSubTable.OrigSalesId;
        }
        catch (Exception::UpdateConflict)
        {
            #OCCRetryCount

            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }

            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromSalesParmTable</Name>
				<Source><![CDATA[
    static void deleteFromSalesParmTable(SalesParmTable _salesParmTable)
    {
        try
        {
            SalesShippingStat salesShippingStat;

            delete_from salesShippingStat
                where salesShippingStat.ParmId      == _salesParmTable.ParmId    &&
                      salesShippingStat.TableRefId  == _salesParmTable.TableRefId;
        }
        catch (Exception::UpdateConflict)
        {
            #OCCRetryCount

            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }

            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>SalesShippingStat</c> record by using the packing slip reference and original sales
    /// order ID.
    /// </summary>
    /// <param name="_custPackingSlipJourRecId">
    /// The packing slip reference for which to find the record.
    /// </param>
    /// <param name="_salesIdOrig">
    /// The original sales order ID for which to find the record.
    /// </param>
    /// <returns>
    /// A record in the <c>SalesShippingStat</c> table; otherwise, an empty record.
    /// </returns>
    static SalesShippingStat findFromPackingSlipJour(CustPackingSlipJourRecId _custPackingSlipJourRecId, SalesIdOrig _salesIdOrig)
    {
        SalesShippingStat salesShippingStat;
        CustPackingSlipJour custPackingSlipJour = CustPackingSlipJour::findRecId(_custPackingSlipJourRecId);

        select firstonly forupdate salesShippingStat
            where salesShippingStat.PackingSlipId   == custPackingSlipJour.PackingSlipId
               && salesShippingStat.DeliveryDate    == custPackingSlipJour.DeliveryDate
               && salesShippingStat.SalesId         == custPackingSlipJour.SalesId
               && salesShippingStat.OrigSalesId     == _salesIdOrig;

        return salesShippingStat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToUpdate</Name>
				<Source><![CDATA[
    static void transferToUpdate(ParmId          _newparmId,
                                        ParmId          _parmId,
                                        TradeLineRefId  _tableRefId)
    {
        SalesShippingStat   salesShippingStat;

        ttsbegin;
        while select salesShippingStat
            where salesShippingStat.ParmId      == _parmId       &&
                  salesShippingStat.TableRefId  == _tableRefId
        {
            salesShippingStat.ParmId = _newparmId;
            salesShippingStat.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromShipmentStat_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the SalesShippingStat buffer with the volume, weight and quantity information
    /// from the shipment stat record.
    /// </summary>
    /// <param name="_shipment">
    /// Contains the shipment information that will be used to initialize the SalesShippingStat buffer fields.
    /// </param>
    private void initFromShipmentStat_BR(ShipmentStat_BR _shipment)
    {
        this.NetWeight     = _shipment.parmItemNetWeight();
        this.GrossWeight   = _shipment.parmGrossWeight();
        this.VolumeQty_BR  = _shipment.parmVolumeQuantity();
        this.VolumeType_BR = _shipment.parmVolumeType();
        this.volume        = _shipment.parmVolume();
        this.Quantity      = _shipment.parmInventQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesShippingStatFromLoad_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates sales shipping stat records for a sales order when the posting happens from a load.
    /// </summary>
    /// <param name="_salesParmSubTable">
    /// SalesParmSubTable buffer
    /// </param>
    /// <param name="_salesParmUpdate">
    /// Sales parm update buffer that contains information about the sales order header that is being posted.
    /// </param>
    /// <param name="_loadId">
    /// Id of the WHSLoadTable that is being posted.
    /// </param>
    /// <remarks>
    /// This method will create one shipment stat per load line volume type.
    /// All load lines that have the same volume type will be grouped together.
    /// </remarks>
    public static void createSalesShippingStatFromLoad_BR(SalesParmSubTable _salesParmSubTable, SalesParmUpdate _salesParmUpdate, WHSLoadId _loadId)
    {
        ShipmentStatSummary_BR shipmentsSummary;

        SalesTable sales;

        if (!_loadId)
        {
            SalesShippingStat::createSalesShippingStat(_salesParmSubTable, _salesParmUpdate);
            return;
        }

        sales = _salesParmSubTable.salesTable();
        shipmentsSummary = ShipmentStatSummary_BR::constructFromLoadForSalesOrder(_loadId, sales.SalesId, _salesParmSubTable);

        SalesShippingStat::createSalesShippingStatFromShipments_BR(shipmentsSummary, _salesParmSubTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesShippingStatFromShipments_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates shipments for a given sales order based on the shipment summary API.
    /// This API provides the shipment information to be created based on the load line information
    /// for a given sales order.
    /// </summary>
    /// <param name="_shipmentsSummary">
    /// Shipments summary contain the information that will be used to create the SalesShippingStat records.
    /// </param>
    /// <param name="_salesParmSubTable">
    /// The SalesShippingStat records will be related to the sales table linked to this buffer.
    /// </param>
    /// <remarks>
    /// The method deletes all SalesShippingStat that are related to the sales parm sub table at the beginning,
    /// so that they can be created again.
    /// </remarks>
    private static void createSalesShippingStatFromShipments_BR(ShipmentStatSummary_BR _shipmentsSummary, SalesParmSubTable _salesParmSubTable)
    {
        ShipmentStat_BR   shipment;
        List              volumeTypes;
        ListEnumerator    volumesEnumerator;
        SalesShippingStat salesShippingStat;

        SalesShippingStat::deleteFromSalesParmSubTable(_salesParmSubTable);

        volumeTypes = _shipmentsSummary.getVolumeTypes();
        volumesEnumerator = volumeTypes.getEnumerator();

        while (volumesEnumerator.moveNext())
        {
            shipment = _shipmentsSummary.getShipmentForVolumeType(volumesEnumerator.current());

            salesShippingStat.clear();
            salesShippingStat.initFromSalesParmSubTable(_salesParmSubTable);
            salesShippingStat.initFromSalesTable(_salesParmSubTable.salesTable());
            salesShippingStat.initFromShipmentStat_BR(shipment);
            salesShippingStat.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SalesShipments</ConfigurationKey>
	<DeveloperDocumentation>@SYS124503</DeveloperDocumentation>
	<Label>@SYS54067</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<TitleField2>ParmId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SalesShippingStatHistory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SalesShippingStatHistory</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingSlipId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GrossWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackingSlip</Name>
			<Label>@SYS11549</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackingSlipId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigSalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Shipments</Name>
			<Label>@SYS50395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GrossWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CartonsQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Nolabels</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VolumeType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VolumeQty_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CartonsQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CartonsQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesShippingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FreightZone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustFreightZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GrossWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>GrossWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemNetWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Nolabels</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PrintCopies</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigSalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdOrig</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingSlipId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PackingSlipId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS23075</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitPackingWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Volume</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Volume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VolumeQty_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VolumeQty_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VolumeType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VolumeType_BR</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesShippingIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigSalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PackingSlipIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PackingSlipId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DeliveryDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigSalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceDate</Name>
					<Field>InvoiceDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPackingSlipJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPackingSlipJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackingSlipId</Name>
					<Field>PackingSlipId</Field>
					<RelatedField>PackingSlipId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryDate</Name>
					<Field>DeliveryDate</Field>
					<RelatedField>DeliveryDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>Invoice</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OriginSalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OriginSalesTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesShippingStat</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigSalesId</Name>
					<SourceEDT>SalesIdOrig</SourceEDT>
					<Field>OrigSalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesParmTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesParmTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesShippingStat</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>