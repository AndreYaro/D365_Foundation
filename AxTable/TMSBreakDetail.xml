<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSBreakDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSBreakDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        int     maxBreaks = 14;

        if (this.tmsBreakMaster().findNumberOfBreakDetailFields() > maxBreaks)
        {
            throw error(strfmt("@TRX359", maxBreaks));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntIntoContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an integer value to container in sorted order.
    /// </summary>
    /// <param name="_con">
    /// Container that has sorted behaviour.
    /// </param>
    /// <param name="_value">
    /// Integer value to be inserted.
    /// </param>
    /// <returns>
    /// The container with the new value inserted in it.
    /// </returns>
    private container insertIntIntoContainer(container _con, int _value)
    {
        container       ret     = _con;
        int             counter;
        int             detailCount = conLen(ret);

        if (detailCount == 0)
        {
            ret += _value;
        }
        else
        {
            for (counter = 1; counter <= detailCount; counter += 1)
            {
                if (conPeek(ret, counter) > _value)
                {
                    ret = conIns(ret, counter, _value);
                    break;
                }
            }
            if (conFind(ret, _value) == 0)
            {
                ret += _value;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRealIntoContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a real value to container in sorted order.
    /// </summary>
    /// <param name="_con">
    /// Container that has sorted behaviour.
    /// </param>
    /// <param name="_value">
    /// Real value to be inserted.
    /// </param>
    /// <returns>
    /// The container with the new value inserted in it.
    /// </returns>
    private container insertRealIntoContainer(container _con, real _value)
    {
        container       ret     = _con;
        int             counter;
        int             detailCount = conLen(ret);

        if (detailCount == 0)
        {
            ret += _value;
        }
        else
        {
            for (counter = 1; counter <= detailCount; counter += 1)
            {
                if (conPeek(ret, counter) > _value)
                {
                    ret = conIns(ret, counter, _value);
                    break;
                }
            }

            if (conFind(ret, _value) == 0)
            {
                ret += _value;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStrIntoContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a string value to a container in sorted order.
    /// </summary>
    /// <param name="_con">
    /// Container that has sorted behaviour.
    /// </param>
    /// <param name="_value">
    /// String value to be inserted.
    /// </param>
    /// <returns>
    /// The container with the new value inserted in it.
    /// </returns>
    private container insertStrIntoContainer(container _con, str _value)
    {
        container       ret     = _con;
        int             counter;
        int             detailCount = conLen(ret);

        if (detailCount == 0)
        {
            ret += _value;
        }
        else
        {
            for (counter = 1; counter <= detailCount; counter += 1)
            {
                if (conPeek(ret, counter) > _value)
                {
                    ret = conIns(ret, counter, _value);
                    break;
                }
            }

            if (conFind(ret, _value) == 0)
            {
                ret += _value;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsBreakMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>TMSBreakMaster</c> record from the break master code.
    /// </summary>
    /// <returns>
    /// The <c>TMSBreakMaster</c> record from the break master code.
    /// </returns>
    TMSBreakMaster tmsBreakMaster()
    {
        return TMSBreakMaster::find(this.BreakMasterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TMSBreakDetail      origBreakDetail;

        origBreakDetail = this.orig();

        super();

        TMSBreakDetail::updateRateBaseDetail(origBreakDetail, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        switch (this.tmsBreakMaster().DataType)
        {
            case TMSDataType::Integer:
                if (!str2intok(this.Value))
                {
                    ret = checkFailed("@TRX204");
                }
                break;

            case TMSDataType::Real:
                if (!str2numok(this.Value))
                {
                    ret = checkFailed("@TRX204");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>TMSBreakDetail</c> record exists.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return (_recId) &&
               (select firstonly TMSBreakDetail
                    where tmsBreakDetail.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSBreakDetail</c> record with given parameters.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSBreakDetail find(RecId   _recId,
                                      boolean _forupdate = false)
    {
        TMSBreakDetail    tmsBreakDetail;

        if (_recId)
        {
            tmsBreakDetail.selectForUpdate(_forupdate);

            select firstonly tmsBreakDetail
                where tmsBreakDetail.RecId == _recId;
        }

        return tmsBreakDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCodeAndValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSBreakDetail</c> record by master code and value.
    /// </summary>
    /// <param name="_tmsBreakMasterCode">
    /// Master code of the record.
    /// </param>
    /// <param name="_tmsValue">
    /// Value of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSBreakDetail findByCodeAndValue(TMSBreakMasterCode _tmsBreakMasterCode,
                                                    TMSValue           _tmsValue,
                                                    boolean            _forupdate = false)
    {
        TMSBreakDetail    tmsBreakDetail;

        if (_tmsBreakMasterCode &&
            _tmsValue)
        {
            tmsBreakDetail.selectForUpdate(_forupdate);

            select firstonly tmsBreakDetail
                where tmsBreakDetail.BreakMasterCode == _tmsBreakMasterCode &&
                      tmsBreakDetail.Value ==           _tmsValue;
        }

        return tmsBreakDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderedCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds ordered container that contains the values for the break master.
    /// </summary>
    /// <param name="_breakMasterCode">
    /// Code of the break master.
    /// </param>
    /// <returns>
    /// The ordered container that contains values for the break master.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exception is data type is not defined on the break master.
    /// </exception>
    static container getOrderedCon(TMSBreakMasterCode _breakMasterCode)
    {
        TMSBreakDetail      breakDetail;
        TMSDataType         breakDataType   = TMSBreakMaster::find(_breakMasterCode).DataType;
        container           ret;

        while select breakDetail
            where breakDetail.BreakMasterCode    == _breakMasterCode
        {
            switch (breakDataType)
            {
                case TMSDataType::String:
                    ret = breakDetail.insertStrIntoContainer(ret, breakDetail.Value);
                    break;

                case TMSDataType::Integer:
                    ret = breakDetail.insertIntIntoContainer(ret, str2int(breakDetail.Value));
                    break;

                case TMSDataType::Real:
                    ret = breakDetail.insertRealIntoContainer(ret, str2num(breakDetail.Value));
                    break;

                default:
                    throw error("@TRX203");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRateBaseDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Update related rate base details if the break changes.
    /// </summary>
    /// <param name="_origDetail">
    ///     The break detail before changes.
    /// </param>
    /// <param name="_newDetail">
    ///     The break detail after changes.
    /// </param>
    static void updateRateBaseDetail(TMSBreakDetail _origDetail, TMSBreakDetail _newDetail)
    {
        TMSRateBase         rateBase;
        TMSRateBaseDetail   rateBaseDetail;
        int                 counter;
        TMSRateBaseTypeCode rateBaseTypeCode;
        FieldId             dimensionId;

        ttsBegin;

        while select RateBaseCode, RateMasterCode, BreakMasterCode
            from rateBase
            where rateBase.BreakMasterCode     == _origDetail.BreakMasterCode
        {
            rateBaseTypeCode = TMSRateMaster::find(rateBase.RateMasterCode).RateBaseTypeCode;

            counter = int642int((select count(RecId)
                from TMSRateBaseTypeField
                where TMSRateBaseTypeField.RateBaseTypeCode == rateBaseTypeCode
                    && TMSRateBaseTypeField.FieldType == TMSFieldType::RateBase).RecId);

            dimensionId = TMSRateBase::dynamicFieldId(tableNum(TMSRateBaseDetail), literalStr(Dimension), counter);

            while select forUpdate rateBaseDetail
                where rateBase.RateBaseCode == rateBaseDetail.RateBaseCode
                    && rateBaseDetail.(dimensionId) == _origDetail.Value
            {
                rateBaseDetail.(dimensionId) = _newDetail.Value;
                rateBaseDetail.update();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1880</DeveloperDocumentation>
	<Label>@TRX92</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BreakMasterCode</TitleField1>
	<TitleField2>Value</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>BreakMasterCodeValueIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BreakMasterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BreakMasterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BreakMasterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BreakMasterCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSBreakMasterCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BreakMasterCodeValueIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BreakMasterCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Value</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TMSBreakMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TMSBreakMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BreakMasterCode</Name>
					<SourceEDT>TMSBreakMasterCode</SourceEDT>
					<Field>BreakMasterCode</Field>
					<RelatedField>BreakMasterCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>