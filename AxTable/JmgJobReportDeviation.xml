<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgJobReportDeviation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgJobReportDeviation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateDeviationFromParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>JmgJobReportDeviation</c> based on the parameters passed.
    /// </summary>
    /// <param name = "_updateParam">
    /// <c>JmgJobReportDeviationUpdateParam</c> record containing the calculation parameters.
    /// </param>
    public static void populateDeviationFromParams(JmgJobReportDeviationUpdateParam _updateParam)
    {
        JmgJobReportDeviation jobReportDeviation;

        delete_from jobReportDeviation
            where jobReportDeviation.UserId == curUserId();

        JmgJobReportDeviation::populateDeviationForSchedMethod(ProdSchedMethod::JobScheduling, _updateParam);
        JmgJobReportDeviation::populateDeviationForSchedMethod(ProdSchedMethod::OperationScheduling, _updateParam);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportedQtyDeviation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates reported quantity deviation for a given <c>JmgJobReportDeviation</c> record.
    /// </summary>
    /// <param name = "_jmgJobReportDeviation">
    /// <c>JmgJobReportDeviation</c> record that should be updated.
    /// </param>
    public static void updateReportedQtyDeviation(JmgJobReportDeviation _jmgJobReportDeviation)
    {
        QueryRun queryRun = _jmgJobReportDeviation.getQueryRunForDeviationJobCalculation();
        queryRun.next();

        JmgJobTable job = queryRun.get(tableNum(JmgJobTable));
        ProdRouteTrans routeTrans = queryRun.get(tableNum(ProdRouteTrans), 2);

        ttsbegin;

        _jmgJobReportDeviation.ReportAsFinishedDeviation = JmgJobReportDeviation::calcReportedQtyDeviation(job, routeTrans);
        _jmgJobReportDeviation.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHoursDeviation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates hours deviation for a given <c>JmgJobReportDeviation</c> record.
    /// </summary>
    /// <param name = "_jmgJobReportDeviation">
    /// <c>JmgJobReportDeviation</c> record that should be updated.
    /// </param>
    public static void updateHoursDeviation(JmgJobReportDeviation _jmgJobReportDeviation)
    {
        QueryRun queryRun = _jmgJobReportDeviation.getQueryRunForDeviationJobCalculation();
        queryRun.next();

        JmgJobTable job = queryRun.get(tableNum(JmgJobTable));
        ProdRouteTrans routeTrans = queryRun.get(tableNum(ProdRouteTrans), 2);

        ttsbegin;

        _jmgJobReportDeviation.HoursDeviation = JmgJobReportDeviation::calcHoursDeviation(job, routeTrans, _jmgJobReportDeviation.getSchedMethodForCalculation());
        _jmgJobReportDeviation.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConsumptionQtyDeviation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates consumption deviation for a given <c>JmgJobReportDeviation</c> record.
    /// </summary>
    /// <param name = "_jmgJobReportDeviation">
    /// <c>JmgJobReportDeviation</c> record that should be updated.
    /// </param>
    public static void updateConsumptionQtyDeviation(JmgJobReportDeviation _jmgJobReportDeviation)
    {
        ttsbegin;
        _jmgJobReportDeviation.ConsumptionDeviation = JmgJobReportDeviation::calcConsumptionDeviation(JmgJobTable::find(_jmgJobReportDeviation.JobId));
        _jmgJobReportDeviation.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>JmgJobReportDeviation</c> record for the given user, date and job;
    /// creates a record if it did not find one.
    /// </summary>
    /// <param name = "_userId">
    /// User Id for which <c>JmgJobReportDeviation</c> record should be found or created.
    /// </param>
    /// <param name = "_calculationDate">
    /// Date for which <c>JmgJobReportDeviation</c> record should be found or created.
    /// </param>
    /// <param name = "_jobId">
    /// Job Id for which <c>JmgJobReportDeviation</c> record should be found or created.
    /// </param>
    /// <param name = "_forUpdate">
    /// Specifies whether the record, if found, should be marked for update.
    /// </param>
    /// <returns>
    /// The <c>JmgJobReportDeviation</c> record that is found or created.
    /// </returns>
    public static JmgJobReportDeviation findOrCreate(UserId _userId, JmgDate _calculationDate, JmgJobId _jobId, boolean _forUpdate = false)
    {
        JmgJobReportDeviation jobReportDeviation;
        select firstonly jobReportDeviation
            where jobReportDeviation.UserId == _userId
               && jobReportDeviation.CalculationDate == _calculationDate
               && jobReportDeviation.JobId == _jobId;

        if (jobReportDeviation.RecId)
        {
            if (_forUpdate)
            {
                jobReportDeviation.selectForUpdate(true);
            }
        }
        else
        {
            jobReportDeviation.initValue();
            jobReportDeviation.UserId          = _userId;
            jobReportDeviation.CalculationDate = _calculationDate;
            jobReportDeviation.JobId           = _jobId;
            jobReportDeviation.Accepted        = NoYes::No;
            jobReportDeviation.insert();
        }

        return jobReportDeviation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>JmgJobReportDeviation</c> record for the given user, date and job.
    /// </summary>
    /// <param name = "_userId">
    /// User Id for which <c>JmgJobReportDeviation</c> record should be found or created.
    /// </param>
    /// <param name = "_jobId">
    /// Job Id for which <c>JmgJobReportDeviation</c> record should be found or created.
    /// </param>
    /// <param name = "_forUpdate">
    /// Specifies whether the record, if found, should be marked for update.
    /// </param>
    /// <returns>
    /// The <c>JmgJobReportDeviation</c> record that is found.
    /// </returns>
    public static JmgJobReportDeviation find(UserId _userId, JmgJobId _jobId, boolean _forUpdate = false)
    {
        JmgJobReportDeviation jobReportDeviation;
        select firstonly jobReportDeviation
            where jobReportDeviation.UserId == _userId
               && jobReportDeviation.JobId == _jobId;

        if (jobReportDeviation.RecId)
        {
            if (_forUpdate)
            {
                jobReportDeviation.selectForUpdate(true);
            }
        }
        return jobReportDeviation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deviationImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an image representing the deviation status of the job
    /// </summary>
    [SysClientCacheDataMethodAttribute(true)]
    public display container deviationImage(JmgJobReportDeviation _jobReportDeviation)
    {
        if (_jobReportDeviation.Accepted)
        {
            return ImageReference::constructForSymbol(ImageReferenceSymbol::Accept).pack();
        }
        else
        {
            return conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptJobReportDeviation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Accept selected reported job deviations in the form data source
    /// </summary>
    /// <param name="_datasource">
    ///    A form data source object
    /// </param>
    /// <returns>
    ///    The number of job deviation accepted
    /// </returns>
    public static void acceptJobReportDeviation(FormDataSource _datasource)
    {
        JmgJobReportDeviation tmpJobReportDeviation;
        tmpJobReportDeviation.setTmp();
        tmpJobReportDeviation.clear();

        MultiSelectionHelper  selectionHelper  = MultiSelectionHelper::construct();
        selectionHelper.parmDatasource(_datasource);

        JmgJobReportDeviation jobReportDeviation = selectionHelper.getFirst();
        while (jobReportDeviation.RecId)
        {
            tmpJobReportDeviation.UserId = jobReportDeviation.UserId;
            tmpJobReportDeviation.JobId = jobReportDeviation.JobId;
            tmpJobReportDeviation.CalculationDate = jobReportDeviation.CalculationDate;
            tmpJobReportDeviation.doInsert();

            jobReportDeviation = selectionHelper.getNext();
        }

        JmgJobReportDeviation jmgJobReportDeviation;
        update_recordset jmgJobReportDeviation
            setting
                Accepted = NoYes::Yes,
                DeviationScore = 0
            exists join tmpJobReportDeviation
            where jmgJobReportDeviation.UserId == tmpJobReportDeviation.UserId
               && jmgJobReportDeviation.JobId  == tmpJobReportDeviation.JobId
               && jmgJobReportDeviation.CalculationDate == tmpJobReportDeviation.CalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDeviationForSchedMethod</Name>
				<Source><![CDATA[
    private static void populateDeviationForSchedMethod(ProdSchedMethod _schedMethod, JmgJobReportDeviationUpdateParam _updateParam)
    {
        Query query = JmgJobReportDeviation::getQueryForSchedMethod(_schedMethod);

        JmgJobReportDeviation::applyProductionAreaFilter(query, _updateParam);
        JmgJobReportDeviation::applyDateFilter(query, _updateParam);

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            JmgJobReportDeviation::populateDeviationForJob(queryRun, _updateParam, _schedMethod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForSchedMethod</Name>
				<Source><![CDATA[
    private static Query getQueryForSchedMethod(ProdSchedMethod _schedMethod)
    {
        QueryName jobTransQueryName;

        if (_schedMethod ==ProdSchedMethod::JobScheduling)
        {
            jobTransQueryName = queryStr(JmgJobTransQueryJobSched);
        }
        else
        {
            jobTransQueryName = queryStr(JmgJobTransQueryOperSched);
        }

        if (!JmgJobTransQueryDateWithinResourceValidityFlight::instance().isEnabled())
        {
            Query query = new Query(jobTransQueryName);
            QueryBuildRange qbr = query.dataSourceTable(tableNum(ProdRouteTrans), 2).rangeField(fieldNum(ProdRouteTrans, DateWIP));
            
            if (qbr)
            {
                qbr.enabled(false);
            }

            return query;
        }
        else
        {
            return new Query(jobTransQueryName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDeviationForJob</Name>
				<Source><![CDATA[
    private static void populateDeviationForJob(QueryRun _queryRun, JmgJobReportDeviationUpdateParam _updateParam, ProdSchedMethod _schedMethod)
    {
        JmgJobTable job = _queryRun.get(tableNum(JmgJobTable));
        ProdRouteTrans routeTrans = _queryRun.get(tableNum(ProdRouteTrans), 2);
        WrkCtrResourceAndGroupView resourceGroup = _queryRun.get(tableNum(WrkCtrResourceAndGroupView));

        JmgJobReportDeviation jobReportDeviation;

        JmgDeviation reportedQtyDeviation = JmgJobReportDeviation::calcReportedQtyDeviation(job, routeTrans);
        JmgDeviation hoursDeviation       = JmgJobReportDeviation::calcHoursDeviation(job, routeTrans, _schedMethod);
        JmgDeviation consumptionDeviation = JmgJobReportDeviation::calcConsumptionDeviation(job);

        if ((reportedQtyDeviation > _updateParam.ReportedDeviationThreshold) ||
            (hoursDeviation       > _updateParam.HoursDeviationThreshold)    ||
            (consumptionDeviation > _updateParam.ConsumptionDeviationThreshold))
        {
            jobReportDeviation.JobId                     = job.JobId;
            jobReportDeviation.ProdId                    = job.ModuleRefId;
            jobReportDeviation.OprActId                  = job.OprActId;
            jobReportDeviation.JobType                   = job.Type;
            jobReportDeviation.ReportAsFinishedDeviation =
                (reportedQtyDeviation > _updateParam.ReportedDeviationThreshold) ? reportedQtyDeviation : 0;
            jobReportDeviation.HoursDeviation            =
                (hoursDeviation > _updateParam.HoursDeviationThreshold) ? hoursDeviation : 0;
            jobReportDeviation.ConsumptionDeviation      =
                (consumptionDeviation >  _updateParam.ConsumptionDeviationThreshold) ? consumptionDeviation : 0;
            jobReportDeviation.DeviationScore            = abs(reportedQtyDeviation) + abs(hoursDeviation) + abs(consumptionDeviation);
            jobReportDeviation.Resource                  = job.WrkCtrId;
            jobReportDeviation.ResourceGroup             = resourceGroup.WrkCtrIdGroup;
            jobReportDeviation.ProdUnit                  = resourceGroup.ProdUnitId;
            jobReportDeviation.UserId                    = curUserId();
            jobReportDeviation.Accepted                  = false;
            jobReportDeviation.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReportedQtyDeviation</Name>
				<Source><![CDATA[
    private static JmgDeviation calcReportedQtyDeviation(JmgJobTable _job, ProdRouteTrans _routeTrans)
    {
        if (ProdRoute::findByOprId(_job.ModuleRefId, _job.OprNum, _job.OprActId).OprPriority == RouteOprPriority::Primary)
        {
            return (_job.CalcQty == 0) ? 0 : round(abs(_routeTrans.QtyGood - _job.CalcQty) / _job.CalcQty * 100, 0.01);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHoursDeviation</Name>
				<Source><![CDATA[
    private static JmgDeviation calcHoursDeviation(JmgJobTable _job, ProdRouteTrans _routeTrans, ProdSchedMethod _schedMethod)
    {
        var estimatedHours        = _job.scheduledHours(_schedMethod);
        return (estimatedHours == 0) ? 0 : round(abs(_routeTrans.Hours   - estimatedHours) / estimatedHours * 100, 0.01);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsumptionDeviation</Name>
				<Source><![CDATA[
    private static JmgDeviation calcConsumptionDeviation(JmgJobTable _job)
    {
        return _job.consumptionDeviation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyProductionAreaFilter</Name>
				<Source><![CDATA[
    private static void applyProductionAreaFilter(Query _query, JmgJobReportDeviationUpdateParam _updateParam)
    {
        if (_updateParam.Resource)
        {
            QueryBuildDataSource jobDS = _query.dataSourceTable(tableNum(JmgJobTable));
            jobDS.addRange(fieldNum(JmgJobTable, WrkCtrId)).value(_updateParam.Resource);
        }

        if (_updateParam.ResourceGroup)
        {
            QueryBuildDataSource resourceGroupDS = _query.dataSourceTable(tableNum(WrkCtrResourceAndGroupView));
            resourceGroupDS.addRange(fieldNum(WrkCtrResourceAndGroupView, WrkCtrIdGroup)).value(_updateParam.ResourceGroup);
        }

        if (_updateParam.ProdUnit)
        {
            QueryBuildDataSource resourceGroupDS = _query.dataSourceTable(tableNum(WrkCtrResourceAndGroupView));
            resourceGroupDS.addRange(fieldNum(WrkCtrResourceAndGroupView, ProdUnitId)).value(_updateParam.ProdUnit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDateFilter</Name>
				<Source><![CDATA[
    private static void applyDateFilter(Query _query, JmgJobReportDeviationUpdateParam _updateParam)
    {
        QueryBuildDataSource prodRouteTransDS = _query.dataSourceTable(tableNum(ProdRouteTrans));

        QueryBuildDataSource resourceGroupDS = _query.dataSourceTable(tableNum(WrkCtrResourceAndGroupView));

        prodRouteTransDS.addRange(fieldNum(ProdRouteTrans, DateWIP)).value(
            strFmt("((%1.%2 >= %3) && (%1.%2 <= %4) && (%1.%2 >= %5.%6) && (%1.%2 <= %5.%7))",
                prodRouteTransDS.name(),
                fieldStr(ProdRouteTrans, DateWIP),
                DateTimeUtil::toStr(DateTimeUtil::newDateTime(_updateParam.FromDate, 0)),
                DateTimeUtil::toStr(DateTimeUtil::newDateTime(_updateParam.ToDate, 0)),
                resourceGroupDS.name(),
                fieldStr(WrkCtrResourceAndGroupView, ValidFrom),
                fieldStr(WrkCtrResourceAndGroupView, ValidTo)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRunForDeviationJobCalculation</Name>
				<Source><![CDATA[
    private QueryRun getQueryRunForDeviationJobCalculation()
    {
        Query query = JmgJobReportDeviation::getQueryForSchedMethod(this.getSchedMethodForCalculation());
        query.dataSourceTable(tableNum(JmgJobTable)).addRange(fieldNum(JmgJobTable, JobId)).value(this.JobId);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchedMethodForCalculation</Name>
				<Source><![CDATA[
    private ProdSchedMethod getSchedMethodForCalculation()
    {
        ProdRouteJob prodRouteJob;

        select firstonly RecId from prodRouteJob where prodRouteJob.JobId == this.JobId;
        return prodRouteJob.RecId ? ProdSchedMethod::JobScheduling : ProdSchedMethod::OperationScheduling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SCM:JmgJobReportDeviationDevDoc</DeveloperDocumentation>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>JobId</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductionControl</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgJobTable</Name>
			<Relation></Relation>
			<Table>JmgJobTable</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalculationDate</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumptionDeviation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDeviation</ExtendedDataType>
			<Label>@SCM:JmgJobConsumptionDeviation</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportAsFinishedDeviation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDeviation</ExtendedDataType>
			<Label>@SCM:JmgJobReportedQtyDeviation</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>HoursDeviation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDeviation</ExtendedDataType>
			<Label>@SCM:JmgJobHoursDeviation</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>JmgJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeviationScore</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OprActId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgOprActId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>JmgJobTableType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Accepted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Resource</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WrkCtrId</ExtendedDataType>
			<Label>@SYS89158</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResourceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrGroupId</ExtendedDataType>
			<Label>@SYS15433</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdUnitId</ExtendedDataType>
			<Label>@SYS102967</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JobIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>JobId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CalculationDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeviationScoreIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeviationScore</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>