<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailKitComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailKitComponent extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromTmpProductTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>RetailKitComponent</c> table.
    /// </summary>
    /// <param name="_tmpProductTable">
    /// The EcoResDistinct Product records
    /// </param>
    /// <param name="_retailKit">
    /// The Retail Kit record.
    /// </param>
    /// <returns>
    /// true if any rows were created; otherwise, false.
    /// </returns>
    public static boolean createFromTmpProductTable(
        TmpRetailProductsToAdd _tmpProductTable,
        RetailKit _retailKit)
    {
        int numberOfRows;
        UnitOfMeasure uom,productUom;
        EcoResDistinctProduct   ecoResDistinctProduct;

        uom = UnitOfMeasure::findBySymbol(InventParameters::find().DefaultUnitId);

        ttsbegin;
        while select _tmpProductTable
        {
            if (_tmpProductTable.Quantity == 0)
            {
                _tmpProductTable.Quantity++;
            }

            ecoResDistinctProduct= EcoResDistinctProduct::find(_tmpProductTable.EcoResDistinctProductVariant ? _tmpProductTable.EcoResDistinctProductVariant : _tmpProductTable.EcoResProduct);
            // Block adding kit product as component or substitute to another kit
            if (_tmpProductTable.EcoResDistinctProductVariant && retailKit::existByProductMaster(EcoResDistinctProductVariant::find(ecoResDistinctProduct.RecId).ProductMaster))
            {
                throw error(strFmt("@REX4520282" , EcoResProduct::find(ecoResDistinctProduct.RecId).productName()));
            }
            else if (!_tmpProductTable.EcoResDistinctProductVariant && EcoResProductMaster::exist(_tmpProductTable.EcoResProduct))
            {
                // Block adding product master as kit component
                throw error(strFmt("@REX4520717" , EcoResProduct::find(_tmpProductTable.EcoResProduct).productName()));
            }

            productUom = UnitOfMeasure::findBySymbol(InventTable::findByProduct(ecoResDistinctProduct.RecId).inventUnitId());

            if (RetailKitComponent::insertRetailKitComponent(_retailKit, ecoResDistinctProduct, _tmpProductTable.Quantity, productUom.RecId ? productUom.RecId : uom.RecId))
            {
                 numberOfRows ++;
            }
        }
        ttscommit;
        return numberOfRows > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>RetailKitComponent</c> table.
    /// </summary>
    /// <param name="_retailKitComponent">
    ///    The ID of the retail Kit Component record to find.
    /// </param>
    /// <param name="_retailKit">
    ///    The ID of the retail Kit record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>RetailKitComponent</c> table; otherwise, an empty record.
    /// </returns>
    static public RetailKitComponent find(RefRecId _retailKitComponent,RetailKit _retailKit, boolean _forUpdate = false)
    {
        RetailKitComponent retailKitComponent;

        if (_retailKitComponent)
        {
            retailKitComponent.selectForUpdate(_forUpdate);
            select firstonly retailKitComponent
                where retailKitComponent.RecId == _retailKitComponent && retailKitComponent.Kit == _retailKit.RecId;
        }
        return retailKitComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailKitComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record into table <c>RetailKitComponent</c>.
    /// </summary>
    /// <param name="_retailKit">
    /// The retail Kit record.
    /// </param>
    /// <param name="_ecoResDistinctProduct">
    /// A record buffer of table ecoResDistinctProduct.
    /// </param>
    /// <param name="_quantityProduct">
    /// The quantity of ecoResDistinctProduct.
    /// </param>
    /// <param name="_uomId">
    /// The unit of measure of the component product.
    /// </param>
    /// <param name="_showOnReceipt">
    /// Enable display of the component in POS receipt.
    /// </param>
    /// <returns>
    ///  A record in the <c>RetailKitComponent</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailKitComponent insertRetailKitComponent(RetailKit _retailKit,
                                            EcoResDistinctProduct _ecoResDistinctProduct,Qty _quantityProduct, UnitOfMeasureRecId _uomId, NoYes _showOnReceipt=NoYes::Yes)
    {
        RetailKitComponent   newRetailKitComponent;
        if (!RetailKitComponent::find(_ecoResDistinctProduct.RecId,_retailKit))
        {
            newRetailKitComponent.initValue();
            newRetailKitComponent.Kit           = _retailKit.RecId;
            newRetailKitComponent.Component  = _ecoResDistinctProduct.RecId;
            newRetailKitComponent.Quantity  = _quantityProduct;
            newRetailKitComponent.UnitOfMeasure  = _uomId;
            newRetailKitComponent.DoNotShowAtRegister  = _showOnReceipt;
            newRetailKitComponent.insert();
        }
        return newRetailKitComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next line number for Kit's component.
    /// </summary>
    /// <param name="_kitRecId">
    /// The Kit record id.
    /// </param>
    /// <returns>
    /// The next line number.
    /// </returns>
    public static LineNum  nextLineNum(RefRecId _kitRecId)
    {
        RetailKitComponent kitComponent;
        // Find the last line number then add 1
        select maxof(LineNum) from kitComponent
                where kitComponent.Kit == _kitRecId;

        return kitComponent.LineNum + 1.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // If LineNum is not assigned, get the next maximum line number and assign.
        if (!this.LineNum)
        {
            this.LineNum = RetailKitComponent::nextLineNum(this.Kit);
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX1075</DeveloperDocumentation>
	<FormRef>RetailKitConfigure</FormRef>
	<Label>@REX1071</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Kit</TitleField1>
	<TitleField2>Component</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Merchandising</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Kit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@RET5150</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Kit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoNotShowAtRegister</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Component</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResDistinctProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DoNotShowAtRegister</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Kit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailKitRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KitLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Kit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Component</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResDistinctProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Component</Name>
					<Field>Component</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailKit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailKit</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Kit</Name>
					<Field>Kit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitOfMeasure</Name>
					<Field>UnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>