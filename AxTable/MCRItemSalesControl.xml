<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRItemSalesControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRItemSalesControl extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that a rule does not already
    /// exist for the given item number, date range, item
    /// dimensions and location dimensions.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean                 ret;

        MCRItemSalesControl     mcrItemSalesControl;

        Query                   query;
        QueryBuildDataSource    qbdsItemSalesControl;
        QueryRun                queryRun;

        MCRRuleBeginDate        mcrRuleBeginDate;
        MCRRuleEndDate          mcrRuleEndDate;
        MCRRuleEndDate          mcrRuleBlankDate;

        mcrRuleBeginDate = this.RuleBeginDate ? this.RuleBeginDate: dateNull();
        mcrRuleEndDate = this.RuleEndDate ? this.RuleEndDate: dateMax();

        ret = super();

        // Data range cannot overlap (fyi - a blank begin
        // date is considered the beginning of time and
        // a blank end date is considered to be the end of
        // time).
        if (this.RuleBeginDate > this.RuleEndDate &&
           this.RuleBeginDate != dateNull() &&
           this.RuleEndDate  != dateNull() )
        {
            ret = checkFailed("@MCR24934");
        }

        // Build query
        query = new Query();
        qbdsItemSalesControl = query.addDataSource(tableNum(MCRItemSalesControl));

        // don't pick up the current record
        qbdsItemSalesControl.addRange(fieldNum(MCRItemSalesControl, RecId)).value('!' + queryValue(this.RecId));
        // look for a record that has the same item # for the one being inserted/updated.
        qbdsItemSalesControl.addRange(fieldNum(MCRItemSalesControl, ItemId)).value(this.ItemId);
        qbdsItemSalesControl.addRange(fieldNum(MCRItemSalesControl, InventDimID)).value(this.InventDimId);

        // If the end date is not blank try to find a record that has start date >= the end date or that does
        // not have a start date at all.
        if (this.RuleEndDate  != dateNull())
        {
            qbdsItemSalesControl.addRange(fieldNum(MCRItemSalesControl, RuleBeginDate)).value('..' + queryValue(mcrRuleEndDate) + ', ' + queryValue(mcrRuleBlankDate));
        }

        // If the start date is not blank try to find a record that has an end date <= the start date or that does
        // not have an end date at all.
        if (this.RuleBeginDate != dateNull())
        {
            qbdsItemSalesControl.addRange(fieldNum(MCRItemSalesControl, RuleEndDate)).value(queryValue(mcrRuleBlankDate) + ', ' + queryValue(mcrRuleBeginDate) + '..');
        }

        queryRun = new QueryRun(query);

        // If the query found a record then error.
        if (queryRun.next())
        {
            mcrItemSalesControl = queryRun.get(tableNum(MCRItemSalesControl));

            if (mcrItemSalesControl)
            {
                ret = checkFailed("@MCR24916");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for a rule set up on an item that states it's sell should
    /// be encouraged/discouraged.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension ID.
    /// </param>
    /// <returns>
    /// <c>mcrSalesControl</c> if the rule is found; otherwise, returns a blank value.
    /// </returns>
    public static MCRSalesControl mcrSalesControl(ItemId _itemId, InventDimId _inventDimId)
    {
        InventDim           InventDim , inventDimItem;
        MCRItemSalesControl itemSalesControl;
        date                currentDate;

        currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        // Get the item's invent dimensions
        inventDim = InventDim::find(_inventDimId);

        // Attempt to find a record that exists for the item given the system's current date
        // and all of it's dimensions (fyi - a blank begin ruled date equates to the beginning
        // of time and a blank rule end date equates to the end of time).
        select firstonly SalesControl from itemSalesControl
            where itemSalesControl.ItemId          == _itemId
               && ( (itemSalesControl.RuleBeginDate <= currentDate && itemSalesControl.RuleEndDate   >= currentDate)
                  ||(itemSalesControl.RuleBeginDate == dateNull()  && itemSalesControl.RuleEndDate   >= currentDate)
                  ||(itemSalesControl.RuleBeginDate <= currentDate && itemSalesControl.RuleEndDate   == dateNull() )
                  ||(itemSalesControl.RuleBeginDate == dateNull()  && itemSalesControl.RuleEndDate   == dateNull()))
               &&  itemSalesControl.InventDimId == _inventDimId;

        // If a record was not found attempt to find a record that exists for the item given the system's
        // current date, all of it's item dimensions (config, size, color) and blank location dimensions.
        if (!itemSalesControl)
        {
            inventDim.InventLocationId = '';
            inventDim.wmsLocationId = '';
            inventDim.InventBatchId = '';
            inventDim.InventSerialId = '';

            InventDimParm criteriaParm = InventDimParm::allProductDim();
            criteriaParm.InventSiteIdFlag = NoYes::Yes;
            criteriaParm.InventLocationIdFlag = NoYes::Yes;
            criteriaParm.wmsLocationIdFlag = NoYes::Yes;
            criteriaParm.InventBatchIdFlag = NoYes::Yes;
            criteriaParm.InventSerialIdFlag = NoYes::Yes;

            InventDimParm allowBlank = InventDimParm::allProductDim();

            select firstonly SalesControl from itemSalesControl
                where itemSalesControl.ItemId          == _itemId
                    && ( (itemSalesControl.RuleBeginDate <= currentDate && itemSalesControl.RuleEndDate   >= currentDate)
                        ||(itemSalesControl.RuleBeginDate == dateNull()  && itemSalesControl.RuleEndDate   >= currentDate)
                        ||(itemSalesControl.RuleBeginDate <= currentDate && itemSalesControl.RuleEndDate   == dateNull() )
                        ||(itemSalesControl.RuleBeginDate == dateNull()  && itemSalesControl.RuleEndDate   == dateNull()))
                #InventDimExistsJoinAllowBlank(itemSalesControl.InventDimId, inventDimItem, inventDim, criteriaParm, allowBlank);
        }

        return itemSalesControl.SalesControl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRCallCenter</ConfigurationKey>
	<DeveloperDocumentation>@MCR24878</DeveloperDocumentation>
	<Label>@MCR24878</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>SalesControl</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ItemIdDateRange</ClusteredIndex>
	<Modules>TransactionsAndOrders</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RuleBeginDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RuleEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemSalesControl</Name>
			<Label>@MCR24878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RuleBeginDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RuleEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RuleBeginDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRuleBeginDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RuleEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRRuleEndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesControl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRSalesControl</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdDateRange</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RuleBeginDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RuleEndDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>