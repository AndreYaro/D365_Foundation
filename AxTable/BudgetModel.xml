<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetModel extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetModel budgetSubModel;

        ttsbegin;

        super();

        if (this.Type == HeadingSub::Heading)
        {
            // Delete the sub model records for this heading record
            // and delete the sub model records that reference this heading record.
            delete_from budgetSubModel
                where budgetSubModel.Type == HeadingSub::SubModel &&
                    (budgetSubModel.ModelId == this.ModelId ||
                    budgetSubModel.SubModelId == this.ModelId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.Type    = HeadingSub::Heading;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        BudgetModelCheck   budgetModelCheck;

        ttsbegin;

        if (this.Type == HeadingSub::Heading)
        {
            this.SubModelId = this.ModelId;
        }
        else
        {
            budgetModelCheck = new BudgetModelCheck(this.ModelId, this.SubModelId);
            budgetModelCheck.run();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelName</Name>
				<Source><![CDATA[
    public display BudgetName modelName()
    {
        return BudgetModel::find(HeadingSub::Heading,this.ModelId).Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subModelName</Name>
				<Source><![CDATA[
    public display BudgetName subModelName()
    {
        return BudgetModel::find(HeadingSub::Heading,this.SubModelId).Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        if (this.Type == HeadingSub::Heading)
        {
            this.SubModelId = this.ModelId;
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetControlBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any <c>BudgetControlBudgetCycle</c> records exist for the <c>BudgetModel</c>
    /// table.
    /// </summary>
    /// <returns>
    /// true if there are no <c>BudgetControlBudgetCycle</c> records; otherwise, false.
    /// </returns>
    public boolean validateBudgetControlBudgetCycle()
    {
        boolean isValid = true;
        BudgetControlBudgetCycle controlBudgetCycle;

        while select BudgetCycle from controlBudgetCycle
            where controlBudgetCycle.BudgetModelId == this.ModelId &&
                controlBudgetCycle.BudgetModelDataAreaId == this.DataAreaId
        {
            isValid = checkFailed(strFmt("@SYS320431", this.ModelId, BudgetCycle::find(controlBudgetCycle.BudgetCycle).Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetSubModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget model can have sub-models.
    /// </summary>
    /// <returns>
    /// true if there can be sub-model for the given budget model; otherwise, false.
    /// </returns>
    public boolean validateBudgetSubModel()
    {
        boolean isValid = true;

        if (this.Type == HeadingSub::SubModel)
        {
            if (!BudgetModel::exist(HeadingSub::Heading, this.ModelId, this.ModelId))
            {
                isValid = checkFailed(strFmt("@SYS320416", this.ModelId, fieldPName(BudgetModel, ModelId), tablePName(BudgetModel)));
            }
            else if (BudgetControlBudgetCycle::existByBudgetModel(this))
            {
                isValid = checkFailed(strFmt("@SYS329793", this.ModelId));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean     ret;

        ret = super();

        ret = ret && this.validateBudgetControlBudgetCycle();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId field)
    {
        boolean     ret;

        ret = super(field);

        if (ret)
        {
            switch (field)
            {
                case fieldNum(BudgetModel, SubModelId):
                    ret = this.validateSubModelId();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the value of the <c>SubModelId</c> field of the <c>BudgetModel</c> table is
    /// valid.
    /// </summary>
    /// <returns>
    /// true if the <c>SubModelId</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateSubModelId()
    {
        boolean isValid = true;

        if (this.Type == HeadingSub::SubModel &&
            this.SubModelId)
        {
            if (!BudgetModel::exist(HeadingSub::Heading, this.SubModelId, this.SubModelId))
            {
                isValid = checkFailed(strFmt("@SYS320416", this.SubModelId, fieldPName(BudgetModel, SubModelId), tablePName(BudgetModel)));
            }
            else if (this.SubModelId == this.ModelId)
            {
                isValid = checkFailed("@SYS23394");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateBudgetSubModel();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetModelRange</Name>
				<Source><![CDATA[
    static str budgetModelRange(BudgetModelId _modelId)
    {
        //Returns a range containing model and all submodels to the model.

        BudgetModel subBudgetModel;
        str         modelRange;

        while select subBudgetModel
                index hint ModelIdx
                where subBudgetModel.ModelId == _modelId
        {
            if (modelRange)
            {
                modelRange += ',';
            }

            if (subBudgetModel && subBudgetModel.ModelId != subBudgetModel.SubModelId)
            {
                modelRange += BudgetModel::budgetModelRange(subBudgetModel.SubModelId);
            }
            else
            {
                modelRange += subBudgetModel.SubModelId;
            }
        }

        return modelRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(HeadingSub _type, BudgetModelId _model, BudgetModelId _subModel = '' )
    {
        boolean ret = true;

        if (!BudgetModel::exist(_type, _model, _subModel))
        {
            ret = checkFailed(strFmt(BudgetModel::txtNotExist(), _type, _model, _subModel));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkModel</Name>
				<Source><![CDATA[
    public static boolean checkModel(BudgetModelId model)
    {
        BudgetModel     budgetModel = BudgetModel::find(
            HeadingSub::Heading,
            model);

        if (! budgetModel)
        {
            return checkFailed(strFmt("@SYS9966",budgetModel.ModelId));
        }

        if (budgetModel.Blocked)
        {
            return checkFailed(strFmt("@SYS4829",budgetModel.ModelId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cov</Name>
				<Source><![CDATA[
    public static NoYes cov(BudgetModelId model)
    {
        BudgetModel budgetModel = BudgetModel::find(HeadingSub::Heading,model);

        return budgetModel.Cov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(HeadingSub _type, BudgetModelId _model, BudgetModelId _subModel = '' )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     budgetModel
                 where
                     budgetModel.Type == _type &&
                    budgetModel.ModelId == _model &&
                    budgetModel.SubModelId == _subModel).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandBudgetModelHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expands the sub budget model hierarchy for the specified budget model identity.
    /// </summary>
    /// <param name="_budgetModelId">
    ///    The identity of the budget model whose sub budget model hierarchy will be expanded.
    /// </param>
    /// <param name="_budgetModels">
    ///    A set of existing expanded sub budget models.
    /// </param>
    /// <returns>
    ///    A set of expanded sub budget models.
    /// </returns>
    private static Set expandBudgetModelHierarchy(BudgetModelId _budgetModelId, Set _budgetModels)
    {
        Set localBudgetModels = _budgetModels;
        BudgetModel budgetModel;

        if (!localBudgetModels.in(_budgetModelId))
        {
            localBudgetModels.add(_budgetModelId);
        }

        while select SubModelId from budgetModel
            where (budgetModel.ModelId == _budgetModelId
               && budgetModel.Type == HeadingSub::SubModel)
        {
            localBudgetModels = BudgetModel::expandBudgetModelHierarchy(budgetModel.SubModelId, localBudgetModels);
        }

        return localBudgetModels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BudgetModel find(
        HeadingSub _type,
        BudgetModelId _model,
        BudgetModelId _subModel   = '' ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetModel budgetModel;

        budgetModel.selectForUpdate(_forupdate);

        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetModel.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            budgetModel
            where
            budgetModel.Type == _type &&
                    budgetModel.ModelId == _model &&
                    ( (_subModel && budgetModel.SubModelId == _subModel) ||
                       !_subModel);

        return budgetModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetModels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a set of budget models in the specified budget model range.
    /// </summary>
    /// <param name="_fromBudgetModelId">
    ///    A value that indicates the range of the budget models to retrieve.
    /// </param>
    /// <param name="_toBudgetModelId">
    ///    A value that indicates the range of the budget models to retrieve.
    /// </param>
    /// <param name="_includeSubModels">
    ///    A flag that indicates whether the sub budget model hierarchy for the budget models in the range
    ///    should be included in the set.
    /// </param>
    /// <returns>
    ///    A set of budget models in the specified budget model range.
    /// </returns>
    public static Set getBudgetModels(
        BudgetModelId _fromBudgetModelId,
        BudgetModelId _toBudgetModelId,
        boolean _includeSubModels = false)
    {
        BudgetModel budgetModel;
        Set budgetModels = new Set(Types::String);
        Query query = new Query();
        QueryRun queryRun;

        query.addDataSource(tableNum(BudgetModel)).addRange(fieldNum(BudgetModel, ModelId)).value(SysQuery::range(_fromBudgetModelId, _toBudgetModelId));
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            budgetModel = queryRun.get(tableNum(BudgetModel)) as BudgetModel;

            if (_includeSubModels)
            {
                budgetModels = BudgetModel::expandBudgetModelHierarchy(budgetModel.ModelId, budgetModels);
            }
            else
            {
                budgetModels.add(budgetModel.ModelId);
            }
        }

        return budgetModels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the <c>BudgetModel</c> form for the specified budget model.
    /// </summary>
    /// <param name="_budgetModel">
    ///    The <c>BudgetModel</c> record referenced by the caller.
    /// </param>
    /// <param name="_caller">
    ///    The form object that called the <c>BudgetModel</c> form.
    /// </param>
    public static void jumpRefBudgetModel(BudgetModel _budgetModel, Object _caller)
    {
        Args            args;
        FormRun         formRun;

        args = new Args(new DictTable(_budgetModel.TableId).formRef());
        args.caller(_caller);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.dataSource().findRecord(_budgetModel);
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup for a <c>BudgetModel</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form control for which to perform the lookup.
    /// </param>
    /// <param name="_showStopped">
    /// A Boolean value that determines whether stopped budget models show in the lookup; optional.
    /// </param>
    public static void lookupBudgetModel(FormStringControl _ctrl, boolean _showStopped = false)
    {
        SysTableLookup          budgetModelLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRangeBlocked;
        QueryBuildRange         queryBuildRangeModelType;

        budgetModelLookup = SysTableLookup::newParameters(tablenum(BudgetModel), _ctrl, true);

        // Add the fields to be shown in the lookup form
        budgetModelLookup.addLookupfield(fieldnum(BudgetModel, ModelId));
        budgetModelLookup.addLookupfield(fieldnum(BudgetModel, Txt));

        // Create the query datasource
        queryBuildDataSource = query.addDataSource(tablenum(BudgetModel));

        if (_showStopped == false)
        {
            // Budget Model must not be stopped.
            queryBuildRangeBlocked = queryBuildDataSource.addRange(fieldnum(BudgetModel, Blocked));
            queryBuildRangeBlocked.value(enum2str(NoYes::No));
        }

        // Restrict to only Header budget models (no submodels).
        queryBuildRangeModelType = queryBuildDataSource.addRange(fieldnum(BudgetModel, Type));
        queryBuildRangeModelType.value(enum2str(HeadingSub::Heading));

        // Add the query to the lookup form
        budgetModelLookup.parmQuery(query);

        // Perform lookup
        budgetModelLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102170";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126976</DeveloperDocumentation>
	<FormRef>BudgetModel</FormRef>
	<Label>@SYS16138</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ModelId</TitleField1>
	<TitleField2>Txt</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TypeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Budget</Modules>
	<PrimaryIndex>TypeIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BudgetTransactionHeader</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>BudgetTransactionHeader</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cov</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cov</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubModelId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@sys13688</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cov</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerAppropriation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetModelId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubModelId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetModelSubId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HeadingSub</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SubModelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ModelIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ModelId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SubModelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SubModelIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SubModelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BudgetModelMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ModelId</MapField>
					<MapFieldTo>ModelId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SubModelId</MapField>
					<MapFieldTo>SubModelId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BudgetModel</Name>
			<EntityRelationshipRole>@SYS126977</EntityRelationshipRole>
			<RelatedTable>BudgetModel</RelatedTable>
			<RelatedTableRole>BudgetModel</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>BudgetModel</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubModelId</Name>
					<Field>SubModelId</Field>
					<RelatedField>SubModelId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModelId</Name>
					<Field>ModelId</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Type</Name>
					<Field>Type</Field>
					<ValueStr>HeadingSub::SubModel</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>