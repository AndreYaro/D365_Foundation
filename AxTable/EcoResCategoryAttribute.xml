<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCategoryAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
public class EcoResCategoryAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // This comment only make syp different to sys.
        EcoResCategory ecoResCategoryForLookup;
        ecoResCategoryForLookup = EcoResCategory::find(this.Category);

        super();

        EcoResCategoryAttributeLookup::synchronizeWithCategoryAttribute(ecoResCategoryForLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name that is associated with the attribute.
    /// </summary>
    /// <returns>
    ///    A <c>Name</c> value.
    /// </returns>
    public Name getAttributeName()
    {
        EcoResAttribute ecoResAttribute;

        select firstonly Name from ecoResAttribute
            where ecoResAttribute.RecId == this.Attribute;

        return ecoResAttribute.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeTranslatedName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the translated name that is associated with the attribute.
    /// </summary>
    /// <param name="_sessionLanguage">
    /// The language ID of the current session.
    /// </param>
    /// <returns>
    ///    A <c>Name</c> value.
    /// </returns>
    public Name getAttributeTranslatedName(LanguageId _sessionLanguage)
    {
        EcoResAttributeTranslation  ecoResAttributeTranslation;

        select firstonly FriendlyName from ecoResAttributeTranslation
            where   ecoResAttributeTranslation.Language == _sessionLanguage &&
                    ecoResAttributeTranslation.Attribute == this.Attribute;

        return ecoResAttributeTranslation.FriendlyName != '' ? ecoResAttributeTranslation.FriendlyName : this.getAttributeName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSolverName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related solver name.
    /// </summary>
    /// <returns>
    /// A solver variable name.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The solver variable is not related to the attribute.
    /// </exception>
    public PCSolverName getSolverName()
    {
        PCSolverVariable solverVariable;

        select firstonly Name from solverVariable
            where solverVariable.Attribute == this.Attribute;

        if (!solverVariable.RecId)
        {
            throw error(strFmt("@SYS316716", this.getAttributeName()));
        }

        return solverVariable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcCheckMandatoryModifierCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a condition exists for the modifier in the <paramref name="_modifierType" />
    /// parameter.
    /// </summary>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if a condition exists; otherwise, a <c>NoYes::No</c>
    /// enumeration value.
    /// </returns>
    /// <remarks>
    /// This display method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public display NoYes pcCheckMandatoryModifierCondition()
    {
        return this.pcCheckModifierCondition(EcoResModifierType::Mandatory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcCheckModifierCondition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether a condition exists for the modifier in the <paramref name="_modifierType" />
    /// parameter.
    /// </summary>
    /// <param name="_modifierType">
    /// The modifier type of the condition.
    /// </param>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if a condition exists; otherwise, a <c>NoYes::No</c>
    /// enumeration value.
    /// </returns>
    public NoYes pcCheckModifierCondition(EcoResModifierType _modifierType)
    {
        EcoResComponentControl          modifier;
        PCApplicationControlConstraint  condition;
        #MACROLIB.resAppl
        NoYes result;

        select  firstonly RecId, ConditionExpressionConstraint from condition
        join    RecId from modifier
        where   condition.ComponentControl  == modifier.RecId
        &&      modifier.Modifier           == _modifierType
        &&      modifier.CategoryAttribute  == this.RecId;

        if ( condition.RecId != 0  && (condition.getConstraint().Expression != ''))
        {
            result = NoYes::Yes;
        }
        else
        {
            result = NoYes::No;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates an attribute and a reference.
    /// </summary>
    /// <param name="_duplicateCategory">
    /// A referenced record ID of a <c>EcoResCategory</c> record.
    /// </param>
    /// <param name="_duplicatedAttributesMap">
    /// A map that contains the pairs of IDs that link the original attributes to the duplicated attributes.
    /// </param>
    public void pcDuplicate(RefRecId _duplicateCategory
    , Map _duplicatedAttributesMap
    )
    {
        EcoResCategoryAttribute                     duplicate;
        EcoResComponentControl                      modifier;

        duplicate.data(this);

        // set reference to duplicated category
        duplicate.Category  = _duplicateCategory;

        // duplicate referenced attribute
        duplicate.Attribute = EcoResAttribute::find(this.Attribute).pcDuplicate();

        duplicate.insert();
        _duplicatedAttributesMap.insert(this.RecId, duplicate.RecId);

        // duplicate associated modifiers
        while select modifier
            where modifier.CategoryAttribute == this.RecId
        {
            modifier.pcDuplicate(duplicate.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated component.
    /// </summary>
    /// <returns>
    /// A <c>PCClass</c> record.
    /// </returns>
    public PCClass pcGetComponent()
    {
        PCClass         component;

        select firstonly component
            where   component.RecId == this.Category;

        return component;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetSetConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the constraint expression associated with this <c>EcoResCategoryAttribute</c>.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether the expression is set.
    /// </param>
    /// <param name="_expression">
    ///    The new constraint pattern when the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The constraint expression.
    /// </returns>
    /// <remarks>
    ///    The <c>PCProductConfigurationModelDetails</c> form uses this edit method.
    /// </remarks>
    public edit PCConstraintExpression pcGetSetConstraint(boolean _set, PCConstraintExpression _expression)
    {
        EcoResComponentControl          modifier;
        PCApplicationControlConstraint  condition;
        PCExpressionConstraint          constraint;

        if (_set)
        {
            modifier = EcoResComponentControl::findByAttributeAndModifierType(this.RecId, EcoResModifierType::Mandatory);
            if (!modifier.RecId && _expression)
            {
                // There is a constraint but no modifier. Create one
                modifier.CategoryAttribute = this.RecId;
                modifier.Modifier = EcoResModifierType::Mandatory;
                modifier.insert();
            }
            condition = PCModelingLibrary::findOrCreateModifierCondition(modifier);

            if (!_expression)
            {
                // There is no constraint anymore so remove the condition
                ttsbegin;
                condition = PCApplicationControlConstraint::find(condition.RecId, true);
                condition.delete();
                ttscommit;
            }
            else
            {
                // update the constraint expression
                ttsbegin;
                constraint = condition.getConstraint(true);
                constraint.Expression = _expression;
                constraint.update();
                ttscommit;
            }
            return _expression;
        }
        else
        {
            modifier = EcoResComponentControl::findByAttributeAndModifierType(this.RecId, EcoResModifierType::Mandatory);
            if (modifier.RecId)
            {
                condition   = PCModelingLibrary::findOrCreateModifierCondition(modifier);
                constraint  = condition.getConstraint();
                return constraint.Expression;
            }
            else
            {
                return '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetSetHiddenModifier</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or deletes a modifier of the <c>Hidden</c> type depending on the specified value.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to create or delete the modifier.
    /// </param>
    /// <param name="_value">
    ///    The current value when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The value of the <c>NoYes::Yes</c> enumeration value if the category has a modifier of the
    ///    <c>Hidden</c> type; otherwise, a <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This edit method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public edit PCHasHiddenModifier pcGetSetHiddenModifier(boolean _set, PCHasHiddenModifier _value)
    {
        return PCModelingLibrary::setAttributeModifier(this, _set, _value, EcoResModifierType::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetSetMandatoryModifier</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or deletes a modifier of the <c>Mandatory</c> type depending on the specified value.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to create the modifier.
    /// </param>
    /// <param name="_value">
    ///    The current value when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The value of the <c>NoYes::Yes</c> enumeration value if the category is to have a modifier of
    ///    <c>Mandatory</c> type; otherwise, a <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This edit method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public edit PCHasMandatoryModifier pcGetSetMandatoryModifier(boolean _set, PCHasMandatoryModifier _value)
    {
        return PCModelingLibrary::setAttributeModifier(this, _set, _value, EcoResModifierType::Mandatory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetSetReadOnlyModifier</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or deletes a modifier of the <c>ReadOnly</c> type depending on the specified value.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to create the modifier.
    /// </param>
    /// <param name="_value">
    ///    The current value when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    ///    The value of the <c>NoYes::Yes</c> enumeration value if the category is to have a modifier of the
    ///    <c>ReadOnly</c> type; otherwise, an <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This edit method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public edit PCHasReadOnlyModifier pcGetSetReadOnlyModifier(boolean _set, PCHasReadOnlyModifier _value)
    {
        return PCModelingLibrary::setAttributeModifier(this, _set, _value, EcoResModifierType::ReadOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCategoryRangeForAttributeInheritance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds filters (ranges) to the given <c>QueryBuildDataSource</c> so that it will identify all <c>EcoResCategory</c>
    /// nodes between the <paramref>_category</paramref> (inclusive) and its stop-inheritance ancestor (inclusive).
    /// </summary>
    /// <param name='_catQBDS'>
    /// An instance of the <c>QueryBuildDataSource</c> which must already have <c>EcoResCategory</c> as its datasource. It should have no ranges added yet.
    /// It will be modified after the method executes.
    /// </param>
    /// <param name='_category'>
    /// An existing <c>EcoResCategory</c> record for which to add the filters (ranges) to the <c>QueryBuildDataSource</c>.
    /// </param>
    /// <param name='_attributeModifier'>
    /// An instance of the <c>EcoResCategoryAttributeModifier</c> enum to identify the caller's purpose.
    /// </param>
    /// <remarks>
    /// The resulting <paramref>_catQBDS</paramref> will identify all <c>EcoResCategory</c>
    /// nodes between the <paramref>_category</paramref> (inclusive) and its stop-inheritance ancestor (exclusive).
    /// </remarks>
    public static void addCategoryRangeForAttributeInheritance(QueryBuildDataSource _catQBDS, EcoResCategory _category, EcoResCategoryAttributeModifier _attributeModifier = EcoResCategoryAttributeModifier::Category)
    {
        EcoResCategory              tmpNearestStopInheritAncestor;

        if (_category.RecId == 0 || !EcoResCategory::checkExist(_category.RecId))
        {
            throw Global::error("@SYS329471");
        }

        if (_catQBDS.table() != tableNum(EcoResCategory))
        {
           throw Global::error(strFmt("@SYS329470", _category.Name));
        }

        if ( _attributeModifier == EcoResCategoryAttributeModifier::Product )
        {
            tmpNearestStopInheritAncestor = ProcCategoryModifier::getNearestAncestorWithInheritUnchecked(_category, fieldNum(ProcCategoryModifier, IsProductAttributesInherited));
        }
        else
        {
            tmpNearestStopInheritAncestor = EcoResCategory::getNearestAncestorWithNoInheritance(_category);
        }

        // ============================================================
        // Add range to include all nodes between _category and tmpNearestStopInheritAncestor (both inclusive)
        //
        // That is include all ecoResCategory with
        //     (i)  ecoResCategory.CategoryHierarchy == _category.CategoryHierarchy
        // AND (ii) ancestor.NestedSetLeft <= ecoResCategory.NestedSetLeft <= _category.NestedSetLeft
        // AND (iii)_category.NestedSetRight <= ecoResCategory.NestedSetRight <= ancestor.NestedSetRight
        // ============================================================
        _catQBDS.addRange(fieldNum(EcoResCategory,CategoryHierarchy)).value(queryValue(_category.CategoryHierarchy));
        _catQBDS.addRange(fieldNum(EcoResCategory,NestedSetLeft)).value(queryRange(tmpNearestStopInheritAncestor.NestedSetLeft, _category.NestedSetLeft));
        _catQBDS.addRange(fieldNum(EcoResCategory,NestedSetRight)).value(queryRange(_category.NestedSetRight, tmpNearestStopInheritAncestor.NestedSetRight));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>EcoResCategoryAttribute</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResCategoryAttribute::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record in the <c>EcoResCategoryAttribute</c> table that has the specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID for which to search.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResCategoryAttribute</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResCategoryAttribute find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResCategoryAttribute record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameAndCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record in <c>EcoResCategoryAttribute</c> table that has the specified attribute name
    ///    and related category.
    /// </summary>
    /// <param name="_name">
    ///    The name of the record to find.
    /// </param>
    /// <param name="_category">
    ///    The category record ID of the record to find.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResCategoryAttribute</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResCategoryAttribute findByNameAndCategory(Name _name, RefRecId _category)
    {
        EcoResCategoryAttribute categoryAttribute;
        EcoResAttribute         attribute;

        if (!_name)
        {
            return categoryAttribute;
        }

        select firstonly categoryAttribute
            where categoryAttribute.Category == _category
            join RecId from attribute
                where attribute.RecId   == categoryAttribute.Attribute    &&
                      attribute.Name    == _name;

        return categoryAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateCategoryAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the attributes for the given category.
    /// </summary>
    /// <param name="_category">
    /// The reference RecId of the category.
    /// </param>
    /// <param name="_attribute">
    /// The reference RecId of the attribute.
    /// </param>
    /// <param name="_modifier">
    /// The value of attribute modifier.
    /// </param>
    /// <returns>
    /// The record of <c>EcoResCategoryAttribute</c> table.
    /// </returns>
    public static RefRecId findOrCreateCategoryAttribute(
        RefRecId _category,
        RefRecId _attribute,
        EcoResCategoryAttributeModifier _modifier = EcoResCategoryAttributeModifier::Category)
    {
        EcoResCategoryAttribute categoryAttribute;
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        select firstonly categoryAttribute
            where categoryAttribute.Category == _category
               && categoryAttribute.Attribute == _attribute
               && categoryAttribute.Modifier == _modifier;

        if (!categoryAttribute.RecId)
        {
            ttsbegin;
                categoryAttribute.Category = _category;
                categoryAttribute.Attribute = _attribute;
                categoryAttribute.Modifier = _modifier;
                categoryAttribute.insert();
            ttscommit;

            eventSource.EventWriteCategoryAttributeCreated('Category hierarchy', funcName(), 'New category attribute has been created.');
        }

        return categoryAttribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcFindDuplicateExtended</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the duplicated <c>EcoResCategoryAttribute</c> record by using the specified record ID of
    /// the original record.
    /// </summary>
    /// <param name="_originalCategoryAttribute">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_duplicatedComponent">
    /// The record ID of the duplicated component
    /// </param>
    /// <returns>
    /// An <c>EcoResCategoryAttribute</c> record; otherwise, an empty buffer.
    /// </returns>
    public static EcoResCategoryAttribute pcFindDuplicateExtended(RefRecId _originalCategoryAttribute, RefRecId _duplicatedComponent)
    {
        EcoResCategoryAttribute original;

        original = EcoResCategoryAttribute::find(_originalCategoryAttribute);

        return EcoResCategoryAttribute::findByNameAndCategory(original.getAttributeName(), _duplicatedComponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS152878</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>EcoResCategoryHierarchyDetails</FormRef>
	<Label>@SYS31826</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Category</TitleField1>
	<TitleField2>Attribute</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>CategoryAttributeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResApplicationControl</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResApplicationControl</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PCTemplateCategoryAttribute</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCTemplateCategoryAttribute</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS77030</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS69410</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Modifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>EcoResCategoryAttributeModifier</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryAttributeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Modifier</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>EcoResCategoryAttributeItemMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AttributeItemId</MapField>
					<MapFieldTo>Attribute</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
					<MapFieldTo>Category</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Modifier</MapField>
					<MapFieldTo>Modifier</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Attribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResAttribute</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResAttribute_EcoResCategoryAttribute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Category</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategory_EcoResCategoryAttribute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>