<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayAgreementOverride</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgPayAgreementOverride extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>payDeductToLate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PayDeductToLateSeconds</c> field of the <c>JmgPayAgreementOverride</c> record.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that specifies whether the <c>PayDeductToLateSeconds</c> field value must be
    /// updated.
    /// </param>
    /// <param name="value">
    /// The new value of the <c>PayDeductToLateSeconds</c> field.
    /// </param>
    /// <returns>
    /// The value of the <c>PayDeductToLateSeconds</c> field, formatted as a string.
    /// </returns>
    edit JmgLabelSecondsPayDeductToLate payDeductToLate(boolean set, JmgTimeString value)
    {
        if (set && value)
        {
            this.PayDeductToLateSeconds = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Minuts);
        }

        return JmgProfileSeconds::formattedSeconds(this.PayDeductToLateSeconds,JmgSecondPresentationEnum::Minuts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFrom_JmgStampJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an overridden pay agreement, based on the specified <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record to create an overridden pay agreement for.
    /// </param>
    /// <remarks>
    /// An overridden pay agreement is created based on the pay agreement and specified in the
    /// <c>JmgStampJournalTable</c> record.
    /// </remarks>
    static void createFrom_JmgStampJournalTable(JmgStampJournalTable _jmgStampJournalTable)
    {
        JmgPayAgreementOverride     jmgPayAgreementOverride;
        JmgPayAgreementOverrideLine jmgPayAgreementOverrideLine;
        JmgPayAgreementTable        jmgPayAgreementTable;
        JmgPayAgreementLine         jmgPayAgreementLine;
        JmgDayId                    dayId;

        ttsbegin;

        if (_jmgStampJournalTable)
        {
            jmgPayAgreementOverride = JmgPayAgreementOverride::find(_jmgStampJournalTable.Worker, _jmgStampJournalTable.ProfileDate,true);
            if (jmgPayAgreementOverride)
                jmgPayAgreementOverride.delete();

            jmgPayAgreementTable = JmgPayAgreementTable::find(_jmgStampJournalTable.PayAgreement);

            jmgPayAgreementOverride.Worker                 = _jmgStampJournalTable.Worker;
            jmgPayAgreementOverride.ProfileDate            = _jmgStampJournalTable.ProfileDate;
            jmgPayAgreementOverride.PayAgreement           = _jmgStampJournalTable.PayAgreement;
            jmgPayAgreementOverride.PayDeductToLateSeconds = jmgPayAgreementTable.PayDeductToLateSeconds;

            jmgPayAgreementOverride.insert();

            if (JmgProfileCalendar::paySpecialDay(JmgEmployee::find(_jmgStampJournalTable.Worker), _jmgStampJournalTable.ProfileDate) == NoYes::Yes)
            {
                dayId = JmgDayIdEnum::Special;
            }
            else
            {
                dayId = JmgProfiles::date2DayId(_jmgStampJournalTable.ProfileDate);
            }

            while select jmgPayAgreementLine
                where jmgPayAgreementLine.PayAgreement  == _jmgStampJournalTable.PayAgreement &&
                      ( (!jmgPayAgreementLine.FromDate  && !jmgPayAgreementLine.ToDate)                                                                      || // No date interval
                        (jmgPayAgreementLine.FromDate   && !jmgPayAgreementLine.ToDate  && jmgPayAgreementLine.FromDate <= _jmgStampJournalTable.ProfileDate) || // lower bound interval
                        (!jmgPayAgreementLine.FromDate  && jmgPayAgreementLine.ToDate   && jmgPayAgreementLine.ToDate   >= _jmgStampJournalTable.ProfileDate) || // upper bound interval
                        (jmgPayAgreementLine.FromDate   && jmgPayAgreementLine.ToDate   &&                                                                      // Lower and upper bound
                         jmgPayAgreementLine.FromDate   <= _jmgStampJournalTable.ProfileDate &&
                         jmgPayAgreementLine.ToDate     >= _jmgStampJournalTable.ProfileDate) ) &&
                      jmgPayAgreementLine.DayId         == dayId
            {
                jmgPayAgreementOverrideLine.Worker          = _jmgStampJournalTable.Worker;
                jmgPayAgreementOverrideLine.ProfileDate     = _jmgStampJournalTable.ProfileDate;

                jmgPayAgreementOverrideLine.data(JmgPayAgreementLineMap::initFromMap(jmgPayAgreementLine));
                jmgPayAgreementOverrideLine.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgPayAgreementOverride</c> record for the specified worker at the specified profile
    /// date.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker for which to retrieve a <c>JmgPayAgreementOverride</c> record.
    /// </param>
    /// <param name="_profileDate">
    /// The profile date for which to retrieve a <c>JmgPayAgreementOverride</c> record.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that specifies whether the returned record must be selected for update.
    /// </param>
    /// <returns>
    /// A <c>JmgPayAgreementOverride</c> record.
    /// </returns>
    static JmgPayAgreementOverride find(JmgWorkerRecId _worker, JmgProfileDate _profileDate, boolean _update = false)
    {
        JmgPayAgreementOverride jmgPayAgreementOverride;

        jmgPayAgreementOverride.selectForUpdate(_update);

        if (_worker && _profileDate)
        {
            select firstonly jmgPayAgreementOverride
                where jmgPayAgreementOverride.Worker        == _worker &&
                      jmgPayAgreementOverride.ProfileDate   == _profileDate;
        }
        return jmgPayAgreementOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgPayroll</ConfigurationKey>
	<DeveloperDocumentation>@SYS317267</DeveloperDocumentation>
	<Label>@SYS41411</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PayAgreement</TitleField1>
	<TitleField2>Worker</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>EmplDateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>EmplDateIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgPayAgreementOverrideLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgPayAgreementOverrideLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayDeductToLateSeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayAgreement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayAgreement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayAgreement</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayAgreement</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayDeductToLateSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS10545</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProfileDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmplDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProfileDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>EmplDate</Name>
			<RelatedTable>JmgPayAgreementOverride</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileDate</Name>
					<Field>ProfileDate</Field>
					<RelatedField>ProfileDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>Worker</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgPayAgreementOverride</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgPayAgreementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgPayAgreementTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayAgreement</Name>
					<Field>PayAgreement</Field>
					<RelatedField>PayAgreement</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AgreementIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>