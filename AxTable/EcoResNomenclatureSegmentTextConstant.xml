<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResNomenclatureSegmentTextConstant</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResNomenclatureSegmentTextConstant extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSegmentValue</Name>
				<Source><![CDATA[
    public EcoResNomenclatureOutput getSegmentValue(EcoResNomenclatureInput _input)
    {
        if (!this.Text)
        {
            // In the UI it is not possible to save just a space into a text field, so it is assumed that blank text segment means a space
            return ' ';
        }
        else
        {
            return this.Text;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSegmentAllowedForNomenclatureType</Name>
				<Source><![CDATA[
    public static boolean isSegmentAllowedForNomenclatureType(TableId _nomenclatureType)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentSampleValue</Name>
				<Source><![CDATA[
    public EcoResNomenclatureOutput getSegmentSampleValue(EcoResNomenclatureInput _input)
    {
        return this.getSegmentValue(_input);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResNomenclatureSegmentTextConstantDevDoc</DeveloperDocumentation>
	<Label>@SCM:EcoResNomenclatureSegmentTextConstant</Label>
	<TableGroup>Main</TableGroup>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Extends>EcoResNomenclatureSegment</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Text</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResNomenclatureSegmentText</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResNomenclatureSegment</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResNomenclatureSegment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>