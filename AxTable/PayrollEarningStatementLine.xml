<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningStatementLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollEarningStatementLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>computeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates earning rate for an earning statement line with the selected earning code and position.
    /// </summary>
    /// <returns>
    /// The earning rate.
    /// </returns>
    public AmountCur computeRate()
    {
        PayrollEarningCode                  earningCode;
        PayrollEarningCodeDetail            earningCodeDetail;
        PayrollEarningStatement             earningStatement;
        PayrollPayPeriod                    payPeriod;
        AmountCur                           earningRate;

        earningCode = PayrollEarningCode::find(this.EarningCode);
        earningCodeDetail = PayrollEarningCodeDetail::findByEarningCode(earningCode.RecId, this.EarningDate);

        earningStatement = this.payrollEarningStatement();
        payPeriod       = PayrollPayPeriod::find(earningStatement.PayPeriod);

        earningRate = PayrollEarningGenerationTask::calculateFormulaEarningRate(earningStatement.Worker,
                                                    this.Position,
                                                    this.EarningDate,
                                                    earningCodeDetail.RateBasis,
                                                    PayrollPayCycle::find(payPeriod.PayCycle).TimePeriod,
                                                    earningCode,
                                                    earningStatement.RecId);
        return earningRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record in the <c>PayrollEarningStatementLine</c> table and manages adjusting salary line for base earnings type.
    /// </summary>
    /// <param name="_skipAdjustSalaryline">
    ///  It indicates delaying the salary adjusting when it set to true
    /// </param>
    /// <remarks>
    /// Set _skipAdjustSalaryline to true in process code to prevent adjusting salary for each line generated to improve performance
    /// in process code, make sure that salary line be adjusted at the end of the process.
    /// </remarks>
    public void delete(boolean _skipAdjustSalaryline = false)
    {
        boolean needAdjustSalary;
        PayrollEarningStatement payrollEarningStatement;
        PayrollPositionDetails         positionDetails;

        if (_skipAdjustSalaryline == true)
        {
            needAdjustSalary = false;
        }
        else
        {
            needAdjustSalary = this.needAdjustingSalary();
        }

        super();

        if (needAdjustSalary == true)
        {
            payrollEarningStatement = this.payrollEarningStatement();
            positionDetails = PayrollPositionDetails::findByPosition(this.Position, this.EarningDate);
            PayrollEarningGenerationTask::adjustSalaryEarning(payrollEarningStatement.PayPeriod, payrollEarningStatement.Worker, positionDetails.Position);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyTimeZoneEarningDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts earning date into the time of company's time zone.
    /// </summary>
    /// <returns>
    /// The earning date and time.
    /// </returns>
    public utcdatetime getCompanyTimeZoneEarningDateTime()
    {
        return DateTimeUtil::newDateTime(this.EarningDate, 0, DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayrollEarningStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record in <c>PayrollEarningStatementLine</c> table from the values in the <c>PayrollEarningStatementLine</c> table.
    /// </summary>
    /// <param name="_earningStatement">
    /// The <c>PayrollEarningStatement</c> record ID.
    /// </param>
    public void initFromPayrollEarningStatement(PayrollEarningStatement _earningStatement)
    {
        if (!this.EarningDate)
        {
            this.EarningDate = PayrollPayPeriod::companyTimeZonePayPeriodDate(_earningStatement.PayPeriod);
        }

        if (!this.Position)
        {
            this.setPosition(_earningStatement.Worker, _earningStatement.PayPeriod);
        }

        if (!this.WorkerTaxRegion)
        {
            this.initFromPayrollWorkerTaxRegion(_earningStatement.Worker);
        }

        if (!this.WorkerCompensationBenefit)
        {
            this.initFromPayrollPosWorkerCompensation();
        }

        if (this.Position && !this.WorkerGLIBenefit)
        {
            this.initFromPayrollPositionDetails();
        }

        if ((this.Position || this.EarningCode) && !this.AccountingDistributionTemplate)
        {
            this.setAccountingDistributionTemplate();
        }

        if ((this.Position || this.EarningCode) && !this.DefaultDimension)
        {
            this.setDefaultDimension();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayrollPositionDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PayrollEarningStatementLine</c> table from the <c>PayrollPositionDetails</c> table.
    /// </summary>
    public void initFromPayrollPositionDetails()
    {
        PayrollPositionDetails                  payrollPositionDetails;
        HcmWorkerEnrolledBenefit                workerEnrolledBenefit;
        PayrollWorkerEnrolledBenefitDetail      workerEnrolledBenefitDetail;
        ValidFromDate                           periodEndDate;

        periodEndDate = PayrollPayPeriod::companyTimeZonePayPeriodDate(this.payrollEarningStatement().PayPeriod);
        utcdatetime periodEndDateTime = DateTimeUtil::newDateTime(periodEndDate, timeMax(), DateTimeUtil::getCompanyTimeZone());

        select firstonly validTimeState(periodEndDateTime) DefaultGLIBenefit from  payrollPositionDetails
                where payrollPositionDetails.Position == this.Position
            join RecId from workerEnrolledBenefit
                where workerEnrolledBenefit.Benefit == payrollPositionDetails.DefaultGLIBenefit &&
                    workerEnrolledBenefit.Worker == this.payrollEarningStatement().Worker
            join RecId from workerEnrolledBenefitDetail
                where workerEnrolledBenefitDetail.WorkerEnrolledBenefit == workerEnrolledBenefit.RecId &&
                        workerEnrolledBenefitDetail.LegalEntity == CompanyInfo::current();

        this.WorkerGLIBenefit = payrollPositionDetails.DefaultGLIBenefit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayrollPosWorkerCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PayrollEarningStatementLine</c> table from the <c>PayrollPositionWorkerCompensation</c> table.
    /// </summary>
    public void initFromPayrollPosWorkerCompensation()
    {
        PayrollPositionWorkerCompensation       workerCompensation;
        HcmWorkerEnrolledBenefit                workerEnrolledBenefit;
        PayrollWorkerEnrolledBenefitDetail      workerEnrolledBenefitDetail;
        ValidFromDate                           periodEndDate;

        void getWorkerCompensationBenefit(LogisticsAddressStateId  _stateId = "")
        {
            periodEndDate = PayrollPayPeriod::companyTimeZonePayPeriodDate(this.payrollEarningStatement().PayPeriod);
            utcdatetime periodEndDateTime = DateTimeUtil::newDateTime(periodEndDate, 0);

            select firstonly validTimeState(periodEndDateTime) Benefit from workerCompensation
                    where   workerCompensation.Position == this.Position &&
                            (_stateId == "" ||
                            workerCompensation.StateId == _stateId)
                join RecId from workerEnrolledBenefit
                    where workerEnrolledBenefit.Benefit == workerCompensation.Benefit &&
                            workerEnrolledBenefit.Worker == this.payrollEarningStatement().Worker
                join RecId from workerEnrolledBenefitDetail
                    where workerEnrolledBenefitDetail.WorkerEnrolledBenefit == workerEnrolledBenefit.RecId &&
                            workerEnrolledBenefitDetail.LegalEntity == CompanyInfo::current();
        }

        if (this.WorkerTaxRegion)
        {
            getWorkerCompensationBenefit(PayrollWorkerTaxRegion::getTaxRegionStateId(this.WorkerTaxRegion));

            if (workerCompensation.RecId != 0)
            {
                this.WorkerCompensationBenefit = workerCompensation.Benefit;
            }
        }
        else
        {
            getWorkerCompensationBenefit();
            this.WorkerCompensationBenefit = workerCompensation.Benefit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayrollWorkerTaxRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PayrollEarningStatementLine</c> table from the <c>PayrollPositionWorkerDefaultTaxRgn</c> table.
    /// </summary>
    /// <param name="_workerRecId">
    /// The <c>HcmWorker</c> record ID.
    /// </param>
    public void initFromPayrollWorkerTaxRegion(HcmWorkerRecId _workerRecId)
    {
        PayrollPositionWorkerDefaultTaxRgn positionWorkerDefaultTaxRgn;

        positionWorkerDefaultTaxRgn = PayrollPositionWorkerDefaultTaxRgn::findByWorkerPosition(this.Position, _workerRecId);

        if (positionWorkerDefaultTaxRgn)
        {
            this.WorkerTaxRegion = positionWorkerDefaultTaxRgn.WorkerTaxRegion;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        if (this.GenerationSource == 0)
        {
            this.GenerationSource = PayrollGenerationSource::UserEntry;
        }
        if (this.PaymentStatus == 0)
        {
            this.PaymentStatus = PayrollPaymentProcessingStatus::None;
        }

        this.Quantity = this.Quantity == 0 ? 1.00 : this.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the <c>PayrollEarningStatementLine</c> table and manages adjusting salary line for base earnings type.
    /// </summary>
    /// <param name="_skipAdjustSalaryline">
    ///  It indicates delaying the salary adjusting when it set to true
    /// </param>
    /// <remarks>
    /// Set _skipAdjustSalaryline to true in process code to prevent adjusting salary for each line generated to improve performance
    /// in process code, make sure that salary line be adjusted at the end of the process.
    /// </remarks>
    public void insert(boolean _skipAdjustSalaryline = false)
    {
        #OCCRetryCount
        PayrollEarningStatement payrollEarningStatement;
        PayrollPositionDetails         positionDetails;

        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        if (this.AccountingDate == dateNull())
        {
            this.AccountingDate = this.EarningDate;
        }

        try
        {
            if (this.LineNum == 0)
            {
                this.LineNum = PayrollEarningStatementLine::lastLineNum(this.EarningStatement) + 1;
            }

            super();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                // set LineNum to 0 so it will be recalculated again
                this.LineNum = 0;
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyException;
            }
            else
            {
                // set LineNum to 0 so it will be recalculated again
                this.LineNum = 0;
                retry;
            }
        }

        if (!_skipAdjustSalaryline && this.needAdjustingSalary())
        {
            payrollEarningStatement = this.payrollEarningStatement();
            positionDetails = PayrollPositionDetails::findByPosition(this.Position, this.EarningDate);
            PayrollEarningGenerationTask::adjustSalaryEarning(payrollEarningStatement.PayPeriod, payrollEarningStatement.Worker, positionDetails.Position);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes values on the modification of the fields that are associated with the earning statement line.
    /// </summary>
    /// <param name="_fieldId">
    /// The unique identification number of a field.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        PayrollEarningCodeDetail            earningCodeDetail;
        #PayrollConstants
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PayrollEarningStatementLine, ProjId):
                if (this.ProjId)
                {
                    // default the category id from the parameter setup if empty
                    if (!this.ProjCategoryId)
                    {
                        this.ProjCategoryId = PayrollEarningCodeDefaultDimension::findByEarningCodeLegalEntity(
                                                    this.EarningCode, CompanyInfo::current()).CategoryId;
                    }

                    this.ProjLinePropertyId    = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
                }
                break;

            case fieldNum(PayrollEarningStatementLine, EarningCode):

                this.EarningRate = this.computeRate();
                this.setDefaultDimension();
                this.setAccountingDistributionTemplate();

                earningCodeDetail = PayrollEarningCodeDetail::findByEarningCode(
                                                            this.EarningCode, this.EarningDate) ;

                if (earningCodeDetail.RateBasis == PayrollRateBasis::RegularRatePay)
                {
                    this.WorkPeriod = PayrollWorkPeriod::findByCycleAndDate(PayrollPositionDetails::findByPosition(this.Position, this.EarningDate).WorkCycle, this.EarningDate).RecId;
                }

                this.Quantity = this.computeQuantity();
            // Break is not intentionally added here so that, the modification of earning code can also referesh the rate

            case fieldNum(PayrollEarningStatementLine, Quantity):
                this.AccountingCurrencyAmount = CurrencyExchange::round(this.Quantity * this.EarningRate, PayrollSetup::currencyCode());

                break;

            case fieldNum (PayrollEarningStatementLine, EarningRate):

                earningCodeDetail = PayrollEarningCodeDetail::findByEarningCode(this.EarningCode,
                                                                                this.EarningDate);

                if (earningCodeDetail.RateBasis != PayrollRateBasis::FlatAmount && this.GenerationSource == PayrollGenerationSource::UserEntry && this.EarningRate == 0)
                {
                    Box::info("@Payroll:TheCalculatedRateOfTheSelectedEarningCodeIsZeroAdjustTheEarn");
                    this.EarningCode = 0;
                }

                this.modifiedField(fieldNum(PayrollEarningStatementLine, Quantity));

                break;

            case fieldNum (PayrollEarningStatementLine, Position):

                if (this.Position)
                {
                    this.initFromPayrollWorkerTaxRegion(this.payrollEarningStatement().Worker);
                    this.initFromPayrollPositionDetails();
                    this.initFromPayrollPosWorkerCompensation();
                    this.clearAccountingDistributionTemplate();
                    this.setAccountingDistributionTemplate();
                    this.setDefaultDimension();

                    earningCodeDetail = PayrollEarningCodeDetail::findByEarningCode(this.EarningCode,
                                                                                this.EarningDate);

                    if (earningCodeDetail.RateBasis == PayrollRateBasis::RegularRatePay)
                    {
                        this.modifiedField(fieldNum(PayrollEarningStatementLine, EarningCode));
                    }
                }
                break;

            case fieldNum (PayrollEarningStatementLine, EarningDate):

                earningCodeDetail = PayrollEarningCodeDetail::findByEarningCode(
                                                        this.EarningCode, this.EarningDate);

                if (earningCodeDetail.RateBasis == PayrollRateBasis::RegularRatePay)
                {
                    this.modifiedField(fieldNum(PayrollEarningStatementLine, EarningCode));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAccountingDistributionTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the accounting distribution template on the earning line when position is changed
    /// </summary>
    private void clearAccountingDistributionTemplate()
    {
        this.AccountingDistributionTemplate = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needAdjustingSalary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is a need to adjust a salary line.
    /// </summary>
    /// <returns>
    /// true, if the salary line is needed to be adjusted; otherwise, false.
    /// </returns>
    public boolean needAdjustingSalary()
    {
        PayrollEarningStatement payrollEarningStatement;
        PayrollEarningCode      payrollEarningCode;
        PayrollPositionDetails         positionDetails;
        boolean                 ret;

        if (this.GenerationSource != PayrollGenerationSource::Salary)
        {
            payrollEarningStatement = this.payrollEarningStatement();
            if (payrollEarningStatement.AutoGeneratedSalary == PayrollAutoGenerateSalary::Active)
            {
                payrollEarningCode = PayrollEarningCode::find(this.EarningCode);
                if (payrollEarningCode.IsBaseEarningsComponent)
                {
                    positionDetails = PayrollPositionDetails::findByPosition(this.Position, this.EarningDate);

                    if (positionDetails.AutoGenerateSalary && positionDetails.PayrollNormalHours)
                    {
                        ret = true;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date of the exchange rate for the source document.
    /// </summary>
    /// <returns>
    /// The exchange rate date to be used.
    /// </returns>
    public AccountingDate parmExchangeRateDate()
    {
        return this.EarningDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent source document line.
    /// </summary>
    /// <returns>
    /// The value of parent source document line.
    /// </returns>
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        SourceDocumentLine parentSourceDocumentLine;
        
        if (this.OriginatingEarningStatementLine)
        {
            PayrollEarningStatementLine payrollEarningStatementLine = PayrollEarningStatementLine::find(this.OriginatingEarningStatementLine);
            parentSourceDocumentLine = SourceDocumentLine::find(payrollEarningStatementLine.SourceDocumentLine);
        }
        
        return parentSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document line type enum name.
    /// </summary>
    /// <returns>
    /// The value of the source document line type enum name.
    /// </returns>
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_EarningStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document line type enum value for a record.
    /// </summary>
    /// <returns>
    /// The value of the source document line type enum.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_EarningStatement::Earnings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related source document header.
    /// </summary>
    /// <returns>
    /// The related record from the <c>SourceDocumentHeader</c> table.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader    sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(this.payrollEarningStatement().SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payrollEarningStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the earning statement header record for an earning statement line.
    /// </summary>
    /// <param name="update">
    /// that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>PayrollEarningStatement</c> record.
    /// </returns>
    PayrollEarningStatement payrollEarningStatement(boolean  update = false)
    {
        return PayrollEarningStatement::find(this.EarningStatement, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountingDistributionTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the accounting distribution template for an earnings statement line.
    /// </summary>
    public void setAccountingDistributionTemplate()
    {
        if (!this.AccountingDistributionTemplate)
        {
            if (this.EarningCode)
            {
                this.AccountingDistributionTemplate = PayrollEarningCodeDefaultDimension::findByEarningCodeLegalEntity(this.EarningCode).AccountingDistributionTemplate;
            }

            if (!this.AccountingDistributionTemplate && this.Position)
            {
                this.AccountingDistributionTemplate = HcmPositionDefaultDimension::findByPositionLegalEntity(this.Position, CompanyInfo::current()).AccountingDistributionTemplate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default dimension for an earnings statement line by merging default dimensions of the position and the earnings code.
    /// </summary>
    public void setDefaultDimension()
    {
        DimensionDefault                earningCodeDefaultDimension, positionDefaultDimension;
        RefRecId                        legalEntityRecId = CompanyInfo::current(this.DataAreaId);

        earningCodeDefaultDimension = PayrollEarningCodeDefaultDimension::findByEarningCodeLegalEntity(this.EarningCode, legalEntityRecId).DefaultDimension;
        positionDefaultDimension = HcmPositionDefaultDimension::findByPositionLegalEntity(this.Position, legalEntityRecId).DefaultDimension;

        this.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(earningCodeDefaultDimension, positionDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets position on the basis of worker assignments for the positions.
    /// </summary>
    /// <param name="_workerRecId">
    /// The <c>HcmWorker</c> record Id.
    /// </param>
    /// <param name="_payPeriodRecId">
    /// The <c>PayrollPayPeriod</c> record Id.
    /// </param>
    public void setPosition(HcmWorkerRecId _workerRecId, PayrollPayPeriodRecId _payPeriodRecId)
    {
        HcmWorkerPrimaryPosition    workerPrimaryPosition;
        HcmPositionWorkerAssignment positionWorkerAssignment;
        utcdatetime                 earningDate = this.getCompanyTimeZoneEarningDateTime();

        void getValidActivePositionAssignment()
        {
            while select ValidTimeState(earningDate) positionWorkerAssignment
                order by positionWorkerAssignment.ValidFrom desc
                where positionWorkerAssignment.Worker == _workerRecId
                &&  (this.Position == 0
                    || positionWorkerAssignment.Position != this.Position)
            {
                if (this.validatePosition(positionWorkerAssignment.Position, false)
                    && this.validateEarningPositionCompensation(positionWorkerAssignment.Position, false))
                {
                    this.Position =  positionWorkerAssignment.Position;
                    break;
                }
            }
        }

        workerPrimaryPosition = HcmWorkerPrimaryPosition::findByWorker(_workerRecId);

        if (HcmPositionWorkerAssignment::countActivePositionWorkerAssignment(_workerRecId) > 1 && workerPrimaryPosition)
        {
            positionWorkerAssignment =  HcmPositionWorkerAssignment::find(workerPrimaryPosition.PositionAssignment);

            if (positionWorkerAssignment
                && this.validatePosition(positionWorkerAssignment.Position, false)
                && this.validateEarningPositionCompensation(positionWorkerAssignment.Position, false))
            {
                this.Position =  positionWorkerAssignment.Position;
            }
            else
            {
                getValidActivePositionAssignment();
            }
        }
        else
        {
            positionWorkerAssignment = HcmPositionWorkerAssignment::getActivePositionWorkerAssignment(_workerRecId);

            getValidActivePositionAssignment();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record in the <c>PayrollEarningStatementLine</c> table and manages adjusting salary line for base earnings type.
    /// </summary>
    /// <param name="_skipAdjustSalaryline">
    ///  It indicates delaying the salary adjusting when it set to true
    /// </param>
    /// <remarks>
    /// Set _skipAdjustSalaryline to true in process code to prevent adjusting salary for each line generated to improve performance
    /// in process code, make sure that salary line be adjusted at the end of the process.
    /// </remarks>
    public void update(boolean _skipAdjustSalaryline = false)
    {
        PayrollEarningStatement         payrollEarningStatement;
        PayrollPositionDetails          positionDetails;
        PayrollEarningStatementLine     origEarningStatementLine = this.orig();
        PayrollEarningCode              payrollEarningCode;
        boolean                         isSourceDocumentLineChanged;

        SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(this.SourceDocumentLine);

        if (this.PaymentStatus == PayrollPaymentProcessingStatus::Released && sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::FullyDistributed)
        {
            info("@Payroll:OneOrMoreEarningsWereNotFullyDistributedAndCouldNotBeRelease") ;
        }
        else
        {
            if (!_skipAdjustSalaryline && (origEarningStatementLine.ProjId != this.ProjId
                || origEarningStatementLine.ProjCategoryId != this.ProjCategoryId
                || origEarningStatementLine.ProjLinePropertyId != this.ProjLinePropertyId
                || !DimensionDefaultFacade::areEqual(origEarningStatementLine.DefaultDimension, this.DefaultDimension)
                || origEarningStatementLine.AccountingDistributionTemplate != this.AccountingDistributionTemplate
                || origEarningStatementLine.AccountingCurrencyAmount != this.AccountingCurrencyAmount))
            {
                isSourceDocumentLineChanged = true;
            }

            payrollEarningCode = PayrollEarningCode::find(this.EarningCode);

            if (PayrollEarningCode.TrackFMLAHours == NoYes::Yes)
            {
                ttsbegin;
                this.updateFMLATrackingLineByStatus();
                ttscommit;
            }

            super();

            if (!_skipAdjustSalaryline && this.needAdjustingSalary())
            {
                payrollEarningStatement = this.payrollEarningStatement();
                positionDetails = PayrollPositionDetails::findByPosition(this.Position, this.EarningDate);
                PayrollEarningGenerationTask::adjustSalaryEarning(payrollEarningStatement.PayPeriod, payrollEarningStatement.Worker, positionDetails.Position);
            }

            // If the source document line has changed, call the SD framework to update the distributions
            if (isSourceDocumentLineChanged)
            {
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this, false, SourceDocumentLineAccountingStatus::FullyDistributed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsManual</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that a manual line is allowed for the earning code.
    /// </summary>
    /// <param name="_isManual">
    ///     a boolean flat that indicates whether or not an Earning statement line is a manual line.
    /// </param>
    /// <param name="_payrollEarningCode">
    ///     the <c>PayrollEarningCode</c> RecId.
    /// </param>
    /// <returns>
    ///     true, if a manual line is allowed for the earning code; otherwise, false.
    /// </returns>
    public boolean validateIsManual(boolean _isManual, payrollEarningCodeRecId _payrollEarningCode)
    {
        boolean ret = true;
        if (_isManual && !PayrollEarningCode::canBeManual(_payrollEarningCode))
        {
            ret = checkFailed("@Payroll:EarningStatementLineManualLineNotGrossUpFringeBenefitType");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether ProjCategoryId has vaild value against project and earnging code.
    /// </summary>
    /// <param name="_projId">
    ///     The <c>ProjTable</c> projId.
    /// </param>
    /// <param name="_projCategoryId">
    ///     The <c>ProjCategory</c> categoryId.
    /// </param>
    /// <returns>
    ///     true, if ProjCategoryId has a valid value; otherwise, false.
    /// </returns>
    public static boolean validateProjCategoryId(ProjId _projId, ProjCategoryId _projCategoryId, PayrollEarningCodeRecId _earningCode)
    {
        boolean ret = true;

         if (_projId && _projCategoryId == "")
        {
            ret = checkFailed("@Payroll:AProjectCategoryIsRequiredWhenAProjectIsSpecifiedSelectAProj");
        }

        if (_projCategoryId)
        {
            ProjCategory projCategory = ProjCategory::find(_projCategoryId);
            PayrollEarningCode earningCode = PayrollEarningCode::find(_earningCode);

            if (earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
            {
                if (projCategory.CategoryType != ProjCategoryType::Hour)
                {
                    ret = checkFailed(strFmt("@PayrollProcessing:EarningCodeQuantityUnitHoursProjectCategoryTypeHour", _projCategoryId));
                }
            }
            else
            {
                if (projCategory.CategoryType != ProjCategoryType::Cost)
                {
                    ret = checkFailed(strFmt("@PayrollProcessing:EarningCodeQuantityUnitNotHoursProjectCategoryTypeCost", _projCategoryId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether ProjId has a valid value when compared against the ProjId's status.
    /// </summary>
    /// <param name = "_projId">
    /// The ID of the project.
    /// </param>
    /// <returns>
    /// true if the ProjId has a valid value, otherwise false.
    /// </returns>
    public static boolean validateProjId(ProjId _projId)
    {
        boolean ret = true;
        ProjTable projTable;

        select firstonly projTable where projTable.ProjId == _projId;

        if (projTable.Status == ProjStatus::Completed)
        {
            ret = checkFailed(strFmt("@Proj:ProjectIsHeaderOrFinished", _projId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEarningPositionCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the position has the valid worker compensation associated with it or not.
    /// </summary>
    /// <param name="_positionRecId">
    /// The position record ID that is associated with an Earning statement line; optional.
    /// </param>
    /// <param name="_showError">
    /// A boolean flag that indicates the error message is to be shown or not; optional.
    /// </param>
    /// <returns>
    /// true, if the position has the valid worker compensation; otherwise, false.
    /// </returns>
    public boolean validateEarningPositionCompensation(HcmPositionRecId _positionRecId = this.Position, boolean _showError = true)
    {
        boolean                             ret = true;
        PayrollEarningStatement             earningStatement = this.payrollEarningStatement();
        HRMCompFixedPlanTable               compFixedPlanTable;

        compFixedPlanTable = HRMCompFixedPlanTable::findByWorkerPosition(earningStatement.Worker, _positionRecId, this.EarningDate);
        if (!compFixedPlanTable)
        {
            if (_showError)
            {
                ret = checkFailed("@Payroll:ACompensationPlanIsNotDefinedForTheWorkerAndPositionForTheEa");
            }
            else
            {
                ret = false;
            }
        }
        else if (compFixedPlanTable.CurrencyCode != CompanyInfoHelper::standardCurrency())
        {
            if (_showError)
            {
                ret = checkFailed("@Payroll:TheCurrencyCodeOfTheCompensationPlanForThisWorkerAndPosition");
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                             ret;
        PayrollEarningStatement             earningStatement = this.payrollEarningStatement();

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(PayrollEarningStatementLine, EarningDate):

                ret = PayrollPayPeriod::isDateInPeriod(this.EarningDate, earningStatement.PayPeriod);
                if (!ret)
                {
                    checkFailed("@Payroll:TheDateIsNotInTheRangeOfPayPeriodDatesForTheEarningsStatemen");
                }

                break;

            case fieldNum(PayrollEarningStatementLine, Position):

                ret = this.validatePosition();

                break;

            case fieldNum(PayrollEarningStatementLine, Quantity):
                if (this.GenerationSource != PayrollGenerationSource::Salary && this.Quantity == 0)
                {
                    ret = checkFailed("@Payroll:AnEarningQuantityOfZeroIsNotAllowedEnterAPositiveOrNegativeN");
                }

                break;

            case fieldNum (PayrollEarningStatementLine, ProjCategoryId):

                ret = PayrollEarningStatementLine::validateProjCategoryId(this.ProjId, this.ProjCategoryId, this.EarningCode);

                break;

            case fieldNum (PayrollEarningStatementLine, ProjId):

                ret = PayrollEarningStatementLine::validateProjId(this.ProjId);

                break;

            case fieldNum(PayrollEarningStatementLine, EarningCode):

                if (PayrollEarningCodeDetail::findByEarningCode(this.EarningCode).RateBasis != PayrollRateBasis::FlatAmount)
                {
                    ret = this.validateEarningPositionCompensation(this.Position, true);
                }

                break;

            case fieldNum(PayrollEarningStatementLine, IsManual):

                ret = this.validateIsManual(this.IsManual, this.EarningCode);

                break;

            case fieldNum(PayrollEarningStatementLine, WorkerCompensationBenefit):

                ret = this.validateWorkerCompensationBenefit(this.Position, this.WorkerTaxRegion, this.WorkerCompensationBenefit);

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkerCompensationBenefit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the tax region state and worker's compensation code state must be the same.
    /// </summary>
    /// <param name="_position">
    /// The position record ID that is associated with an Earning statement line.
    /// </param>
    /// <param name="_workerTaxRegion">
    /// The worker tax region record ID that is associated with an Earning statement line.
    /// </param>
    /// <param name="_workerCompensationBenefit">
    /// The worker compensation benefit record ID that is associated with an Earning statement line.
    /// </param>
    /// <returns>
    /// true, if the tax region state and worker's compensation code state are the same; otherwise, false.
    /// </returns>
    public boolean validateWorkerCompensationBenefit(HcmPositionRecId _position,
                                                    PayrollWorkerTaxRegionRecId _workerTaxRegion,
                                                    RefRecId _workerCompensationBenefit)
    {
        boolean ret = true;

        if (_workerCompensationBenefit && !PayrollPositionWorkerCompensation::stateIdByPositionBenefitExists(_position,
                                                PayrollWorkerTaxRegion::getTaxRegionStateId(_workerTaxRegion),
                                                _workerCompensationBenefit))
        {
            ret = checkFailed("@Payroll:TheTaxRegionStateAndTheWorkersCompensationCodeStateMustBeThe");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the position has the valid position associated with it or not.
    /// </summary>
    /// <param name="_positionRecId">
    /// The position record ID that is associated with an Earning statement line; optional.
    /// </param>
    /// <param name="_showError">
    /// A boolean flag that indicates the error message is to be shown or not; optional.
    /// </param>
    /// <returns>
    /// true, if the position is valid; otherwise, false.
    /// </returns>
    public boolean validatePosition(HcmPositionRecId _positionRecId = this.Position, boolean _showError = true)
    {
        PayrollEarningStatement earningStatement = this.payrollEarningStatement();
        boolean                 ret = true;

        if ((earningStatement.AutoGeneratedSalary == PayrollAutoGenerateSalary::Active
            && PayrollPositionDetails::findByPosition(_positionRecId).AutoGenerateSalary == NoYes::Yes)
            && !PayrollPositionWorkerDefaultTaxRgn::existByWorkerPosition(_positionRecId, earningStatement.Worker))
        {
            if (_showError)
            {
                ret = checkFailed("@Payroll:TheTaxRegionIsRequiredToGenerateTheSalaryEnterADefaultTaxReg");
            }
            else
            {
                ret = false;
            }
        }

        if (PayrollPositionDetails::findByPosition(_positionRecId).PayrollNormalHours <= 0)
        {
            if (_showError)
            {
                ret = checkFailed("@Payroll:TheAnnualNumberOfHoursCannotBeZeroOrANegativeAmountEnterTheA");
            }
            else
            {
                ret = false;
            }
        }

        if (!PayrollPositionDetails::existPositionPayCycleLegalEntity(_positionRecId, PayrollPayPeriod::find(earningStatement.PayPeriod).PayCycle))
        {
            if (_showError)
            {
                ret = checkFailed("@PayrollProcessing:EarningStatementPayCycleNotMatchPositionDetail");
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.ProjId && !this.ProjCategoryId)
        {
            ret = checkFailed("@Payroll:AProjectCategoryIsRequiredWhenAProjectIsSpecifiedSelectAProj");
        }

        if (PayrollEarningCodeDetail::findByEarningCode(this.EarningCode).RateBasis != PayrollRateBasis::FlatAmount
            && this.GenerationSource == PayrollGenerationSource::UserEntry)
        {
            ret = this.validateField(fieldNum(PayrollEarningStatementLine, Position)) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>PayrollEarningStatementLine</c> table; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollEarningStatementLineRecId _recId)
    {
        boolean ret = true;

        if (!PayrollEarningStatementLine::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollEarningStatementLine::txtNotExist(), tableId2name(tableNum(PayrollEarningStatementLine))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countByEarningStatementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not at least one earning statement line exists for a given earning statement header.
    /// </summary>
    /// <param name="_earningStatementRecId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean countByEarningStatementHeader(PayrollEarningStatementRecId    _earningStatementRecId)
    {
        PayrollEarningStatementLine earningStatementLine;

        if (_earningStatementRecId)
        {
            select count(RecId) from earningStatementLine
                    where earningStatementLine.EarningStatement == _earningStatementRecId;
        }

        return earningStatementLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByPayCycleLegalEntityPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records from the <c>PayrollEarningStatementLine</c> table based on the specified values.
    /// </summary>
    /// <param name="_payCycleRecId">
    /// The <c>PayrollPayCycle</c> record ID.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The legal entity record ID.
    /// </param>
    /// <param name="_positionRecId">
    /// The <c>HcmPosition</c> record ID.
    /// </param>
    /// <param name="_validFrom">
    /// The value of the <c>ValidFrom</c> field of the <c>PayrollPositionDetails</c> table.
    /// </param>
    /// <param name="_validTo">
    /// The value of the <c>ValidTo</c> field of the <c>PayrollPositionDetails</c> table.
    /// </param>
    public static void deleteByPayCycleLegalEntityPosition(PayrollPayCycleRecId     _payCycleRecId,
                                                            LegalEntityRecId        _legalEntityRecId,
                                                            HcmPositionRecId        _positionRecId,
                                                            ValidFromDate           _validFrom,
                                                            ValidToDate             _validTo)
    {
        PayrollEarningStatement         earningsStatement;
        PayrollEarningStatementLine     earningStatementLine;
        PayrollPayCycle                 payCycle;
        PayrollPayPeriod                payPeriod;
        PayrollEarningStatementRecId    earningStatementRecId;
        DataAreaId                      companyDataAreaId;

        if (_payCycleRecId && _legalEntityRecId)
        {
            companyDataAreaId = CompanyInfo::getDataArea(_legalEntityRecId);

            ttsbegin;
            changecompany(companyDataAreaId)
            {
                while select forupdate RecId, EarningStatement from earningStatementLine order by EarningStatement asc
                    where earningStatementLine.Position == _positionRecId
                        && earningStatementLine.DataAreaId == companyDataAreaId
                        && earningStatementLine.PaymentStatus != PayrollPaymentProcessingStatus::Processed
                        && earningStatementLine.EarningDate >= _validFrom
                        && earningStatementLine.EarningDate <= _validTo
                    join RecId from earningsStatement
                        where earningsStatement.RecId == earningStatementLine.EarningStatement
                    join RecId from payPeriod
                        where payPeriod.RecId == earningsStatement.PayPeriod
                    join RecId from payCycle
                        where payCycle.RecId == _payCycleRecId
                {
                    if (earningStatementRecId != earningStatementLine.EarningStatement)
                    {
                        if (PayrollEarningStatementLine::countByEarningStatementHeader(earningStatementRecId))
                        {
                            PayrollEarningStatement::find(earningStatementRecId).delete();
                        }
                    }
                    earningStatementRecId = earningStatementLine.EarningStatement;
                    earningStatementLine.delete();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PayrollEarningStatementLine</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollEarningStatementLineRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollEarningStatementLine
                    where payrollEarningStatementLine.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByPayCycleLegalEntityPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record exists in <c>PayrollEarningStatementLine</c> table with value of <c>PaymentStatus</c> field is not <c>PayrollPaymentProcessingStatus::Processed</c>
    /// given the value of pay cycle, legal enity and position
    /// </summary>
    /// <param name="_payCycleRecId">
    /// The <c>PayrollPayCycle</c> record ID.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The legal entity record ID.
    /// </param>
    /// <param name="_positionRecId">
    /// The <c>HcmPosition</c> record ID.
    /// </param>
    /// <param name="_validFrom">
    /// The date value of the <c>ValidFrom</c> field of the <c>PayrollPositionDetails</c> table.
    /// </param>
    /// <param name="_validTo">
    /// The date value of the <c>ValidTo</c> field of the <c>PayrollPositionDetails</c> table.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean existByPayCycleLegalEntityPosition(PayrollPayCycleRecId   _payCycleRecId,
                                                            LegalEntityRecId        _legalEntityRecId,
                                                            HcmPositionRecId        _positionRecId,
                                                            ValidFromDate           _validFrom,
                                                            ValidToDate             _validTo)
    {
        PayrollEarningStatement     earningsStatement;
        PayrollEarningStatementLine earningStatementLine;
        PayrollPayPeriod            payPeriod;
        PayrollPayCycle             payCycle;
        DataAreaId                  companyDataAreaId;

        if (_payCycleRecId && _legalEntityRecId)
        {
            companyDataAreaId = CompanyInfo::getDataArea(_legalEntityRecId);

            changecompany(companyDataAreaId)
            {
                select firstonly RecId from earningStatementLine
                    where earningStatementLine.Position == _positionRecId
                        && earningStatementLine.DataAreaId == companyDataAreaId
                        && earningStatementLine.PaymentStatus != PayrollPaymentProcessingStatus::Processed
                        && earningStatementLine.EarningDate >= _validFrom
                        && earningStatementLine.EarningDate <= _validTo
                    join RecId from earningsStatement
                        where earningsStatement.RecId == earningStatementLine.EarningStatement
                    join RecId from payPeriod
                        where payPeriod.RecId == earningsStatement.PayPeriod
                    join RecId from payCycle
                        where payCycle.RecId == _payCycleRecId;
            }
        }

        return earningStatementLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLinesReleasedAndProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the released and processed lines in the <c>PayrollEarningStatementLine</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existLinesReleasedAndProcessed(PayrollEarningStatementRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollEarningStatementLine
                    where payrollEarningStatementLine.EarningStatement == _recId
                        && (payrollEarningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Processed
                        ||  payrollEarningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Released)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollEarningStatementLine</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollEarningStatementLine</c> table; otherwise, an empty record.
    /// </returns>
    public static PayrollEarningStatementLine find(
        PayrollEarningStatementLineRecId            _recId,
        boolean                                 _forUpdate = false,
        ConcurrencyModel                        _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollEarningStatementLine earningStatementLine;

        earningStatementLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            earningStatementLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly earningStatementLine
             where earningStatementLine.RecId == _recId;

        return earningStatementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByEarningStatementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollEarningStatementLine</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>PayrollEarningStatementHeader</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollEarningStatementLine</c> table; otherwise, an empty record.
    /// </returns>
    public static PayrollEarningStatementLine findByEarningStatementHeader(
        PayrollEarningStatementRecId            _recId,
        boolean                                 _forUpdate = false,
        ConcurrencyModel                        _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollEarningStatementLine earningStatementLine;

        earningStatementLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            earningStatementLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly earningStatementLine
             where earningStatementLine.EarningStatement == _recId;

        return earningStatementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEarningStatementLineDistributed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the earning statement line is fully distributed to fully qualified accounts or not.
    /// </summary>
    /// <param name="_earningStatementLine">
    /// The earning statement line record.
    /// </param>
    /// <returns>
    /// true, if the earning statement line is fully distributed to fully qualified accounts; otherwise, false
    /// </returns>
    public static boolean isEarningStatementLineDistributed(PayrollEarningStatementLine _earningStatementLine)
    {
        PayrollEarningStatementLine earningStatementLine;
        AccountingDistribution      accountingDistribution;
        SourceDocumentLine          sourceDocumentLine;
        boolean                     ledgerDimensionIsValid;
        boolean                     lineDistributed = true;

        select firstonly RecId from accountingDistribution
            join RecId from sourceDocumentLine
                where   sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine &&
                        accountingDistribution.LedgerDimension == 0
            join RecId from earningStatementLine
                where   earningStatementLine.SourceDocumentLine == sourceDocumentLine.RecId   &&
                        earningStatementLine.RecId == _earningStatementLine.RecId;

        //Check all the distribution have the ledger accounts
        if (accountingDistribution.RecId != 0)
        {
            lineDistributed = false;
        }
        //Check the distributions are fully distributed or not
        sourceDocumentLine = SourceDocumentLine::find(_earningStatementLine.SourceDocumentLine);
        if (lineDistributed && sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::FullyDistributed)
        {
            lineDistributed = false;
        }

        if (lineDistributed)
        {
            // Verify the ledger dimension is valid
            ledgerDimensionIsValid = SourceDocumentProvider::areSourceDocLineAccDistAccountValid(sourceDocumentLine, true, true);

            if (!ledgerDimensionIsValid)
            {
                lineDistributed = false;
            }
        }

        return lineDistributed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineBesideHeaderAndStatusExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the <c>PayrollEarningStatement</c> table contains <c>PayrollEarningStatementLine</c> records
    /// with a <c>PaymentStatus</c> field value which is not equal to <c>PayrollPaymentProcessingStatus::Processed</c>
    /// and is not equal to a supplied status value.
    /// </summary>
    /// <param name="_earningStatementRecId">
    /// The earning statement record ID.
    /// </param>
    /// <param name="_paymentStatus">
    /// The status of the earning statement line to exclude.
    /// </param>
    /// <returns>
    /// true, if a record does exist otherwise; false.
    /// </returns>
    public static boolean lineBesideHeaderAndStatusExists(PayrollEarningStatementRecId  _earningStatementRecId,
                                                    PayrollPaymentProcessingStatus      _paymentStatus)
    {
        return _earningStatementRecId && (select firstonly RecId from payrollEarningStatementLine
                    where payrollEarningStatementLine.EarningStatement == _earningStatementRecId
                        && payrollEarningStatementLine.PaymentStatus != _paymentStatus
                        && payrollEarningStatementLine.PaymentStatus != PayrollPaymentProcessingStatus::Processed).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesProcessedForPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that whether there are existing earning statement lines that are processed or not.
    /// </summary>
    /// <param name="_earningStatementRecId">
    /// The earning statement record ID.
    /// </param>
    /// <returns>
    /// true, if the line is processed; otherwise, false.
    /// </returns>
    public static boolean linesProcessedForPayment(PayrollEarningStatementRecId _earningStatementRecId)
    {
        PayrollEarningStatementLine earningStatementLine;

        select count(RecId) from earningStatementLine
            where earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Processed &&
                  earningStatementLine.EarningStatement == _earningStatementRecId;

        return earningStatementLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the earning statement line that has valid accounting distribution.
    /// </summary>
    /// <param name="_earningStatementLine">
    /// The <c>PayrollEarningStatementLine</c> record.
    /// </param>
    /// <returns>
    /// true, if the line is released successfully; otherwise. false.
    /// </returns>
    public static boolean releaseLine(PayrollEarningStatementLine _earningStatementLine)
    {
        ttsbegin;
        if (PayrollEarningStatementLine::isEarningStatementLineDistributed(_earningStatementLine))
        {
            _earningStatementLine.selectForUpdate(true);
            _earningStatementLine.PaymentStatus = PayrollPaymentProcessingStatus::Released;

            // Skip adjusting salary with this update to improve performance
            _earningStatementLine.update(true);
        }
        else
        {
            if (!AccountingDistribution::existSourceDocumentLine(_earningStatementLine.SourceDocumentLine))
            {
                //If the line is not fully distributed, do not release the line and try to create distributions for it
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(_earningStatementLine, false, SourceDocumentLineAccountingStatus::FullyDistributed);

                if (PayrollEarningStatementLine::isEarningStatementLineDistributed(_earningStatementLine))
                {
                    _earningStatementLine.selectForUpdate(true);
                    _earningStatementLine.PaymentStatus = PayrollPaymentProcessingStatus::Released;

                    // Skip adjusting salary with this update to improve performance
                    _earningStatementLine.update(true);
                }
            }
        }

        ttscommit;
        return _earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS329226";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinesStatusByHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of the earning statement lines on the basis of the earning statement header.
    /// </summary>
    /// <remarks>
    /// Any business logic change or fix here needs to be updated or reflected in the updateLinesStatusByHeaderPosition method
    /// which is for releasing and holding lines for payment from the periodic process
    /// </remarks>
    /// <param name="_earningStatementRecId">
    /// The earning statement record ID.
    /// </param>
    /// <param name="_paymentStatus">
    /// The status of the earning statement line.
    /// </param>
    /// <returns>
    /// The number of rows that the method has updated.
    /// </returns>
    public static int64 updateLinesStatusByHeader(PayrollEarningStatementRecId  _earningStatementRecId,
                                                    PayrollPaymentProcessingStatus      _paymentStatus)
    {
        PayrollEarningStatementLine earningStatementLine;
        SourceDocumentLine          sourceDocumentLine;
        PayrollEarningStatement     earningStatement = PayrollEarningStatement::find(_earningStatementRecId);
        boolean                     lineDistributed, releasedLineFound, validGrossEarningLine;
        PayrollWorkerTaxRegionRecId workerTaxRegionRecId;
        PayrollPayCycleRecId        payCycleRecId = PayrollPayPeriod::find(earningStatement.PayPeriod).PayCycle;
        // This set will be used to show error messages for the earning statement lines that have gross up earning code and invalid tax regions
        Set                         grossEarningStatmentDocNum = new Set(Types::String);

        SetEnumerator               grossEarningStatmentDocNumEnumerator;
        int64                       releasedLinesCount;

        PayrollAccrualProcess payrollAccrualProcess = new PayrollAccrualProcess();

        if (_paymentStatus == PayrollPaymentProcessingStatus::Released)
        {
            lineDistributed = true;

            ttsbegin;
            while select forupdate earningStatementLine
                order by WorkerTaxRegion
                    where   earningStatementLine.EarningStatement ==  _earningStatementRecId &&
                            (earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::None ||
                            earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::OnHold)
                join sourceDocumentLine
                    where   sourceDocumentLine.RecId == earningStatementLine.SourceDocumentLine
            {
                validGrossEarningLine = true;
                //
                // Checks the type of the earning statement line and then validates that all the gross up earning statement lines have the same tax region
                // for the pay cycle
                //
                if (PayrollEarningCode::find(earningStatementLine.EarningCode).IncludeInPaymentType == PayrollIncludeInPaymentType::GrossUp)
                {
                    // This check is to avoid the redundent calls for the validation of the gross up earning statement lines
                    if  (workerTaxRegionRecId != earningStatementLine.WorkerTaxRegion)
                    {
                        validGrossEarningLine = PayrollEarningStatementLine::validateGrossUpEarningStmtLine(earningStatement.Worker, payCycleRecId, earningStatementLine.WorkerTaxRegion, earningStatementLine.RecId, grossEarningStatmentDocNum);
                        workerTaxRegionRecId = earningStatementLine.WorkerTaxRegion;
                    }
                }

                if (payrollAccrualProcess.validateUsage(earningStatementLine) && validGrossEarningLine)
                {
                    lineDistributed = PayrollEarningStatementLine::releaseLine(earningStatementLine) && lineDistributed;
                    releasedLineFound = true;

                    if (lineDistributed)
                    {
                        releasedLinesCount +=1;
                    }
                }
            }
            ttscommit;

            if (releasedLineFound && !lineDistributed)
            {
                warning("@Payroll:OneOrMoreEarningsWereNotFullyDistributedAndCouldNotBeRelease");
            }
            // Showing the earning statement document numbers which have invalid tax region and have lines of type gross earning statement line
            if (grossEarningStatmentDocNum.elements() > 0)
            {
                grossEarningStatmentDocNumEnumerator =   grossEarningStatmentDocNum.getEnumerator();
                setPrefix("@SYS4090109");

                while (grossEarningStatmentDocNumEnumerator.moveNext())
                {
                    info (grossEarningStatmentDocNumEnumerator.current());
                }
            }
        }
        else if (_paymentStatus == PayrollPaymentProcessingStatus::OnHold)
        {
            ttsbegin;
            while select forupdate * from earningStatementLine
                where   earningStatementLine.EarningStatement ==  _earningStatementRecId
                    && (earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::None
                        || earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Released)
            {
                earningStatementLine.PaymentStatus = PayrollPaymentProcessingStatus::OnHold;

                // Skip adjusting salary with this update to improve performance
                earningStatementLine.update(true);
                releasedLinesCount +=1;
            }
            ttscommit;
        }

        return releasedLinesCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinesStatusByHeaderPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status of the earning statement lines on the basis of the earning statement header and a given position
    /// for periodic releasing non retroactive earning statement lines and holding earning statement lines for payment.
    /// </summary>
    /// <remarks>
    /// Any business logic change or fix here needs to be updated or reflected in the updateLinesStatusByHeader method
    /// which is for releasing and holding lines for payment from the earning statement
    /// </remarks>
    /// <param name="_earningStatementRecId">
    /// The earning statement record ID.
    /// </param>
    /// <param name="_positionRecId">
    /// The <c>position</c> field of the earning statement lines to process.
    /// </param>
    /// <param name="_paymentAction">
    /// The type of action to proceed on the earning statement lines.
    /// </param>
    /// <param name="_releaseOnholdEarnings">
    /// A boolean value that indicates whether to release on hold non-retroactive earning statement lines.
    /// </param>
    /// <returns>
    /// The number of rows that the method has updated.
    /// </returns>
    public static int updateLinesStatusByHeaderPosition(PayrollEarningStatementRecId          _earningStatementRecId,
                                                         HcmPositionRecId                      _positionRecId,
                                                         PayrollEarningPaymentProcessingAction  _paymentAction,
                                                         boolean    _releaseOnholdEarnings = true)
    {
        PayrollEarningStatementLine earningStatementLine;
        SourceDocumentLine          sourceDocumentLine;
        PayrollEarningStatement     earningStatement;
        boolean                     lineDistributed, releasedLineFound, validGrossEarningLine;
        PayrollWorkerTaxRegionRecId workerTaxRegionRecId;
        PayrollPayCycleRecId        payCycleRecId = PayrollPayPeriod::find(earningStatement.PayPeriod).PayCycle;
        // This set will be used to show error messages for the earning statement lines that have gross up earning code and invalid tax regions
        Set                         grossEarningStatmentDocNum = new Set(Types::String);

        SetEnumerator               grossEarningStatmentDocNumEnumerator;
        int                         releasedHoldLinesCount;
        PayrollAccrualProcess       payrollAccrualProcess;

        earningStatement = PayrollEarningStatement::find(_earningStatementRecId);
        payrollAccrualProcess = new PayrollAccrualProcess();

        if (_paymentAction == PayrollEarningPaymentProcessingAction::ReleaseForPayment)
        {
            lineDistributed = true;
            ttsbegin;
            if (_releaseOnholdEarnings)
            {
                while select forupdate earningStatementLine order by WorkerTaxRegion
                        where   earningStatementLine.EarningStatement ==  _earningStatementRecId
                                && earningStatementLine.Position ==  _positionRecId
                                && earningStatementLine.GenerationSource !=  PayrollGenerationSource::Retroactive
                                && (earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::None
                                    || earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::OnHold)
                    join sourceDocumentLine
                        where   sourceDocumentLine.RecId == earningStatementLine.SourceDocumentLine
                {
                    validGrossEarningLine = true;
                    //
                    // Checks the type of the earning statement line and then validates that all the gross up earning statement lines have the same tax region
                    // for the pay cycle
                    //
                    if (PayrollEarningCode::find(earningStatementLine.EarningCode).IncludeInPaymentType == PayrollIncludeInPaymentType::GrossUp)
                    {
                        // This check is to avoid the redundent calls for the validation of the gross up earning statement lines
                        if  (workerTaxRegionRecId != earningStatementLine.WorkerTaxRegion)
                        {
                            validGrossEarningLine = PayrollEarningStatementLine::validateGrossUpEarningStmtLine(earningStatement.Worker, payCycleRecId, earningStatementLine.WorkerTaxRegion, earningStatementLine.RecId, grossEarningStatmentDocNum);
                            workerTaxRegionRecId = earningStatementLine.WorkerTaxRegion;
                        }
                    }

                    if (payrollAccrualProcess.validateUsage(earningStatementLine) && validGrossEarningLine)
                    {
                        lineDistributed = PayrollEarningStatementLine::releaseLine(earningStatementLine) && lineDistributed;
                        releasedLineFound = true;

                        if (lineDistributed)
                        {
                            releasedHoldLinesCount +=1;
                        }
                    }
                }
            }
            else
            {
                while select forupdate earningStatementLine
                        where   earningStatementLine.EarningStatement ==  _earningStatementRecId
                                && earningStatementLine.Position ==  _positionRecId
                                && earningStatementLine.GenerationSource !=  PayrollGenerationSource::Retroactive
                                && earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::None
                    join sourceDocumentLine
                        where   sourceDocumentLine.RecId == earningStatementLine.SourceDocumentLine
                {
                    validGrossEarningLine = true;
                    //
                    // Checks the type of the earning statement line and then validates that all the gross up earning statement lines have the same tax region
                    // for the pay cycle
                    //
                    if (PayrollEarningCode::find(earningStatementLine.EarningCode).IncludeInPaymentType == PayrollIncludeInPaymentType::GrossUp)
                    {
                        // This check is to avoid the redundent calls for the validation of the gross up earning statement lines
                        if  (workerTaxRegionRecId != earningStatementLine.WorkerTaxRegion)
                        {
                            validGrossEarningLine = PayrollEarningStatementLine::validateGrossUpEarningStmtLine(earningStatement.Worker, payCycleRecId, earningStatementLine.WorkerTaxRegion, earningStatementLine.RecId, grossEarningStatmentDocNum);
                            workerTaxRegionRecId = earningStatementLine.WorkerTaxRegion;
                        }
                    }

                    if (payrollAccrualProcess.validateUsage(earningStatementLine) && validGrossEarningLine)
                    {
                        lineDistributed = PayrollEarningStatementLine::releaseLine(earningStatementLine) && lineDistributed;
                        releasedLineFound = true;

                        if (lineDistributed)
                        {
                            releasedHoldLinesCount +=1;
                        }
                    }
                }
            }
            ttscommit;

            if (releasedLineFound && !lineDistributed)
            {
                warning("@Payroll:OneOrMoreEarningsWereNotFullyDistributedAndCouldNotBeRelease");
            }

            // Showing the earning statement document numbers which have invalid tax region and have lines of type gross earning statement line
            if (grossEarningStatmentDocNum.elements() > 0)
            {
                grossEarningStatmentDocNumEnumerator =   grossEarningStatmentDocNum.getEnumerator();
                setPrefix("@SYS4090109");

                while (grossEarningStatmentDocNumEnumerator.moveNext())
                {
                    info (grossEarningStatmentDocNumEnumerator.current());
                }
            }
        }
        else if (_paymentAction == PayrollEarningPaymentProcessingAction::OnHoldForPayment)
        {
            ttsbegin;
            while select forupdate * from earningStatementLine
                where   earningStatementLine.EarningStatement ==  _earningStatementRecId
                    &&  earningStatementLine.Position ==  _positionRecId
                    &&  (earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::None
                        ||  earningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Released)
            {
                earningStatementLine.PaymentStatus = PayrollPaymentProcessingStatus::OnHold;

                // Skip adjusting salary with this update to improve performance
                earningStatementLine.update(true);
                releasedHoldLinesCount +=1;
            }
            ttscommit;
        }

        return releasedHoldLinesCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGrossUpEarningStmtLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates an earning statement line that has earning code of gross up type.
    /// </summary>
    /// <param name="_workerRecId">
    /// The <c>HcmWorker</c> record ID.
    /// </param>
    /// <param name="_payCycleRecId">
    /// The <c>PayrollPayCycle</c> record ID.
    /// </param>
    /// <param name="_taxRegionRecId">
    /// The <c>PayrollWorkerTaxRegion</c> record ID.
    /// </param>
    /// <param name="_excludedEarningStatementLineRecId">
    /// The earning statement line that is to be excluded from the search.
    /// </param>
    /// <param name="_grossEarningStatmentDocNum">
    /// The set that contains the earning statement numbers.
    /// </param>
    /// <returns>
    /// true, if the earning statement lines have the same tax region; otherwise, false.
    /// </returns>
    public static boolean validateGrossUpEarningStmtLine(HcmWorkerRecId                     _workerRecId,
                                                        PayrollPayCycleRecId                _payCycleRecId,
                                                        PayrollWorkerTaxRegionRecId               _taxRegionRecId,
                                                        PayrollEarningStatementLineRecId    _excludedEarningStatementLineRecId,
                                                        Set                                 _grossEarningStatmentDocNum = null)
    {
        PayrollEarningStatementLine earningStatementLine;
        PayrollEarningStatement     earningStatement;
        PayrollPayPeriod            payPeriod;
        PayrollPayCycle             payCycle;
        PayrollEarningCode          earningCode;
        boolean                     validGrossEarningLines = true;

        while select DocumentNumber from earningStatement
                where earningStatement.Worker == _workerRecId
            exists join RecId from payPeriod
                where earningStatement.PayPeriod == payPeriod.RecId
            exists join RecId from payCycle
                where payPeriod.PayCycle == _payCycleRecId
            exists join RecId from earningStatementLine
                where earningStatementLine.EarningStatement == earningStatement.RecId
                && earningStatementLine.RecId != _excludedEarningStatementLineRecId
            exists join RecId from earningCode
                where earningStatementLine.EarningCode == earningCode.RecId
                && earningCode.IncludeInPaymentType == PayrollIncludeInPaymentType::GrossUp
                && earningStatementLine.WorkerTaxRegion != _taxRegionRecId
        {
            validGrossEarningLines = false;
            if (_grossEarningStatmentDocNum == null)
            {
                setPrefix("@SYS4090109");
                error (earningStatement.DocumentNumber);
            }
            else
            {
                if (!_grossEarningStatmentDocNum.in(earningStatement.DocumentNumber))
                {
                    _grossEarningStatmentDocNum.add(earningStatement.DocumentNumber);
                }
            }
        }
        return validGrossEarningLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates earning quantity for an earning statement line.
    /// </summary>
    /// <returns>
    /// The earning quantity.
    /// </returns>
    public PayrollEarningQuantity computeQuantity()
    {
        PayrollEarningQuantity      earningQuantity;
        PayrollEarningStatement     earningStatement;
        PayrollEarningCode          earningCode;
        PayrollRateBasis            rateBasis;
        TransDate                   payPeriodEndDate;
        PayrollWorkPeriod           workPeriod;

        rateBasis = PayrollEarningCodeDetail::findByEarningCode(this.EarningCode, this.EarningDate).RateBasis;

        switch (rateBasis)
        {
            case PayrollRateBasis::HoursOfEarnings:

                earningStatement = this.payrollEarningStatement();
                earningCode      = PayrollEarningCode::find(this.EarningCode);

                earningQuantity = PayrollEarningGenerationTask::getEarningQuantity(rateBasis, earningCode, earningStatement.RecId);

                break;

            case PayrollRateBasis::RegularRatePay:

                earningStatement = this.payrollEarningStatement();
                earningCode      = PayrollEarningCode::find(this.EarningCode);
                payPeriodEndDate = PayrollPayPeriod::find(earningStatement.PayPeriod).PeriodEndDate;
                workPeriod = PayrollWorkPeriod::find(this.WorkPeriod);

                if (workPeriod.PeriodEndDate <= payPeriodEndDate)
                {
                    earningQuantity = PayrollEarningGenerationTask::getEarningQuantity(rateBasis,
                                                                        earningCode.data(),
                                                                        earningStatement.RecId);
                }
                break;
            default:
                earningQuantity = this.Quantity;
        }

        return earningQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFMLATrackingLineByStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Based on the change of payment processing status
    /// create or delete <c>HcmFMLATrackingLineDetails</c> record.
    /// </summary>
    private void updateFMLATrackingLineByStatus()
    {
        if (this.orig().PaymentStatus != PayrollPaymentProcessingStatus::OnHold
            && this.PaymentStatus == PayrollPaymentProcessingStatus::OnHold)
        {
            HcmFMLATrackingLineDetails::deleteByPayrollEarningLine(this);
        }

        if (this.orig().PaymentStatus != PayrollPaymentProcessingStatus::Released
            && this.PaymentStatus == PayrollPaymentProcessingStatus::Released)
        {
            HcmFMLATrackingLineDetails::createFMLATrackingLine(this.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last line number of an earning statement.
    /// </summary>
    /// <param name="_earningStatementRecId">
    /// A earning statement recId.
    /// </param>
    /// <returns>
    ///  true if the earning line can be a manual line; otherwise, false.
    /// The line number of the last line in the earning statement, if one exists; otherwise, zero.
    /// </returns>
    public static LineNum lastLineNum(PayrollEarningStatementRecId _earningStatementRecId)
    {
        PayrollEarningStatementLine payrollEarningStatementLine;

        return (select maxof(LineNum) from payrollEarningStatementLine
                       where payrollEarningStatementLine.EarningStatement == _earningStatementRecId).LineNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollearningstatementlineTableHoldsTheEarningStatementL</DeveloperDocumentation>
	<Label>@Payroll:EarningsStatementLines</Label>
	<SingularLabel>@Payroll:EarningsStatementLines</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>EarningCode</TitleField1>
	<TitleField2>Position</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PayrollEarningStatementIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Payroll</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerTaxRegion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Note</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerGLIBenefit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EarningDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerTaxRegion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsManual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetroactivePriorRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EarningRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerCompensationBenefit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerTaxRegion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerationSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Note</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EarningStatement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isEdited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayStatementEarningLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerGLIBenefit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PremiumEarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS76204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccountingCurrencyAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningAccountingCurrencyAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccountingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS4000459</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
			<Label>@SYS30829</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EarningCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningCodeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EarningDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@Payroll:EarningsDate</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EarningRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EarningStatement</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningStatementRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GenerationSource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PayrollGenerationSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isEdited</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Payroll:LineModified</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsManual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS9232</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Note</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:PaymentStatus</Label>
			<EnumType>PayrollPaymentProcessingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PayStatementEarningLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollPayStatementEarningLineRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Position</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmPositionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SourceDocumentLineRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerCompensationBenefit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>US</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Payroll:WorkersCompensationCode</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerGLIBenefit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Payroll:GeneralLiabilityInsurance</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerTaxRegion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollWorkerTaxRegionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginatingEarningStatementLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningStatementLineRecId</ExtendedDataType>
			<Label>@Payroll:OriginatingEarningStatementLine</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PremiumEarningCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollPremiumEarningCodeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetroactivePriorRate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningRate</ExtendedDataType>
			<Label>@Payroll:OriginalRetroactiveRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollWorkPeriodRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PayrollEarningStatementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>EarningStatement</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PayStatementEarningLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PayStatementEarningLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentPayStatementEarningLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayStatementEarningLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EarningStatement</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ActivityNumber</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjActivityNumber</Name>
					<SourceEDT>smmActivityNumber</SourceEDT>
					<Field>ProjActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EarningCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollEarningCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EarningCode</Name>
					<Field>EarningCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EarningStatement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PayrollEarningStatement</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollEarningStatement</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PayrollEarningStatementLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EarningStatement</Name>
					<Field>EarningStatement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LinePropertyId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayStatementEarningLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PayrollPayStatementEarningLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayStatementEarningLine</Name>
					<Field>PayStatementEarningLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Position</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmPosition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Position</Name>
					<Field>Position</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategoryId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEarningStatementLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerCompensationBenefit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmBenefit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkerCompensationBenefit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEarningStatementLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerCompensationBenefit</Name>
					<Field>WorkerCompensationBenefit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerGeneralLiabilityInsuranceBenefit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmBenefit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerGLIBenefit</Name>
					<Field>WorkerGLIBenefit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerTaxRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollWorkerTaxRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollWorkerTaxRegion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEarningStatementLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerTaxRegion</Name>
					<Field>WorkerTaxRegion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollEarningStatementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PayrollEarningStatementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginatingEarningStatementLine</Name>
					<Field>OriginatingEarningStatementLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PremiumEarningCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollPremiumEarningCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PremiumEarningCode</Name>
					<Field>PremiumEarningCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollWorkPeriod</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkPeriod</Name>
					<Field>WorkPeriod</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>