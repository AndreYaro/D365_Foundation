<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChronologicalNumberingSetup_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ChronologicalNumberingSetup_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByReferenceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>ChronologicalNumberingSetup_W</c> table for the specified number sequence reference record on the specified date.
    /// </summary>
    /// <param name = "_numberSequenceTable, TransDate _transDate)
    /// RecId of the <c>NumberSequenceTable</c> record for which the setup has to be found.
    /// </param>
    /// <param name = "_transDate">
    /// Date on which the setup has to be found.
    /// </param>
    /// <returns>
    /// A record in the <c>ChronologicalNumberingSetup_W</c> table found for the specified parameters.
    /// </returns>
    public static ChronologicalNumberingSetup_W findByReferenceDate(Common _referenceTable, TransDate _transDate, boolean _throwError = false)
    {
        ChronologicalNumberingSetup_W   chronologicalNumberingSetup;
        NumberSequenceReference         numberSequenceReference;
        NumberSequenceGroupRef          numberSequenceGroupRef;
        str                             errorTxt;

        select firstonly validtimestate(_transDate) chronologicalNumberingSetup
            where chronologicalNumberingSetup.RefTableId  == _referenceTable.TableId
               && chronologicalNumberingSetup.RefRecId    == _referenceTable.RecId;

        if (! chronologicalNumberingSetup && _throwError)
        {
            switch (_referenceTable.TableId)
            {
                case tableNum(NumberSequenceReference):
                    numberSequenceReference = _referenceTable;
                    errorTxt = strFmt("@AccountsReceivable:ChronologicalNumberingSetupFindByReferenceErrorText", numberSequenceReference.referenceLabel(), _transDate);
                    break;

                case tableNum(NumberSequenceGroupRef):
                    numberSequenceGroupRef = _referenceTable;
                    errorTxt = strFmt("@AccountsReceivable:ChronologicalNumberingSetupFindByReferenceGroupErrorText", numberSequenceGroupRef.referenceLabel(), numberSequenceGroupRef.numberSequenceGroupId, _transDate);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            throw error(errorTxt);
        }

        return chronologicalNumberingSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns number sequence code of the related <c>NumberSequenceTable</c> record.
    /// </summary>
    public NumberSequenceCode numberSequenceCode()
    {
        return NumberSequenceTable::find(this.NumberSequenceTable).NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret;
        FiscalCalendarYear  fiscalCalendarYear;

        ret = super();

        if (ret)
        {
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), this.ValidFrom);

            if (!fiscalCalendarYear)
            {
                ret = checkFailed(strFmt("@AccountsReceivable:CannotFindTheFiscalCalendarYearCorrespondingToTheDate", this.ValidFrom));
            }

            if (fiscalCalendarYear && this.ValidTo > fiscalCalendarYear.EndDate)
            {
                ret = checkFailed("@AccountsReceivable:EffectiveAndExpirationDateShouldBelongToTheSameFiscalCalendarYear");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets expiration date in the current <c>ChronologicalNumberingSetup_W</c> record based on the effective date.
    /// </summary>
    public void setValidToDate()
    {
        FiscalCalendarYear      fiscalCalendarYear;

        fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), this.ValidFrom);

        if (fiscalCalendarYear)
        {
            this.ValidTo = fiscalCalendarYear.EndDate;
        }
        else
        {
            this.ValidTo = maxDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case (fieldNum(ChronologicalNumberingSetup_W, ValidFrom)):
                this.setValidToDate();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledForDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the chronological numbering can be used for the data type.
    /// </summary>
    /// <param name = "_typeId">
    /// Data type ID to validate.
    /// </param>
    /// <returns>
    /// true, if the chronological numbering can be used for the data type; otherwise, false.
    /// </returns>
    public static boolean isEnabledForDataType(ExtendedTypeId   _typeId)
    {
        return _typeId == extendedTypeNum(CustInvoiceId)
            || _typeId == extendedTypeNum(CustInvoiceVoucher)
            || _typeId == extendedTypeNum(CustCreditNoteId)
            || _typeId == extendedTypeNum(CustCreditNoteVoucher)
            || _typeId == extendedTypeNum(InvoiceId)
            || _typeId == extendedTypeNum(SalesInvoiceVoucher)
            || _typeId == extendedTypeNum(SalesCreditNoteId)
            || _typeId == extendedTypeNum(SalesCreditNoteVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs temporary number sequence to be used in the invoice and voucher number allocation mechanism.
    /// </summary>
    /// <param name = "_scopeId">Scope Id.</param>
    /// <param name = "_isCreditNote">Indicates if the credit note is being posted.</param>
    /// <param name = "_invoiceDate">Date on which the chronological numbering setup must be found.</param>
    /// <param name = "_numberSequenceGroupId">Number sequence group.</param>
    /// <param name = "_invoiceNumberReference">Number sequence reference for the invoice number.</param>
    /// <param name = "_invoiceVoucherReference">Number sequence reference for the invoice voucher.</param>
    /// <param name = "_creditNoteNumberReference">Number sequence reference for the credit note number.</param>
    /// <param name = "_creditNoteVoucherReference">Number sequence reference for the credit note voucher.</param>
    /// <returns></returns>
    public static NumberSeq getTmpNumberSeq(
            RefRecId                    _scopeId,
            boolean                     _isCreditNote,
            InvoiceDate                 _invoiceDate,
            NumberSequenceGroupId       _numberSequenceGroupId,
            NumberSequenceReference     _invoiceNumberReference,
            NumberSequenceReference     _invoiceVoucherReference,
            NumberSequenceReference     _creditNoteNumberReference,
            NumberSequenceReference     _creditNoteVoucherReference)
    {
        const str FeatureReference = 'FR-00024';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        NumberSeq               tmpNumberSeq;
        boolean                 voucherEqualsNumber;
        NumberSequenceDatatype  numberDatatype, voucherDatatype;
        NumberSequenceGroupRef  numberSequenceGroupRef;
        RefRecId                invoiceNumberId, invoiceVoucherId;

        voucherEqualsNumber = _isCreditNote ? _creditNoteVoucherReference.AllowSameAs : _invoiceVoucherReference.AllowSameAs;

        if (_numberSequenceGroupId)
        {
            if (_isCreditNote)
            {
                numberDatatype          = NumberSequenceDatatype::find(_creditNoteNumberReference.NumberSequenceDatatype);
                numberSequenceGroupRef  = NumberSequenceGroupRef::findNaturalKey(numberDataType.RecId, _scopeId, _numberSequenceGroupId);
                invoiceNumberId         = ChronologicalNumberingSetup_W::findByReferenceDate(numberSequenceGroupRef, _invoiceDate, true).NumberSequenceTable;

                if (!voucherEqualsNumber)
                {
                    voucherDatatype         = NumberSequenceDatatype::find(_creditNoteVoucherReference.NumberSequenceDatatype);
                    numberSequenceGroupRef  = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, _scopeId, _numberSequenceGroupId);
                    invoiceVoucherId        = ChronologicalNumberingSetup_W::findByReferenceDate(numberSequenceGroupRef, _invoiceDate, true).NumberSequenceTable;
                }
            }
            else
            {
                numberDatatype          = NumberSequenceDatatype::find(_invoiceNumberReference.NumberSequenceDatatype);
                numberSequenceGroupRef  = NumberSequenceGroupRef::findNaturalKey(numberDataType.RecId, _scopeId, _numberSequenceGroupId);
                invoiceNumberId         = ChronologicalNumberingSetup_W::findByReferenceDate(numberSequenceGroupRef, _invoiceDate, true).NumberSequenceTable;

                if (!voucherEqualsNumber)
                {
                    voucherDatatype         = NumberSequenceDatatype::find(_invoiceVoucherReference.NumberSequenceDatatype);
                    numberSequenceGroupRef  = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, _scopeId, _numberSequenceGroupId);
                    invoiceVoucherId        = ChronologicalNumberingSetup_W::findByReferenceDate(numberSequenceGroupRef, _invoiceDate, true).NumberSequenceTable;
                }
            }
        }
        else
        {
            if (_isCreditNote)
            {
                invoiceNumberId = ChronologicalNumberingSetup_W::findByReferenceDate(_creditNoteNumberReference, _invoiceDate, true).NumberSequenceTable;

                if (!voucherEqualsNumber)
                {
                    invoiceVoucherId = ChronologicalNumberingSetup_W::findByReferenceDate(_creditNoteVoucherReference, _invoiceDate, true).NumberSequenceTable;
                }
            }
            else
            {
                invoiceNumberId = ChronologicalNumberingSetup_W::findByReferenceDate(_invoiceNumberReference, _invoiceDate, true).NumberSequenceTable;

                if (!voucherEqualsNumber)
                {
                    invoiceVoucherId = ChronologicalNumberingSetup_W::findByReferenceDate(_invoiceVoucherReference, _invoiceDate, true).NumberSequenceTable;
                }
            }
        }

        if (voucherEqualsNumber)
        {
            invoiceVoucherId = invoiceNumberId;
        }

        tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(invoiceNumberId, invoiceVoucherId, voucherEqualsNumber);

        return tmpNumberSeq;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>FR</CountryRegionCodes>
	<DeveloperDocumentation>@AccountsReceivable:ChronologicalNumberingSetupDevDoc</DeveloperDocumentation>
	<Label>@AccountsReceivable:ChronologicalNumberingSetup</Label>
	<TitleField1>NumberSequenceTable</TitleField1>
	<TitleField2>ValidFrom</TitleField2>
	<Modules>APARShared</Modules>
	<ReplacementKey>ReferenceIdx</ReplacementKey>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumberSequenceTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS1161</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<HelpText>Define the start date of replacement validity period</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<HelpText>Define the end date of replacement validity period</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReferenceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceTableReplacement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>NumberSequenceTableReplacement_NumberSequenceReference</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceTable</Name>
					<Field>NumberSequenceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>NumberSequenceReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>NumberSequenceReference</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>NumberSequenceGroupRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>NumberSequenceGroupRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>