<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximIncentiveSchemeData_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximIncentiveSchemeData_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exportExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ExportExpiryDate from EximAuthorizationSchemesLine_IN table for specified EximAuthorizationTable_IN table RecId and LicenseStatus not equal to sold.
    /// </summary>
    /// <returns>ExportExpiryDate</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display TransDate exportExpiryDate()
    {
        EximAuthorizationSchemesLine_IN  authorizationSchemesLine;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;

        if (this.AuthorizationId)
        {
            select RecId from authorizationSchemesTable
                where authorizationSchemesTable.AuthorizationId   == this.AuthorizationId
                   && authorizationSchemesTable.AuthorizationType == this.IncentiveScheme
                join reverse firstonly ExportExpiryDate
                    from authorizationSchemesLine
                    order by RecId
                    where authorizationSchemesLine.AuthorizationSchemesTableRecId == authorizationSchemesTable.RecId
                       && authorizationSchemesLine.LicenseStatus                  != EximLicenseStatus_IN::Sold;
        }

        return authorizationSchemesLine.ExportExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets ImportExpiryDate for given AuthorizationId and IncentiveScheme.
    /// </summary>
    /// <returns>ImportExpiryDate</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display TransDate importExpiryDate()
    {
        EximAuthorizationSchemesLine_IN  authorizationSchemesLine;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        TransDate                        expiryDate;

        if (this.AuthorizationId)
        {
            switch (this.IncentiveScheme)
            {
                case EximAuthorizationType_IN::AA,
                     EximAuthorizationType_IN::DFIA:
                    select RecId from authorizationSchemesTable
                        where authorizationSchemesTable.AuthorizationId   == this.AuthorizationId
                           && authorizationSchemesTable.AuthorizationType == this.IncentiveScheme
                        join reverse firstonly ImportExpiryDate
                            from authorizationSchemesLine
                            order by RecId
                            where authorizationSchemesLine.AuthorizationSchemesTableRecId == authorizationSchemesTable.RecId
                               && authorizationSchemesLine.LicenseStatus                  != EximLicenseStatus_IN::Sold;

                    expiryDate = authorizationSchemesLine.ImportExpiryDate;
                    break;

                case EximAuthorizationType_IN::DEPB:
                    expiryDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(EximDEPBSchemesLine_IN::latestExpiryDate(
                                                        EximDEPBSchemesTable_IN::findByAuthorizationTypeSchemeId(this.AuthorizationId).RecId), DateTimeUtil::getUserPreferredTimeZone()));
                    break;

                case EximAuthorizationType_IN::EPCG:
                    expiryDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(EximEPCGSchemeTable_IN::findSchemeId(this.AuthorizationId).ImportExpiryDateTime, DateTimeUtil::getUserPreferredTimeZone()));
                    break;
            }
        }

        return expiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>licenseNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the LicenseNumber for specified AuthorizationId and IncentiveScheme.
    /// </summary>
    /// <returns>LicenseNumber</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display EximLicenseNum_IN licenseNum()
    {
        EximLicenseNum_IN licenseNum;

        if (this.AuthorizationId)
        {
            switch (this.IncentiveScheme)
            {
                case EximAuthorizationType_IN::AA,
                     EximAuthorizationType_IN::DFIA:
                     licenseNum = EximAuthorizationSchemesTable_IN::findByAuthorizationTypeId(this.IncentiveScheme,this.AuthorizationId).LicenseNum;
                    break;

                case EximAuthorizationType_IN::DEPB:
                    licenseNum = EximDEPBSchemesTable_IN::findByAuthorizationTypeSchemeId(this.AuthorizationId).LicenseNum;
                    break;

                case EximAuthorizationType_IN::EPCG:
                    licenseNum = EximEPCGSchemeTable_IN::findSchemeId(this.AuthorizationId).LicenseNum;
                    break;
            }
        }
        return licenseNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any necessary logic when a field changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The field that changed.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        EximDEPBSchemesTable_IN          depbSchemesTable;
        RefRecId                         eximPortsTableRecId;
        EximEPCGSchemeTable_IN           epcgSchemeTable;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(EximIncentiveSchemeData_IN, AuthorizationId):
                eximPortsTableRecId = EximIncentiveSchemeGroup_IN::find(this.EximIncentiveSchemeGroup).EximPortId;
                switch (this.IncentiveScheme)
                {
                    case EximAuthorizationType_IN::AA,
                         EximAuthorizationType_IN::DFIA:
                        select firstonly RecId from authorizationSchemesTable
                            where authorizationSchemesTable.AuthorizationId         == this.AuthorizationId
                               && authorizationSchemesTable.EximProductGroupTable   == this.EximProductGroupTable
                               && authorizationSchemesTable.EximPorts               == eximPortsTableRecId
                               && authorizationSchemesTable.Closed                  == NoYes::No
                               && authorizationSchemesTable.Status                  == EximAuthorizationStatus_IN::Approved;

                        if (!authorizationSchemesTable.RecId)
                        {
                            this.AuthorizationId = '';
                        }
                        break;

                    case EximAuthorizationType_IN::DEPB:
                        select firstonly RecId from depbSchemesTable
                            where depbSchemesTable.SchemeId     == this.AuthorizationId
                               && depbSchemesTable.EximPorts    == eximPortsTableRecId
                               && depbSchemesTable.Closed       == NoYes::No
                               && depbSchemesTable.Status       == EximAuthorizationStatus_IN::Approved;

                        if (!depbSchemesTable.RecId)
                        {
                            this.AuthorizationId = '';
                        }
                        break;

                    case EximAuthorizationType_IN::EPCG:
                        select firstonly RecId from epcgSchemeTable
                            where epcgSchemeTable.SchemeId      == this.AuthorizationId
                               && epcgSchemeTable.EximPorts     == EximIncentiveSchemeGroup_IN::find(this.EximIncentiveSchemeGroup).EximPortId
                               && epcgSchemeTable.Closed == NoYes::No;
                        if (!epcgSchemeTable.RecId)
                        {
                            this.AuthorizationId = '';
                        }
                        break;
                }
                break;

            case fieldnum(EximIncentiveSchemeData_IN, IncentiveScheme):
                this.AuthorizationId = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(EximIncentiveSchemeData_IN, AuthorizationId):
                    switch (this.IncentiveScheme)
                    {
                        case EximAuthorizationType_IN::AA,
                             EximAuthorizationType_IN::DFIA:
                            if (!EximAuthorizationSchemesTable_IN::findByAuthorizationTypeId(this.IncentiveScheme,this.AuthorizationId))
                            {
                                ret = checkFailed(strfmt("@SYS112224", this.AuthorizationId , "@GLS61486", "@GLS61540"));
                            }
                            break;
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            switch (this.IncentiveScheme)
            {
                case EximAuthorizationType_IN::AA:
                    if (!EximParameters_IN::find().ActivateAA)
                    {
                        ret = checkFailed(strfmt("@GLS61933", "@GLS61572"));
                    }
                    break;

                case EximAuthorizationType_IN::DFIA:
                    if (!EximParameters_IN::find().ActivateDFIA)
                    {
                        ret = checkFailed(strfmt("@GLS61933", "@GLS61582"));
                    }
                    break;

                case EximAuthorizationType_IN::DEPB:
                    if (!EximParameters_IN::find().ActivateDEPB)
                    {
                        ret = checkFailed(strfmt("@GLS61933", "@GLS61848"));
                    }
                    break;

                case EximAuthorizationType_IN::EPCG:
                    if (TaxParameters::find().Customs_IN
                        && TaxParameters::find().EximIncentiveSchemes_IN
                        && !EximParameters_IN::find().ActivateEPCG)
                    {
                        ret = checkFailed(strfmt("@GLS61933", "@GLS62130"));
                    }
                    break;
            }

            if ((this.IncentiveScheme   == EximAuthorizationType_IN::AA
                || this.IncentiveScheme == EximAuthorizationType_IN::DFIA)
                && !this.EximProductGroupTable)
            {
                ret = checkFailed(strfmt("@SYS26332", "@SYS58238"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if EximIncentiveSchemeData_IN record exists for specified EximIncentiveSchemeGroup_IN RecId and EximAuthorizationType_IN.
    /// </summary>
    /// <param name="_eximIncentiveSchemeGroupTableRecId">EximIncentiveSchemeGroup_IN RecId</param>
    /// <param name="_incentiveScheme">EximAuthorizationType_IN</param>
    /// <returns>true if EximIncentiveSchemeData_IN record is found otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(
        RefRecId                  _eximIncentiveSchemeGroupTableRecId,
        EximAuthorizationType_IN  _incentiveScheme)
    {
        return _eximIncentiveSchemeGroupTableRecId
            && (select firstonly RecId from eximIncentiveSchemeData_IN
                    where eximIncentiveSchemeData_IN.EximIncentiveSchemeGroup == _eximIncentiveSchemeGroupTableRecId
                       && eximIncentiveSchemeData_IN.IncentiveScheme          == _incentiveScheme).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximIncentiveSchemeData_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximIncentiveSchemeData_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximIncentiveSchemeData_IN find(
        RefRecId            _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximIncentiveSchemeData_IN  eximIncentiveSchemeData;

        eximIncentiveSchemeData.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximIncentiveSchemeData.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximIncentiveSchemeData
            where eximIncentiveSchemeData.RecId == _recId;

        return eximIncentiveSchemeData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByIncentiveScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximIncentiveSchemeData_IN table for the specified EximIncentiveSchemeGroup_IN table recId and EximAuthorizationType_IN.
    /// </summary>
    /// <param name="_eximIncentiveSchemeGroupTableRecId">EximIncentiveSchemeGroup_IN table recId</param>
    /// <param name="_incentiveScheme">EximAuthorizationType_IN</param>
    /// <param name="_forUpdate">selectForUpdate</param>
    /// <returns>EximIncentiveSchemeData_IN table record</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximIncentiveSchemeData_IN findByIncentiveScheme(
        RefRecId                  _eximIncentiveSchemeGroupTableRecId,
        EximAuthorizationType_IN  _incentiveScheme,
        boolean                   _forUpdate = false)
    {
        EximIncentiveSchemeData_IN incentiveSchemeData;

        if (_eximIncentiveSchemeGroupTableRecId)
        {
            incentiveSchemeData.selectForUpdate(_forUpdate);

            select firstonly incentiveSchemeData
                where incentiveSchemeData.EximIncentiveSchemeGroup == _eximIncentiveSchemeGroupTableRecId
                   && incentiveSchemeData.IncentiveScheme          == _incentiveScheme;
        }

        return incentiveSchemeData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSchemeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximIncentiveSchemeData_IN table for the specified EximIncentiveSchemeGroup_IN table recId.
    /// </summary>
    /// <param name="_eximIncentiveSchemeGroupTableRecId">EximIncentiveSchemeGroup_IN table recId</param>
    /// <param name="_forUpdate">selectForUpdate</param>
    /// <returns>EximIncentiveSchemeData_IN table record</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximIncentiveSchemeData_IN findSchemeId(
        RefRecId _eximIncentiveSchemeGroupTableRecId,
        boolean  _forUpdate = false)
    {
        EximIncentiveSchemeData_IN eximIncentiveSchemeData;

        if (_eximIncentiveSchemeGroupTableRecId)
        {
            eximIncentiveSchemeData.selectForUpdate(_forUpdate);

            select firstonly eximIncentiveSchemeData
                where eximIncentiveSchemeData.EximIncentiveSchemeGroup == _eximIncentiveSchemeGroupTableRecId;
        }

        return eximIncentiveSchemeData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchemeTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets EximEPCGSchemeTable_IN table recId for given PurchLine RecId.
    /// </summary>
    /// <param name="_purchLineRecId">PurchLine RecId</param>
    /// <returns>EximEPCGSchemeTable_IN table RecId</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGSchemeTableRecId_IN getSchemeTableRecId(RefRecId _purchLineRecId)
    {
        EximIncentiveSchemeData_IN  incentiveSchemeData;
        EximPurchLine_IN            eximPurchLine;
        EximEPCGSchemeTable_IN      epcgSchemeTable;

        select AuthorizationId from incentiveSchemeData
            join EximIncentiveSchemeGroup from eximPurchLine
            where eximPurchLine.EximIncentiveSchemeGroup == incentiveSchemeData.EximIncentiveSchemeGroup
               && eximPurchLine.PurchLineRecId           == _purchLineRecId
               && incentiveSchemeData.IncentiveScheme    == EximAuthorizationType_IN::EPCG
            join SchemeId, RecId from epcgSchemeTable
            where epcgSchemeTable.SchemeId               == incentiveSchemeData.AuthorizationId;

        return epcgSchemeTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAuthorizationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup authorization id.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    /// <param name="_authorizationType">
    /// The authorization type.
    /// </param>
    /// <param name="_eximProductGroupTable">
    /// The exim product group table.
    /// </param>
    /// <param name="_eximPorts">
    /// The exim ports.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupAuthorizationId(
        FormControl              _formControl,
        EximAuthorizationType_IN _authorizationType,
        RefRecId                 _eximProductGroupTable,
        RefRecId                 _eximPorts)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        switch (_authorizationType)
        {
            case EximAuthorizationType_IN::AA :
            case EximAuthorizationType_IN::DFIA :
                sysTableLookup       = SysTableLookup::newParameters(tablenum(EximAuthorizationSchemesTable_IN), _formControl);
                queryBuildDataSource = query.addDataSource(tablenum(EximAuthorizationSchemesTable_IN));

                queryBuildRange      = queryBuildDataSource.addRange(fieldnum(EximAuthorizationSchemesTable_IN, AuthorizationType));
                queryBuildRange.value(queryValue(_authorizationType));

                queryBuildRange      = queryBuildDataSource.addRange(fieldnum(EximAuthorizationSchemesTable_IN, EximProductGroupTable));
                queryBuildRange.value(queryValue(_eximProductGroupTable));

                queryBuildRange      = queryBuildDataSource.addRange(fieldnum(EximAuthorizationSchemesTable_IN, EximPorts));
                queryBuildRange.value(queryValue(_eximPorts));

                queryBuildRange      = queryBuildDataSource.addRange(fieldnum(EximAuthorizationSchemesTable_IN, Status));
                queryBuildRange.value(queryValue(EximAuthorizationStatus_IN::Approved));

                queryBuildRange      = queryBuildDataSource.addRange(fieldnum(EximAuthorizationSchemesTable_IN, Closed));
                queryBuildRange.value(queryValue(NoYes::No));

                sysTableLookup.addLookupfield(fieldnum(EximAuthorizationSchemesTable_IN, AuthorizationId), true);
                sysTableLookup.addLookupfield(fieldnum(EximAuthorizationSchemesTable_IN, AuthorizationType));
                break;

            case EximAuthorizationType_IN::DEPB :
                sysTableLookup       = SysTableLookup::newParameters(tablenum(EximDEPBSchemesTable_IN), _formControl);
                queryBuildDataSource = query.addDataSource(tablenum(EximDEPBSchemesTable_IN));

                queryBuildRange      = queryBuildDataSource.addRange(fieldnum(EximDEPBSchemesTable_IN, AuthorizationType));
                queryBuildRange.value(queryValue(_authorizationType));

                queryBuildRange      = queryBuildDataSource.addRange(fieldnum(EximDEPBSchemesTable_IN, EximPorts));
                queryBuildRange.value(queryValue(_eximPorts));

                queryBuildRange      = queryBuildDataSource.addRange(fieldnum(EximDEPBSchemesTable_IN, Status));
                queryBuildRange.value(queryValue(EximAuthorizationStatus_IN::Approved));

                queryBuildRange      = queryBuildDataSource.addRange(fieldnum(EximDEPBSchemesTable_IN, Closed));
                queryBuildRange.value(queryValue(NoYes::No));

                sysTableLookup.addLookupfield(fieldnum(EximDEPBSchemesTable_IN, SchemeId),true);
                sysTableLookup.addLookupfield(fieldnum(EximDEPBSchemesTable_IN, Status));
                break;

            case EximAuthorizationType_IN::EPCG :
                sysTableLookup  = SysTableLookup::newParameters(tablenum(EximEPCGSchemeTable_IN), _formControl);
                queryBuildDataSource    = query.addDataSource(tablenum(EximEPCGSchemeTable_IN));

                queryBuildRange         = queryBuildDataSource.addRange(fieldnum(EximEPCGSchemeTable_IN, EximPorts));
                queryBuildRange.value(queryValue(_eximPorts));

                queryBuildRange         = queryBuildDataSource.addRange(fieldnum(EximEPCGSchemeTable_IN, Status));
                queryBuildRange.value(queryValue(EximAuthorizationStatus_IN::Approved));

                queryBuildRange         = queryBuildDataSource.addRange(fieldnum(EximEPCGSchemeTable_IN, Closed));
                queryBuildRange.value(queryValue(NoYes::No));

                sysTableLookup.addLookupfield(fieldnum(EximEPCGSchemeTable_IN, SchemeId),true);
                sysTableLookup.addLookupfield(fieldnum(EximEPCGSchemeTable_IN, Status));
                break;
        }
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62463</DeveloperDocumentation>
	<FormRef>EximIncentiveSchemeGroup_IN</FormRef>
	<Label>@GLS61569</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>IncentiveScheme</TitleField1>
	<TitleField2>EximProductGroupTable</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>IncentiveSchemeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EximTaxTable_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximTaxTable_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncentiveScheme</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EximIncentiveSchemeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncentiveScheme</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AuthorizationId</Name>
			<Label>@GLS61486</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AuthorizationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EximIncentiveSchemeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncentiveScheme</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductGroup</Name>
			<Label>@SYS58238</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EximProductGroupTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AuthorizationId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximIncentiveSchemeId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EximIncentiveSchemeGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS61496</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EximProductGroupTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS58238</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncentiveScheme</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS61566</Label>
			<EnumType>EximAuthorizationType_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IncentiveSchemeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>EximIncentiveSchemeGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IncentiveScheme</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximIncentiveSchemeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximIncentiveSchemeGroup_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximIncentiveSchemeGroup_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximIncentiveSchemeGroup_IN_EximIncentiveSchemeData_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EximIncentiveSchemeGroup</Name>
					<Field>EximIncentiveSchemeGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximProductGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximProductGroupTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EximProductGroupTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximProductGroupTable_IN_EximIncentiveSchemeData_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EximProductGroupTable</Name>
					<Field>EximProductGroupTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>