<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorPortalTmpUserRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendVendorPortalTmpUserRequest extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromDirPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendVendorPortalTmpUserRequest</c> record
    /// from the <c>DirPerson</c> record based on the <c>SysUserRequestAction</c> parameter value.
    /// </summary>
    /// <param name = "_recId">The <c>DirPerson</c> record RecId.</param>
    /// <param name = "_requestAction">The <c>SysUserRequestAction</c> action.</param>
    public void initFromDirPerson(DirPersonRecId _recId, SysUserRequestAction _requestAction)
    {
        if (_recId != 0)
        {
            DirPerson dirPerson = DirPerson::find(_recId);

            this.Person = dirPerson.RecId;
            this.RequestAction = _requestAction;
            this.UserName = dirPerson.Name;

            UserInfo        userInfo;
            DirPersonUser   dirPersonUser;

            select networkAlias, language from userInfo
                exists join dirPersonUser
                where dirPersonUser.User     == userInfo.id
                && dirPersonUser.PersonParty == _recId;

            if (strLen(userInfo.networkAlias) != 0)
            {
                this.UserAlias = userInfo.networkAlias;
                this.LanguageId = userInfo.language;
            }
            else
            {
                this.UserAlias = LogisticsElectronicAddress::findRecId(dirPerson.PrimaryContactEmail).Locator;
                this.LanguageId = dirPerson.LanguageId;
            }

            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProspectiveVendorRegistrationRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendVendorPortalTmpUserRequest</c> record
    /// from the <c>VendProspectiveVendorRegistrationRequest</c> record.
    /// </summary>
    /// <param name = "_recId">The <c>VendProspectiveVendorRegistrationRequest</c> record RecId.</param>
    /// <param name = "_requestAction">The <c>SysUserRequestAction</c>.</param>
    /// <param name = "_justification">The <c>VendVendorPortalUserRequestBusinessJustification</c>; optional.</param>
    public void initFromProspectiveVendorRegistrationRequest(VendProspectiveVendorRegistrationRequestRecId      _recId,
                                                             SysUserRequestAction                               _requestAction, 
                                                             VendVendorPortalUserRequestBusinessJustification   _justification = '')
    {
        VendProspectiveVendorRegistrationRequest request = VendProspectiveVendorRegistrationRequest::find(_recId);

        this.initValue();

        this.UserAlias = request.Email;
        this.UserName = request.getFullName();
        this.LanguageId = request.LanguageId;
        this.BusinessJustification = _justification != '' ? _justification : request.BusinessJustification;

        this.RequestAction =  _requestAction;
        this.ProspectiveVendorUserRequest = NOYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendorPortalUserRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the vendor portal user request.
    /// </summary>
    /// <param name = "_mapVendorPortalAccess">Map containing list of legal entities access requested.</param>
    /// <param name = "_mapAssignedSecurityRole">Map containing list of security roles requested.</param>
    /// <returns>true if user request is valid, otherwise false.</returns>
    public boolean validateVendorPortalUserRequest(Map _mapVendorPortalAccess, Map _mapAssignedSecurityRole)
    {
        boolean result = true;

        if (!SysEmailDistributor::validateEmail(this.UserAlias))
        {
            throw error("@SCM:NotValidEmailAddress");
        }

        if (strLen(this.BusinessJustification) == 0)
        {
            throw error("@SCM:BusinessJustificationMissing");
        }

        if (this.RequestAction != SysUserRequestAction::InactivateUser)
        {
            if (!this.ProspectiveVendorUserRequest && (!_mapVendorPortalAccess ||!_mapVendorPortalAccess.valueSet().in(NoYes::Yes)))
            {
                throw error("@SCM:VendorPortalAccessCheckBoxMustBeSelected");
            }

            if (!_mapAssignedSecurityRole || !_mapAssignedSecurityRole.valueSet().in(NoYes::Yes))
            {
                throw error("@SCM:VendorPortalUsersMustBeAssignedAtLeastOneSecurityRole");
            }
            
            Set allowedRoles = this.getListofAllowedExternalSecurityRoles();
            MapEnumerator enumerator = _mapAssignedSecurityRole.getEnumerator();
            while (enumerator.moveNext())
            {
                if (enumerator.currentValue() == NoYes::Yes && !allowedRoles.in(enumerator.currentKey()))
                {
                    throw error("@SCM:NotPossibleToAssignSelectedRoles");
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfAllowedExternalSecurityRoles</Name>
				<Source><![CDATA[
    private Set getListOfAllowedExternalSecurityRoles()
    {
        Set allowedRoles = new Set(Types::Int64);
        UserExternalPartyEntityType entityType = this.ProspectiveVendorUserRequest ? UserExternalPartyEntityType::ProspectiveVendor : UserExternalPartyEntityType::Vendor;
        SecurityRole    securityRole;
        DirExternalRole externalRole;

        while select crosscompany securityRole
            exists join externalRole
            where externalRole.EntityType == entityType
               && externalRole.Role == securityRole.RecId
        {
            allowedRoles.add(securityRole.RecId);
        }

        return allowedRoles;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SCM:VendorPortalUserRequestsTemporaryTableDocumentation</DeveloperDocumentation>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserAlias</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysUserRequestUserAlias</ExtendedDataType>
			<Label>@SCM:EmailAsUserAlias</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InstalledLanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequestAction</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>SysUserRequestAction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysUserRequestUserName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Person</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusinessJustification</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendVendorPortalUserRequestBusinessJustification</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProspectiveVendorUserRequest</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>