<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdConcessionTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdConcessionTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the date interval.
    /// </summary>
    /// <returns>
    /// Returns false if any validation fails.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkDateInterval()
    {
        if (this.FromDate > this.ToDate)
        {
            return checkFailed("@SYS6631");
        }

        if (this.FromDate && TaxWithholdConcessionTable_IN::existDataWithoutDate(this.TaxWithholdCode, this.RecId))
        {
            return checkFailed("@SYS94867");
        }

        if (TaxWithholdConcessionTable_IN::existDateInterval(this.TaxWithholdCode,
                                                             this.FromDate,
                                                             this.ToDate,
                                                             this.RecId))
        {
            return checkFailed("@SYS22089");
        }

        if (TaxWithholdConcessionTable_IN::existDateInInterval(this.TaxWithholdCode, this.FromDate, this.ToDate, this.RecId))
        {
            return checkFailed("@SYS94867");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of tax withhold with a tax withhold code.
    /// </summary>
    /// <returns>
    /// Returns a name of a tax withhold.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display TaxWithholdName taxWithholdName()
    {
        return TaxWithholdTable::find(this.TaxWithholdCode).TaxWithholdName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(TaxWithholdConcessionTable_IN, TaxWithholdCode):
                    if (this.TaxWithholdCode)
                    {
                        if (this.TaxType == TaxWithholdType_IN::TDS &&
                            TaxWithholdTable::find(this.TaxWithholdCode).TaxType_IN != TaxWithholdCodeType_IN::TDS)
                        {
                            ret = checkFailed(strfmt("@GLS5458", this.TaxWithholdCode, TaxWithholdCodeType_IN::TDS));
                        }
                        if (this.TaxType == TaxWithholdType_IN::TCS &&
                            TaxWithholdTable::find(this.TaxWithholdCode).TaxType_IN != TaxWithholdCodeType_IN::TCS)
                        {
                            ret = checkFailed(strfmt("@GLS5458", this.TaxWithholdCode, TaxWithholdCodeType_IN::TCS));
                        }
                    }
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = ret && TaxWithholdParameters_IN::checkParameter(this.TaxType);
            ret = ret && this.checkDateInterval();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdConcessionTable_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_taxCode">
    /// Withhold tax code used to check the record.
    /// </param>
    /// <param name="_taxType">
    ///  Withhold tax type used to check the record.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(TaxWithholdCode     _taxCode,
                                TaxWithholdType_IN  _taxType)
    {
        return (select firstonly RecId from taxWithholdConcessionTable_IN
                    index hint ConcessionIdx
                    where taxWithholdConcessionTable_IN.TaxWithholdCode == _taxCode
                       && taxWithholdConcessionTable_IN.TaxType         == _taxType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdConcessionTable_IN</c> record exists or not for specified parameters.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code used to check the record.
    /// </param>
    /// <param name="_recId">
    /// RecId used to check the record.
    /// </param>
    /// <returns>
    /// True if record exists otherwise false.
    /// </returns>
    static private boolean existDataWithoutDate(TaxWithholdCode _taxCode,
                                                recId           _recId)
    {
        return (select taxWithholdConcessionTable_IN
                    where taxWithholdConcessionTable_IN.TaxWithholdCode == _taxCode
                       && taxWithholdConcessionTable_IN.RecId           != _recId
                       && !taxWithholdConcessionTable_IN.FromDate
                       && !taxWithholdConcessionTable_IN.ToDate).RecId  != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDateInInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdConcessionTable_IN</c> record exists or not for specified parameters.
    /// </summary>
    /// <param name="_taxWithholdCode">
    /// TaxWithhold code used to find the record.
    /// </param>
    /// <param name="_fromDate">
    /// From date used to find the record.
    /// </param>
    /// <param name="_toDate">
    /// To date used to find the record.
    /// </param>
    /// <param name="_recId">
    /// RecId used to find the record.
    /// </param>
    /// <returns>
    /// True if record exists otherwise false.
    /// </returns>
    private static boolean existDateInInterval(TaxWithholdCode   _taxWithholdCode,
                                                      TransDate         _fromDate,
                                                      TransDate         _toDate,
                                                      recId             _recId)
    {
        TaxWithholdConcessionTable_IN   taxWithholdConcessionTable;
        boolean                         ret = false;

        if (_taxWithholdCode)
        {
            while select FromDate, ToDate from taxWithholdConcessionTable
                  index hint ConcessionIdx
                  where taxWithholdConcessionTable.TaxWithholdCode   == _taxWithholdCode
                     && taxWithholdConcessionTable.RecId             != _recId
            {
                if (!_fromDate || !_toDate)
                {
                    ret = true;
                }

                if (_fromDate  >= taxWithholdConcessionTable.FromDate  &&
                    _fromDate  <= taxWithholdConcessionTable.ToDate    ||
                    _toDate    >= taxWithholdConcessionTable.FromDate  &&
                    _toDate    <= taxWithholdConcessionTable.ToDate)
                {
                    ret = true;
                }

                if (taxWithholdConcessionTable.FromDate >= _fromDate    &&
                    taxWithholdConcessionTable.FromDate <= _toDate      ||
                    taxWithholdConcessionTable.ToDate   >= _fromDate    &&
                    taxWithholdConcessionTable.ToDate   <= _toDate)
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdConcessionTable_IN</c> record exists or not for specified parameters.
    /// </summary>
    /// <param name="_taxWithholdCode">
    /// Tax code used to check the record.
    /// </param>
    /// <param name="_fromDate">
    /// From date used to check the record.
    /// </param>
    /// <param name="_toDate">
    /// To date used to check the record.
    /// </param>
    /// <param name="_recId">
    /// RecId used to check the record.
    /// </param>
    /// <returns>
    /// True if record exists otherwise false.
    /// </returns>
    private static boolean existDateInterval(TaxWithholdCode _taxWithholdCode,
                                                    TransDate       _fromDate,
                                                    TransDate       _toDate,
                                                    recId           _recId)
    {
        return (select firstonly RecId from taxWithholdConcessionTable_IN
                    index hint ConcessionIdx
                    where taxWithholdConcessionTable_IN.TaxWithholdCode  == _taxWithholdCode
                       && taxWithholdConcessionTable_IN.FromDate         == _fromDate
                       && taxWithholdConcessionTable_IN.ToDate           == _toDate
                       && taxWithholdConcessionTable_IN.RecId            != _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdConcessionTable_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdConcessionTable_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdConcessionTable_IN find(RefRecId            _recId,
                                                     boolean             _forupdate        = false,
                                                     ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdConcessionTable_IN taxWithholdConcessionTable;

        taxWithholdConcessionTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdConcessionTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdConcessionTable
            where taxWithholdConcessionTable.RecId == _recId;

        return taxWithholdConcessionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxWithholdCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdConcessionTable_IN</c> table for the specified parameters.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code used to find the record.
    /// </param>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdConcessionTable_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public TaxWithholdConcessionTable_IN findByTaxWithholdCode(TaxWithholdCode       _taxCode,
                                                                      TaxWithholdType_IN    _taxType,
                                                                      boolean               _forUpdate = false)
    {
        TaxWithholdConcessionTable_IN   taxWithholdConcessionTable;

        if (_taxCode)
        {
            if (_forUpdate)
            {
                taxWithholdConcessionTable.selectForUpdate(_forUpdate);
            }
            select firstonly taxWithholdConcessionTable
                index hint ConcessionIdx
                where taxWithholdConcessionTable.TaxWithholdCode == _taxCode
                   && taxWithholdConcessionTable.TaxType         == _taxType;
        }
        return taxWithholdConcessionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.HeaderId = newGuid();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.HeaderId)
        {
            this.HeaderId = newGuid();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63782</DeveloperDocumentation>
	<FormRef>TaxWithholdConcessionTable_IN</FormRef>
	<Label>@GLS5484</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TaxWithholdCode</TitleField1>
	<TitleField2>TaxType</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxWithholdConcessionCertTable_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWithholdConcessionCertTable_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS30289</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Section</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Remark</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS24050</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Remark</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdRemark_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Section</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdSection_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS35904</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>HeaderId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ConcessionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<SourceEDT>TaxWithholdCode</SourceEDT>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>