<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustEinvoiceIntegration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustEinvoiceIntegration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAddress</Name>
				<Source><![CDATA[
    display Addressing getAddress()
    {
        return this.invokeIntegrationTableMethod(tablemethodstr(CustTable, address));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCity</Name>
				<Source><![CDATA[
    display LogisticsAddressCityName getCity()
    {
        LogisticsPostalAddress logisticsPostalAddress;
        logisticsPostalAddress = this.invokeIntegrationTableMethod(tablemethodstr(CustTable, postalAddress));
        return logisticsPostalAddress.City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountry</Name>
				<Source><![CDATA[
    display AddressCountryRegionId getCountry()
    {
        return this.invokeIntegrationTableMethod(tablemethodstr(CustTable, countryName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail</Name>
				<Source><![CDATA[
    display Email getEmail()
    {
        return this.invokeIntegrationTableMethod(tablemethodstr(CustTable, email));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyId</Name>
				<Source><![CDATA[
    display TempStr getKeyId()
    {
        DictTable dictTable;
        DictIndex dictIndex;
        Common    common;
        TempStr   tempStr;
        fieldId   fieldId;

        if (this.RecId && this.IntTableId && this.IntRecId)
        {
            dictTable   = new DictTable(this.IntTableId);
            common      = dictTable.makeRecord();

            select common
                where common.RecId   == this.IntRecId;

            if (common.RecId)
            {
                dictIndex = dictTable.indexObject(dictTable.primaryIndex());
                if (! dictIndex)
                {
                    dictIndex = new DictIndex(common.TableId, dictTable.indexUnique());
                }
                if (! dictIndex)
                {
                    dictIndex = new DictIndex(common.TableId, dictTable.indexNext(0));
                }

                if (dictIndex)
                {
                    fieldId   = dictIndex.field(1);
                    tempStr = strfmt("%1",common.(fieldId));
                }
            }
        }
        return tempStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    display Name getName()
    {
        return this.invokeIntegrationTableMethod(tablemethodstr(CustTable, name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhone</Name>
				<Source><![CDATA[
    display Phone getPhone()
    {
        return this.invokeIntegrationTableMethod(tablemethodstr(CustTable, phone));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getZipCode</Name>
				<Source><![CDATA[
    display AddressZipCodeId getZipCode()
    {
        LogisticsPostalAddress logisticsPostalAddress;
        logisticsPostalAddress = this.invokeIntegrationTableMethod(tablemethodstr(CustTable, postalAddress));
        return logisticsPostalAddress.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeIntegrationTableMethod</Name>
				<Source><![CDATA[
    private anytype invokeIntegrationTableMethod(SysMethodName _methodName)
    {
        SysDictTable    dictTable;
        Common          common;
        anytype         ret;

        if (this.RecId && this.IntTableId && this.IntRecId)
        {
            dictTable   = new SysDictTable(this.IntTableId);

            if (dictTable.isMethodActual(_methodName))
            {
                common      = dictTable.makeRecord();
                select firstonly common
                    where common.RecId   == this.IntRecId;

                if (common.RecId)
                {
                    ret = dictTable.callObject(_methodName, common);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustEinvoiceIntegration</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>CustEinvoiceIntegration</c> table.
    /// </returns>
    static CustEinvoiceIntegration find(
        recId               _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)

    {
        CustEinvoiceIntegration integration;

        integration.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            integration.concurrencyModel(_concurrencyModel);
        }
        if (_recId)
        {
            select firstonly integration
                where integration.RecId == _recId;
        }
        return integration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCommon</Name>
				<Source><![CDATA[
    static CustEinvoiceIntegration findByCommon(
        Common                              _common,
        CustEInvoiceIntegrationTypeRecId    _custEinvoiceIntegrationTypeTableRecId,
        boolean                             _forupdate = false)
    {
        CustEinvoiceIntegration integration;

        if (_common.RecId && _custEinvoiceIntegrationTypeTableRecId)
        {
            integration.selectForUpdate(_forupdate);
            select firstonly integration
                where integration.IntTableId                       == _common.TableId
                   && integration.IntRecId                         == _common.RecId
                   && integration.CustEinvoiceIntegrationTypeTable == _custEinvoiceIntegrationTypeTableRecId;
        }
        return integration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRef</Name>
				<Source><![CDATA[
    static CustEinvoiceIntegration findByRef(
        CustEinvoiceIntegrationRef         _integrationRef,
        CustEInvoiceIntegrationTypeRecId   _custEinvoiceIntegrationTypeTableRecId,
        boolean                            _forupdate = false)
    {
        CustEinvoiceIntegration integration;

        if (_integrationRef && _custEinvoiceIntegrationTypeTableRecId)
        {
            integration.selectForUpdate(_forupdate);

            select firstonly integration
                where integration.CustEinvoiceIntegrationTypeTable == _custEinvoiceIntegrationTypeTableRecId
                   && integration.Ref                              == _integrationRef;
        }
        return integration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    static CustEinvoiceIntegration findOrCreate(
        Common                              _common,
        CustEInvoiceIntegrationTypeRecId    _custEinvoiceIntegrationTypeTableRecId,
        CustEinvoiceIntegrationRef          _integrationRef,
        boolean                             _forupdate = false)
    {
        CustEinvoiceIntegration integration;

        if (_integrationRef && _custEinvoiceIntegrationTypeTableRecId)
        {
            integration.selectForUpdate(_forupdate);
            select firstonly integration
                where integration.CustEinvoiceIntegrationTypeTable == _custEinvoiceIntegrationTypeTableRecId
                   && integration.Ref                              == _integrationRef;
        }
        if (!integration.RecId)
        {
            if (!_common.RecId)
            {
                info(strfmt("@SYS119600",(_common.TableId ? tableid2name(_common.TableId) : int2str(_common.TableId)),
                                          _custEinvoiceIntegrationTypeTableRecId, _integrationRef));
            }
            else
            {
                if (!_custEinvoiceIntegrationTypeTableRecId)
                {
                    info(strfmt("@SYS119598",_common.TableId,_common.RecId));
                }
                if (!_integrationRef)
                {
                    info(strfmt("@SYS119599",_common.TableId,_common.RecId));
                }
                else
                {
                    integration.IntTableId                          = _common.TableId;
                    integration.IntRecId                            = _common.RecId;
                    integration.CustEinvoiceIntegrationTypeTable    = _custEinvoiceIntegrationTypeTableRecId;
                    integration.Ref                                 = _integrationRef;
                    integration.insert();
                }
            }
        }
        return integration;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankElectronicBanking</ConfigurationKey>
	<CountryRegionCodes>NO</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123647</DeveloperDocumentation>
	<Label>@SYS119497</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>IntTableId</TitleField1>
	<TitleField2>IntRecId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TypeRefIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustEinvoiceIntegrationTypeTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ref</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustEinvoiceIntegrationTypeTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ref</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Id</Name>
			<Label>@SYS5468</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustEinvoiceIntegrationTypeTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Ref</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS36398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>getAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@SYS22564</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustEinvoiceIntegrationTypeTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>getAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustEinvoiceIntegrationTypeTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustEInvoiceIntegrationTypeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtRef</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustEinvoiceIntegrationExtRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Ref</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustEinvoiceIntegrationRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS119530</Label>
			<EnumType>CustEinvoiceIntegrationStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IntIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>IntTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustEinvoiceIntegrationTypeTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Ref</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeRefIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustEinvoiceIntegrationTypeTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Ref</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustEinvoiceIntegrationTypeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustEinvoiceIntegrationTypeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustEinvoiceIntegrationType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustEinvoiceIntegration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustEinvoiceIntegrationTypeTable</Name>
					<Field>CustEinvoiceIntegrationTypeTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsCustTableOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsCustEinvoiceIntegrationOf</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntTableId</Name>
					<Field>IntTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntRecId</Name>
					<Field>IntRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>