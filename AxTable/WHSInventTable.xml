<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isItemWHSAndCatchWeightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the items is enabled for warehouse management processes and is catch weight enabled.
    /// </summary>
    /// <param name = "_itemId">The item id.</param>
    /// <returns>true if the items is enabled for warehouse management processes and is catch weight enabled; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean isItemWHSAndCatchWeightEnabled(ItemId _itemId)
    {
        if (!WHSInventTable::exist(_itemId))
        {
            return false;
        }

        return PdsGlobal::pdsIsCWItem(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixLoadForLocation</Name>
				<Source><![CDATA[
    private void fixLoadForLocation()
    {
        WHSLocationLoad::fixLoadForLocations(
            WHSLocationLoad::locationsToFixOnWHSInventTableWrite(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHarmonizedCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the item harmonized code.
    /// </summary>
    /// <returns>
    /// The item harmonized code.
    /// </returns>
    display WHSHarmonizedCode displayHarmonizedCode()
    {
        return WHSEcoResProductTransportationCodes::findByItemId(this.ItemId).HarmonizedCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNMFCCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the item NMFC code.
    /// </summary>
    /// <returns>
    /// The item NMFC code.
    /// </returns>
    display WHSNMFCCode displayNMFCCode()
    {
        return WHSEcoResProductTransportationCodes::findByItemId(this.ItemId).nmfcCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySTCCCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the item STCC code.
    /// </summary>
    /// <returns>
    /// The item STCC code.
    /// </returns>
    display WHSSTCCCode displaySTCCCode()
    {
        return WHSEcoResProductTransportationCodes::findByItemId(this.ItemId).stccCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>WHSInventTable</c> table.
    /// </summary>
    public void insert()
    {
        ttsbegin;
        this.FilterChanged = true;

        this.fixLoadForLocation();
        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds largest UOM of the item.
    /// </summary>
    /// <param name="_whsInventTable">
    /// The record containing item information.
    /// </param>
    /// <returns>
    /// The largest UOM id of the item.
    /// </returns>
    display UnitOfMeasureSymbol maxUOM(WHSInventTable _whsInventTable)
    {
        return WHSUOMSeqGroupTable::getMaxUOM(_whsInventTable.ItemId).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterCodeFieldIds</Name>
				<Source><![CDATA[
    private container filterCodeFieldIds()
    {
        container filterCodeFieldIds = [fieldNum(WHSInventTable, FilterCode)];

        for (int i = 1; i <= dimOf(this.FilterCode); i++)
        {
            filterCodeFieldIds += new SysDictField(tableNum(WHSInventTable), fieldNum(WHSInventTable, FilterCode), i).id();
        }

        return filterCodeFieldIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            // [field that needs defaulting,
            //      [fields that affect the default value]]

            [fieldNum(WHSInventTable, FilterGroup),
                this.filterCodeFieldIds()]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WHSInventTable, FilterGroup):
                if (this.RecId)
                {
                    this.setGroupCode(InventItemGroupItem::findByItemIdLegalEntity(this.ItemId).ItemGroupId);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set group code
    /// </summary>
    /// <param name="_itemGroupId">
    /// The Item group ID
    /// </param>
    public void setGroupCode(ItemGroupId _itemGroupId)
    {
        WHSFilter               filter;
        WHSFilterUsedForGroup   filterUsedForGroup;
        WHSFilterTable          filterTable;
        WHSFilterGroupTable     filterGroupTable;

        if (_itemGroupId)
        {
            filterUsedForGroup = WHSFilterParm::find(_itemGroupId).FilterUsedForGroup;

            filter = new WHSFilter();
            filterTable = filter.findBestMatch(filterGroupTable.TableId,
                                               _itemGroupId,
                                               this.FilterCode,
                                               filterUsedForGroup);

            filterGroupTable = WHSFilterGroupTable::findByRecId(filterTable.RefRecId);

            this.FilterGroup = filterGroupTable.FilterGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>WHSInventTable</c> table.
    /// </summary>
    public void update()
    {
        ttsbegin;

        if (this.orig().FilterCode != this.FilterCode ||
            InventItemGroupItem::findByItemIdLegalEntity(this.orig().ItemId).ItemGroupId != InventItemGroupItem::findByItemIdLegalEntity(this.ItemId).ItemGroupId)
        {
            this.FilterChanged = true;
        }

        this.fixLoadForLocation();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates <c>WHSInventTable</c> table fields.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The field ID to be validated.
    /// </param>
    /// <returns>
    /// True if the field is valid; false, otherwise.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (fieldExt2Id(_fieldIdToCheck))
            {
                case fieldNum(WHSInventTable, uomSeqGroupId):
                    if (this.RecId && this.uomSeqGroupId)
                    {
                        ret = WHSUOMSeqGroupTable::validateSequenceGroupForItem(this.ItemId, this.UOMSeqGroupId);
                    }
                    break;

                case fieldNum(WHSInventTable, FilterCode):
                    ret = this.validateFilterCodeField();
                    break;

                case fieldNum(WHSInventTable, PickWCNeg):
                    if (this.PickWCNeg)
                    {
                        if (InventModelGroupItem::findByItemIdLegalEntity(this.ItemId) && !InventTable::find(this.ItemId).whsAllowPhysNeg())
                        {
                            ret = checkFailed("@WAX3923");
                        }
                    }
                    break;

                case fieldNum(WHSInventTable, CatchWeightItemHandlingPolicyName):
                    ret = this.validateCatchWeightItemHandlingPolicyName();
                    break;
            }
        }

        ret = ret && this.validateCrossCompany(tableMethodStr(WHSInventTable, validateField), _fieldIdToCheck);
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFilterCodeField</Name>
				<Source><![CDATA[
    private boolean validateFilterCodeField()
    {
        boolean ret = true;
        WHSFilterWildcard wildcard = WHSParameters::find().FilterWildcard;
        if (wildcard)
        {
            for (int dimIdx = 1; dimIdx <= dimOf(this.FilterCode); ++dimIdx)
            {
                if (this.FilterCode[dimIdx] == wildcard)
                {
                    ret = checkFailed("@WAX1005");
                    break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightItemHandlingPolicyName</Name>
				<Source><![CDATA[
    private boolean validateCatchWeightItemHandlingPolicyName()
    {
        boolean ret = true;

        if (this.RecId && InventSum::hasOpenInventoryQuantity(this.ItemId))
        {
            WHSCatchWeightItemHandlingPolicy origPolicy = WHSCatchWeightItemHandlingPolicy::find(this.orig().CatchWeightItemHandlingPolicyName);
            WHSCatchWeightItemHandlingPolicy newPolicy  = WHSCatchWeightItemHandlingPolicy::find(this.CatchWeightItemHandlingPolicyName);

            if (origPolicy.CatchWeightTagTracking != newPolicy.CatchWeightTagTracking && newPolicy.CatchWeightTagTracking)
            {
                info("@WAX:ChangeCWPolicyError");

                WHSCatchWeightTelemetryLogger::logPolicyNameChangedForItemWithOpenInventory(funcName(), this.ItemId, origPolicy.RecId, newPolicy.RecId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemGorupFilterParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that all required filter codes are set on the item based on itemGroup setup.
    /// </summary>
    /// <param name="_itemGroupId">
    /// The item group Id of the item being validated.
    /// </param>
    /// <returns>
    /// true if all required filter codes are filled; otherwise, false.
    /// </returns>
    public boolean validateItemGorupFilterParm(ItemGroupId _itemGroupId)
    {
        WHSFilterParm       filterParm;
        int                 dimIdx;
        boolean             ret = true;

        filterParm = WHSFilterParm::find(_itemGroupId);

        for (dimIdx = 1; dimIdx <= dimOf(this.FilterCode); ++dimIdx)
        {
            if (filterParm.FilterRequired[dimIdx] == NoYes::Yes
            &&  this.FilterCode[dimIdx] == '')
            {
                ret = checkFailed("@WAX980");
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <c>WHSInventTable</c> record can be saved.
    /// </summary>
    /// <returns>
    ///    true if the record can be saved: otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ok = super();

        ok = this.validateInventTableRecord(ok, true);
              
        if (ok
        &&  this.CatchWeightItemHandlingPolicyName
        &&  !InventTable::find(this.ItemId).productHasCWSetup())
        {
            ok = checkFailed("@WAX:CatchWeightItemHandlingPoliciesCanNotBeAppliedToNonCatchWeightItems");
        }

        ok = ok && this.validateCrossCompany(tableMethodStr(WHSInventTable, validateWrite), 0, ok);
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateCrossCompany(str _methodName, FieldId _fieldIdToCheck = 0, boolean _result = false)
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
            if (policy.RecId && policy.IsEnabled)
            {
                Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
                QueryRun    queryRun = new QueryRun(query);
        
                while (queryRun.Next())
                {
                    WHSInventTable companyWHSInventTable = queryRun.get(this.TableId);
                    DataAreaId company = companyWHSInventTable.DataAreaId;
                    if (companyWHSInventTable && company && company != curExt())
                    {
                        changecompany(company)
                        {
                            WHSInventTable whsInventTable = WHSInventTable::find(companyWHSInventTable.ItemId, true);
                            if (whsInventTable.RecId)
                            {
                                buf2Buf(this, whsInventTable);

                                switch (_methodName)
                                {
                                    case tableMethodStr(WHSInventTable, validateWrite):
                                        if (!whsInventTable.validateInventTableRecord(_result))
                                        {
                                            return false;
                                        }
                                        break;

                                    case tableMethodStr(WHSInventTable, validateField):
                                        if (_fieldIdToCheck == fieldNum(WHSInventTable, FilterCode)
                                            && !whsInventTable.validateFilterCodeField())
                                        {
                                            return false;
                                        }
                                        break;

                                    default:
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <c>WHSInventTable</c> record can be saved.
    /// </summary>
    /// <param name="ok">
    /// The parameter of type <c>boolean</c>.
    /// </param>
    /// <param name="setWarningMessage">
    /// The parameter of type <c>boolean</c>.
    /// </param>
    /// <returns>
    ///    true if the record can be saved: otherwise, false.
    /// </returns>
    public boolean validateInventTableRecord(boolean ok, boolean setWarningMessage = true)
    {
        Object                  formDataSource;
        ItemGroupId             itemGroupId;

        if (!this.RecId)
        {
            var storageDimensionGroup = EcoResStorageDimensionGroup::find(InventTable::find(this.ItemId).storageDimensionGroup());

            if (!storageDimensionGroup.IsWarehouseWHSEnabled)
            {
                // Set warning message only if the flag is true.
                // This is done to avoid any warning errors, if this check is performed via a class method.
                if (setWarningMessage)
                {
                    ok = checkFailed("@SCM:CannotSetWarehouseManagementInfoForNonWHSItems");
                }
                else
                {
                    ok = false;
                }
            }
        }

        if (ok)
        {
            if (FormDataUtil::isFormDataSource(this) && FormDataUtil::getFormDataSource(this))
            {
                formDataSource = FormDataUtil::getFormDataSource(this);
                if (formDataSourceHasMethod(formDataSource, identifierStr(whsGetItemGroupId)))
                {
                    itemGroupId = formDataSource.whsGetItemGroupId();
                }
                else
                {
                    itemGroupId = InventItemGroupItem::findByItemIdLegalEntity(this.ItemId).ItemGroupId;
                }
            }
            else
            {
                itemGroupId = InventItemGroupItem::findByItemIdLegalEntity(this.ItemId).ItemGroupId;
            }

            if (itemGroupId)
            {
                ok = this.validateItemGorupFilterParm(itemGroupId);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUOMSequenceGroupString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a pipe-delimited string containing sequence group unit values.
    /// </summary>
    /// <param name="_showBlank">
    ///     A Boolean value to indicate whether a blank value should be included in the list of available options.
    /// </param>
    /// <returns>
    ///     Returns a pipe-delimited string containing sequence group unit values.
    /// </returns>
    public str buildUOMSequenceGroupString(
        boolean _showBlank)
    {
        WHSUOMSeqGroupLine  uomSeqGroupLine;
        boolean             first = true;
        str                 elements;

        if (_showBlank)
        {
            elements = '||';
        }

        if (this.ItemId)
        {
            while select UnitId
                from uomSeqGroupLine
                order by LineNum
                where uomSeqGroupLine.uomSeqGroupId == this.uomSeqGroupId
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    elements += '||';
                }

                elements += uomSeqGroupLine.UnitId;
            }
        }

        return elements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCycleCountUOMSequenceGroupString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a pipe-delimited string containing sequence group unit values used for cycle counting.
    /// </summary>
    /// <returns>
    /// Returns a pipe-delimited string containing sequence group unit values used for cycle counting.
    /// </returns>
    public str buildCycleCountUOMSequenceGroupString()
    {
        WHSUOMSeqGroupLine  uomSeqGroupLine;
        boolean             first = true;
        str                 elements;

        while select UnitId from uomSeqGroupLine
            order by LineNum
            where uomSeqGroupLine.uomSeqGroupId == this.uomSeqGroupId
            &&    uomSeqGroupLine.CycleCountUOM == NoYes::Yes
        {
            if (first)
            {
                first = false;
            }
            else
            {
                elements += '||';
            }

            elements += uomSeqGroupLine.UnitId;
        }
        
        return elements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container from lowest to highest (ie. EA, CS, PL)
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>WHSInventTable</c> to get data.
    /// </param>
    /// <param name="_qty">
    /// The quantity
    /// </param>
    /// <param name="_uom">
    /// The ID of the unit
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value which is used to resolve the proper product variant or distinct product reference.
    /// </param>
    /// <returns>
    /// A container from lowest to highest (ie. EA, CS, PL)
    /// </returns>
    public static container buildQty(ItemId _itemId, Qty _qty, UnitOfMeasureSymbol _uom, InventDimId _inventDimId = '')
    {
        container   qtyContainer;
        int         pos;

        var inventQty = WHSCatchWeightHelper::convertInventQuantity(_itemId, _uom, _qty, _inventDimid);

        var enumerator = WHSUOMSeqGroupLineConversionEnumerator::constructLowestToHighestEnumerator(_itemId,
                                                                                                    _inventDimId,
                                                                                                    WHSCatchWeightHelper::inventHandlingUnitId(_itemId));

        while (enumerator.moveNext())
        {
            pos++;
            var tmpQty = enumerator.convertWithCurrent(inventQty);
            container tmpCont = [enumerator.currentUnitId(), tmpQty];
            qtyContainer = conIns(qtyContainer, pos, tmpCont);
        }

        return qtyContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captureSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines when serial dimension is captured for warhouse processes
    /// </summary>
    /// <param name="_itemId">
    /// The item being evaluated for when to capture serial dimension values.
    /// </param>
    /// <returns>
    /// Value determining when serial dimensions are captured.
    /// </returns>
    public static WHSRFWhenToCapture captureSerial(ItemId _itemId)
    {
        WHSRFWhenToCapture  ret;

        InventTable inventTable = InventTable::find(_itemId);
        boolean serialActive    = inventTable.isItemSerialNumberActivated();

        if (serialActive || inventTable.isSalesProcessSerialActive())
        {
            WHSWhenToCapture whenToCapture = EcoResTrackingDimensionGroup::find(inventTable.trackingDimensionGroup()).CaptureSerial;

            switch (whenToCapture)
            {
                case WHSWhenToCapture::None:
                    if (serialActive)
                    {
                        ret = WHSRFWhenToCapture::Receiving;
                    }
                    break;

                case WHSWhenToCapture::Picking:
                    ret = WHSRFWhenToCapture::Picking;
                    break;

                case WHSWhenToCapture::Packing:
                    ret = WHSRFWhenToCapture::Packing;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSInventTable</c> table from the item ID
    /// </summary>
    /// <param name="_itemId">
    /// The item ID that is used to create a record of the <c>WHSInventTable</c>.
    /// </param>
    public static void createFromItemId(ItemId _itemId)
    {
        WHSInventTable  whsInventTable;

        if (!WHSInventTable::exist(_itemId))
        {
            ttsbegin;

            whsInventTable.ItemId = _itemId;

            whsInventTable.insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>WHSInventTable</c> table exists.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>WHSInventTable</c> to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(ItemId _itemId)
    {
        return _itemId &&
               (select firstonly RecId from whsInventTable
                    where whsInventTable.ItemId == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSInventTable</c> table.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>WHSInventTable</c> to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WHSInventTable</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSInventTable find(ItemId _itemId, boolean _forupdate = false)
    {
        WHSInventTable  whsInventTable;

        if (_itemId)
        {
            whsInventTable.selectForUpdate(_forupdate);

            select firstonly whsInventTable
                where whsInventTable.ItemId == _itemId;
        }

        return whsInventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPackingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates default packing quantity of an item.
    /// </summary>
    /// <param name="_itemId">
    /// Id of the item.
    /// </param>
    /// <param name="_inventDimId">
    /// The parameter of type <c>InventDimId</c>.
    /// </param>
    /// <returns>
    /// The default packing quantity of the item.
    /// </returns>
    public static WHSPackingQty getDefaultPackingQty(ItemId _itemId, InventDimId _inventDimId = '')
    {
        UnitOfMeasureSymbol highestUOM;
        InventTable         inventTable;
        EcoResReleasedProductUnitConverter      releasedProductUnitConverter;
        real                                    whsPackingQty = 0;

        inventTable = InventTable::find(_itemId);
        releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        //Calculate the packing quantity if the isProductVariantUnitConversionEnabled is not set
        //or if it is set and an InventDimCombination record can be retrieved based on the current data
        if (!inventTable.isProductVariantUnitConversionEnabled()
            || releasedProductUnitConverter.canResolveProductVariant(_itemId, InventDim::find(_inventDimId)))
        {
            // Get the largest unit of measure for the item based off its UOM sequence group
            highestUOM = WHSUOMSeqGroupTable::getMaxUOM(_itemId).UnitId;

            InventHandlingUnitId handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

            whsPackingQty = releasedProductUnitConverter.convert(1,
                                                UnitOfMeasure::unitOfMeasureIdBySymbol(highestUOM),
                                                UnitOfMeasure::unitOfMeasureIdBySymbol(handlingUnitId),
                                                NoYes::No,
                                                _itemId,
                                                _inventDimId,
                                                NoYes::No);
        }

        return whsPackingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHighestUnitQtyByUOMSeqGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the quantity to the highest unit of measure that doesn't leave a remainder.
    /// </summary>
    /// <param name="_itemId">
    /// An Item Id that determines the UOM sequence group and UOM conversions.
    /// </param>
    /// <param name="_qty">
    /// The quantity being converted.
    /// </param>
    /// <param name="_unitId">
    /// The unit of measure the quantity is currently in.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value which is used to resolve the proper product variant or distinct product reference.
    /// </param>
    /// <returns>
    /// A container where the first value is the converted qty and the second value being the unit of measure the qty was converted to.
    /// </returns>
    public static container getHighestUnitQtyByUOMSeqGroup(
        ItemId                  _itemId,
        Qty                     _qty,
        UnitOfMeasureSymbol     _unitId,
        InventDimId             _inventDimId = ''
        )
    {
        return WHSUOMSeqGroupQtyUnitCalculator::newFromItemQtyDimensionAndUnitId(_itemId, _qty, _inventDimId, _unitId)
            .determineHighestUOMWithNoDecimal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHighestCommonUnitQtyByUOMSeqGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a pair of quantities to the highest unit of measure that doesn't leave a remainder for both of them.
    /// </summary>
    /// <param name="_itemId">
    /// An Item Id that determines the UOM sequence group and UOM conversions.
    /// </param>
    /// <param name="_qty1">
    /// The first quantity being converted.
    /// </param>
    /// <param name="_qty2">
    /// The second quantity being converted.
    /// </param>
    /// <param name="_unitId">
    /// The unit of measure the quantities are currently in.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value which is used to resolve the proper product variant or distinct product reference.
    /// </param>
    /// <returns>
    /// A container where the first value is the converted value of the first qty,
    /// the second the converted value of the second quantity,
    /// and the third value the unit of measure the quantities were converted to.
    /// </returns>
    public static container getHighestCommonUnitQtyByUOMSeqGroup(
        ItemId                  _itemId,
        Qty                     _qty1,
        Qty                     _qty2,
        UnitOfMeasureSymbol     _unitId,
        InventDimId             _inventDimId = ''
        )
    {
        if (_qty1 != 0 && _qty2 != 0)
        {
            if (_itemId)
            {
                InventHandlingQty handlingQty1 = WHSCatchWeightHelper::convertInventQuantity(_itemId, _unitId, _qty1, _inventDimId);
                InventHandlingQty handlingQty2 = WHSCatchWeightHelper::convertInventQuantity(_itemId, _unitId, _qty2, _inventDimId);

                var enumerator = WHSUOMSeqGroupLineConversionEnumerator::constructHighestToLowestEnumerator(_itemId,
                                                                                                            _inventDimId,
                                                                                                            WHSCatchWeightHelper::inventHandlingUnitId(_itemId));

                while (enumerator.moveNext())
                {
                    // If the UOM can be converted to and still result in a whole number for both quantities then we use that UOM.
                    Qty tmpQty1 = enumerator.convertWithCurrent(handlingQty1);

                    if (!frac(tmpQty1) > 0)
                    {
                        Qty tmpQty2 = enumerator.convertWithCurrent(handlingQty2);

                        if (!frac(tmpQty2) > 0)
                        {
                            return [tmpQty1, tmpQty2, enumerator.currentUnitId()];
                        }
                    }
                }
            }
        }

        return [_qty1, _qty2, _unitId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a string and returns the associated ItemId
    /// </summary>
    /// <param name="_getItemId">
    /// String that holds the item ID
    /// </param>
    /// <returns>
    /// The item ID of the <c>WHSInventTable</c>
    /// </returns>
    public static ItemId getItemId(str 80 _getItemId)
    {
        InventTable          inventTable;
        InventItemBarcode    inventItemBarcode;
        CustVendExternalItem custVendExternalItem;
        InventItemGTIN       inventItemGTIN;

        if (_getItemId)
        {
            select firstonly ItemId from inventTable
                 where inventTable.ItemId == _getItemId;

            if (!inventTable)
            {
                select firstOnly ItemId from inventTable
                    where inventTable.NameAlias == _getItemId;
            }

            if (inventTable)
            {
                return inventTable.ItemId;
            }

            select firstonly ItemId from inventItemBarcode
                where inventItemBarcode.ItemBarCode == _getItemId;

            if (inventItemBarcode)
            {
                return inventItemBarcode.ItemId;
            }

            select firstonly ExternalItemId from custVendExternalItem
                where custVendExternalItem.ExternalItemId == _getItemId;

            if (custVendExternalItem)
            {
                return custVendExternalItem.ItemId;
            }

            inventItemGTIN = InventItemGTIN::findGTINNumeric(str2num(_getItemId));

            if (inventItemGTIN)
            {
                return inventItemGTIN.ItemId;
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasConversionFactors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the unit of an item can be converted to other units defined in the UOM sequence of the item.
    /// </summary>
    /// <param name="_itemId">
    /// Id of the item.
    /// </param>
    /// <param name="_inventDimId">
    /// The parameter of type <c>InventDimId</c>.
    /// </param>
    /// <returns>
    /// True if the unit can be converted.
    /// </returns>
    public static boolean hasConversionFactors(ItemId _itemId, InventDimId _inventDimId = '')
    {
        boolean          ret = true;
        WHSUOMSeqGroupId seqGroupId = WHSInventTable::find(_itemId).uomSeqGroupId;

        if (seqGroupId)
        {
            InventHandlingUnitId handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);
            EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
            
            WHSUOMSeqGroupLine  seqGroupLine;

            while select UnitId from seqGroupLine
                where seqGroupLine.uomSeqGroupId == seqGroupId
            {
                ret = releasedProductUnitConverter.canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(handlingUnitId),
                                                             UnitOfMeasure::unitOfMeasureIdBySymbol(seqGroupLine.UnitId),
                                                             _itemId,
                                                             _inventDimId);

                if (!ret)
                {
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPotentialProdPickOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method determines whether or not the current <c>WHSRawMaterialPolicy</c> should be overridden from picked to reserved.
    /// </summary>
    /// <param name="_itemId">
    /// The current item being executed.
    /// </param>
    /// <param name="_rawMaterialPolicy">
    /// The current <c>WHSRawMaterialPolicy</c> set up.
    /// </param>
    /// <returns>
    /// Returns true if <c>WHSRawMaterialPolicy</c> should be overridden to reserved, false otherwise.
    /// </returns>
    public static boolean isPotentialProdPickOverride(ItemId _itemId, WHSRawMaterialPolicy _rawMaterialPolicy)
    {
        return (_rawMaterialPolicy == WHSRawMaterialPolicy::Pick
            && WHSInventTable::isSerialCapturedDuringPackingAndRegisteredAtConsumption(_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialCapturedDuringPackingAndRegisteredAtConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the serial number of the item is captured during the Packing Step and if the item is
    /// registered at consumption.
    /// </summary>
    /// <param name = "_itemId">The item id to make the check for.</param>
    /// <returns>True if the serial number for the item is to be captured at packing during consumption, false otherwise.</returns>
    public static boolean isSerialCapturedDuringPackingAndRegisteredAtConsumption(ItemId _itemId)
    {
        return EcoResTrackingDimensionGroup::find(InventTable::find(_itemId).trackingDimensionGroup()).CaptureSerial == WHSWhenToCapture::Packing
           && EcoResTrackingDimensionGroupItem::isItemActiveSerialAtConsumption(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightTagTracked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item is catch weight tag tracked.
    /// </summary>
    /// <param name = "_itemId">
    /// The item to validate.
    /// </param>
    /// <returns>
    /// True if the item is catch weight tag tracked; false, otherwise.
    /// </returns>
    [Hookable(false)]
    internal static boolean isCatchWeightTagTracked(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).CatchWeightTagTracking == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCaptureCatchWeightTagsPerCatchWeightUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item must capture catch weight tags per catch weight unit.
    /// </summary>
    /// <param name = "_itemId">The item to validate.</param>
    /// <param name = "_menuItemName">Menu item name to validate.</param>
    /// <returns>True if the item must capture catch weight tags per catch weight unit; false, otherwise.</returns>
    [Hookable(false)]
    internal static boolean mustCaptureCatchWeightTagsPerCatchWeightUnit(ItemId _itemId, WHSMenuItemName _menuItemName)
    {
        return WHSInventTable::isCatchWeightTagTracked(_itemId)
            && (!WHSRFMenuItemTable::find(_menuItemName).GenerateCatchWeightTag
            || !WHSInventTable::shouldCaptureAggregateWeight(_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inboundCatchWeightTagCapturingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inbound tag weight capture method for the catch weight item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item to fetch the inbound tag weight capture method.
    /// </param>
    /// <returns>
    /// Returns the inbound tag weight capture method.
    /// </returns>
    [Hookable(false)]
    internal static WHSInboundCatchWeightTagCapturingMethod inboundCatchWeightTagCapturingMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).InboundCatchWeightTagCapturingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundCatchWeightTagCapturingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the outbound tag capturing method for the catch weight item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item for which to fetch the outbound catch weight tag capturing method.
    /// </param>
    /// <returns>
    /// Returns the outbound catch weight tag capturing method.
    /// </returns>
    [Hookable(false)]
    internal static WHSOutboundCatchWeightTagCapturingMethod outboundCatchWeightTagCapturingMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).OutboundCatchWeightTagCapturingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inboundWeightCapturingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inbound weight capture method for the catch weight item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item to fetch the inbound weight capture method.
    /// </param>
    /// <returns>
    /// Returns the inbound weight capture method.
    /// </returns>
    [Hookable(false)]
    internal static WHSInboundWeightCapturingMethod inboundWeightCapturingMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).InboundWeightCapturingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCaptureAggregateWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if aggregate weight should be captured for the item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item to determine the inbound weight capture method.
    /// </param>
    /// <returns>
    /// True if aggregate weight should be captured; otherwise False.
    /// </returns>
    [Hookable(false)]
    internal static boolean shouldCaptureAggregateWeight(ItemId _itemId)
    {
        boolean ret;
        WHSCatchWeightItemHandlingPolicy itemHandlingPolicy = WHSInventTable::catchWeightItemHandlingPolicy(_itemId);

        if (itemHandlingPolicy.CatchWeightTagTracking)
        {
            ret = itemHandlingPolicy.InboundCatchWeightTagCapturingMethod == WHSInboundCatchWeightTagCapturingMethod::DistributeAverageWeight;
        }
        else
        {
            ret = itemHandlingPolicy.InboundWeightCapturingMethod == WHSInboundWeightCapturingMethod::PerReceivingEvent;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesOrderWeightCapturingProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the outbound sales order weight capturing process for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item whose outbound sales order weight capturing process is being captured.
    /// </param>
    /// <returns>
    /// Returns the outbound sales order weight capturing process for the item.
    /// </returns>
    [Hookable(false)]
    internal static WHSSalesOrderWeightCapturingProcess salesOrderWeightCapturingProcess(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).SalesOrderWeightCapturingProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferIssueWeightCapturingProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the outbound transfer issue weight capturing process for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item whose outbound transfer issue weight capturing process is being captured.
    /// </param>
    /// <returns>
    /// Returns the outbound transfer issue weight capturing process for the item.
    /// </returns>
    [Hookable(false)]
    internal static WHSTransferIssueWeightCapturingProcess transferIssueWeightCapturingProcess(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).TransferIssueWeightCapturingProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundWeightCapturingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine outbound weight capturing method for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item whose outbound weight capturing method is being captured.
    /// </param>
    /// <returns>
    /// Returns the outbound weight capturing method for the item.
    /// </returns>
    [Hookable(false)]
    internal static WHSOutboundWeightCapturingMethod outboundWeightCapturingMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).OutboundWeightCapturingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warehouseTransferWeightCapturingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine warehouse transfer weight capturing method for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The ID of the item for which to retrieve the warehouse transfer weight capturing process.
    /// </param>
    /// <returns>
    /// The warehouse transfer weight capturing method for the item.
    /// </returns>
    [Hookable(false)]
    internal static WHSWarehouseTransferWeightCapturingMethod warehouseTransferWeightCapturingMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).WarehouseTransferWeightCapturingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionPickingWeightCapturingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the production picking weight capturing method for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item whose production picking weight capturing method is being captured.
    /// </param>
    /// <returns>
    /// Returns the production picking weight capturing method for the item.
    /// </returns>
    [Hookable(false)]
    internal static WHSProductionPickingWeightCapturingMethod productionPickingWeightCapturingMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).ProductionPickingWeightCapturingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionWeightCapturingProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the correction weight capturing process for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The ID of the item for which to retrieve the correction weight capturing process.
    /// </param>
    /// <returns>
    /// The correction weight capturing process for the given item.
    /// </returns>
    [Hookable(false)]
    internal static WHSCountingWeightCapturingMethod correctionWeightCapturingProcess(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).CountingWeightCapturingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundWeightVarianceMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the outbound weight variance method for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The ID of the item for which to determine the outbound weight variance method.
    /// </param>
    /// <returns>
    /// The outbound weight variance method for the given item.
    /// </returns>
    [Hookable(false)]
    internal static WHSOutboundWeightVarianceMethod outboundWeightVarianceMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).OutboundWeightVarianceMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cycleCountWeightCapturingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the cycle count weight capturing method for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The ID of the item for which to determine the cycle count weight capturing method.
    /// </param>
    /// <returns>
    /// The cycle count weight capturing method for the given item.
    /// </returns>
    [Hookable(false)]
    internal static WHSCycleCountWeightCapturingMethod cycleCountWeightCapturingMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).CycleCountWeightCapturingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightItemHandlingPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch the catch weight handling policy for a catch weight item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item to determine the policy
    /// </param>
    /// <returns>
    /// Returns a <c>WHSCatchWeightItemHandlingPolicy</c> buffer.
    /// </returns>
    [Hookable(false)]
    internal static WHSCatchWeightItemHandlingPolicy catchWeightItemHandlingPolicy(ItemId _itemId)
    {
        WHSCatchWeightItemHandlingPolicy itemHandlingPolicy;

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            WHSCatchWeightItemHandlingPolicyName policyName = WHSInventTable::find(_itemId).CatchWeightItemHandlingPolicyName;
            itemHandlingPolicy = WHSCatchWeightItemHandlingPolicy::find(policyName);
        }

        return itemHandlingPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementWeightCapturingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the movement weight capturing method for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item whose movement weight capturing method is being requested.
    /// </param>
    /// <returns>
    /// Returns the movement weight capturing method for the item.
    /// </returns>
    [Hookable(false)]
    internal static WHSMovementWeightCapturingMethod movementWeightCapturingMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).MovementWeightCapturingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightTagDimensionTrackingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the catch weight tag dimension tracking method for an item.
    /// </summary>
    /// <param name = "_itemId">
    /// The item to validate.
    /// </param>
    /// <returns>
    /// The dimension tracking method for the catch weight tag tracked item.
    /// </returns>
    [Hookable(false)]
    internal static WHSCatchWeightTagDimensionTrackingMethod catchWeightTagDimensionTrackingMethod(ItemId _itemId)
    {
        return WHSInventTable::catchWeightItemHandlingPolicy(_itemId).CatchWeightTagDimensionTrackingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFilterMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates if filters match for an item.
    /// </summary>
    /// <param name = "_whsInventTable">The warehouse item being evaluated.</param>
    /// <param name = "_matchFilter">The filters being evaluated.</param>
    /// <returns></returns>
    [Hookable(false)]
    internal boolean isFilterMatching(WHSFilterCode _matchFilter)
    {
        boolean     ret = true;
        
        var wildcard = WHSParameters::find().FilterWildcard;
        
        for (int dimIdx = 1; dimIdx <= dimof(_matchFilter); ++dimIdx)
        {
            if (_matchFilter[dimIdx] != this.FilterCode[dimIdx])
            {
                if (_matchFilter[dimIdx] != wildcard)
                {
                    ret = false;
                    break;
                }
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureInventoryStatusChangedAllowedForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if inventory status change is allowed for a given item.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id to check.
    /// </param>
    /// <param name="_throwOnError">
    /// Determines if this method should throw an error when status change is not allowed; optional.
    /// </param>
    /// <returns>
    /// true if inventory status change is allowed; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean ensureInventoryStatusChangedAllowedForItem(ItemId _itemId, boolean _throwOnError = false)
    {
        if (!PdsGlobal::pdsIsCWItem(_itemId))
        {
            return true;
        }
        
        str message;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled() &&
            WHSInventTable::isCatchWeightTagTracked(_itemId) &&
            WHSInventTable::catchWeightTagDimensionTrackingMethod(_itemId) != WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            message = "@WAX:Error_CannotChangeInventoryStatusForCWTagItems";

            if (_throwOnError)
            {
                throw error(message);
            }

            return checkFailed(message);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExcludeValidateField_SysRecordTemplate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(SysRecordTemplate), delegatestr(SysRecordTemplate, onExcludeValidateField))]
    static void onExcludeValidateField_SysRecordTemplate(Set _exclusion, Common _common)
    {
        if (_common.TableId == tableNum(WHSInventTable))
        {
            _exclusion.add(fieldnum(WHSInventTable, UOMSeqGroupId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4373</DeveloperDocumentation>
	<FormRef>ecoresproductdetailsextended</FormRef>
	<Label>@WAX1237</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>UOMSeqGroupId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemIdIdx</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemIdIdx</PrimaryIndex>
	<ReplacementKey>ItemIdIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UOMSeqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxPickQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFDescription1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFDescription2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackSizeCateogryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterChanged</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageClassId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickWCNeg</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UOMSeqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxPickQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFDescription1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFDescription2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackSizeCateogryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterChanged</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageClassId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickWCNeg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowMaterialOverPick</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WHSFilterCode</Name>
			<Label>@WAX1137</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FilterCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WHSFilterGroup</Name>
			<Label>@WAX971</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FilterGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WHSPhysDim</Name>
			<Label>@WAX2915</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UOMSeqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxPickQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackSizeCateogryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatchWeightItemHandlingPolicyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WhsProduction</Name>
			<Label>@WAX1223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowMaterialOverPick</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowMaterialOverpickNonLP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickWCNeg</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaterialOverpickPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WHSRelease</Name>
			<Label>@WAX1884</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesUnitRestricted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WhsBatchDetails</Name>
			<Label>@PDS1358</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BatchDetailsCapturePolicyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowMaterialOverPick</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSAllowMaterialOverPick</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FilterChanged</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSFilterChanged</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FilterCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSFilterCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FilterGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSFilterGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxPickQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaxPickQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackageClassId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPackageClassId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackSizeCateogryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPackSizeCateogryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhysDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPhysDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PickWCNeg</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPickWCNeg</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProdQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSProdQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFDescription1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFDescription1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFDescription2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFDescription2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOMSeqGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUOMSeqGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CatchWeightItemHandlingPolicyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCatchWeightItemHandlingPolicyName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesUnitRestricted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSSalesUnitRestricted</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaterialOverpickPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaterialOverpickPercentage</ExtendedDataType>
			<FeatureClass>WHSProductionRawMaterialOverpickingFlight</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowMaterialOverpickNonLP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>WHSProductionRawMaterialOverpickingFlight</FeatureClass>
			<EnumType>WHSAllowMaterialOverPickNonLP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BatchDetailsCapturePolicyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WhsBatchDetailsCapturePolicyId</ExtendedDataType>
			<FeatureClass>WhsBatchDetailsCapturePolicyFlight</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CatchWeightItemHandlingPolicyNameIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CatchWeightItemHandlingPolicyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BatchDetailsCapturePolicyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BatchDetailsCapturePolicyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>FilterCode1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code1</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[1]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FilterCode2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code2</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[2]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FilterCode3</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code3</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code3</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[3]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FilterCode4</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code4</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code4</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[4]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FilterCode5</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code5</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code5</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[5]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FilterCode6</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code6</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code6</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[6]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FilterCode7</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code7</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code7</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[7]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FilterCode8</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code8</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code8</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[8]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FilterCode9</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code9</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code9</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[9]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FilterCode10</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSFilters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Code10</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FilterTitle_Extern</Name>
					<RelatedField>FilterTitle</RelatedField>
					<ValueStr>WHSFilterTitle::Code10</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterCode</Name>
					<Field>FilterCode[10]</Field>
					<RelatedField>FilterNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSPackageClass</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSPackageClass</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackageClassId</Name>
					<SourceEDT>WHSPackageClassId</SourceEDT>
					<Field>PackageClassId</Field>
					<RelatedField>PackageClassId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSPackSizeCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSPackSizeCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PackSizeCateogryId</Name>
					<SourceEDT>WHSPackSizeCateogryId</SourceEDT>
					<Field>PackSizeCateogryId</Field>
					<RelatedField>PackSizeCateogryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSPhysDimGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSPhysDimGroupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PhysDimId</Name>
					<SourceEDT>WHSPhysDimId</SourceEDT>
					<Field>PhysDimId</Field>
					<RelatedField>PhysDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSUOMSeqGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSUOMSeqGroupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UOMSeqGroupId</Name>
					<SourceEDT>WHSUOMSeqGroupId</SourceEDT>
					<Field>UOMSeqGroupId</Field>
					<RelatedField>UOMSeqGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSCatchWeightItemHandlingPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSCatchWeightItemHandlingPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CatchWeightItemHandlingPolicyName</Name>
					<Field>CatchWeightItemHandlingPolicyName</Field>
					<RelatedField>PolicyName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PolicyNameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WhsBatchDetailsCapturePolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WhsBatchDetailsCapturePolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BatchDetailsCapturePolicyId</Name>
					<Field>BatchDetailsCapturePolicyId</Field>
					<RelatedField>BatchDetailsCapturePolicyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>