<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerExchAdjHist</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerExchAdjHist extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        isValid = isValid && this.canUserModify();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUserModify</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current user has edit rights to the table in the context of the legal entity on the record.
    /// </summary>
    /// <returns>true if the user can modify the record; otherwise false.</returns>
    public boolean canUserModify()
    {
        return LedgerSecurityHelper::hasMinimumSecurityAccessForLegalEntity(
            menuItemDisplayStr(LedgerExchAdj),
            MenuItemType::Display,
            this.LegalEntity,
            AccessRight::Edit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specific record in the <c>LedgerExchAdjHist</c> table.
    /// </summary>
    /// <param name = "_recId">The record ID of the <c>LedgerExchAdjHist</c> record to find.</param>
    /// <param name = "_forUpdate">A boolean value that indicates whether to read the record for update; optional.</param>
    /// <param name = "_concurrencyModel">The concurrency model option to use when the record is read; optional.</param>
    /// <returns>A record in the <c>LedgerExchAdjHist</c> table; otherwise, an empty record.</returns>
    public static LedgerExchAdjHist find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerExchAdjHist ledgerExchAdjHist;

        ledgerExchAdjHist.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerExchAdjHist.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerExchAdjHist
            where ledgerExchAdjHist.RecId == _recId;

        return ledgerExchAdjHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGeneralJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specific record in the <c>LedgerExchAdjHist</c> table by the <c>GeneralJournalEntry</c> table reference.
    /// </summary>
    /// <param name = "_generalJournalEntry">The <c>GeneralJournalEntry</c> table record.</param>
    /// <returns>A record in the <c>LedgerExchAdjHist</c> table; otherwise, an empty record.</returns>
    internal static LedgerExchAdjHist findByGeneralJournalEntry(
        GeneralJournalEntry _generalJournalEntry)
    {
        LedgerExchAdjHist ledgerExchAdjHist;

        select firstonly ledgerExchAdjHist
            where ledgerExchAdjHist.AccountingDate == _generalJournalEntry.AccountingDate
                && ledgerExchAdjHist.SubledgerVoucher == _generalJournalEntry.SubledgerVoucher
                && ledgerExchAdjHist.Ledger == _generalJournalEntry.Ledger;

        return ledgerExchAdjHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>LedgerExchAdjHist</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name = "_recId">The record ID of the <c>LedgerExchAdjHist</c> record.</param>
    /// <returns>true if the specified record exists; otherwise, false.</returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (LedgerExchAdjHist::exist(_recId))
        {
            isExisting = checkFailed(strFmt(LedgerExchAdjHist::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>LedgerExchAdjHist</c> table exists.
    /// </summary>
    /// <param name = "_recId">The record ID of the <c>LedgerExchAdjHist</c> record.</param>
    /// <returns>true if the specified record exists; otherwise, false.</returns>
    public static boolean exist(RecId _recId)
    {
        LedgerExchAdjHist ledgerExchAdjHist;

        select firstonly RecId from ledgerExchAdjHist
            where ledgerExchAdjHist.RecId == _recId;

        return ledgerExchAdjHist != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>LedgerExchAdjHist</c> table does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for ledger transaction reversal of exchange adjustment records.
    /// </summary>
    /// <param name = "_voucher">The reversal voucher.</param>
    /// <param name = "_accountingDate">The accounting date of the reversal.</param>
    /// <param name = "_ledger">The <c>Ledger</c> table record.</param>
    /// <param name = "_originatingRecord">The originating record the reversal process was invoked for.</param>
    /// <param name = "_revoked">true if the reversal is a revokal of a reversal; otherwise, false.</param>
    [SubscribesTo(classStr(TransactionReversal), delegateStr(TransactionReversal, voucherReversed))]
    public static void voucherReversed(
        Voucher _voucher,
        TransDate _accountingDate,
        Ledger _ledger,
        Common _originatingRecord,
        boolean _revoked)
    {
        // Log ledger exchange adjustment reversals to the exchange adjustment history for auditability.
        if (_originatingRecord.TableId == tableNum(LedgerExchAdjHist))
        {
            LedgerExchAdjHist exchangeAdjustmentHistoryOrig = _originatingRecord as LedgerExchAdjHist;
            LedgerExchAdjHist exchangeAdjustmentHistory;

            exchangeAdjustmentHistory.data(exchangeAdjustmentHistoryOrig);
            exchangeAdjustmentHistory.AccountingDate = _accountingDate;
            exchangeAdjustmentHistory.SubledgerVoucher = _voucher;
            exchangeAdjustmentHistory.Ledger = _ledger.RecId;
            exchangeAdjustmentHistory.Reversal = NoYes::Yes;

            exchangeAdjustmentHistory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>eligibleForReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the exchange adjustment transaction is eligible for reversal.
    /// </summary>
    /// <returns>true if the exchange adjustment transaction is eligible for reversal; otherwise, false.</returns>
    public boolean eligibleForReversal()
    {
        boolean ret = true;

        if (this.Reversal)
        {
            ret = false;
        }
        else
        {
            GeneralJournalEntry generalJournalEntry = LedgerExchAdjHist::findRelatedGeneralJournalEntry(this);

            GeneralJournalAccountEntry generalJournalAccountEntry;
            select firstonly generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId;

            GeneralJournalAccountEntry originalGeneralJournalAccountEntry;
            boolean revoke;
            TraceNum reversalTraceNum;

            [originalGeneralJournalAccountEntry, revoke, reversalTraceNum] =
                TransactionReversalTrans::findGeneralJournalOriginal(generalJournalAccountEntry);

            if (revoke)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedGeneralJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>GeneralJournalEntry</c> table related to the provided <c>LedgerExchAdjHist</c>
    /// table record.
    /// </summary>
    /// <param name = "_ledgerExchAdjHist">The <c>LedgerExchAdjHist</c> table record.</param>
    /// <returns>A record in the <c>GeneralJournalEntry</c> table; otherwise, an empty record.</returns>
    internal static GeneralJournalEntry findRelatedGeneralJournalEntry(LedgerExchAdjHist _ledgerExchAdjHist)
    {
        GeneralJournalEntry generalJournalEntry;

        select firstonly generalJournalEntry
            where generalJournalEntry.SubledgerVoucher == _ledgerExchAdjHist.SubledgerVoucher
                && generalJournalEntry.AccountingDate == _ledgerExchAdjHist.AccountingDate
                && generalJournalEntry.Ledger == _ledgerExchAdjHist.Ledger;

        return generalJournalEntry;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@GeneralLedger:ForeignCurrencyRevaluationDevDoc</DeveloperDocumentation>
	<FormRef>LedgerExchAdj</FormRef>
	<Label>@SYS55328</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>LegalEntity</TitleField1>
	<TitleField2>CreatedDateTime</TitleField2>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Ledger</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GeneralLedger:ForeignCurrencyRevaluationFromDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GeneralLedger:ForeignCurrencyRevaluationToDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MainAccountOptions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerExchAdjMainAccountOptions</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencySelection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerExchAdjCurrencySelection</ExtendedDataType>
			<Label>@GeneralLedger:ForeignCurrencyRevaluationCurrenciesRevalued</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LegalEntityDataAreaId</ExtendedDataType>
			<Label>@GeneralLedger:LegalEntity</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reviewed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GeneralLedger:ForeignCurrencyRevaluationReviewed</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NotesLine</ExtendedDataType>
			<Label>@SYS40182</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>QueryPacked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysQueryablePacked</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Ledger</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccountingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubledgerVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExchangeRateDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GeneralLedger:ForeignCurrencyRevalDateOfRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reversal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerExchAdjReversal</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SubledgerVoucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountingDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Ledger</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CompanyInfo</Name>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>DataArea</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Ledger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Ledger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Ledger_GeneralJournalEntry</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Ledger</Name>
					<Field>Ledger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>