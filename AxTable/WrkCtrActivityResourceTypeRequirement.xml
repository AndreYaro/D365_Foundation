<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrActivityResourceTypeRequirement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrActivityResourceTypeRequirement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToPropertyMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the text representation of the requirement and the minimum value that is required to the map.
    /// </summary>
    /// <param name="_propertyMap">
    ///    The <c>Map</c> object to which to add the property.
    /// </param>
    public void addToPropertyMap(Map _propertyMap)
    {
        str property = WrkCtrSchedulingProperty::wrkCtrTypeSchedulingProperty(this.ResourceType);

        if (!_propertyMap.exists(property))
        {
            _propertyMap.insert(property,0.0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the record from the requirements in the set.
    /// </summary>
    /// <param name="_activityRequirementSet">
    ///    The <c>RecId</c> field of the requirement set of the parent activity.
    /// </param>
    public void initFromRequirementSet(RefRecId _activityRequirementSet)
    {
        WrkCtrTable                         wrkCtrTable;
        WrkCtrActivityResourceRequirement   wrkCtrActivityResourceRequirement;
        WrkCtrActivityRequirement           wrkCtrActivityRequirement;

        // Initialize type from existing resource requirement
        select firstonly RecId, WrkCtrType from wrkCtrTable
            exists join wrkCtrActivityResourceRequirement
                where wrkCtrActivityResourceRequirement.WrkCtrId == wrkCtrTable.WrkCtrId
                  && wrkCtrActivityResourceRequirement.ResourceDataAreaId == wrkCtrTable.DataAreaId
            exists join wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.RecId == wrkCtrActivityResourceRequirement.ActivityRequirement
                  && wrkCtrActivityRequirement.ActivityRequirementSet == _activityRequirementSet;

        if (wrkCtrTable.RecId)
        {
            this.ResourceType = wrkCtrTable.WrkCtrType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ResourceType = WrkCtrType::Machine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitResourceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Limits the query to only include resources that satisfy this requirement.
    /// </summary>
    /// <param name="_dsWrkCtrTable">
    ///    The query build data source to modify. The query must have a primary data source based on the
    ///    <c>WrkCtrTable</c> table.
    /// </param>
    /// <param name="_searchFromDate">
    ///    The date at which to begin the search. This parameter is not used in this subtype.
    /// </param>
    /// <param name="_searchToDate">
    ///    The date at which to end the search. This parameter not used in this subtype.
    /// </param>
    public void limitResourceQuery(QueryBuildDataSource    _dsWrkCtrTable,
                                   TransDate               _searchFromDate,
                                   TransDate               _searchToDate)
    {
        _dsWrkCtrTable.addRange(fieldnum(WrkCtrTable, WrkCtrType)).value(queryValue(this.ResourceType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description of the resource type.
    /// </summary>
    /// <returns>
    ///    The description of the resource type.
    /// </returns>
    display Description requirementDescription()
    {
        // No description exists for resource types
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the resource type based on <c>ResourceType</c>.
    /// </summary>
    /// <param name="_set">
    /// true if the resource type is set; otherwise, false.
    /// </param>
    /// <param name="_wrkCtrActivityRequirementEdit">
    /// The new resource type string value when <paramref name="set"/> is true.
    /// </param>
    /// <param name="_wrkCtrActivityRequirement">
    /// The parent activity requirement record.
    /// </param>
    /// <param name="_allowBlank">
    /// A <c>Boolean</c> specifying if the method accepts a blank string as input.
    /// </param>
    /// <param name="_companyId">The company ID.</param>
    /// <returns>
    /// A string with the resource type string.
    /// </returns>
    /// <exception cref="Exception::Warning">
    /// The value in field requirement is not a valid resource type.
    /// </exception>
    public WrkCtrActivityRequirementEdit requirementEdit(
        boolean                                 _set,
        WrkCtrActivityRequirementEdit           _wrkCtrActivityRequirementEdit,
        WrkCtrActivityRequirement               _wrkCtrActivityRequirement,
        boolean                                 _allowBlank = false,
        CompanyId                               _companyId = ''
        )
    {
        WrkCtrActivityRequirementEdit   wrkCtrActivityRequirementEdit = _wrkCtrActivityRequirementEdit;
        int                             enumInt;
        WrkCtrType                      newWrkCtrType;

        if (_set)
        {
            // Remove double quotes from string (added by the lookup form if the value contains spaces)
            wrkCtrActivityRequirementEdit = strrem(wrkCtrActivityRequirementEdit, '\"');

            // Get the integer value of the enum
            enumInt = str2enum(newWrkCtrType,wrkCtrActivityRequirementEdit);

            // Only accept the enum value if valid
            if (enumInt == DictEnum::ConversionFailedValue)
            {
                throw error(strfmt("@SYS300111","@SYS11370"));
            }

            this.ResourceType = any2Enum(enumInt);            
        }
        else
        {
            // Get the type string directly
            wrkCtrActivityRequirementEdit = enum2str(this.ResourceType);
        }

        return wrkCtrActivityRequirementEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Invokes of this method go to the main table.
    /// </summary>
    public void requirementJumpRef()
    {
        // Resource types are fixed values and are as such not defined in a table.
        info("@SYS309714");
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens a lookup for resource types.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormStringControl</c> control to which to attach the lookup.
    /// </param>
    /// <param name="_siteId">
    ///    The ID of a site to limit the search on.
    /// </param>
    public void requirementLookup(FormStringControl _formControl, InventSiteId _siteId)
    {
        SysDictField    sysDictField = SysDictField::newName(tablestr(WrkCtrTable),fieldstr(WrkCtrTable, WrkCtrType));

        // Lookup all resource types except for the ResourceGroup
        _formControl.performFormLookup(SysLookup::lookupEnum(sysDictField, [WrkCtrType::Group]));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>ActivityRequirement</c> field to the provided value.
    /// </summary>
    /// <param name="_activityRequirement">
    ///    The record ID of the <c>WrkCtrActivity</c> record.
    /// </param>
    public void setActivityRequirement(RefRecId  _activityRequirement)
    {
        this.ActivityRequirement = _activityRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.ActivityRequirement > 0)
        {
            ret = this.validateWriteRequirementSet(WrkCtrActivityRequirement::find(this.ActivityRequirement).ActivityRequirementSet);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the record is correct before it is written when the activity requirement set is known.
    /// </summary>
    /// <param name="_activityRequirementSet">
    /// The ID of the activity requirement set.
    /// </param>
    /// <returns>
    /// true if the record may be written; otherwise, false.
    /// </returns>
    public boolean validateWriteRequirementSet(RefRecId _activityRequirementSet)
    {
        WrkCtrActivityRequirement           wrkCtrActivityRequirement;
        WrkCtrActivityResourceRequirement   wrkCtrActivityResourceRequirement;
        WrkCtrTable                         wrkCtrTable;

        boolean ret = true;

        // The resource type requirement must be consistent with the type of the required resource.
        select firstonly RecId from wrkCtrTable
                where wrkCtrTable.WrkCtrType                                != this.ResourceType
            exists join wrkCtrActivityResourceRequirement
                where wrkCtrActivityResourceRequirement.WrkCtrId            == wrkCtrTable.WrkCtrId
                   && wrkCtrActivityResourceRequirement.ResourceDataAreaId  == wrkCtrTable.DataAreaId
            exists join wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.RecId                       == wrkCtrActivityResourceRequirement.ActivityRequirement
                   && wrkCtrActivityRequirement.ActivityRequirementSet      == _activityRequirementSet;

        if (wrkCtrTable.RecId)
        {
            ret = checkFailed("@SYS301005");
        }

        // Only one requirement of type "resource type" is allowed
        ret = ret && WrkCtrActivityRequirementSet::checkExistingRequirementType(WrkCtrActivityRequirementType::ResourceType,
                                                                                _activityRequirementSet,
                                                                                this.ActivityRequirement);

        if (ret && this.ResourceType != WrkCtrType::Personnel)
        {
            // When resource requirements of type “skill”, “course”, “certificate” or “title” are specified
            // it is only possible to specify requirements for resources of type “human resources”

            select firstonly RecId from wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.ActivityRequirementSet == _activityRequirementSet
                   && (   wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::Skill
                       || wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::Course
                       || wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::Certificate
                       || wrkCtrActivityRequirement.RelationshipType == WrkCtrActivityRequirementType::PersonTitle);

            if (wrkCtrActivityRequirement.RecId)
            {
                ret = checkFailed("@SYS301008");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS300115</DeveloperDocumentation>
	<FormRef>RouteOpr</FormRef>
	<Label>@SYS300114</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ResourceType</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ActivityRequirementIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>ActivityRequirementIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityRequirement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Requirement</Name>
			<Label>@SYS11370</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ActivityRequirement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResourceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WrkCtrType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ActivityRequirementIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityRequirement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ActivityRequirement</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WrkCtrActivityRequirement</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ActivityRequirement</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ResourceTypeRequirement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityRequirement</Name>
					<Field>ActivityRequirement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>