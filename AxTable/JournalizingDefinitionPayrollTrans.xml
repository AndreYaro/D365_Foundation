<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionPayrollTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingDefinitionPayrollTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        super();

        PayrollMainAccDimensionListProvider::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSpecificCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the specific code ID.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that indicates whether to set the specific code ID.
    /// </param>
    /// <param name="_specificCodeId">
    ///    The specific code ID to set or retrieve.
    /// </param>
    /// <returns>
    ///    The specific code ID in the <c>JournalizingDefinitionPayrollTrans</c> table.
    /// </returns>
    public edit PayrollSpecificCode editSpecificCode(boolean set, PayrollSpecificCode _specificCodeId)
    {
        if (set)
        {
            this.setSpecificCode(_specificCodeId);
        }
        else
        {
            _specificCodeId = this.getSpecificCode();
        }

        return _specificCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecificCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the specific code ID.
    /// </summary>
    /// <returns>
    /// The specific code ID of the record in the <c>JournalizingDefinitionPayrollTrans</c> table.
    /// </returns>
    private PayrollSpecificCode getSpecificCode()
    {
        PayrollSpecificCode   specificCodeId;

        switch (this.LineType)
        {
            case PayrollPayStatementLineType::Earning:
                specificCodeId = PayrollEarningCode::find(this.SpecificCode).EarningCode;
                break;
            case PayrollPayStatementLineType::BenefitContribution:
            case PayrollPayStatementLineType::BenefitDeduction:
                specificCodeId = HcmBenefitPlan::find(this.SpecificCode).BenefitPlanID;
                break;
            case PayrollPayStatementLineType::TaxContribution:
            case PayrollPayStatementLineType::TaxDeduction:
                switch (this.Code)
                {
                    case TableGroupAll::Table:
                    case TableGroupAll::All:
                        specificCodeId = PayrollTaxCode::find(this.SpecificCode).Code;
                        break;
                    case TableGroupAll::GroupId:
                        specificCodeId = PayrollTaxGroup::find(this.SpecificGroup).GroupId;
                        break;
                }
                break;
        }

        return specificCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        super();

        PayrollMainAccDimensionListProvider::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSpecificCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the specific code ID.
    /// </summary>
    /// <param name="_specificCodeId">
    ///    The specific code ID to set in the <c>JournalizingDefinitionPayablesTrans</c> table.
    /// </param>
    /// <remarks>
    ///     Note that _specificCodeId here is an ID string which can be the ID string of earnings, benefit, tax code or tax group.
    /// </remarks>
    private void setSpecificCode(PayrollSpecificCode _specificCodeId)
    {
        #ISOCountryRegionCodes
        PayrollSpecificCodeRecId        specificCodeRecId;
        LogisticsAddressCountryRegionId countryRegionId;
        HcmBenefitPlan                  benefitPlan;
        PayrollTaxCode                  taxCode;
        PayrollTaxGroup                 taxGroup;

        if (!_specificCodeId)
        {
            this.SpecificCode = 0;
        }
        else
        {
            switch ( this.LineType)
            {
                case PayrollPayStatementLineType::Earning:
                    specificCodeRecId = PayrollEarningCode::findByEarningCode(_specificCodeId).RecId;
                    if (!specificCodeRecId)
                    {
                        checkFailed(strFmt("@SYS112224", _specificCodeId, fieldPName(PayrollEarningCode, EarningCode), tablePName(PayrollEarningCode)));
                    }
                    else
                    {
                        // Set the value of SpecificCode only and SpecificGroup to zero since earning line does not have group
                        this.SpecificCode = specificCodeRecId;
                        this.SpecificGroup = 0;
                    }
                    break;
                case PayrollPayStatementLineType::BenefitContribution:
                    benefitPlan = HcmBenefitPlan::findByBenefitPlanId(_specificCodeId);

                    if (benefitPlan.RecId
                        && (benefitPlan.PayrollImpact == PayrollImpact::ContributionOnly
                            || benefitPlan.PayrollImpact == PayrollImpact::DeductionAndContribution))
                    {
                        specificCodeRecId = benefitPlan.RecId;
                    }

                    if (!specificCodeRecId)
                    {
                        checkFailed(strFmt("@SYS112224", _specificCodeId, fieldPName(HcmBenefitPlan, BenefitPlanId), tablePName(HcmBenefitPlan)));
                    }
                    else
                    {
                        // Set the value of SpecificCode only and SpecificGroup to zero since benefit line does not have group
                        this.SpecificCode = specificCodeRecId;
                        this.SpecificGroup = 0;
                    }
                    break;
                case PayrollPayStatementLineType::BenefitDeduction:
                    benefitPlan = HcmBenefitPlan::findByBenefitPlanId(_specificCodeId);

                    if (benefitPlan.RecId
                        && (benefitPlan.PayrollImpact == PayrollImpact::DeductionOnly
                            || benefitPlan.PayrollImpact == PayrollImpact::DeductionAndContribution))
                    {
                        specificCodeRecId = benefitPlan.RecId;
                    }

                    if (!specificCodeRecId)
                    {
                        checkFailed(strFmt("@SYS112224", _specificCodeId, fieldPName(HcmBenefitPlan, BenefitPlanId), tablePName(HcmBenefitPlan)));
                    }
                    else
                    {
                        // Set the SpecificCode only and SpecificGroup to zero since benefit line does not have group
                        this.SpecificCode = specificCodeRecId;
                        this.SpecificGroup = 0;
                    }
                    break;
                case PayrollPayStatementLineType::TaxContribution:
                    switch (this.Code)
                    {
                        case TableGroupAll::Table:
                        case TableGroupAll::All:
                            countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
                            taxCode = PayrollTaxCode::findByCodeCountryRegion(_specificCodeId, countryRegionId);

                            if (taxCode.RecId && taxCode.IsEmployerTax == NoYes::Yes)
                            {
                                specificCodeRecId = taxCode.RecId;
                            }

                            if (!specificCodeRecId)
                            {
                                checkFailed(strFmt("@SYS112224", _specificCodeId, fieldPName(PayrollTaxCode, Code), tablePName(PayrollTaxCode)));
                            }
                            else
                            {
                                // SpecificGroup is always set to zero for Table and All lines
                                this.SpecificCode = specificCodeRecId;
                                this.SpecificGroup = 0;
                            }
                            break;
                        case TableGroupAll::GroupId:
                            // Gets the taxGroup for setting the SpecificGroup value
                            taxGroup = PayrollTaxGroup::findByTaxGroup(_specificCodeId);
                            specificCodeRecId = taxGroup.RecId;

                            if (!specificCodeRecId)
                            {
                                checkFailed(strFmt("@SYS112224", _specificCodeId, fieldPName(PayrollTaxGroup, GroupId), tablePName(PayrollTaxGroup)));
                            }
                            else
                            {
                                //
                                // Only posting definition enabled tax group is valid otherwise throw a warning that it is not a valid option. This is to do field
                                // validation if the user typing in an existing tax group rather than selecting an option from the <c>editSpecificCode</c> combobox
                                //
                                if (taxGroup.IsEnabledForPostingDefinition)
                                {
                                    // For a Group line SpecificCode is always equal to zero
                                    this.SpecificGroup = specificCodeRecId;
                                    this.SpecificCode = 0;
                                }
                                else
                                {
                                    checkFailed("@SYS4005873");
                                }
                            }
                            break;
                    }
                    break;
                case PayrollPayStatementLineType::TaxDeduction:
                    switch (this.Code)
                    {
                        case TableGroupAll::Table:
                        case TableGroupAll::All:
                            countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
                            taxCode = PayrollTaxCode::findByCodeCountryRegion(_specificCodeId, countryRegionId);

                            if (taxCode.RecId && taxCode.IsEmployerTax == NoYes::No)
                            {
                                specificCodeRecId = taxCode.RecId;
                            }

                            if (!specificCodeRecId)
                            {
                                checkFailed(strFmt("@SYS112224", _specificCodeId, fieldPName(PayrollTaxCode, Code), tablePName(PayrollTaxCode)));
                            }
                            else
                            {
                                this.SpecificCode = specificCodeRecId;
                                this.SpecificGroup = 0;
                            }
                            break;
                        case TableGroupAll::GroupId:
                            // Gets the taxGroup for setting the SpecificGroup value
                            taxGroup = PayrollTaxGroup::findByTaxGroup(_specificCodeId);
                            specificCodeRecId = taxGroup.RecId;

                            if (!specificCodeRecId)
                            {
                                checkFailed(strFmt("@SYS112224", _specificCodeId, fieldPName(PayrollTaxGroup, GroupId), tablePName(PayrollTaxGroup)));
                            }
                            else
                            {
                                //
                                // Only posting definition enabled tax group is valid otherwise throw a warning that it is not a valid option. This is to do field
                                // validation if the user typing in an existing tax group rather than selecting an option from the <c>editSpecificCode</c> combobox
                                //
                                if (taxGroup.IsEnabledForPostingDefinition)
                                {
                                    // For a Group line SpecificCode is always equal to zero
                                    this.SpecificGroup = specificCodeRecId;
                                    this.SpecificCode = 0;
                                }
                                else
                                {
                                    checkFailed("@SYS4005873");
                                }
                            }
                            break;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        super();

        PayrollMainAccDimensionListProvider::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.Code == TableGroupAll::All && this.SpecificCode != 0)
            {
                ret = checkFailed("@GLS93776");
            }
            else if (this.Code == TableGroupAll::Table && this.SpecificCode == 0)
            {
                ret = checkFailed("@GLS93777");
            }
            else if (this.Code == TableGroupAll::GroupId && this.SpecificGroup == 0)
            {
                ret = checkFailed("@GLS93777");
            }

            if (this.LineType == PayrollPayStatementLineType::Earning ||
                this.LineType == PayrollPayStatementLineType::BenefitContribution ||
                this.LineType == PayrollPayStatementLineType::BenefitDeduction)
            {
                if (this.Code == TableGroupAll::GroupId)
                {
                    ret = checkFailed(strFmt("@SYS4005874",
                                            enum2str(this.Code),
                                            enum2str(this.LineType)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>JournalizingDefintionPayrollTrans</c> table;
    ///    if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The posting definition code of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!JournalizingDefinitionPayrollTrans::exist(_recId))
        {
            ret = checkFailed(strFmt(JournalizingDefinitionPayrollTrans::txtNotExist(), tablestr(JournalizingDefinitionPayrollTrans)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>JournalizingDefinitionPayrollTrans</c> table
    ///    exists.
    /// </summary>
    /// <param name="_recId">
    ///    The RecId to find.
    /// </param>
    /// <returns>
    ///    true if the RecId exists in the table; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;
        JournalizingDefinitionPayrollTrans journalizingDefinitionPayrollTrans;

        found = (select firstonly RecId from journalizingDefinitionPayrollTrans
                    where journalizingDefinitionPayrollTrans.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>JournalizingDefinitionPayrollTrans</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use.
    /// </param>
    /// <returns>
    ///    A record in the <c>JournalizingDefinitionPayrollTrans</c> table; otherwise, an empty record
    /// </returns>
    public static JournalizingDefinitionPayrollTrans find(
        recId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionPayrollTrans journalizingDefinitionPayrollTrans;

        journalizingDefinitionPayrollTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionPayrollTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly journalizingDefinitionPayrollTrans
            where journalizingDefinitionPayrollTrans.RecId == _recId;

        return journalizingDefinitionPayrollTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalizingDefinitionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>JournalizingDefinitionPayrollTrans</c> table.
    /// </summary>
    /// <param name="_journalizingDefinitionId">
    ///    The journalizing definition record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use.
    /// </param>
    /// <returns>
    ///    A record in the <c>JournalizingDefinitionPayrollTrans</c> table; otherwise, an empty record
    /// </returns>
    public static JournalizingDefinitionPayrollTrans findByJournalizingDefinitionId(
        JournalizingDefinitionId _journalizingDefinitionId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionPayrollTrans journalizingDefinitionPayrollTrans;

        journalizingDefinitionPayrollTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionPayrollTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly journalizingDefinitionPayrollTrans
            where journalizingDefinitionPayrollTrans.JournalizingDefinition == _journalizingDefinitionId;

        return journalizingDefinitionPayrollTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTypeCodeGroupAK</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>JournalizingDefinitionPayrollTrans</c> table.
    /// </summary>
    /// <param name="_transactionType">
    ///    The payroll transaction type of the record to find.
    /// </param>
    /// <param name="_payStatementLineType">
    ///    The pay statement line type of the record to find.
    /// </param>
    /// <param name="_code">
    ///    The code of the record to find.
    /// </param>
    /// <param name="_specificCode">
    ///    The specific code of the record to find.
    /// </param>
    /// <param name="_specificGroup">
    ///    The specific group of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use.
    /// </param>
    /// <returns>
    ///    A record in the <c>JournalizingDefinitionPayrollTrans</c> table; otherwise, an empty record
    /// </returns>
    public static JournalizingDefinitionPayrollTrans findByTypeCodeGroupAK(
        PayrollTransactionType      _transactionType,
        PayrollPayStatementLineType _payStatementLineType,
        TableGroupAll               _code,
        RefRecId                    _specificCode,
        RefRecId                    _specificGroup,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionPayrollTrans journalizingDefinitionPayrollTrans;

        journalizingDefinitionPayrollTrans.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionPayrollTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly journalizingDefinitionPayrollTrans
            where journalizingDefinitionPayrollTrans.PayrollTransactionType == _transactionType
                && journalizingDefinitionPayrollTrans.LineType == _payStatementLineType
                && journalizingDefinitionPayrollTrans.Code == _code
                && journalizingDefinitionPayrollTrans.SpecificCode == _specificCode
                && journalizingDefinitionPayrollTrans.SpecificGroup == _specificGroup;

        return journalizingDefinitionPayrollTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>JournalizingDefinitionPayrollTrans</c>
    ///    table does not exist.
    /// </summary>
    /// <returns>
    ///    A message that indicates the record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS329226";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@GLS93775</DeveloperDocumentation>
	<FormRef>JournalizingDefinitionTrans</FormRef>
	<Label>@GLS93774</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PayrollTransactionType</TitleField1>
	<TitleField2>JournalizingDefinition</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>AccountingFoundation</Modules>
	<ReplacementKey>JournalizingDefinitionPayrollTrans</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayrollTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayrollTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS110924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayrollTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Code</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS40259</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalizingDefinition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PayrollPayStatementLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayrollTransactionType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PayrollTransactionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SpecificCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollSpecificCodeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SpecificGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollSpecificCodeRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalizingDefinitionPayrollTrans</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PayrollTransactionType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Code</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SpecificCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SpecificGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JournalizingDefinition_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>JournalizingDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalizingDefinition</Name>
					<Field>JournalizingDefinition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>