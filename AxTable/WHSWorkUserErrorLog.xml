<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserErrorLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkUserErrorLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        WHSWorkUserErrorLog     errorLog;

        select TransactionNum from errorLog
            order by TransactionNum desc
            where errorLog.UserId == this.UserId;

        this.TransactionNum = errorLog.TransactionNum + 1;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addErrorLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds error log record.
    /// </summary>
    /// <param name="_userId">
    /// Current user id.
    /// </param>
    /// <param name="_errorLog">
    /// Error log message.
    /// </param>
    public static void addErrorLog(
        WHSUserId       _userId,
        WHSRFErrorLog   _errorLog)
    {
        ttsbegin;

        WHSWorkUserErrorLog::errorMaintenance(_userId);

        WHSWorkUserErrorLog errorLog;
        errorLog.UserId      = _userId;
        errorLog.rfErrorLog  = _errorLog;
        errorLog.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMaintenance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes older error logs for a work user.
    /// </summary>
    /// <param name="_userId">
    /// Id of the work user who owns the logs.
    /// </param>
    static void errorMaintenance(WHSUserId _userId)
    {
        WHSRFErrorRecords records = WHSParameters::find().rfErrorRecords;

        Counter counter = int642int((select count(RecId) from WHSWorkUserErrorLog where WHSWorkUserErrorLog.UserId == _userId).RecId);

        ttsbegin;

        while (counter >= records)
        {
            WHSWorkUserErrorLog errorLog;

            select firstonly forupdate errorLog 
                order by CreatedDateTime, RecId
                where errorLog.UserId == _userId;

            if (!errorLog.validateDelete())
            {
                throw error(strFmt("@WAX:WHSCannotDeleteRecordInTable", tablePName(WHSWorkUserErrorLog)));
            }

            errorLog.delete();

            --counter;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsWorkUserErrorLog</c> record exists.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(RecId    _recId)
    {
        return (_recId) &&
               (select firstonly whsWorkUserErrorLog
                    where whsWorkUserErrorLog.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkUserErrorLog</c> record with given parameters.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkUserErrorLog find(RecId   _recId,
                                           boolean _forupdate = false)
    {
        WHSWorkUserErrorLog    whsWorkUserErrorLog;

        if (_recId)
        {
            whsWorkUserErrorLog.selectForUpdate(_forupdate);

            select firstonly whsWorkUserErrorLog
                where whsWorkUserErrorLog.RecId == _recId;
        }

        return whsWorkUserErrorLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4520</DeveloperDocumentation>
	<Label>@WAX3125</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>UserId</TitleField1>
	<TitleField2>createdDateTime</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFErrorLog</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFErrorLog</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RFErrorLog</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFErrorLog</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransactionNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSTransactionNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSUserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UserIdTransactionNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UserIdCreatedDateTimeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSWorkUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkUser</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<SourceEDT>WHSUserId</SourceEDT>
					<Field>UserId</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkUserSession</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkUserSession</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<SourceEDT>WHSUserId</SourceEDT>
					<Field>UserId</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>