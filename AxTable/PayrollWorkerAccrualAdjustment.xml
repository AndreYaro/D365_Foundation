<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerAccrualAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollWorkerAccrualAdjustment extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.TransactionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        #OCCRetryCount;

        this.showWarningOnUnderEmployedTimePrdAdjmnt();
        this.showWarningOnNonCarryForwardPlanAdjmnt();
        this.showWarningOnAdjustmentHoursViolation();

        try
        {
            if (this.SequenceNumber == 0)
            {
                this.SequenceNumber = PayrollWorkerAccrualAdjustment::getNextSequenceNumberByWorkerEnrolledAccrualAndAdjustmentType(
                                                                  this.WorkerEnrolledAccrual,
                                                                  this.AdjustmentType);
            }
            super();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                this.SequenceNumber = 0;
                retry;
            }
        }

        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyException;
            }
            else
            {
                this.SequenceNumber = 0;
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningOnAdjustmentHoursViolation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a warning message upon violation of the enrolled accrual plan adjustments rules.
    /// </summary>
    private void showWarningOnAdjustmentHoursViolation()
    {
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrual;

        payrollWorkerEnrolledAccrual = PayrollWorkerEnrolledAccrual::find(this.WorkerEnrolledAccrual);

        // Validate the accrual plan rule limits for the current plan year as the available totals are for the current plan year.
        if (payrollWorkerEnrolledAccrual.AccrualYearStartDate != dateNull()
            && (this.TransactionDate >= payrollWorkerEnrolledAccrual.AccrualYearStartDate
                && this.TransactionDate <= payrollWorkerEnrolledAccrual.getAccrualYearEndDate()))
        {
            if (this.AdjustmentType != PayrollAccrualAdjustmentType::CarryForwardBalance)
            {
                // save record but show message for hours exceeding or less than maximum or minimum limit.
                if (!this.validateMinimumBalanceLimit(payrollWorkerEnrolledAccrual))
                {
                    warning("@SYS4090091");
                }
                else if (!this.validateAccruedCarryForwardLimit(payrollWorkerEnrolledAccrual))
                {
                    warning("@Payroll:TheAdjustmentWasMadeButItResultedInAnAmountThatIsGreaterThan");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningOnNonCarryForwardPlanAdjmnt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a warning message when a carryover adjustment is made for a non-carryover enabled accrual plan.
    /// </summary>
    private void showWarningOnNonCarryForwardPlanAdjmnt()
    {
        PayrollAccrual payrollAccrual;
        PayrollWorkerEnrolledAccrual payrollWorkerEnrolledAccrual;

        if (this.AdjustmentType == PayrollAccrualAdjustmentType::CarryForward)
        {
            select firstonly CanCarryForward from payrollAccrual
            join Accrual, Worker from payrollWorkerEnrolledAccrual
                where payrollWorkerEnrolledAccrual.Accrual == payrollAccrual.RecId
                    && payrollWorkerEnrolledAccrual.RecId == this.WorkerEnrolledAccrual;

            if (payrollAccrual.CanCarryForward == NoYes::No)
            {
                warning("@SYS4090090");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningOnUnderEmployedTimePrdAdjmnt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a warning message when an adjustment is made when the worker has not been employed till the minimum employment months requirement.
    /// </summary>
    private void showWarningOnUnderEmployedTimePrdAdjmnt()
    {
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrual;
        PayrollAccrualRate              payrollAccrualRate;
        HcmWorkerTitle                  hcmWorkerTitle;
        HcmWorker                       hcmWorkerForSeniorityDate;
        date                            workerSeniorityDate;
        PayrollAccrualEmploymentMonth   workerMonthsOfEmployment;

        if (this.AdjustmentType != PayrollAccrualAdjustmentType::CarryForwardBalance)
        {
            select firstonly EmploymentMonths from payrollAccrualRate
                order by EmploymentMonths
            join Accrual, Worker from payrollWorkerEnrolledAccrual
                where payrollWorkerEnrolledAccrual.Accrual == payrollAccrualRate.Accrual
                    && payrollWorkerEnrolledAccrual.RecId == this.WorkerEnrolledAccrual;

            if (payrollAccrualRate.EmploymentMonths > 0 && payrollWorkerEnrolledAccrual.Worker > 0)
            {
                select firstonly SeniorityDate, Worker from hcmWorkerTitle
                join RecId from hcmWorkerForSeniorityDate
                    where hcmWorkerForSeniorityDate.RecId == hcmWorkerTitle.Worker
                        && hcmWorkerForSeniorityDate.RecId == payrollWorkerEnrolledAccrual.Worker;

                workerSeniorityDate = DateTimeUtil::date(hcmWorkerTitle.SeniorityDate);

                workerMonthsOfEmployment = HcmDateTimeUtil::monthDifferenceIncludeEndDay(workerSeniorityDate, DateTimeUtil::date(DateTimeUtil::utcNow()));

                if (workerMonthsOfEmployment < payrollAccrualRate.EmploymentMonths)
                {
                    warning("@Payroll:TheAdjustmentWasMadeButTheWorkersMonthsOfServiceAreLessThanT");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.showWarningOnUnderEmployedTimePrdAdjmnt();
        this.showWarningOnNonCarryForwardPlanAdjmnt();
        this.showWarningOnAdjustmentHoursViolation();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccruedCarryForwardLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an enrolled accrual's aggregated carryover or accrued hours for the
    /// current accrual period are in violation of the accrual's maximum and minimum limits.
    /// </summary>
    /// <param name="_payrollWorkerEnrolledAccrual">
    /// The value of the <c>WorkerEnrolledAccrual</c> field to find.
    /// </param>
    /// <returns>
    /// true if there is no vialoation; otherwise, false.
    /// </returns>
    private boolean validateAccruedCarryForwardLimit(PayrollWorkerEnrolledAccrual _payrollWorkerEnrolledAccrual)
    {
        PayrollAccrualRate                  payrollAccrualRate;
        boolean                             isValid = true;

        payrollAccrualRate = PayrollAccrualRate::findPayrollAccrualRateByEmploymentMonths(_payrollWorkerEnrolledAccrual.Accrual, DateTimeUtil::date(HcmWorkerTitle::findByWorker(_payrollWorkerEnrolledAccrual.Worker).SeniorityDate), this.TransactionDate);

        if (payrollAccrualRate.RecId)
        {
            // Validating against maximum limit.
            switch (this.AdjustmentType)
            {
                case PayrollAccrualAdjustmentType::Accrued:

                    // total accrued balance and current accrue should not be greater than maximum accrual limit on plan.
                    if ((PayrollAccrualTransactionsView::getWorkerEnrolledAccrualAccruedBalance(_payrollWorkerEnrolledAccrual.RecId, _payrollWorkerEnrolledAccrual.AccrualYearStartDate, _payrollWorkerEnrolledAccrual.getAccrualYearEndDate()) + this.AdjustedHours) > payrollAccrualRate.MaximumLimit)
                    {
                        isValid = false;
                    }

                    break;

                case PayrollAccrualAdjustmentType::CarryForward:

                    // total carry over balance and current carry over should not be greater than maximum carry forward limit on plan.
                    if ((PayrollAccrualTransactionsView::getWorkerEnrolledAccrualCarryOverBalance(_payrollWorkerEnrolledAccrual.RecId, _payrollWorkerEnrolledAccrual.AccrualYearStartDate, _payrollWorkerEnrolledAccrual.getAccrualYearEndDate()) + this.AdjustedHours) > payrollAccrualRate.CarryForwardLimit)
                    {
                        isValid = false;
                    }

                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrual;
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(PayrollWorkerAccrualAdjustment, TransactionDate):

                payrollWorkerEnrolledAccrual = PayrollWorkerEnrolledAccrual::find(this.WorkerEnrolledAccrual);

                if (ret && this.TransactionDate < payrollWorkerEnrolledAccrual.AccrualYearStartDate)
                {
                    // date prior AccrualYearStartDate validation
                    ret = false;
                    error("@Payroll:TheTransactionDateCannotBePriorToTheFirstDayOfThePlanYearFor");
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMinimumBalanceLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an enrolled accrual's aggregated carryover, accrued or used hours
    /// for the current accrual period are in violation of the accrual's minimum limit.
    /// </summary>
    /// <param name="_payrollWorkerEnrolledAccrual">
    /// The value of the <c>WorkerEnrolledAccrual</c> field to find.
    /// </param>
    /// <returns>
    /// true if there is no vialoation; otherwise, false.
    /// </returns>
    private boolean validateMinimumBalanceLimit(PayrollWorkerEnrolledAccrual _payrollWorkerEnrolledAccrual)
    {
        boolean             isValid = true;
        PayrollAccrualRate  payrollAccrualRate;
        PayrollAccrualTotalAvailableHours   totalAvailableHours;

        payrollAccrualRate = PayrollAccrualRate::findPayrollAccrualRateByEmploymentMonths(_payrollWorkerEnrolledAccrual.Accrual, DateTimeUtil::date(HcmWorkerTitle::findByWorker(_payrollWorkerEnrolledAccrual.Worker).SeniorityDate), this.TransactionDate);

        if (payrollAccrualRate.RecId)
        {
            if (this.AdjustmentType == PayrollAccrualAdjustmentType::Used)
            {
                totalAvailableHours = PayrollAccrualTransactionsView::getWorkerEnrolledAccrualAvailableBalance(_payrollWorkerEnrolledAccrual.RecId, _payrollWorkerEnrolledAccrual.AccrualYearStartDate, _payrollWorkerEnrolledAccrual.getAccrualYearEndDate()) - this.AdjustedHours;
            }
            else if ((this.AdjustmentType == PayrollAccrualAdjustmentType::Accrued) || (this.AdjustmentType == PayrollAccrualAdjustmentType::CarryForward))
            {
                totalAvailableHours = PayrollAccrualTransactionsView::getWorkerEnrolledAccrualAvailableBalance(_payrollWorkerEnrolledAccrual.RecId, _payrollWorkerEnrolledAccrual.AccrualYearStartDate, _payrollWorkerEnrolledAccrual.getAccrualYearEndDate()) + this.AdjustedHours;
            }

            // total available balance should not be less than minimum used limit on plan.
            if (totalAvailableHours < payrollAccrualRate.MinimumLimit)
            {
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrual;
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.WorkerEnrolledAccrual)
            {
                // The record for this table with adjustment type of carry forward balance is going to be inserted only
                // through the PayrollWorkerEnrolledAccrual form, on which we have implemented UnitOfWork.
                // When UnitOfWork performs insertion in this table, we are going to have null value in the WorkerEnrolledAccrual field.
                // And also as we dont want to perform below validations for carry forward balance transaction, therefore we are ommitting
                // below validations by checking WorkerEnrolledAccrual field value.

                if (this.AdjustmentType == PayrollAccrualAdjustmentType::CarryForwardBalance)
                {
                    // cannot have more than one carry forward balance adjustment on the same PayrollWorkerEnrolledAccrual AccrualYearStartDate
                    if ((this.RecId == 0) && (PayrollWorkerAccrualAdjustment::doesCarryForwardBalanceTransExist(this.WorkerEnrolledAccrual)))
                    {
                        ret = false;
                        error("@Payroll:CarryForwardBalanceTransactionAlreadyExistForCurrentPlanYear");
                    }
                }
                else
                {
                    payrollWorkerEnrolledAccrual = PayrollWorkerEnrolledAccrual::find(this.WorkerEnrolledAccrual);

                    // perform below validations for adjustment type other than carry forward balance.
                    if (payrollWorkerEnrolledAccrual.AccrualYearStartDate != dateNull())
                    {
                        // transaction date cannot be earlier than enrollment date
                        if (this.TransactionDate < payrollWorkerEnrolledAccrual.AccrualYearStartDate)
                        {
                            ret = false;
                            error("@Payroll:TheTransactionDateCannotBePriorToTheFirstDayOfThePlanYearFor");
                        }

                        // save record but show message for future dates adjustment.
                        if (ret && this.TransactionDate > payrollWorkerEnrolledAccrual.getAccrualYearEndDate())
                        {
                            // future dated validation
                            checkFailed("@Payroll:TheAdjustmentWasMadeButTheTransactionDateIsDuringAFuturePlan");
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollWorkerAccrualAdjustment</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollWorkerAccrualAdjustmentRecId _recId)
    {
        boolean ret = true;

        if (!PayrollWorkerAccrualAdjustment::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollWorkerAccrualAdjustment::txtNotExist(), tableId2name(tableNum(PayrollWorkerAccrualAdjustment))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesCarryForwardBalanceTransExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a carry forward balance transaction already exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the <c>WorkerEnrolledAccrual</c> field to find.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean doesCarryForwardBalanceTransExist(PayrollWorkerEnrolledAccrualRecId _recId)
    {
        PayrollWorkerEnrolledAccrual    payrollWorkerEnrolledAccrual;
        PayrollWorkerAccrualAdjustment  payrollWorkerAccrualAdjustment;

        if (_recId != 0)
        {
            select firstonly RecId from payrollWorkerAccrualAdjustment
                join RecId, AccrualYearStartDate from payrollWorkerEnrolledAccrual
                where payrollWorkerEnrolledAccrual.RecId == _recId &&
                      payrollWorkerAccrualAdjustment.WorkerEnrolledAccrual == payrollWorkerEnrolledAccrual.RecId &&
                      payrollWorkerAccrualAdjustment.TransactionDate == payrollWorkerEnrolledAccrual.AccrualYearStartDate &&
                      payrollWorkerAccrualAdjustment.AdjustmentType == PayrollAccrualAdjustmentType::CarryForwardBalance;
        }

        return payrollWorkerAccrualAdjustment.RecId != 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollWorkerAccrualAdjustment</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollWorkerAccrualAdjustmentRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollWorkerAccrualAdjustment
                    where payrollWorkerAccrualAdjustment.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollWorkerAccrualAdjustment</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollWorkerAccrualAdjustment</c> table.
    /// </returns>
    public static PayrollWorkerAccrualAdjustment find(
    PayrollWorkerAccrualAdjustmentRecId         _recId,
    boolean                                     _forUpdate          = false,
    ConcurrencyModel                            _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollWorkerAccrualAdjustment payrollWorkerAccrualAdjustment;

        payrollWorkerAccrualAdjustment.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollWorkerAccrualAdjustment.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollWorkerAccrualAdjustment
             where payrollWorkerAccrualAdjustment.RecId == _recId;

        return payrollWorkerAccrualAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorkerAccrualAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollWorkerAccrualAdjustment</c> table based on supplied values of the <c>AdjustmentType</c>, <c>TransactionDate</c> and <c>WorkerEnrolledAccrual</c> fields.
    /// </summary>
    /// <param name="_adjustmentType">
    /// The value of the <c>AdjustmentType</c> field to find.
    /// </param>
    /// <param name="_transactionDate">
    /// The value of the <c>TransactionDate</c> field to find.
    /// </param>
    /// <param name="_workerEnrolledAccrual">
    /// The value of the <c>WorkerEnrolledAccrual</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollWorkerAccrualAdjustment</c> table.
    /// </returns>
    public static PayrollWorkerAccrualAdjustment findByWorkerAccrualAdjustment(
    PayrollAccrualAdjustmentType            _adjustmentType,
    PayrollAccrualTransactionDate           _transactionDate,
    PayrollWorkerEnrolledAccrualRecId       _workerEnrolledAccrual,
    boolean                                 _forUpdate          = false,
    ConcurrencyModel                        _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollWorkerAccrualAdjustment payrollWorkerAccrualAdjustment;

        payrollWorkerAccrualAdjustment.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollWorkerAccrualAdjustment.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollWorkerAccrualAdjustment
            where payrollWorkerAccrualAdjustment.AdjustmentType == _adjustmentType &&
                    payrollWorkerAccrualAdjustment.TransactionDate == _transactionDate &&
                    payrollWorkerAccrualAdjustment.WorkerEnrolledAccrual == _workerEnrolledAccrual;

        return payrollWorkerAccrualAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextSequenceNumberByWorkerEnrolledAccrualAndAdjustmentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next number in the number sequence for the given enrolled accrual and adjustment type.
    /// </summary>
    /// <param name="_workerEnrolledAccrualRecId">
    /// The worker enrolled accrual for which to find the maximum sequenceNumber
    /// </param>
    /// <param name="_adjustmentType">
    /// The adjustment type for which to find the maximum sequenceNumber
    /// </param>
    /// <returns>
    /// The next number of the number sequence.
    /// </returns>
    public static SequenceNumber getNextSequenceNumberByWorkerEnrolledAccrualAndAdjustmentType(
    PayrollWorkerEnrolledAccrualRecId _workerEnrolledAccrualRecId,
    PayrollAccrualAdjustmentType _adjustmentType)
    {
        SequenceNumber  maxSequenceNumber;
        PayrollWorkerAccrualAdjustment  payrollWorkerAccrualAdjustmentLocal;

        select maxof(SequenceNumber) from payrollWorkerAccrualAdjustmentLocal
            where payrollWorkerAccrualAdjustmentLocal.WorkerEnrolledAccrual == _workerEnrolledAccrualRecId
                  && payrollWorkerAccrualAdjustmentLocal.AdjustmentType == _adjustmentType;

        maxSequenceNumber = payrollWorkerAccrualAdjustmentLocal.SequenceNumber + 1;

        return maxSequenceNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollworkerbenefitaccrualadjustmentTableStoresTheInform</DeveloperDocumentation>
	<Label>@Payroll:WorkerBenefitAccrualAdjustment</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>WorkerEnrolledAccrual</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Payroll</Modules>
	<ReplacementKey>AccrualAdjustmentSeqIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerEnrolledAccrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustedHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerEnrolledAccrual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerEnrolledAccrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustedHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AdjustedHours</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualAjustedHours</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdjustmentType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PayrollAccrualAdjustmentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS53151</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransactionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualTransactionDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerEnrolledAccrual</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollWorkerEnrolledAccrualRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SequenceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SequenceNumber</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccrualAdjustmentSeqIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AdjustmentType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkerEnrolledAccrual</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollWorkerEnrolledAccrual</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PayrollWorkerEnrolledAccrual</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerEnrolledAccrual</Name>
					<Field>WorkerEnrolledAccrual</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>