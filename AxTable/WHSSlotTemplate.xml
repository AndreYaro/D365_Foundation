<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSlotTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSSlotTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initValue()
    {
        super();

        this.PackedQueryRun = new QueryRun(queryStr(WHSSlotTemplateSales)).pack();
        this.WarehouseGroupAll = WhsWarehouseGroupAll::Warehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void insert()
    {
        if (this.SlotDemandType)
        {
            this.PackedQueryRun = this.defaultPackedQueryRun().pack();
        }
        
        if (this.WarehouseGroupId || this.InventLocationId)
        {
            var queryRun = new QueryRun(this.PackedQueryRun);
            this.queryAddWarehouseRange(queryRun);
            this.PackedQueryRun = queryRun.pack();
        }

        this.setWarehouseSelection();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPackedQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default query run.
    /// </summary>
    /// <returns>The default query run.</returns>
    [Hookable(false)]
    internal QueryRun defaultPackedQueryRun()
    {
        QueryRun queryRun = this.initializeDefaultPackedQueryRun();
        
        if (!queryRun)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.queryAddWarehouseRange(queryRun);
        
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddWarehouseRange</Name>
				<Source><![CDATA[
    private void queryAddWarehouseRange(QueryRun _queryRun)
    {
        switch (this.WarehouseGroupAll)
        {
            case WHSWarehouseGroupAll::Group:
                this.queryAddWarehouseGroupRange(_queryRun);
                break;
            case WHSWarehouseGroupAll::Warehouse:
                this.queryAddInventLocationRange(_queryRun);
                break;
            case WhsWarehouseGroupAll::All:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDefaultPackedQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default packed <c>QueryRun</c> based on the slotting template demand type.
    /// </summary>
    /// <returns>The initialized <c>QueryRun</c> object.</returns>
    protected QueryRun initializeDefaultPackedQueryRun()
    {
        switch (this.SlotDemandType)
        {
            case WHSSlotDemandType::Sales:
                return new QueryRun(queryStr(WHSSlotTemplateSales));

            case WHSSlotDemandType::Transfer:
                return new QueryRun(queryStr(WHSSlotTemplateTransfer));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventLocationRange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void updateInventLocationRange(InventLocationId _locationId)
    {
        if (_locationId)
        {
            QueryRun queryRun = new queryRun(this.PackedQueryRun);
            this.queryAddInventLocationRange(QueryRun, _locationId);
            this.PackedQueryRun = queryRun.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarehouseGroupRange</Name>
				<Source><![CDATA[
    internal void updateWarehouseGroupRange(WhsWarehouseGroupId _warehouseGroupId)
    {
        if (_warehouseGroupId)
        {
            QueryRun queryRun = new queryRun(this.PackedQueryRun);
            this.queryAddWarehouseGroupRange(QueryRun, _warehouseGroupId);
            this.PackedQueryRun = queryRun.pack();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddWarehouseGroupRange</Name>
				<Source><![CDATA[
    private void queryAddWarehouseGroupRange(QueryRun _queryRun, WhsWarehouseGroupId _warehouseGroupId = this.WarehouseGroupId)
    {
        if (this.WarehouseGroupId)
        {
            var qbdsWarehouseGroupLink = this.queryAddWarehouseGroupRangeBasedOnSlotDemandType(_queryRun);

            if (qbdsWarehouseGroupLink)
            {
                QueryBuildRange range = SysQuery::findOrCreateRange(qbdsWarehouseGroupLink, fieldNum(WhsWarehouseGroupLink, WarehouseGroupId));
                range.value(queryValue(this.WarehouseGroupId));
                range.status(RangeStatus::Locked);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddWarehouseGroupRangeBasedOnSlotDemandType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal QueryBuildDataSource queryAddWarehouseGroupRangeBasedOnSlotDemandType(QueryRun _queryRun)
    {
        Query query = _queryRun.query();
        query.dataSourceTable(tableNum(InventDim)).clearRange(fieldNum(InventDim, InventLocationId));

        QueryBuildDataSource qbdsWarehouseGroupLink = query.dataSourceTable(tableNum(WhsWarehouseGroupLink));

        switch (this.SlotDemandType)
        {
            case WHSSlotDemandType::Sales:

                if (!qbdsWarehouseGroupLink)
                {
                    QueryBuildDataSource qbdsInventDim = query.dataSourceTable(tableNum(InventDim));

                    if (qbdsInventDim)
                    {
                        qbdsWarehouseGroupLink = qbdsInventDim.addDataSource(tableNum(WhsWarehouseGroupLink));
                        qbdsWarehouseGroupLink.addLink(fieldNum(InventDim, InventLocationId), fieldNum(WhsWarehouseGroupLink, InventLocationId));
                    }
                }
                break;

            case WHSSlotDemandType::Transfer:
                qbdsWarehouseGroupLink = query.dataSourceTable(tableNum(WhsWarehouseGroupLink));

                if (!qbdsWarehouseGroupLink)
                {
                    QueryBuildDataSource qbdsInventTransferTable = query.dataSourceTable(tableNum(InventTransferTable));
                        
                    if (qbdsInventTransferTable)
                    {
                        qbdsWarehouseGroupLink = qbdsInventTransferTable.addDataSource(tableNum(WhsWarehouseGroupLink));
                        qbdsWarehouseGroupLink.addLink(fieldNum(InventTransferTable, InventLocationIdFrom), fieldNum(WhsWarehouseGroupLink, InventLocationId));
                    }
                }
                break;
        }

        return qbdsWarehouseGroupLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddInventLocationRange</Name>
				<Source><![CDATA[
    private void queryAddInventLocationRange(QueryRun _queryRun, InventLocationId _locationId = this.InventLocationId)
    {
        if (_locationId)
        {
            Query query = _queryRun.query();
            
            this.removeWarehouseGroupLink(query);

            QueryBuildRange range = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventDim)),
                                                                fieldNum(InventDim, InventLocationId));
            range.value(_locationId);
            range.status(RangeStatus::Locked);

            if (this.SlotDemandType == WHSSlotDemandType::Transfer)
            {
                QueryBuildRange qbrTransfer = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventTransferTable)),
                                                                fieldNum(InventTransferTable, InventLocationIdFrom));

                qbrTransfer.value(_locationId);
                qbrTransfer.status(RangeStatus::Locked);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeWarehouseGroupLink</Name>
				<Source><![CDATA[
    private void removeWarehouseGroupLink(Query _query)
    {
        QueryBuildDataSource qbdsWarehouseGroupLink = _query.dataSourceTable(tableNum(WhsWarehouseGroupLink));

        if (qbdsWarehouseGroupLink)
        {
            qbdsWarehouseGroupLink.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean exist(WHSSlotTemplateId _slotTemplateId)
    {
        return _slotTemplateId &&
           (select firstOnly RecId from WHSSlotTemplate
                where WHSSlotTemplate.SlotTemplateId == _slotTemplateId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSSlotTemplate find(
        WHSSlotTemplateId   _slotTemplateId,
        boolean             _forUpdate = false)
    {
        WHSSlotTemplate slotTemplate;

        if (_slotTemplateId)
        {
            if (_forUpdate)
            {
                slotTemplate.selectForUpdate(_forUpdate);
            }

            select firstOnly slotTemplate
                where slotTemplate.SlotTemplateId == _slotTemplateId;
        }

        return slotTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WHSSlotTemplate, WarehouseGroupAll):
                this.setWarehouseSelection();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.setWarehouseSelection();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarehouseSelection</Name>
				<Source><![CDATA[
    private void setWarehouseSelection()
    {
        switch (this.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::Group:
                this.InventLocationId = '';
                break;

            case WhsWarehouseGroupAll::Warehouse:
                this.WarehouseGroupId = '';
                break;

            case WhsWarehouseGroupAll::All:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:SlottingTemplatesDocumentation</DeveloperDocumentation>
	<FormRef>WHSSlotTemplate</FormRef>
	<Label>@WAX:SlottingTemplates</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>SlotTemplateId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>SlotTemplateIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SlotDemandStrategy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SlotDemandType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SlotTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SlotTemplateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackedQueryRun</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SlotDemandStrategy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SlotDemandType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SlotTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseWorkForWaveReplen</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SlotDemandStrategy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSSlotDemandStrategy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SlotDemandType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSSlotDemandType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SlotTemplateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSSlotTemplateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseWorkForWaveReplen</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUseWorkForWaveReplen</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedQueryRun</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PackedQueryRun</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WhsWarehouseGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarehouseGroupAll</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WhsWarehouseGroupAll</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SlotTemplateIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SlotTemplateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WarehouseGroupIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WarehouseGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId1</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WhsWarehouseGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WhsWarehouseGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseGroupId</Name>
					<Field>WarehouseGroupId</Field>
					<RelatedField>WarehouseGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>