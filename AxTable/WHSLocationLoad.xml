<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLocationLoad extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustContainerVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the current volume to include the container's volume.
    /// </summary>
    /// <param name="_containerVolume">
    /// The current volume of the container.
    /// </param>
    /// <param name="_addQty">
    /// True if inventory is being added; false if it is being removed.
    /// </param>
    public void adjustContainerVolume(WHSContainerVolume _containerVolume, boolean _addQty)
    {
        if (_addQty)
        {
            this.CurrentVolume += _containerVolume;
            this.AvailableVolume -= _containerVolume;
        }
        else
        {
            this.CurrentVolume -= _containerVolume;
            this.AvailableVolume += _containerVolume;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustContainerWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the current weight to include the container's weight.
    /// </summary>
    /// <param name="_containerWeight">
    /// The current weight of the container.
    /// </param>
    /// <param name="_addQty">
    /// True if inventory is being added; otherwise, false.
    /// </param>
    public void adjustContainerWeight(WHSTareWeight _containerWeight, boolean _addQty)
    {
        if (_addQty)
        {
            this.CurrentWeight += _containerWeight;
            this.AvailableWeight -= _containerWeight;
        }
        else
        {
            this.CurrentWeight -= _containerWeight;
            this.AvailableWeight += _containerWeight;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustCurrentVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the current volume.
    /// </summary>
    /// <param name="_currentVolumeDelta">
    /// The difference between the new value of the current volume and the old one.
    /// </param>
    public void adjustCurrentVolume(Volume _currentVolumeDelta)
    {
        this.CurrentVolume += _currentVolumeDelta;
        this.AvailableVolume -= _currentVolumeDelta;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustCurrentWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the current weight.
    /// </summary>
    /// <param name="_currentWeightDelta">
    /// The difference between the new value of the current weight and the old one.
    /// </param>
    public void adjustCurrentWeight(Weight _currentWeightDelta)
    {
        this.CurrentWeight += _currentWeightDelta;
        this.AvailableWeight -= _currentWeightDelta;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustForOnHandChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the load according to the change in the physical on hand.
    /// </summary>
    /// <param name="_args">
    /// The information about the change in the physical on hand.
    /// </param>
    /// <param name="_unitConverter">
    /// An instance of the unit converter; optional.
    /// </param>
    public void adjustForOnHandChange(InventPhysicalOnHandChangeArgs _args, EcoResReleasedProductUnitConverter _unitConverter = null)
    {
        WHSLocationProfile  locationProfile = _args.parmWHSLocationProfile();
        WHSPhysDimUOM       requestedUnitDimensions;
        Qty                 qtyInRequestedUnit;
        boolean             addContainerWeightVolume;
        boolean             clearContainerWeightVolume;

        ItemId itemId = _args.parmItemId();
        UnitOfMeasureSymbol inventHandlingUnitId;  
        InventHandlingQty inventHandlingQty;
        
        if (PdsGlobal::pdsIsCWItem(itemId))
        {
            inventHandlingQty = _args.parmDeltaCWQuantity(); 
            inventHandlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(itemId);
        }
        else
        {
            inventHandlingQty =  _args.parmDeltaQuantity(); 
            inventHandlingUnitId = _args.parmInventUnitId();        
        }    
        
        InventDim inventDim = _args.parmInventDim();
        WHSContainerType containerType = WHSContainerType::find(WHSLicensePlate::find(inventDim.LicensePlateId).ContainerTypeCode);

        UnitOfMeasureSymbol unitId = locationProfile.StorageUnit ? locationProfile.StorageUnit : inventHandlingUnitId;

        if (inventHandlingUnitId != unitId)
        {
            _unitConverter = _unitConverter ? _unitConverter : EcoResReleasedProductUnitConverter::construct();
            qtyInRequestedUnit = _unitConverter.convert(inventHandlingQty,
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(inventHandlingUnitId),
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(unitId),
                                                    NoYes::No,
                                                    itemId,
                                                    _args.parmInventDimId(),
                                                    NoYes::No);
        }
        else
        {
            qtyInRequestedUnit = inventHandlingQty;
        }

        // If we are dealing with a container
        if (containerType.RecId != 0)
        {
            InventDimParm inventDimParm = this.initInventDimParm();

            // If we are adding Qty
            if (qtyInRequestedUnit > 0)
            {
                // We only need to check one time if license plate is added to the location in a transaction
                if (!SysTransactionScopeCache::get(tableStr(WHSLocationLoad), this.getCacheKeyValueForLPIncreaseQty(inventDim), false))
                {
                    // Verify that inventory records do not already exist for the LP and location
                    addContainerWeightVolume = this.isLicensePlateEmpty(inventDim, inventDimParm);

                    SysTransactionScopeCache::set(tableStr(WHSLocationLoad), this.getCacheKeyValueForLPIncreaseQty(inventDim), true);
                }
            }
            // If removing qty, must check if license plate will exist on location afterwards
            else if (qtyInRequestedUnit < 0)
            {
                // determine if we have removed all from the licenseplate so we need to remove container weight
                clearContainerWeightVolume = this.isEmptyingLicensePlate(inventDim, inventDimParm, _args);

                // Clear transaction cache since we do not know how much was added and subtracted in the entire transaction, so we need to re-evaluate if this method is called for a receipt (positive quantity)
                if (clearContainerWeightVolume)
                {
                    SysTransactionScopeCache::remove(tableStr(WHSLocationLoad), this.getCacheKeyValueForLPIncreaseQty(inventDim));
                }
            }
        }

        requestedUnitDimensions = WHSPhysDimUOM::getPhysDimUOMByItem(itemId, unitId);

        if (locationProfile.MaxWeight)
        {
            this.adjustCurrentWeight(requestedUnitDimensions.Weight * qtyInRequestedUnit);

            if (containerType.RecId)
            {
                // Adding inventory to a location where the container does not already exist, therefore add container weight
                if (addContainerWeightVolume)
                {
                    this.adjustContainerWeight(containerType.TareWeight, true);
                }
                // Reducing the entire license plate worth of inventory, so remove the container weight
                else if (clearContainerWeightVolume)
                {
                    this.adjustContainerWeight(containerType.TareWeight, false);
                }
            }
        }

        if (locationProfile.isVolumeConstraintEnabled())
        {
            if (!containerType.RecId
            ||  containerType.FlexibleVolumeDimensions)
            {
                this.adjustCurrentVolume(requestedUnitDimensions.displayVolume() * qtyInRequestedUnit);
            }

            // Must handle a container's volume if needed.
            if (containerType.RecId)
            {
                // Adding inventory to a location where the container does not already exist, therefore add container volume
                if (addContainerWeightVolume)
                {
                    this.adjustContainerVolume(containerType.ContainerVolume, true);
                }
                // Reducing the entire license plate worth of inventory, so remove the container volume
                else if (clearContainerWeightVolume)
                {
                    this.adjustContainerVolume(containerType.ContainerVolume, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKeyValueForLPIncreaseQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create a cache key for a set of inventory dimensions.
    /// </summary>
    /// <param name="_inventDim">
    ///  The inventory dimensions.
    /// </param>
    /// <returns>
    ///  Returns a string representing the cache key.
    /// </returns>
    private str getCacheKeyValueForLPIncreaseQty(InventDim _inventDim)
    {
        return strFmt('%1#%2#%3', _inventDim.InventLocationId, _inventDim.wMSLocationId, _inventDim.LicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves the physical on hand and physical catch weight quantity for an inventory dimension set.
    /// </summary>
    /// <param name="_inventDimCriteria">
    ///  The inventory dimensions.
    /// </param>
    /// <param name="_inventDimParm">
    ///  The inventory dimension parameters.
    /// </param>
    /// <returns>
    ///  Returns the physical on hand quantities in a container.
    /// </returns>
   

    private boolean isLicensePlateEmpty(
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        InventSumUnionDeltaPhysicalQty inventSumUnionDeltaPhysicalQty = this.inventSumUnionDeltaPhysicalQtyForLicensePlate(_inventDimCriteria, _inventDimParm);

        return (inventSumUnionDeltaPhysicalQty.PhysicalInvent == 0 && inventSumUnionDeltaPhysicalQty.PdsCWPhysicalInvent == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyingLicensePlate</Name>
				<Source><![CDATA[
    private boolean isEmptyingLicensePlate(
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParm,
        InventPhysicalOnHandChangeArgs  _args)
    {
        InventSumUnionDeltaPhysicalQty inventSumUnionDeltaPhysicalQty = this.inventSumUnionDeltaPhysicalQtyForLicensePlate(_inventDimCriteria, _inventDimParm);

        return (inventSumUnionDeltaPhysicalQty.PhysicalInvent == abs(_args.parmDeltaQuantity()) && inventSumUnionDeltaPhysicalQty.PdsCWPhysicalInvent == abs(_args.parmDeltaCWQuantity()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSumUnionDeltaPhysicalQtyForLicensePlate</Name>
				<Source><![CDATA[
    private InventSumUnionDeltaPhysicalQty inventSumUnionDeltaPhysicalQtyForLicensePlate(
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        InventSumUnionDeltaPhysicalQty  inventSumUnionDeltaPhysicalQty;
        InventDim                       inventDimJoin;

        select sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSumUnionDeltaPhysicalQty
            #InventDimExistsJoin(inventSumUnionDeltaPhysicalQty.InventDimId, inventDimJoin, _inventDimCriteria, _inventDimParm);

        return inventSumUnionDeltaPhysicalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEqualLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record stores the same weight/volume as the other one.
    /// </summary>
    /// <param name="_otherLocationLoad">
    /// The other location load.
    /// </param>
    /// <returns>
    /// true, if both records store the same load; otherwise, false.
    /// </returns>
    public boolean hasEqualLoad(WHSLocationLoad _otherLocationLoad)
    {
        return this.CurrentVolume == _otherLocationLoad.CurrentVolume
            && this.CurrentWeight == _otherLocationLoad.CurrentWeight
            && this.AvailableVolume == _otherLocationLoad.AvailableVolume
            && this.AvailableWeight == _otherLocationLoad.AvailableWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLocationLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record based on the values from the other location load record.
    /// </summary>
    /// <param name="_locationLoad">
    /// The other location load record.
    /// </param>
    public void initFromLocationLoad(WHSLocationLoad _locationLoad)
    {
        this.InventLocationId = _locationLoad.InventLocationId;
        this.WMSLocationId = _locationLoad.WMSLocationId;

        this.CurrentVolume = _locationLoad.CurrentVolume;
        this.CurrentWeight = _locationLoad.CurrentWeight;

        this.AvailableVolume = _locationLoad.AvailableVolume;
        this.AvailableWeight = _locationLoad.AvailableWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds location load for the specified location.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The ID of the warehouse.
    /// </param>
    /// <param name="_wmsLocationId">
    /// The ID of the location.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean parameter that indicates whether the location load record should be selected for update.
    /// </param>
    /// <returns>
    /// The location load for the specified location.
    /// </returns>
    public static WHSLocationLoad find(InventLocationId _inventLocationId, WMSLocationId _wmsLocationId, boolean _forupdate = false)
    {
        WHSLocationLoad locationLoad;

        if (_inventLocationId && _wmsLocationId)
        {
            locationLoad.selectForUpdate(_forupdate);

            select firstOnly locationLoad
            where locationLoad.InventLocationId == _inventLocationId
                && locationLoad.WMSLocationId == _wmsLocationId;
        }

        return locationLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixSynchronouslyNoWarnings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that location load information
    /// is consistent for a new location.
    /// </summary>
    /// <param name="_locationsQuery">
    /// A query that determines which locations need to be analyzed.
    /// </param>
    public static void fixSynchronouslyNoWarnings(Query _locationsQuery)
    {
        if (_locationsQuery)
        {
            WHSConsistencyCheck_LocationLoad::fixSynchronouslyNoWarnings(_locationsQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixLoadForLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules a batch job that ensures that location load information
    /// is consistent with the physical on hand information.
    /// </summary>
    /// <param name="_locationsQuery">
    /// A query that determines which locations need to be analyzed.
    /// </param>
    public static void fixLoadForLocations(Query _locationsQuery)
    {
        if (_locationsQuery 
            && QueryRun::getQueryRowCount(_locationsQuery, 1) != 0)
        {
            WHSConsistencyCheck_LocationLoad::scheduleFixAsBatchJob(_locationsQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds location load for the specified location.
    /// </summary>
    /// <param name="_wmsLocation">
    /// The location record.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean parameter that indicates whether the location load record should be selected for update.
    /// </param>
    /// <returns>
    /// The location load for the specified location.
    /// </returns>
    public static WHSLocationLoad findByLocation(WMSLocation _wmsLocation, boolean _forupdate = false)
    {
        return WHSLocationLoad::find(_wmsLocation.inventLocationId, _wmsLocation.wMSLocationId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsByLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existsByLocation(WMSLocation _wmsLocation)
    {
        WHSLocationLoad locationLoad;

        if (_wmsLocation.inventLocationId && _wmsLocation.wMSLocationId)
        {
            select firstOnly RecId from locationLoad
                where locationLoad.InventLocationId == _wmsLocation.inventLocationId
                    && locationLoad.WMSLocationId == _wmsLocation.wMSLocationId;
        }

        return locationLoad.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVolumetricsPopulated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isVolumetricsPopulated()
    {
        return this.CurrentVolume 
            || this.CurrentWeight
            || this.AvailableVolume
            || this.AvailableWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDelta</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void applyDelta(WHSLocationLoad _locationLoadDelta)
    {
        this.CurrentVolume += _locationLoadDelta.CurrentVolume;
        this.CurrentWeight += _locationLoadDelta.CurrentWeight;
        this.AvailableVolume += _locationLoadDelta.AvailableVolume;
        this.AvailableWeight += _locationLoadDelta.AvailableWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStorageUnitForVolumetricEnabledProfile</Name>
				<Source><![CDATA[
    private static boolean isStorageUnitForVolumetricEnabledProfile(UnitOfMeasureSymbol _unitId)
    {
        WHSVolumetricsEnabledLocationProfile locationProfile;

        select crossCompany RecId from locationProfile
            where locationProfile.StorageUnit == _unitId;

        return locationProfile.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationsToFixOnLocationWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects warehouse locations where location loads
    /// may need to be corrected when the specified change to the warehouse location happens.
    /// </summary>
    /// <param name="_location">
    /// The new state of the warehouse location record.
    /// </param>
    /// <param name="_isNewLocation">
    /// A boolean determining if this is a new location.
    /// </param>
    /// <param name="_origLocation">
    /// The state of the warehouse location record before the update.
    /// </param>
    /// <returns>
    /// A query that selects warehouse locations with volumetrics enabled in the location profile
    /// </returns>
    public static Query locationsToFixOnLocationWrite(
        WMSLocation _location,
        WMSLocation _origLocation = _location.orig(),
        boolean     _isNewLocation = false)
    {
        Query query;

        if (_location.LocProfileId != _origLocation.LocProfileId)
        {
            WHSLocationProfile locationProfile = _location.whsLocationProfile();
            WHSLocationProfile origLocationProfile = _origLocation.whsLocationProfile();

            if (locationProfile.isVolumetricsEnabled() || origLocationProfile.isVolumetricsEnabled())
            {
                query = new Query();
                QueryBuildDataSource dsLocation = query.addDataSource(tableNum(WMSLocation));
                dsLocation.addRange(fieldNum(WMSLocation, RecId)).value(queryValue(_location.RecId));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationsToFixOnPhysDimWriteDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects warehouse locations where location loads
    /// may need to be corrected when the specified physical dimensions record is inserted, updated or deleted.
    /// </summary>
    /// <param name="_physicalDimensions">
    /// The physical dimensions record.
    /// </param>
    /// <returns>
    /// A query that selects warehouse locations where location loads
    /// may need to be corrected when the specified physical dimensions record is inserted, updated or deleted.
    /// </returns>
    public static Query locationsToFixOnPhysDimWriteDelete(WHSPhysDimUOM _physicalDimensions)
    {
        Query query;
        QueryBuildDataSource dsLocation, dsLocationLoad, dsInventDim, dsInventSum, dsWHSInventTable;

        query = new Query();

        dsLocation = query.addDataSource(tableNum(WMSLocation));

        dsLocationLoad = dsLocation.addDataSource(tableNum(WHSLocationLoad));
        dsLocationLoad.relations(true);
        dsLocationLoad.joinMode(JoinMode::ExistsJoin);
        dsLocationLoad.fetchMode(QueryFetchMode::One2One);

        dsInventDim = dsLocation.addDataSource(tableNum(InventDim));
        dsInventDim.relations(true);
        dsInventDim.joinMode(JoinMode::ExistsJoin);
        dsInventDim.fetchMode(QueryFetchMode::One2One);

        dsInventSum = dsInventDim.addDataSource(tableNum(InventSum));
        dsInventSum.relations(true);
        dsInventSum.joinMode(JoinMode::ExistsJoin);
        dsInventSum.fetchMode(QueryFetchMode::One2One);

        if (_physicalDimensions.ItemId)
        {
            dsInventSum.addRange(fieldNum(InventSum, ItemId)).value(queryValue(_physicalDimensions.ItemId));
        }

        dsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        dsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value('>0');

        if (!_physicalDimensions.ItemId)
        {
            dsWHSInventTable = dsInventSum.addDataSource(tableNum(WHSInventTable));
            dsWHSInventTable.addLink(fieldNum(InventSum, ItemId), fieldNum(WHSInventTable, ItemId));
            dsWHSInventTable.joinMode(JoinMode::ExistsJoin);
            dsWHSInventTable.fetchMode(QueryFetchMode::One2One);
            dsWHSInventTable.addRange(fieldNum(WHSInventTable, PhysDimId)).value(queryValue(_physicalDimensions.PhysDimId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationsToFixOnProfileUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects warehouse locations where location loads
    /// may need to be corrected when the specified change to the warehouse location profile happens.
    /// </summary>
    /// <param name="_locationProfile">
    /// The new state of the warehouse location profile record.
    /// </param>
    /// <param name="_origLocationProfile">
    /// The state of the warehouse location profile record before the update.
    /// </param>
    /// <returns>
    /// A query that selects warehouse locations where location loads
    /// may need to be corrected when the specified change to the warehouse location profile happens.
    /// </returns>
    public static Query locationsToFixOnProfileUpdate(
        WHSLocationProfile _locationProfile,
        WHSLocationProfile _origLocationProfile = _locationProfile.orig())
    {
        Query query;
        QueryBuildDataSource dsLocation, dsLocationLoad;

        if (_locationProfile.MaxWeight != _origLocationProfile.MaxWeight
        || _locationProfile.maxFillVolume() != _origLocationProfile.maxFillVolume()
        || _locationProfile.StorageUnit != _origLocationProfile.StorageUnit)
        {
            query = new Query();
            dsLocation = query.addDataSource(tableNum(WMSLocation));
            dsLocation.addRange(fieldNum(WMSLocation, LocProfileId)).value(queryValue(_locationProfile.LocProfileId));

            dsLocationLoad = dsLocation.addDataSource(tableNum(WHSLocationLoad));
            dsLocationLoad.relations(true);
            dsLocationLoad.joinMode(JoinMode::ExistsJoin);
            dsLocationLoad.fetchMode(QueryFetchMode::One2One);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationsToFixOnUnitConversionUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects warehouse locations where location loads
    /// may need to be corrected when the specified change to the unit of measure conversions happens.
    /// </summary>
    /// <param name="_conversion">
    /// The new state of the unit conversion record.
    /// </param>
    /// <param name="_origConversion">
    /// The state of the unit conversion record before the update.
    /// </param>
    /// <returns>
    /// A query that selects warehouse locations where location loads
    /// may need to be corrected when the specified change to the unit of measure conversions happens.
    /// </returns>
    public static Query locationsToFixOnUnitConversionUpdate(
        UnitOfMeasureConversion _conversion,
        UnitOfMeasureConversion _origConversion = _conversion.orig())
    {
        UnitOfMeasure fromUnit;
        UnitOfMeasure toUnit;
        UnitOfMeasure storageUnit;
        UnitOfMeasure inventUnit;

        Query query;
        QueryBuildDataSource dsLocation, dsLocationLoad, dsLocationProfile, dsInventDim, dsInventSum, dsInventTableModule, dsInventTable;

        if (isConfigurationKeyEnabled(configurationkeynum(WHSandTMS)))
        {
            fromUnit = UnitOfMeasure::find(_conversion.FromUnitOfMeasure);
            toUnit = UnitOfMeasure::find(_conversion.ToUnitOfMeasure);

            if (WHSLocationLoad::isStorageUnitForVolumetricEnabledProfile(fromUnit.Symbol))
            {
                storageUnit = fromUnit;
                inventUnit = toUnit;
            }
            else if (WHSLocationLoad::isStorageUnitForVolumetricEnabledProfile(toUnit.Symbol))
            {
                storageUnit = toUnit;
                inventUnit = fromUnit;
            }

            if (storageUnit)
            {
                query = new Query();

                query.allowCrossCompany(true);

                dsLocation = query.addDataSource(tableNum(WMSLocation));

                dsLocationLoad = dsLocation.addDataSource(tableNum(WHSLocationLoad));
                dsLocationLoad.relations(true);
                dsLocationLoad.joinMode(JoinMode::ExistsJoin);
                dsLocationLoad.fetchMode(QueryFetchMode::One2One);

                dsLocationProfile = dsLocation.addDataSource(tableNum(WHSLocationProfile));
                dsLocationProfile.relations(true);
                dsLocationProfile.joinMode(JoinMode::ExistsJoin);
                dsLocationProfile.fetchMode(QueryFetchMode::One2One);
                dsLocationProfile.addRange(fieldNum(WHSLocationProfile, StorageUnit)).value(queryValue(storageUnit.Symbol));

                dsInventDim = dsLocation.addDataSource(tableNum(InventDim));
                dsInventDim.relations(true);
                dsInventDim.joinMode(JoinMode::ExistsJoin);
                dsInventDim.fetchMode(QueryFetchMode::One2One);

                dsInventSum = dsInventDim.addDataSource(tableNum(InventSum));
                dsInventSum.relations(true);
                dsInventSum.joinMode(JoinMode::ExistsJoin);
                dsInventSum.fetchMode(QueryFetchMode::One2One);
                dsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
                dsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value('>0');

                dsInventTableModule = dsInventSum.addDataSource(tableNum(InventTableModule));
                dsInventTableModule.addLink(fieldNum(InventSum, ItemId), fieldNum(InventTableModule, ItemId));
                dsInventTableModule.joinMode(JoinMode::ExistsJoin);
                dsInventTableModule.fetchMode(QueryFetchMode::One2One);
                dsInventTableModule.addRange(fieldNum(InventTableModule, UnitId)).value(queryValue(inventUnit.Symbol));

                if (_conversion.Product)
                {
                    dsInventTable = dsInventSum.addDataSource(tableNum(InventTable));
                    dsInventTable.relations(true);
                    dsInventTable.joinMode(JoinMode::ExistsJoin);
                    dsInventTable.fetchMode(QueryFetchMode::One2One);
                    dsInventTable.addRange(fieldNum(InventTable, Product)).value(queryValue(_conversion.Product));
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationsToFixOnWHSInventTableWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects warehouse locations where location loads
    /// may need to be corrected when the specified change to the <c>WHSInventTable</c> record happens.
    /// </summary>
    /// <param name="_whsInventTable">
    /// The new state of the <c>WHSInventTable</c> record.
    /// </param>
    /// <param name="_origWHSInventTable">
    /// The state of the <c>WHSInventTable</c> record before the update.
    /// </param>
    /// <returns>
    /// A query that selects warehouse locations where location loads
    /// may need to be corrected when the specified change to the <c>WHSInventTable</c> record happens.
    /// </returns>
    public static Query locationsToFixOnWHSInventTableWrite(
        WHSInventTable _whsInventTable,
        WHSInventTable _origWHSInventTable = _whsinventTable.orig())
    {
        Query query;
        QueryBuildDataSource dsLocation, dsLocationLoad, dsInventDim, dsInventSum;

        if (_whsInventTable.PhysDimId != _origWHSInventTable.PhysDimId)
        {
            query = new Query();

            dsLocation = query.addDataSource(tableNum(WMSLocation));

            dsLocationLoad = dsLocation.addDataSource(tableNum(WHSLocationLoad));
            dsLocationLoad.relations(true);
            dsLocationLoad.joinMode(JoinMode::ExistsJoin);
            dsLocationLoad.fetchMode(QueryFetchMode::One2One);

            dsInventDim = dsLocation.addDataSource(tableNum(InventDim));
            dsInventDim.relations(true);
            dsInventDim.joinMode(JoinMode::ExistsJoin);
            dsInventDim.fetchMode(QueryFetchMode::One2One);

            dsInventSum = dsInventDim.addDataSource(tableNum(InventSum));
            dsInventSum.relations(true);
            dsInventSum.joinMode(JoinMode::ExistsJoin);
            dsInventSum.fetchMode(QueryFetchMode::One2One);
            dsInventSum.addRange(fieldNum(InventSum, ItemId)).value(queryValue(_whsInventTable.ItemId));
            dsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
            dsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value('>0');
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLocationOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record based on the information about the physical on hand for the specified location.
    /// </summary>
    /// <param name="_location">
    /// The location record.
    /// </param>
    /// <param name="_locationProfile">
    /// The profile of the specified location; optional.
    /// </param>
    /// <param name="_licensePlateId">
    /// The license plate on the location.
    /// </param>
    public void initFromLocationOnHand(
        WMSLocation         _location,
        WHSLocationProfile  _locationProfile = WHSLocationProfile::find(_location.LocProfileId),
        WHSLicensePlateId   _licensePlateId = '')
    {
        WHSLocationTotalWeightVolumeCalculator loadCalculator;
        WHSContainerTypeCode                   containerTypeCode;

        this.InventLocationId = _location.inventLocationId;
        this.WMSLocationId = _location.wMSLocationId;

        if (_licensePlateId != '')
        {
            containerTypeCode = WHSLicensePlate::find(_licensePlateId).ContainerTypeCode;
        }

        loadCalculator = WHSLocationTotalWeightVolumeCalculator::newForLocationOnHand(_location, _locationProfile.StorageUnit);
        loadCalculator.parmContainerTypeCode(containerTypeCode);

        if (_locationProfile.isVolumeConstraintEnabled())
        {
            this.CurrentVolume = loadCalculator.calculateTotalVolume();
            this.AvailableVolume = _locationProfile.maxFillVolume() - this.CurrentVolume;
        }
        else
        {
            this.CurrentVolume = 0;
            this.AvailableVolume = 0;
        }

        if (_locationProfile.MaxWeight)
        {
            this.CurrentWeight = loadCalculator.calculateTotalWeight();
            this.AvailableWeight = _locationProfile.maxFillWeight() - this.CurrentWeight;
        }
        else
        {
            this.CurrentWeight = 0;
            this.AvailableWeight = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParm</Name>
				<Source><![CDATA[
    private InventDimParm initInventDimParm()
    {
        InventDimParm   inventDimParm;

        inventDimParm.InventSiteIdFlag      = NoYes::Yes;
        inventDimParm.InventLocationIdFlag  = NoYes::Yes;
        inventDimParm.WMSLocationIdFlag     = NoYes::Yes;
        inventDimParm.LicensePlateFlag      = NoYes::Yes;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateLoadForLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the load for the specified warehouse location.
    /// </summary>
    /// <param name="_location">
    /// The warehouse location record.
    /// </param>
    public static void recalculateLoadForLocation(WMSLocation _location)
    {
        WHSLocationLoad locationLoad;

        ttsBegin;

        locationLoad = WHSLocationLoad::findByLocation(_location, true);

        locationLoad.initFromLocationOnHand(_location);

        locationLoad.write();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSAndTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSLocationLoadTableDevDoc</DeveloperDocumentation>
	<Label>@SYS324585</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InventLocationId</TitleField1>
	<TitleField2>WMSLocationId</TitleField2>
    <AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WMSLocationIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<ReplacementKey>WMSLocationIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailableVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentVolume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AvailableWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentWeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AvailableVolume</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Volume</ExtendedDataType>
			<Label>@SYS134567</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CurrentVolume</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSCurrentVolume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AvailableWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Weight</ExtendedDataType>
			<Label>@SYS134569</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CurrentWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSCurrentWeight</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WMSLocationIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WMSLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>