<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PRLDeductionArrearRecovery</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PRLDeductionArrearRecovery extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        HcmWorkerEnrolledBenefit        workerEnrolledBenefit;
        PayrollPayStatement             payStatement;
        PayrollPayPeriod                payPeriod;
        utcdatetime                     companyEndOfPayPeriod;
        PRLDeductionArrear              deductionArrear;

        ttsbegin;
        payStatement = PayrollPayStatement::find(this.PayStatement);

        // Get the arrear to adjust its FullyRecovered flag since deleting this recovery will cause it to no longer be fully recovered
        deductionArrear = PRLDeductionArrear::find(this.DeductionArrear, true);
        if (deductionArrear.FullyRecovered)
        {
            deductionArrear.FullyRecovered = false;
            deductionArrear.update();
        }

        payPeriod = PayrollPayPeriod::find(payStatement.PayPeriod);
        companyEndOfPayPeriod = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(payPeriod.PeriodEndDate, timeMax()), DateTimeUtil::getCompanyTimeZone());

        workerEnrolledBenefit = HcmWorkerEnrolledBenefit::findByWorkerBenefit(payStatement.Worker, deductionArrear.Benefit, companyEndOfPayPeriod);

        if (workerEnrolledBenefit.RecId)
        {
            //
            // Since an arrear is basically being added back by this deletion, correspondingly reduce the amount remaining for the benefit limit,
            // if a limit is in place.  Remember that recovery records have negative amounts, so the logic is the inverse of what is expected.
            //
            PayrollWorkerEnrolledBenefitLimit::adjustBenefitLimitAmount(this.AccountingCurrencyAmount, workerEnrolledBenefit.RecId, false, payPeriod, true);
        }

        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        HcmWorkerEnrolledBenefit        workerEnrolledBenefit;
        PayrollPayStatement             payStatement;
        PayrollPayPeriod                payPeriod;
        PRLDeductionArrear              deductionArrear;
        utcdatetime                     companyEndOfPayPeriod;

        ttsbegin;
        payStatement = PayrollPayStatement::find(this.PayStatement);
        deductionArrear = PRLDeductionArrear::find(this.DeductionArrear);

        payPeriod = PayrollPayPeriod::find(payStatement.PayPeriod);
        companyEndOfPayPeriod = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(payPeriod.PeriodEndDate, timeMax()), DateTimeUtil::getCompanyTimeZone());

        workerEnrolledBenefit = HcmWorkerEnrolledBenefit::findByWorkerBenefit(payStatement.Worker, deductionArrear.Benefit, companyEndOfPayPeriod);

        if (workerEnrolledBenefit.RecId)
        {
            //
            // Since an arrear is basically being reduced by this insertion, correspondingly increase the amount remaining for the benefit limit,
            // if a limit is in place.  Remember that recovery records have negative amounts, so the logic is the inverse of what is expected.
            //
            PayrollWorkerEnrolledBenefitLimit::adjustBenefitLimitAmount(-this.AccountingCurrencyAmount, workerEnrolledBenefit.RecId, false, payPeriod, true);
        }

        super();

        this.setFullyRecovered();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFullyRecovered</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets whether the amount of the arrear has been fully recovered.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void setFullyRecovered()
    {
        PRLDeductionArrear                  deductionArrear;
        PRLDeductionArrearRecovery          deductionArrearRecovery;

        // Get the arrear to potentially adjust its FullyRecovered flag as appropriate
        select firstonly forupdate deductionArrear
            where deductionArrear.RecId == this.DeductionArrear;

        // Calculate the amount the arrear has been recovered (including this new recovery record)
        select sum(AccountingCurrencyAmount) from deductionArrearRecovery
            where deductionArrearRecovery.DeductionArrear == this.DeductionArrear;

        // If the recovery amounts sum fully recovers the arrear, flag it as such
        deductionArrear.FullyRecovered = (deductionArrear.AccountingCurrencyAmount + deductionArrearRecovery.AccountingCurrencyAmount == 0);
        deductionArrear.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        HcmWorkerEnrolledBenefit        workerEnrolledBenefit;
        PayrollPayStatement             payStatement;
        PayrollPayPeriod                payPeriod;
        PRLDeductionArrear              deductionArrear;
        utcdatetime                     companyEndOfPayPeriod;

        ttsbegin;
        if (this.AccountingCurrencyAmount != this.orig().AccountingCurrencyAmount)
        {
            payStatement = PayrollPayStatement::find(this.PayStatement);
            deductionArrear = PRLDeductionArrear::find(this.DeductionArrear);

            payPeriod = PayrollPayPeriod::find(payStatement.PayPeriod);
            companyEndOfPayPeriod = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(payPeriod.PeriodEndDate, timeMax()), DateTimeUtil::getCompanyTimeZone());

            workerEnrolledBenefit = HcmWorkerEnrolledBenefit::findByWorkerBenefit(payStatement.Worker, deductionArrear.Benefit, companyEndOfPayPeriod);

            if (workerEnrolledBenefit.RecId)
            {
                // Correspondingly adjust the amount remaining for the benefit limit, if a limit is in place
                PayrollWorkerEnrolledBenefitLimit::adjustBenefitLimitAmount(this.orig().AccountingCurrencyAmount - this.AccountingCurrencyAmount, workerEnrolledBenefit.RecId, false, payPeriod, true);
            }
        }

        super();

        this.setFullyRecovered();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates and inserts a new record into the <c>PRLDeductionArrearRecovery</c> table.
    /// </summary>
    /// <param name="_arrearRecId">
    ///     The record Id for the <c>PRLDeductionArrear</c> record being recovered against.
    /// </param>
    /// <param name="_offsetType">
    ///     The type of recovery record being created can be either Recovery or Adjustment.
    /// </param>
    /// <param name="_recoveryAmount">
    ///     The amount to recover against the arrear.
    /// </param>
    /// <param name="_payStatementRecId">
    ///     The record Id for the <c>PayrollPayStatement</c> record that is recovering
    ///     the arrear.
    /// </param>
    /// <returns>
    ///     The newly created <c>PRLDeductionArrearRecovery</c> record.
    /// </returns>
    /// <remarks>
    ///     The <paramref>_payStatementRecId</paramref> parameter is optional for recovery records
    ///     that are adjustments.
    /// </remarks>
    public static PRLDeductionArrearRecovery create(
        RefRecId                            _arrearRecId,
        PRLArrearOffsetType                 _offsetType,
        AmountMST                           _recoveryAmount,
        PayrollPayStatementRecId            _payStatementRecId = 0)
    {
        PRLDeductionArrearRecovery      arrearRecovery;

        ttsbegin;
        arrearRecovery.DeductionArrear                  = _arrearRecId;
        arrearRecovery.PayStatement                     = _payStatementRecId;
        arrearRecovery.OffsetType                       = _offsetType;
        arrearRecovery.AccountingCurrencyAmount         = _recoveryAmount;
        arrearRecovery.insert();
        ttscommit;

        return arrearRecovery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PRLDeductionArrearRecovery</c> table by using the specified record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PRLDeductionArrearRecovery</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PRLDeductionArrearRecovery find(
        RefRecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PRLDeductionArrearRecovery deductionArrearRecovery;

        deductionArrearRecovery.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            deductionArrearRecovery.concurrencyModel(_concurrencyModel);
        }

        select firstonly deductionArrearRecovery
            where deductionArrearRecovery.RecId == _recId;

        return deductionArrearRecovery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePrldeductionarrearrecoveryTableContainsAllTheOffsetTransa</DeveloperDocumentation>
	<Label>@Payroll:DeductionArrearsRecovery</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>DeductionArrear</TitleField1>
	<TitleField2>OffsetType</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Payroll</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeductionArrear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeductionArrear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@Payroll:Overview</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccountingCurrencyAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollStatementAccountingCurrencyAmount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeductionArrear</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@Payroll:ArrearsTransaction</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Payroll:ArrearsChangeType</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>PRLArrearOffsetType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PayStatement</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollPayStatementRecId</ExtendedDataType>
			<Label>@Payroll:PayStatement2</Label>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CreatedDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PRLDeductionArrearIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeductionArrear</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PRLDeductionArrear</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PRLDeductionArrear</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeductionArrear</Name>
					<Field>DeductionArrear</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RecoveringPayStatement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PayrollPayStatement</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayStatement</Name>
					<Field>PayStatement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>