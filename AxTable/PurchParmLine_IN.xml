<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchParmLine_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchParmLine_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromPurchParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current record from a given purchase parameter line.
    /// </summary>
    /// <param name="_purchParmLine">
    ///    The <c>PurchParmLine</c> table record to initialize from.
    /// </param>
    void initFromPurchParmLine(PurchParmLine _purchParmLine)
    {
        this.PurchParmLine = _purchParmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);
        if (ret && PurchParmLineINModifyReceivedValidateReceiveNowFlight::instance().isEnabled())
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PurchParmLine_IN, ReceivedQty):
                case fieldNum(PurchParmLine_IN, AcceptedQty):
                case fieldNum(PurchParmLine_IN, RejectedQty):
                    if (TaxParameters::checkTaxParameters_IN())
                    {
                        PurchParmLine purchParmLine = this.SysExtensionSerializerExtensionMap::getBaseTable(true);
                        this.setGRNValues(_fieldIdToCheck);
                        purchParmLine.ReceiveNow = this.AcceptedQty;
                        return purchParmLine.validateField(fieldNum(PurchParmLine, ReceiveNow));
                    }
                    break;
                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when a filed is modified
    /// </summary>
    /// <param name="_fieldId">
    /// The field that has been modified
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        PurchParmLine   purchParmLine;
        PurchParmTable  purchParmTable;

        purchParmLine = this.SysExtensionSerializerExtensionMap::getBaseTable(true);
        purchParmTable = PurchParmTable::find(purchParmLine.ParmId, purchParmLine.TableRefId);

        super(_fieldId);

        ttsBegin;
        switch (_fieldId)
        {
            case fieldNum(PurchParmLine_IN, AssessableValueAccountingCurrency):
                if (purchParmTable.Ordering == DocumentStatus::BillOfEntry_IN)
                {
                    this.AssessableValueTransactionCurrency = TaxAssessableValueHandler_IN::calcAssessableValue(this.AssessableValueAccountingCurrency,purchParmLine.currencyCode,purchParmTable.TransDate);
                }
                break;
            case fieldNum(PurchParmLine_IN, ReceivedQty):
            case fieldNum(PurchParmLine_IN, AcceptedQty):
            case fieldNum(PurchParmLine_IN, RejectedQty):
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.setGRNValues(_fieldId);
                    purchParmLine.ReceiveNow = this.AcceptedQty;
                    purchParmLine.modifiedReceiveNow();
                    this.AssessableValueTransactionCurrency = purchParmLine.LineAmount;
                    this.calcAssessableValueAccountingCurrency();
                }
                break;
            case fieldNum(PurchParmLine_IN, AssessableValueTransactionCurrency):
                if (TaxParameters::checkTaxParameters_IN())
                {
                    this.calcAssessableValueAccountingCurrency();
                }
                break;
            default:
                break;
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>PurchParmLine_IN</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>PurchParmLine_IN</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>

    public static boolean checkExist(RecId _recId)
    {
        boolean doesExist = true;

        if (!PurchParmLine_IN::exist(_recId))
        {
            doesExist = checkFailed(strFmt("@SPS1280", _recId));
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record exists in the table for the given <c>PurchParmLine_IN</c> record.
    /// </summary>
    /// <param name="_purchParmLineRecId_IN">
    /// The <c>PurchParmLineIN record</c> value to check.
    /// </param>
    /// <returns>
    /// true if record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _purchParmLineRecId_IN)
    {
        PurchParmLine_IN    purchParmLine_IN;

        if (_purchParmLineRecId_IN)
        {		
            select firstonly RecId from purchParmLine_IN where purchParmLine_IN.RecId == _purchParmLineRecId_IN;
        }

        return purchParmLine_IN.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <C>PurchParmLine_IN</C> record based on record ID of <C>PurchParmLine_IN</C> record.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of <C>PurchParmLine_IN</C> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <C>PurchParmLine_IN</C> record.
    /// </returns>

    static PurchParmLine_IN find(RecId _recId, boolean _forUpdate = false)
    {
        PurchParmLine_IN purchParmLine;
        ;

        if (_recId)
        {
            purchParmLine.selectForUpdate(_forUpdate);
            select firstonly purchParmLine
                where purchParmLine.RecId == _recId;
        }
        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchParmLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PurchParmLine_IN</c> record with a particular PurchParmLine value.
    /// </summary>
    /// <param name="_purchParmLineRecId">
    /// The PurchParmLineRecId field value to use to find the <c>PurchParmLine_IN</c> record.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether the record buffer can be updated; optional.
    /// </param>
    /// <returns>
    /// A <c>PurchParmLine_IN</c> record buffer.
    /// </returns>
    public static PurchParmLine_IN findByPurchParmLineRecId(PurchParmLineRecId _purchParmLineRecId, boolean _update = false)
    {
        PurchParmLine_IN purchParmLine_IN;

        if (_purchParmLineRecId)
        {
            purchParmLine_IN.selectForUpdate(_update);

            select firstonly purchParmLine_IN
                where (purchParmLine_IN.PurchParmLine == _purchParmLineRecId);
        }

        return purchParmLine_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGRNValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the GRN values for the given field id.
    /// </summary>
    /// <param name = "_fieldId">The field Id</param>
    private void setGRNValues(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(PurchParmLine_IN, ReceivedQty):
                // If you have a received quantity then update Accepted quantity first
                // Accepted = Received - Rejected
                // Rejected = Received - Accepted
                if (this.ReceivedQty)
                {
                    this.AcceptedQty = this.ReceivedQty - this.RejectedQty;
                    this.RejectedQty = this.ReceivedQty - this.AcceptedQty;
                }
                // If you are setting received to 0, then set both accepted and rejected to 0
                else
                {
                    this.AcceptedQty = 0;
                    this.RejectedQty = 0;
                }
                break;

            case fieldNum(PurchParmLine_IN, RejectedQty):
                // If there is quantity received calculate accepted first and then calculate received
                if (this.ReceivedQty)
                {
                    this.AcceptedQty = this.ReceivedQty - this.RejectedQty;
                    this.ReceivedQty = this.AcceptedQty + this.RejectedQty;
                }
                // If there is no quantity received and you a value is put in Rejected
                // calculated received first and then calculate Accepted
                else
                {
                    this.ReceivedQty = this.AcceptedQty + this.RejectedQty;
                    this.AcceptedQty = this.ReceivedQty - this.RejectedQty;
                }
                break;

            case fieldNum(PurchParmLine_IN, AcceptedQty):
                // If there is quantity received calculate rejected first and then calculate received
                if (this.ReceivedQty)
                {
                    this.RejectedQty = this.ReceivedQty - this.AcceptedQty;
                    this.ReceivedQty = this.AcceptedQty + this.RejectedQty;
                }
                // If there is no quantity received and you a value is put in Accepted
                // calculate received first and then calculate rejected
                else
                {
                    this.ReceivedQty = this.AcceptedQty + this.RejectedQty;
                    this.RejectedQty = this.ReceivedQty - this.AcceptedQty;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>PurchParmLine</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The table <c>PurchLine</c> associated with the current record.
    /// </returns>
    public PurchParmLine purchParmLine(boolean _forUpdate = false)
    {
        return this.SysExtensionSerializerExtensionMap::getBaseTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomsAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the assessable value when the quantity is updated in the Bill of entry form.
    /// </summary>
    public void setCustomsAssessableValue()
    {
        PurchParmTable                  purchParmTable;
        PurchParmLine                   purchParmLine, purchParmLineLoc, purchParmLineBase;
        CustomsImportAssessableValue_IN customsImportAssessableValue;
        Query                           query = new Query();
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRange;
        SysQueryRun                     queryRun;

        purchParmLineBase = this.purchParmLine();
        purchParmTable    = purchParmLineBase.purchParmTable();
        if (purchParmTable.CustomsImportInvoiceNumberTable_IN)
        {
            queryBuildDataSource    = query.addDataSource(tableNum(CustomsImportAssessableValue_IN));
            queryBuildRange         = queryBuildDataSource.addRange(fieldNum(CustomsImportAssessableValue_IN, PurchId));
            queryBuildRange.value(purchParmTable.PurchId);

            while select InventTransId from purchParmLine
                where purchParmLine.ParmId      == purchParmTable.ParmId   &&
                      purchParmLine.TableRefId  == purchParmTable.TableRefId
            {
                queryBuildRange         = queryBuildDataSource.addRange(fieldNum(CustomsImportAssessableValue_IN, InventTransId));
                queryBuildRange.value(purchParmLine.InventTransId);
            }
        }
        queryRun = new SysQueryRun(query);
        while (queryRun.next())
        {
            customsImportAssessableValue = queryRun.get(tableNum(CustomsImportAssessableValue_IN));
            // ParmId, TableRefId, InventTransId uniquely identifies a PurchParmLine
            if (customsImportAssessableValue.InventTransId == purchParmLineBase.InventTransId)
            {
                select LineAmount, RecId from purchParmLineLoc
                where purchParmLineLoc.ParmId        == purchParmTable.ParmId     &&
                      purchParmLineLoc.TableRefId    == purchParmTable.TableRefId &&
                      purchParmLineLoc.InventTransId == customsImportAssessableValue.InventTransId;
                ttsbegin;
                customsImportAssessableValue.selectForUpdate(true);
                customsImportAssessableValue.Amount = purchParmLineBase.LineAmount;
                customsImportAssessableValue.update();
                ttscommit;
            }
        }
        // This piece of code populates the PurchParmLine field called Assessable value with the updated assessable
        // value from the CustomsImportAssessableValue_IN table
        this.AssessableValueTransactionCurrency = CustomsImportAssessableValue_IN::findInventTransId(purchParmLineBase.InventTransId).invoiceAssessableValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOENumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the customer BOE number in <c>PurchParmLine</c> table for given parameters.
    /// </summary>
    /// <param name="_parmId">
    /// The parm id is used to find record.
    /// </param>
    /// <param name="_tableRefId">
    /// The table id is used to find record.
    /// </param>
    /// <param name="_customsBOENumber">
    /// The customer BOE number is the expected updated value.
    /// </param>
    public static void updateBOENumber(
        ParmId           _parmId,
        TradeLineRefId   _tableRefId,
        RefRecId         _customsBOENumber)
    {
        PurchParmLine_IN purchParmLine_IN;
        PurchParmLine purchParmLineCopy;

        ttsbegin;

        update_recordset purchParmLine_IN
            setting CustomsBillOfEntryNumberTable = _customsBOENumber
            exists join purchParmLineCopy
            where purchParmLine_IN.PurchParmLine == purchParmLineCopy.RecId
                && purchParmLineCopy.ParmId       == _parmId
                && purchParmLineCopy.TableRefId  == _tableRefId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate and Pack AccessableValueAccountingCurrency
    /// </summary>
    public void calcAssessableValueAccountingCurrency()
    {
        PurchParmLine       purchParmLine;
        DocumentStatus      documentStatus;

        purchParmLine   = this.purchParmLine();
        documentStatus  = purchParmLine.purchParmTable().Ordering;
        if (TaxParameters::checkTaxParameters_IN() && documentStatus == DocumentStatus::BillOfEntry_IN)
        {
            this.AssessableValueAccountingCurrency = TaxAssessableValueHandler_IN::calcAssessableValueAccountingCurrency(this.AssessableValueTransactionCurrency, purchParmLine.currencyCode, purchParmLine.purchParmTable().TransDate);
            purchParmLine.packPurchParmLine_IN(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>AssessableValueAccountingCurrency</c> field.
    /// </summary>
    /// <param name="_assessableValueAccountingCurrency">
    /// The value of <c>AssessableValueAccountingCurrency</c> field to set.
    /// </param>
    /// <returns>
    /// <c>AssessableValueAccountingCurrency</c> from PurchParmLine_IN table
    /// </returns>
    public AmountMST parmAssessableValueAccountingCurrency(AmountMST _assessableValueAccountingCurrency)
    {
        PurchParmLine    purchParmLine;

        purchParmLine = this.purchParmLine();
        this.AssessableValueAccountingCurrency = _assessableValueAccountingCurrency;
        purchParmLine.packPurchParmLine_IN(this);
        return this.AssessableValueAccountingCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4860190</DeveloperDocumentation>
	<Label>@SYP4860189</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>PurchParmLine</TitleField1>
	<TitleField2>AssessableValueAccountingCurrency</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PurchParmLineIdx</ClusteredIndex>
	<Modules>AccountsPayable</Modules>
	<ReplacementKey>PurchParmLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssessableValueAccountingCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteGateEntryLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchParmLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchParmLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssessableValue</Name>
			<Label>@GLS5298</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssessableValueAccountingCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventSiteGateEntryLine</Name>
			<Label>@SYP4860381</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteGateEntryLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsBillOfEntryNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsImportInvoiceNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsInvoiceRegnRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GoodsReceiptNote</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceivedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RejectedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EximPorts</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EximPorts</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValueAccountingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYP4860372</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventSiteGateEntryLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventSiteGateEntryLineRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchParmLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchParmLineRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AcceptedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS10106</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValueTransactionCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<Label>@GLS5298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsBillOfEntryNumberTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5641</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsImportInvoiceNumberTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS60990</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsInvoiceRegnRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceivedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS4465</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RejectedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS784</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EximPorts</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS61500</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchParmLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchParmLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>PurchParmLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLineExtension_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssessableValue</MapField>
					<MapFieldTo>AssessableValueTransactionCurrency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssessableValueAccountingCurrency</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditNoteDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsMaxRetailPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsTariffCodeTable</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DirectSettlement</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSA</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseRecordType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseTariffCodes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaximumRetailPrice</MapField>
					<MapFieldTo>MaximumRetailPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesTaxFormTypes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAsPerOriginalInvoice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInformation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTCSGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTDSGroup</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSiteGateEntryLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventSiteGateEntryLine_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteGateEntryLine</Name>
					<Field>InventSiteGateEntryLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchParmLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchParmLine</Name>
					<Field>PurchParmLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsBillOfEntryNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsBillOfEntryNumberTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsBillOfEntryNumberTable</Name>
					<Field>CustomsBillOfEntryNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsImportInvoiceNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsImportInvoiceNumberTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsImportInvoiceNumberTable</Name>
					<Field>CustomsImportInvoiceNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsInvoiceRegnTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsInvoiceRegnTrans_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsInvoiceRegnRecId</Name>
					<Field>CustomsInvoiceRegnRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximPorts</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximPorts_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EximPorts_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximPorts_IN_EximSalesParmLine_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EximPorts</Name>
					<Field>EximPorts</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>