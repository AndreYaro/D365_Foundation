<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderLineTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesOrderLineTotals extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate line totals for a sales order line. If a <c>SalesOrderLineTotals</c> record is existing, then it is updated.
    /// If one is not existing, then it is created.
    /// </summary>
    /// <param name = "_inventTransId">
    /// <c>InventTransId</c> of the sales order line for which total should be calculated.
    /// </param>
    /// <param name = "_updateDateTime">
    /// Update timestamp that should be marked on the record.
    /// </param>
    /// <returns>
    /// <c>SalesOrderLineTotals</c> record to containing the calculated totals.
    /// </returns>
    public static SalesOrderLineTotals calculateForSalesLine(InventTransId _inventTransId, utcdatetime _updateDateTime)
    {
        using (SysInstrumentationActivityContext activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(tableStr(SalesOrderLineTotals)).salesTotalsCalculateActivities().calculateForSalesLine())
        {
            ttsbegin;

            SalesOrderLineTotals orderLineTotals = SalesOrderLineTotals::find(_inventTransId, true);
        
            SalesLine salesLine = SalesLine::findInventTransId(_inventTransId);

            using (McrPriceHistoryLineSkipCalcPotentialContext context = McrPriceHistoryLineSkipCalcPotentialContext::construct())
            {
                // McrPriceHistoryForm works with the full amounts for the sales line, irrespective of if line has been (partially) invoiced, so can calculate the TotalDiscountAmount directly
                McrPriceHistoryForm priceHistory = McrPriceHistoryForm::construct(salesLine);
                orderLineTotals.TotalDiscountAmount = priceHistory.getUnitPriceExtendedAmount() - priceHistory.getDiscAmountExtendedAmount() + priceHistory.getMultilineDiscPercentageNet();
            }

            CustInvoiceJour custInvoiceJour;
            CustInvoiceTrans custInvoiceTrans;

            // SalesTotals returns only un-invoiced amounts. Get those amounts, then add the invoiced amounts to get the full totals for a sales line
            SalesTotals salesTotals;
            SalesOrderLineTotalsContext context = SalesOrderLineTotalsContext::current();
            if (context != null)
            {
                if (context.salesTotals == null || context.salesId != salesLine.SalesId)
                {
                    context.salesId     = salesLine.SalesId;
                    context.salesTotals = SalesTotals::construct(SalesTable::find(salesLine.SalesId));
                }
                salesTotals = context.salesTotals;
            }
            else
            {
                salesTotals = SalesTotals::construct(SalesTable::find(salesLine.SalesId));
            }
            salesTotals.calc();
            Tax tax = salesTotals.tax();
            tax.sourceSingleLine(true, true);
            orderLineTotals.TotalTaxAmount = Tax.totalTaxAmountSingleLine(tableNum(SalesLine), salesLine.RecId) + SalesOrderLineTotals::invoicedTaxAmount(salesLine);
            orderLineTotals.TotalChargesAmount = salesTotals.lineMarkupTotalAmount(salesLine.RecId) + SalesOrderLineTotals::invoicedChargesAmount(salesLine);

            orderLineTotals.LastUpdatedDateTime = _updateDateTime;

            if (orderLineTotals.RecId)
            {
                orderLineTotals.update();
            }
            else
            {
                orderLineTotals.SalesId = salesLine.SalesId;
                orderLineTotals.InventTransId = _inventTransId;
                orderLineTotals.insert();
            }

            ttscommit;

            activityContext.addCustomProperty(tableStr(SalesLine), int642Str(salesLine.RecId));

            return orderLineTotals;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate line totals for all lines in a sales order. If a <c>SalesOrderLineTotals</c> record is existing, then it is updated.
    /// If one is not existing, then it is created.
    /// </summary>
    /// <param name = "_salesId">
    /// <c>SalesId</c> of the sales order for which total should be calculated.
    /// </param>
    /// <param name = "_updateDateTime">
    /// Update timestamp that should be marked on the record.
    /// </param>
    public static void calculateForSalesOrder(SalesId _salesId, utcdatetime _updateDateTime)
    {
        using (SysInstrumentationActivityContext activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(tableStr(SalesOrderLineTotals)).salesTotalsCalculateActivities().calculateForSalesQuotation())
        {
            SalesLine salesLine;

            while select salesLine
                where salesLine.SalesId == _salesId
            {
                SalesOrderLineTotals::calculateForSalesLine(salesLine.InventTransId, _updateDateTime);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SalesOrderLineTotals find(InventTransId _inventTransId, boolean _forUpdate = false)
    {
        SalesOrderLineTotals orderLineTotals;

        orderLineTotals.selectForUpdate(_forUpdate);

        if (_inventTransId)
        {
            select firstonly orderLineTotals
            where orderLineTotals.InventTransId == _inventTransId;
        }

        return orderLineTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Clear the LastUpdatedDateTime on the SalesOrderTotals record so that it is recalculated in the next run.
        this.clearSalesOrderTotalsUpdatedDate();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedChargesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of invoiced charge amounts for the given <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_salesLine">SalesLine record for which to get the invoiced charge amount</param>
    /// <returns>Sum of invoiced charge amounts for the given <c>SalesLine</c> record.</returns>
    private static AmountCur invoicedChargesAmount(SalesLine _salesLine)
    {
        CustInvoiceJour custInvoiceJour;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceTransTotalChargeAmountView chargeAmountView;

        // Get the sum of charges which have been invoiced
        select sum(ChargeAmount) from chargeAmountView
            exists join custInvoiceTrans
            where custInvoiceTrans.RecId == chargeAmountView.CustInvoiceTransRecId
                && custInvoiceTrans.SalesId == _salesLine.SalesId
                && custInvoiceTrans.InventTransId == _salesLine.InventTransId
                exists join custInvoiceJour
                    where custInvoiceJour.SalesId == custInvoiceTrans.SalesId
                        && custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                        && custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                        && custInvoiceJour.numberSequenceGroup == custInvoiceTrans.numberSequenceGroup;

        return chargeAmountView.ChargeAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of invoiced tax amounts for the given <c>SalesLine</c> record.
    /// This includes tax amounts for any invoiced charges related to the sales line.
    /// </summary>
    /// <param name = "_salesLine">SalesLine record for which to get the invoiced tax amount</param>
    /// <returns>Sum of invoiced tax amounts for the given <c>SalesLine</c> record.</returns>
    private static TaxRegulationAmountCur invoicedTaxAmount(SalesLine _salesLine)
    {
        CustInvoiceJour custInvoiceJour;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceTransTotalTaxAmountView taxAmountView;

        // Get the line tax from quantities which have been invoiced        
        select sum(TaxAmount) from taxAmountView
             exists join custInvoiceTrans
            where custInvoiceTrans.RecId == taxAmountView.CustInvoiceTransRecId
                && custInvoiceTrans.SalesId == _salesLine.SalesId
                && custInvoiceTrans.InventTransId == _salesLine.InventTransId
                exists join custInvoiceJour
                    where custInvoiceJour.SalesId == custInvoiceTrans.SalesId
                        && custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                        && custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                        && custInvoiceJour.numberSequenceGroup == custInvoiceTrans.numberSequenceGroup;

        return taxAmountView.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSalesOrderTotalsUpdatedDate</Name>
				<Source><![CDATA[
    private void clearSalesOrderTotalsUpdatedDate()
    {
        ttsbegin;

        SalesOrderTotals orderTotals = SalesOrderTotals::find(this.SalesId, true);
        
        if (orderTotals.LastUpdatedDateTime > DateTimeUtil::minValue())
        {
            orderTotals.LastUpdatedDateTime = DateTimeUtil::minValue();
            orderTotals.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:SalesOrderLineTotalsDevDoc</DeveloperDocumentation>
	<Label>@SCM:SalesOrderLineTotals</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<TitleField2>InventTransId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>InventTransIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDiscountAmount</ExtendedDataType>
			<Label>@RET3621</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalChargesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalMarkupAmount</ExtendedDataType>
			<Label>@SYS11466</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalTaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastUpdatedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTotalsLastUpdatedDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>