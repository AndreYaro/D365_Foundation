<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRateBaseDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSRateBaseDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>tmsRateBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TMSRateBase</c> record using the rate base code.
    /// </summary>
    /// <returns>
    /// The <c>TMSRateBase</c> record.
    /// </returns>
    public TMSRateBase tmsRateBase()
    {
        return TMSRateBase::find(this.RateBaseCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                 ret;
        int                     rateFields;
        int                     counter;
        str                     fId             = literalStr(Dimension);
        FieldId                 rateId;
        TMSRateBaseTypeField    rateBaseTypeField;
        TMSRateBase             tmsRateBase = this.tmsRateBase();

        ret = super();

        rateFields = tmsRateBase.findNumberOfRateBaseDetailFields();

        // Validate all rate fields the user can enter data into, i.e. do not validate the last field.
        for (counter = 1; counter < rateFields; ++counter)
        {
            rateId              = TMSRateBase::dynamicFieldId(tableNum(TMSRateBaseDetail), fId, counter);
            rateBaseTypeField   = TMSRateBaseTypeField::findByCodeSequenceAndFieldType(tmsRateBase.tmsRateMaster().RateBaseTypeCode,
                                                                                       counter,
                                                                                       TMSFieldType::RateBase);
            switch (rateBaseTypeField.DataType)
            {
                case TMSDataType::Integer:
                    if (!str2IntOk(this.(rateId)))
                    {
                        ret = checkFailed(strFmt("@TRX206", rateBaseTypeField.Name, rateBaseTypeField.DataType));
                    }
                    break;

                case TMSDataType::Real:
                    real tmpRate = 0;
                    if (!System.Decimal::TryParse(
                        this.(rateId),
                        System.Globalization.NumberStyles::Number,
                        TMSTmpRateBaseDetail::getCultureForUserInteractions(),
                        byRef tmpRate))
                    {
                        ret = checkFailed(strFmt("@TRX206", rateBaseTypeField.Name, rateBaseTypeField.DataType));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);
    
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(TMSRateBaseDetail, Dimension1):
                    ret = this.isFieldValueValid(this.Dimension1, 1);
                    break;
                case fieldNum(TMSRateBaseDetail, Dimension2):
                    ret = this.isFieldValueValid(this.Dimension2, 2);
                    break;
                case fieldNum(TMSRateBaseDetail, Dimension3):
                    ret = this.isFieldValueValid(this.Dimension3, 3);
                    break;
                case fieldNum(TMSRateBaseDetail, Dimension4):
                    ret = this.isFieldValueValid(this.Dimension4, 4);
                    break;
                case fieldNum(TMSRateBaseDetail, Dimension5):
                    ret = this.isFieldValueValid(this.Dimension5, 5);
                    break;
                case fieldNum(TMSRateBaseDetail, Dimension6):
                    ret = this.isFieldValueValid(this.Dimension6, 6);
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldValueValid</Name>
				<Source><![CDATA[
    private boolean isFieldValueValid(TMSDimension _parameterValue, TMSSequence _parameterSequence)
    {
        boolean	             validationResult = true;
        TMSRateBaseTypeField rateBaseTypeField = this.getAssociatedRateBaseTypeFieldByRateBaseAndSequence(this.tmsRateBase(), _parameterSequence);
        TMSDimension	     fieldValue = TMSCarrierService::checkField(_parameterSequence, _parameterValue, rateBaseTypeField.LookupType);
                     
        if (fieldValue == TMSCarrierService::getErrorValue())
        {
            validationResult = checkFailed(strfmt("@SYS31784", _parameterValue, rateBaseTypeField.Name, rateBaseTypeField.Name));
        }
        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssociatedRateBaseTypeFieldByRateBaseAndSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the rating metadata field associated to the particular rate base detail.
    /// </summary>
    /// <param name = "_rateBase">A rate base for which to find the rating metadata.</param>
    /// <param name = "_sequence">A sequence for which to find the rating metadata.</param>
    /// <returns>A <c>TMSRateBaseTypeField</c> table record if found; otherwise an empty table buffer.</returns>
    public TMSRateBaseTypeField getAssociatedRateBaseTypeFieldByRateBaseAndSequence(TMSRateBase _rateBase, int _sequence)
    {
        TMSRateBaseTypeField rateBaseTypeField;
        
        if (_rateBase.RecId && _sequence)
        {
            TMSRateBaseTypeCode  rateBaseTypeCode = _rateBase.tmsRateMaster().RateBaseTypeCode;
            rateBaseTypeField = TMSRateBaseTypeField::findByCodeSequenceAndFieldType(rateBaseTypeCode, _sequence, TMSFieldType::RateBase);
        }
        return rateBaseTypeField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>tmsRateBaseDetail</c> record exists.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return (_recId) &&
               (select firstonly tmsRateBaseDetail
                    where tmsRateBaseDetail.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSRateBaseDetail</c> record with given parameters.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSRateBaseDetail find(RecId   _recId,
                                         boolean _forupdate = false)
    {
        TMSRateBaseDetail    tmsRateBaseDetail;

        if (_recId)
        {
            tmsRateBaseDetail.selectForUpdate(_forupdate);

            select firstonly tmsRateBaseDetail
                where tmsRateBaseDetail.RecId == _recId;
        }

        return tmsRateBaseDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSRateBaseDetail</c> record by its dimension.
    /// </summary>
    /// <param name="_tmsRateBaseCode">
    /// Rate base code of the record.
    /// </param>
    /// <param name="_tmsDimension1">
    /// First dimension of the record.
    /// </param>
    /// <param name="_tmsDimension2">
    /// Second dimension of the record.
    /// </param>
    /// <param name="_tmsDimension3">
    /// Third dimension of the record.
    /// </param>
    /// <param name="_tmsDimension4">
    /// Fourth dimension of the record.
    /// </param>
    /// <param name="_tmsDimension5">
    /// Fifth dimension of the record.
    /// </param>
    /// <param name="_tmsDimension6">
    /// Sixth dimension of the record.
    /// </param>
    /// <param name="_effectiveDateFrom">
    /// Starting effective date of the record.
    /// </param>
    /// <param name="_effectiveDateTo">
    /// Ending effective date of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSRateBaseDetail findByDimensions(TMSRateBaseCode                _tmsRateBaseCode,
                                                     TMSDimension                   _tmsDimension1,
                                                     TMSDimension                   _tmsDimension2,
                                                     TMSDimension                   _tmsDimension3,
                                                     TMSDimension                   _tmsDimension4,
                                                     TMSDimension                   _tmsDimension5,
                                                     TMSDimension                   _tmsDimension6,
                                                     TMSEffectiveUTCDateTimeFrom    _effectiveDateFrom,
                                                     TMSEffectiveUTCDateTimeTo      _effectiveDateTo,
                                                     boolean                        _forupdate = false)
    {
        TMSRateBaseDetail    tmsRateBaseDetail;

        if (_tmsRateBaseCode)
        {
            tmsRateBaseDetail.selectForUpdate(_forupdate);

            select firstonly tmsRateBaseDetail
                where tmsRateBaseDetail.RateBaseCode                == _tmsRateBaseCode     &&
                      tmsRateBaseDetail.Dimension1                  == _tmsDimension1       &&
                      tmsRateBaseDetail.Dimension2                  == _tmsDimension2       &&
                      tmsRateBaseDetail.Dimension3                  == _tmsDimension3       &&
                      tmsRateBaseDetail.Dimension4                  == _tmsDimension4       &&
                      tmsRateBaseDetail.Dimension5                  == _tmsDimension5       &&
                      tmsRateBaseDetail.Dimension6                  == _tmsDimension6       &&
                      tmsRateBaseDetail.EffectiveUTCDateTimeFrom    == _effectiveDateFrom   &&
                      tmsRateBaseDetail.EffectiveUTCDateTimeTo      == _effectiveDateTo;
        }

        return tmsRateBaseDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRateByValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the rate of a specific break value for a corresponding record.
    /// </summary>
    /// <param name="_rateBaseDetail">
    /// The corresponding <c>TMSRateBaseDetail</c> record.
    /// </param>
    /// <param name="_value">
    /// Value of the dimension.
    /// </param>
    /// <param name="_fields">
    /// Dynamic field number of the dimension.
    /// </param>
    /// <returns>
    /// The rate from a rate base detail record.
    /// </returns>
    public static TMSRate findRateByValue(TMSRateBaseDetail _rateBaseDetail,
                                          TMSValue         _value,
                                          int               _fields)
    {
        TMSRateBaseDetail   rateBaseDetail;
        TableId             tId             = tableName2id(literalStr(TMSRateBaseDetail));
        TMSValue            value;
        TMSRate             ret;

        _rateBaseDetail.(TMSRateBase::dynamicFieldId(tId, literalStr(Dimension), _fields)) = '';

        while select rateBaseDetail
            where rateBaseDetail.RateBaseCode    == _rateBaseDetail.RateBaseCode      &&
                (rateBaseDetail.Dimension1       == _rateBaseDetail.Dimension1        ||
                _rateBaseDetail.Dimension1       == '')                                  &&
                (rateBaseDetail.Dimension2       == _rateBaseDetail.Dimension2        ||
                _rateBaseDetail.Dimension2       == '')                                  &&
                (rateBaseDetail.Dimension3       == _rateBaseDetail.Dimension3        ||
                _rateBaseDetail.Dimension3       == '')                                  &&
                (rateBaseDetail.Dimension4       == _rateBaseDetail.Dimension4        ||
                _rateBaseDetail.Dimension4       == '')                                  &&
                (rateBaseDetail.Dimension5       == _rateBaseDetail.Dimension5        ||
                _rateBaseDetail.Dimension5       == '')                                  &&
                (rateBaseDetail.Dimension6       == _rateBaseDetail.Dimension6        ||
                _rateBaseDetail.Dimension6       == '')                                  &&
                rateBaseDetail.EffectiveUTCDateTimeFrom == _rateBaseDetail.EffectiveUTCDateTimeFrom &&
                rateBaseDetail.EffectiveUTCDateTimeTo   == _rateBaseDetail.EffectiveUTCDateTimeTo
        {
            value = rateBaseDetail.(TMSRateBase::dynamicFieldId(tId, literalStr(Dimension), _fields));
            if (value == _value)
            {
                ret = rateBaseDetail.Rate;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromTmpRateBaseDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates current record from a temporary record.
    /// </summary>
    /// <param name="_rateBaseCode">
    /// Rate base code of the current record.
    /// </param>
    /// <param name="_detail">
    /// Detail record containing the values to be updated.
    /// </param>
    /// <param name="_origDetail">
    /// Original record containing old values.
    /// </param>
    public static void updateFromTmpRateBaseDetail(TMSRateBaseCode _rateBaseCode, TMSTmpRateBaseDetail _detail, TMSTmpRateBaseDetail _origDetail)
    {
        TMSRateBase rateBase    = TMSRateBase::find(_rateBaseCode);
        int         rateFields  = rateBase.findNumberOfRateBaseDetailFields();

        // Verify that there is at least one field on the rate base type.
        if (rateFields > 0)
        {
            int                 counter;
            TMSRateBaseDetail   origRateBaseDetail;

            TMSRateBaseDetail rateBaseDetail;
            rateBaseDetail.RateBaseCode  = _rateBaseCode;

            str     fId     = literalStr(Dimension);
            FieldId tmpId;
            FieldId rateId;

            // write dim values
            for (counter = 1; counter < rateFields; ++counter)
            {
                rateId  = TMSRateBase::dynamicFieldId(tableNum(TMSRateBaseDetail), fId, counter);
                tmpId   = TMSRateBase::dynamicFieldId(tableNum(TMSTmpRateBaseDetail), fId, counter, true);

                rateBaseDetail.(rateId) = _detail.(tmpId);
                origRateBaseDetail.(rateId) = _origDetail.(tmpId);
            }

            // write break and rate values
            TMSBreakMaster  breakMaster = rateBase.tmsBreakMaster();
            container       details     = TMSBreakDetail::getOrderedCon(breakMaster.BreakMasterCode);
            int             detailCount = conLen(details);

            rateId = TMSRateBase::dynamicFieldId(tableNum(TMSRateBaseDetail), fId, rateFields);

            for (int detailCounter = 1; detailCounter <= detailCount; ++detailCounter)
            {
                tmpId   = TMSRateBase::dynamicFieldId(tableNum(TMSTmpRateBaseDetail), fId, counter, true);

                rateBaseDetail.(rateId)     = any2Str(conPeek(details, detailCounter));
                origRateBaseDetail.(rateId) = rateBaseDetail.(rateId);

                real tmpRate = 0;

                if (_detail.(tmpId) && !System.Decimal::TryParse(
                    _detail.(tmpId),
                    System.Globalization.NumberStyles::Number,
                    TMSTmpRateBaseDetail::getCultureForUserInteractions(),
                    byRef tmpRate))
                {
                    str label = TMSTmpRateBaseDetail::getLabel(rateBase.RateBaseCode, counter);
                    warning(strFmt("@TRX206", label, TMSDataType::Real));
                }
                else
                {
                    TMSRateBaseDetail tmpRateBaseDetail = TMSRateBaseDetail::findByDimensions(rateBaseDetail.RateBaseCode,
                                                                            origRateBaseDetail.Dimension1,
                                                                            origRateBaseDetail.Dimension2,
                                                                            origRateBaseDetail.Dimension3,
                                                                            origRateBaseDetail.Dimension4,
                                                                            origRateBaseDetail.Dimension5,
                                                                            origRateBaseDetail.Dimension6,
                                                                            _origDetail.EffectiveUTCDateTimeFrom,
                                                                            _origDetail.EffectiveUTCDateTimeTo,
                                                                            true);
                
                    ttsbegin;

                    if (tmpRateBaseDetail.RecId != 0)
                    {
                        tmpRateBaseDetail.Dimension1                 = rateBaseDetail.Dimension1;
                        tmpRateBaseDetail.Dimension2                 = rateBaseDetail.Dimension2;
                        tmpRateBaseDetail.Dimension3                 = rateBaseDetail.Dimension3;
                        tmpRateBaseDetail.Dimension4                 = rateBaseDetail.Dimension4;
                        tmpRateBaseDetail.Dimension5                 = rateBaseDetail.Dimension5;
                        tmpRateBaseDetail.Dimension6                 = rateBaseDetail.Dimension6;
                        tmpRateBaseDetail.MinimumCharge              = _detail.MinimumCharge;
                        tmpRateBaseDetail.MaximumCharge              = _detail.MaximumCharge;
                        tmpRateBaseDetail.EffectiveUTCDateTimeFrom   = _detail.EffectiveUTCDateTimeFrom;
                        tmpRateBaseDetail.EffectiveUTCDateTimeTo     = _detail.EffectiveUTCDateTimeTo;
                        tmpRateBaseDetail.Rate                       = tmpRate;

                        if (!tmpRateBaseDetail.validateWrite())
                        {
                            throw error(strFmt("@TRX:TMSCannotWriteRecordInTable", tablePName(TMSRateBaseDetail)));
                        }
                        else
                        {
                            tmpRateBaseDetail.write();
                        }
                    }
                    else
                    {
                        rateBaseDetail.MinimumCharge                 = _detail.MinimumCharge;
                        rateBaseDetail.MaximumCharge                 = _detail.MaximumCharge;
                        rateBaseDetail.EffectiveUTCDateTimeFrom      = _detail.EffectiveUTCDateTimeFrom;
                        rateBaseDetail.EffectiveUTCDateTimeTo        = _detail.EffectiveUTCDateTimeTo;
                        rateBaseDetail.Rate                          = tmpRate;

                        if (!rateBaseDetail.validateWrite())
                        {
                            throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSRateBaseDetail)));
                        }
                        else
                        {
                            rateBaseDetail.insert();
                        }
                    }

                    ttscommit;
                }


                ++counter;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1944</DeveloperDocumentation>
	<Label>@TRX129</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>RateBaseCode</TitleField1>
	<TitleField2>Dimension1</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>RateCodeAndDimensions</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Rate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension5</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension6</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension5</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension6</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Rate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension5</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Dimension6</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffectiveUTCDateTimeFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension3</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension4</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension5</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Dimension6</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSDimension</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EffectiveUTCDateTimeFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSEffectiveUTCDateTimeFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EffectiveUTCDateTimeTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSEffectiveUTCDateTimeTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumCharge</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSMaximumCharge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinimumCharge</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSMinimumCharge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Rate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RateBaseCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRateBaseCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RateCodeAndDimensions</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RateBaseCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension1</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension2</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension3</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension4</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension5</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Dimension6</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EffectiveUTCDateTimeFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EffectiveUTCDateTimeTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TMSRateBaseCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TMSRateBase</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RateBaseCode</Name>
					<SourceEDT>TMSRateBaseCode</SourceEDT>
					<Field>RateBaseCode</Field>
					<RelatedField>RateBaseCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>