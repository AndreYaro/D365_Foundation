<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoicePropertyTypeTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EInvoicePropertyTypeTable extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the property type and related property values.
    /// </summary>
    /// <remarks>
    /// Non-empty property values are displayed in the infolog before the deletion.
    /// </remarks>
    public void delete()
    {
        EInvoicePropertyTable propertyTable;

        ttsBegin;

        setPrefix("@AccountsReceivable:DeletingObsoletePropertyTypes");

        select firstonly RecId from propertyTable
            order by RefTableId, RefRecId
            where propertyTable.Type == this.RecId
                && propertyTable.Value;

        if (propertyTable.RecId)
        {
            this.infoTypeIsDeleted(propertyTable);
        }

        delete_from propertyTable
            where propertyTable.Type == this.RecId;

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicabilityTableIdSetPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the packed set of IDs of entities that are applicable to the current property type.
    /// </summary>
    /// <returns>
    /// The packed set of table IDs.
    /// </returns>
    /// <remarks>
    /// Each property type is applicable to one or more entity types, defined by the IDs of main tables for those entities.
    /// </remarks>
    public container getApplicabilityTableIdSetPacked()
    {
        EInvoicePropertyTypeApplicabilitySetup  applicabilitySetup;
        Set                                     ret = new Set(Types::Integer);

        while select RefTableId from applicabilitySetup
        where applicabilitySetup.Type == this.RecId
        {
            ret.add(applicabilitySetup.RefTableId);
        }

        return ret.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applicableTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the names of entities, which the current type is applicable to.
    /// </summary>
    /// <returns>
    /// The user-friendly list of entities.
    /// </returns>
    public display Name applicableTo()
    {
        EInvoicePropertyTypeApplicabilitySetup  applicabilitySetup;
        container                               ret;

        while select RefTableId from applicabilitySetup
        where applicabilitySetup.Type == this.RecId
        {
            ret += [tableId2pname(applicabilitySetup.RefTableId)];
        }

        return con2Str(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the type description.
    /// </summary>
    /// <returns>
    /// The type description
    /// </returns>
    public display Description description()
    {
        Description description, groupDescription;

        if (this.DescriptionLabel || this.GroupDescriptionLabel)
        {
            description = this.getText(this.DescriptionLabel);
            groupDescription = this.getText(this.GroupDescriptionLabel);

            if (groupDescription)
            {
                description = description ? strfmt('%1, %2', groupDescription, description) : groupDescription;
            }
        }

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getText</Name>
				<Source><![CDATA[
    private str getText(str _label)
    {
        Label label = new Label();

        return (_label && label.exists(_label)) ? label.extractString(_label) : _label;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            this.Custom = NoYes::Yes;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        EInvoicePropertyTypeTable orig;

        if (FormDataUtil::isFormDataSource(this))
        {
            orig = this.orig();

            if (this.Sorting != orig.Sorting
                || this.Type != orig.Type
                || this.DescriptionLabel != orig.DescriptionLabel
                || this.GroupDescriptionLabel != orig.GroupDescriptionLabel)
            {
                this.Custom = NoYes::Yes;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (!this.Custom)
        {
            ret = checkfailed(strfmt("@AccountsReceivable:PropertyTypeIsDefault", this.Type));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the type record to the list.
    /// </summary>
    /// <param name="_list">
    /// The record list to hold the types before the insertion.
    /// </param>
    /// <param name="_type">
    /// The type name.
    /// </param>
    /// <param name="_label">
    /// The type description label ID.
    /// </param>
    /// <param name="_groupLabel">
    /// The type group description label ID; optional.
    /// </param>
    /// <remarks>
    /// Types should be added in the order they are to be displayed.
    /// </remarks>
    public static void addType(RecordSortedList _list, EInvoicePropertyType _type, LabelId _label, LabelId _groupLabel = '')
    {
        EInvoicePropertyTypeTable propertyTypeTable;

        propertyTypeTable.Sorting = _list.len() + 1;
        propertyTypeTable.Type = _type;
        propertyTypeTable.DescriptionLabel = _label;
        propertyTypeTable.GroupDescriptionLabel = _groupLabel;

        _list.ins(propertyTypeTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSorting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the property type exist for the given sorting.
    /// </summary>
    /// <param name="_sorting">
    /// The sorting.
    /// </param>
    /// <returns>
    /// true, if a property type with the specified sorting exists; false, otherwise.
    /// </returns>
    public static boolean existsSorting(Sorting _sorting)
    {
        EInvoicePropertyTypeTable   propertyTypeTable;

        select firstonly propertyTypeTable
            where propertyTypeTable.Sorting == _sorting;

        return propertyTypeTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the property type exist for the given property type.
    /// </summary>
    /// <param name="_type">
    /// The property type.
    /// </param>
    /// <returns>
    /// true, if the specified property type exists; false, otherwise.
    /// </returns>
    public static boolean existsType(EInvoicePropertyType _type)
    {
        EInvoicePropertyTypeTable propertyTypeTable;

        select firstonly propertyTypeTable
            where propertyTypeTable.Type == _type;

        return propertyTypeTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in <c>EInvoicePropertyTypeTable</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>EInvoicePropertyTypeTable</c> table, if found; otherwise, an empty record.
    /// </returns>
    public static EInvoicePropertyTypeTable find(RecId _recId, boolean _forUpdate = false)
    {
        EInvoicePropertyTypeTable propertyTypeTable;

        if (_forUpdate)
        {
            propertyTypeTable.selectForUpdate(true);
        }

        if (_recId)
        {
            select firstonly propertyTypeTable
                where propertyTypeTable.RecId == _recId;
        }

        return propertyTypeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSorting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in <c>EInvoicePropertyTypeTable</c> table.
    /// </summary>
    /// <param name="_sorting">
    /// The sorting.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>EInvoicePropertyTypeTable</c> table, if found; otherwise, an empty record.
    /// </returns>
    public static EInvoicePropertyTypeTable findSorting(Sorting _sorting, boolean _forUpdate = false)
    {
        EInvoicePropertyTypeTable propertyTypeTable;

        if (_forUpdate)
        {
            propertyTypeTable.selectForUpdate(true);
        }

        if (_sorting)
        {
            select firstonly propertyTypeTable
                where propertyTypeTable.Sorting == _sorting;
        }

        return propertyTypeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in <c>EInvoicePropertyTypeTable</c> table.
    /// </summary>
    /// <param name="_type">
    /// The property type.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>EInvoicePropertyTypeTable</c> table, if found; otherwise, an empty record.
    /// </returns>
    public static EInvoicePropertyTypeTable findType(EInvoicePropertyType _type, boolean _forUpdate = false)
    {
        EInvoicePropertyTypeTable propertyTypeTable;

        if (_forUpdate)
        {
            propertyTypeTable.selectForUpdate(true);
        }

        if (_type)
        {
            select firstonly propertyTypeTable
                where propertyTypeTable.Type == _type;
        }

        return propertyTypeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxSorting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the largest sorting value among the existing types.
    /// </summary>
    /// <returns>
    /// The largest sorting value.
    /// </returns>
    public static Sorting maxSorting()
    {
        EInvoicePropertyTypeTable type;

        select maxOf(Sorting) from type;

        return type.Sorting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shiftSorting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shifts the sorting of existing property types to start after the specific value.
    /// </summary>
    /// <param name="_list">
    /// The list of property types.
    /// </param>
    /// <param name="_startAfter">
    /// The sorting value after which the types from the <paramref name="_list"/> should be placed; optional.
    /// </param>
    /// <param name="_preserveSorting">
    /// The boolean value, indicating whether the original sorting from the <paramref name="_list"/> should be preserved, if possible; optional.
    /// </param>
    /// <remarks>
    /// If the <paramref name="_startAfter"/> is not specified, the sorting will start right after the last existing type.
    /// </remarks>
    public static void shiftSorting(RecordSortedList _list, Sorting _startAfter = EInvoicePropertyTypeTable::maxSorting(), boolean _preserveSorting = false)
    {
        EInvoicePropertyTypeTable typeDefault, typeUpdate;
        Sorting newSorting = _startAfter;

        if (_list.len())
        {
            typeDefault.clear();
            _list.first(typeDefault);
            do
            {
                typeUpdate = EInvoicePropertyTypeTable::find(typeDefault.RecId, true);

                if (_preserveSorting && !EInvoicePropertyTypeTable::existsSorting(typeDefault.Sorting))
                {
                    typeUpdate.Sorting = typeDefault.Sorting;
                }
                else
                {
                    newSorting ++;
                    typeUpdate.Sorting = newSorting;
                }

                typeUpdate.update();
            }
            while (_list.next(typeDefault));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortingSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an empty sorted list of property types.
    /// </summary>
    /// <returns>
    /// The empty sorted list of property types.
    /// </returns>
    public static RecordSortedList sortingSortedList()
    {
        RecordSortedList typeList;

        typeList = new RecordSortedList(tablenum(EInvoicePropertyTypeTable));
        typeList.sortOrder(fieldnum(EInvoicePropertyTypeTable, Sorting));

        return typeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an empty sorted list of property types.
    /// </summary>
    /// <returns>
    /// The empty sorted list of property types.
    /// </returns>
    public static RecordSortedList typeSortedList()
    {
        RecordSortedList typeList;

        typeList = new RecordSortedList(tablenum(EInvoicePropertyTypeTable));
        typeList.sortOrder(fieldnum(EInvoicePropertyTypeTable, Type));

        return typeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoTypeIsDeleted</Name>
				<Source><![CDATA[
    private void infoTypeIsDeleted(EInvoicePropertyTable _propertyTable)
    {
        DictTable parentTableDict;
        Common parentRecord;

        setPrefix(strFmt("@AccountsReceivable:PropertyTypeIsObsolete", this.Type));

        while select _propertyTable
                order by RefTableId, RefRecId
                where _propertyTable.Type == this.RecId
                    && _propertyTable.Value
        {
            parentTableDict = new DictTable(_propertyTable.RefTableId);
            parentRecord = parentTableDict.makeRecord();
            select firstonly parentRecord
                    where parentRecord.RecId == _propertyTable.RefRecId;

            this.infoValueIsDeleted(
                    parentTableDict.label(),
                    parentTableDict.titleField1(),
                    parentTableDict.titleField2(),
                    parentRecord,
                    _propertyTable.Value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoValueIsDeleted</Name>
				<Source><![CDATA[
    private void infoValueIsDeleted(str _parentTableLabel, FieldId _titleField1, FieldId _titleField2, Common _parentRecord, str _value)
    {
        str titleField1Value = _titleField1 ? strfmt('%1', _parentRecord.(_titleField1)) : '';
        str titleField2Value = _titleField2 ? strfmt('%1', _parentRecord.(_titleField2)) : '';
        str prefix;

        if (!titleField1Value)
        {
            titleField1Value = titleField2Value;
            titleField2Value = '';
        }

        prefix = strfmt('%1', _parentTableLabel);
        if (titleField1Value)
        {
            prefix = strfmt('%1: %2', prefix, titleField1Value);
        }
        if (titleField2Value)
        {
            prefix = strfmt('%1, %2', prefix, titleField2Value);
        }
        setPrefix(prefix);

        info(strFmt("@AccountsReceivable:ValueIsDeleted", _value));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@AccountsReceivable:EInvoicePropertyTypeTableDevDocumentation</DeveloperDocumentation>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>Type</TitleField1>
	<TitleField2>Sorting</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>SortingIdx</ClusteredIndex>
	<Modules>EInvoice</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>EInvoicePropertyTypeTable</Relation>
			<Table>EInvoicePropertyTypeApplicabilitySetup</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DescriptionLabel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Custom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sorting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupDescriptionLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DescriptionLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>applicableTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GridValues</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Custom</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS97216</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DescriptionLabel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LabelId</ExtendedDataType>
			<Label>@SYS6303</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupDescriptionLabel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LabelId</ExtendedDataType>
			<Label>@SYS4513</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoicePropertyType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sorting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Sorting</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SortingIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Sorting</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>