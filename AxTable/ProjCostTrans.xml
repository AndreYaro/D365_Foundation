<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCostTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCostTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    SalesAmount costAmount(ProjCostTrans projCostTrans, TransDate ledgerFromDate, TransDate ledgerToDate)
    {
        projStatement projStatement = projStatement::newProjCostTrans(projCostTrans, ledgerFromDate, ledgerToDate);

        return  projStatement.c125_Consumption_Cost() + projStatement.a335_Accrued_Cost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountLedger</Name>
				<Source><![CDATA[
    display AmountMST costAmountLedger()
    {
        DictTable dictTableProjCostTransCost;

        dictTableProjCostTransCost = new DictTable(tableNum(ProjCostTransCost));

        if (dictTableProjCostTransCost.rights() >= AccessType::View)
        {
            return (select sum(CostAmountLedger) from projCostTransCost
                    where projCostTransCost.TransId == this.TransId).CostAmountLedger;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display CostPrice costPrice()
    {
        ProjCostTransCost   projCostTransCost;

        select sum(CostPrice) from projCostTransCost
            where projCostTransCost.TransId == this.TransId;
        
        return projCostTransCost.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPriceCurrency</Name>
				<Source><![CDATA[
    display AmountCur costPriceCurrency()
    {
        ProjCostTransCost   projCostTransCost;
        ProjTrans           projTransCost;
        Amount              transCost;
        ProjTrans           projTrans;
        Amount              currencyIdCost;

        select count(RecId), sum(CostPriceCurrency) from projCostTransCost
            where projCostTransCost.TransId == this.TransId;

        // Multiple funding sources exist
        if (projCostTransCost.RecId > 1)
        {
            while select projCostTransCost
                where projCostTransCost.TransId == this.TransId
            {
                projTransCost = ProjTrans::newProjCostTransCost(this, projCostTransCost);
                currencyIdCost += projCostTransCost.LineAmount;
            }
        }
        else
        {
            currencyIdCost = projCostTransCost.CostPriceCurrency;
        }
        return currencyIdCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCostAmount</Name>
				<Source><![CDATA[
    public display SalesAmount displayCostAmount()
    {
        return this.costAmount(this, dateNull(), dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesAmount</Name>
				<Source><![CDATA[
    public display SalesAmount displaySalesAmount()
    {
        return this.salesAmount(this, dateNull(), dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        ProjPostedTransTable::initFromProjCostTrans(this);

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            this.SysExtensionSerializerMap::postInsert();

            if (this.TransId != this.TransIdRef)
            {
                TransTaxInformationHelper::copyTransTaxInformation(ProjCostTrans::find(this.TransIdRef), this);
            }
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    public display ProjInvoiced invoiced()
    {
        return ProjTrans::newProjCostTrans(this).invoiced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    display ProjInvoiceId invoiceId()
    {
        return ProjTrans::newProjCostTrans(this).invoiceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this transaction was created for a resource employed by another legal entity.
    /// </summary>
    /// <returns>
    /// true if the resource is employed by another legal entity; false otherwise.
    /// </returns>
    public boolean isIntercompany()
    {
        if (this.Resource &&
            ResourceFacade::getLegalEntity(this.Resource) != CompanyInfo::findDataArea(this.dataAreaId).RecId)
        {
            return true;
        }
        else if (this.VendInvoiceTrans && ProjPendingVendorInvoiceIntercompanyCheckFlight::instance().isEnabled())
        {
            CustInvoiceTable custInvoiceTable = VendInvoiceTrans::getIntercompanyCustInvoiceTable(this.VendInvoiceTrans, this.ProjId, this.DataAreaId);

            if (custInvoiceTable.ProjIntercompany && custInvoiceTable.ProjIntercompany == this.DataAreaId)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    display ProjLedgerAccruedAmount ledgerSalesAmount()
    {
        DictTable dictTableProjCostTransSale;

        dictTableProjCostTransSale = new DictTable(tableNum(ProjCostTransSale));

        if (dictTableProjCostTransSale.rights() >= AccessType::View)
        {
            return (select sum(LedgerSalesAmount) from projCostTransSale
                    where projCostTransSale.TransId == this.TransId).LedgerSalesAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProjCostTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>ProjCostTransTaxExtensionIN</c> table
    /// </summary>
    /// <param name="_projCostTransTaxExtensionIN">
    /// ProjCostTransTaxExtensionIN is packed.
    /// </param>
    public void packProjCostTrans_IN(ProjCostTransTaxExtensionIN _projCostTransTaxExtensionIN)
    {
        _projCostTransTaxExtensionIN.ProjCostTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_projCostTransTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ProjCostTransTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>ProjCostTransTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public ProjCostTransTaxExtensionIN projCostTransTaxExtensionIN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjCostTransTaxExtensionIN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostTransView_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a view associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>ProjCostTransView_IN</c>.
    /// </returns>
    public ProjCostTransView_IN projCostTransView_IN()
    {
        ProjCostTransView_IN projCostTransView_IN;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projCostTransView_IN.initProjCostTrans(this);

            // If the view doesn't have a RecId then it will assume
            // this is an insert scenario when it isn't.  So we will
            // let the view borrow the RecId from the projCostTrans.  Since
            // no writes are done using this view this will work okay.
            projCostTransView_IN.RecId = this.RecId;
            return projCostTransView_IN;
        }

        return projCostTransView_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceStatus</Name>
				<Source><![CDATA[
    public display ProjInvoiceStatus projInvoiceStatus()
    {
        ProjInvoiceStatus projInvoiceStatus = ProjInvoiceStatus::None;
  
        // Adjusted transactions
        ProjCostTransSale adjustedTransaction;
        select firstonly RecId from adjustedTransaction
            where adjustedTransaction.TransId == this.TransId &&
                  adjustedTransaction.TransStatus == ProjTransStatus::Adjusted;
        if (adjustedTransaction)
        {
            projInvoiceStatus = ProjInvoiceStatus::Adjusted;
        }
        else
        {
            ProjTable projTable = ProjTable::find(this.ProjId);
            if (ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projTable, ProjTransType::Cost))
            {
                ProjFundingSource projFundingSource;

                ProjLineProperty projLineProperty = ProjLineProperty::find(this.LinePropertyId);
                if (projLineProperty.ToBeInvoiced == NoYes::Yes)
                {
                    ProjCostTransSale invoiced;
                    select firstonly RecId from invoiced
                        where invoiced.TransId == this.TransId &&
                            (invoiced.TransStatus == ProjTransStatus::Invoiced ||
                            invoiced.TransStatus == ProjTransStatus::MarkedCreditnote ||
                            invoiced.TransStatus == ProjTransStatus::CreditnoteProposal);

                    // For performance, Only search for OnHold if some of the transaction has been invoice
                    ProjCostTransSale onHoldFunding;
                    if (invoiced.RecId)
                    {
                        select firstonly RecId from onHoldFunding
                            where onHoldFunding.TransId == this.TransId
                            join RecId from projFundingSource
                                where projFundingSource.RecId == onHoldFunding.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource;
                    }

                    ProjCostTransSale chargeable;
                    select firstonly RecId from chargeable
                        where chargeable.TransId == this.TransId &&
                            (chargeable.TransStatus == ProjTransStatus::Posted ||
                            chargeable.TransStatus == ProjTransStatus::InvoiceProposal)
                        join RecId from projFundingSource
                            where projFundingSource.RecId == chargeable.FundingSource &&
                                (projFundingSource.FundingType == ProjFundingType::Customer ||
                                projFundingSource.FundingType == ProjFundingType::Grant);


                    if (invoiced.RecId && chargeable.RecId)
                    {
                        if (onHoldFunding)
                        {
                            projInvoiceStatus = ProjInvoiceStatus::PartiallyInvoicedWithOnhold;
                        }
                        else
                        {
                            projInvoiceStatus = ProjInvoiceStatus::PartiallyInvoiced;
                        }

                    }
                    else if (invoiced.RecId && !chargeable.RecId)
                    {
                        if (onHoldFunding)
                        {
                            projInvoiceStatus = ProjInvoiceStatus::FullyInvoicedWithOnhold;
                        }
                        else
                        {
                            projInvoiceStatus = ProjInvoiceStatus::FullyInvoiced;
                        }
                    }
                    else if (!invoiced.RecId && chargeable.RecId)
                    {
                        projInvoiceStatus = ProjInvoiceStatus::Chargeable;

                        // The check against billing rules is delayed to this point as it is an expensive operation
                        if (!ProjInvoiceTable::isBillingRuleInvoiceable(this.ProjId, this.CategoryId, this.psaContractLineNum, ProjTransType::Cost))
                        {
                            projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                        }
                    }
                    else if (!invoiced.RecId && !chargeable.RecId)
                    {
                        projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                    }
                }
                else
                {
                    projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                }
            }
            else
            {
                // Transactions are not invoiceable for Fixed Price, Investment, Time, Cost projects
                projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
            }
        }

        return projInvoiceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable()
    {
        return ProjTable::find(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    display ProjProposal proposal()
    {
        return ProjTrans::newProjCostTrans(this).proposal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    display ProjProposalId proposalId()
    {
        return ProjTrans::newProjCostTrans(this).proposalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaProjTransDate</Name>
				<Source><![CDATA[
    display ProjTransDate psaProjTransDate()
    {
        ProjTransPosting        tProjTransPosting;
        
        select firstonly ProjTransDate from tProjTransPosting
        where tProjTransPosting.TransId         == this.TransId
            && tProjTransPosting.ProjId          == this.ProjId
            && tProjTransPosting.ProjTransType   == ProjTransType::Cost
            && tProjTransPosting.CostSales       == ProjCostSales::Cost;
        //If it's not there then return the Transdate from the projCostTrans Table
        if (tProjTransPosting.ProjTransDate)
        {
            return tProjTransPosting.ProjTransDate;
        }
        else
        {
            return this.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    SalesAmount salesAmount(ProjCostTrans projCostTrans, TransDate ledgerFromDate, TransDate ledgerToDate)
    {
        return projStatement::newProjCostTrans(projCostTrans, ledgerFromDate, ledgerToDate).a100_Total_Revenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    display SalesPrice salesPrice()
    {
        AmountCur   transTurnover;
        ProjTrans   projTrans;
        ProjCostTransSale   projCostTransSale;
        SalesPrice          salesPrice;

        select count(RecId), sum(SalesPrice) from projCostTransSale
            where projCostTransSale.TransId == this.TransId;

        // Multiple funding sources exist
        if (projCostTransSale.RecId > 1)
        {
            transTurnover = this.transTurnover();
            projTrans = ProjTrans::newProjCostTrans(this);
            salesPrice = CurrencyExchangeHelper::price(transTurnover / (projTrans.qty() ? projTrans.qty() : 1), projTrans.currencyIdSales());
        }
        else
        {
            salesPrice = projCostTransSale.SalesPrice;
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    display ProjCost transCost()
    {
        return ProjTrans::newProjCostTrans(this).transCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the revenue for a transaction.
    /// </summary>
    /// <param name="_transID">
    /// Transaction ID for turnover amount.
    /// </param>
    /// <param name="_isConsiderCredit">
    /// Indicates whether credit note transactions are to be considered.
    /// </param>
    /// <returns>
    /// An <c>AmountCur</c> data type that represents the revenue for the transaction.
    /// </returns>
    /// <remarks>
    /// The revenue is calculated as quantity multiplied by the sales price. The revenue amount that is
    /// returned is in the currency of the transaction.
    /// </remarks>
    protected ProjTurnover getTurnover(ProjCostTransId _transID, boolean _isConsiderCredit = true)
    {
        ProjCostTransSale   projCostTransSale;
        ProjTrans           projTransSale;
        AmountCur           transTurnover;

        while select projCostTransSale
            where projCostTransSale.TransId == _transid &&
                (!projCostTransSale.wipPeriod || (projCostTransSale.wipPeriod && projCostTransSale.TransStatus != ProjTransStatus::Adjusted)) &&
                (_isConsiderCredit            || (!_isConsiderCredit && projCostTransSale.TransStatus != ProjTransStatus::MarkedCreditnote))
        {
            projTransSale = ProjTrans::newProjCostTransSale(this, projCostTransSale);
            transTurnover += CurrencyExchangeHelper::amount((projTransSale.qty() ? projTransSale.qty() : 1) * projTransSale.salesPrice(), projTransSale.currencyIdSales());
        }

        return transTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the revenue for a transaction.
    /// </summary>
    /// <param name="_isConsiderCredit">
    /// Indicates whether credit note transactions are to be considered.
    /// </param>
    /// <returns>
    /// An <c>AmountCur</c> data type that represents the revenue for the transaction.
    /// </returns>
    /// <remarks>
    /// The revenue is calculated as quantity multiplied by the sales price. The revenue amount that is
    /// returned is in the currency of the transaction.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    display ProjTurnover transTurnover(boolean _isConsiderCredit = true)
    {
        return this.getTurnover(this.TransId, _isConsiderCredit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #isoCountryRegionCodes

        super();

        ProjPostedTransTable::updateFromProjCostTrans(this);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postUpdate();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        boolean             ret;

        ret = super();

        if (ret)
        {
            ret  = projValCheckTrans.validateMandatory(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWIPPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the Work in Progress (WIP) for a given project and period.
    /// </summary>
    /// <param name="projId">
    ///    The project ID of the project for which to clear the WIP.
    /// </param>
    /// <param name="projPeriodTo">
    ///    The end date of the period to clear.
    /// </param>
    /// <param name="beginningBalance">
    ///    The transactions of the starting balance type.
    /// </param>
    public static void clearWIPPeriod(ProjId projId, ProjPeriodTo projPeriodTo, ProjBeginningBalance beginningBalance)
    {
        ProjCostTrans       projCostTrans;
        ProjCostTransCost   projCostTransCost;
        ProjTable           projTable;

        update_recordset projCostTransCost
        setting
            wipPeriod   = dateNull(),
            TransStatus = ProjTransStatus::Posted
        where projCostTransCost.TransStatus == ProjTransStatus::Estimated
           && projCostTransCost.wipPeriod   == projPeriodTo
        exists join projCostTrans
            where projCostTrans.TransId == projCostTransCost.TransId
            && ((beginningBalance && projCostTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!beginningBalance && projCostTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        exists join projTable
            where projTable.wipProject == projId
               && projTable.ProjId     == projCostTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWIPPeriodContractLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the Work in Progress (WIP) for a given project and period
    ///    when WIPProject was created with ProjContractLineBasedRevenueRecognitionFeature on.
    /// </summary>
    /// <param name="projWIPId">
    ///    The project ID of the WIP project for which to clear the WIP.
    /// </param>
    /// <param name="projPeriodTo">
    ///    The end date of the period to clear.
    /// </param>
    /// <param name="beginningBalance">
    ///    The transactions of the starting balance type.
    /// </param>
    public static void clearWIPPeriodContractLine(ProjWIPId projWIPId, ProjPeriodTo projPeriodTo, ProjBeginningBalance beginningBalance)
    {
        ProjCostTrans       projCostTrans;
        ProjCostTransCost   projCostTransCost;
        ProjRevRecContractLine projRevRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(projWIPId).IsContractLineUsed;

        if(!isContractLineUsed || !contractLineBasedRevRecFeature)
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        update_recordset projCostTransCost
        setting
            wipPeriod   = dateNull(),
            TransStatus = ProjTransStatus::Posted
        where projCostTransCost.TransStatus == ProjTransStatus::Estimated
           && projCostTransCost.wipPeriod   == projPeriodTo
        exists join projCostTrans
            where projCostTrans.TransId == projCostTransCost.TransId
            && ((beginningBalance && projCostTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!beginningBalance && projCostTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        exists join projRevRecContractLine
                where projRevRecContractLine.ContractLineNum == projCostTrans.PSAContractLineNum
                && projRevRecContractLine.RevenueRecognitionId == projWIPId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountDisplayCache</Name>
				<Source><![CDATA[
    static container costAmountDisplayCache(
        container   _conProjCostTrans,
        container   _conProjCostTransSalesAmount,
        TransDate   _ledgerFromDate,
        TransDate   _ledgerToDate)
    {
        ProjCostTrans    projCostTrans;
        Set              setProjCostTrans;
        Map              mapProjCostTransSalesAmount;
        SetIterator      si;

        if (_conProjCostTrans)
        {
            setProjCostTrans    = Set::create(_conProjCostTrans);
        }

        if (_conProjCostTransSalesAmount)
        {
            mapProjCostTransSalesAmount  = Map::create(_conProjCostTransSalesAmount);
        }

        si = new SetIterator(setProjCostTrans);
        si.begin();
        while (si.more())
        {
            projCostTrans = ProjCostTrans::find(si.value());
            mapProjCostTransSalesAmount.insert(si.value(), projCostTrans.costAmount(projCostTrans,_ledgerFromDate,_ledgerToDate));
            si.next();
        }

        return mapProjCostTransSalesAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(ProjCostTransId _transId)
    {
        return (select projCostTrans
                    where projCostTrans.TransId  == _transId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjCostTrans find(ProjCostTransId _transId, boolean _forUpdate = false)
    {
        ProjCostTrans    projCostTrans = null;

        projCostTrans.selectForUpdate(_forUpdate);

        if (_transId)
        {
            select firstonly projCostTrans where projCostTrans.TransId == _transId;
        }

        return projCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromJournal</Name>
				<Source><![CDATA[
    public static ProjCostTrans initTransFromJournal(
        LedgerJournalTrans          _ledgerJournalTrans,
        LedgerJournalTrans_Project  _ledgerJournalTrans_Project)
    {
        ProjCostTrans  projCostTrans;
        // <GIN>
        ProjCostTransTaxExtensionIN                 projCostTransTaxExtensionIN;
        LedgerJournalTrans_ProjectTaxExtensionIN    ledgerJourTransProjTaxExt;
        // </GIN>

        projCostTrans.CategoryId            = _ledgerJournalTrans_Project.CategoryId;
        projCostTrans.CurrencyId            = _ledgerJournalTrans_Project.SalesCurrencyId;
        projCostTrans.CurrencyIdCost        = _ledgerJournalTrans.CurrencyCode;
        projCostTrans.DefaultDimension      = _ledgerJournalTrans.DefaultDimension;
        projCostTrans.ProjId                = _ledgerJournalTrans.parmAccount();
        projCostTrans.ActivityNumber        = _ledgerJournalTrans_Project.ActivityNumber;
        projCostTrans.Qty                   = _ledgerJournalTrans_Project.Qty;
        projCostTrans.LinePropertyId        = _ledgerJournalTrans_Project.LinePropertyId;
        projCostTrans.Txt                   = _ledgerJournalTrans.Txt;
        projCostTrans.TransDate             = _ledgerJournalTrans_Project.ProjTransDate;
        projCostTrans.TaxGroupId            = _ledgerJournalTrans_Project.TaxGroupSales;
        projCostTrans.TaxItemGroupId        = _ledgerJournalTrans_Project.TaxItemGroupSales;
        projCostTrans.Resource              = _ledgerJournalTrans_Project.Resource;
        projCostTrans.ResourceCategory      = _ledgerJournalTrans_Project.resourceCategory();
        projCostTrans.TransId               = _ledgerJournalTrans_Project.TransId;
        projCostTrans.TransIdRef            = _ledgerJournalTrans_Project.TransId;
        ProjCostTrans.Correction            = _ledgerJournalTrans_Project.Correction;
        
        ProjCostTrans::setVendorAccountVendorName(projCostTrans,_ledgerJournalTrans);

        projCostTrans::populatePSAContractLineNum(projCostTrans);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            projCostTransTaxExtensionIN     = projCostTrans.projCostTransTaxExtensionIN();
            ledgerJourTransProjTaxExt       = LedgerJournalTrans_ProjectTaxExtensionIN::findByLedgerJournalTrans_Project(_ledgerJournalTrans_Project.RecId);

            projCostTransTaxExtensionIN.AssessableValueTransactionCurrency  = ledgerJourTransProjTaxExt.AssessableValueTransactionCurrency;
            projCostTransTaxExtensionIN.MaximumRetailPrice                  = ledgerJourTransProjTaxExt.MaximumRetailPrice;
            projCostTrans.packProjCostTrans_IN(projCostTransTaxExtensionIN);
        }
        // </GIN>

        return projCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendorAccountVendorName</Name>
				<Source><![CDATA[
    private static void setVendorAccountVendorName(ProjCostTrans _projCostTrans,LedgerJournalTrans _ledgerJournalTrans)
    {
        if (FeatureStateProvider::isFeatureEnabled(ProjProjectTransactionsListPageVendFeature::instance())
            && _ledgerJournalTrans.AccountType == LedgerJournalACType::Project)
        {
            if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
            {
                _projCostTrans.VendorName = _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend ?
                    _ledgerJournalTrans.accountName() :
                    _ledgerJournalTrans.offsetAccountName();

                _projCostTrans.VendorAccount = LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension);
            }
            else if (_ledgerJournalTrans.VendTransId)
            {
                VendTrans vendTrans;

                select firstonly AccountNum from vendTrans
                    where vendTrans.RecId == _ledgerJournalTrans.VendTransId;

                if (vendTrans.AccountNum)
                {
                    _projCostTrans.VendorAccount = vendTrans.AccountNum;

                    if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project)
                    {
                        _projCostTrans.VendorName = _ledgerJournalTrans.LedgerDimensionName;
                    }
                    else
                    {
                        _projCostTrans.VendorName = VendTable::find(vendTrans.AccountNum).name();
                    }
                }
            }
            // Displays vendor name/account for AP invoice linked to project in the posted project transactions.
            else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                LedgerJournalTrans ledgerJourVendTrans;
                if (_ledgerJournalTrans.Voucher)
                {
                    select firstonly LedgerDimension, LedgerDimensionName from ledgerJourVendTrans
                        where ledgerJourVendTrans.Voucher == _ledgerJournalTrans.Voucher
                            && ledgerJourVendTrans.AccountType == LedgerJournalACType::Vend
                            && ledgerJourVendTrans.TransactionType == LedgerTransType::Vend;
                }

                if (ledgerJourVendTrans && ledgerJourVendTrans.LedgerDimensionName && ledgerJourVendTrans.LedgerDimension)
                {
                    _projCostTrans.VendorName = ledgerJourVendTrans.LedgerDimensionName;

                    DimensionDisplayValue accountNumber = LedgerDimensionFacade::getDisplayValueForLedgerDimension(ledgerJourVendTrans.LedgerDimension);
                    if (accountNumber)
                    {
                        _projCostTrans.VendorAccount = accountNumber;
                    }
                }
            }

            // Displays vendor name/account associated with resource for expense journal in the posted project transactions.
            if (!_projCostTrans.VendorName || !_projCostTrans.VendorAccount)
            {
                TrvPartyEmployeeRelationship trvPartyEmployeeRelationship;
                ResourceView resourceView;

                select firstonly LedgerDimension, AccountType, DataAreaId from trvPartyEmployeeRelationship
                    join Worker, ResourceCompanyId from resourceView
                        where resourceView.RecId == _projCostTrans.Resource
                            && resourceView.Worker == trvPartyEmployeeRelationship.Worker
                            && resourceView.ResourceCompanyId == trvPartyEmployeeRelationship.DataAreaId;

                DimensionDisplayValue accountNumber = LedgerDimensionFacade::getDisplayValueForLedgerDimension(trvPartyEmployeeRelationship.LedgerDimension);
                if (accountNumber)
                {
                    _projCostTrans.VendorAccount = accountNumber;
                    _projCostTrans.VendorName = LedgerJournalTransLedgerDimensionNameHelper::findName(trvPartyEmployeeRelationship.DataAreaId, trvPartyEmployeeRelationship.AccountType, trvPartyEmployeeRelationship.LedgerDimension);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePSAContractLineNum</Name>
				<Source><![CDATA[
    private static void populatePSAContractLineNum(ProjCostTrans _projCostTrans)
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            ProjInvoiceProjId contractId = ProjTable::find(_projCostTrans.ProjId).ProjInvoiceProjId;
            if (contractId)
            {
                _projCostTrans.PSAContractLineNum = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineNumForTransType(_projCostTrans.ProjId, contractId, ProjTransType::Cost);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPTransOpenAfterDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to check if there are any transactions not included in WIP after the given date.
    /// </summary>
    /// <param name = "_projWipId">Rev rec project ID.</param>
    /// <param name = "_date">Transaction date.</param>
    /// <param name = "_infoMsgType">Level of info message.</param>
    /// <returns>true if there are transactions after the given date; otherwise false.</returns>
    public static boolean isWIPTransOpenAfterDate(ProjWipId _projWipId, TransDate _date, ProjMsgLevel _infoMsgType = ProjMsgLevel::None)
    {
        ProjCostTrans projCostTrans;
        ProjCostTransCost projCostTransCost;
        ProjTable projTable;
        boolean ret = false;
        ProjRevRecContractLine  revRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(_projWipId).IsContractLineUsed;

        
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;

                while select ProjId, VoucherJournal, TransDate, TransId from projCostTrans
                where projCostTrans.TransDate > _date
            exists join projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId
                    && projCostTransCost.wipPeriod == dateNull()
                    && projCostTransCost.TransStatus == ProjTransStatus::Posted
            exists join contractLine
                where contractLine.ContractLineNum == projCostTrans.PSAContractLineNum
                    && contractLine.IncludeExpenseTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
            exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projCostTrans.PSAContractLineNum
                {
                    ProjCostTrans::addWIPOpenAfterDateTransMessage(projCostTrans, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select ProjId, VoucherJournal, TransDate, TransId from projCostTrans
            where projCostTrans.TransDate > _date
           exists join projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId
                    && projCostTransCost.wipPeriod == dateNull()
                    && projCostTransCost.TransStatus == ProjTransStatus::Posted
            exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projCostTrans.PSAContractLineNum
                {
                    ProjCostTrans::addWIPOpenAfterDateTransMessage(projCostTrans, _infoMsgType);
                    ret = true;
                }
            }
        }
        else
        {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            PSAContractLineItems contractLine;

            while select ProjId, VoucherJournal, TransDate, TransId from projCostTrans
                where projCostTrans.TransDate > _date
            exists join projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId
                    && projCostTransCost.wipPeriod == dateNull()
                    && projCostTransCost.TransStatus == ProjTransStatus::Posted
            join ProjId, wipProject from projTable
                where projTable.ProjId == projCostTrans.ProjId
                    && projTable.wipProject == _projWipId
            exists join contractLine
                where contractLine.ContractLineNum == projCostTrans.PSAContractLineNum
                    && contractLine.IncludeExpenseTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
            {
                ProjCostTrans::addWIPOpenAfterDateTransMessage(projCostTrans, _infoMsgType);
                ret = true;
            }
        }
        else
        {
            while select ProjId, VoucherJournal, TransDate, TransId from projCostTrans
            where projCostTrans.TransDate > _date
           exists join projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId
                    && projCostTransCost.wipPeriod == dateNull()
                    && projCostTransCost.TransStatus == ProjTransStatus::Posted
            join ProjId, wipProject from projTable
                where projTable.ProjId == projCostTrans.ProjId
                    && projTable.wipProject == _projWipId
            {
                ProjCostTrans::addWIPOpenAfterDateTransMessage(projCostTrans, _infoMsgType);
                ret = true;
            }
        }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPTransOpenBeforeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to check if there are any transactions not included in WIP before the given date.
    /// </summary>
    /// <param name = "_projWipId">Rev rec project ID.</param>
    /// <param name = "_date">Transaction date.</param>
    /// <param name = "_infoMsgType">Level of info message.</param>
    /// <returns>true if there are transactions before the given date; otherwise false.</returns>
    public static boolean isWIPTransOpenBeforeDate(ProjWipId _projWipId, TransDate _date, ProjMsgLevel _infoMsgType = ProjMsgLevel::None)
    {
        ProjCostTrans projCostTrans;
        ProjCostTransCost projCostTransCost;
        ProjTable projTable;
        boolean ret = false;
        ProjRevRecContractLine  revRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(_projWipId).IsContractLineUsed;

        
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;
                while select ProjId, VoucherJournal, TransDate, TransId from projCostTrans
            where projCostTrans.TransDate <= _date
            exists join projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId
                    && projCostTransCost.wipPeriod == dateNull()
                    && projCostTransCost.TransStatus == ProjTransStatus::Posted
            exists join contractLine
                where contractLine.ContractLineNum == projCostTrans.PSAContractLineNum
                    && contractLine.IncludeExpenseTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
             exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projCostTrans.PSAContractLineNum
                {
                    ProjCostTrans::addWIPOpenBeforeDateTransMessage(projCostTrans, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select ProjId, VoucherJournal, TransDate, TransId from projCostTrans
            where projCostTrans.TransDate <= _date
            exists join projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId
                    && projCostTransCost.wipPeriod == dateNull()
                    && projCostTransCost.TransStatus == ProjTransStatus::Posted
             exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projCostTrans.PSAContractLineNum
                {
                    ProjCostTrans::addWIPOpenBeforeDateTransMessage(projCostTrans, _infoMsgType);
                    ret = true;
                }
            }
        }
        else
        {

            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;
                while select ProjId, VoucherJournal, TransDate, TransId from projCostTrans
            where projCostTrans.TransDate <= _date
            exists join projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId
                    && projCostTransCost.wipPeriod == dateNull()
                    && projCostTransCost.TransStatus == ProjTransStatus::Posted
            exists join RecId from projTable
                where projTable.ProjId == projCostTrans.ProjId
                    && projTable.wipProject == _projWipId
            exists join contractLine
                where contractLine.ContractLineNum == projCostTrans.PSAContractLineNum
                    && contractLine.IncludeExpenseTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
                {
                    ProjCostTrans::addWIPOpenBeforeDateTransMessage(projCostTrans, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select ProjId, VoucherJournal, TransDate, TransId from projCostTrans
            where projCostTrans.TransDate <= _date
            exists join projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId
                    && projCostTransCost.wipPeriod == dateNull()
                    && projCostTransCost.TransStatus == ProjTransStatus::Posted
            exists join RecId from projTable
                where projTable.ProjId == projCostTrans.ProjId
                    && projTable.wipProject == _projWipId
                {
                    ProjCostTrans::addWIPOpenBeforeDateTransMessage(projCostTrans, _infoMsgType);
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWIPOpenBeforeDateTransMessage</Name>
				<Source><![CDATA[
    private static void addWIPOpenBeforeDateTransMessage(ProjCostTrans _projCostTrans, ProjMsgLevel _infoMsgType)
    {
        switch (_infoMsgType)
        {
            case ProjMsgLevel::Info :
                info(strFmt("@SYS70636", tableId2pname(tableNum(ProjCostTrans)), _projCostTrans.ProjId, _projCostTrans.VoucherJournal, date2StrUsr(_projCostTrans.TransDate, DateFlags::FormatAll)));
                break;

            case ProjMsgLevel::Warning :
                warning(strFmt("@SYS70636", tableId2pname(tableNum(ProjCostTrans)), _projCostTrans.ProjId, _projCostTrans.VoucherJournal, date2StrUsr(_projCostTrans.TransDate, DateFlags::FormatAll)));
                break;

            case ProjMsgLevel::Error :
                error(strFmt("@SYS70636", tableId2pname(tableNum(ProjCostTrans)), _projCostTrans.ProjId, _projCostTrans.VoucherJournal, date2StrUsr(_projCostTrans.TransDate, DateFlags::FormatAll)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWIPOpenAfterDateTransMessage</Name>
				<Source><![CDATA[
    private static void addWIPOpenAfterDateTransMessage(ProjCostTrans _projCostTrans, ProjMsgLevel _infoMsgType)
    {
        switch (_infoMsgType)
        {
            case ProjMsgLevel::Info :
                info(strFmt("@SYS70636", tableId2pname(tableNum(ProjCostTrans)), _projCostTrans.ProjId, _projCostTrans.VoucherJournal, date2StrUsr(_projCostTrans.TransDate, DateFlags::FormatAll)));
                break;

            case ProjMsgLevel::Warning :
                warning(strFmt("@SYS70636", tableId2pname(tableNum(ProjCostTrans)), _projCostTrans.ProjId, _projCostTrans.VoucherJournal, date2StrUsr(_projCostTrans.TransDate, DateFlags::FormatAll)));
                break;

            case ProjMsgLevel::Error :
                error(strFmt("@SYS70636", tableId2pname(tableNum(ProjCostTrans)), _projCostTrans.ProjId, _projCostTrans.VoucherJournal, date2StrUsr(_projCostTrans.TransDate, DateFlags::FormatAll)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefTransId</Name>
				<Source><![CDATA[
    static void jumpRefTransId(
        Common  common,
        Object  object,
        str     parm = '')
    {
        Args args = new Args();
        args.record(common);
        args.caller(object);
        args.parm(parm);

        new MenuFunction(menuitemDisplayStr(ProjTransCost), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransId</Name>
				<Source><![CDATA[
    static Num newTransId()
    {
        NumberSeq   numberSeq;

        numberSeq       = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase());
        return numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>originCost2LedgerJournalType</Name>
				<Source><![CDATA[
    public static LedgerJournalType originCost2LedgerJournalType(ProjOrigin originCost)
    {
        LedgerJournalType ledgerJournalType;

        switch (originCost)
        {
            case ProjOrigin::ExpenseManagement : 
                ledgerJournalType = LedgerJournalType::Daily;
                break;

            case ProjOrigin::GeneralJournal : 
                ledgerJournalType = LedgerJournalType::Daily;
                break;

            case ProjOrigin::CostJournal : 
                ledgerJournalType = LedgerJournalType::Cost;
                break;

            case ProjOrigin::PurchaseOrder :
            case ProjOrigin::VendorInvoice :
            case ProjOrigin::InvoiceJournal :
                ledgerJournalType = LedgerJournalType::VendInvoiceRegister;
                break;

            case ProjOrigin::InvoiceApprovalJournal : 
                ledgerJournalType = LedgerJournalType::Approval;
                break;

            case ProjOrigin::AdvancedLedgerEntry : 
                ledgerJournalType = LedgerJournalType::Daily; 
                break;

            default:
                ledgerJournalType = LedgerJournalType::Daily;
        }

        return ledgerJournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaFindProjCostTrans</Name>
				<Source><![CDATA[
    static ProjCostTrans   psaFindProjCostTrans(ProjCostTransId _projCostTransId,
                                                SalesPrice      _salesPrice)
    {
        ProjCostTrans       projCostTrans;
        ProjCostTransSale   projCostTransSale;

        select firstonly TransId from projCostTrans
            join TransId from projCostTransSale
            where projCostTransSale.TransId == projCostTrans.TransId
                && projCostTrans.psaProjOrigTransId == _projCostTransId
                && projCostTransSale.SalesPrice         == _salesPrice;

        return projCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountDisplayCache</Name>
				<Source><![CDATA[
    static container salesAmountDisplayCache(
        container   _conprojCostTrans,
        container   _conprojCostTransSalesAmount,
        TransDate   _ledgerFromDate,
        TransDate   _ledgerToDate)
    {
        ProjCostTrans    projCostTrans;
        Set              setprojCostTrans;
        Map              mapprojCostTransSalesAmount;
        SetIterator      si;

        if (_conprojCostTrans)
        {
            setprojCostTrans = Set::create(_conprojCostTrans);
        }

        if (_conprojCostTransSalesAmount)
        {
            mapprojCostTransSalesAmount = Map::create(_conprojCostTransSalesAmount);
        }

        si = new SetIterator(setprojCostTrans);
        si.begin();
        while (si.more())
        {
            projCostTrans = ProjCostTrans::find(si.value());
            mapprojCostTransSalesAmount.insert(si.value(), projCostTrans.salesAmount(projCostTrans,_ledgerFromDate,_ledgerToDate));
            si.next();
        }

        return mapprojCostTransSalesAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales purch journal table for tax model.
    /// </summary>
    /// <returns>
    /// The instance of the <c>SalesPurchJournalTable</c> class.
    /// </returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        ProjProposalJour projProposalJour;
        ProjProposalCost projProposalCost;

        select firstOnly RecId from projProposalJour
            join RecId from projProposalCost
                where projProposalCost.ProposalId == projProposalJour.ProposalId
                    && projProposalCost.TransId == this.TransId;

        return TaxEngineProjCostTransHeader::findOrCreateByProjProposalJour(projProposalJour);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124893</DeveloperDocumentation>
	<FormRef>ProjTransCost</FormRef>
	<Label>@SYP4882014</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProjDateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>TransIdx</PrimaryIndex>
	<ReplacementKey>TransIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceCost</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceCost</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalCost</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalCost</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyIdCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPriceCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvestmentTaxAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costAmountLedger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalCostAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS14204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>proposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>invoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Origin</Name>
			<Label>@SYS26398</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAProjOrigTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAContractLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ledgerSalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdjRefTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostTransId</ExtendedDataType>
			<Label>@SYS115827</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyIdCost</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS87716</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvestmentTaxAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS87715</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCorrection</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerCorrection</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAContractLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAProjOrigTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAProjOrigTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjQtyCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceLegalEntity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalCostAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTotalCostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalSalesAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTotalSalesAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransactionOrigin</ExtendedDataType>
			<EnumType>ProjOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransIdRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostTransId</ExtendedDataType>
			<Label>@SYS71999</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoucherJournal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransactionVoucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerLegalEntity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorAccount</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorName</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>VendName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Correction</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ProjCorrection</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubcontractLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSubcontractLine</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionGroupId</Name>
			<ExtendedDataType>ProjTransactionGroupId</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_ProjCostTr</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AdjRefTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AdjRefTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerJournalTrans</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInvoiceTrans</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumber</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdRef</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransIdRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransactionGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherJournalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>VoucherJournal</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ProjProposalTransMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransTxt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PSAProjTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Amount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyId</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsReleased</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsRetained</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePropertyId</MapField>
					<MapFieldTo>LinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroupId</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroupId</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionOrigin</MapField>
					<MapFieldTo>TransactionOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransId</MapField>
					<MapFieldTo>TransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransStatus</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>TransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrencyCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CurrencyCost</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjCostTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyIdCost</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyIdCost</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjCostTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjCostTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerLegalEntity</Name>
					<Field>WorkerLegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCostTrans_AdjRefTransId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCostTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCostTrans_AdjRefTransId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjCostTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdjRefTransId</Name>
					<SourceEDT>ProjCostTransId</SourceEDT>
					<Field>AdjRefTransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCostTrans_TransIdRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCostTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCostTrans_TransIdRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjCostTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransIdRef</Name>
					<SourceEDT>ProjCostTransId</SourceEDT>
					<Field>TransIdRef</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjCostTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTransPostingView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTransPostingView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransId</Name>
					<Field>TransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAContractLineItems</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PSAContractLineItems</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAContractLineNum</Name>
					<SourceEDT>PSAContractLineNum</SourceEDT>
					<Field>PSAContractLineNum</Field>
					<RelatedField>ContractLineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContractLineNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>TaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans_Project</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceTrans</Name>
					<Field>VendInvoiceTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorAccount</Name>
					<Field>VendorAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirPartyTable</Name>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorName</Name>
					<Field>VendorName</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>