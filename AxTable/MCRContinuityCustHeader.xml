<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRContinuityCustHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRContinuityCustHeader extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDfltContCustHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default record based on the schedule and the sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record used to create the new
    /// <c>MCRContinuityCustHeader</c> record.
    /// </param>
    /// <param name="_continuityScheduleHeader">
    /// The <c>MCRContinuityScheduleHeader</c> record used to create the
    /// new <c>MCRContinuityCustHeader</c> record.
    /// </param>
    /// <returns>
    /// The newly created <c>MCRContinuityCustHeader</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if unable to create the <c>MCRContinuityCustHeader</c> record.
    /// </exception>
    public MCRContinuityCustHeader createDfltContCustHeader(
        SalesLine                   _salesLine,
        MCRContinuityScheduleHeader _continuityScheduleHeader)
    {
        MCRContinuityCustHeader mcrContinuityCustHeader;
        MCRSalesLine            mcrSalesLine = _salesLine.mcrSalesLine();

        ttsbegin;

        mcrContinuityCustHeader.InventTransId       = _salesLine.InventTransId;
        mcrContinuityCustHeader.SalesId             = _salesLine.SalesId;
        mcrContinuityCustHeader.BillUpFront         = _continuityScheduleHeader.BillUpfront;
        mcrContinuityCustHeader.PaymentScheduleId   = _continuityScheduleHeader.PaymSchedId;
        mcrContinuityCustHeader.ScheduleId          = mcrSalesLine.ContinuityScheduleId;
        mcrContinuityCustHeader.CustAccount         = _salesLine.CustAccount;
        mcrContinuityCustHeader.setStartOrderDate(mcrSalesLine.ContinuityScheduleId);

        if (mcrContinuityCustHeader.validateWrite())
        {
            mcrContinuityCustHeader.insert();
        }
        else
        {
            throw error("@SYS136548");
        }

        ttscommit;

        return mcrContinuityCustHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the continuity order has any unfulfilled lines.
    /// </summary>
    /// <returns>
    /// true if the continuity order has any unfulfilled lines; otherwise, false.
    /// </returns>
    public boolean hasOpenLines()
    {
        boolean                 ret = false;
        MCRContinuityCustLine   mcrContinuityCustLine;

        select firstonly RecId from mcrContinuityCustLine
            where mcrContinuityCustLine.InventTransId   == this.InventTransId
               && mcrContinuityCustLine.SalesId         == ""
               && mcrContinuityCustLine.ActionCode      != MCRContinuityActionCode::Skip;

        if (mcrContinuityCustLine.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStartOrderDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the order start date of the current record.
    /// </summary>
    /// <param name="_mcrContinuityScheduleID">
    /// The continuity schedule ID used to calculate the start data.
    /// </param>
    /// <remarks>
    /// If the calculated date is less than the current system date, then the start
    /// date will be set tothe current system date.
    /// </remarks>
    private void setStartOrderDate(MCRContinuityScheduleID _mcrContinuityScheduleID)
    {
        MCRContinuityCalcOrderDate  mcrContinuityCalcOrderDate;
        MCRContinuityCustLine       mcrContinuityCustLine;
        MCRContinuityScheduleLine   mcrContinuityScheduleLine;

        mcrContinuityScheduleLine = MCRContinuityScheduleLine::getFirstEvent(_mcrContinuityScheduleID);

        mcrContinuityCalcOrderDate = new MCRContinuityCalcOrderDate();
        this.StartDate = mcrContinuityCalcOrderDate.getOrderDate(
            mcrContinuityScheduleLine,
            mcrContinuityCustLine);

        if (this.StartDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            this.StartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callContinuityCustHeaderForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the continuity customer header form.
    /// </summary>
    /// <param name="_inventTransId">
    /// Inventory transaction ID.
    /// </param>
    /// <param name="_mode">
    /// Mode to pass to form upon opening; optional.
    /// </param>
    /// <param name="_disable">
    /// If true, then the continuity customer header form will be disabled upon opening; optional.
    /// </param>
    public static void callContinuityCustHeaderForm(
        InventTransId   _inventTransId,
        str             _mode    = "",
        NoYes           _disable = false)
    {
        FormRun     formRun;
        Args        args;
        SalesLine   salesLine;

        args = new Args();

        salesLine = SalesLine::findInventTransId(_inventTransId);
        args.record(salesLine);
        args.parm(_mode);

        // The enumerated slot of the form arguments specifies whether or not the
        // continuity customer form should be disabled.
        args.parmEnum(_disable);

        formRun = new MenuFunction(menuitemDisplayStr(MCRContinuityCustInfo), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the payment schedule and payment schedule lines.
    /// </summary>
    /// <param name="_mcrContinuityCustHeader">
    /// The <c>MCRContinuityCustHeader</c> record for which to create the payment schedule.
    /// </param>
    public static void createPaymentSched(MCRContinuityCustHeader _mcrContinuityCustHeader)
    {
        CustVendPaymSched custVendPaymSched;

        if (_mcrContinuityCustHeader.PaymentScheduleId
            && !CustPaymSched::exist(_mcrContinuityCustHeader.TableId, _mcrContinuityCustHeader.RecId))
        {
              custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust, _mcrContinuityCustHeader);
              custVendPaymSched.createPaymSched(PaymSched::find(_mcrContinuityCustHeader.PaymentScheduleId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRContinuityCustHeader</c> table.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID of the <c>MCRContinuityCustHeader</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>MCRContinuityCustHeader</c>; otherwise, an empty record.
    /// </returns>
    public static MCRContinuityCustHeader find(
        InventTransId   _inventTransId,
        boolean         _forUpdate = false)
    {
        MCRContinuityCustHeader mcrContinuityCustHeader;

        if (_inventTransId)
        {
            mcrContinuityCustHeader.selectForUpdate(_forUpdate);

            select firstonly mcrContinuityCustHeader
                where mcrContinuityCustHeader.InventTransId == _inventTransId;
        }

        return mcrContinuityCustHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbySalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRContinuityCustHeader</c> table.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID of the <c>MCRContinuityCustHeader</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>MCRContinuityCustHeader</c>; otherwise, an empty record.
    /// </returns>
    public static MCRContinuityCustHeader findbySalesId(
        SalesId _salesId,
        boolean _forUpdate = false)
    {
        MCRContinuityCustHeader mcrContinuityCustHeader;

        if (_salesId)
        {
            mcrContinuityCustHeader.selectForUpdate(_forUpdate);

            select firstonly mcrContinuityCustHeader
                where mcrContinuityCustHeader.SalesId == _salesId;
        }

        return mcrContinuityCustHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransSchedId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRContinuityCustHeader</c> table.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID of the <c>MCRContinuityCustHeader</c> table record to find.
    /// </param>
    /// <param name="_continuitySchedId">
    /// The continuity schedule ID of the <c>MCRContinuityCustHeader</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in <c>MCRContinuityCustHeader</c>; otherwise, an empty record.
    /// </returns>
    public static MCRContinuityCustHeader findInventTransSchedId(
        InventTransId           _inventTransId,
        MCRContinuityScheduleID _continuitySchedId,
        boolean                 _forUpdate = false)
    {
        MCRContinuityCustHeader mcrContinuityCustHeader;

        if (_inventTransId && _continuitySchedId)
        {
            mcrContinuityCustHeader.selectForUpdate(_forUpdate);

            select firstonly mcrContinuityCustHeader
                where mcrContinuityCustHeader.InventTransId == _inventTransId
                    && mcrContinuityCustHeader.ScheduleId   == _continuitySchedId;
        }

        return mcrContinuityCustHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>MCRContinuityCustHeader</c> table by using the specified record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>MCRContinuityCustHeader</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>MCRContinuityCustHeader</c> table; otherwise, an empty record.
    /// </returns>
    public static MCRContinuityCustHeader findRecId(
        RecId   _recId,
        boolean _forUpdate = false )
    {
        MCRContinuityCustHeader mcrContinuityCustHeader;

        if (_recId)
        {
            mcrContinuityCustHeader.selectForUpdate(_forUpdate);

            select firstonly mcrContinuityCustHeader
                where mcrContinuityCustHeader.RecId == _recId;
        }

        return mcrContinuityCustHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchContinuityForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open payment schedule form and then the continuity customer information form.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record for which to open continuity forms.
    /// </param>
    /// <remarks>
    /// Display the prompt for payment schedule and start date form if the bill up front
    /// and prompt for payment schedule are checked or if prompt for start date is checked.
    /// Do not display the prompt for payment schedule and start date form if neither the
    /// bill up front and prompt for start date are not checked.
    /// Whether the payment schedule is displayed or not, end by opening the continuity
    /// customer information form.
    /// </remarks>
    public static void launchContinuityForms(SalesLine _salesLine)
    {
        FormRun                     formRun;
        Args                        args = new Args();
        str                         formArgsParm;
		str							menuItemStr;
        Common                      common;
        InventTransId               inventTransId;
        MCRContinuityScheduleHeader mcrContinuityScheduleHeader;
        MCRContinuityCustHeader     mcrContinuityCustHeader;

        mcrContinuityScheduleHeader = MCRContinuityScheduleHeader::find(_salesLine.mcrSalesLine().ContinuityScheduleId,false);
        mcrContinuityCustHeader = MCRContinuityCustHeader::find(_salesLine.InventTransId, false);

        common = _salesLine;
        inventTransId = _salesLine.InventTransId;
        if (!mcrContinuityCustHeader
            && ((mcrContinuityScheduleHeader.BillUpfront
                 && mcrContinuityScheduleHeader.PromptForPaymSched)
                || mcrContinuityScheduleHeader.PromptForStartDate))
        {
            menuItemStr = menuItemDisplayStr(MCRPromptPaymSchedStartDate);
        }
        else
        {
            if (!mcrContinuityCustHeader)
            {
                mcrContinuityCustHeader.createDfltContCustHeader(_salesLine, mcrContinuityScheduleHeader);
                formArgsParm = 'Add';
            }

            menuItemStr = menuItemDisplayStr(MCRContinuityCustInfo);
        }

        args.parm(formArgsParm);
        args.record(common);
        formRun = new MenuFunction(menuItemStr, MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();

        if (menuItemStr == menuItemDisplayStr(MCRPromptPaymSchedStartDate))
        {
            MCRContinuityCustHeader::callContinuityCustHeaderForm(inventTransId,'Add');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markEndRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects a continuity line to update if no continuity customer lines have a
    /// continuity action code of end.  The selected line's continuity action code
    /// is updated to end.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID used to find matching continuity customer lines.
    /// </param>
    /// <remarks>
    /// The record to change to have a continuity action code of end is chosen
    /// in the following manner:
    /// <list type="number">
    ///     <item>
    ///         <description>
    ///             The record with the highest event ID
    ///          </description>
    ///     </item>
    ///     <item>
    ///         <description>
    ///             If there are multiple records with the highest event ID, then
    ///             the one with the highest record ID will be picked.
    ///          </description>
    ///     </item>
    ///     <item>
    ///         <description>
    ///             If the record that is picked has an action code of skip, it will
    ///             not be changed.
    ///          </description>
    ///     </item>
    /// </list>
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if unable to update the continuity line.
    /// </exception>
    public static void markEndRecord(InventTransId _inventTransId)
    {
        MCRContinuityCustLine mcrContinuityCustLine;

        select firstonly RecId from mcrContinuityCustLine
            where mcrContinuityCustLine.InventTransId == _inventTransId
                && mcrContinuityCustLine.ActionCode   == MCRContinuityActionCode::End;

        if (!mcrContinuityCustLine)
        {
            ttsbegin;

            select firstonly forupdate mcrContinuityCustLine
                order by EventId desc, RecId desc
                where mcrContinuityCustLine.InventTransId == _inventTransId;

            if (mcrContinuityCustLine
                && mcrContinuityCustLine.ActionCode != MCRContinuityActionCode::Skip)
            {
                mcrContinuityCustLine.ActionCode = MCRContinuityActionCode::End;

                if (mcrContinuityCustLine.validateWrite())
                {
                    mcrContinuityCustLine.update();
                }
                else
                {
                    throw error("@SYS18447");
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcPaymentSchedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the payment schedule for a continuity customer header.
    /// </summary>
    /// <param name="_mcrContinuityCustHeader">
    /// The <c>MCRContinuityCustHeader</c> record used to find the payment schedule
    /// to update.
    /// </param>
    /// <remarks>
    /// When payment schedules are recalculated, the lines are first deleted and then
    /// rewritten, so allow create of the payment schedule by calling the <c>createPaymSched</c>
    /// for a <c>MCRContinuityCustHeader</c> record.
    /// </remarks>
    public static void recalcPaymentSchedLines(MCRContinuityCustHeader _mcrContinuityCustHeader)
    {
        CustVendPaymSched custVendPaymSched;

        // Verify that a payment schedule exists before creating the CutsPaymSchedLines.
        if (_mcrContinuityCustHeader.PaymentScheduleId
            && CustPaymSched::exist(_mcrContinuityCustHeader.TableId, _mcrContinuityCustHeader.RecId))
        {
             custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust, _mcrContinuityCustHeader);
             custVendPaymSched.createPaymSched(PaymSched::find(_mcrContinuityCustHeader.PaymentScheduleId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRContinuity</ConfigurationKey>
	<DeveloperDocumentation>@MCR35547</DeveloperDocumentation>
	<Label>@MCR12463</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ScheduleId</TitleField1>
	<TitleField2>SalesId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustPaymSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MCRContinuityCustLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRContinuityCustLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MCRCustPaymTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MCRCustPaymTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentScheduleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillUpFront</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScheduleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Complete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentRecID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContinuityOrder</Name>
			<Label>@MCR12463</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentScheduleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillUpFront</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScheduleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Complete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentRecID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BillUpFront</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRBillUpFront</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Complete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS50370</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRContinuityInventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaymentRecID</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>MCRContinuityPaymentRecId</ExtendedDataType>
			<Label>@MCR12815</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentScheduleId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>MCRContinuitySalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ScheduleId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRContinuityScheduleID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS6255</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransSchedId</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ScheduleId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRContinuityScheduleHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>MCRContinuityScheduleHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ScheduleId</Name>
					<SourceEDT>MCRContinuityScheduleID</SourceEDT>
					<Field>ScheduleId</Field>
					<RelatedField>ScheduleID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>MCRContinuityScheduleId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRCustPayment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRCustPaymTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MCRCustPayment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRCustPaymTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>RefTableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RefRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRPaymentRecID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MCRCustPaymTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentRecID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRCustPaymTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentRecID</Name>
					<Field>PaymentRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentScheduleId</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentScheduleId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>MCRContinuitySalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>