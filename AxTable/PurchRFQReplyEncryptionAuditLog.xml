<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQReplyEncryptionAuditLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQReplyEncryptionAuditLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log activity into the <c>PurchRFQReplyEncryptionAuditLog</c> table.
    /// </summary>
    /// <param name="_purchRFQId">The <c>PurchRFQId</c> of the RFQ reply.</param>
    /// <param name="_activity">The <c>PurchRFQReplyActivity</c>.</param>
    /// <param name="_encryption">The <c>PurchRFQReplyEncryptionActivity</c>.</param>
    [Hookable(false), Wrappable(false)]
    internal final static void logActivity(PurchRFQId _purchRFQId, PurchRFQReplyActivity _activity, PurchRFQReplyEncryptionActivity _encryption)
    {
        PurchRFQReplyTableRecId replyTableRecId = PurchRFQReplyTable::find(_purchRFQId).RecId;
        KeyVaultParameters vaultParameters;
        KeyVaultCertificateTable vaultCertificateTable;

        if (!replyTableRecId)
        {
            throw error(Error::missingRecord(tableStr(PurchRFQReplyTable)));
        }

        container con = PurchRFQSealedBidEncryptionManager::encryptionKeyCache.retrieveSealedBidEncryptionKey(replyTableRecId);
        
        if (con == conNull())
        {
            vaultCertificateTable = PurchRFQSealedBidKeyVaultCertificateTableHandler::findCertificateTableEntryForSealedRFQReply(replyTableRecId);
            if (vaultCertificateTable.RecId)
            {
                vaultParameters = KeyVaultParameters::findRecId(vaultCertificateTable.KeyVaultRef);
                PurchRFQSealedBidEncryptionKeyCache::construct().setSealedBidEncryptionKey(replyTableRecId, [vaultParameters, vaultCertificateTable]);
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            vaultParameters = conPeek(con, 1) as KeyVaultParameters;
            vaultCertificateTable = conPeek(con, 2) as KeyVaultCertificateTable;
        }

        PurchRFQReplyEncryptionAuditLog replyEncryptionAuditLog;
        
        ttsbegin;
        replyEncryptionAuditLog.initFromCurrentUser();
        replyEncryptionAuditLog.initFromKeyVaultParameters(vaultParameters);
        replyEncryptionAuditLog.initFromKeyVaultCertificateTable(vaultCertificateTable);
       
        replyEncryptionAuditLog.RFQId = _purchRFQId;
        replyEncryptionAuditLog.PurchRFQReplyTable = replyTableRecId;
        replyEncryptionAuditLog.Action = _activity;
        replyEncryptionAuditLog.EncryptionActivity = _encryption;
                
        replyEncryptionAuditLog.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>personName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display person name based on the <c>UserInfo</c> table record.
    /// </summary>
    [SysClientCacheDataMethodAttribute(true), Hookable(false), Wrappable(false)]
    internal final display DirPartyName personName()
    {
        DirPartyName personName;

        PartyIProvider partyProvider = PartyProviderFactory::getPartyProvider();
            
        if (partyProvider)
        {
            personName = partyProvider.dirPersonUserId2Name(this.UserId);
        }

        return personName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCurrentUser</Name>
				<Source><![CDATA[
    private final void initFromCurrentUser()
    {
        UserInfo userInfo = xUserInfo::find();

        this.UserId = userInfo.id;
        this.UserObjectId = userInfo.ObjectId;
        this.UserNetworkAlias = userInfo.networkAlias;
        this.UserNetworkDomain = userInfo.networkDomain;
        this.UserIdentityProvider = userInfo.IdentityProvider;

        unchecked(Uncheck::TableSecurityPermission)
        {
            this.UserSid = userInfo.sid;
            this.ActionCaller = PurchRFQReplyEncryptionAuditLog::formatCallStack(xSession::xppCallStack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKeyVaultCertificateTable</Name>
				<Source><![CDATA[
    private final void initFromKeyVaultCertificateTable(KeyVaultCertificateTable _keyVaultCertificateTable)
    {
        unchecked(Uncheck::TableSecurityPermission)
        {
            this.EncryptionKeyName = _keyVaultCertificateTable.Name;
            this.EncryptionKeyIdentifier = _keyVaultCertificateTable.KeyVaultCertificate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKeyVaultParameters</Name>
				<Source><![CDATA[
    private final void initFromKeyVaultParameters(KeyVaultParameters _keyVaultParameters)
    {
        unchecked(Uncheck::TableSecurityPermission)
        {
            this.EncryptionKeyVaultUrl = _keyVaultParameters.Url;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatCallStack</Name>
				<Source><![CDATA[
    private final static str formatCallStack(container _callStack)
    {
        int len = conLen(_callStack);
        str retStr = '';
        for(int idx = 1; idx < len; idx++)
        {
            str method = any2str(conPeek(_callStack, idx));
            idx++;
            str lineIdx = any2str(conPeek(_callStack, idx));
            retStr += strfmt('%1(%2); \r\n', method, lineIdx);
        }

        return retStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDelete</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void doDelete()
    {
        throw error(Error::wrongUseOfFunction(tableStr(PurchRFQReplyEncryptionAuditLog)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doInsert</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void doInsert()
    {
        throw error(Error::wrongUseOfFunction(tableStr(PurchRFQReplyEncryptionAuditLog)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdate</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void doUpdate()
    {
        throw error(Error::wrongUseOfFunction(tableStr(PurchRFQReplyEncryptionAuditLog)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void update()
    {
        throw error(Error::wrongUseOfFunction(tableStr(PurchRFQReplyEncryptionAuditLog)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void delete()
    {
        throw error(Error::wrongUseOfFunction(tableStr(PurchRFQReplyEncryptionAuditLog)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void insert()
    {
        super();

        PurchRFQSealedBidIFXAuditHandler::logEncryptionAuditLogToIFXAudit(this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendorPortal</ConfigurationKey>
	<DeveloperDocumentation>@SCM:RFQReplyEncryptionAuditLogDeveloperDocumentation</DeveloperDocumentation>
	<Label>@SCM:RFQReplyEncryptionAuditLog</Label>
	<SubscriberAccessLevel>
		<Correct>Deny</Correct>
		<Create>Deny</Create>
		<Delete>Deny</Delete>
		<Invoke>Deny</Invoke>
		<Read>Deny</Read>
		<Update>Deny</Update>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Action</TitleField1>
	<TitleField2>CreatedDateTime</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>PurchRFQReplyTableIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Action</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Action</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RFQId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Action</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>User</Name>
			<Label>@SYS25815</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserSid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserNetworkAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserNetworkDomain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserIdentityProvider</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchRFQReplyTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchRFQReplyTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFQId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Action</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PurchRFQReplyActivity</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActionCaller</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchRFQReplyEncryptionCallStack</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EncryptionActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>PurchRFQReplyEncryptionActivity</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>EUII</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserSid</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>EUPI</AssetClassification>
			<ExtendedDataType>Sid</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>UserObjectId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>EUPI</AssetClassification>
			<ExtendedDataType>PurchRFQUserGuid</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserNetworkAlias</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>EUII </AssetClassification>
			<ExtendedDataType>NetworkAlias</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserNetworkDomain</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>NetworkDomain</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserIdentityProvider</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>NetworkDomain</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EncryptionKeyName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EncryptionKeyVaultUrl</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>KeyVaultDefaultUrl</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EncryptionKeyIdentifier</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeyVaultCertificate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchRFQReplyTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RFQId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchRFQReplyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchRFQReplyTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RFQId</Name>
					<Field>RFQId</Field>
					<RelatedField>RFQId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<Field>UserId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>