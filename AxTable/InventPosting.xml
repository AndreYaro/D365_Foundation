<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
#isoCountryRegionCodes
public class InventPosting extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountItemLedgerDimensionFromParametersDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate raised before extracting an account item ledger dimension from the cache.
    /// </summary>
    /// <param name = "_parameters">The cache parameters.</param>
    /// <param name = "_getFromCacheResult">An event handler result.</param>
    /// <remarks>Override cache parameters through setting the result of the <paramref name="_getFromCacheResult"/>.</remarks>
    static delegate void getAccountItemLedgerDimensionFromParametersDelegate(AccountItemLedgerDimensionCacheParameters _parameters, EventHandlerResult _getFromCacheResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAccountItemLedgerDimensionFromParametersDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate raised before inserting an account item ledger dimension into the cache.
    /// </summary>
    /// <param name = "_parameters">The cache parameters.</param>
    /// <param name = "_getFromCacheResult">An event handler result.</param>
    /// <remarks>Override cache parameters through setting the result of the <paramref name="_getFromCacheResult"/>.</remarks>
    static delegate void insertAccountItemLedgerDimensionFromParametersDelegate(AccountItemLedgerDimensionCacheParameters _parameters, EventHandlerResult _getFromCacheResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        InventPostingSetupCache::clearCache();
        LedgerCache::clearScope(LedgerCacheScope::ProdFlowMainAccDimensionListProv);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccountTypeAndItemCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an inventory posting based on the account type and item code.
    /// </summary>
    /// <param name = "_accountType">An account type for which to find the posting.</param>
    /// <param name = "_itemCode">An item code for which to find the posting.</param>
    /// <param name = "_selectForUpdate">true if found record should be selected for update, otherwise false. Optional.</param>
    /// <returns>An <c>InventPosting</c> table buffer if found, otherwise an empty buffer.</returns>
    public static InventPosting findByAccountTypeAndItemCode(InventAccountType      _accountType, 
                                                             InventPostingItemCode  _itemCode, 
                                                             boolean                _selectForUpdate = false)
    {
        InventPosting inventPosting;

        inventPosting.selectForUpdate(_selectForUpdate);

        select firstonly inventPosting
            where inventPosting.InventAccountType == _accountType
               && inventPosting.ItemCode == _itemCode;

        return inventPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        // <GCN>
        #ISOCountryRegionCodes
        // </GCN>
        super();

        this.ItemCode       = InventPostingItemCode::All;
        this.CustVendCode   = TableGroupAll::All;
        this.CostCode       = TableGroupAll::All;

        // <GCN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]))
        {
            this.SiteCode_CN    = InventSiteCode_CN::All;
        }
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setInventProfileType_RU();
        }
        // </GEERU>

        this.SHA256Hash = this.hashKey();
        super();
        InventPostingSetupCache::clearCache();
        LedgerCache::clearScope(LedgerCacheScope::ProdFlowMainAccDimensionListProv);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryRelationFieldRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the <c>CategoryRelation</c> field must contain a reference to a category.
    /// </summary>
    /// <returns>
    ///    true if the <c>CategoryRelation</c> field must contain a reference to a category; otherwise, false.
    /// </returns>
    public boolean isCategoryRelationFieldRequired()
    {
        return this.ItemCode == InventPostingItemCode::Category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventProfileIdFieldRequired_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the InventProfileId_RU field must contain a reference to a InventPostingProfile.
    /// </summary>
    /// <returns>
    /// true if the InventProfileId_RU field must contain a reference to a InventPostingProfile; otherwise, false.
    /// </returns>
    public boolean isInventProfileIdFieldRequired_RU()
    {
        return this.InventProfileTypeAll_RU == InventProfileTypeAll_RU::Profile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventProfileTypeFieldRequired_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the InventProfileType_RU field must contain a value.
    /// </summary>
    /// <returns>
    /// true if the InventProfileType_RU field must contain a value; otherwise, false.
    /// </returns>
    public boolean isInventProfileTypeFieldRequired_RU()
    {
        return this.InventProfileTypeAll_RU == InventProfileTypeAll_RU::Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemRelationFieldRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the <c>ItemRelation</c> field must contain an item or group
    /// </summary>
    /// <returns>
    ///    true if the <c>ItemRelation</c> field must contain an item or group; otherwise, false.
    /// </returns>
    public boolean isItemRelationFieldRequired()
    {
        return this.ItemCode == InventPostingItemCode::GroupId || this.ItemCode == InventPostingItemCode::Table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesCodeFieldRequired_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>SalesCode_CN</c> field is enabled.
    /// </summary>
    /// <returns>
    /// True if <c>Salescode_CN</c> is enabled.
    /// </returns>
    /// <remarks>
    /// The method is called in method setSiteCodeAndRelationsEnabled_CN of form InventPosting.
    /// </remarks>
    public boolean isSalesCodeFieldRequired_CN()
    {
        return !InventPosting::mayOnlySiteCodeAllBeSet_CN(this.InventAccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesRelationFieldRequired_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>SalesRelation_CN</c> field is enabled.
    /// </summary>
    /// <returns>
    /// True if <c>Salescode_CN</c> is enabled.
    /// </returns>
    /// <remarks>
    /// The method is called in method setSiteCodeAndRelationsEnabled_CN of form InventPosting.
    /// </remarks>
    public boolean isSalesRelationFieldRequired_CN()
    {
        return !InventPosting::mayOnlySiteCodeAllBeSet_CN(this.InventAccountType)
            && this.SiteCode_CN != InventSiteCode_CN::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAccountName</Name>
				<Source><![CDATA[
    display MainAccountNum ledgerAccountName()
    {
        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayOnlyAccountCodeAllBeSet</Name>
				<Source><![CDATA[
    public boolean mayOnlyAccountCodeAllBeSet()
    {
        boolean ret = true;
        switch (this.InventAccountType)
        {
            case InventAccountType::SalesPackingSlip,
                 InventAccountType::SalesPackingSlipOffsetAccount,
                 InventAccountType::SalesIssue,
                 InventAccountType::SalesConsump,
                 InventAccountType::SalesRevenue,
                 InventAccountType::SalesDisc,
                 InventAccountType::SalesCommission,
                 InventAccountType::SalesCommissionOffsetAccount,
                 InventAccountType::SalesPckSlipRevenue,
                 InventAccountType::SalesPckSlipRevenueOffsetAccount,
                 InventAccountType::PurchPackingSlip,
                 InventAccountType::PurchPackingSlipOffsetAccount,
                 InventAccountType::PurchReceipt,
                 InventAccountType::PurchConsump,
                 InventAccountType::PurchDisc,
                 InventAccountType::PurchStdProfit,
                 InventAccountType::PurchStdLoss,
                 InventAccountType::PurchStdOffsetAccount,
                 InventAccountType::PurchStdCostPurchasePriceVariance,
                 InventAccountType::PurchExpense:
                ret = false;
                break;
            case InventAccountType::SalesCreditNote_IT:
                if (EXILFeatures_IT::isFeatureEnabled(EXILFeature::Exil2131))
                {
                    ret = false;
                }
                break;
            default:
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrMainAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and displays main account name using the ledger dimension.
    /// </summary>
    /// <returns>
    /// The <c>AccountName</c> if found.
    /// </returns>
    public display AccountName mcrMainAccountName()
    {
        return MainAccount::findByLedgerDimension(this.LedgerDimension).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventPosting, ItemCode):
                switch (this.ItemCode)
                {
                    case InventPostingItemCode::Table:
                        if (this.ItemRelation && !InventTable::exist(this.ItemRelation))
                        {
                            this.ItemRelation = '';
                        }
                        if (this.CategoryRelation)
                        {
                            this.CategoryRelation = 0;
                        }
                        break;
                    case InventPostingItemCode::GroupId:
                        if (this.ItemRelation && !InventItemGroup::exist(this.ItemRelation))
                        {
                            this.ItemRelation = '';
                        }
                        if (this.CategoryRelation)
                        {
                            this.CategoryRelation = 0;
                        }
                        break;
                    case InventPostingItemCode::All:
                        if (this.ItemRelation)
                        {
                            this.ItemRelation = '';
                        }
                        if (this.CategoryRelation)
                        {
                            this.CategoryRelation = 0;
                        }
                        break;
                    case InventPostingItemCode::Category:
                        if (this.ItemRelation)
                        {
                            this.ItemRelation = '';
                        }
                        if (this.CategoryRelation && !EcoResCategory::exist(this.CategoryRelation))
                        {
                            this.CategoryRelation = 0;
                        }
                }
                break;
            case fieldNum(InventPosting,CustVendCode):
                this.modifiedFieldCustVendCode(this);
                break;
            case fieldNum(InventPosting,CostCode):
                switch (this.CostCode)
                {
                    case TableGroupAll::Table:
                        if (this.CostRelation && !InventTable::exist(this.CostRelation))
                        {
                            this.CostRelation = '';
                        }
                        break;
                    case TableGroupAll::GroupId:
                        if (this.CostRelation && !InventItemGroup::exist(this.CostRelation))
                        {
                            this.CostRelation = '';
                        }
                        break;
                    case TableGroupAll::All:
                        if (this.CostRelation)
                        {
                            this.CostRelation = '';
                        }
                        break;
                }
                break;
            // <GEERU>
            case fieldNum(InventPosting, InventProfileTypeAll_RU):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    switch (this.InventProfileTypeAll_RU)
                    {
                        case InventProfileTypeAll_RU::Profile:
                            this.InventProfileType_RU = InventProfileType_RU::NotSpecified;
                            break;
                        case InventProfileTypeAll_RU::Type:
                            this.InventProfileId_RU = '';
                            break;
                        case InventProfileTypeAll_RU::All:
                            this.InventProfileType_RU = InventProfileType_RU::NotSpecified;
                            this.InventProfileId_RU = '';
                            break;
                    }
                }
                break;
            // </GEERU>
            // <GCN>
            case fieldNum(InventPosting, SiteCode_CN):
                switch (this.SiteCode_CN)
                {
                    case InventSiteCode_CN::Table:
                        if (InventPostingExtendParm_CN::checkExtendParmEnabled()
                            && this.SiteRelation_CN
                            && !InventSite::exist(this.SiteRelation_CN))
                        {
                            this.SiteRelation_CN = '';
                        }
                        break;
                    case InventSiteCode_CN::All:
                        if (InventPostingExtendParm_CN::checkExtendParmEnabled()
                            && this.SiteRelation_CN)
                        {
                            this.SiteRelation_CN = '';
                        }
                        break;
                }
                break;
            // </GCN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldCustVendCode</Name>
				<Source><![CDATA[
    [Hookable]
    private void modifiedFieldCustVendCode(InventPosting _inventPosting)
    {
        switch (InventPosting::accountType2Module(_inventPosting.InventAccountType))
        {
            case ModuleInventCustVend::Cust:
                switch (this.CustVendCode)
                {
                    case TableGroupAll::Table:
                        if (_inventPosting.CustVendRelation && !CustTable::exist(_inventPosting.CustVendRelation))
                        {
                            _inventPosting.CustVendRelation = '';
                        }
                        break;
                    case TableGroupAll::GroupId:
                        if (_inventPosting.CustVendRelation && !CustGroup::exist(_inventPosting.CustVendRelation))
                        {
                            _inventPosting.CustVendRelation = '';
                        }
                        break;
                    case TableGroupAll::All:
                        if (_inventPosting.CustVendRelation)
                        {
                            _inventPosting.CustVendRelation = '';
                        }
                        break;
                }
                break;
            case ModuleInventCustVend::Vend:
                switch (_inventPosting.CustVendCode)
                {
                    case TableGroupAll::Table:
                        if (_inventPosting.CustVendRelation && !VendTable::exist(_inventPosting.CustVendRelation))
                        {
                            _inventPosting.CustVendRelation = '';
                        }
                        break;
                    case TableGroupAll::GroupId:
                        if (_inventPosting.CustVendRelation && !VendGroup::exist(_inventPosting.CustVendRelation))
                        {
                            _inventPosting.CustVendRelation = '';
                        }
                        break;
                    case TableGroupAll::All:
                        if (_inventPosting.CustVendRelation)
                        {
                            _inventPosting.CustVendRelation = '';
                        }
                        break;
                }
                break;
            case ModuleInventCustVend::Invent:
                if (_inventPosting.CustVendRelation)
                {
                    _inventPosting.CustVendRelation = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileType_RU</Name>
				<Source><![CDATA[
    public void setInventProfileType_RU()
    {
        if (this.InventProfileTypeAll_RU == InventProfileTypeAll_RU::Profile)
        {
            this.InventProfileType_RU = InventProfile_RU::find(this.InventProfileId_RU).InventProfileType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setInventProfileType_RU();
        }
        // </GEERU>

        this.SHA256Hash = this.hashKey();

        super();
        InventPostingSetupCache::clearCache();
        LedgerCache::clearScope(LedgerCacheScope::ProdFlowMainAccDimensionListProv);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicateKey</Name>
				<Source><![CDATA[
    private boolean validateDuplicateKey()
    {
        boolean         ret = true;
        InventPosting   inventPosting;

        select firstonly inventPosting
            where inventPosting.InventAccountType == this.InventAccountType
            && inventPosting.ItemCode == this.ItemCode
            && inventPosting.ItemRelation == this.ItemRelation
            && inventPosting.CategoryRelation == this.CategoryRelation
            && inventPosting.CustVendCode == this.CustVendCode
            && inventPosting.CustVendRelation == this.CustVendRelation
            && inventPosting.TaxGroupId == this.TaxGroupId
            && inventPosting.CostCode == this.CostCode
            && inventPosting.CostRelation == this.CostRelation
            && inventPosting.InventProfileTypeAll_RU == this.InventProfileTypeAll_RU
            && inventPosting.InventProfileType_RU == this.InventProfileType_RU
            && inventPosting.InventProfileId_RU == this.InventProfileId_RU
            && inventPosting.SiteCode_CN == this.SiteCode_CN
            && inventPosting.SiteRelation_CN == this.SiteRelation_CN
            && inventPosting.SHA256Hash == this.SHA256Hash
            && inventPosting.RecId != this.RecId;

        if (inventPosting.RecId)
        {
            ret = checkFailed("@SCM:InventPostingDuplicateKeyError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCostRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost relation.
    /// </summary>
    /// <returns>
    ///    true if the cost relation is valid; otherwise, false.
    /// </returns>
    private boolean validateCostRelation()
    {
        SysDictEnum     dictEnum;
        DictField       dictField;
        boolean         ret = true;

        switch (this.CostCode)
        {
            case TableGroupAll::All:
                if (this.CostRelation)
                {
                    ret = checkFailed("@SYS117635");
                }
                break;
            case TableGroupAll::GroupId:
                dictEnum = new SysDictEnum(enumNum(CostGroupType));
                if (!(this.CostRelation >= strFmt('%1', dictEnum.firstValue()) &&
                      this.CostRelation <= strFmt('%1', dictEnum.lastValue())) ||
                    !dictEnum.value2Symbol(str2int(this.CostRelation)))
                {
                    dictField = new DictField(tableNum(InventPosting), fieldNum(InventPosting, CostRelation));
                    ret = checkFailed(strFmt("@SYS112224", this.CostRelation, dictField.label(), dictEnum.label()));
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _id)
    {
        boolean                             ret;
        EcoResCategoryNamedHierarchyRole    ecoResCategoryNamedHierarchyRole;
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        ret = super(_id);

        switch (_id)
        {
            case fieldNum(InventPosting,LedgerDimension):
                ret = MainAccount::checkTransactionAccount(this.LedgerDimension) &&
                      MainAccount::checkPostingType(LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension).RecId, InventPosting::accountType2LedgerPostingType(this.InventAccountType)) &&
                      ret;
                break;
            case fieldNum(InventPosting,ItemRelation):
                // Check that only relevant relations are used
                if (this.ItemRelation && !this.isItemRelationFieldRequired())
                {
                    ret = checkFailed("@SYS51104");
                }
                break;
            case fieldNum(InventPosting,CategoryRelation):
                // Check that only relevant relations are used
                if (this.CategoryRelation)
                {
                    if (this.isCategoryRelationFieldRequired())
                    {
                        //
                        // Check that category module matches.
                        // For Purchase the category should be from the Procurement Category Hierarchy,
                        // for Sales it should come from the Sales Category Hierarchy.
                        //
                        ecoResCategoryNamedHierarchyRole = TradePartyModuleType::newFromPartyModule(InventPosting::accountType2Module(this.InventAccountType)).categoryHierarchyRole();

                        // Check that the hierarchy matches the module
                        ret = ret && EcoResCategory::checkCategoryRole(this.CategoryRelation, ecoResCategoryNamedHierarchyRole);
                    }
                    else
                    {
                        ret = checkFailed("@SYS129552");
                    }
                }
                break;
            case fieldNum(InventPosting,CustVendRelation):
                ret = this.validateCustVendRelation(InventPosting::accountType2Module(this.InventAccountType)) && ret;
                break;
            case fieldNum(InventPosting,CostCode):
                if (this.InventAccountType == InventAccountType::InventStdCostRoundingVariance &&
                    this.CostCode != TableGroupAll::All)
                {
                    ret = checkFailed("@SYS117645");
                }
                break;
            case fieldNum(InventPosting,CostRelation):
                ret = this.validateCostRelation() && ret;
                break;
            // <GEERU>
            case fieldNum(InventPosting, InventProfileType_RU):
            case fieldNum(InventPosting, InventProfileId_RU):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    ret = this.validateInventProfile_RU() && ret;
                }
                break;
            // </GEERU>
            // <GCN>
            case fieldNum(InventPosting, SiteCode_CN):
                if (InventPostingExtendParm_CN::checkExtendParmEnabled()
                    && InventPosting::mayOnlySiteCodeAllBeSet_CN(this.InventAccountType))
                {
                    if (this.SiteCode_CN != InventSiteCode_CN::All)
                    {
                        // Site code must be all for this account type.
                        ret = checkFailed("@GLS63305");
                    }
                }
                break;
            case fieldNum(InventPosting, SiteRelation_CN):
                if (InventPostingExtendParm_CN::checkExtendParmEnabled()
                    && this.SiteCode_CN != InventSiteCode_CN::Table
                    && this.SiteRelation_CN)
                {
                    // Site relation should not be specified.
                    ret = checkFailed("@GLS63306");
                }
                break;
            // </GCN>
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustVendRelation</Name>
				<Source><![CDATA[
    [Hookable]
    private boolean validateCustVendRelation(ModuleInventCustVend _module)
    {
        boolean ret = true;

        switch (_module)
        {
            case ModuleInventCustVend::Cust:
                switch (this.CustVendCode)
                {
                    case TableGroupAll::All:
                        if (this.CustVendRelation)
                        {
                            ret =  checkFailed("@SYS24200");
                        }
                        break;
                }
                break;
            case ModuleInventCustVend::Vend:
                switch (this.CustVendCode)
                {
                    case TableGroupAll::All:
                        if (this.CustVendRelation)
                        {
                            ret = checkFailed("@SYS24200");
                        }
                        break;
                }
                break;
            case ModuleInventCustVend::Invent:
                if (this.CustVendRelation)
                {
                    ret = checkFailed("@SYS24200");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventProfile_RU</Name>
				<Source><![CDATA[
    private boolean validateInventProfile_RU()
    {
        boolean ret = true;

        switch (this.InventProfileTypeAll_RU)
        {
            case InventProfileTypeAll_RU::Type:
                if (this.InventProfileId_RU)
                {
                    ret = checkFailed("@GLS113774");
                }
                break;

            case InventProfileTypeAll_RU::All:
                if (this.InventProfileType_RU)
                {
                    ret = checkFailed("@GLS113797");
                }

                if (this.InventProfileId_RU)
                {
                    ret = checkFailed("@GLS113774");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        // <GEERU><GCN>
        #ISOCountryRegionCodes
        // </GCN></GEERU>

        ret = super();

        if (this.TaxGroupId && !InventPosting::taxCodeRelationEnabled())
        {
            ret = checkFailed(strFmt("@SYS72286",InventPosting::taxCodeRelationFieldLabel()));
        }

        if (InventPosting::itemRelationEnabled(this.ItemCode))
        {
            if (this.isItemRelationFieldRequired() && !this.ItemRelation)
            {
                ret = checkFailed("@SYS56455");
            }
            if (this.isCategoryRelationFieldRequired() && !this.CategoryRelation)
            {
                ret = checkFailed("@SYS129519");
            }
        }
        else
        {
            ret = checkFailed(strFmt("@SYS72286",InventPosting::itemRelationFieldLabel(this.ItemCode)));
        }

        if (InventPosting::accountRelationEnabled(this.CustVendCode))
        {
            if (this.CustVendCode != TableGroupAll::All && ! this.CustVendRelation)
            {
                ret = checkFailed("@SYS56456");
            }
        }
        else
        {
            ret = checkFailed(strFmt("@SYS72286",InventPosting::accountRelationFieldLabel(this.CustVendCode)));
        }

        if (InventPosting::mustValidateCostRelation(this.InventAccountType))
        {
            if (InventPosting::costRelationEnabled(this.CostCode))
            {
                if (this.CostCode != TableGroupAll::All && ! this.CostRelation)
                {
                    ret = checkFailed("@SYS117636");
                }
            }
            else
            {
                ret = checkFailed(strFmt("@SYS72286",InventPosting::costRelationFieldLabel(this.CostCode)));
            }
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            if (InventPosting::inventProfileRelationEnabled_RU(this.InventProfileTypeAll_RU))
            {
                switch (this.InventProfileTypeAll_RU)
                {
                    case InventProfileTypeAll_RU::Profile:
                        if (! this.InventProfileId_RU)
                        {
                            ret = checkFailed("@GLS113741");
                        }
                        break;

                    case InventProfileTypeAll_RU::Type:
                        if (! this.InventProfileType_RU)
                        {
                            ret = checkFailed("@GLS113742");
                        }
                        break;

                    case InventProfileTypeAll_RU::All:
                        break;
                }
            }
            else
            {
                ret = checkFailed(strFmt("@SYS72286", InventPosting::inventProfileRelationFieldLabel_RU(this.InventProfileTypeAll_RU)));
            }
        }
        // </GEERU>
        // <GCN>
        if (InventPostingExtendParm_CN::checkExtendParmEnabled()
            && !InventPosting::mayOnlySiteCodeAllBeSet_CN(this.InventAccountType))
        {
            if (InventPosting::siteRelationEnabled_CN(this.SiteCode_CN))
            {
                if (this.SiteCode_CN != InventSiteCode_CN::All
                    && !this.SiteRelation_CN)
                {
                    // Site relation must be specified.
                    ret = checkFailed("@GLS63307");
                }
            }
            else
            {
                // The transaction combination %1 is not activated.
                ret = checkFailed(strFmt("@SYS72286", InventPosting::siteRelationFieldLabel_CN(this.SiteCode_CN)));
            }
        }
        // </GCN>

        ret = ret && this.validateDuplicateKey();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the group ID of either a vendor or a customer.
    /// </summary>
    /// <param name="_accountType">
    /// An enumeration value that contains account types.
    /// </param>
    /// <param name="_accountNum">
    /// A value that contains either the customer or the vendor account numbers.
    /// </param>
    /// <returns>
    /// The group ID for the customer or vendor.
    /// </returns>
    [Replaceable]
    static public CustVendGroupId accountGroup(
        InventAccountType   _accountType,
        CustVendAC          _accountNum)
    {
        if (EXILFeatures_IT::isFeatureEnabled(EXILFeature::Exil2131)
            || FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
        {
            switch (_accountType)
            {
                case InventAccountType::SalesCreditNote_IT,
                    InventAccountType::SalesForFree_IT:
                    return CustTable::groupId(_accountNum);
            }
        }

        ItemGroupLedgerDimensionGroup itemGroupLedgerDimensionGroup = InventItemGroupForm::getGroupForAccountType(_accountType);

        switch (itemGroupLedgerDimensionGroup)
        {
            case ItemGroupLedgerDimensionGroup::Purchase:
                return VendTable::groupId(_accountNum);

            case ItemGroupLedgerDimensionGroup::Sales:
                return CustTable::groupId(_accountNum);

            default:
                throw error(strFmt("@SYS12580", _accountType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemExtendParmFromParameter_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds ledger account using the information of account, item, and other extended parameters.
    /// </summary>
    /// <param name="_searchParameter">
    /// A ledger dimension search parameter.
    /// </param>
    /// <returns>
    /// The matched ledger account. If not matched, returns ''.
    /// </returns>
    public static LedgerDimensionDefaultAccount accountItemExtendParmFromParameter_CN(InventPostingAccountItemLedgerDimensionParameters _searchParameter)
    {
        return InventPosting::accountItemLedgerDimensionFromParameters(_searchParameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemExtendParmWithBackupFromParameter_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for a ledger account based on the specified parameter with the primary inventory account type and the
    /// backup account type. If no ledger account found with the primary account type, then searches with the backup account type.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <returns>A ledger account.</returns>
    public static LedgerDimensionDefaultAccount accountItemExtendParmWithBackupFromParameter_CN(
        InventPostingAccountItemWithBackupLedgerDimensionParameters _searchParameter)
    {
        return InventPosting::accountItemSiteWithBackup_CN(_searchParameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemExtParmWithBackupLedgerDimFromParameter_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses the information of account, item, and site to find the
    /// matched ledger dimension with specified inventory account type and
    /// backup account type. If no ledger dimension match with
    /// InventAccountType, then search with the backup account type.
    /// </summary>
    /// <param name="_searchParameterWithBackup">
    /// A ledger dimension search parameter with a backup inventory account type.
    /// </param>
    /// <returns>
    /// A ledger dimension for a particular inventory account type.
    /// </returns>
    public static LedgerDimensionDefaultAccount accountItemExtParmWithBackupLedgerDimFromParameter_CN(InventPostingAccountItemWithBackupLedgerDimensionParameters _searchParameterWithBackup)
    {
        InventPostingAccountItemLedgerDimensionParameters searchParameter = InventPostingAccountItemLedgerDimensionParameters::newFromParameterWithBackup(_searchParameterWithBackup);

        LedgerDimensionDefaultAccount ledgerDimension = InventPosting::accountItemLedgerDimensionFromParameters(searchParameter);

        if (!ledgerDimension)
        {
            searchParameter.AccountType = _searchParameterWithBackup.backupAccountType;

            ledgerDimension = InventPosting::accountItemLedgerDimensionFromParameters(searchParameter);
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendItemAccount</Name>
				<Source><![CDATA[
    private static ItemAccount vendItemAccount(InventAccountType _accountType)
    {
        if (_accountType == InventAccountType::PurchDisc)
        {
            if (VendParameters::find().AccountDisc)
            {
                return ItemAccount::Account;
            }
            return ItemAccount::Item;
        }
        if (VendParameters::find().AccountReceipt)
        {
            return ItemAccount::Account;
        }
        return ItemAccount::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custItemAccount</Name>
				<Source><![CDATA[
    private static ItemAccount custItemAccount(InventAccountType _accountType)
    {
        ItemAccount itemAccount;
        switch (_accountType)
        {
            case InventAccountType::SalesPackingSlip,
                InventAccountType::SalesPackingSlipOffsetAccount,
                InventAccountType::SalesIssue,
                InventAccountType::SalesConsump,
                InventAccountType::SalesCommission,
                InventAccountType::SalesCommissionOffsetAccount,
                // <GEEU>
                InventAccountType::SalesGoodsInRoute_RU,
                InventAccountType::SalesGoodsInRouteOffsetAccount_RU,
                // </GEEU>
                InventAccountType::SalesPackingSlipTax:
                if (CustParameters::find().AccountConsumption)
                {
                    itemAccount = ItemAccount::Account;
                }
                else
                {
                    itemAccount = ItemAccount::Item;
                }
                break;
            case InventAccountType::SalesRevenue,
                InventAccountType::SalesPckSlipRevenue,
                InventAccountType::SalesPckSlipRevenueOffsetAccount,
                InventAccountType::SalesCancel,
                InventAccountType::SalesReturn:
                if (CustParameters::find().AccountRevenue)
                {
                    itemAccount = ItemAccount::Account;
                }
                else
                {
                    itemAccount = ItemAccount::Item;
                }
                break;
            case InventAccountType::SalesDisc:
                if (CustParameters::find().AccountDisc)
                {
                    itemAccount = ItemAccount::Account;
                }
                else
                {
                    itemAccount = ItemAccount::Item;
                }
                break;
        }
        return itemAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemAccount</c> based on the passed <c>InventAccountType</c>.
    /// </summary>
    /// <param name = "_accountType">
    /// An enumeration value that contains account types.
    /// </param>
    /// <returns>
    /// The <c>ItemAccount</c>.
    /// </returns>
    [Replaceable]
    protected static ItemAccount itemAccount(InventAccountType _accountType)
    {
        if (EXILFeatures_IT::isFeatureEnabled(EXILFeature::Exil2131)
            || FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
        {
            switch (_accountType)
            {
                case InventAccountType::SalesCreditNote_IT,
                    InventAccountType::SalesForFree_IT:
                    if (CustParameters::find().AccountRevenue)
                    {
                        return ItemAccount::Account;
                    }
                    else
                    {
                        return ItemAccount::Item;
                    }
            }
        }

        ItemGroupLedgerDimensionGroup itemGroupLedgerDimensionGroup = InventItemGroupForm::getGroupForAccountType(_accountType);

        switch (itemGroupLedgerDimensionGroup)
        {
            case ItemGroupLedgerDimensionGroup::Purchase:
                return InventPosting::vendItemAccount(_accountType);

            case ItemGroupLedgerDimensionGroup::Sales:
                return InventPosting::custItemAccount(_accountType);

            default:
                throw error(strFmt("@SYS12580", _accountType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the specified posting ledger dimension.
    /// </summary>
    /// <param name="_accountType">
    ///    The account type.
    /// </param>
    /// <param name="_itemId">
    ///    The item number.
    /// </param>
    /// <param name="_itemGroup">
    ///    The account group.
    /// </param>
    /// <param name="_itemCategory">
    ///    The product category.
    /// </param>
    /// <param name="_accountNum">
    ///    The customer or vendor account numbers.
    /// </param>
    /// <param name="_accountGroup">
    ///    The customer or vendor group to which the transaction is attached.
    /// </param>
    /// <param name="_taxGroup">
    ///    The tax group for the inventory item.
    /// </param>
    /// <param name="_inventDim_RU">
    /// The inventory dimension.
    /// </param>
    /// <param name="_siteRelation">
    ///    The site ID.
    /// </param>
    /// <returns>
    ///    The posting ledger dimension for the account item; otherwise, zero.
    /// </returns>
    [SysObsolete('Use accountItemLedgerDimensionFromParameters method instead.', true, 30\06\2018)]
    public static LedgerDimensionDefaultAccount accountItemLedgerDimension(
        InventAccountType       _accountType,
        ItemId                  _itemId,
        ItemGroupId             _itemGroup,
        InventCategoryRelation  _itemCategory,
        CustVendAC              _accountNum,
        CustVendGroupId         _accountGroup,
        TaxGroup                _taxGroup,
        InventDim               _inventDim_RU = null,
        InventSiteRelation_CN   _siteRelation = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemLedgerDimensionFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specified posting ledger dimension.
    /// </summary>
    /// <param name = "_searchParameters">An <c>InventPostingAccountItemLedgerDimensionParameters</c> instance which contains the parameters used to retrieve the posting ledger dimension.</param>
    /// <returns>The posting ledger dimension for the account item; otherwise, zero.</returns>
    public static LedgerDimensionDefaultAccount accountItemLedgerDimensionFromParameters(InventPostingAccountItemLedgerDimensionParameters _searchParameters)
    {
        InventPostingAccountItemLedgerDimensionParameters searchParameters = _searchParameters.clone();
        
        LedgerDimensionDefaultAccount ledgerDimension = InventPosting::accountItemLedgerDimensionFromCache(searchParameters);

        // return the ledger dimension if it's found in the cache
        if (ledgerDimension)
        {
            return ledgerDimension;
        }

        // Not found in cache, so calculate and cache it
        searchParameters.populateItemGroup();
        searchParameters.populateAccountGroup();

        List criteriaList = InventPosting::buildAccountItemLedgerDimensionCriteriaList(searchParameters);

        InventPostingSearchEngine inventPostingSearchEngine = new InventPostingSearchEngine(criteriaList);

        ledgerDimension = inventPostingSearchEngine.executeSearch();

        InventPosting::insertAccountItemLedgerDimensionIntoCache(searchParameters, ledgerDimension);

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemLedgerDimensionFromCache</Name>
				<Source><![CDATA[
    private static LedgerDimensionDefaultAccount accountItemLedgerDimensionFromCache(InventPostingAccountItemLedgerDimensionParameters _searchParameters)
    {
        #ISOCountryRegionCodes
        boolean isRUFeatureEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        InventSiteRelation_CN siteRelation_CN = _searchParameters.SiteRelation;
        InventProfileId_RU inventProfile;
       
        if (isRUFeatureEnabled)
        {
            siteRelation_CN         = '';
            inventProfile           = _searchParameters.InventDim_RU.InventProfileId_RU;
        }
        
        var cacheParameters = AccountItemLedgerDimensionCacheParameters::newFromAccountItemLedgerDimensionParameter(_searchParameters);
        cacheParameters.SiteRelation = siteRelation_CN;
        cacheParameters.InventProfileId = inventProfile;

        container cacheResult = InventPosting::getDimensionFromCache(cacheParameters);

        // If found in cache just return it
        if (conLen(cacheResult) >= 1)
        {
            return conPeek(cacheResult, 1);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAccountItemLedgerDimensionIntoCache</Name>
				<Source><![CDATA[
    private static void insertAccountItemLedgerDimensionIntoCache(
        InventPostingAccountItemLedgerDimensionParameters   _searchParameters,
        LedgerDimensionDefaultAccount                       _ledgerDimension)
    {
        var insertCacheParameters = AccountItemLedgerDimensionCacheParameters::newFromAccountItemLedgerDimensionParameter(_searchParameters);
        insertCacheParameters.SiteRelation = _searchParameters.SiteRelation;
        
        if (_ledgerDimension)
        {
            insertCacheParameters.LedgerDimension = _ledgerDimension;
        }

        InventPosting::insertDimensionIntoCache(insertCacheParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionCriteriaList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the ordered list of criteria to use for searching the inventory posting for an account number.
    /// </summary>
    /// <param name = "_searchParameter">Search parameters to use for building the criteria.</param>
    /// <returns>The ordered list of criteria.</returns>
    protected static List buildAccountItemLedgerDimensionCriteriaList(InventPostingAccountItemLedgerDimensionParameters _searchParameter)
    {
        List criteriaList = new List(Types::Class);

        AccountItemInventPostingTaxSearchCriteria taxCriteria = AccountItemInventPostingTaxSearchCriteria::construct(_searchParameter);
        criteriaList.addEnd(taxCriteria);

        AccountItemInventPostingAccountSearchCriteria accountCriteria = AccountItemInventPostingAccountSearchCriteria::construct(_searchParameter);

        AccountItemInventPostingItemSearchCriteria itemCriteria = AccountItemInventPostingItemSearchCriteria::construct(_searchParameter);

        ItemAccount itemAccount = InventPosting::itemAccount(_searchParameter.AccountType);
        switch (itemAccount)
        {
            case ItemAccount::Account:
                criteriaList.addEnd(accountCriteria);
                criteriaList.addEnd(itemCriteria);
                break;
        
            case ItemAccount::Item:
                criteriaList.addEnd(itemCriteria);
                criteriaList.addEnd(accountCriteria);
                break;
        }

        return criteriaList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemLedgerDimensionExtendParmFromParameter_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a ledger dimension that matches the passed search parameter.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <returns>The found ledger dimension.</returns>
    public static LedgerDimensionDefaultAccount accountItemLedgerDimensionExtendParmFromParameter_CN(InventPostingAccountItemLedgerDimensionParameters _searchParameter)
    {
        return InventPosting::accountItemLedgerDimensionFromParameters(_searchParameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemSiteWithBackup_CN</Name>
				<Source><![CDATA[
    private static LedgerDimensionDefaultAccount accountItemSiteWithBackup_CN(
        InventPostingAccountItemWithBackupLedgerDimensionParameters _searchParameterWithBackup)
    {
        InventPostingAccountItemLedgerDimensionParameters searchParameter = InventPostingAccountItemLedgerDimensionParameters::newFromParameterWithBackup(_searchParameterWithBackup);

        LedgerDimensionDefaultAccount accountResult = InventPosting::accountItemLedgerDimensionFromParameters(searchParameter);

        if (!accountResult)
        {
            searchParameter.AccountType = _searchParameterWithBackup.backupAccountType;
            
            accountResult = InventPosting::accountItemLedgerDimensionFromParameters(searchParameter);
        }

        return accountResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountItemWithBackupLedgerDimensionFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the account that is based on the primary account type or the backup account type.
    /// </summary>
    /// <param name = "_backupParameters">
    /// An <c>InventPostingAccountItemWithBackupLedgerDimensionParameters</c> instance which contains the parameters used to retrieve the posting ledger dimension.
    /// </param>
    /// <returns>
    /// A ledger dimension for the specified inventory account type.
    /// </returns>
    public static LedgerDimensionDefaultAccount accountItemWithBackupLedgerDimensionFromParameters(InventPostingAccountItemWithBackupLedgerDimensionParameters _searchParameterWithBackup)
    {
        LedgerDimensionDefaultAccount ledgerDimension;

        // <GEERU>
        #ISOCountryRegionCodes
        _searchParameterWithBackup.inventDim_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) ? _searchParameterWithBackup.inventDim_RU : null;

        InventPostingAccountItemLedgerDimensionParameters searchParameter = InventPostingAccountItemLedgerDimensionParameters::newFromParameterWithBackup(_searchParameterWithBackup);

        ledgerDimension = InventPosting::accountItemLedgerDimensionFromParameters(searchParameter);

        if (ledgerDimension == 0)
        {
            searchParameter.AccountType = _searchParameterWithBackup.backupAccountType;
            ledgerDimension = InventPosting::accountItemLedgerDimensionFromParameters(searchParameter);
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNumLedgerDimensionFromParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a ledger dimension that matches the passed search parameter.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <returns>The posting ledger dimension.</returns>
    public static LedgerDimensionDefaultAccount accountNumLedgerDimensionFromParameter(InventPosting _searchParameter)
    {
        return InventPosting::findByRelationsFromParameter(_searchParameter).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNumLedgerDimension</Name>
				<Source><![CDATA[
    [SysObsolete('Use accountNumLedgerDimensionFromParameter method instead.', true, 30\06\2018)]
    public static LedgerDimensionDefaultAccount accountNumLedgerDimension(
        InventAccountType       _accountType,
        InventPostingItemCode   _itemCode,
        ItemRelation            _itemRelation,
        InventCategoryRelation  _categoryRelation,
        TableGroupAll           _accountCode,
        CustVendRel             _accountRelation,
        TaxGroup                _taxGroup,
        TableGroupAll           _costCode           = TableGroupAll::All,
        CostRelation            _costRelation       = '',
        InventProfileTypeAll_RU _inventProfileRelation_RU  = InventProfileTypeAll_RU::All,
        InventProfileType_RU    _inventProfileType_RU       = InventProfileType_RU::NotSpecified,
        InventProfileId_RU      _inventProfileId_RU         = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNumLedgerDimensionWithSiteFromParameter_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a ledger dimension that matches the passed search parameter.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <returns>The found ledger dimension.</returns>
    public static LedgerDimensionDefaultAccount accountNumLedgerDimensionWithSiteFromParameter_CN(InventPosting _searchParameter)
    {
        return InventPosting::findWithSiteFromParameter_CN(_searchParameter).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNumWithSiteFromParameter_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a ledger dimension that matches the passed search parameter.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <returns>The found ledger dimension.</returns>
    public static LedgerDimensionDefaultAccount accountNumWithSiteFromParameter_CN(InventPosting _searchParameter)
    {
        return InventPosting::findWithSiteFromParameter_CN(_searchParameter).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountRelation</Name>
				<Source><![CDATA[
    static public CustVendRel accountRelation(
        TableGroupAll       _accountCode,
        CustVendAC          _accountNum,
        CustVendGroupId     _accountGroup)
    {
        return (_accountCode== TableGroupAll::Table
            ? _accountNum
            : _accountCode== TableGroupAll::GroupId
                ? _accountGroup
                : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountRelationEnabled</Name>
				<Source><![CDATA[
    static private boolean accountRelationEnabled(TableGroupAll _accountI)
    {
        return InventPostingParameters::find().accountRelationEnabled(_accountI);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountRelationFieldLabel</Name>
				<Source><![CDATA[
    static private LabelType accountRelationFieldLabel(TableGroupAll _accountI)
    {
        switch (_accountI)
        {
            case TableGroupAll::Table   :
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, AccountTable)).label();
            case TableGroupAll::GroupId :
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, AccountGroup)).label();
            case TableGroupAll::All     :
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, AccountAll)).label();
        }
        return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, AccountAll)).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountType2LedgerPostingTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for conversion of <c>InventAccountType</c> to <c>LedgerPostingType</c>.
    /// </summary>
    /// <param name = "_inventAccountType">The <c>InventAccountType</c> to convert.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    static delegate void accountType2LedgerPostingTypeDelegate(InventAccountType _inventAccountType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountType2LedgerPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list account types that are available for a ledger posting type.
    /// </summary>
    /// <param name="_inventAccountType">
    /// The inventory account type.
    /// </param>
    /// <returns>
    /// The ledger posting type for the inventory account.
    /// </returns>
    static public LedgerPostingType accountType2LedgerPostingType(InventAccountType _inventAccountType)
    {
        // <GIN>
        boolean taxParametersMarked = TaxParameters::checkTaxParameters_IN();
        // </GIN>
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        switch (_inventAccountType)
        {
            case InventAccountType::PurchPackingSlip    :
                return LedgerPostingType::PurchPckSlp;

            case InventAccountType::PurchPackingSlipOffsetAccount:
                return LedgerPostingType::PurchOffsetAccountPckSlp;

            case InventAccountType::PurchReceipt:
                return LedgerPostingType::PurchReceipt;

            case InventAccountType::PurchReceiptFixedAsset:
                return LedgerPostingType::PurchReceiptFixedAsset;

            case InventAccountType::PurchConsump :
                return LedgerPostingType::PurchConsump;

            case InventAccountType::PurchDisc  :
                return LedgerPostingType::PurchDisc;

            case InventAccountType::PurchStdProfit:
                return LedgerPostingType::PurchStdProfit;

            case InventAccountType::PurchStdLoss:
                return LedgerPostingType::PurchStdLoss;

            case InventAccountType::PurchStdOffsetAccount:
                return LedgerPostingType::PurchStdOffsetAccount;

            case InventAccountType::InventStdProfit:
                return LedgerPostingType::InventStdProfit;

            case InventAccountType::InventStdLoss:
                return LedgerPostingType::InventStdLoss;

            case InventAccountType::InventIssue:
                return LedgerPostingType::InventIssue;

            case InventAccountType::InventIssueFixedAsset:
                return LedgerPostingType::InventIssueFixedAsset;

            case InventAccountType::InventLoss:
                return LedgerPostingType::InventLoss;

            case InventAccountType::InventReceipt:
                return LedgerPostingType::InventReceipt;

            case InventAccountType::InventProfit:
                return LedgerPostingType::InventProfit;

            case InventAccountType::ProdPicklist :
                return LedgerPostingType::ProdPicklist;

            case InventAccountType::ProdPicklistOffsetAccount:
                return LedgerPostingType::ProdPicklistOffsetAccount;

            case InventAccountType::ProdReportFinished:
                return LedgerPostingType::ProdReportFinished;

            case InventAccountType::ProdReportFinishedOffsetAccount:
                return LedgerPostingType::ProdReportFinishedOffsetAccount;

            case InventAccountType::ProdIssue:
                return LedgerPostingType::ProdIssue;

            case InventAccountType::ProdIssueOffsetAccount:
                return LedgerPostingType::ProdIssueOffsetAccount;

            case InventAccountType::ProdReceipt:
                return LedgerPostingType::ProdReceipt;

            case InventAccountType::ProdReceiptOffsetAccount:
                return LedgerPostingType::ProdReceiptOffsetAccount;

            case InventAccountType::SalesPackingSlip:
                return LedgerPostingType::SalesPackingSlip;

            case InventAccountType::SalesPackingSlipOffsetAccount:
                return LedgerPostingType::SalesOffsetAccountPackingSlip;

            case InventAccountType::SalesIssue:
                return LedgerPostingType::SalesIssue;

            case InventAccountType::SalesConsump:
                return LedgerPostingType::SalesConsump;

            case InventAccountType::SalesRevenue:
                return LedgerPostingType::SalesRevenue;

            case InventAccountType::SalesPckSlipRevenue:
                return LedgerPostingType::SalesPckSlipRevenue;

            case InventAccountType::SalesPckSlipRevenueOffsetAccount:
                return LedgerPostingType::SalesPckSlipRevenueOffsetAccount;

            case InventAccountType::SalesDisc:
                return LedgerPostingType::SalesDisc;

            case InventAccountType::SalesCommission:
                return LedgerPostingType::SalesCommission;

            case InventAccountType::SalesCommissionOffsetAccount:
                return LedgerPostingType::SalesOffsetAccountCommission;

            case InventAccountType::SalesCancel:
                return LedgerPostingType::SalesRevenue;

            case InventAccountType::SalesReturn:
                return LedgerPostingType::SalesRevenue;

            case InventAccountType::PurchCharge:
                return LedgerPostingType::PurchReceipt;

            case InventAccountType::PurchStockVariation:
                return LedgerPostingType::PurchReceipt;

            case InventAccountType::PurchPackingSlipPurchaseOffsetAccount:
                return LedgerPostingType::PurchPckSlp;

            case InventAccountType::PurchPackingSlipTax:
                return LedgerPostingType::PurchPckSlp;

            case InventAccountType::SalesPackingSlipTax:
                return LedgerPostingType::SalesPckSlipRevenue;

            case InventAccountType::PdsCWLoss:
                return LedgerPostingType::PdsCWLoss;
            case InventAccountType::PdsCWProfit:
                return LedgerPostingType::PdsCWProfit;

            case InventAccountType::PurchStdCostPurchasePriceVariance:
                return LedgerPostingType::PurchStdCostPurchasePriceVariance;

            case InventAccountType::PurchExpense:
                return LedgerPostingType::PurchExpense;

            case InventAccountType::ProdStdCostProductionVariance:
                return LedgerPostingType::ProdStdCostProductionVariance;

            case InventAccountType::InventStdCostRevaluation:
                return LedgerPostingType::InventStdCostRevaluation;

            case InventAccountType::InventStdCostChangeVariance:
                return LedgerPostingType::InventStdCostChangeVariance;

            case InventAccountType::InventInterUnitPayable:
                return LedgerPostingType::InventInterUnitPayable;

            case InventAccountType::InventInterUnitReceivable:
                return LedgerPostingType::InventInterUnitReceivable;

            case InventAccountType::InventStdCostRoundingVariance:
                return LedgerPostingType::InventStdCostRoundingVariance;

            case InventAccountType::ProdStdCostLotSizeVariance:
                return LedgerPostingType::ProdStdCostLotSizeVariance;

            case InventAccountType::ProdStdCostQuantityVariance:
                return LedgerPostingType::ProdStdCostQuantityVariance;

            case InventAccountType::ProdStdCostSubstitutionVariance:
                return LedgerPostingType::ProdStdCostSubstitutionVariance;

            // <GEERU>
            case InventAccountType::InventRoundingLoss_RU:
                return LedgerPostingType::InventRoundingLoss_RU;

            case InventAccountType::InventRoundingProfit_RU:
                return LedgerPostingType::InventRoundingProfit_RU;

            case InventAccountType::SalesGoodsInRoute_RU:
                return LedgerPostingType::SalesGoodsInRoute_RU;

            case InventAccountType::SalesGoodsInRouteOffsetAccount_RU:
                return LedgerPostingType::SalesGoodsInRouteOffset_RU;
            // </GEERU>

            // <GIN>
            case InventAccountType::TransferGoodsTransit_IN:
                if (taxParametersMarked)
                {
                    return LedgerPostingType::TransferGoodsTransit_IN;
                }

            case InventAccountType::TransferIssue_IN:
                if (taxParametersMarked)
                {
                    return LedgerPostingType::TransferIssue_IN;
                }

            case InventAccountType::TransferLoss_IN:
                if (taxParametersMarked)
                {
                    return LedgerPostingType::TransferLoss_IN;
                }

            case InventAccountType::TransferProfit_IN:
                if (taxParametersMarked)
                {
                    return LedgerPostingType::TransferProfit_IN;
                }

            case InventAccountType::TransferReceipt_IN:
                if (taxParametersMarked)
                {
                    return LedgerPostingType::TransferReceipt_IN;
                }

            case InventAccountType::TransferScrap_IN:
                if (taxParametersMarked)
                {
                    return LedgerPostingType::TransferScrap_IN;
                }

            case InventAccountType::TransferInterim_IN:
                if (taxParametersMarked)
                {
                    return LedgerPostingType::TransferInterim_IN;
                }
            // </GIN>

            case InventAccountType::PurchAdvance:
                return LedgerPostingType::PurchAdvance;

            case InventAccountType::ProdLeanWIPServiceReceipt:
                return LedgerPostingType::ProdLeanWIPServiceReceipt;

            case InventAccountType::ProdLeanWIPServiceClearing:
                return LedgerPostingType::ProdLeanWIPServiceClearing;

            case InventAccountType::InventMovingAverageCostRevaluation:
                return LedgerPostingType::InventMovingAverageCostRevaluation;

            case InventAccountType::InventMovingAveragePriceDifference:
                return LedgerPostingType::InventMovingAveragePriceDifference;
            case InventAccountType::SalesCreditNote_IT:
                return LedgerPostingType::SalesCreditNote_IT;
            case InventAccountType::SalesForFree_IT:
                return LedgerPostingType::SalesForFree_IT;
            case InventAccountType::SalesAdvance:
                return LedgerPostingType::SalesAdvance;
        }

        var eventHandlerResult = EventHandlerResult::newSingleResponse();
        InventPosting::accountType2LedgerPostingTypeDelegate(_inventAccountType, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }

        throw error(strFmt("@SYS12580", _inventAccountType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountType2ModuleDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for conversion of <c>InventAccountType</c> to <c>ModuleInventCustVend</c>.
    /// </summary>
    /// <param name = "_inventAccountType">The <c>InventAccountType</c> to convert.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    static delegate void accountType2ModuleDelegate(InventAccountType _inventAccountType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountType2Module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ModuleInventCustVend</c> type by using the <c>InventAccountType</c> type.
    /// </summary>
    /// <param name="_accountType">
    /// An <c>InventAccountType</c> variable that contains account types.
    /// </param>
    /// <returns>
    /// The <c>ModuleInventCustVend</c> type for the <c>InventAccountType</c> type.
    /// </returns>
    static public ModuleInventCustVend accountType2Module(InventAccountType _accountType)
    {
        switch (_accountType)
        {
            case InventAccountType::PurchPackingSlip,
                 InventAccountType::PurchPackingSlipOffsetAccount,
                 InventAccountType::PurchReceipt,
                 InventAccountType::PurchReceiptFixedAsset,
                 InventAccountType::PurchConsump,
                 InventAccountType::PurchDisc,
                 InventAccountType::PurchStdProfit,
                 InventAccountType::PurchStdLoss,
                 InventAccountType::PurchStdOffsetAccount,
                 InventAccountType::PurchCharge,
                 InventAccountType::PurchStockVariation,
                 InventAccountType::PurchPackingSlipPurchaseOffsetAccount,
                 InventAccountType::PurchPackingSlipTax,
                 InventAccountType::PurchStdCostPurchasePriceVariance,
                 InventAccountType::PurchExpense,
                 InventAccountType::PurchAdvance:
                return ModuleInventCustVend::Vend;

            case InventAccountType::SalesPackingSlip,
                 InventAccountType::SalesPackingSlipOffsetAccount,
                 InventAccountType::SalesIssue,
                 InventAccountType::SalesConsump,
                 InventAccountType::SalesRevenue,
                 InventAccountType::SalesPckSlipRevenue,
                 InventAccountType::SalesPckSlipRevenueOffsetAccount,
                 InventAccountType::SalesDisc,
                 InventAccountType::SalesCommission,
                 InventAccountType::SalesCommissionOffsetAccount,
                 // <GEEU>
                 InventAccountType::SalesGoodsInRoute_RU,
                 InventAccountType::SalesGoodsInRouteOffsetAccount_RU,
                 // </GEEU>
                 InventAccountType::SalesPackingSlipTax,
                 InventAccountType::SalesCancel,
                 InventAccountType::SalesReturn,
                 InventAccountType::SalesCreditNote_IT,
                 InventAccountType::SalesAdvance,
                 InventAccountType::SalesForFree_IT:
                return ModuleInventCustVend::Cust;

            case InventAccountType::InventStdProfit,
                 InventAccountType::InventStdLoss,
                 InventAccountType::InventIssue,
                 InventAccountType::InventIssueFixedAsset,
                 InventAccountType::InventLoss,
                 InventAccountType::InventReceipt,
                 InventAccountType::InventProfit,
                 InventAccountType::ProdPicklist,
                 InventAccountType::ProdPicklistOffsetAccount,
                 InventAccountType::ProdReportFinished,
                 InventAccountType::ProdReportFinishedOffsetAccount,
                 InventAccountType::ProdIssue,
                 InventAccountType::ProdIssueOffsetAccount,
                 InventAccountType::ProdReceipt,
                 InventAccountType::ProdReceiptOffsetAccount,
                 InventAccountType::InventStdCostRoundingVariance,
                 InventAccountType::InventStdCostRevaluation,
                 InventAccountType::InventStdCostChangeVariance,
                 InventAccountType::ProdStdCostLotSizeVariance,
                 InventAccountType::ProdStdCostProductionVariance,
                 InventAccountType::ProdStdCostQuantityVariance,
                 InventAccountType::ProdStdCostSubstitutionVariance,
                 InventAccountType::ProdLeanWIPServiceReceipt,
                 InventAccountType::ProdLeanWIPServiceClearing,
                 InventAccountType::InventInterUnitPayable,
                 // <GIN>
                 InventAccountType::TransferIssue_IN,
                 InventAccountType::TransferReceipt_IN,
                 InventAccountType::TransferProfit_IN,
                 InventAccountType::TransferLoss_IN,
                 InventAccountType::TransferGoodsTransit_IN,
                 InventAccountType::TransferScrap_IN,
                 InventAccountType::TransferInterim_IN,
                 // </GIN>
                 // <GEERU>
                 InventAccountType::InventInterUnitReceivable,
                 InventAccountType::InventRoundingLoss_RU,
                 InventAccountType::InventRoundingProfit_RU:
                 // </GEERU>

                 return ModuleInventCustVend::Invent;
            case InventAccountType::InventMovingAverageCostRevaluation,
                 InventAccountType::InventMovingAveragePriceDifference:
                return ModuleInventCustVend::Invent;
            case InventAccountType::PdsCWLoss,
                 InventAccountType::PdsCWProfit:
                return ModuleInventCustVend::Invent;
        }

        var eventHandlerResult = EventHandlerResult::newSingleResponse();
        InventPosting::accountType2ModuleDelegate(_accountType, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }
        
        throw error(strFmt("@SYS12580", _accountType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>costItemExtendParm_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the account for posting cost with extended parameters.
    /// </summary>
    /// <param name="_accountType">
    /// The InventAccountType for searching.
    /// </param>
    /// <param name="_inventPostingExtendParm">
    /// The extended parameters.
    /// </param>
    /// <param name="_costGroup">
    /// The cost group.
    /// </param>
    /// <param name="_itemId">
    /// The item number.
    /// </param>
    /// <param name="_itemGroup">
    /// The item group; optional.
    /// </param>
    /// <returns>
    /// A ledger account.
    /// </returns>
    public static LedgerDimensionDefaultAccount costItemExtendParm_CN(
        InventAccountType           _accountType,
        InventPostingExtendParm_CN  _inventPostingExtendParm,
        CostGroupId                 _costGroup,
        ItemId                      _itemId,
        ItemGroupId                 _itemGroup = '')
    {
        InventPostingCostItemLedgerDimensionParameters searchParameter = InventPostingCostItemLedgerDimensionParameters::construct();
        searchParameter.AccountType = _accountType;
        searchParameter.CostGroupId = _costGroup;
        searchParameter.ItemId = _itemId;
        searchParameter.ItemGroup = _itemGroup;
        searchParameter.SiteRelation = _inventPostingExtendParm.parmInventSiteId();

        return InventPosting::costItemLedgerDimensionFromParameter(searchParameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costItemLedgerDimensionFromParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a ledger posting account that corresponds to the specified parameter.
    /// </summary>
    /// <param name = "_parameter">A search parameter.</param>
    /// <returns>A ledger posting account.</returns>
    public static LedgerDimensionDefaultAccount costItemLedgerDimensionFromParameter(InventPostingCostItemLedgerDimensionParameters _searchParameter)
    {
        List criteriaList = InventPosting::buildCostItemLedgerDimensionCriteriaList(_searchParameter);

        InventPostingSearchEngine inventPostingSearchEngine = new InventPostingSearchEngine(criteriaList);

        return inventPostingSearchEngine.executeSearch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCostItemLedgerDimensionCriteriaList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the ordered list of criteria to use for searching the inventory posting for an account number.
    /// </summary>
    /// <param name = "_searchParameter">Search parameters to use for building the criteria.</param>
    /// <returns>The ordered list of criteria.</returns>
    protected static List buildCostItemLedgerDimensionCriteriaList(InventPostingCostItemLedgerDimensionParameters _searchParameter)
    {
        List criteria = new List(Types::Class);

        CostItemInventPostingCostSearchCriteria costCriteria = CostItemInventPostingCostSearchCriteria::construct(_searchParameter);
        criteria.addEnd(costCriteria);

        CostItemInventPostingItemSearchCriteria itemCriteria = CostItemInventPostingItemSearchCriteria::construct(_searchParameter);
        criteria.addEnd(itemCriteria);
        
        return criteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costItemLedgerDimensionExtendParm_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the ledger dimension for posting cost with extended parameters.
    /// </summary>
    /// <param name="_accountType">
    /// The InventAccountType for searching.
    /// </param>
    /// <param name="_inventPostingExtendParm">
    /// The extended parameters.
    /// </param>
    /// <param name="_costGroup">
    /// The cost group.
    /// </param>
    /// <param name="_itemId">
    /// The item number.
    /// </param>
    /// <param name="_itemGroup">
    /// The item group; optional.
    /// </param>
    /// <returns>
    /// A ledger dimension.
    /// </returns>
    public static LedgerDimensionDefaultAccount costItemLedgerDimensionExtendParm_CN(
        InventAccountType           _accountType,
        InventPostingExtendParm_CN  _inventPostingExtendParm,
        CostGroupId                 _costGroup,
        ItemId                      _itemId,
        ItemGroupId                 _itemGroup = '')
    {
        InventPostingCostItemLedgerDimensionParameters searchParameter = InventPostingCostItemLedgerDimensionParameters::construct();
        searchParameter.AccountType = _accountType;
        searchParameter.CostGroupId = _costGroup;
        searchParameter.ItemId = _itemId;
        searchParameter.ItemGroup = _itemGroup;
        searchParameter.SiteRelation = _inventPostingExtendParm.parmInventSiteId();
        
        return InventPosting::costItemLedgerDimensionFromParameter(searchParameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the cost relation for a particular cost relation code, cost group and cost group type.
    /// </summary>
    /// <param name="_costCode">
    ///    The cost relation code.
    /// </param>
    /// <param name="_costGroup">
    ///    The cost group.
    /// </param>
    /// <param name="_costGroupType">
    ///    The cost group type.
    /// </param>
    /// <returns>
    ///    The cost relation.
    /// </returns>
    public static CostRelation costRelation(
        TableGroupAll   _costCode,
        CostGroupId     _costGroup,
        CostGroupType   _costGroupType)
    {
        switch (_costCode)
        {
            case TableGroupAll::Table:
                return _costGroup;

            case TableGroupAll::GroupId:
                return int2str(enum2int(_costGroupType));
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>costRelationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a cost relation is enabled.
    /// </summary>
    /// <param name="_costI">
    ///    The cost relation.
    /// </param>
    /// <returns>
    ///    true if the cost relation is enabled; otherwise, false.
    /// </returns>
    public static boolean costRelationEnabled(TableGroupAll _costI)
    {
        return InventPostingParameters::find().costRelationEnabled(_costI);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costRelationFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the label for a cost relation.
    /// </summary>
    /// <param name="_costI">
    ///    The cost relation.
    /// </param>
    /// <returns>
    ///    The label for the cost relation.
    /// </returns>
    public static LabelType costRelationFieldLabel(TableGroupAll _costI)
    {
        switch (_costI)
        {
            case TableGroupAll::Table   :
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, CostTable)).label();
            case TableGroupAll::GroupId :
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, CostGroup)).label();
            case TableGroupAll::All     :
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, CostAll)).label();
        }
        return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, CostAll)).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromCust</Name>
				<Source><![CDATA[
    static public void deleteFromCust(CustAccount _custAccount)
    {
        InventPosting   inventPosting;

        ttsbegin;
        while select forupdate inventPosting
            where inventPosting.CustVendCode        == TableGroupAll::Table &&
                  inventPosting.CustVendRelation    == _custAccount
        {
            if (inventPosting.isCustAccountType())
            {
                inventPosting.delete();
            }
        }
        ttscommit;

        if (EXILFeatures_IT::isFeatureEnabled(EXILFeature::Exil2131))
        {
            delete_from inventPosting
                where inventPosting.CustVendCode == TableGroupAll::Table
                    && inventPosting.CustVendRelation == _custAccount
                    && inventPosting.InventAccountType == InventAccountType::SalesCreditNote_IT;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>InventAccountType</c> is associated with a customer.
    /// </summary>
    /// <returns>
    /// true if the <c>InventAccountType</c> is associated with a customer; otherwise, false.
    /// </returns>
    protected boolean isCustAccountType()
    {
        return InventPosting::accountType2Module(this.InventAccountType) == ModuleInventCustVend::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromVend</Name>
				<Source><![CDATA[
    static public void deleteFromVend(VendAccount _vendAccount)
    {
        InventPosting   inventPosting;

        ttsbegin;
        while select forupdate inventPosting
            where inventPosting.CustVendCode        == TableGroupAll::Table &&
                  inventPosting.CustVendRelation    == _vendAccount
        {
            if (inventPosting.isVendAccountType())
            {
                inventPosting.delete();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>InventAccountType</c> is associated with a vendor.
    /// </summary>
    /// <returns>
    /// true if the <c>InventAccountType</c> is associated with a vendor; otherwise, false.
    /// </returns>
    protected boolean isVendAccountType()
    {
        return InventPosting::accountType2Module(this.InventAccountType) == ModuleInventCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWithSite_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses a set of parameters including site to check whether there is a matched record.
    /// </summary>
    /// <param name="_accountType">
    /// The InventAccountType for searching.
    /// </param>
    /// <param name="_siteCode">
    /// Site code.
    /// </param>
    /// <param name="_siteRelation">
    /// Site relation.
    /// </param>
    /// <param name="_itemCode">
    /// Item code.
    /// </param>
    /// <param name="_itemRelation">
    /// Item relation.
    /// </param>
    /// <param name="_categoryRelation">
    /// Item category relation.
    /// </param>
    /// <param name="_accountCode">
    /// Account code.
    /// </param>
    /// <param name="_accountRelation">
    /// Account relation.
    /// </param>
    /// <param name="_taxGroup">
    /// Tax group.
    /// </param>
    /// <param name="_costCode">
    /// Cost code.
    /// </param>
    /// <param name="_costRelation">
    /// Cost relation.
    /// </param>
    /// <returns>
    /// Returns true if there is a matched record.
    /// </returns>
    public static boolean existWithSite_CN(
        InventAccountType       _accountType,
        InventSiteCode_CN       _siteCode,
        InventSiteRelation_CN   _siteRelation,
        InventPostingItemCode   _itemCode,
        ItemRelation            _itemRelation,
        InventCategoryRelation  _categoryRelation,
        TableGroupAll           _accountCode,
        CustVendRel             _accountRelation,
        TaxGroup                _taxGroup,
        TableGroupAll           _costCode,
        CostRelation            _costRelation)
    {
        return (select firstonly inventPosting
            where inventPosting.InventAccountType       == _accountType
                && inventPosting.ItemCode               == _itemCode
                && inventPosting.ItemRelation           == _itemRelation
                && inventPosting.CategoryRelation       == _categoryRelation
                && inventPosting.CustVendCode           == _accountCode
                && inventPosting.CustVendRelation       == _accountRelation
                && inventPosting.TaxGroupId             == _taxGroup
                && inventPosting.CostCode               == _costCode
                && inventPosting.CostRelation           == _costRelation
                && inventPosting.SiteCode_CN            == _siteCode
                && inventPosting.SiteRelation_CN        == _siteRelation
                && InventPosting.InventProfileTypeAll_RU    == InventProfileTypeAll_RU::All
                && InventPosting.InventProfileType_RU   == InventProfileType_RU::NotSpecified
                && InventPosting.InventProfileId_RU     == '').RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRelationsFromParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an inventory posting record based on provided search parameter.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <param name = "_update">Whether found record is supposed to be updated.</param>
    /// <returns>An inventory posting record.</returns>
    static public InventPosting findByRelationsFromParameter(InventPosting _searchParameter, boolean _update = false)
    {
        InventPosting inventPosting;
        InventCategoryRelation  parentCategoryRecId;

        if (_update)
        {
            inventPosting.selectForUpdate(_update);
        }

        select firstonly inventPosting
            where inventPosting.InventAccountType         == _searchParameter.InventAccountType
                &&  inventPosting.ItemCode                == _searchParameter.ItemCode
                &&  inventPosting.ItemRelation            == _searchParameter.ItemRelation
                &&  inventPosting.CategoryRelation        == _searchParameter.CategoryRelation
                &&  inventPosting.CustVendCode            == _searchParameter.CustVendCode
                &&  inventPosting.CustVendRelation        == _searchParameter.CustVendRelation
                &&  inventPosting.TaxGroupId              == _searchParameter.TaxGroupId
                &&  inventPosting.CostCode                == _searchParameter.CostCode
                &&  inventPosting.CostRelation            == _searchParameter.CostRelation
                // <GEERU>
                &&  inventPosting.InventProfileTypeAll_RU == _searchParameter.InventProfileTypeAll_RU
                &&  inventPosting.InventProfileType_RU    == _searchParameter.InventProfileType_RU
                &&  inventPosting.InventProfileId_RU      == _searchParameter.InventProfileId_RU
                // </GEERU>
                // <GCN>
                &&  inventPosting.SiteCode_CN             == _searchParameter.SiteCode_CN
                &&  inventPosting.SiteRelation_CN         == _searchParameter.SiteRelation_CN
                // </GCN>
                && InventPosting.SHA256Hash               == _searchParameter.hashKey();

        if (InventPosting::mustContinueSearch(inventPosting, _searchParameter, _update))
        {
            InventPosting adjustedSearchParameter;
            adjustedSearchParameter.data(_searchParameter);

            if (InventPosting::tryAdjustParameterForFurtherSearch(adjustedSearchParameter))
            {
                inventPosting = InventPosting::findByRelationsFromParameter(adjustedSearchParameter);
            }
        }

        return inventPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustContinueSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether inventory posting record search must be continued based on the current search results and search criteria.
    /// </summary>
    /// <param name = "_foundInventPosting">A found inventory posting record.</param>
    /// <param name = "_searchParameter">An inventory posting record search parameter.</param>
    /// <param name = "_update">Whether found record is supposed to be updated.</param>
    /// <returns>true if the search must be continued; otherwise, false.</returns>
    protected static boolean mustContinueSearch(InventPosting _foundInventPosting, InventPosting _searchParameter, boolean _update)
    {
        return _searchParameter.ItemCode == InventPostingItemCode::Category 
            && _foundInventPosting.RecId == 0 
            && !_update;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAdjustParameterForFurtherSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempts to adjust inventory posting record search parameter.
    /// </summary>
    /// <param name = "_searchParameter">The search parameter to adjust.</param>
    /// <returns>true if adjustment is performed; otherwise, false.</returns>
    protected static boolean tryAdjustParameterForFurtherSearch(InventPosting _searchParameter)
    {
        InventCategoryRelation parentCategoryRecId = EcoResCategory::find(_searchParameter.CategoryRelation).ParentCategory;
        boolean ret;

        if (parentCategoryRecId)
        {
            _searchParameter.CategoryRelation = parentCategoryRecId;
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRelations</Name>
				<Source><![CDATA[
    [SysObsolete('Use findByRelationsFromParameters method instead.', true, 30\06\2018)]
    static public InventPosting findByRelations(
        InventAccountType           _accountType,
        InventPostingItemCode       _itemCode,
        ItemRelation                _itemRelation,
        InventCategoryRelation      _categoryRelation,
        TableGroupAll               _accountCode,
        CustVendRel                 _accountRelation,
        TaxGroup                    _taxGroup,
        TableGroupAll               _costCode,
        CostRelation                _costRelation,
        boolean                     _update = false, 
        InventProfileTypeAll_RU     _inventProfileRelation_RU   = InventProfileTypeAll_RU::All,
        InventProfileType_RU        _inventProfileType_RU       = InventProfileType_RU::NotSpecified,
        InventProfileId_RU          _inventProfileId_RU         = '', 
        InventSiteCodeType_CN       _inventSiteCode_CN          = InventSiteCode_CN::All,
        InventSiteRelation_CN       _inventSiteRelation_CN      = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new inventory posting buffer from provided parameters.
    /// </summary>
    /// <param name = "_accountType">An inventory account type.</param>
    /// <param name = "_itemCode">An inventory posting item code.</param>
    /// <param name = "_itemRelation">An item relation.</param>
    /// <param name = "_categoryRelation">A category relation.</param>
    /// <param name = "_accountCode">An account code.</param>
    /// <param name = "_accountRelation">An account relation.</param>
    /// <param name = "_taxGroup">A tax group.</param>
    /// <param name = "_costCode">A cost code.</param>
    /// <param name = "_costRelation">A cost relation.</param>
    /// <param name = "_accountNum">A ledger account.</param>
    /// <param name = "_inventProfileRelation_RU">An inventory profile relation.</param>
    /// <param name = "_inventProfileType_RU">An inventory profile type.</param>
    /// <param name = "_inventProfileId_RU">An inventory profile Id.</param>
    /// <param name = "_inventSiteCode_CN">An inventory site code.</param>
    /// <param name = "_inventSiteRelation_CN">An inventory site relation.</param>
    /// <returns>A created inventory posting buffer.</returns>
    private static InventPosting newFromParameters(
        InventAccountType             _accountType,
        InventPostingItemCode         _itemCode                   = InventPostingItemCode::All,
        ItemRelation                  _itemRelation               = '',
        InventCategoryRelation        _categoryRelation           = 0,
        TableGroupAll                 _accountCode                = TableGroupAll::All,
        CustVendRel                   _accountRelation            = '',
        TaxGroup                      _taxGroup                   = '',
        TableGroupAll                 _costCode                   = TableGroupAll::All,
        CostRelation                  _costRelation               = '',
        LedgerDimensionDefaultAccount _accountNum                 = 0,
        InventProfileTypeAll_RU       _inventProfileRelation_RU   = InventProfileTypeAll_RU::All,
        InventProfileType_RU          _inventProfileType_RU       = InventProfileType_RU::NotSpecified,
        InventProfileId_RU            _inventProfileId_RU         = '',
        InventSiteCodeType_CN         _inventSiteCode_CN          = InventSiteCode_CN::All,
        InventSiteRelation_CN         _inventSiteRelation_CN      = '')
    {
        InventPosting inventPosting;
        
        inventPosting.InventAccountType = _accountType;
        inventPosting.ItemCode = _itemCode;
        inventPosting.ItemRelation = _itemRelation;
        inventPosting.CategoryRelation = _categoryRelation;
        inventPosting.CustVendCode = _accountCode;
        inventPosting.CustVendRelation = _accountRelation;
        inventPosting.TaxGroupId = _taxGroup;
        inventPosting.CostCode = _costCode;
        inventPosting.CostRelation = _costRelation;
        inventPosting.InventProfileTypeAll_RU = _inventProfileRelation_RU;
        inventPosting.InventProfileType_RU = _inventProfileType_RU;
        inventPosting.InventProfileId_RU = _inventProfileId_RU;
        inventPosting.SiteCode_CN = _inventSiteCode_CN;
        inventPosting.SiteRelation_CN = _inventSiteRelation_CN;

        return inventPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostingParameterBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current instance with data from an inventory posting search parameter.
    /// </summary>
    /// <param name = "_parameter">An inventory posting search parameter.</param>
    public void initFromPostingParameterBase(InventPostingSearchParameters _searchParameter)
    {
        this.InventAccountType = _searchParameter.AccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithSiteFromParameter_CN</Name>
				<Source><![CDATA[
    public static InventPosting findWithSiteFromParameter_CN(InventPosting _searchParameter, boolean _update = false)
    {
        InventPosting inventPosting;

        if (_update)
        {
            inventPosting.selectForUpdate(_update);
        }

        select firstonly inventPosting
            where inventPosting.InventAccountType        == _searchParameter.InventAccountType
                && inventPosting.ItemCode                == _searchParameter.ItemCode
                && inventPosting.ItemRelation            == _searchParameter.ItemRelation
                && inventPosting.CategoryRelation        == _searchParameter.CategoryRelation
                && inventPosting.CustVendCode            == _searchParameter.CustVendCode
                && inventPosting.CustVendRelation        == _searchParameter.CustVendRelation
                && inventPosting.TaxGroupId              == _searchParameter.TaxGroupId
                && inventPosting.CostCode                == _searchParameter.CostCode
                && inventPosting.CostRelation            == _searchParameter.CostRelation
                && inventPosting.TaxGroupId              == _searchParameter.TaxGroupId
                && inventPosting.SiteCode_CN             == _searchParameter.SiteCode_CN
                && inventPosting.SiteRelation_CN         == _searchParameter.SiteRelation_CN
                && inventPosting.InventProfileTypeAll_RU == InventProfileTypeAll_RU::All
                && inventPosting.InventProfileType_RU    == InventProfileType_RU::NotSpecified
                && inventPosting.InventProfileId_RU      == '';

        return inventPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccount2AccountTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for conversion of <c>InventAccountTypeInvent</c> to <c>InventAccountType</c>.
    /// </summary>
    /// <param name = "_account">The <c>InventAccountTypeInvent</c> to convert.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    static delegate void inventAccount2AccountTypeDelegate(InventAccountTypeInvent _account, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccount2AccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the <c>InventAcountTypeInvent</c> type to its respective <c>InventAccountType</c> type.
    /// </summary>
    /// <param name="_account">
    ///    The inventory posting account type.
    /// </param>
    /// <returns>
    ///    The <c>InventAccountType</c> type for the <c>InventAccountTypeInvent</c> type given
    /// </returns>
    static public InventAccountType inventAccount2AccountType(InventAccountTypeInvent _account)
    {
        switch (_account)
        {
            case InventAccountTypeInvent::StdProfit:
                return InventAccountType::InventStdProfit;
            case InventAccountTypeInvent::StdLoss:
                return InventAccountType::InventStdLoss;
            case InventAccountTypeInvent::Issue :
                return InventAccountType::InventIssue;
            case InventAccountTypeInvent::IssueFixedAsset:
                return InventAccountType::InventIssueFixedAsset;
            case InventAccountTypeInvent::Loss:
                return InventAccountType::InventLoss;
            case InventAccountTypeInvent::Receipt:
                return InventAccountType::InventReceipt;
            case InventAccountTypeInvent::Profit:
                return InventAccountType::InventProfit;
            case InventAccountTypeInvent::PdsCWLoss:
                return InventAccountType::PdsCWLoss;
            case InventAccountTypeInvent::PdsCWProfit:
                return InventAccountType::PdsCWProfit;
            case InventAccountTypeInvent::InterUnitPayable:
                return InventAccountType::InventInterUnitPayable;
            case InventAccountTypeInvent::InterUnitReceivable:
                return InventAccountType::InventInterUnitReceivable;
            case InventAccountTypeInvent::MovingAverageCostRevaluation:
                return InventAccountType::InventMovingAverageCostRevaluation;
            case InventAccountTypeInvent::MovingAveragePriceDifference:
                return InventAccountType::InventMovingAveragePriceDifference;
            // <GEERU>
            case InventAccountTypeInvent::RoundingLoss_RU:
                return InventAccountType::InventRoundingLoss_RU;
            case InventAccountTypeInvent::RoundingProfit_RU:
                return InventAccountType::InventRoundingProfit_RU;
            // </GEERU>
        }

        var eventHandlerResult = EventHandlerResult::newSingleResponse();
        InventPosting::inventAccount2AccountTypeDelegate(_account, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }
        
        throw error(strFmt("@SYS12580", _account));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileRelationEnabled_RU</Name>
				<Source><![CDATA[
    static boolean inventProfileRelationEnabled_RU(InventProfileTypeAll_RU _itemI)
    {
        return InventPostingParameters::find().inventProfileRelationEnabled_RU(_itemI);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileRelationFieldLabel_RU</Name>
				<Source><![CDATA[
    static LabelType inventProfileRelationFieldLabel_RU(InventProfileTypeAll_RU _inventProfileI)
    {
        switch (_inventProfileI)
        {
            case InventProfileTypeAll_RU::Profile : return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, InventProfileTable_RU)).label();
            case InventProfileTypeAll_RU::Type    : return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, InventProfileType_RU)).label();
            case InventProfileTypeAll_RU::All     : return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, InventProfileAll_RU)).label();
        }
        return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, InventProfileAll_RU)).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemExtendParm_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses the information of item and extended parameters to find the
    /// matched ledger account with specified InventAccountType.
    /// </summary>
    /// <param name="_accountType">
    /// The InventAccountType for searching.
    /// </param>
    /// <param name="_inventPostingExtendParm">
    /// Extended parameters.
    /// </param>
    /// <param name="_itemId">
    /// Item number (Item Id).
    /// </param>
    /// <param name="_itemGroup">
    /// Item group. Default is ''.
    /// </param>
    /// <param name="_itemCategory">
    /// Item category. Default is 0.
    /// </param>
    /// <param name="_searchTable">
    /// Boolean value to indicate whether to search in specific table. Default is true.
    /// </param>
    /// <param name="_searchGroupId">
    /// Boolean value to indicate whether to search in specific group. Default is true.
    /// </param>
    /// <param name="_searchCategory">
    /// Boolean value to indicate whether to search in specific category. Default is true.
    /// </param>
    /// <param name="_searchAll">
    /// Boolean value to indicate whether to search in all objects. Default is true.
    /// </param>
    /// <returns>
    /// The matched ledger account. If not matched, return ''.
    /// </returns>
    /// <remarks>
    /// The priority of site is lower than item.
    /// </remarks>
    public static LedgerDimensionDefaultAccount itemExtendParm_CN(
        InventAccountType           _accountType,
        InventPostingExtendParm_CN  _inventPostingExtendParm,
        ItemId                      _itemId,
        ItemGroupId                 _itemGroup      = '',
        InventCategoryRelation      _itemCategory   = 0,
        boolean                     _searchTable    = true,
        boolean                     _searchGroupId  = true,
        boolean                     _searchCategory = true,
        boolean                     _searchAll      = true)
    {
        InventPostingItemLedgerDimensionParameters searchParameter = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _accountType,
            _itemId,
            _itemGroup,
            _itemCategory,
            _searchTable,
            _searchGroupId,
            _searchCategory,
            _searchAll);

        searchParameter.SiteRelation = _inventPostingExtendParm.parmInventSiteId();

        return InventPosting::itemLedgerDimensionFromParameter(searchParameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLedgerDimensionFromParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a posting ledger dimension that matches the specified search parameter.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <returns>The posting ledger dimension for the item.</returns>
    public static LedgerDimensionAccount itemLedgerDimensionFromParameter(InventPostingItemLedgerDimensionParameters _searchParameter)
    {
        _searchParameter = _searchParameter.clone();

        if (!_searchParameter.ItemGroup && _searchParameter.ItemId)
        {
            _searchParameter.ItemGroup = InventTable::find(_searchParameter.ItemId).itemGroupId();
        }

        List criteriaList = InventPosting::buildItemLedgerDimensionCriteriaList(_searchParameter);

        InventPostingSearchEngine inventPostingSearchEngine = new InventPostingSearchEngine(criteriaList);

        return inventPostingSearchEngine.executeSearch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionCriteriaList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the ordered list of criteria to use for searching the inventory posting for an account number.
    /// </summary>
    /// <param name = "_searchParameter">Search parameters to use for building the criteria list.</param>
    /// <returns>The ordered list of criteria.</returns>
    protected static List buildItemLedgerDimensionCriteriaList(InventPostingItemLedgerDimensionParameters _searchParameter)
    {
        List criteria = new List(Types::Class);

        ItemInventPostingItemSearchCriteria itemCriteria = ItemInventPostingItemSearchCriteria::construct(_searchParameter);
        criteria.addEnd(itemCriteria);
        
        return criteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventPostingSearchParameterForItemCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an inventory posting search parameter in order to adjust to the current item code.
    /// </summary>
    /// <param name = "_inventPostingSearchParameter">An inventory posting search parameter.</param>
    /// <param name = "_searchParameter">A posting dimension search parameter.</param>
    /// <param name = "_itemCode">An item code.</param>
    public static void updateInventPostingSearchParameterForItemCode(
        InventPosting _inventPostingSearchParameter,
        InventPostingItemLedgerDimensionParameters _searchParameter,
        InventPostingItemCode _itemCode)
    {
        _inventPostingSearchParameter.initializeItemFields(_itemCode, _searchParameter.ItemId, _searchParameter.ItemGroup, _searchParameter.ItemCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeItemFieldsFromAccountItemLedgerDimensionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory posting item related fields from the specified <c>InventPostingAccountItemLedgerDimensionParameters</c>.
    /// </summary>
    /// <param name = "_searchParameter">A posting dimension search parameter.</param>
    /// <param name = "_itemCode">An item code.</param>
    public void initializeItemFieldsFromAccountItemLedgerDimensionParameters(
        InventPostingAccountItemLedgerDimensionParameters _searchParameter,
        InventPostingItemCode _itemCode)
    {
        this.initializeItemFields(_itemCode, _searchParameter.ItemId, _searchParameter.ItemGroup, _searchParameter.ItemCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeItemFields</Name>
				<Source><![CDATA[
    private void initializeItemFields(
        InventPostingItemCode   _itemCode,
        ItemId                  _itemId,
        ItemGroupId             _itemGroup,
        InventCategoryRelation  _itemCategory)
    {
        this.ItemCode          = _itemCode;
        this.ItemRelation      = InventPosting::itemRelation(_itemCode, _itemId, _itemGroup);
        this.CategoryRelation  = _itemCode == InventPostingItemCode::Category ? _itemCategory : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLedgerDimension</Name>
				<Source><![CDATA[
    [SysObsolete('Use itemLedgerDimensionFromParameter method instead.', true, 30\06\2018)]
    public static LedgerDimensionDefaultAccount itemLedgerDimension(
        InventAccountType       _accountType,
        ItemId                  _itemId,
        ItemGroupId             _itemGroup      = '',
        InventCategoryRelation  _itemCategory   = 0,
        boolean                 _searchTable    = true,
        boolean                 _searchGroupId  = true,
        boolean                 _searchCategory = true,
        boolean                 _searchAll      = true,
        InventDim               _inventDim_RU  = null)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLedgerDimensionExtendParmFromParameter_CN</Name>
				<Source><![CDATA[
    public static LedgerDimensionDefaultAccount itemLedgerDimensionExtendParmFromParameter_CN(
        InventPostingItemLedgerDimensionParameters _searchParameter,
        InventPostingExtendParm_CN _inventPostingExtendParm)
    {
        _searchParameter.SiteRelation = _inventPostingExtendParm.parmInventSiteId();
        
        List criteriaList = InventPosting::buildItemLedgerDimensionCriteriaList(_searchParameter);

        InventPostingSearchEngine inventPostingSearchEngine = new InventPostingSearchEngine(criteriaList);

        return inventPostingSearchEngine.executeSearch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLedgerDimensionExtendParm_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses the information of item and extended parameters to find the
    /// matched ledger dimension with specified InventAccountType.
    /// </summary>
    /// <param name="_accountType">
    /// The InventAccountType for searching.
    /// </param>
    /// <param name="_inventPostingExtendParm">
    /// Extended parameters.
    /// </param>
    /// <param name="_itemId">
    /// Item number (Item Id).
    /// </param>
    /// <param name="_itemGroup">
    /// Item group. Default is ''.
    /// </param>
    /// <param name="_itemCategory">
    /// Item category. Default is 0.
    /// </param>
    /// <param name="_searchTable">
    /// Boolean value to indicate whether to search in specific table. Default is true.
    /// </param>
    /// <param name="_searchGroupId">
    /// Boolean value to indicate whether to search in specific group. Default is true.
    /// </param>
    /// <param name="_searchCategory">
    /// Boolean value to indicate whether to search in specific category. Default is true.
    /// </param>
    /// <param name="_searchAll">
    /// Boolean value to indicate whether to search in all objects. Default is true.
    /// </param>
    /// <returns>
    /// The matched ledger dimension. If not matched, return 0.
    /// </returns>
    public static LedgerDimensionDefaultAccount itemLedgerDimensionExtendParm_CN(
        InventAccountType           _accountType,
        InventPostingExtendParm_CN  _inventPostingExtendParm,
        ItemId                      _itemId,
        ItemGroupId                 _itemGroup      = '',
        InventCategoryRelation      _itemCategory   = 0,
        boolean                     _searchTable    = true,
        boolean                     _searchGroupId  = true,
        boolean                     _searchCategory = true,
        boolean                     _searchAll      = true)
    {
        return InventPosting::itemLedgerDimensionExtendParmFromParameter_CN(
            InventPostingItemLedgerDimensionParameters::newFromParameters(
                _accountType,
                _itemId,
                _itemGroup,
                _itemCategory,
                _searchTable,
                _searchGroupId,
                _searchCategory,
                _searchAll),
            _inventPostingExtendParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemRelation</Name>
				<Source><![CDATA[
    static public ItemRelation itemRelation(
        InventPostingItemCode   _itemCode,
        ItemId                  _itemId,
        ItemGroupId             _itemGroup)
    {
        switch (_itemCode)
        {
            case InventPostingItemCode::Table:
                return _itemId;
            case InventPostingItemCode::GroupId:
                return _itemGroup;
            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemRelationEnabled</Name>
				<Source><![CDATA[
    static public boolean itemRelationEnabled(InventPostingItemCode _itemI)
    {
        return InventPostingParameters::find().itemRelationEnabled(_itemI);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemRelationFieldLabel</Name>
				<Source><![CDATA[
    static public LabelType itemRelationFieldLabel(InventPostingItemCode _itemI)
    {
        switch (_itemI)
        {
            case InventPostingItemCode::Table   :
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, ItemTable)).label();
            case InventPostingItemCode::GroupId :
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, ItemGroup)).label();
            case InventPostingItemCode::All     :
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, ItemAll)).label();
            case InventPostingItemCode::Category:
                return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, ItemCategory)).label();
        }
        return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, ItemAll)).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayOnlySiteCodeAllBeSet_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified InventAccountType is not related to site.
    /// </summary>
    /// <param name="_inventAccountType">
    /// The InventAccountType value.
    /// </param>
    /// <returns>
    /// Returns true if the InventAccountType is not related to site.
    /// </returns>
    /// <remarks>
    /// If the InventAccountType is not related to site, the site code
    /// can only be set to all.
    /// </remarks>
    public static boolean mayOnlySiteCodeAllBeSet_CN(InventAccountType _inventAccountType)
    {
        switch (_inventAccountType)
        {
            case InventAccountType::SalesPackingSlip,
                 InventAccountType::SalesIssue,

                 InventAccountType::PurchPackingSlip,
                 InventAccountType::PurchReceipt,
                 InventAccountType::PurchStdProfit,
                 InventAccountType::PurchStdLoss,
                 InventAccountType::PurchStdOffsetAccount,

                 InventAccountType::InventStdProfit,
                 InventAccountType::InventStdLoss,
                 InventAccountType::InventIssue,
                 InventAccountType::InventReceipt,

                 InventAccountType::ProdPicklist,
                 InventAccountType::ProdReportFinished,
                 InventAccountType::ProdIssue,
                 InventAccountType::ProdReceipt,

                 InventAccountType::PurchStdCostPurchasePriceVariance,
                 InventAccountType::InventStdCostRevaluation,
                 InventAccountType::ProdStdCostLotSizeVariance,
                 InventAccountType::ProdStdCostProductionVariance,
                 InventAccountType::ProdStdCostQuantityVariance,
                 InventAccountType::ProdStdCostSubstitutionVariance,
                 InventAccountType::InventStdCostRoundingVariance:

                    return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrItemCustCatalog2ItemAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the item/account/offer type of posting priority to item/account/offer priority.
    /// </summary>
    /// <param name="_mcrItemCustCatalog">
    /// The item/customer catalog priority to convert.
    /// </param>
    /// <returns>
    /// The item/account priority.
    /// </returns>
    /// <remarks>
    /// If item has higher precedence, return item; otherwise, account.
    /// </remarks>
    public static ItemAccount mcrItemCustCatalog2ItemAccount(MCRItemCustCatalog _mcrItemCustCatalog)
    {
        switch (_mcrItemCustCatalog)
        {
            case MCRItemCustCatalog::CustItemCatalog:
            case MCRItemCustCatalog::CustCatalogItem:
            case MCRItemCustCatalog::CatalogCustItem:
                // For these cases customer/account has priority over item
                return ItemAccount::Account;

            case MCRItemCustCatalog::ItemCustCatalog:
            case MCRItemCustCatalog::ItemCatalogCust:
            case MCRItemCustCatalog::CatalogItemCust:
                // For these cases item has priority over customer/account
                return ItemAccount::Item;

            default:
                // Shouldn't get here
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrLookupCustVendRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup to simplify the addition and modification of lookup data.
    /// </summary>
    /// <param name="_ctrl">
    /// The control on which the look up has to be performed.
    /// </param>
    /// <param name="_inventPosting">
    /// A <c>InventPosting</c> boolean value.
    /// </param>
    public static void mcrLookupCustVendRelation(FormStringControl _ctrl, InventPosting _inventPosting)
    {
        TradePartyModuleType::newFromPartyModule(InventPosting::accountType2Module(_inventPosting.InventAccountType)).mcrLookupCustVendRelation(_ctrl, _inventPosting.CustVendCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyTransFromParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies an inventory posting record.
    /// </summary>
    /// <param name="_modifyParameter">An inventory posting modification parameter.</param>
    static public void modifyTransFromParameter(InventPosting _modifyParameter)
    {
        InventPosting   inventPosting;
        boolean         ok;

        // <GCN>
        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
        {
            if (!InventPosting::mayOnlySiteCodeAllBeSet_CN(_modifyParameter.InventAccountType))
            {
                InventPosting modifyTransWithSiteParameter;

                modifyTransWithSiteParameter.data(_modifyParameter);
                modifyTransWithSiteParameter.SiteCode_CN = InventSiteCode_CN::All;
                modifyTransWithSiteParameter.SiteRelation_CN = '';

                InventPosting::modifyTransWithSiteFromParameter_CN(modifyTransWithSiteParameter);

                return;
            }
        }
        // </GCN>
        ttsbegin;

        inventPosting  = InventPosting::findByRelationsFromParameter(_modifyParameter, true);

        if (_modifyParameter.LedgerDimension)
        {
            inventPosting.InventAccountType         = _modifyParameter.InventAccountType;
            inventPosting.ItemCode                  = _modifyParameter.ItemCode;
            inventPosting.ItemRelation              = _modifyParameter.ItemRelation;
            inventPosting.CategoryRelation          = _modifyParameter.CategoryRelation;
            inventPosting.CustVendCode              = _modifyParameter.CustVendCode;
            inventPosting.CustVendRelation          = _modifyParameter.CustVendRelation;
            inventPosting.CostCode                  = _modifyParameter.CostCode;
            inventPosting.CostRelation              = _modifyParameter.CostRelation;
            inventPosting.TaxGroupId                = _modifyParameter.TaxGroupId;
            inventPosting.LedgerDimension           = _modifyParameter.LedgerDimension;
            // <GEERU>
            inventPosting.InventProfileTypeAll_RU   = _modifyParameter.InventProfileTypeAll_RU;
            inventPosting.InventProfileType_RU      = _modifyParameter.InventProfileType_RU;
            inventPosting.InventProfileId_RU        = _modifyParameter.InventProfileId_RU;
            // </GEERU>
            ok = inventPosting.validateField(fieldNum(InventPosting, LedgerDimension));
            if (ok)
            {
                inventPosting.write();
            }
        }
        else
        {
            inventPosting.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyTrans</Name>
				<Source><![CDATA[
    [SysObsolete('Use modifyTransFromParameter method instead.', true, 30\06\2018)]
    static public void modifyTrans(
        LedgerDimensionDefaultAccount   _accountNum,
        InventAccountType               _accountType,
        InventPostingItemCode           _itemCode                   = InventPostingItemCode::All,
        ItemRelation                    _itemRelation               = '',
        InventCategoryRelation          _categoryRelation           = 0,
        TableGroupAll                   _accountCode                = TableGroupAll::All,
        CustVendRel                     _accountRelation            = '',
        TaxGroup                        _taxGroup                   = '',
        TableGroupAll                   _costCode                   = TableGroupAll::All,
        CostRelation                    _costRelation               = '',
        InventProfileTypeAll_RU         _inventProfileRelation_RU   = InventProfileTypeAll_RU::All,
        InventProfileType_RU            _inventProfileType_RU       = InventProfileType_RU::NotSpecified,
        InventProfileId_RU              _inventProfileId_RU         = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyTransWithSiteFromParameter_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies an inventory posting record.
    /// </summary>
    /// <param name = "_modifyParameter">An inventory posting modification parameter.</param>
    public static void modifyTransWithSiteFromParameter_CN(InventPosting _modifyParameter)
    {
        // For the InventAccountTypes that not related to site,
        // call the original modifyTran(...)
        if (InventPosting::mayOnlySiteCodeAllBeSet_CN(_modifyParameter.InventAccountType))
        {
            InventPosting::modifyTransFromParameter(_modifyParameter);
            return;
        }

        ttsbegin;
        InventPosting inventPosting  = InventPosting::findWithSiteFromParameter_CN(_modifyParameter, true);

        if (_modifyParameter.LedgerDimension)
        {
            inventPosting.InventAccountType     = _modifyParameter.InventAccountType;
            inventPosting.SiteCode_CN           = _modifyParameter.SiteCode_CN;
            inventPosting.SiteRelation_CN       = _modifyParameter.SiteRelation_CN;
            inventPosting.ItemCode              = _modifyParameter.ItemCode;
            inventPosting.ItemRelation          = _modifyParameter.ItemRelation;
            inventPosting.CategoryRelation      = _modifyParameter.CategoryRelation;
            inventPosting.CustVendCode          = _modifyParameter.CustVendCode;
            inventPosting.CustVendRelation      = _modifyParameter.CustVendRelation;
            inventPosting.CostCode              = _modifyParameter.CostCode;
            inventPosting.CostRelation          = _modifyParameter.CostRelation;
            inventPosting.TaxGroupId            = _modifyParameter.TaxGroupId;
            inventPosting.LedgerDimension       = _modifyParameter.LedgerDimension;

            if (inventPosting.validateField(fieldNum(InventPosting, LedgerDimension)))
            {
                inventPosting.write();
            }
        }
        else
        {
            inventPosting.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateCostRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the cost relation should be validated for an inventory account type.
    /// </summary>
    /// <param name="_inventAccountType">
    ///    The inventory account type.
    /// </param>
    /// <returns>
    ///    true if the cost relation must be validated for the inventory account type; otherwise, false.
    /// </returns>
    public static boolean mustValidateCostRelation(InventAccountType _inventAccountType)
    {
        return InventPostingParameters::mustValidateCostRelation(_inventAccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingAccountNum_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will select the LedgerAccountId from InventPosting.
    /// </summary>
    /// <param name="_itemRelation">
    /// The item number.
    /// </param>
    /// <returns>
    /// Its return InventPosting LedgerAccountId.
    /// </returns>
    public static DimensionDisplayValue postingAccountNum_IN(ItemId _itemRelation)
    {
        InventPosting invPosting;

        select firstonly LedgerDimension from invPosting
            where invPosting.ItemRelation == _itemRelation
               && invPosting.ItemCode     == InventPostingItemCode::Table;

        return DimensionAttributeValueCombination::find(invPosting.LedgerDimension).DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodAccount2AccountTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for conversion of <c>InventAccountTypeProd</c> to <c>InventAccountType</c>.
    /// </summary>
    /// <param name = "_account">The <c>InventAccountTypeProd</c> to convert.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    static delegate void prodAccount2AccountTypeDelegate(InventAccountTypeProd _account, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodAccount2AccountType</Name>
				<Source><![CDATA[
    static public InventAccountType prodAccount2AccountType(InventAccountTypeProd _account)
    {
        switch (_account)
        {
            case InventAccountTypeProd::Picklist :
                return InventAccountType::ProdPicklist;
            case InventAccountTypeProd::PicklistOffsetAccount:
                return InventAccountType::ProdPicklistOffsetAccount;
            case InventAccountTypeProd::ReportFinished:
                return InventAccountType::ProdReportFinished;
            case InventAccountTypeProd::ReportFinishedOffsetAccount:
                return InventAccountType::ProdReportFinishedOffsetAccount;
            case InventAccountTypeProd::Issue :
                return InventAccountType::ProdIssue;
            case InventAccountTypeProd::IssueOffsetAccount:
                return InventAccountType::ProdIssueOffsetAccount;
            case InventAccountTypeProd::Receipt:
                return InventAccountType::ProdReceipt;
            case InventAccountTypeProd::ReceiptOffsetAccount:
                return InventAccountType::ProdReceiptOffsetAccount;
            case InventAccountTypeProd::LeanWIPServiceReceipt:
                return InventAccountType::ProdLeanWIPServiceReceipt;
            case InventAccountTypeProd::LeanWIPServiceClearing:
                return InventAccountType::ProdLeanWIPServiceClearing;
        }
        var eventHandlerResult = EventHandlerResult::newSingleResponse();
        InventPosting::prodAccount2AccountTypeDelegate(_account, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }

        throw error(strFmt("@SYS12580", _account));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAccount2AccountTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for conversion of <c>InventAccountTypePurch</c> to <c>InventAccountType</c>.
    /// </summary>
    /// <param name = "_inventAccountType">The <c>InventAccountTypeInvent</c> to convert.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    static delegate void purchAccount2AccountTypeDelegate(InventAccountTypePurch _account, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAccount2AccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventory account type for a specified purchase inventory account type.
    /// </summary>
    /// <param name="_account">
    /// The purchase inventory account type.
    /// </param>
    /// <returns>
    /// The <c>InventAccountType</c> enumeration value that is related to the <c>InventAccountTypePurch</c>
    /// type.
    /// </returns>
    static public InventAccountType purchAccount2AccountType(InventAccountTypePurch _account)
    {
        switch (_account)
        {
            case InventAccountTypePurch::PackingSlip:
                return InventAccountType::PurchPackingSlip;
            case InventAccountTypePurch::PackingSlipOffsetAccount:
                return InventAccountType::PurchPackingSlipOffsetAccount;
            case InventAccountTypePurch::Receipt:
                return InventAccountType::PurchReceipt;
            case InventAccountTypePurch::ReceiptFixedAsset:
                return InventAccountType::PurchReceiptFixedAsset;
            case InventAccountTypePurch::Consumption:
                return InventAccountType::PurchConsump;
            case InventAccountTypePurch::Disc :
                return InventAccountType::PurchDisc;
            case InventAccountTypePurch::StdProfit:
                return InventAccountType::PurchStdProfit;
            case InventAccountTypePurch::StdLoss:
                return InventAccountType::PurchStdLoss;
            case InventAccountTypePurch::StdOffsetAccount:
                return InventAccountType::PurchStdOffsetAccount;
            case InventAccountTypePurch::Charge:
                return InventAccountType::PurchCharge;
            case InventAccountTypePurch::StockVariation:
                return InventAccountType::PurchStockVariation;
            case InventAccountTypePurch::PackingSlipPurchaseOffsetAccount:
                return InventAccountType::PurchPackingSlipPurchaseOffsetAccount;
            case InventAccountTypePurch::PackingSlipTax:
                return InventAccountType::PurchPackingSlipTax;
            case InventAccountTypePurch::Expense:
                return InventAccountType::PurchExpense;
            case InventAccountTypePurch::PurchAdvance:
                return InventAccountType::PurchAdvance;
        }

        var eventHandlerResult = EventHandlerResult::newSingleResponse();
        InventPosting::purchAccount2AccountTypeDelegate(_account, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }
        
        throw error(strFmt("@SYS12580", _account));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAccount2AccountTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for conversion of <c>InventAccountTypeSales</c> to <c>InventAccountType</c>.
    /// </summary>
    /// <param name = "_account">The <c>InventAccountTypeSales</c> to convert.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.</param>
    static delegate void salesAccount2AccountTypeDelegate(InventAccountTypeSales _account, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAccount2AccountType</Name>
				<Source><![CDATA[
    static public InventAccountType salesAccount2AccountType(InventAccountTypeSales _account)
    {
        switch (_account)
        {
            case InventAccountTypeSales::PackingSlip:
                return InventAccountType::SalesPackingSlip;
            case InventAccountTypeSales::PackingSlipOffsetAccount:
                return InventAccountType::SalesPackingSlipOffsetAccount;
            case InventAccountTypeSales::Issue:
                return InventAccountType::SalesIssue;
            case InventAccountTypeSales::Consumption:
                return InventAccountType::SalesConsump;
            case InventAccountTypeSales::Revenue:
                return InventAccountType::SalesRevenue;
            case InventAccountTypeSales::PckSlipRevenue:
                return InventAccountType::SalesPckSlipRevenue;
            case InventAccountTypeSales::PckSlipRevenueOffsetAccount:
                return InventAccountType::SalesPckSlipRevenueOffsetAccount;
            case InventAccountTypeSales::Disc:
                return InventAccountType::SalesDisc;
            case InventAccountTypeSales::Commission:
                return InventAccountType::SalesCommission;
            case InventAccountTypeSales::CommissionOffsetAccount:
                return InventAccountType::SalesCommissionOffsetAccount;
            case InventAccountTypeSales::Cancel:
                return InventAccountType::SalesCancel;
            case InventAccountTypeSales::Return:
                return InventAccountType::SalesReturn;
            case InventAccountTypeSales::PackingSlipTax:
                return InventAccountType::SalesPackingSlipTax;
            case InventAccountTypeSales::SalesAdvance:
                return InventAccountType::SalesAdvance;

            // <GEEU>
            case InventAccountTypeSales::GoodsInRoute_RU:
                return InventAccountType::SalesGoodsInRoute_RU;
            case InventAccountTypeSales::GoodsInRouteOffsetAccount_RU:
                return InventAccountType::SalesGoodsInRouteOffsetAccount_RU;
            // </GEEU>
            case InventAccountTypeSales::CreditNote_IT:
                return InventAccountType::SalesCreditNote_IT;
            case InventAccountTypeSales::SalesForFree_IT:
                return InventAccountType::SalesForFree_IT;
        }

        var eventHandlerResult = EventHandlerResult::newSingleResponse();
        InventPosting::salesAccount2AccountTypeDelegate(_account, eventHandlerResult);

        if (eventHandlerResult.hasResult())
        {
            return eventHandlerResult.result();
        }
        
        throw error(strFmt("@SYS12580", _account));
    }

]]></Source>
			</Method>
			<Method>
				<Name>siteCodeUsed_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified site code is used in any record.
    /// </summary>
    /// <param name="_siteCode">
    /// Site code.
    /// </param>
    /// <returns>
    /// Returns true if any record uses the specified site code.
    /// </returns>
    public static boolean siteCodeUsed_CN(InventSiteCode_CN _siteCode)
    {
        InventPosting   inventPosting;

        select firstonly RecId
            from inventPosting
            where inventPosting.SiteCode_CN == _siteCode;

        return inventPosting.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>siteRelationEnabled_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks state of specified site relation.
    /// </summary>
    /// <param name="_siteCode">
    /// The type of site relation (site code).
    /// </param>
    /// <returns>
    /// If enabled, return true.
    /// </returns>
    public static boolean siteRelationEnabled_CN(InventSiteCode_CN _siteCode)
    {
        return InventPostingParameters::find().siteRelationEnabled_CN(_siteCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>siteRelationFieldLabel_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label of specified site relation.
    /// </summary>
    /// <param name="_siteCode">
    /// Site code.
    /// </param>
    /// <returns>
    /// The label of specified site code.
    /// </returns>
    static LabelType siteRelationFieldLabel_CN(InventSiteCode_CN _siteCode)
    {
        switch (_siteCode)
        {
            case InventSiteCode_CN::Table   : return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, SiteTable_CN)).label();
            case InventSiteCode_CN::All     : return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, SiteAll_CN)).label();
        }
        return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, SiteAll_CN)).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodeRelationEnabled</Name>
				<Source><![CDATA[
    static private boolean taxCodeRelationEnabled()
    {
        return InventPostingParameters::find().taxCodeRelationEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodeRelationFieldLabel</Name>
				<Source><![CDATA[
    static private LabelType taxCodeRelationFieldLabel()
    {
        return new DictField(tableNum(InventPostingParameters), fieldNum(InventPostingParameters, TaxCode)).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferOrder2AccountType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventory account type for the specified TransferOrder inventory account type.
    /// </summary>
    /// <param name="accounts">
    /// The Transfer type account.
    /// </param>
    /// <returns>
    /// The TransferOrder inventory account type.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Its throws error if the Enumerated text accounts does not exist.
    /// </exception>
    public static InventAccountType transferOrder2AccountType_IN(InventAccountTypeTransfer_IN accounts)
    {
        switch (accounts)
        {
            case InventAccountTypeTransfer_IN::GoodsInTransit:
                return InventAccountType::TransferGoodsTransit_IN;

            case InventAccountTypeTransfer_IN::Issue:
                return InventAccountType::TransferIssue_IN;

            case InventAccountTypeTransfer_IN::Receipt :
                return InventAccountType::TransferReceipt_IN;

            case InventAccountTypeTransfer_IN::Scrap:
                return InventAccountType::TransferScrap_IN;

            case InventAccountTypeTransfer_IN::UnrealizedLoss:
                return InventAccountType::TransferLoss_IN;

            case InventAccountTypeTransfer_IN::UnrealizedProfit:
                return InventAccountType::TransferProfit_IN;

            case InventAccountTypeTransfer_IN::TransferInterim:
                return InventAccountType::TransferInterim_IN;
        }
        throw error(strFmt("@SYS12580", accounts));
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceAccount2AccountTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delegate for retrieving the inventory account type related to a variance account type.
    /// </summary>
    /// <param name="_accountType"> The variance account type. </param>
    /// <param name = "_result">An <c>EventHandlerResult</c> object where a value of the enum <c>InventAccountType</c> can be returned.</param>
    static delegate void varianceAccount2AccountTypeDelegate(
        InventAccountTypeStdCostVariance _accountType,
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceAccount2AccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory account type related to a variance account type.
    /// </summary>
    /// <param name="_accountType">
    ///    The variance account type.
    /// </param>
    /// <returns>
    ///    An inventory account type.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The argument cannot be converted to an inventory account type.
    /// </exception>
    public static InventAccountType varianceAccount2AccountType(InventAccountTypeStdCostVariance _accountType)
    {
        switch (_accountType)
        {
            case InventAccountTypeStdCostVariance::InventCostChangeVariance:
                return InventAccountType::InventStdCostChangeVariance;
            case InventAccountTypeStdCostVariance::InventCostRevaluation:
                return InventAccountType::InventStdCostRevaluation;
            case InventAccountTypeStdCostVariance::ProdProductionPriceVariance:
                return InventAccountType::ProdStdCostProductionVariance;
            case InventAccountTypeStdCostVariance::ProdQuantityVariance:
                return InventAccountType::ProdStdCostQuantityVariance;
            case InventAccountTypeStdCostVariance::ProdSubstitutionVariance:
                return InventAccountType::ProdStdCostSubstitutionVariance;
            case InventAccountTypeStdCostVariance::ProdLotSizeVariance:
                return InventAccountType::ProdStdCostLotSizeVariance;
            case InventAccountTypeStdCostVariance::PurchPurchasePriceVariance:
                return InventAccountType::PurchStdCostPurchasePriceVariance;
            case InventAccountTypeStdCostVariance::InventRoundingVariance:
                return InventAccountType::InventStdCostRoundingVariance;
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                InventPosting::varianceAccount2AccountTypeDelegate(_accountType, result);
                
                if (result.hasResult())
                {
                    return result.result();
                }
                
                throw error(strFmt("@SYS12580", _accountType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the <c>LedgerPostingType</c> is considered to be associated with a WIP <c>MainAccount</c>.
    /// </summary>
    /// <param name = "_postingType">Main account posting type.</param>
    /// <returns>True if the posting type is associated with a WIP main account; false otherwise.</returns>
    public static boolean isWIPPostingType(LedgerPostingType _postingType)
    {
        boolean ret = false;
        switch (_postingType)
        {
            case LedgerPostingType::ProdReceiptOffsetAccount:
            case LedgerPostingType::ProdPicklistOffsetAccount:
            case LedgerPostingType::ProdWrkCtrIssueOffsetAccount:
            case LedgerPostingType::ProdIssueOffsetAccount:
            case LedgerPostingType::ProdReportFinishedOffsetAccount:
            case LedgerPostingType::ProdWIPValuation:
            case LedgerPostingType::IndirectAbsorptionOffset:
            case LedgerPostingType::IndirectEstimatedAbsorptionOffset:
                ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the <c>LedgerPostingType</c> is considered to be associated with an inventory <c>MainAccount</c>.
    /// </summary>
    /// <param name = "_postingType">Main account posting type.</param>
    /// <returns>True if the posting type is associated with an inventory main account; false otherwise.</returns>
    public static boolean isInventoryPostingType(LedgerPostingType _postingType)
    {
        boolean ret = false;
        switch (_postingType)
        {
            case LedgerPostingType::InventIssue:
            case LedgerPostingType::InventReceipt:
            case LedgerPostingType::ProdReceipt:
            case LedgerPostingType::ProdPicklist:
            case LedgerPostingType::ProdReportFinished:
            case LedgerPostingType::ProdIssue:
            case LedgerPostingType::PurchReceipt:
            case LedgerPostingType::PurchPckSlp:
            case LedgerPostingType::SalesIssue:
            case LedgerPostingType::SalesPackingSlip:
                ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFromCache</Name>
				<Source><![CDATA[
    private static container getDimensionFromCache(AccountItemLedgerDimensionCacheParameters _cacheParameters)
    {
        var gettingFromCacheResult = EventHandlerResult::newSingleResponse();

        InventPosting::getAccountItemLedgerDimensionFromParametersDelegate(_cacheParameters, gettingFromCacheResult);

        if (gettingFromCacheResult.hasResult())
        {
            _cacheParameters = gettingFromCacheResult.result() as AccountItemLedgerDimensionCacheParameters;
        }

        return InventPostingSetupCache::getAccountItemLedgerDimensionFromParameters(_cacheParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionIntoCache</Name>
				<Source><![CDATA[
    private static void insertDimensionIntoCache(AccountItemLedgerDimensionCacheParameters _cacheParameters)
    {
        var insertingIntoCacheResult = EventHandlerResult::newSingleResponse();

        InventPosting::insertAccountItemLedgerDimensionFromParametersDelegate(_cacheParameters, insertingIntoCacheResult);

        if (insertingIntoCacheResult.hasResult())
        {
            _cacheParameters = insertingIntoCacheResult.result() as AccountItemLedgerDimensionCacheParameters;
        }

        InventPostingSetupCache::insertAccountItemLedgerDimensionFromParameters(_cacheParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the hashed key for the fields that must define the uniqueness of an inventory posting record in addition to already used ones.
    /// </summary>
    /// <returns>
    /// A string hash key.
    /// </returns>
    private str hashKey()
    {
        str hashableKey = this.hashableKey();
        str hashString;

        if (hashableKey != '')
        {
            using (System.Security.Cryptography.SHA256 hasher = System.Security.Cryptography.SHA256::Create())
            {
                System.Byte[] hashKeyBytes = System.Text.Encoding::Default.GetBytes(hashableKey);
                System.Byte[] hash = hasher.ComputeHash(hashKeyBytes);
                hashString = System.Convert::ToBase64String(hash);
            }
        }

        return hashString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashableKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the string to calculate the hash key from.
    /// </summary>
    /// <returns>The string to calculate the hash key from.</returns>
    private str hashableKey()
    {
        Set hashFields = this.fieldIdsToHash();

        if (!hashFields.elements())
        {
            return '';
        }

        List hashableKeys = new List(Types::String);

        SetEnumerator hashFieldsEnumerator = hashFields.getEnumerator();

        while (hashFieldsEnumerator.moveNext())
        {
            FieldId fieldId = hashFieldsEnumerator.current();

            if (this.(fieldId))
            {
                str fieldValue = any2Str(this.(fieldId));
                str formattedFieldValue = strLwr(strRTrim(fieldValue));

                if (formattedFieldValue)
                {
                    hashableKeys.addEnd(int2Str(fieldId) + ':' + formattedFieldValue + '~');
                }
            }
        }

        return hashableKeys.toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdsToHash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the set of field Ids that must define the uniqueness of an inventory posting record in addition to already used ones.
    /// </summary>
    /// <returns>The set of field Ids.</returns>
    protected Set fieldIdsToHash()
    {
        return new Set(Types::Integer);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123824</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>InventPosting</FormRef>
	<Label>@SYS18007</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>InventAccountType</TitleField1>
	<TitleField2>ItemRelation</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ItemIdx</ReplacementKey>
	<TableContents>BaseDefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteCode_CN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteRelation_CN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileTypeAll_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteCode_CN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteRelation_CN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SHA256Hash</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountSelection</Name>
			<Label>@SYS2355</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustVendCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostGroup</Name>
			<Label>@SYS8081</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventAccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile_RU</Name>
			<Label>@GLS113769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileTypeAll_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS3881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Site_CN</Name>
			<Label>@SYS103211</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SiteCode_CN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteRelation_CN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCategoryRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<Label>@SYS117633</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustVendCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Sys12243</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCustVendRel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileTypeAll_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileTypeAll_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventPostingItemCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventItemRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SiteCode_CN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteCodeType_CN</ExtendedDataType>
			<EnumType>InventSiteCode_CN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SiteRelation_CN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteRelation_CN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SHA256Hash</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@SCM:InventPosting_SHA256Hash_HelpText</HelpText>
			<Label>@SCM:InventPosting_SHA256Hash_Label</Label>
			<Visible>No</Visible>
			<StringSize>64</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventAccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventProfileTypeAll_RU</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventProfileType_RU</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventProfileId_RU</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SiteCode_CN</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SiteRelation_CN</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SHA256Hash</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventAccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventProfileTypeAll_RU</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BOMCostGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123825</EntityRelationshipRole>
			<RelatedTable>BOMCostGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostRelation</Name>
					<Field>CostRelation</Field>
					<RelatedField>CostGroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CostCode</Name>
					<Field>CostCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupCancel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupCancel</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesCancel</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupCommission</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupCommission</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesCommission</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupCommissionOffsetAC</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupCommissionOffsetAC</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesCommissionOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupConsumption</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupConsumption</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesConsump</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesDisc</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupIssue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupIssue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesIssue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupPackingSlipTax</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupPackingSlipTax</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPackingSlipTax</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupPckSlip</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupPckSlip</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPackingSlip</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupPckSlipOffset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupPckSlipOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPackingSlipOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupPckSlipRevenue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupPckSlipRevenue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPckSlipRevenue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupPckSlipRevenueOffset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupPckSlipRevenueOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPckSlipRevenueOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupReturn</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupReturn</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesReturn</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupRevenue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupRevenue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesRevenue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableCancel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableCancel</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesCancel</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableCommission</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableCommission</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesCommission</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableCommissionOffsetAC</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableCommissionOffsetAC</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesCommissionOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableConsumption</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableConsumption</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesConsump</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesDisc</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableIssue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableIssue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesIssue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTablePackingSlipTax</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTablePackingSlipTax</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPackingSlipTax</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTablePckSlip</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTablePckSlip</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPackingSlip</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTablePckSlipOffset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTablePckSlipOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPackingSlipOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTablePckSlipRevenue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTablePckSlipRevenue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPckSlipRevenue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTablePckSlipRevenueOffset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTablePckSlipRevenueOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesPckSlipRevenueOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableReturn</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableReturn</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesReturn</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableRevenue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableRevenue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesRevenue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS50039</EntityRelationshipRole>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryRelation</Name>
					<Field>CategoryRelation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123827</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>InventPostingItemCode::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventProfile_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProfileId_RU</Name>
					<SourceEDT>InventProfileId_RU</SourceEDT>
					<Field>InventProfileId_RU</Field>
					<RelatedField>InventProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<EntityRelationshipRole>@SYS103211</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventSite</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventSite_InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SiteCode_CN</Name>
					<Field>SiteCode_CN</Field>
					<ValueStr>InventSiteCode_CN::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SiteRelation_CN</Name>
					<SourceEDT>InventSiteRelation_CN</SourceEDT>
					<Field>SiteRelation_CN</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123828</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>InventPostingItemCode::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchGroupPackingSlipTax</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchGroupPackingSlipTax</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchPackingSlipTax</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTablePackingSlipTax</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTablePackingSlipTax</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchPackingSlipTax</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupCharge</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupCharge</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchCharge</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupConsump</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupConsump</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchConsump</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchDisc</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupExpense</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupExpense</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchExpense</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupPackingSlipPurchaseOffsetAcc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupPackingSlipPurchaseOffsetAcc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchPackingSlipPurchaseOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupPckSlip</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupPckSlip</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchPackingSlip</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupPckSlipOffset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupPckSlipOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchPackingSlipOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupPrepayment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupPrepayment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchAdvance</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupPurchReceiptFixedAsset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupPurchReceiptFixedAsset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchReceiptFixedAsset</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupReceipt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupReceipt</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchReceipt</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupStdLoss</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupStdLoss</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchStdLoss</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupStdOffssetAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupStdOffssetAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchStdOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupStdProfit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupStdProfit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchStdProfit</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendGroupStockVariation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123829</EntityRelationshipRole>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroupStockVariation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchStockVariation</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTableCharge</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTableCharge</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchCharge</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTableConsump</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTableConsump</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchConsump</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTableDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTableDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchDisc</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTableExpense</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTableExpense</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchExpense</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTablePackingSlipPurchaseOffsetAcc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTablePackingSlipPurchaseOffsetAcc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchPackingSlipPurchaseOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTablePckSlip</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTablePckSlip</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchPackingSlip</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTablePckSlipOffset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTablePckSlipOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchPackingSlipOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTablePrepayment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTablePrepayment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchAdvance</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTablePurchReceiptFixedAsset</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTablePurchReceiptFixedAsset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchReceiptFixedAsset</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTableReceipt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTableReceipt</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchReceipt</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTableStdAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTableStdAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchStdOffsetAccount</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTableStdLoss</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTableStdLoss</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchStdLoss</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTableStdProfit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTableStdProfit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchStdProfit</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTableStockVariation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123524</EntityRelationshipRole>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTableStockVariation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::PurchStockVariation</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableSalesForFree_IT</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableSalesForFree</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesForFree_IT</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTableCreditNote_IT</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTableCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesCreditNote_IT</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupSalesForFree_IT</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupSalesForFree</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesForFree_IT</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroupCreditNote_IT</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123826</EntityRelationshipRole>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroupCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventAccountType</Name>
					<Field>InventAccountType</Field>
					<ValueStr>InventAccountType::SalesCreditNote_IT</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>