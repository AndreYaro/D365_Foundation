<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankBridgingTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankBridgingTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void update()
    {
        if (BankAccountTable::isAdvancedBankReconciliationEnabled(this.AccountId) && !this.IsCheck)
        {
            this.processBankDocument();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankBridgingTrans</Name>
				<Source><![CDATA[
    internal static BankBridgingTrans createBankBridgingTrans(
        BankAccountID _bankAccount,
        LedgerJournalTrans _ledgerJournalTrans,
        RecId _ledgerEntryRecId,
        RecId _bankChequeRecId = 0)
    {
        BankBridgingTrans bankBridgingTrans;

        bankBridgingTrans.AccountId = _bankAccount;
        bankBridgingTrans.FloatAccountLedgerDimension = _ledgerJournalTrans.OffsetLedgerDimension;
        bankBridgingTrans.BridgedLedgerJournalTransRecId = _ledgerJournalTrans.RecId;
        bankBridgingTrans.BridgedVoucher = _ledgerJournalTrans.Voucher;
        bankBridgingTrans.LedgerEntryRecId = _ledgerEntryRecId;
        bankBridgingTrans.AccountType = BankAccountBridgingPostingHelper::getModuleCustVendFromAccountType(_ledgerJournalTrans.AccountType, _ledgerJournalTrans.ledgerJournalTable().JournalType);
        if (_bankChequeRecId)
        {
            bankBridgingTrans.IsCheck = NoYes::Yes;
            bankBridgingTrans.BankChequeTableRecId = _bankChequeRecId;
        }

        bankBridgingTrans.insert();

        return bankBridgingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerEntry</Name>
				<Source><![CDATA[
    internal static BankBridgingTrans findByLedgerEntry(RecId _ledgerEntryRecId, boolean _forUpdate = false)
    {
        BankBridgingTrans bankBridgingTrans;
        bankBridgingTrans.selectForUpdate(_forUpdate);

        select firstonly bankBridgingTrans
            where bankBridgingTrans.LedgerEntryRecId == _ledgerEntryRecId;

        return bankBridgingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByClearedLedgerJournalTransRecId</Name>
				<Source><![CDATA[
    internal static BankBridgingTrans findByClearedLedgerJournalTransRecId(RecId _ledgerJournalTransRecId, boolean _forUpdate = false)
    {
        BankBridgingTrans bankBridgingTrans;
        bankBridgingTrans.selectForUpdate(_forUpdate);

        select firstonly bankBridgingTrans
            where bankBridgingTrans.ClearedLedgerJournalTransRecId == _ledgerJournalTransRecId;

        return bankBridgingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBridgedLedgerJournalTransRecId</Name>
				<Source><![CDATA[
    internal static BankBridgingTrans findByBridgedLedgerJournalTransRecId(RecId _ledgerJournalTransRecId, boolean _forUpdate = false)
    {
        BankBridgingTrans bankBridgingTrans;
        bankBridgingTrans.selectForUpdate(_forUpdate);

        select firstonly bankBridgingTrans
            where bankBridgingTrans.BridgedLedgerJournalTransRecId == _ledgerJournalTransRecId;

        return bankBridgingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBankChequeTableRecId</Name>
				<Source><![CDATA[
    internal static BankBridgingTrans findByBankChequeTableRecId(RecId _bankChequeTableRecId, boolean _forUpdate = false)
    {
        BankBridgingTrans bankBridgingTrans;
        bankBridgingTrans.selectForUpdate(_forUpdate);

        select firstonly bankBridgingTrans
            where bankBridgingTrans.BankChequeTableRecId == _bankChequeTableRecId;

        return bankBridgingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBridgingStatus</Name>
				<Source><![CDATA[
    internal void updateBridgingStatus(BankBridgingStatus _bridgingStatus)
    {
        if (_bridgingStatus == this.BridgingStatus)
        {
            return;
        }

        boolean canTransit = false;
        switch (_bridgingStatus)
        {
            case BankBridgingStatus::Bridged:
                if (this.BridgingStatus == BankBridgingStatus::None)
                {
                    canTransit = true;
                }
                break;
            case BankBridgingStatus::Cleared:
                if (this.BridgingStatus == BankBridgingStatus::Bridged)
                {
                    canTransit = true;
                }
                break;
            case BankBridgingStatus::Canceled:
                if (this.BridgingStatus == BankBridgingStatus::Bridged || this.BridgingStatus == BankBridgingStatus::Cleared)
                {
                    canTransit = true;
                }
                break;
            default:
                break;
        }

        if (canTransit)
        {
            ttsbegin;
            this.BridgingStatus = _bridgingStatus;
            this.update();
            ttscommit;
        }
        else
        {
            throw error(strFmt("@CashManagement:BridgingStatusTransitionError", this.BridgingStatus, _bridgingStatus, "@CashManagement:BankBridgingTrans"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankDocument</Name>
				<Source><![CDATA[
    private void processBankDocument()
    {
        BankBridgedAutoClearInstrumentationLogger logger = BankBridgedAutoClearInstrumentationLogger::createLogger(tableStr(BankBridgingTrans));
        LedgerJournalTrans bridgedLedgerJournalTrans = LedgerJournalTrans::findRecId(this.BridgedLedgerJournalTransRecId, false);
        
        if (!bridgedLedgerJournalTrans)
        {
            using (SysInstrumentationActivityContext activityContext = logger.initActivities().addBankBridgingTransBankDocument(tableMethodStr(BankBridgingTrans, processBankDocument), this.RecId))
            {
                logger.logError(strFmt('Fail to process bank document for bank bridging trans due to missing LedgerJournalTrans, Bank account %1, Bridged voucher %2',
                    this.AccountId,
                    this.BridgedVoucher));
                return;
            }
        }
        
        if (this.orig().BridgingStatus == BankBridgingStatus::None
            && this.BridgingStatus == BankBridgingStatus::Bridged)
        {
            BankDocumentProcessor::submitBankDocumentTable(bridgedLedgerJournalTrans);
        }

        if ((this.orig().BridgingStatus == BankBridgingStatus::Bridged || this.orig().BridgingStatus == BankBridgingStatus::Cleared)
            && this.BridgingStatus == BankBridgingStatus::Canceled)
        {
            BankDocumentProcessor::submitBankDocumentTable(bridgedLedgerJournalTrans, BankDocumentStatusChangeType::Clear);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<Label>@CashManagement:BankBridgingTrans</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>AccountId</TitleField1>
	<TitleField2>BridgingStatus</TitleField2>
	<Visibility>Internal</Visibility>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BridgedLedgerJournalTransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BridgingStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankBridgingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FloatAccountLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BridgedVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ClearedLedgerJournalTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerEntryRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClearedVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ModuleCustVend</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCheck</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankChequeTableRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerEntryIndex</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerEntryRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ClearedLedgerJournalTransIndex</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ClearedLedgerJournalTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BridgedLedgerJournalTransRecId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BridgedLedgerJournalTransRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BridgingStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankChequeTableRecId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankChequeTableRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BankDocumentTableMap</MappingTable>
			<Connections />
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BridgedLedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BridgedLedgerJournalTransRecId</Name>
					<Field>BridgedLedgerJournalTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ClearedLedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClearedLedgerJournalTransRecId</Name>
					<Field>ClearedLedgerJournalTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerEntry</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LedgerEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerEntryRecId</Name>
					<Field>LedgerEntryRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankDocumentTableView</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>BankDocumentTableView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceRelationType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>SourceRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankChequeTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankChequeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankChequeTableRecId</Name>
					<Field>BankChequeTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankAccounts</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<Field>AccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>