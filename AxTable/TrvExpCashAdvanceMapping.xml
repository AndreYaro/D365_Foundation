<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpCashAdvanceMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvExpCashAdvanceMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashAdvanceBalanceMST</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public AmountMST cashAdvanceBalanceMST()
    {
        // Get the updated balance for a specific cash advance.
        AmountMST remainingBalanceMST = TrvCashAdvance::findRecId(this.CashAdvanceRecId).amountMSTAvailableToAllocate();
        return remainingBalanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCashAdvanceUsedForExpenseMST</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public AmountMST totalCashAdvanceUsedForExpenseMST()
    {
        TrvExpCashAdvanceMapping trvExpCashAdvanceMapping;

        // Get the total cash advance amount used for a single expense line.
        select sum(AmountMST) from trvExpCashAdvanceMapping
            where trvExpCashAdvanceMapping.ExpLineRecId == this.ExpLineRecId;
        
        return trvExpCashAdvanceMapping.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TrvExpCashAdvanceMapping find(RefRecId _expLineRecId, RefRecId _cashAdvanceRecId, boolean _forUpdate=false)
    {
        TrvExpCashAdvanceMapping trvExpCashAdvanceMapping = null;
        
        if (_expLineRecId && _cashAdvanceRecId)
        {
            trvExpCashAdvanceMapping.selectForUpdate(_forUpdate);
            select firstonly trvExpCashAdvanceMapping 
                where trvExpCashAdvanceMapping.ExpLineRecId == _expLineRecId
                && trvExpCashAdvanceMapping.CashAdvanceRecId == _cashAdvanceRecId;
        }

        return trvExpCashAdvanceMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    public static TrvExpCashAdvanceMapping findByRecId(RefRecId _recId, boolean _forUpdate=false)
    {
        TrvExpCashAdvanceMapping trvExpCashAdvanceMapping = null;
        
        if (_recId)
        {
            trvExpCashAdvanceMapping.selectForUpdate(_forUpdate);
            select firstonly trvExpCashAdvanceMapping where trvExpCashAdvanceMapping.RecId == _recId;
        }

        return trvExpCashAdvanceMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if record can be deleted.
    /// </summary>
    /// <returns>true, if record can be deletd; otherwise, false.</returns>
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        ret = ret && TrvExpCashAdvanceMappingHelper::canRemoveMapping(this.ExpLineRecId);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = true;

        switch (_fieldIdToCheck)
        {
            case fieldNum(TrvExpCashAdvanceMapping, AmountMST): 
                if (this.AmountMST < 0)
                {
                    ret = checkFailed(strFmt("@GLS115779"));
                }
                break;
        }

        if (ret)
        {
            ret = super(_fieldIdToCheck);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the expense line record has a valid mapping.
    /// </summary>
    /// <param name = "_trvExpLineRecId"> Record identifier for expense line.</param>
    /// <returns>True, if expense record identifier exists; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean existsExpenseLine(RefRecId _trvExpLineRecId)
    {
        TrvExpCashAdvanceMapping mapping;
        
        select RecId from mapping 
                    where mapping.ExpLineRecId == _trvExpLineRecId
                    &&    mapping.AmountMST > 0;

        boolean ret = false;

        if (mapping.RecId)
        {
            ret = true;
        }

        return ret;
                
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@Expense:ExpenseCashAdvanceMappingTable</DeveloperDocumentation>
	<Label>@Expense:ExpenseCashAdvanceMappingLabel</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ExpLineRecId</TitleField1>
	<TitleField2>CashAdvanceRecId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Expense</Modules>
	<PrimaryIndex>ExpLineCashAdvRecIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExpLineRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CashAdvanceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExpLineCashAdvRecIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ExpLineRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CashAdvanceRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExpLineRecId</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TrvExpTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExpLineRecId</Name>
					<Field>ExpLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashAdvanceRecId</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TrvCashAdvance</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashAdvanceRecId</Name>
					<Field>CashAdvanceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>