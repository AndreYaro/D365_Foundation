<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProposalJour extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns invoice proposal amount in company currency.
    /// </summary>
    /// <param name="_amountCur">
    /// Amount to be converted.
    /// </param>
    /// <returns>
    /// invoice proposal amount in company currency.
    /// </returns>
    public AmountMST amountMST(AmountCur _amountCur)
    {
        return CurrencyExchangeHelper::mstAmount(_amountCur, this.CurrencyId, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecondary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveProposale</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Approves an invoice proposal by updating its <c>LinePropertyCode</c> field to approved.
    /// </summary>
    public void approveProposale()
    {
        ttsbegin;

        this.LineProperty = ProjLinePropertyCode::Approved;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the date when the cash discount is to be applied and sets the <c>CashDiscDate</c> using this value.
    /// </summary>
    /// <remarks>
    ///    The cash discount date is calculated based on the cash discount code, invoice date, or invoice proposal creation date specified for the invoice proposal.
    /// </remarks>
    public void calcCashDiscDate()
    {
        this.CustVendInvoiceJour::calcCashDiscDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the due date for payment of the invoice proposal. The <c>DueDate</c> field is set with this value.
    /// </summary>
    /// <remarks>
    ///    The <c>CustVendInvoiceJour.CalcDue</c> method is used to determine a due date based on the payment term, invoice date, or creation date for the invoice proposal document.
    /// </remarks>
    public void calcDue()
    {
        this.CustVendInvoiceJour::calcDue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateLimit_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the <c>PaymDueDateLimit_ES</c> record that fits the criteria.
    /// </summary>
    /// <param name="_paymTerm">
    /// The <c>PaymTerm</c> record containing the selection criteria.
    /// </param>
    /// <param name="_transDate">
    /// The date to base the limit off of.
    /// </param>
    /// <returns>
    /// null.
    /// </returns>
    /// <remarks>
    /// The method is required because it is called by a process that handles multiple sources but this table doe snot support this functionality.
    /// </remarks>
    public PaymDueDateLimit_ES calcDueDateLimit_ES(PaymTerm _paymTerm, TransDate _transDate)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelApprovel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels an approved invoice proposal and set its status to an open status.
    /// </summary>
    public void cancelApprovel()
    {
        ttsbegin;

        this.LineProperty = ProjLinePropertyCode::Open;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canManageInvoiceFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whether invoice format can be modified.
    /// </summary>
    /// <returns>
    /// A true/false value indicating whether invoice format can be modified.
    /// </returns>
    public boolean canManageInvoiceFormat()
    {
        if (this.LineProperty == ProjLinePropertyCode::Invoiced ||
            this.LineProperty == ProjLinePropertyCode::Canceled)
        {
            return false;
        }

        if (this.isCustRetentionRelease())
        {
            return false;
        }

        if (this.isCustAdvance())
        {
            return false;
        }

        if (BrazilParameters::isEnabled())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whehter invoice proposal can be submitted to workflow.
    /// </summary>
    /// <param name="_workflowType">
    /// Type of workflow.
    /// </param>
    /// <returns>
    /// a true/false value indicating whehter invoice proposal can be submitted to workflow.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        boolean ret = false;

        if (ProjParameters::find().EnableInvoiceProposalWorkflow)
        {
            ret = (this.LineProperty == ProjLinePropertyCode::Open);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymentSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies payment schedule to a record in <c>ProjInvoiceJour</c> table.
    /// </summary>
    /// <param name="projInvoiceJour">
    /// A record in <c>ProjInvoiceJour</c> table.
    /// </param>
    public void copyPaymentSched(ProjInvoiceJour projInvoiceJour)
    {
        CustPaymSched       custPaymSched;
        CustVendPaymSched   custVendPaymSched;

        ttsbegin;

        select custPaymSched
            where custPaymSched.ExtTableId       == this.TableId &&
                  custPaymSched.ExtRecId         == this.RecId;

        if (custPaymSched.RecId)
        {
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Project, projInvoiceJour);
            custVendPaymSched.copyCustVendPaymSched(custPaymSched);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total amount to be received for the invoice proposal from a customer or vendor. It creates a payment schedule based on the amount and the type of payment schedule set for the invoice
    ///    proposal.
    /// </summary>
    public void createPaymentSchedule()
    {
        CustVendPaymSched   custVendPaymSched;
        ProjProposalTotals  projProposalTotals;

        projProposalTotals = new ProjProposalTotals(this);

        projProposalTotals.calc();
        custVendPaymSched = CustVendPaymSched::construct(SysModule::Project,this);

        custVendPaymSched.setProjProposalTotals(projProposalTotals);
        custVendPaymSched.createPaymSched(PaymSched::find(this.PaymentSched));
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether this line represents an item credit note.
    /// </summary>
    /// <returns>
    /// True if there is a sales line record representing an inventory
    /// return corresponding to this transaction; false otherwise.
    /// </returns>
    public boolean creditNote_CZ()
    {
        ProjProposalItem        projProposalItem;
        SalesLine               salesLine;
        ProjProposalItemDetail  projProposalItemDetail;
        ProjItemTransSale       projItemTransSale;

        select firstonly RecId from projProposalItem
            where projProposalItem.ProposalId == this.ProposalId
        exists join salesLine
            where salesLine.InventTransId == projProposalItem.InventTransId &&
                  salesLine.InventTransIdReturn;

        if (! projProposalItem.RecId)
        {
            select firstOnly RecId from projProposalItem
                where projProposalItem.ProposalId == this.ProposalId
            exists join projProposalItemDetail
                where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
            exists join projItemTransSale
                where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
                    && projItemTransSale.TransStatus == ProjTransStatus::CreditnoteProposal;
        }

        return projProposalItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns delivery address associated with the invoice proposal.
    /// </summary>
    /// <returns>
    /// Delivery address associated with the invoice proposal.
    /// </returns>
    display LogisticsAddressing deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayContractName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of the contract associated which the invoice proposal.
    /// </summary>
    /// <returns>
    /// name of the contract associated which the invoice proposal.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display CompanyName displayContractName()
    {
        return ProjInvoiceTable::find(this.ProjInvoiceProjId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the tax amount for the <c>ProjProposalJour</c> record.
    /// </summary>
    /// <returns>
    /// The tax amount.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display AmountCur displayInvoiceAmount()
    {
        ProjProposalTotals  projProposalTotals = new ProjProposalTotals(this);

        projProposalTotals.calc();

        return this.InvoiceAmount - conPeek(projProposalTotals.displayFields(), ProjProposalTotals::posSumTax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the tax amount for the <c>ProjProposalJour</c> record.
    /// </summary>
    /// <returns>
    /// The tax amount.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountCur displayTaxAmount()
    {
        ProjProposalTotals  projProposalTotals = new ProjProposalTotals(this);

        projProposalTotals.calc();

        return conPeek(projProposalTotals.displayFields(), ProjProposalTotals::posSumTax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispVATRegistrationNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// display method for customer VAT registration number.
    /// </summary>
    /// <returns>
    /// display customer VAT registration number.
    /// </returns>
    public display TaxRegistrationNumber dispVATRegistrationNum()
    {
        CompanyInfoExtension_CN companyInfoExtensionCN;

        companyInfoExtensionCN = CompanyInfoExtension_CN::findByCompany(CompanyInfo::current());

        if (companyInfoExtensionCN.TaxRegistrationType)
        {
            return TaxRegistration::getTaxRegistrationNumberFromCust(this.InvoiceAccount, this.InvoiceDate, companyInfoExtensionCN.TaxRegistrationType);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="_set">
    /// Set to true if the reason code is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        return this.ReasonCodeMap::editReasonCode(_set, strLRTrim(_reasonCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when the <paramref name="set" /> value is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        return this.ReasonCodeMap::editReasonComment(_set, _reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePostButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// return true if post button is enabled; otherwise false.
    /// </summary>
    /// <returns>
    /// true if post button is enabled; otherwise false.
    /// </returns>
    public boolean enablePostButton()
    {
        PSAProjProposalProj psaProjProposalProj;
        ProjStatusTypeRule  projStatusTypeRule;
        ProjTable           projTable;

        select Status, Type, RecId from projTable
            exists join psaProjProposalProj
                where psaProjProposalProj.ProjId == projTable.ProjId &&
                      psaProjProposalProj.ProjProposalId == this.ProposalId
            notexists join projStatusTypeRule
                where projStatusTypeRule.ProjType == projTable.Type &&
                      projStatusTypeRule.ProjStatus == projTable.Status &&
                      projStatusTypeRule.ProjStatusRule == ProjStatusRule::CreateInvoiceProposal;

        if (projTable.RecId)
        {
            return false;
        }

        if (ProjParameters::find().EnableInvoiceProposalWorkflow &&
            this.LineProperty == ProjLinePropertyCode::Approved &&
            !this.isPostingUsingWorkflow())
        {
            return true;
        }

        if (!ProjParameters::find().EnableInvoiceProposalWorkflow &&
            (this.LineProperty == ProjLinePropertyCode::Open ||
              (this.LineProperty == ProjLinePropertyCode::Approved && !this.isPostingUsingWorkflow())
            )
           )
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the original project invoice journal for the credit project invoice proposal.
    /// </summary>
    /// <returns>
    /// The original project invoice journal.
    /// </returns>
    public ProjInvoiceJour getOriginalProjInvoiceJour()
    {
        ProjProposalEmpl            projProposalEmpl;
        ProjProposalEmplDetail      projProposalEmplDetail;
        ProjProposalOnAcc           projProposalOnAcc;
        ProjProposalOnAccDetail     projProposalOnAccDetail;
        ProjProposalCost            projProposalCost;
        ProjProposalCostDetail      projProposalCostDetail;
        ProjProposalItem            projProposalItem;
        ProjProposalItemDetail      projProposalItemDetail;
        ProjProposalRevenue         projProposalRevenue;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjEmplTransSale           projEmplTransSale;
        ProjCostTransSale           projCostTransSale;
        ProjOnAccTransSale          projOnAccTransSale;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjItemTransSale           projItemTransSale;
        ProjInvoiceJour             projInvoiceJour;
        ProjInvoiceEmpl             projInvoiceEmpl;
        ProjInvoiceEmplDetail       projInvoiceEmplDetail;
        ProjInvoiceOnAcc            projInvoiceOnAcc;
        ProjInvoiceOnAccDetail      projInvoiceOnAccDetail;
        ProjInvoiceCost             projInvoiceCost;
        ProjInvoiceCostDetail       projInvoiceCostDetail;
        ProjInvoiceItem             projInvoiceItem;
        ProjInvoiceItemDetail       projInvoiceItemDetail;
        ProjInvoiceRevenue          projInvoiceRevenue;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;

        select firstonly projInvoiceJour
            exists join projInvoiceEmpl
                where projInvoiceEmpl.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    && projInvoiceEmpl.InvoiceDate == projInvoiceJour.InvoiceDate
            exists join projInvoiceEmplDetail
                where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId
            exists join projEmplTransSale
                where projEmplTransSale.RecId == projInvoiceEmplDetail.SaleRefRecId
                    && projEmplTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
            exists join projProposalEmplDetail
                where projProposalEmplDetail.SaleRefRecId ==projEmplTransSale.RecId
            exists join projProposalEmpl
                where projProposalEmpl.RecId ==projProposalEmplDetail.ProposalRefRecId
                    && projProposalEmpl.ProposalId == this.ProposalId;

        if (!projInvoiceJour)
        {
            select firstonly projInvoiceJour
                exists join projInvoiceOnAcc
                    where projInvoiceOnAcc.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                        && projInvoiceOnAcc.InvoiceDate == projInvoiceJour.InvoiceDate
                exists join projInvoiceOnAccDetail
                    where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId
                exists join projOnAccTransSale
                    where projOnAccTransSale.RecId == projInvoiceOnAccDetail.SaleRefRecId
                        && projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                exists join projProposalOnAccDetail
                    where projProposalOnAccDetail.SaleRefRecId ==projOnAccTransSale.RecId
                exists join projProposalOnAcc
                    where projProposalOnAcc.RecId == projProposalOnAccDetail.ProposalRefRecId
                        && projProposalOnAcc.ProposalId == this.ProposalId;

            if (!projInvoiceJour)
            {
                select firstonly projInvoiceJour
                    exists join projInvoiceCost
                        where projInvoiceCost.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                            && projInvoiceCost.InvoiceDate == projInvoiceJour.InvoiceDate
                    exists join projInvoiceCostDetail
                        where projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCost.RecId
                    exists join projCostTransSale
                        where projCostTransSale.RecId == projInvoiceCostDetail.SaleRefRecId
                            && projCostTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                    exists join projProposalCostDetail
                        where projProposalCostDetail.SaleRefRecId ==projCostTransSale.RecId
                    exists join projProposalCost
                        where projProposalCost.RecId == projProposalCostDetail.ProposalRefRecId
                            && projProposalCost.ProposalId == this.ProposalId;

                if (!projInvoiceJour)
                {
                    select firstonly projInvoiceJour
                        exists join projInvoiceItem
                            where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                                && projInvoiceItem.InvoiceDate == projInvoiceJour.InvoiceDate
                        exists join projInvoiceItemDetail
                            where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId
                        exists join projItemTransSale
                            where projItemTransSale.RecId == projInvoiceItemDetail.SaleRefRecId
                                && projItemTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                        exists join projProposalItemDetail
                            where projProposalItemDetail.SaleRefRecId ==projItemTransSale.RecId
                        exists join projProposalItem
                            where projProposalItem.RecId == projProposalItemDetail.ProposalRefRecId
                                && projProposalItem.ProposalId == this.ProposalId;

                    if (!projInvoiceJour)
                    {
                        select firstonly projInvoiceJour
                            exists join projInvoiceRevenue
                                where projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                                    && projInvoiceRevenue.InvoiceDate == projInvoiceJour.InvoiceDate
                            exists join projInvoiceRevenueDetail
                                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                            exists join projRevenueTransSale
                                where projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
                                    && projRevenueTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
                            exists join projProposalRevenueDetail
                                where projProposalRevenueDetail.SaleRefRecId ==projRevenueTransSale.RecId
                            exists join projProposalRevenue
                                where projProposalRevenue.RecId == projProposalRevenueDetail.ProposalRefRecId
                                    && projProposalRevenue.ProposalId == this.ProposalId;
                    }
                }
            }
        }

        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFDIUUID_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unique identification of CDFI document
    /// </summary>
    /// <returns>
    /// The CFDI identification
    /// </returns>
    public EInvoiceCFDIUUID_MX getCFDIUUID_MX()
    {
        return EInvoiceJour_MX::findByRef(this.TableId, this.RecId).CFDIUUID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceFormats</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of invoice formats for a given invoice proposal
    /// </summary>
    /// <param name = "_proposalId">
    /// Proposal ID of the current invoice proposal
    /// </param>
    /// <param name = "_invoiceText">
    /// Invoice proposal's invoice text
    /// </param>
    /// <param name = "_contractHasBillingRules">
    /// Set to true if contract has billing rules
    /// </param>
    /// <returns>
    /// List object with invoice formats available for the invoice proposal
    /// </returns>
    public static List getInvoiceFormats(ProjProposalId _proposalId, Notes _invoiceText = '', boolean _contractHasBillingRules = false)
    {
        List                        enumValues = new List(Types::String);

        PSAProjInvoiceDetailLine    psaProjInvoiceDetailLine;
        ProjProposalRevenue         projProposalRevenue;

        select firstonly projProposalRevenue where projProposalRevenue.ProposalId == _proposalId;
        select firstonly RecId from psaProjInvoiceDetailLine where psaProjInvoiceDetailLine.ProposalId == _proposalId;

        if (projProposalRevenue && projProposalRevenue.IsRetained)
        {
            enumValues.addEnd(enum2str(PSAInvoiceFormats::DetailInvoice));
        }
        else
        {
            if (_contractHasBillingRules)
            {
                enumValues.addEnd(enum2str(PSAInvoiceFormats::DetailInvoice));
            }
            else
            {
                enumValues.addEnd(enum2str(PSAInvoiceFormats::DetailInvoice));
                enumValues.addEnd(enum2str(PSAInvoiceFormats::SummaryInvoice));
                enumValues.addEnd(enum2str(PSAInvoiceFormats::SummaryByCategory));
            }

            if (psaProjInvoiceDetailLine.RecId     != 0)
            {
                enumValues.addStart(enum2str(PSAInvoiceFormats::ManageInvoice));
            }
        }

        return enumValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFC_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer RFC
    /// </summary>
    /// <returns>
    /// The RFC number
    /// </returns>
    public RFC_MX getRFC_MX()
    {
        return CustTable::find(this.InvoiceAccount).RFC_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the customer group for the customer on an invoice proposal.
    /// </summary>
    /// <returns>
    ///    The customer group for the customer on the invoice proposal.
    /// </returns>
    CustVendGroupId groupId()
    {
        return CustTable::find(this.InvoiceAccount).CustGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the appropriate fields of this invoice proposal with corresponding fields from the invoice project and currency code passed in.
    /// </summary>
    /// <param name="_projInvoiceTable">
    ///    The invoice project used to initialize the invoice proposal.
    /// </param>
    /// <param name="_projFundingSourceRefId">
    ///    The funding source name for invoice proposal.
    /// </param>
    /// <param name="currencyId">
    ///    The currency code used; optional.
    /// </param>
    public void initFromProjInvoiceTable(ProjInvoiceTable _projInvoiceTable, ProjFundingSourceRefId _projFundingSourceRefId = 0, CurrencyCode currencyId  = '')
    {
        CustTable                   custTable;
        ProjFundingSource           projFundingSource;

        if (this.InvoiceDate == dateNull())
        {
            this.InvoiceDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }

		this.ProjInvoiceProjId = _projInvoiceTable.ProjInvoiceProjId;

        if (!prmisDefault(_projFundingSourceRefId))
        {
            projFundingSource = ProjFundingSource::find(_projFundingSourceRefId);
            if (projFundingSource.FundingType == ProjFundingType::Grant)
            {
                custTable = CustTable::find(ProjGrant::find(projFundingSource.ProjGrant).CustAccount);
            }
            else
            {
                custTable = CustTable::find(projFundingSource.CustAccount);
            }

            // Set funding source specific values
            this.Payment                = projFundingSource.PaymentTermsId;
            this.OrderAccount           = custTable.AccountNum;
            this.PaymDayId              = custTable.PaymDayId;
            this.PaymentSched           = projFundingSource.PaymentscheduleId;
            this.PostingProfile         = projFundingSource.PostingProfile;
            this.CashDiscCode           = projFundingSource.CashDiscountId;
            this.PaymentSched           = projFundingSource.PaymentscheduleId ? projFundingSource.PaymentscheduleId : PaymTerm::find(this.Payment).PaymSched;
            this.NumberSequenceGroupId  = projFundingSource.NumberSequenceGroupId ? projFundingSource.NumberSequenceGroupId : custTable.NumberSequenceGroup;
            this.LanguageId             = projFundingSource.LanguageId;
            // LangaugeId not found on funding source, use customer account
            if (this.LanguageId == '')
            {
                this.LanguageId = custTable.languageId();
            }
            // LanguageId not found on the customer, use LE LanguageId
            if (this.LanguageId == '')
            {
                this.LanguageId = CompanyInfo::find().LanguageId;
            }

            this.DefaultDimension = projFundingSource.DefaultDimension;
			this.LedgerDefaultDimension = this.DefaultDimension;
            this.DeliveryName = projFundingSource.InvoiceName;

            if (projFundingSource.InvoiceLocation)
            {
                this.DeliveryPostalAddress = LogisticsLocationEntity::location2PostalAddress(projFundingSource.InvoiceLocation).RecId;
            }

            if (custTable.InvoiceAccount)
            {
                this.InvoiceAccount = custTable.InvoiceAccount;
            }
            else
            {
                this.InvoiceAccount = custTable.AccountNum;
            }

            this.calcDue();

            if (CustTable::isCustDKPublic(custTable.AccountNum) == NoYes::Yes &&
                !CustTable::isCustPublic_NO(custTable.AccountNum))
            {
                if (projFundingSource.eInvoiceLineSpec)
                {
                    this.eInvoiceLineSpecific   = projFundingSource.eInvoiceLineSpec;
                    this.eInvoiceAccountCode    = '';
                }
                else
                {
                    this.eInvoiceLineSpecific   = projFundingSource.eInvoiceLineSpec;
                    this.eInvoiceAccountCode    = projFundingSource.eInvoiceAccountCode;
                }
            }
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                this.psaInvoiceFormats      = projFundingSource.psaInvoiceFormats;
            }
        }
        else
        {
            this.Payment                = _projInvoiceTable.Payment;
            this.PaymentSched           = _projInvoiceTable.Paymentsched;
            this.PostingProfile         = _projInvoiceTable.PostingProfile;
            this.CashDiscCode           = _projInvoiceTable.CashDisc;
            this.PaymentSched           = _projInvoiceTable.Paymentsched ? _projInvoiceTable.Paymentsched : PaymTerm::find(this.Payment).PaymSched;
            this.NumberSequenceGroupId  = _projInvoiceTable.NumberSequenceGroupId;
            this.LanguageId             = projFundingSource.LanguageId;

            this.calcDue();
        }
        this.GiroType               = _projInvoiceTable.GiroType;
        // <GEELV>
        this.IntrastatAddValue_LV   = _projInvoiceTable.IntrastatAddValue_LV;
        // </GEELV>

        if (currencyId)
        {
            this.CurrencyId         = currencyId;
        }
        else
        {
            this.CurrencyId         = _projInvoiceTable.CurrencyId;
        }

        this.TaxGroupId             = _projInvoiceTable.TaxGroupId;

        if (_projInvoiceTable.ListCodeId)
        {
            this.ListCodeId         = _projInvoiceTable.ListCodeId;
        }
        else
        {
            this.ListCodeId             = EUSalesList::resolveListCodeByCountryState(custTable.postalAddress(),_projInvoiceTable.payer().postalAddress());
        }

        custTable.copyPrimaryRegistrationNumberToVATMap(this);

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            ProjProposalJour_TH projProposalJour_TH = this.projProposalJourExtension_TH();
            this.packProjProposalJourExtension_TH(projProposalJour_TH);
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.CustBankAccountId = CustTable::find(this.InvoiceAccount).BankAccount;
        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            this.InvoiceType_MY = TaxGSTDocInvoiceType_MY::construct(this.TableId).defaultType();
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new invoice proposal into the table.
    /// </summary>
    /// <remarks>
    ///    This method checks if the invoice project for the invoice proposal to be inserted exists before assigning a <c>ProposalId</c> value. The <c>ProposalId</c> value is determined from the appropriate
    ///    number sequence used for invoice proposals in the project module.
    /// </remarks>
    public void insert()
    {
        NumberSeq   numberSeq;

        ttsbegin;

        if (ProjInvoiceTable::exist(this.ProjInvoiceProjId)
             && (isConfigurationkeyEnabled(configurationKeyNum(Project)) ? this.ProposalId=='' : true))
        {
            numberSeq                    = NumberSeq::newGetNum(this.retrieveNumberSequenceReference());
            this.ProposalId              = numberSeq.num();
        }
        // initialize InvoiceDate with TODAY date if missing in order to have taxes calculated
        if (this.InvoiceDate == dateNull())
        {
            this.InvoiceDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }

        CustTable custTable = CustTable::find(this.InvoiceAccount);

        this.CustBankAccountId = custTable.BankAccount;

        // Initialize method of payment from <c>CustTable</c>.
        if (!this.PaymMode)
        {
            this.PaymMode = custTable.PaymMode;
        }

        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            this.satPurpose_MX      = custTable.satPurpose_MX;
            this.satPaymMethod_MX   = custTable.satPaymMethod_MX;
            this.ForeignTrade_MX    = custTable.ForeignTrade_MX;

            if (this.ForeignTrade_MX)
            {
                this.NumRegIdTrib_MX = custTable.ForeignTaxRegistration_MX;
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && this.ProposalId)
        {
            this.initWithTaxPaymentAndWouldYouClaimRefund_IN();
        }

        super();

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        //</GTH>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProjProposalJourExtension_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// pack <c>ProjProposalJour_TH</c> for Thai feature
    /// </summary>
    /// <param name="_projProposalJourExtension">
    /// the <c>ProjProposalJour_TH</c> need to be packed
    /// </param>
    public void packProjProposalJourExtension_TH(ProjProposalJour_TH _projProposalJourExtension)
    {
        _projProposalJourExtension.ProjProposalJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_projProposalJourExtension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalJourExtension_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the TH extension table.
    /// </summary>
    /// <returns>
    /// The instance of the extension table.
    /// </returns>
    public ProjProposalJour_TH projProposalJourExtension_TH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjProposalJour_TH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whether invoice proposal includes line of type pre-payment.
    /// </summary>
    /// <returns>
    /// True if invoice proposal includes line of type pre-payment; otherwise false.
    /// </returns>
    private boolean isCustAdvance()
    {
        ProjProposalOnAcc proposalOnAcc;
        ProjOnAccTrans    onAccTrans;

        select firstonly RecId from proposalOnAcc
                where     proposalOnAcc.ProposalId == this.ProposalId
            exists join onAccTrans
                where onAccTrans.TransId           == proposalOnAcc.TransId &&
                      onAccTrans.TransactionOrigin == ProjOrigin::Prepayment &&
                      onAccTrans.psaIsOnAccount    == true;

        return (proposalOnAcc.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustRetentionRelease</Name>
				<Source><![CDATA[
    private boolean isCustRetentionRelease()
    {
        return ProjProposalJour::isProposalRelease(this.ProposalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostingUsingWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the workflow contains 'post' element; otherwise false.
    /// </summary>
    /// <returns>
    /// true if the workflow contains 'post' element; otherwise false.
    /// </returns>
    public boolean isPostingUsingWorkflow()
    {
        #define.PSAProjInvoiceProposalPostInvoice("PSAProjInvoiceProposalPostInvoice")

        WorkflowTrackingStatusTable  workflowTrackingStatusTable;
        WorkflowVersionTable         workflowVersionTable;
        WorkflowElementTable         workflowElementTable;

        select firstonly RecId from workflowTrackingStatusTable where
                workflowTrackingStatusTable.ContextCompanyId == curext() &&
                workflowTrackingStatusTable.ContextTableId   == this.TableId &&
                workflowTrackingStatusTable.ContextRecId     == this.RecId
            join TableId from workflowVersionTable where
                workflowVersionTable.RecId                   == workflowTrackingStatusTable.WorkflowVersionTable
            join TableId from workflowElementTable where
                workflowElementTable.ConfigurationId         == workflowVersionTable.ConfigurationId &&
                workflowElementTable.ElementType             == WorkflowElementType::Task            &&
                workflowElementTable.ElementName             == #PSAProjInvoiceProposalPostInvoice;

        if (workflowTrackingStatusTable)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes code based on value of fields changed by user from UI
    /// </summary>
    /// <param name="_fieldName">
    /// Name of the field.
    /// </param>
    /// <param name="_arrayIndex">
    /// Index of the field.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>netInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the net invoice amount for the <c>ProjProposalJour</c> record.
    /// </summary>
    /// <returns>
    /// Total net amount.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountCur netInvoiceAmount()
    {
        return this.InvoiceAmount - this.retentionAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a project ID associated with the invoice proposal.
    /// </summary>
    /// <returns>
    /// A project ID associated with the invoice proposal.
    /// </returns>
    public ProjId projId()
    {
        ProjProposalTransUnion projProposalTransUnion;

        select firstonly ProjId from projProposalTransUnion where
            projProposalTransUnion.ProposalId == this.ProposalId;

        return projProposalTransUnion.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the project IDs associated with the invoice proposal.
    /// </summary>
    /// <returns>
    /// The project ID if only one project is associated with the invoice proposal, "Multiple" otherwise.
    /// </returns>
    public ProjId projIds()
    {
        ProjProposalTransUnion projProposalTransUnion;
        ProjId projId;

        while select ProjId
            from projProposalTransUnion
                where projProposalTransUnion.ProposalId == this.ProposalId
        {
            if (projId)
            {
                return "@Proj:MultipleProjects";
            }

            projId = projProposalTransUnion.ProjId;
        }

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the invoice project for the invoice proposal journal.
    /// </summary>
    /// <returns>
    ///    The invoice project for the invoice proposal.
    /// </returns>
    public ProjInvoiceTable projInvoiceTable()
    {
        return ProjInvoiceTable::find(this.ProjInvoiceProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the form caption.
    /// </summary>
    /// <returns>
    /// Form caption and title fields.
    /// </returns>
    display ProjProposalId projProposalId_BR()
    {
        return strFmt("@GLS510118", this.ProposalId,this.ProjInvoiceProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaProjTypeOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return type of the project associated with the invoice proposoal.
    /// </summary>
    /// <returns>
    /// Type of the project associated with the invoice proposoal.
    /// </returns>
    ProjType psaProjTypeOnAcc()
    {
        ProjProposalOnAcc   tProjProposalOnAcc;
        ProjOnAccTrans      tProjOnAccTrans;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
        select firstonly * from tProjProposalOnAcc
            where tProjProposalOnAcc.ProposalId == this.ProposalId
            join ProjID from tProjOnAccTrans
                where tProjOnAccTrans.TransId == tProjProposalOnAcc.TransId;
        }

        return ProjTable::find(tProjOnAccTrans.ProjID).Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query to retrieve all the sales orders attached to the item transaction lines on the invoice proposal journal.
    /// </summary>
    /// <param name="_checkApprove">
    ///    A Boolean value that determines whether to only retrieve sales orders for an approved invoice proposal journal; optional.
    /// </param>
    /// <returns>
    ///    The query to retrieve sales orders attached to item transactions on the invoice proposal journal.
    /// </returns>
    /// <remarks>
    ///    The query is built to filter out duplicate sales orders.
    /// </remarks>
    public Query querySalesTable(boolean _checkApprove = true)
    {
        Query                   querySalesTable;
        QueryBuildDataSource    qbdsSalesTable;
        QueryBuildDataSource    qbdsProjProposalItem;
        QueryBuildDataSource    qbdsProjProposalJour;

        querySalesTable = new Query();
        qbdsSalesTable = querySalesTable.addDataSource(tableNum(SalesTable));

        qbdsProjProposalItem = qbdsSalesTable.addDataSource(tableNum(ProjProposalItem));
        qbdsProjProposalItem.addLink(fieldNum(SalesTable, SalesId), fieldNum(ProjProposalItem, SalesId));
        qbdsProjProposalItem.joinMode(JoinMode::ExistsJoin);
        qbdsProjProposalItem.addRange(fieldNum(ProjProposalItem, ProposalId)).value(queryValue(this.ProposalId));
        qbdsProjProposalItem.addRange(fieldNum(ProjProposalItem, ItemType)).value(queryValue(ProjItemType::SalesOrder));

        if (ProjParameters::find().ApproveActive && _checkApprove)
        {
            qbdsProjProposalJour = qbdsProjProposalItem.addDataSource(tableNum(ProjProposalJour));
            qbdsProjProposalJour.relations(true);
            qbdsProjProposalJour.joinMode(JoinMode::ExistsJoin);
            qbdsProjProposalJour.addRange(fieldNum(ProjProposalJour, LineProperty)).value(enum2Value(ProjLinePropertyCode::Approved));
        }

        return querySalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method should not be called.
    /// </summary>
    /// <remarks>
    ///    The primary key for invoice proposals cannot be renamed. If this method is called, the following error message will be displayed: An invoice cannot be renamed.
    /// </remarks>
    public void renamePrimaryKey()
    {
        throw error("@SYS67280");
    }

]]></Source>
			</Method>
			<Method>
				<Name>retentionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the retention amount for the <c>ProjProposalJour</c> record.
    /// </summary>
    /// <returns>
    /// Total retention amount.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountCur retentionAmount()
    {
        AmountCur amountCur;
        PSAProjProposalProj psaProjProposalProj;
        
        while select psaProjProposalProj 
            where psaProjProposalProj.ProjProposalId == this.ProposalId
                && psaProjProposalProj.IsPreBill == NoYes::No
        {
            amountCur += psaProjProposalProj.calcRetention();
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the first sales order created that is attached to the item transaction lines of the invoice proposal.
    /// </summary>
    /// <returns>
    ///    The first sales order.
    /// </returns>
    public SalesTable salesTable()
    {
        ProjProposalItem    projProposalItem;

        select minof(SalesId)
            from projProposalItem
            where projProposalItem.ProposalId   == this.ProposalId &&
                  projProposalItem.SalesId;

        return SalesTable::find(projProposalItem.SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        // <GEEU>
        #ISOCountryRegionCodes
        // </GEEU>

        ret = super();

        if (TaxVATNumTable::isVATNumMandatory(CustParameters::find().MandatoryInvoiceVATNum, CustTable::find(this.InvoiceAccount)))
        {
            return checkFailed(strFmt("@SYS56499",this.InvoiceAccount));
        }
        if (ret && this.OrderAccount)
        {
            ret = this.validateCustomerBlockedForProjInvoiceProposal(this.OrderAccount);
        }

        // <GEEU>
        if (ret && this.ReasonTableRef && ReasonTableRef::exist(this.ReasonTableRef))
        {
            //Check that the reason code is valid for the Ledger account type
            if (!ReasonFormTable::checkReasonCodeForAccountType(this.ReasonTableRef, LedgerJournalACType::Cust))
            {
                // The Reason code is not active for account type
                ret = checkFailed("@SYS115522");
            }
        }
        // </GEEU>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerBlockedForProjInvoiceProposal</Name>
				<Source><![CDATA[
    private boolean validateCustomerBlockedForProjInvoiceProposal(CustAccount _custAccount)
    {
        boolean ret = true;
        CustVendorBlocked blockedLevel = CustTable::blocked(_custAccount);
        switch (blockedLevel)
        {
            case CustVendorBlocked::All:
            case CustVendorBlocked::Invoice:
                ret = checkFailed(strFmt("@SYS18389", _custAccount, enum2Str(blockedLevel)));

        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipInvoicedOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns value of onaccount transactins in company currency.
    /// </summary>
    /// <returns>
    /// Value of onaccount transactins in company currency.
    /// </returns>
    display AmountMST wipInvoicedOnAcc()
    {
        AmountMST wipInvoicedOnAcc;
        DictTable dictTableProjProposalOnAcc = new DictTable(tableNum(ProjProposalOnAcc));

        if (dictTableProjProposalOnAcc.rights() >= AccessType::View)
        {
            ProjProposalOnAcc projProposalOnAcc;
            boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

            while select projProposalOnAcc
                where projProposalOnAcc.ProposalId == this.ProposalId
            {
                ProjLedgerStatusOnAcc onAccLedgerStatus;
                if (enableProjMultipleContractLinesForProjectFeature)
                {
                    ProjContractBillingMethod billingMethod = ProjMultipleContractLinesForProjectFeatureHelper::getBillingMethodForProjContractLine(projProposalOnAcc.PSAContractLineNum);
                    onAccLedgerStatus = ProjRevRecHelper::getRevProfile(ProjOnAccTrans::find(projProposalOnAcc.TransId).projTable(), billingMethod).OnAccLedgerStatus;
                }
                else
                {
                    onAccLedgerStatus = ProjOnAccTrans::find(projProposalOnAcc.TransId).projTable().projGroup().InvoicePosting;
                }

                if (onAccLedgerStatus == ProjLedgerStatusOnAcc::BalanceSheet)
                {
                    wipInvoicedOnAcc += this.amountMST(projProposalOnAcc.lineAmount());
                }
            }
        }
        return wipInvoicedOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a sales order invoice exists for the ID of the sales order passed in as a parameter.
    /// </summary>
    /// <param name="_salesId">
    ///    The ID of the sales order.
    /// </param>
    /// <returns>
    ///    true if a sales order invoice exists; otherwise, false.
    /// </returns>
    static boolean exist(SalesId _salesId)
    {
        return (select custInvoiceJour
                where custInvoiceJour.SalesId == _salesId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the invoice proposal journal for the given proposal ID passed in as a parameter.
    /// </summary>
    /// <param name="_projProposalId">
    ///    The ID of the invoice proposal journal to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the invoice proposal journal should be updated; optional.
    /// </param>
    /// <returns>
    ///    The desired invoice proposal journal.
    /// </returns>
    public static ProjProposalJour find(ProjProposalId _projProposalId, boolean _forUpdate = false)
    {
        ProjProposalJour projProposalJour = null;

        projProposalJour.selectForUpdate(_forUpdate);

        if (_projProposalId)
        {
            select projProposalJour where projProposalJour.ProposalId  == _projProposalId;
        }

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the invoice proposal journal for the given record ID passed in as a parameter.
    /// </summary>
    /// <param name="_iRecId">
    ///    The record ID of the invoice proposal journal to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the invoice proposal journal should be updated; optional.
    /// </param>
    /// <returns>
    ///    The desired invoice proposal journal.
    /// </returns>
    public static ProjProposalJour findRecid(RecId   _iRecId,
                                      boolean _forUpdate = false)
    {
        ProjProposalJour projProposalJour;

        projProposalJour.selectForUpdate(_forUpdate);

        if (_iRecId)
        {
            select projProposalJour
                where projProposalJour.RecId  == _iRecId;
        }
        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the invoice proposal journal for the given record ID passed in as a parameter.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the invoice proposal journal to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the invoice proposal journal should be updated; optional.
    /// </param>
    /// <returns>
    ///    The desired invoice proposal journal.
    /// </returns>
    public static ProjProposalJour findRecId_W(RecId    _recId,
                                               boolean  _forUpdate = false)
    {
        ProjProposalJour projProposalJour;

        if (_recId)
        {
            if (_forUpdate)
            {
                projProposalJour.selectForUpdate(_forUpdate);
            }
            select firstonly projProposalJour where projProposalJour.RecId  == _recId;
        }

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true false value indicating whether the invoice proposal has any transactions of type item, cost, empl, revenue, on account.
    /// </summary>
    /// <param name="_projProposalJour">
    /// A record in <c>ProjProposalJour</c> table.
    /// </param>
    /// <returns>
    /// True if the invoice proposal has any transactions of type item, cost, empl, revenue, on account; otherwise false.
    /// </returns>
    static boolean hasDetails(Common  _projProposalJour)
    {
        ProjProposalJour        projProposalJour;
        ProjProposalItem        projProposalItem;
        ProjProposalCost        projProposalCost;
        ProjProposalEmpl        projProposalEmpl;
        ProjProposalRevenue     projProposalRevenue;
        ProjProposalOnAcc       projProposalOnAcc;

        projProposalJour = _projProposalJour;
        select firstonly RecId from projProposalItem where projProposalItem.ProposalId == projProposalJour.ProposalId;
        select firstonly RecId from projProposalCost where projProposalCost.ProposalId == projProposalJour.ProposalId;
        select firstonly RecId from projProposalEmpl where projProposalEmpl.ProposalId == projProposalJour.ProposalId;
        select firstonly RecId from projProposalRevenue where projProposalRevenue.ProposalId == projProposalJour.ProposalId;
        select firstonly RecId from projProposalOnAcc where projProposalOnAcc.ProposalId == projProposalJour.ProposalId;

        if (projProposalItem || projProposalCost || projProposalEmpl || projProposalRevenue || projProposalOnAcc)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProposalRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whether the invoice proposal is of type release.
    /// </summary>
    /// <param name="_proposalId">
    /// Proposal ID of the invoice proposal journal.
    /// </param>
    /// <returns>
    /// True if the invoice proposal is of type release; otherwise false.
    /// </returns>
    public static boolean isProposalRelease(ProjProposalId _proposalId)
    {
        ProjProposalRevenue revenue;

        select firstonly RecId, IsReleased from revenue
            where revenue.ProposalId == _proposalId;

        return (revenue ? revenue.IsReleased : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Launches a <c>ProjInvoiceProposal</c> object and passes the invoice proposal record for the
    ///    proposal ID passed in as a parameter.
    /// </summary>
    /// <param name="_proposalId">
    ///    The ID of the invoice proposal journal to load in the form.
    /// </param>
    /// <param name="transId">
    ///     .
    /// </param>
    /// <param name="projTransType">
    ///     .
    /// </param>
    static void jumpRefProposal(
        ProjProposalId _proposalId,
        ProjTransIdBase transId,
        ProjTransType   projTransType
    )
    {
        Args                args;
        FormRun             formRun;
        ProjProposalJour    projProposalJour    = ProjProposalJour::find(_proposalId);
        ProjRevenueTrans    projRevenueTrans;
        ProjItemTrans       projItemTrans;
        SysAnyType          parmSysAnyTypeTransId;

        if (projProposalJour)
        {
            /*
            args = new Args(formStr(ProjInvoiceProposal));
            */
            args = new Args(formStr(ProjInvoiceProposalDetail));
            args.record(projProposalJour);

            // Construct parameters to pass to the form
            // We pass the transaction id and the transaction type/transaction origin
            args.parm('jumpToMain');
            parmSysAnyTypeTransId = new SysAnyType(transId);
            args.parmObject(parmSysAnyTypeTransId);
            switch (projTransType)
            {
                // For Revenue(Fee) and Item transactions, pass the transaction origin enum
                case ProjTransType::Revenue:
                    projRevenueTrans = ProjRevenueTrans::find(transId);
                    args.parmEnumType(enumNum(ProjOrigin));
                    args.parmEnum(enum2int(projRevenueTrans.TransactionOrigin));
                    break;
                case ProjTransType::Item:
                     projItemTrans = ProjItemTrans::find(transId);
                     args.parmEnumType(enumNum(ProjOrigin));
                     args.parmEnum(enum2int(projItemTrans.TransactionOrigin));
                     break;
                // For the other transaction types, we simply pass the transaction type enum
                default:
                    args.parmEnumType(enumNum(ProjTransType));
                    args.parmEnum(enum2int(projTransType));
                    break;
            }

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.detach();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of lines in a project invoice propsoal.
    /// </summary>
    /// <param name="_proposalId">
    /// Proposal ID for which number of lines are to be calcualted.
    /// </param>
    /// <returns>
    /// Number of lines in a project invoice propsoal.
    /// </returns>
    public static int64 numOfRecords(ProjProposalId    _proposalId)
    {
        int64                   numOfRecords;

        ProjProposalEmpl       empl;
        ProjProposalCost       cost;
        ProjProposalItem       item;
        ProjProposalOnAcc      onAcc;
        ProjProposalRevenue    revenue;

        select count(RecId) from empl where empl.ProposalId == _proposalId;
        numOfRecords += empl.RecId;

        select count(RecId) from cost where cost.ProposalId == _proposalId;
        numOfRecords += cost.RecId;

        select count(RecId) from item where item.ProposalId == _proposalId;
        numOfRecords += item.RecId;

        select count(RecId) from onAcc where onAcc.ProposalId == _proposalId;
        numOfRecords += onAcc.RecId;

        select count(RecId) from revenue where revenue.ProposalId == _proposalId;
        numOfRecords += revenue.RecId;

        return numOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container containing the query definition to return records associated with an invoice proposal.
    /// </summary>
    /// <param name="_common">
    /// A record of type empl or cost or item or revenue or on account.
    /// </param>
    /// <returns>
    /// A container containing the query definition to return records associated with an invoice proposal.
    /// </returns>
    public static container proposalQuery(Common    _common)
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        ProjProposalId          proposalId;
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransSale       projEmplTransSale;
        ProjCostTrans           projCostTrans;
        ProjCostTransSale       projCostTransSale;
        ProjItemTrans           projItemTrans;
        ProjItemTransSale       projItemTransSale;
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjOnAccTrans          projOnAccTrans;
        ProjOnAccTransSale      projOnAccTransSale;
        boolean                 found;

        query = new Query();
        qbds = query.addDataSource(tableNum(ProjProposalJour));

        #localMacro.addRange
        %1 = _common;
        while select %2
            where %2.%3 == %1.%3
        {
            proposalId = ProjTrans::%4(%1, %2).proposalId();
            if (proposalId)
            {
                found = true;
                qbds.addRange(fieldnum(ProjProposalJour, ProposalId)).value(queryValue(proposalId));
            }
        }

        if (!found)
        {
            qbds.addRange(fieldnum(ProjProposalJour, ProposalId)).value(SysQuery::valueEmptyString());
        }
		#endMacro

        switch (_common.TableId)
        {
            case tableNum(ProjEmplTrans):
                #addRange(projEmplTrans, projEmplTransSale, TransId, newProjEmplTransSale)
                break;
            case tableNum(ProjCostTrans):
                #addRange(projCostTrans, projCostTransSale, TransId, newProjCostTransSale)
                break;
            case tableNum(ProjItemTrans):
                #addRange(projItemTrans, projItemTransSale, ProjTransId, newProjItemTransSale)
                break;
            case tableNum(ProjRevenueTrans):
                #addRange(projRevenueTrans, projRevenueTransSale, TransId, newProjRevenueTransSale)
                break;
            case tableNum(ProjOnAccTrans):
                #addRange(projOnAccTrans, projOnAccTransSale, TransId, newProjOnAccTransSale)
                break;
            default:
                throw error("@SYS18626");
        }

        return query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIsCTLNChecked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whether the proposal jour has associated contract lines.
    /// </summary>
    /// <param name="_sProposalId">
    /// Proposal ID of the invoice proposal jour.
    /// </param>
    /// <returns>
    /// A true/false value indicating whether the proposal jour has associated contract lines.
    /// </returns>
    public static boolean psaIsCTLNChecked(ProjProposalId _sProposalId)
    {
        return isConfigurationkeyEnabled(configurationKeyNum(Project)) &&
            ProjProposalJour::find(_sProposalId).projInvoiceTable().psaContractLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaSplitBilling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a true/false value indicating whether billing should be split.
    /// </summary>
    /// <param name="_sProposalId">
    /// Proposal ID of the invoice proposal jour.
    /// </param>
    /// <returns>
    /// A true/false value indicating whether billing should be split.
    /// </returns>
    static boolean psaSplitBilling(ProjProposalId _sProposalId)
    {
        ProjProposalCost tProjProposalCost, tProjProposalCostSplit;
        ProjProposalEmpl tProjProposalEmpl, tProjProposalEmplSplit;
        ProjProposalItem tProjProposalItem, tProjProposalItemSplit;
        ProjProposalOnAcc tProjProposalOnAcc, tProjProposalOnAccSplit;
        ProjProposalRevenue tProjProposalRevenue, tProjProposalRevenueSplit;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        select firstonly * from tProjProposalCost
            where tProjProposalCost.ProposalId == _sProposalId;

        if (tProjProposalCost.RecId)
        {
            select firstonly * from tProjProposalCostSplit
                where tProjProposalCostSplit.TransId == tProjProposalCost.TransId
                &&    tProjProposalCostSplit.ProposalId != _sProposalId;

            if (tProjProposalCostSplit.RecId)
            {
                return true;
            }
        }

        select firstonly * from tProjProposalEmpl
            where tProjProposalEmpl.ProposalId == _sProposalId;

        if (tProjProposalEmpl.RecId)
        {
            select firstonly * from tProjProposalEmplSplit
                where tProjProposalEmplSplit.TransId == tProjProposalEmpl.TransId
                &&    tProjProposalEmplSplit.ProposalId != _sProposalId;

            if (tProjProposalEmplSplit.RecId)
            {
                return true;
            }
        }

        select firstonly * from tProjProposalItem
            where tProjProposalItem.ProposalId == _sProposalId;

        if (tProjProposalItem.RecId)
        {
            select firstonly * from tProjProposalItemSplit
                where tProjProposalItemSplit.InventTransId == tProjProposalItem.InventTransId
                &&    tProjProposalItemSplit.ProposalId != _sProposalId;

            if (tProjProposalItemSplit.RecId)
            {
                return true;
            }
        }

        select firstonly * from tProjProposalOnAcc
            where tProjProposalOnAcc.ProposalId == _sProposalId;

        if (tProjProposalOnAcc.RecId)
        {
            select firstonly * from tProjProposalOnAccSplit
                where tProjProposalOnAccSplit.TransId == tProjProposalOnAcc.TransId
                &&    tProjProposalOnAccSplit.ProposalId != _sProposalId;

            if (tProjProposalOnAccSplit.RecId)
            {
                return true;
            }
        }

        select firstonly * from tProjProposalRevenue
            where tProjProposalRevenue.ProposalId == _sProposalId;

        if (tProjProposalRevenue.RecId)
        {
            select firstonly * from tProjProposalRevenueSplit
                where tProjProposalRevenueSplit.TransId == tProjProposalRevenue.TransId
                &&    tProjProposalRevenueSplit.ProposalId != _sProposalId;

            if (tProjProposalRevenueSplit.RecId)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editInvoiceType_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the invoice type.
    /// </summary>
    /// <param name="_set">
    /// Set to true if the invoice type is set; otherwise, set to false.
    /// </param>
    /// <param name="_newInvoiceTypeText_MY">
    /// The new invoice type when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    /// The invoice type.
    /// </returns>
    public edit InvoiceTypeText_MY editInvoiceType_MY(boolean _set, InvoiceTypeText_MY _newInvoiceTypeText_MY)
    {
        InvoiceType_MY      newInvoiceType_MY;

        if (_set)
        {
            newInvoiceType_MY = str2enum(newInvoiceType_MY, _newInvoiceTypeText_MY);
            if (TaxGSTDocInvoiceType_MY::construct(this.TableId).validate(newInvoiceType_MY))
            {
                this.InvoiceType_MY = newInvoiceType_MY;
            }
        }

        return enum2str(this.InvoiceType_MY);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editInvReportFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report format in print settings of the Proposal
    /// </summary>
    /// <param name="_set">
    /// boolean value true/ false if format changed
    /// </param>
    /// <param name="_newReportFormat">
    /// new report format selected
    /// </param>
    /// <returns>
    /// returns report format
    /// </returns>
    public edit ProjInvReportFmtDesc editInvReportFormat(boolean _set, PrintMgmtReportFormatDescription  _newReportFormat)
    {
        PrintMgmtReportFormatDescription    newReportFormat = _newReportFormat;
        PrintMgmtReportFormatDescription    reportFormat;

        reportFormat = ProjInvoicePrintMgmt::getReportFormat(this);
        if (_set)
        {
            if (this.RecId && newReportFormat && newReportFormat != reportFormat)
            {
                ProjInvoicePrintMgmt::createOrUpdateInvoicePrintSettings(this,PrintMgmtNodeType::ProjProposalJour,newReportFormat);
                reportFormat = newReportFormat;
            }
        }
        return reportFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNoteType_MY</Name>
				<Source><![CDATA[
    public NoteType_MY getNoteType_MY()
    {
        // <GMY>
        if (this.InvoiceAmount < 0)
        {
            return NoteType_MY::CreditNote;
        }
        else if (this.InvoiceAmount >= 0 && this.hasLinesWithReference_MY())
        {
            return NoteType_MY::DebitNote;
        }
        else
        {
            return NoteType_MY::Blank;
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithoutReference_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any lines have original invoice.
    /// </summary>
    /// <returns>
    /// true if any lines don't have original invoice; otherwise, false.
    /// </returns>
    public boolean hasLinesWithoutReference_MY()
    {
        // <GMY>
        ProjProposalEmpl                 projProposalEmpl;
        ProjProposalCost                 projProposalCost;
        ProjProposalItem                 projProposalItem;
        ProjProposalRevenue              projProposalRevenue;
        ProjProposalOnAcc                projProposalOnAcc;

        select firstOnly RecId from projProposalEmpl
            where projProposalEmpl.ProposalId       == this.ProposalId
                && projProposalEmpl.RefInvoiceId_MY     == "";

        if (projProposalEmpl)
        {
            return true;
        }

        select firstOnly RecId from projProposalCost
            where projProposalCost.ProposalId       == this.ProposalId
                && projProposalCost.RefInvoiceId_MY     == "";

        if (projProposalCost)
        {
            return true;
        }

        select firstOnly RecId from projProposalItem
            where projProposalItem.ProposalId       == this.ProposalId
                && projProposalItem.RefInvoiceId_MY     == "";

        if (projProposalItem)
        {
            return true;
        }

        select firstOnly RecId from projProposalRevenue
            where projProposalRevenue.ProposalId       == this.ProposalId
                && projProposalRevenue.RefInvoiceId_MY     == "";

        if (projProposalRevenue)
        {
            return true;
        }

        select firstOnly RecId from projProposalOnAcc
            where projProposalOnAcc.ProposalId       == this.ProposalId
                && projProposalOnAcc.RefInvoiceId_MY     == "";

        if (projProposalOnAcc)
        {
            return true;
        }

        return false;
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithReference_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any lines have original invoice.
    /// </summary>
    /// <returns>
    /// true if any lines have original invoice; otherwise, false.
    /// </returns>
    public boolean hasLinesWithReference_MY()
    {
        // <GMY>
        ProjProposalEmpl                 projProposalEmpl;
        ProjProposalCost                 projProposalCost;
        ProjProposalItem                 projProposalItem;
        ProjProposalRevenue              projProposalRevenue;
        ProjProposalOnAcc                projProposalOnAcc;

        select firstOnly RecId from projProposalEmpl
            where projProposalEmpl.ProposalId       == this.ProposalId
                && projProposalEmpl.RefInvoiceId_MY     != "";

        if (projProposalEmpl)
        {
            return true;
        }

        select firstOnly RecId from projProposalCost
            where projProposalCost.ProposalId       == this.ProposalId
                && projProposalCost.RefInvoiceId_MY     != "";

        if (projProposalCost)
        {
            return true;
        }

        select firstOnly RecId from projProposalItem
            where projProposalItem.ProposalId       == this.ProposalId
                && projProposalItem.RefInvoiceId_MY     != "";

        if (projProposalItem)
        {
            return true;
        }

        select firstOnly RecId from projProposalRevenue
            where projProposalRevenue.ProposalId       == this.ProposalId
                && projProposalRevenue.RefInvoiceId_MY     != "";

        if (projProposalRevenue)
        {
            return true;
        }

        select firstOnly RecId from projProposalOnAcc
            where projProposalOnAcc.ProposalId       == this.ProposalId
                && projProposalOnAcc.RefInvoiceId_MY     != "";

        if (projProposalOnAcc)
        {
            return true;
        }

        return false;
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPerson_NO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if selected contact person id is correct and belongs to valid customer.
    /// </summary>
    /// <returns>
    /// True, if value is correct, otherwise false.
    /// </returns>
    public boolean checkContactPerson_NO()
    {
        ContactPerson   contactPerson;

        if (this.ContactPersonId_NO)
        {
            contactPerson = ContactPerson::find(this.ContactPersonId_NO);

            if (contactPerson.getCustAccount() != this.InvoiceAccount)
            {
                return checkFailed(strFmt("@SYS92800", this.ContactPersonId_NO, contactPerson.personName(), this.InvoiceAccount));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName_NO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows contact person name found by Id ContactPersonId_NO.
    /// </summary>
    /// <returns>
    /// The contact name specified by the contract ID.
    /// </returns>
    public display ContactPersonName contactPersonName_NO()
    {
        ContactPersonName contactPersonName;

        if (this.ContactPersonId_NO)
        {
            contactPersonName = ContactPerson::name(this.ContactPersonId_NO);
        }

        return contactPersonName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName_NO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the contact name for the current contract ID.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value to determine whether this is a set or get action.
    /// </param>
    /// <param name="_name">
    /// The contact name that will be used by a set operation.
    /// </param>
    /// <returns>
    /// The contact name specified by the contract ID.
    /// </returns>
    public edit ContactPersonName editContactPersonName_NO(boolean _set, ContactPersonName _name)
    {
        ContactPersonName name = _name;
        ContactPerson contactPerson;
        ContactPersonId contactPersonId;

        // GDL code: depends on isCustDKPublic() to enable the fields
        if (_set)
        {
            if (name)
            {
                contactPersonId = this.ContactPersonId_NO;
                contactPerson = ContactPerson::find(_name);
                this.ContactPersonId_NO = contactPerson.ContactPersonId;

                if (this.ContactPersonId_NO)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    DirPartyTable   partyTable;
                    CustTable       custTable;

                    select firstonly ContactPersonId from contactPerson
                        join TableId from custTable
                        where custTable.AccountNum == this.InvoiceAccount
                           && contactPerson.ContactForParty == custTable.Party
                        join Name from partyTable
                            where partyTable.RecId == contactPerson.Party &&
                                partyTable.Name like name;

                    if (contactPerson.ContactPersonId)
                    {
                        this.ContactPersonId_NO = contactPerson.ContactPersonId;
                        name = partyTable.Name;
                    }
                }

                if (contactPersonId != this.ContactPersonId_NO)
                {
                    if (this.checkContactPerson_NO())
                    {
                        if (FormDataUtil::getFormDataSource(this))
                        {
                            FormDataUtil::getFormDataSource(this).refresh();
                        }
                    }
                    else
                    {
                        this.ContactPersonId_NO = contactPersonId;
                    }
                }
            }
            else
            {
                this.ContactPersonId_NO = '';
            }
        }
        else
        {
            name = this.contactPersonName_NO();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEInvoiceDataFromLines_NO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Norway specific fields on <c>ProjProposalJour</c> from lines of proposal.
    /// </summary>
    public void initEInvoiceDataFromLines_NO()
    {
        ProjProposalEmpl projProposalEmplLocal;
        ProjProposalCost projProposalCostLocal;
        ProjProposalOnAcc projProposalOnAccLocal;
        ProjProposalItem projProposalItemLocal;
        ProjProposalRevenue projProposalRevenueLocal;
        SalesTable salesTable;
        ProjId projId;

        //Values specified at Sales order have priority because they can be overridden
        select firstOnly InventTransId from projProposalItemLocal
            where projProposalItemLocal.ProposalId == this.ProposalId &&
                    projProposalItemLocal.ItemType == ProjItemType::SalesOrder;

        if (projProposalItemLocal.InventTransId)
        {
            salesTable = SalesLine::findInventTransId(projProposalItemLocal.InventTransId).salesTable();

            this.CustPurchaseOrder_NO = salesTable.PurchOrderFormNum;
            this.CustRef_NO = salesTable.CustomerRef;
            this.ContactPersonId_NO = salesTable.ContactPersonId;

            this.setEInvoiceAccountCodeFromLines_NO();
        }
        else
        {
            select firstOnly TransId from projProposalEmplLocal
                where projProposalEmplLocal.ProposalId == this.ProposalId;

            if (projProposalEmplLocal.TransId)
            {
                projId = projProposalEmplLocal.projEmplTrans().ProjId;
            }

            if (!projId)
            {
                select firstOnly TransId from projProposalOnAccLocal
                    where projProposalOnAccLocal.ProposalId == this.ProposalId;

                if (projProposalOnAccLocal.TransId)
                {
                    projId = projProposalOnAccLocal.projOnAccTrans().ProjId;
                }
            }

            if (!projId)
            {
                select firstOnly TransId from projProposalCostLocal
                    where projProposalCostLocal.ProposalId == this.ProposalId;

                if (projProposalCostLocal.TransId)
                {
                    projId = projProposalCostLocal.projCostTrans().ProjId;
                }
            }

            if (!projId)
            {
                select firstOnly ProjTransId from projProposalItemLocal
                    where projProposalItemLocal.ProposalId == this.ProposalId &&
                            projProposalItemLocal.ItemType != ProjItemType::SalesOrder;

                if (projProposalItemLocal.ProjTransId)
                {
                    projId = projProposalItemLocal.projItemTrans().ProjId;
                }
            }

            if (!projId)
            {
                select firstOnly TransId from projProposalRevenueLocal
                    where projProposalRevenueLocal.ProposalId == this.ProposalId;

                if (projProposalRevenueLocal.TransId)
                {
                    projId = projProposalRevenueLocal.projRevenueTrans().ProjId;
                }
            }

            this.initFromEInvoiceData_NO(ProjFundingSource::find(this.FundingSource).getEInvoiceData(projId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes based on ProjProposalTotals values
    /// </summary>
    /// <param name="_projProposalTotals">
    /// <c>ProjProposalTotals</c> containing required data.
    /// </param>
    public void initFromProjProposalTotals(ProjProposalTotals _projProposalTotals)
    {
        this.CostValue = _projProposalTotals.projInvoiceCostValue();
        this.CashDisc = _projProposalTotals.projInvoiceCashDisc();
        this.InvoiceRoundOff = _projProposalTotals.projInvoiceRoundOff();
        this.InvoiceAmount = _projProposalTotals.projInvoiceTotalAmount();
        this.OnAccountAmount = _projProposalTotals.projOnAccAmount();
        this.SumLineDisc = _projProposalTotals.projSumLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEInvoiceData_NO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Norway specific fields on <c>ProjProposalJour</c>.
    /// </summary>
    /// <param name="_eInvoiceData">
    /// <c>ProjFundingSourceEInvoice_NO</c> table buffer containing required data.
    /// </param>
    public void initFromEInvoiceData_NO(ProjFundingSourceEInvoice_NO _eInvoiceData)
    {
        this.CustRef_NO = _eInvoiceData.CustRef;
        this.CustPurchaseOrder_NO = _eInvoiceData.CustPurchaseOrder;
        this.ContactPersonId_NO = _eInvoiceData.ContactPersonId;

        this.setEInvoiceAccountCodeFromLines_NO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEInvoiceAccountCodeFromLines_NO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills field EInvoiceAccountCode on <c>ProjProposalJour</c> if its the same on all lines. Used for Norway e-Invoices.
    /// </summary>
    public void setEInvoiceAccountCodeFromLines_NO()
    {
        ProjProposalCost projProposalCost;
        ProjProposalEmpl projProposalEmpl;
        ProjProposalItem projProposalItem;
        ProjProposalOnAcc projProposalOnAcc;
        ProjProposalRevenue projProposalRevenue;

        EInvoiceAccountCode eInvoiceAccountCode;
        boolean same = true;

        while select EInvoiceAccountCode from projProposalCost
            group by eInvoiceAccountCode
            where projProposalCost.ProposalId == this.ProposalId
        {
            if (!eInvoiceAccountCode)
            {
                eInvoiceAccountCode = projProposalCost.EInvoiceAccountCode;
            }

            if (eInvoiceAccountCode != projProposalCost.EInvoiceAccountCode)
            {
                eInvoiceAccountCode = '';
                same = false;
                break;
            }
        }

        if (same)
        {
            while select EInvoiceAccountCode from projProposalEmpl
                group by eInvoiceAccountCode
                where projProposalEmpl.ProposalId == this.ProposalId
            {
                if (!eInvoiceAccountCode)
                {
                    eInvoiceAccountCode = projProposalEmpl.EInvoiceAccountCode;
                }

                if (eInvoiceAccountCode != projProposalEmpl.EInvoiceAccountCode)
                {
                    eInvoiceAccountCode = '';
                    same = false;
                    break;
                }
            }
        }

        if (same)
        {
            while select EInvoiceAccountCode from projProposalItem
                group by eInvoiceAccountCode
                where projProposalItem.ProposalId == this.ProposalId
            {
                if (!eInvoiceAccountCode)
                {
                    eInvoiceAccountCode = projProposalItem.EInvoiceAccountCode;
                }

                if (eInvoiceAccountCode != projProposalItem.EInvoiceAccountCode)
                {
                    eInvoiceAccountCode = '';
                    same = false;
                    break;
                }
            }
        }

        if (same)
        {
            while select EInvoiceAccountCode from projProposalOnAcc
                group by eInvoiceAccountCode
                where projProposalOnAcc.ProposalId == this.ProposalId
            {
                if (!eInvoiceAccountCode)
                {
                    eInvoiceAccountCode = projProposalOnAcc.EInvoiceAccountCode;
                }

                if (eInvoiceAccountCode != projProposalOnAcc.EInvoiceAccountCode)
                {
                    eInvoiceAccountCode = '';
                    same = false;
                    break;
                }
            }
        }

        if (same)
        {
            while select EInvoiceAccountCode from projProposalRevenue
                group by eInvoiceAccountCode
                where projProposalRevenue.ProposalId == this.ProposalId
            {
                if (!eInvoiceAccountCode)
                {
                    eInvoiceAccountCode = projProposalRevenue.EInvoiceAccountCode;
                }

                if (eInvoiceAccountCode != projProposalRevenue.EInvoiceAccountCode)
                {
                    eInvoiceAccountCode = '';
                    same = false;
                    break;
                }
            }
        }

        this.EInvoiceAccountCode = eInvoiceAccountCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ProjProposalJour this_Orig = this.orig();
        ttsbegin;

        if (this.LineProperty == ProjLinePropertyCode::Canceled &&
            this.RecalculateTotalsStatus != ProjProposalRecalculateTotalsStatus::NotRequired &&
            ProjProposalTranSummariesRefresh::isInvoiceProposalLineEditPerfEnabled())
        {
            this.RecalculateTotalsStatus = ProjProposalRecalculateTotalsStatus::NotRequired;   
        }

        super();

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            this.SysExtensionSerializerMap::postUpdate();
        }
        //</GTH>

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            if (this.hasTaxChanged(this_Orig))
            {
                ProjProposalItem projProposalItem;
                ProjProposalOnAcc projProposalOnAcc;
                ProjProposalRevenue projProposalRevenue;
                ProjProposalEmpl projProposalEmpl;
                ProjProposalCost projProposalCost;

                select firstonly projProposalItem where projProposalItem.ProposalId == this.ProposalId;
                select firstonly projProposalOnAcc where projProposalOnAcc.ProposalId == this.ProposalId;
                select firstonly projProposalRevenue where projProposalRevenue.ProposalId == this.ProposalId;
                select firstonly projProposalEmpl where projProposalEmpl.ProposalId == this.ProposalId;
                select firstonly projProposalCost where projProposalCost.ProposalId == this.ProposalId;

                if (projProposalItem)
                {
                    projProposalItem.markCurrentTaxDocumentTaxStatusDirty();
                }
                if (projProposalOnAcc)
                {
                    projProposalOnAcc.markCurrentTaxDocumentTaxStatusDirty();
                }
                if (projProposalRevenue)
                {
                    projProposalRevenue.markCurrentTaxDocumentTaxStatusDirty();
                }
                if (projProposalEmpl)
                {
                    projProposalEmpl.markCurrentTaxDocumentTaxStatusDirty();
                }
                if (projProposalCost)
                {
                    projProposalCost.markCurrentTaxDocumentTaxStatusDirty();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymSchedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the total of the <c>CustPaymSched</c> against the total of
    /// <c>ProjProposalJour</c> document.
    /// </summary>
    /// <param name="_custPaymSched">
    /// <c>CustPaymSched</c> to check against, if null retreives the <c>CustPaymSched</c>
    /// related to this <c>ProjProposalJour</c> record
    /// </param>
    /// <returns>
    /// true if the totals match or if no <c>CustPaymSched</c> is found; otherwise false
    /// </returns>
    public boolean validatePaymSchedTotals(CustPaymSched _custPaymSched = null)
    {
        AmountCur totalAmount;
        boolean valid = true;
        CustPaymSched custPaymSched = (_custPaymSched ? _custPaymSched : CustPaymSched::find(this.TableId, this.RecId));

        if (custPaymSched)
        {
            ProjProposalTotals projProposalTotals = new ProjProposalTotals(this);
            projProposalTotals.calc();

            valid = (projProposalTotals.projInvoiceTotalAmount() == custPaymSched.paymScheduleAmount());
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveNumberSequenceReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>NumberSequenceReference</c> for the proposal ID.
    /// </summary>
    /// <returns>A <c>NumberSequenceReference</c> instance.</returns>
    protected NumberSequenceReference retrieveNumberSequenceReference()
    {
        NumberSequenceReference numberSequenceReference;

        // <GBR>
        // Retrieve number sequence reference for debit note proposal.
        if (BrazilParameters::isEnabled())
        {
            if (this.InvoiceType == ProjInvoiceType::DebitNote_BR)
            {
                numberSequenceReference = ProjParameters::numRefProjDebitNoteProposalId_BR();
            }
            else
            {
                // Retrieve number sequence reference for invoice proposal.
                numberSequenceReference = ProjParameters::numRefProjProposalId();
            }
        }
        else
        {
        // </GBR>
            numberSequenceReference = ProjParameters::numRefProjProposalId();
        // <GBR>
        }
        // </GBR>

        return numberSequenceReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWithTaxPaymentAndWouldYouClaimRefund_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the tax with payment and would you claim refund fields.
    /// </summary>
    private void initWithTaxPaymentAndWouldYouClaimRefund_IN()
    {
        TaxGSTEPZCodeHelper taxGSTEPZCodeHelper = TaxGSTEPZCodeHelper::construct(this);
        this.WithIGSTPayment_IN = taxGSTEPZCodeHelper.isEPZCodeNotNone();
        this.WouldYouClaimRefund_IN = this.WithIGSTPayment_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tax information has changed.
    /// </summary>
    /// <param name = "_originalProjProposalJour">The original project proposal journal table record.</param>
    /// <returns>true if the tax information has changed; otherwise, false.</returns>
    public boolean hasTaxChanged(ProjProposalJour _originalProjProposalJour)
    {
        return (this.WithIGSTPayment_IN != _originalProjProposalJour.WithIGSTPayment_IN) 
                || (this.WouldYouClaimRefund_IN != _originalProjProposalJour.WouldYouClaimRefund_IN)
                || (this.InvoiceDate != _originalProjProposalJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalDiscountIncludedInSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether total discount is added in sales order and IncludeTotalDiscount parameter is enabled.
    /// </summary>
    /// <param name = "_projProposalJour">
    /// The project proposal journal table record.
    /// </param>
    /// <returns>
    /// True if total discount is added in sales order and IncludeTotalDiscount parameter is enabled; otherwise false.
    /// </returns>
    internal static boolean isTotalDiscountIncludedInSalesOrder(ProjProposalJour _projProposalJour)
    {
        return (ProjParameters::find().IncludeTotalDiscountPercent && _projProposalJour.salesTable().DiscPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the field value.
    /// </summary>
    /// <param name = "_field">Field id to be validated.</param>
    /// <returns>true if the validation is passed; otherwise, false.</returns>
    public boolean validateField(FieldId _field)
    {
        boolean ret = super(_field);
        if (ret)
        {
            switch (_field)
            {
                case fieldNum(ProjProposalJour, vatNum):
                    ret = TaxVATNumTable::checkVATNum(this.vatNum, this, _field);
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecalculateTotalsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set invoice proposal recalculate totals status field by parameter value.
    /// </summary>
    /// <param name = "_recalculateTotalsStatus">Value represents by <c>ProjProposalRecalculateTotalsStatus</c> enum.</param>
    public void setRecalculateTotalsStatus(ProjProposalRecalculateTotalsStatus _recalculateTotalsStatus)
    {
        ttsbegin;

        this.selectForUpdate();
        this.RecalculateTotalsStatus = _recalculateTotalsStatus;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRecalculatesTotalsStatusIsRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return whether proposal recalculate totals status is required.
    /// </summary>
    /// <returns>true if the  proposal requires recalculate totals status is required; otherwise, false.</returns>
    public boolean checkRecalculatesTotalsStatusIsRequired()
    {
        return this.RecalculateTotalsStatus == ProjProposalRecalculateTotalsStatus::Required ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipProjInvoiceIdPrePopulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to skip invoice id prepopulation at the total calculation during the posting process.
    /// </summary>
    /// <returns>true if skipping invoice id prepopulation; otherwise, false.</returns>
    public boolean skipProjInvoiceIdPrePopulation()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124959</DeveloperDocumentation>
	<FormRef>ProjInvoiceProposal</FormRef>
	<Label>@SYS50132</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProposalId</TitleField1>
	<TitleField2>ProjInvoiceProjId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<AosAuthorization>CreateReadUpdateDelete</AosAuthorization>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ProposalNumIdx</PrimaryIndex>
	<ReplacementKey>ProposalNumIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TransportationDocument</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TransportationDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustPaymSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalCost</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalCost</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalEmpl</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalEmpl</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalOnAcc</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalOnAcc</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalRevenue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalRevenue</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxWorkRegulation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWorkRegulation</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATInvoiceDescTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressDisplay</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnAccountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOrderbalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approval</Name>
			<Label>@SYS2453</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CanceledBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerApprovedBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillOfLading</Name>
			<Label>@SYS50700</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOLCarrierName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesFreightChargeTerms_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>exchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Triangulation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchrateSecondary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDayId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS80377</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceLineSpecific</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId_NO</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPurchaseOrder_NO</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRef_NO</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName_NO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FundingSource</Name>
			<Label>@SYS128116</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyPosted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatDispatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineProperty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceNumbering_LT</Name>
			<Label>@GLS113292</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAutoNumbering_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS13356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentSchedule</Name>
			<Label>@SYS23027</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintingSpecifications</Name>
			<Label>@SYS28138</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAInvoiceMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAInvoiceTxtPre</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAInvoiceTxtPost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAnfRefProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAWorkerSubmittedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAInvoiceFormats</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAEndDate</Name>
			<Label>@SYS40804</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAWorkflow</Name>
			<Label>@PSA1431</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@GLS220480</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSpecifyByLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSpecifyTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPrintOnInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShipmentInformation</Name>
			<Label>@SYS50395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VolumeType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VolumeQty_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SplitInfo_BR</Name>
			<Label>@SYS24089</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCodeId_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation_IN</Name>
			<Label>@SYS33652</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInformation_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TermsOfDelivery</Name>
			<Label>@SYS6576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VehicleInformation_BR</Name>
			<Label>@GLS757</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VehicleLicensePlate_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleLicensePlateState_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTransportBrand_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineProperty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS116253</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>netInvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowSummary</Name>
			<Label>@SYS319419</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayContractName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GSTInvoice_MY</Name>
			<Label>@SYP4860622</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editInvoiceType_MY</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SATPaymMethod_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATPurpose_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATIncoterm_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceCFDIConfirmNumber_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignTrade_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumRegIdTrib_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalAddress_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceCertificate_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithIGSTPayment_IN</Name>
			<Label>@TaxGSTSEZ:WithIGSTPayment</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WithIGSTPayment_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WouldYouClaimRefund_IN</Name>
			<Label>@TaxGSTSEZ:WouldYouClaimRefund_IN</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WouldYouClaimRefund_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATNum</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumTableType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@SYS22016</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOLCarrierName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSCarrierName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CanceledBy</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCashDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountProject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustBankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyName</ExtendedDataType>
			<Label>@SYS22058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesEndDiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTransportBrand_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvTransportBrand_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EInvoiceLineSpecific</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceLineSpecific</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@SYS6465</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>exchRate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchrateSecondary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocumentType_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalDocumentTypeRecID_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalEstablishment_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalEstablishmentRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FundingSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubProjId</ExtendedDataType>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyPosted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntrastatAddValue_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvIntrastatAddValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatDispatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatDispatchId</ExtendedDataType>
			<FeatureClass>IntrastatDispatchIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS9458</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceAutoNumbering_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtInvoiceAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOff</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjInvoiceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineProperty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjLinePropertyCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ListCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OnAccountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS7659</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymDayId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymDayId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPaymCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjGroupId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProposalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjProposalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PSAEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAInvoiceFormats</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PSAInvoiceFormats</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAInvoiceMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PSAInvoiceMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAInvoiceTxtPost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS117907</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAInvoiceTxtPre</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS28004</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAnfRefProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PSAWorkerSubmittedBy</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesFreightChargeTerms_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<EnumType>WMSFreightChargeTerms</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesOrderbalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS464</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@SYS9913</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@SYS5878</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxInformation_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxPrintOnInvoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPrintOnInvoice</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxServiceCodeId_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxServiceCodeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxSpecifyByLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS19934</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxSpecifyTotal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS19934</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Triangulation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATInvoiceDescTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATInvoiceDescIdRef_CN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleLicensePlate_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvNoOfCarrier_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleLicensePlateState_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvStateRegistered_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VolumeQty_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VolumeQty_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VolumeType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VolumeType_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerApprovedBy</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceType_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYP4860656</Label>
			<Visible>No</Visible>
			<EnumType>InvoiceType_MY</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId_NO</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPurchaseOrder_NO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustRef_NO</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>CustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceCFDIConfirmNumber_MX</Name>
			<ExtendedDataType>EInvoiceCFDIConfirmNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATPaymMethod_MX</Name>
			<ExtendedDataType>SATPaymMethod_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATPurpose_MX</Name>
			<ExtendedDataType>SATPurpose_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber_MX</Name>
			<ExtendedDataType>CertificateNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalAddress_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<Label>@MexicoCFDI:FiscalAddress</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForeignTrade_MX</Name>
			<ExtendedDataType>ForeignTrade_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumRegIdTrib_MX</Name>
			<ExtendedDataType>NumRegIdTrib_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATIncoterm_MX</Name>
			<ExtendedDataType>SATIncoterm_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceCertificate_MX</Name>
			<ExtendedDataType>SourceCertificate_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WithIGSTPayment_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@TaxGSTSEZ:WithIGSTPayment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WouldYouClaimRefund_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@TaxGSTSEZ:WouldYouClaimRefund_IN</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymMode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscAmount</Name>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<FeatureClass>ProjEnableInvoiceFormsHeaderLineViewFeature</FeatureClass>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecalculateTotalsStatus</Name>
			<FeatureClass>ProjInvoiceProposalPerformanceEnhancementFeature</FeatureClass>
			<EnumType>ProjProposalRecalculateTotalsStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATNumTableType</Name>
			<Visible>No</Visible>
			<EnumType>TaxExemptNumberSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATNumRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProposalNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProposalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_ProjPropos</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerApprovedBy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FiscalEstablishment_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerVoucher</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerVoucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjInvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmount</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerVoucher</MapField>
					<MapFieldTo>LedgerVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceNum</MapField>
					<MapFieldTo>ProjInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
					<MapFieldTo>CashDiscDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
					<MapFieldTo>CashDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
					<MapFieldTo>Payment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
					<MapFieldTo>CashDiscCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesOrderbalance</MapField>
					<MapFieldTo>SalesOrderbalance</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Updated</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GroupId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
					<MapFieldTo>PaymentSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OneTimeAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>ProjInvoiceProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Proforma</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>ProjInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecondary</MapField>
					<MapFieldTo>ExchrateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymDayId</MapField>
					<MapFieldTo>PaymDayId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroupId</MapField>
					<MapFieldTo>NumberSequenceGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SumTax</MapField>
					<MapFieldTo>SumTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedDueDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Prepayment</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendPaymentGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATOnPayment_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Correct_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceDate_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceCode_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceRegister_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureModule_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceStatus_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WhoIsAuthor_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsInvoice_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesInvoicePostingType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NonRealRevenue_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchInternalInvoiceId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsigneeAccount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsignorAccount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FacturedFully_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OffSessionId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintStandardCurrency_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyIssuedName_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyDate_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintOriginals_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintCopies_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff_W</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPaymOrderID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscBaseDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate_ES</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress_RU</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitedVATInvoice</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ReasonCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxIntgrExportDocSourcePostingMap_CN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CustBankAccountId</MapField>
					<MapFieldTo>CustBankAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATInvoiceDescTable</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>ListCodeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyTaxId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxExemptVATNumMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumRecId</MapField>
					<MapFieldTo>VATNumRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumTableType</MapField>
					<MapFieldTo>VATNumTableType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CashDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>ProjCashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBankAccount</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBankAccountId</Name>
					<Field>CustBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<Field>InvoiceAccount</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_Invoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_Invoice</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_Order</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_Order</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvMode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<SourceEDT>CustDlvModeId</SourceEDT>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<SourceEDT>CustDlvTermId</SourceEDT>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocumentType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocumentType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentType_BR</Name>
					<Field>FiscalDocumentType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalEstablishment_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalEstablishment_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalEstablishment_BR</Name>
					<Field>FiscalEstablishment_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FundingSource</Name>
					<Field>FundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntrastatPort</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LanguageTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LanguageTable1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymDay</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymDay</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymDay</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymDayId</Name>
					<SourceEDT>CustPaymDayId</SourceEDT>
					<Field>PaymDayId</Field>
					<RelatedField>PaymDayId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymDayIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>ProjPaymCode</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjGroupId</Name>
					<SourceEDT>ProjGroupId</SourceEDT>
					<Field>ProjGroupId</Field>
					<RelatedField>ProjGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceDate</Name>
					<Field>InvoiceDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceId</Name>
					<SourceEDT>ProjInvoiceId</SourceEDT>
					<Field>ProjInvoiceId</Field>
					<RelatedField>ProjInvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceTable_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>ProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAWorkerSubmittedBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_11</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_11_ProjProposalJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAWorkerSubmittedBy</Name>
					<Field>PSAWorkerSubmittedBy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxInformation_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxInformation_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxInformation_IN</Name>
					<Field>TaxInformation_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UserInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CanceledBy</Name>
					<SourceEDT>UserId</SourceEDT>
					<Field>CanceledBy</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VATInvoiceDescTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>VATInvoiceDescTable_CN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VATInvoiceDescTable</Name>
					<Field>VATInvoiceDescTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerApproved</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerApprovedBy</Name>
					<Field>WorkerApprovedBy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ContactPerson_NO</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId_NO</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId_NO</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATPaymMethod_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTablePaymMethod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATPaymMethod_MX</Name>
					<Field>SATPaymMethod_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>4</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATPurpose_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTablePurpose</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATPurpose_MX</Name>
					<Field>SATPurpose_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>3</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegion_MX</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalAddress_MX</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>FiscalAddress_MX</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATIncoterm_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATIncoterm_MX</Name>
					<Field>SATIncoterm_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>5</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjProposalJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDefaultDimension</Name>
					<Field>LedgerDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>