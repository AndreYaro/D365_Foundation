<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfirmingPO</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ConfirmingPO extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the business logic for when field values are modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field that was modified.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        PurchTable      purchTable;
        select ConfirmingPO from purchTable
            where purchTable.ConfirmingPO == this.RecId;
        super(_fieldId);
        switch (_fieldId)
        {
            case fieldNum(ConfirmingPO,ConfirmingPOID):
            if (purchTable.ConfirmingPO)
            {
                if ( Box::yesNo("@SPS575",DialogButton::Yes) == DialogButton::No)
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
            }
            break;
            case fieldNum(ConfirmingPO,ConfirmingPOMessage):
            if (purchTable.ConfirmingPO)
            {
                if ( Box::yesNo("@SPS575",DialogButton::Yes) == DialogButton::No)
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
            }
            break;
            case fieldNum(ConfirmingPO,Description):
            if (purchTable.ConfirmingPO)
            {
                if ( Box::yesNo("@SPS575",DialogButton::Yes) == DialogButton::No)
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
            }
            break;
            case fieldNum(ConfirmingPO,LanguageId):
            if (purchTable.ConfirmingPO)
            {
                if ( Box::yesNo("@SPS575",DialogButton::Yes) == DialogButton::No)
                {
                    this.(_fieldId) = this.orig().(_fieldId);
                }
            }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>ConfirmingPO</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ConfirmingPO</c> table record to be checked for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!ConfirmingPO::exist(_recId))
        {
            ret = checkFailed(strFmt(ConfirmingPO::txtNotExist(),_recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>ConfirmingPO</c> table
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ConfirmingPO</c> table record to be checked for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId )
    {
        return (select firstonly RecId from confirmingPO
                    where confirmingPO.RecId     == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ConfirmingPO</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The recordID of the <c>ConfirmingPO</c> table to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to be used when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ConfirmingPO</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ConfirmingPO find(
        recId _recId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ConfirmingPO confirmingPO;

        confirmingPO.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            confirmingPO.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            confirmingPO
            where
            confirmingPO.RecId== _recId;

        return confirmingPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByConfirmingPOID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ConfirmingPO</c> table for given confirming order.
    /// </summary>
    /// <param name="_confirmingPOID">
    /// The Confirming PO ID of the record to find.
    /// </param>
    /// <param name="_languageId">
    /// The Language of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to be used when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ConfirmingPO</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ConfirmingPO findByConfirmingPOID(
        ConfirmingPOID _confirmingPOID ,LanguageId _languageId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ConfirmingPO confirmingPO;

        confirmingPO.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            confirmingPO.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            confirmingPO
            where
            confirmingPO.ConfirmingPOID== _confirmingPOID &&
            confirmingPO.LanguageId == _languageId;

        return confirmingPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>ConfirmingPO</c>table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SPS293";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SPS298</DeveloperDocumentation>
	<FormRef>ConfirmingPOCodes</FormRef>
	<Label>@SPS290</Label>
	<TitleField1>ConfirmingPOID</TitleField1>
	<TitleField2>LanguageId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>PublicSector</Modules>
	<ReplacementKey>ConfirmingIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PurchTable</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation>
      </Relation>
			<Table>PurchTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmingPOID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmingPOMessage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmingPOID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConfirmingPO</Name>
			<Label>@SPS591</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmingPOID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MessageDetails</Name>
			<Label>@SPS891</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmingPOMessage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfirmingPOID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfirmingPOID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConfirmingPOMessage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfirmingPOMessage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ConfirmingIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ConfirmingPOID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LanguageId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>LanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>LanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>