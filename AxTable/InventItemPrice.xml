<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemPrice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blocked</Name>
				<Source><![CDATA[
    display InventItemPriceBlocked blocked()
    {
        return CostingVersion::blocked(this.VersionId, CostingVersionStatus::Current);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costGroupId</Name>
				<Source><![CDATA[
    CostGroupId costGroupId()
    {
        InventItemCostGroupRollup   inventItemCostGroupRollup;
        select firstonly CostGroupId from inventItemCostGroupRollup
            where inventItemCostGroupRollup.InventItemPriceRefRecId == this.RecId
               && inventItemCostGroupRollup.CostLevel               == InventCostLevel::Total;

        return inventItemCostGroupRollup.CostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBOMId</Name>
				<Source><![CDATA[
    display BOMId displayBOMId()
    {
        return this.InventItemPriceMap::displayBOMId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBOMLog</Name>
				<Source><![CDATA[
    display NoYes displayBOMLog()
    {
        return this.InventItemPriceMap::displayBOMLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalculated</Name>
				<Source><![CDATA[
    display InventItemPriceCalculated displayCalculated()
    {
        return this.InventItemPriceMap::displayCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCostCalculationMethod</Name>
				<Source><![CDATA[
    public display BOMCostCalculationMethod displayCostCalculationMethod()
    {
        return this.InventItemPriceMap::displayCostCalculationMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
    display Name displayItemName()
    {
        return this.InventItemPriceMap::displayItemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProfitSet</Name>
				<Source><![CDATA[
    display CostProfitSet displayProfitSet()
    {
        return this.InventItemPriceMap::displayProfitSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRouteId</Name>
				<Source><![CDATA[
    display RouteId displayRouteId()
    {
        return this.InventItemPriceMap::displayRouteId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
    display UnitOfMeasureSymbol displayUnitId()
    {
        return this.InventItemPriceMap::displayUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVersionBlocked</Name>
				<Source><![CDATA[
    display NoYes displayVersionBlocked()
    {
        return this.CostingVersionMap::displayVersionBlocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVersionName</Name>
				<Source><![CDATA[
    display Name displayVersionName()
    {
        return this.CostingVersionMap::displayVersionName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCostingVersion</Name>
				<Source><![CDATA[
    void initFromCostingVersion()
    {
        CostingVersion    costingVersion = CostingVersion::find(this.VersionId);

        this.CostingType = CostingVersion::convertCostingType2InventItemCostingType(costingVersion.CostingType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItemPriceSim</Name>
				<Source><![CDATA[
    public void initFromInventItemPriceSim(InventItemPriceSim _inventItemPriceSim)
    {
        this.InventItemPriceMap::initFromInventItemPriceMap(_inventItemPriceSim,
                                                            _inventItemPriceSim.VersionId,
                                                            _inventItemPriceSim.Price,
                                                            _inventItemPriceSim.PriceCalcId,
                                                            _inventItemPriceSim.PriceSecCur_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceConvert</Name>
				<Source><![CDATA[
    public void initFromPriceConvert(PriceConvert _priceConvert)
    {
        this.Price       = _priceConvert.parmPrice();
        this.PriceUnit   = _priceConvert.parmPriceUnit();
        this.Markup      = _priceConvert.parmMarkup();
        this.PriceQty    = _priceConvert.parmPriceQty();
        this.UnitID      = _priceConvert.parmUnitId();
        this.PriceSecCur_RU  = _priceConvert.parmPriceSecCur_RU();
        this.MarkupSecCur_RU = _priceConvert.parmMarkupSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTableModule</Name>
				<Source><![CDATA[
    public void initFromInventTableModule(InventTableModule _inventTableModule)
    {
        this.ItemId                 = _inventTableModule.ItemId;
        this.Markup                 = _inventTableModule.Markup;
        this.PriceAllocateMarkup    = _inventTableModule.AllocateMarkup;
        this.Price                  = _inventTableModule.Price;
        this.PriceQty               = _inventTableModule.PriceQty;
        this.PriceUnit              = _inventTableModule.PriceUnit;
        this.UnitID                 = _inventTableModule.UnitId;
        this.PriceSecCur_RU         = _inventTableModule.PriceSecCur_RU;
        this.MarkupSecCur_RU        = _inventTableModule.MarkupSecCur_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialActivationDate</Name>
				<Source><![CDATA[
    protected TransDate initialActivationDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a cost group rollup and verifies that the insert action is not called from a form.
    /// </summary>
    /// <param name="_inventItemPriceRefRecId">
    /// If an invent item price record ID is specified, copy the cost group rollup from the specified item
    /// price.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The insert action is called from a form.
    /// </exception>
    public void insert(InventItemPriceRefRecId  _inventItemPriceRefRecId = 0)
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!this.ItemId)
        {
            throw(error(strFmt("@SYS26332", fieldPName(InventItemPrice, ItemId))));
        }

        if (!this.InventDimId)
        {
            this.InventDimId = InventDim::inventDimIdBlank();
        }
        this.ActivationDate = this.initialActivationDate();

        ttsbegin;
        super();
        InventItemPrice::checkCostPriceChangeBackDated(this);
        CostingVersion::updateLastUpdated(this.VersionId);

        // Instead of calculating the inventItemCostGroupRollup table
        // based on the BOM Calculation, copy it from a given price
        if (_inventItemPriceRefRecId != 0)
        {
            if (this.isStdCostPrice())
            {
                InventItemCostGroupRollup::copyCostGroupRollupFromPrice(_inventItemPriceRefRecId, this.RecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStdCostPrice</Name>
				<Source><![CDATA[
    public boolean isStdCostPrice()
    {
        return this.InventItemPriceMap::isStdCostPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markup</Name>
				<Source><![CDATA[
    MarkupAmount  markup()
    {
        return this.InventPriceMap::markup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupSecCur_RU</Name>
				<Source><![CDATA[
    public InventPriceMarkupSecCur_RU markupSecCur_RU()
    {
        return this.InventPriceMap::markupSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
    Price  pcsPrice()
    {
        return this.InventPriceMap::pcsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPriceSecCur_RU</Name>
				<Source><![CDATA[
    public PriceSecCur_RU pcsPriceSecCur_RU()
    {
        return this.InventPriceMap::pcsPriceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>price</Name>
				<Source><![CDATA[
    Price price()
    {
        return this.InventPriceMap::price();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceQty</Name>
				<Source><![CDATA[
    PriceQty priceQty()
    {
        return this.InventPriceMap::priceQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceSecCur_RU</Name>
				<Source><![CDATA[
    public PriceSecCur_RU priceSecCur_RU()
    {
        return this.InventPriceMap::priceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    PriceUnit  priceUnit()
    {
        return this.InventPriceMap::priceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stdCostMaterialPcsPrice</Name>
				<Source><![CDATA[
    public Price stdCostMaterialPcsPrice()
    {
        InventItemCostGroupRollup   totalLevel;
        InventItemCostGroupRollup   singleLevel;

        // Find material cost group used to create the standard cost
        select totalLevel
        where totalLevel.InventItemPriceRefRecId == this.RecId
           && totalLevel.CostLevel == InventCostLevel::Total;

        if (totalLevel.Split == NoYes::No)
        {
            return totalLevel.pcsPrice();
        }
        else
        {
            select singleLevel
            where singleLevel.InventItemPriceRefRecId == this.RecId
               && singleLevel.CostLevel == InventCostLevel::Single
               && singleLevel.CostGroupId == totalLevel.CostGroupId;

            return singleLevel.pcsPrice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!this.ItemId)
        {
            throw(error(strFmt("@SYS26332", fieldPName(InventItemPrice, ItemId))));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSiteToInventDim</Name>
				<Source><![CDATA[
    public static InventDim addSiteToInventDim(
        InventDimId     _inventDimId,
        InventSiteId    _inventSiteId,
        boolean         _create         = false
        )
    {
        InventDim       inventDim;
        InventDim   siteInventDim;

        inventDim               = InventDim::find(_inventDimId);
        inventDim.InventSiteId  = _inventSiteId;
        siteInventDim           = _create ? InventDim::findOrCreate(inventDim) : InventDim::findDim(inventDim);

        return siteInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSiteId</Name>
				<Source><![CDATA[
    public static InventSiteId changeSiteId(
        InventSiteId    _oldSiteId,
        InventSiteId    _newSiteId
        )
    {
        return _newSiteId ? _newSiteId : _oldSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCostPriceChangeBackDated</Name>
				<Source><![CDATA[
    public static void checkCostPriceChangeBackDated(InventItemPrice _inventItemPrice)
    {
        #ISOCountryRegionCodes

        InventModelGroup inventModelGroup = InventTable::find(_inventItemPrice.ItemId).modelGroup();

        if ((inventModelGroup.inventModelType().stdCostBased() ||
            (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && inventModelGroup.inventModelTypeSecCur_RU().stdCostBased()))
            && _inventItemPrice.PriceType == CostingVersionPriceType::Cost)
        {
            if (InventItemPrice::isCostPriceChangeBackDated(_inventItemPrice))
            {
                throw error("@SYS104352");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPriceTypeToModuleInventPurchSalesDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for converting a <c>CostingVersionPriceType</c> enum to a <c>ModuleInventPurchSales</c> enum.
    /// </summary>
    /// <param name = "_costingVersionPriceType">The enum value to convert.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where the conversion result can be provided.</param>
    static delegate void convertPriceTypeToModuleInventPurchSalesDelegate(CostingVersionPriceType _costingVersionPriceType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>convPriceTypeToModuleInventPurchSales</Name>
				<Source><![CDATA[
    public static ModuleInventPurchSales convPriceTypeToModuleInventPurchSales(CostingVersionPriceType _priceType)
    {
        ModuleInventPurchSales  moduleInventPurchSales;

        switch (_priceType)
        {
            case CostingVersionPriceType::Cost:
                moduleInventPurchSales = ModuleInventPurchSales::Invent;
                break;

            case CostingVersionPriceType::Purch:
                moduleInventPurchSales = ModuleInventPurchSales::Purch;
                break;

            case CostingVersionPriceType::Sales:
                moduleInventPurchSales = ModuleInventPurchSales::Sales;
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                InventItemPrice::convertPriceTypeToModuleInventPurchSalesDelegate(_priceType, result);
                if (result.hasResult())
                {
                    moduleInventPurchSales = result.result();
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }

        return moduleInventPurchSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPricesExistForItem</Name>
				<Source><![CDATA[
    public static boolean costPricesExistForItem(ItemId _itemId)
    {
        return (select firstonly inventItemPrice
                    where inventItemPrice.ItemId    == _itemId  &&
                          inventItemPrice.PriceType == CostingVersionPriceType::Cost).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPricesExistForSymbol</Name>
				<Source><![CDATA[
    public static boolean costPricesExistForSymbol(UnitOfMeasureSymbol _symbol)
    {
        InventItemPrice inventItemPrice;
        select firstonly crosscompany RecId from inventItemPrice
            where inventItemPrice.UnitID == _symbol
                && inventItemPrice.PriceType == CostingVersionPriceType::Cost;

        return inventItemPrice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostingVersion</Name>
				<Source><![CDATA[
    public static InventPriceMap findCostingVersion(
        ItemId                  _itemId,
        CostingVersionId        _versionId,
        PriceDate               _priceDate,
        CostingVersionPriceType _priceType,
        InventDimId             _inventDimId,
        InventSiteId            _newSiteId          = ''
        )
    {
        InventPriceMap      inventPriceMap;
        InventItemPriceSim  inventItemPriceSim;

        if (_itemId
            && InventDim::find(_inventDimId).isOwnerCurrentLegalEntity())
        {
            InventItemPrice     inventItemPrice;

            InventTable inventTable         = InventTable::find(_itemId);
            InventDim inventDimCriteria     = InventItemPrice::initializeInventDimCriteria(inventTable, _inventDimId);
            inventDimCriteria.InventSiteId  = InventItemPrice::changeSiteId(inventDimCriteria.InventSiteId, _newSiteId);

            InventDim inventDim = InventDim::findDim(inventDimCriteria);

            select firstOnly inventItemPrice
            order by ActivationDate desc, CreatedDateTime desc
            where inventItemPrice.ItemId         == _itemId
               && inventItemPrice.VersionId      == _versionId
               && inventItemPrice.ActivationDate <= _priceDate
               && inventItemPrice.PriceType      == _priceType
               && inventItemPrice.InventDimId    == inventDim.inventDimId;

            select firstOnly inventItemPriceSim
            order by FromDate desc
            where inventItemPriceSim.ItemId     == _itemId
               && inventItemPriceSim.VersionId  == _versionId
               && inventItemPriceSim.FromDate   <= _priceDate
               && inventItemPriceSim.PriceType   == _priceType
               && inventItemPriceSim.InventDimId == inventDim.inventDimId;

            if (inventItemPrice.ActivationDate > inventItemPriceSim.FromDate)
            {
                inventPriceMap = inventItemPrice;
            }
            else
            {
                inventPriceMap = inventItemPriceSim;
            }
        }
        else
        {
            inventPriceMap = inventItemPriceSim;
        }

        return inventPriceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrent</Name>
				<Source><![CDATA[
    public static InventItemPrice findCurrent(
        ItemId                  _itemId,
        CostingVersionPriceType _priceType,
        InventDimId             _inventDimId,
        TransDate               _activationDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        InventSiteId            _newSiteId      = '',
        InventItemCostingType   _costingType    = InventItemCostingType::Default,
        boolean                 _forUpdate      = false
        )
    {
        InventItemPrice     inventItemPrice;

        if (_itemId
            && InventDim::find(_inventDimId).isOwnerCurrentLegalEntity())
        {
            str cacheKey    = InventItemPrice::getCacheKey(_itemId, _priceType, _inventDimId, _activationDate, _newSiteId, _costingType);
            inventItemPrice = SysTransactionScopeCache::get(tableStr(InventItemPrice), cacheKey, inventItemPrice);

            if (!inventItemPrice || inventItemPrice.selectForUpdate() != _forUpdate)
            {
                InventTable inventTable         = InventTable::find(_itemId);
                InventDim inventDimCriteria     = InventItemPrice::initializeInventDimCriteria(inventTable, _inventDimId);
                inventDimCriteria.InventSiteId  = InventItemPrice::changeSiteId(inventDimCriteria.InventSiteId, _newSiteId);
                inventItemPrice.selectForUpdate(_forUpdate);

                InventDim inventDim = InventDim::findDim(inventDimCriteria);

                select firstonly inventItemPrice
                order by ActivationDate desc, CreatedDateTime desc
                where inventItemPrice.ItemId         == _itemId
                   && inventItemPrice.PriceType      == _priceType
                   && inventItemPrice.ActivationDate <= _activationDate
                   && (inventItemPrice.CostingType   == _costingType || _costingType == InventItemCostingType::Default)
                   && inventItemPrice.InventDimId    == inventDim.inventDimId;

                SysTransactionScopeCache::set(tableStr(InventItemPrice), cacheKey, inventItemPrice);
            }
        }

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static InventItemPrice findRecId(RecId       recId,
                                     boolean     _forUpdate = false )
    {
        InventItemPrice inventItemPrice;

        inventItemPrice.selectForUpdate(_forUpdate);

        select inventItemPrice
            where inventItemPrice.RecId == recId;

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    protected static str getCacheKey(
            ItemId                  _itemId,
            CostingVersionPriceType _priceType,
            InventDimId             _inventDimId,
            TransDate               _activationDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
            InventSiteId            _newSiteId      = '',
            InventItemCostingType   _costingType    = InventItemCostingType::Default)
    {
        str key = _itemId + '#'
                + int2str(enum2int(_priceType)) + '#'
                + _inventDimId + '#'
                + date2StrXpp(_activationDate) + '#'
                + _newSiteId + '#'
                + int2str(enum2int(_costingType)) + '#'
                + curext();

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAccessToCostPricePcs</Name>
				<Source><![CDATA[
    public static boolean hasAccessToCostPricePcs()
    {
        if (!hasFieldAccess(tableNum(InventItemPrice), fieldNum(InventItemPrice, Price)) ||
            !hasFieldAccess(tableNum(InventItemPrice), fieldNum(InventItemPrice, PriceQty)) ||
            !hasFieldAccess(tableNum(InventItemPrice), fieldNum(InventItemPrice, PriceUnit)) ||
            !hasFieldAccess(tableNum(InventItemPrice), fieldNum(InventItemPrice, Markup)))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostPriceChangeBackDated</Name>
				<Source><![CDATA[
    public static boolean isCostPriceChangeBackDated(InventItemPrice _inventItemPrice)
    {
        InventItemPrice inventItemPrice;

        select firstonly RecId
        from inventItemPrice
        where inventItemPrice.ItemId            == _inventItemPrice.ItemId
           && inventItemPrice.PriceType         == _inventItemPrice.PriceType
           && inventItemPrice.InventDimId       == _inventItemPrice.InventDimId
           && inventItemPrice.ActivationDate    >  _inventItemPrice.ActivationDate;

        return inventItemPrice.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupInventDimParmAndCriteria</Name>
				<Source><![CDATA[
    [SysObsolete('Use InventItemPrice::initializeInventDimCriteria() and InventDimParm.setAllInventDim() instead.', false, 31\03\2018)]
    public static container setupInventDimParmAndCriteria(
        InventTable _inventTable,
        InventDimId _inventDimId,
        InventDim   _inventDim      = null)
    {
        InventDim       inventDimCriteria = InventItemPrice::initializeInventDimCriteria(_inventTable, _inventDimId, _inventDim);

        InventDimParm   inventDimParm;
        inventDimParm.setAllInventDim();

        return [inventDimParm, inventDimCriteria];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimCriteria</Name>
				<Source><![CDATA[
    public static InventDim initializeInventDimCriteria(
        InventTable _inventTable,
        InventDimId _inventDimId,
        InventDim   _inventDim      = null)
    {
        InventDim       inventDimCriteria;

        if (_inventDim || _inventDimId)
        {
            inventDimCriteria = _inventDim ? _inventDim.data() : InventDim::find(_inventDimId);
        }
        else
        {
            inventDimCriteria = InventDim::findDim(_inventDim);
        }

        inventDimCriteria.clearNotSiteAndProductDim(InventDimGroupSetup::newInventTable(_inventTable));
        if (!_inventTable.ItemDimCostPrice)
        {
            inventDimCriteria.clearProductDimensions();
        }

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stdCostFindDate</Name>
				<Source><![CDATA[
    public static InventItemPrice stdCostFindDate(
        InventTable     _inventTable,
        PriceDate       _priceDate,
        InventDimId     _inventDimId    = '',   // can be = '' if setting the _inventDim buffer
        InventDim       _inventDim      = null, // set inventDim parameter for better performance if avail
        InventSiteId    _newSiteId      = '',
        boolean         _throwError     = false
    )
    {
        InventItemPrice         inventItemPrice;
        InventDim               inventDim;
        InventDimId             inventDimId;

        void initInventDimId()
        {
            if (!_inventDimId && _inventDim)
            {
                inventDim = InventDim::findOrCreate(_inventDim);
                inventDimId = inventDim.InventDimId;
            }
            else
            {
                inventDimId = _inventDimId;
            }
        }

        void initInventDim()
        {
            if (_inventDimId && !_inventDim)
            {
                inventDim = InventDim::find(_inventDimId);
            }
            else
            {
                inventDim = InventDim::findOrCreate(_inventDim);
            }
        }

        initInventDimId();
        initInventDim();

        if (inventDim.isOwnerCurrentLegalEntity())
        {
            inventItemPrice = InventItemPrice::findCurrent(_inventTable.ItemId, CostingVersionPriceType::Cost, inventDimId, _priceDate, _newSiteId, InventItemCostingType::Standard);

            if (!inventItemPrice.RecId)
            {
                inventItemPrice = InventItemPrice::stdCostFindFirst(_inventTable, inventDim, _newSiteId);
            }

            if (_throwError && !inventItemPrice.RecId)
            {
                throw error(strFmt("@SYS104348", _inventTable.ItemId));
            }
        }

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stdCostFindFirst</Name>
				<Source><![CDATA[
    public static InventItemPrice stdCostFindFirst(
        InventTable             _inventTable,
        InventDim               _inventDim,
        InventSiteId            _newSiteId      = '')
    {
        InventItemPrice         firstInventItemPrice;

        if (_inventDim.isOwnerCurrentLegalEntity())
        {
            InventDimId             inventDimId;

            InventDim inventDimCriteria     = InventItemPrice::initializeInventDimCriteria(_inventTable, inventDimId, _inventDim);
            inventDimCriteria.InventSiteId  = InventItemPrice::changeSiteId(inventDimCriteria.InventSiteId, _newSiteId);
            
            InventDim inventDim = InventDim::findDim(inventDimCriteria);

            select firstonly firstInventItemPrice
                order by ActivationDate asc, CreatedDateTime desc
                where firstInventItemPrice.ItemId       == _inventTable.ItemId
                   && firstInventItemPrice.PriceType    == CostingVersionPriceType::Cost
                   && firstInventItemPrice.CostingType  == InventItemCostingType::Standard
                   && firstInventItemPrice.InventDimId    == inventDim.inventDimId;
        }

        return firstInventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stdCostFindPrev</Name>
				<Source><![CDATA[
    public static InventItemPrice stdCostFindPrev(
        ItemId           _itemId,
        InventDimId      _inventDimId,
        CreatedDateTime  _createdDateTime
        )
    {
        InventItemPrice         preInventItemPrice;

        if (InventDim::find(_inventDimId).isOwnerCurrentLegalEntity())
        {
            InventTable inventTable     = InventTable::find(_itemId);
            InventDim inventDimCriteria = InventItemPrice::initializeInventDimCriteria(inventTable, _inventDimId);
            InventDim inventDim         = InventDim::findDim(inventDimCriteria);

            select firstonly reverse preInventItemPrice
                    order by CreatedDateTime
                    where preInventItemPrice.ItemId          == _itemId
                       && preInventItemPrice.CreatedDateTime <  _createdDateTime
                       && preInventItemPrice.PriceType       == CostingVersionPriceType::Cost
                       && preInventItemPrice.InventDimId     == inventDim.inventDimId;
        }

        return preInventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stdCostFindPrevLocked</Name>
				<Source><![CDATA[
    public static InventItemPrice stdCostFindPrevLocked(
        ItemId           _itemId,
        InventDimId      _inventDimId,
        CreatedDateTime  _createdDateTime
        )
    {
        // Now try and get the previous cost price
        InventItemPrice         lockedInventItemPrice;

        if (InventDim::find(_inventDimId).isOwnerCurrentLegalEntity())
        {
            Connection              connection = new Connection();
            Statement               statement = connection.createStatement();
            str                     sql;

            InventTable inventTable     = InventTable::find(_itemId);
            InventDim inventDimCriteria = InventItemPrice::initializeInventDimCriteria(inventTable, _inventDimId);
            InventDim inventDim         = InventDim::findDim(inventDimCriteria);

            // Ensure that the price will be locked - this will give an update lock
            select firstonly pessimisticLock reverse lockedInventItemPrice
                order by CreatedDateTime
                where lockedInventItemPrice.ItemId          == _itemId
                   && lockedInventItemPrice.CreatedDateTime <  _createdDateTime
                   && lockedInventItemPrice.PriceType       == CostingVersionPriceType::Cost
                   && lockedInventItemPrice.InventDimId     == inventDim.inventDimId;

            SysDictTable dictInventItemPrice = new SysDictTable(tableNum(InventItemPrice));

            // Obtain an exclusive lock
            if (InventItemPriceLockWithRecIdFlight::instance().isEnabled())
            {
                // Match RecId index to avoid potential deadlock
                sql =  strFmt('SELECT RECID FROM %1 WITH(XLOCK)'
                    + '\n WHERE %2 = %3',
                    dictInventItemPrice.name(DbBackend::Sql),                 
                    dictInventItemPrice.fieldName(fieldNum(InventItemPrice, RecId), DbBackend::Sql),
                    lockedInventItemPrice.RecId);
            }
            else
            {
                sql =  strFmt('SELECT * FROM %1 WITH(XLOCK)'
                    + '\n WHERE %2 = %3'
                    + '\n AND %4 = %5'
                    + '\n AND %6 = %7',
                    dictInventItemPrice.name(DbBackend::Sql),
                    dictInventItemPrice.fieldName(fieldNum(InventItemPrice, Partition), DbBackend::Sql),
                    lockedInventItemPrice.Partition,
                    dictInventItemPrice.fieldName(fieldNum(InventItemPrice, DataAreaId), DbBackend::Sql),
                    "'" + curext() + "'",
                    dictInventItemPrice.fieldName(fieldNum(InventItemPrice, RecId), DbBackend::Sql),
                    lockedInventItemPrice.RecId);
            }

            new SqlStatementExecutePermission(sql).assert();
            statement.executeUpdateWithParameters(sql, SqlParams::create());
            statement.close();
            connection.finalize();

            CodeAccessPermission::revertAssert();
        }

        return lockedInventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastCostPrice</Name>
				<Source><![CDATA[
    static void updateLastCostPrice(
        InventTableModule   _inventTableModule,
        InventDim           _inventDim,
        PriceDate           _priceDate
        )
    {
        if (_inventDim.isOwnerCurrentLegalEntity())
        {
            InventItemPrice inventItemPrice;
            boolean         updateLastPrice;
            updateLastPrice = false;
            inventItemPrice = InventItemPrice::findCurrent(_inventTableModule.ItemId,
                                                           CostingVersionPriceType::Cost,
                                                           _inventDim.InventDimId,
                                                           DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                           '',
                                                           InventItemCostingType::Last);
            if (inventItemPrice)
            {
                if (inventItemPrice.ActivationDate <= _priceDate)
                {
                    if (inventItemPrice.Price          != _inventTableModule.Price ||
                        inventItemPrice.PriceSecCur_RU != _inventTableModule.PriceSecCur_RU)
                    {
                        updateLastPrice = true;
                    }
                }
            }
            else
            {
                updateLastPrice = true;
            }

            if (updateLastPrice)
            {
                InventItemPrice::updateLastPrice(_inventTableModule, CostingVersionPriceType::Cost, _inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastPrice</Name>
				<Source><![CDATA[
    static void updateLastPrice(
        InventTableModule       _inventTableModule,
        CostingVersionPriceType _priceType,
        InventDim               _inventDim
        )
    {
        if (_inventDim.isOwnerCurrentLegalEntity())
        {
            InventItemPrice oldInventItemPrice;
            InventItemPrice newInventItemPrice;

            if (_inventTableModule.inventTable().ItemDimCostPrice &&
                ! InventDimCombination::findByInventDim(_inventTableModule.ItemId, _inventDim).RecId)
            {
                // Only create a last price for valid InventDimCombinations
                return;
            }

            ttsbegin;
            oldInventItemPrice = InventItemPrice::findCurrent(_inventTableModule.ItemId,
                                                              _priceType,
                                                              _inventDim.InventDimId,
                                                              DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                              '',
                                                              InventItemCostingType::Last,
                                                              true);
            if (! InventParameters::find().LastPriceHistory || oldInventItemPrice.CreatedDateTime == DateTimeUtil::utcNow())
            {
                if (oldInventItemPrice)
                {
                    oldInventItemPrice.delete();
                }
            }

            newInventItemPrice.initFromInventTableModule(_inventTableModule);
            newInventItemPrice.InventDimId  = InventTable::priceInventDimId(_inventTableModule.ItemId, _inventDim.InventDimId);
            newInventItemPrice.CostingType  = InventItemCostingType::Last;
            newInventItemPrice.PriceType    = _priceType;
            newInventItemPrice.LastPriceUniquenessAllowance = newGuid();
            newInventItemPrice.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastPurchPrice</Name>
				<Source><![CDATA[
    static void updateLastPurchPrice(
        InventTableModule   _inventTableModule,
        InventDim           _inventDim,
        PriceDate           _priceDate
        )
    {
        if (_inventDim.isOwnerCurrentLegalEntity())
        {
            InventItemPrice inventItemPrice;
            boolean         updateLastPrice;

            if (_inventTableModule.Price)
            {
                updateLastPrice = false;
                inventItemPrice = InventItemPrice::findCurrent(_inventTableModule.ItemId,
                                                               CostingVersionPriceType::Purch,
                                                               _inventDim.InventDimId,
                                                               DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                               '',
                                                               InventItemCostingType::Last);
                if (inventItemPrice)
                {
                    if (inventItemPrice.ActivationDate <= _priceDate)
                    {
                        if (inventItemPrice.Price        != _inventTableModule.Price     ||
                            inventItemPrice.Markup       != _inventTableModule.Markup    ||
                            inventItemPrice.PriceUnit       != _inventTableModule.PriceUnit      ||
                            inventItemPrice.PriceSecCur_RU  != _inventTableModule.PriceSecCur_RU ||
                            inventItemPrice.MarkupSecCur_RU != _inventTableModule.MarkupSecCur_RU)
                        {
                            updateLastPrice = true;
                        }
                    }
                }
                else
                {
                    updateLastPrice = true;
                }

                if (updateLastPrice)
                {
                    InventItemPrice::updateLastPrice(_inventTableModule, CostingVersionPriceType::Purch, _inventDim);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123801</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>InventItemPrice</FormRef>
	<Label>@SYS11865</Label>
	<TableGroup>TransactionHeader</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>VersionId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemIdx</PrimaryIndex>
	<ReplacementKey>ItemIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventItemCostGroupRollup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemCostGroupRollup</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastPriceUniquenessAllowance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalculationIdentification</Name>
			<Label>@SYS112493</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayProfitSet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCostCalculationMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceAllocateMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SecondaryCost_RU</Name>
			<Label>@GLS102435</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceSecCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StandardCost</Name>
			<Label>@SYS104353</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StdCostTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StdCostVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ActivationDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS54971</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostingType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventItemCostingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Markup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountNonMonetary</ExtendedDataType>
			<Label>@SYS25095</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarkupSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceMarkupSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPriceNonMonetary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceAllocateMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceAllocateMarkup</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceCalcId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceCalcId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceMarkupQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPriceSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostingVersionPriceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceUnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StdCostTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StdCostVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventStdCostRevaluationVoucherId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LastPriceUniquenessAllowance</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<HelpText>@SCM:InventItemPriceLastPriceUniquenessAllowanceHelpText</HelpText>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PriceType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActivationDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LastPriceUniquenessAllowance</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VersionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>VersionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivationDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivationDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CostingVersionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VersionId</MapField>
					<MapFieldTo>VersionId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventItemPriceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PriceType</MapField>
					<MapFieldTo>PriceType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceCalcId</MapField>
					<MapFieldTo>PriceCalcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VersionId</MapField>
					<MapFieldTo>VersionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>Markup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>Price</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitID</MapField>
					<MapFieldTo>UnitID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceAllocateMarkup</MapField>
					<MapFieldTo>PriceAllocateMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceQty</MapField>
					<MapFieldTo>PriceQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceSecCur_RU</MapField>
					<MapFieldTo>PriceSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupSecCur_RU</MapField>
					<MapFieldTo>MarkupSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventPriceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>Price</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>Markup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceQty</MapField>
					<MapFieldTo>PriceQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceDate</MapField>
					<MapFieldTo>ActivationDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AllocateMarkup</MapField>
					<MapFieldTo>PriceAllocateMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceCalcId</MapField>
					<MapFieldTo>PriceCalcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaximumRetailPrice_IN</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceSecCur_RU</MapField>
					<MapFieldTo>PriceSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupSecCur_RU</MapField>
					<MapFieldTo>MarkupSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCalcTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCalcTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceCalcId</Name>
					<Field>PriceCalcId</Field>
					<RelatedField>PriceCalcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CostingVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CostingVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VersionId</Name>
					<Field>VersionId</Field>
					<RelatedField>VersionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VersionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemPriceCurrentActive</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>InventItemPriceCurrentActive</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VersionId</Name>
					<Field>VersionId</Field>
					<RelatedField>VersionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceType</Name>
					<Field>PriceType</Field>
					<RelatedField>PriceType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivationDate</Name>
					<Field>ActivationDate</Field>
					<RelatedField>MaxActivationDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>createdDateTime</Name>
					<Field>createdDateTime</Field>
					<RelatedField>MaxCreatedDateTime</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSettlement</Name>
			<EntityRelationshipRole>@SYS123802</EntityRelationshipRole>
			<RelatedTable>InventSettlement</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StdCostVoucher</Name>
					<Field>StdCostVoucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StdCostTransDate</Name>
					<Field>StdCostTransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitID</Name>
					<Field>UnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>