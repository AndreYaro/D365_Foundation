<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendExceptionGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendExceptionGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!VendExceptionGroup::exist(_recId))
        {
            ret = checkFailed(strfmt(VendExceptionGroup::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the specified record occurs in the <c>VendExceptionGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check.
    /// </param>
    /// <returns>
    ///    true if the specified record occurs in the table; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     vendExceptionGroup
                 where
                     vendExceptionGroup.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VendExceptionGroup</c> table for the given record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A <c>ConcurrencyModel</c> value that specifies the locking scheme; optional.
    /// </param>
    /// <returns>
    ///    A <c>VendExceptionGroup</c> table record if it exists; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    If the record does not exist, an empty <c>VendExceptionGroup</c> table record is returned.
    /// </remarks>

    public static VendExceptionGroup find(
        RecId _recId ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendExceptionGroup vendExceptionGroup;

        vendExceptionGroup.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendExceptionGroup.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            select firstonly
                vendExceptionGroup
                where
                vendExceptionGroup.RecId == _recId;
        }

        return vendExceptionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VendExceptionGroup</c> table for the given
    ///    <c>VendExceptionGroupId</c> value.
    /// </summary>
    /// <param name="_vendExceptionGroupId">
    ///    The ID of the <c>VendExceptionGroup</c>record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option that will be used used when it reads the record; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>VendExceptionGroup</c> table if found; otherwise, an empty record.
    /// </returns>
    public static VendExceptionGroup findByVendGroup(
        VendInvoiceExceptionGroup _vendExceptionGroupId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendExceptionGroup vendExceptionGroup;

        vendExceptionGroup.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendExceptionGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            vendExceptionGroup
        where
            vendExceptionGroup.VendExceptionGroup == _vendExceptionGroupId;

        return vendExceptionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendExceptionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the lookup for the <c>VendorExceptionGroup</c> record.
    /// </summary>
    /// <param name="_formControl">
    ///    The form control on which the lookup will be performed.
    /// </param>
    /// <remarks>
    ///    This method will be called when the user opens the vendor exception group lookup.
    /// </remarks>
    public static void lookupVendExceptionGroup(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(VendExceptionGroup), _formControl);

        sysTableLookup.addLookupfield(fieldnum(VendExceptionGroup, VendExceptionGroup));
        sysTableLookup.addLookupfield(fieldnum(VendExceptionGroup, Name));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS132654";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS132653</DeveloperDocumentation>
	<FormRef>VendGroup</FormRef>
	<Label>@SYS132272</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>VendExceptionGroup</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>VendGroupIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>VendTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>VendTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendExceptionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendExceptionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendExceptionGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendExceptionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendExceptionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceExceptionGroup</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendExceptionGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>