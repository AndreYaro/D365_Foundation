<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReturnLineDetailMixedLicensePlateReceiptLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSReturnLineDetailMixedLicensePlateReceiptLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alreadyReturnedInventQtyForReturnIdAndItemId</Name>
				<Source><![CDATA[
    internal static InventQty alreadyReturnedInventQtyForReturnIdAndItemId(
        WHSReturnID _returnID,
        ItemId      _itemId)
    {
        WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;

        if (_returnID
            && _itemId)
        {
            WHSReturnLineDetailMixedLicensePlateReceiptLine returnLineDetailMixedLicensePlateReceiptLine;
            WHSReturnLineDetail returnLineDetail;

            select sum(InventQty) from mixedLicensePlateReceiptLine
                exists join returnLineDetailMixedLicensePlateReceiptLine
                    where returnLineDetailMixedLicensePlateReceiptLine.MixedLicensePlateReceiptLine == mixedLicensePlateReceiptLine.RecId
                exists join returnLineDetail
                    where returnLineDetail.RecId == returnLineDetailMixedLicensePlateReceiptLine.ReturnLineDetail
                        && returnLineDetail.ReturnID == _returnID
                        && returnLineDetail.ItemId == _itemId;
        }

        return mixedLicensePlateReceiptLine.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alreadyReturnedInventQtyOnClosedLicensePlatesForReturnIdAndItemId</Name>
				<Source><![CDATA[
    internal static InventQty alreadyReturnedInventQtyOnClosedLicensePlatesForReturnIdAndItemId(
        WHSReturnID _returnID,
        ItemId      _itemId)
    {
        WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;

        if (_returnID
            && _itemId)
        {
            WHSMixedLicensePlateReceipt mixedLicensePlateReceipt;
            WHSReturnLineDetailMixedLicensePlateReceiptLine returnLineDetailMixedLicensePlateReceiptLine;
            WHSReturnLineDetail returnLineDetail;

            select sum(InventQty) from mixedLicensePlateReceiptLine
                exists join returnLineDetailMixedLicensePlateReceiptLine
                    where returnLineDetailMixedLicensePlateReceiptLine.MixedLicensePlateReceiptLine == mixedLicensePlateReceiptLine.RecId
                exists join returnLineDetail
                    where returnLineDetail.RecId == returnLineDetailMixedLicensePlateReceiptLine.ReturnLineDetail
                        && returnLineDetail.ReturnID == _returnID
                        && returnLineDetail.ItemId == _itemId
                exists join mixedLicensePlateReceipt
                    where mixedLicensePlateReceipt.RecId == mixedLicensePlateReceiptLine.MixedLPReceivingTable
                        && mixedLicensePlateReceipt.MixedLPComplete == NoYes::Yes;
        }

        return mixedLicensePlateReceiptLine.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alreadyReturnedInventQtyForReturnIdItemIdAndInventoryDimensions</Name>
				<Source><![CDATA[
    internal static InventQty alreadyReturnedInventQtyForReturnIdItemIdAndInventoryDimensions(
        WHSReturnID _returnID,
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;

        if (_returnID
            && _itemId)
        {
            WHSReturnLineDetailMixedLicensePlateReceiptLine returnLineDetailMixedLicensePlateReceiptLine;
            WHSReturnLineDetail returnLineDetail;
            InventDim inventDimExistsJoin;
            InventDimParm inventDimParm;
            inventDimParm.initFromInventDim(_inventDim);

            select sum(InventQty) from mixedLicensePlateReceiptLine
                exists join returnLineDetailMixedLicensePlateReceiptLine
                    where returnLineDetailMixedLicensePlateReceiptLine.MixedLicensePlateReceiptLine == mixedLicensePlateReceiptLine.RecId
                exists join returnLineDetail
                    where returnLineDetail.RecId == returnLineDetailMixedLicensePlateReceiptLine.ReturnLineDetail
                        && returnLineDetail.ReturnID == _returnID
                        && returnLineDetail.ItemId == _itemId
                #InventDimExistsJoin(returnLineDetail.InventDimId, inventDimExistsJoin, _inventDim, inventDimParm);
        }

        return mixedLicensePlateReceiptLine.InventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alreadyReturnedInventQtyOnClosedLPsForReturnIdItemIdAndInventoryDimensions</Name>
				<Source><![CDATA[
    internal static InventQty alreadyReturnedInventQtyOnClosedLPsForReturnIdItemIdAndInventoryDimensions(
        WHSReturnID _returnID,
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;

        if (_returnID
            && _itemId)
        {
            WHSMixedLicensePlateReceipt mixedLicensePlateReceipt;
            WHSReturnLineDetailMixedLicensePlateReceiptLine returnLineDetailMixedLicensePlateReceiptLine;
            WHSReturnLineDetail returnLineDetail;
            InventDim inventDimExistsJoin;
            InventDimParm inventDimParm;
            inventDimParm.initFromInventDim(_inventDim);

            select sum(InventQty) from mixedLicensePlateReceiptLine
                exists join returnLineDetailMixedLicensePlateReceiptLine
                    where returnLineDetailMixedLicensePlateReceiptLine.MixedLicensePlateReceiptLine == mixedLicensePlateReceiptLine.RecId
                exists join returnLineDetail
                    where returnLineDetail.RecId == returnLineDetailMixedLicensePlateReceiptLine.ReturnLineDetail
                        && returnLineDetail.ReturnID == _returnID
                        && returnLineDetail.ItemId == _itemId
                #InventDimExistsJoin(returnLineDetail.InventDimId, inventDimExistsJoin, _inventDim, inventDimParm)
                exists join mixedLicensePlateReceipt
                        where mixedLicensePlateReceipt.RecId == mixedLicensePlateReceiptLine.MixedLPReceivingTable
                            && mixedLicensePlateReceipt.MixedLPComplete == NoYes::Yes;
        }

        return mixedLicensePlateReceiptLine.InventQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSReturnLineDetailMixedLicensePlateReceiptLine_DevDoc</DeveloperDocumentation>
	<Label>@WAX:WHSReturnLineDetailMixedLicensePlateReceiptLine</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetLine</TableGroup>
	<Visibility>Internal</Visibility>
	<Visible>No</Visible>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ReturnLineDetailMixedLicensePlateReceiptLineIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Warehouse</Modules>
	<PrimaryIndex>ReturnLineDetailMixedLicensePlateReceiptLineIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReturnLineDetail</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSReturnLineDetailRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MixedLicensePlateReceiptLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSMixedLicensePlateReceiptLineRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReturnLineDetailMixedLicensePlateReceiptLineIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ReturnLineDetail</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MixedLicensePlateReceiptLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MixedLicensePlateReceiptLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MixedLicensePlateReceiptLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSReturnLineDetail</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSReturnLineDetail</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnLineDetail</Name>
					<Field>ReturnLineDetail</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSMixedLicensePlateReceiptLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSMixedLicensePlateReceiptLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MixedLicensePlateReceiptLine</Name>
					<Field>MixedLicensePlateReceiptLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>