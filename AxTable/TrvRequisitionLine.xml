<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvRequisitionLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvRequisitionLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountingCurrencyAmountWithCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the amount in company currency and the currency code.
    /// </summary>
    /// <returns>
    /// The amount in company currency and the currency code.
    /// </returns>
    display TrvRequisitionEstimateWithCurrency accountingCurrencyAmountWithCurrencyCode()
    {
        return TrvExpenseHelper::amountWithCurrencyCode(this.AccountingCurrencyAmount, this.LegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyAmountWithCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the amount in transaction currency, alongwith the transaction currency code.
    /// </summary>
    /// <returns>
    /// The amount in transaction currency, alongwith the transaction currency code.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TrvTransactionAmountWithCurrencyCode transactionCurrencyAmountWithCurrencyCode()
    {
        return TrvExpenseHelper::amountWithTransactionCurrencyCode(this.TransactionCurrencyAmount, this.TransactionCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToBeReconciled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gives the amount to be reconciled for the travel requisition line.
    /// </summary>
    /// <param name="_trvExpTransRecId">
    ///     The <c>RecId</c> of the expense line which is not being considered in the reconciled amount of the travel requisition.
    /// </param>
    /// <returns>
    ///     The amount to be reconciled.
    /// </returns>
    public display TrvRequisitionToBeReconciled amountToBeReconciled(RecId _trvExpTransRecId = 0)
    {
        TrvExpTrans trvExpTrans;

        select sum(AccountingCurrencyReconciledAmount) from trvExpTrans
            where trvExpTrans.MappedToRequisitionLine == this.RecId
               && trvExpTrans.RecId                   != _trvExpTransRecId;

        return (this.AccountingCurrencyAmount - trvExpTrans.AccountingCurrencyReconciledAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToBeReconciledWithCurrencyCode</Name>
				<Source><![CDATA[
    display TrvRequisitionToBeReconciledWithCurrency amountToBeReconciledWithCurrencyCode()
    {
        return TrvExpenseHelper::amountWithCurrencyCode(this.amountToBeReconciled(), this.LegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>approverJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a concatenated string of all approver names and their justification for the policy
    /// violation.
    /// </summary>
    /// <returns>
    /// Approver names and justification provided by them.
    /// </returns>
    display TrvPreviousApproversJustifications approverJustification()
    {
        return TrvJustificationHelper::otherApproversJustifications(this.RecId, TrvPolicyViolationJustificationTypeEnum::TrvReqLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget check and project budget check result for a travel requisition line.
    /// </summary>
    /// <returns>
    /// The budget check and project budget check result for the travel requisition line.
    /// </returns>
    display BudgetCheckResult budgetCheckResult()
    {
        BudgetCheckResult budgetCheckResult;
        ProjBudgetCheckResult projBudgetCheckResult;
        ProjBudgetStatus    projBudgetStatus;

        budgetCheckResult = BudgetSourceSourceDocumentLine::findBudgetCheckResult(this.SourceDocumentLine);

        projBudgetStatus = ProjBudgetStatus::findBySourceDocumentLine(this.SourceDocumentLine);
        projBudgetCheckResult = projBudgetStatus ? projBudgetStatus.BudgetCheckResult : ProjBudgetCheckResult::NoCheck;

        //adding projBudgetCheckResult + 1, since this base enum value starts from 0
        if (enum2int(budgetCheckResult) >= enum2int(projBudgetCheckResult) + 1)
        {
            budgetCheckResult = budgetCheckResult;
        }
        else
        {
            budgetCheckResult = enum2int(projBudgetCheckResult) + 1;
        }

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the amount in company currency.
    /// </summary>
    void calculateAccountingCurrencyAmount()
    {
        this.TransactionCurrencyAmount = round(this.TransactionCurrencyAmount, Currency::roundingPrecisionAdjusted(this.TransactionCurrencyCode));

        this.AccountingCurrencyAmount = this.ExchangeRate ?
                    CurrencyExchangeHelper::amountCur2MST(this.TransactionCurrencyAmount, this.TransactionCurrencyCode, this.ExchangeRate) :
                    this.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the exchange rate from the currency code and estimated date of transaction.
    /// </summary>
    void calculateExchangeRate()
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(
            Ledger::primaryLedger(this.LegalEntity),
            this.TransactionCurrencyCode,
            this.EstimatedDate);

        if (this.TransactionCurrencyCode)
        {
            this.ExchangeRate = exchangeRateHelper.getCrossRate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExpType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the expense type field, depending on the category.
    /// </summary>
    void calculateExpType()
    {
        this.ExpType = TrvCostType::find(this.Category).ExpType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMileage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the amount for mileage.
    /// </summary>
    public void calculateMileage()
    {
        TrvKmSum                            kmSum;
        TrvCostTypeRates                    rates;
        TrvRequisitionTable                 trvRequisitionTable;

        if (this.ExpType != TrvExpType::Transport)
        {
            return;
        }

        // no need to recalculate MileageRate
        if (!this.MileageRate)
        {
            select firstonly CreatingWorker from trvRequisitionTable where trvRequisitionTable.RecId == this.TrvRequisitionTable;

            select sum(Km) from kmSum
                where kmSum.Worker == trvRequisitionTable.CreatingWorker
                   && kmSum.Year   == year(this.EstimatedDate);

            rates = TrvCostTypeRates::getApplicableRate(this.Category, kmSum.Km, this.EstimatedDate);

            if (rates.CostRate)
            {
                this.MileageRate = rates.CostRate;
            }
            else
            {
                this.MileageRate = TrvParameters::find().KmPrice;
            }
        }

        this.TransactionCurrencyAmount = this.Mileage * this.MileageRate;
        this.calculateAccountingCurrencyAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePerdiem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the per diem total for this transaction and fills out the amount and currency fields.
    /// </summary>
    /// <remarks>
    /// If the <c>DateFrom</c>, <c>DateTo</c>, or <c>Location</c> fields are not set, this method returns
    /// without setting anything.
    /// </remarks>
    public void calculatePerdiem()
    {
        TrvRequisitionTable             trvRequisitionTable;
        TrvPartyEmployeeRelationship    trvPartyEmployeeRelationship;
        TrvPerDiems                     trvPerDiems;
        TrvAllowanceRate                trvAllowanceRate, trvAllowanceRateAnyExist;
        TrvParameters                   trvParameters = TrvParameters::find();

        real    hrsFirstDay = 0;
        real    hrsLastDay = 0;
        real    numHours = 0;
        date    startMidnight;
        date    lastMidnight;
        int     numdays;
        real    mealAllowance;
        real    hotelAllowance;
        real    otherAllowance;
        real    expAmount;
        boolean firstLastSame = false;
        utcdatetime dateFrom = DateTimeUtil::applyTimeZoneOffset(this.PerdiemDateFrom, DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime dateTo = DateTimeUtil::applyTimeZoneOffset(this.PerdiemDateTo, DateTimeUtil::getUserPreferredTimeZone());
        boolean isTrvPerdiemsFullDayHourFlightEnabled = TrvExpenseHelper::isTrvPerdiemsFullDayHourFlightEnabled();
        const int hoursInADay = 24;

        //only applies for per diems
        if (this.ExpType != TrvExpType::Allowance)
        {
            return;
        }

        if (!dateFrom || !dateTo )
        {
            this.TransactionCurrencyAmount = 0;
            return;
        }

        firstLastSame = (DateTimeUtil::date(dateFrom) == DateTimeUtil::date(dateTo));

        if (firstLastSame)
        {
            hrsFirstDay += DateTimeUtil::getDifference(dateTo, dateFrom)/3600;
            numdays = 0;
        }
        else
        {
            hrsFirstDay = hoursInADay - DateTimeUtil::hour(dateFrom) - (DateTimeUtil::minute(dateFrom)/60);

            hrsLastDay = DateTimeUtil::hour(dateTo) + (DateTimeUtil::minute(dateTo)/60);

            startMidnight = DateTimeUtil::date(DateTimeUtil::addDays(dateFrom, 1));
            lastMidnight = DateTimeUtil::date(dateTo);

            //number of full travel days, not counting first and last
            numdays = lastMidnight - startMidnight;
        }

         // for the per diem calculation is based on 24 hour period
        if (trvParameters.PerDiemCalculation == TrvPerDiemCalculation::FullDayHourPeriod)
        {
            numHours = hrsFirstDay + (numdays * hoursInADay) + hrsLastDay;
            if (numHours >= hoursInADay)
            {
                numdays = real2int(numHours / hoursInADay);
                hrsFirstDay = isTrvPerdiemsFullDayHourFlightEnabled? hoursInADay : 0;
                hrsLastDay = numHours - (numdays * hoursInADay);
                // if trip has multiple days and total hours in the trip is multiple of 24h, set last day hours to 24 hour
                if(isTrvPerdiemsFullDayHourFlightEnabled && numdays > 1 && hrsLastDay == 0)
                {
                    hrsLastDay = hoursInADay;
                }
            }
            else
            {
                numdays = 0;
                hrsFirstDay = numHours;
                hrsLastDay = 0;
            }
        }

        select firstonly CreatingWorker from trvRequisitionTable where trvRequisitionTable.RecId == this.TrvRequisitionTable;

        select firstonly PerDiem from trvPartyEmployeeRelationship
            where trvPartyEmployeeRelationship.Worker == trvRequisitionTable.CreatingWorker;
        if (trvPartyEmployeeRelationship.PerDiem > 0)
        {
            // PerDiem is in company currency, convert to transaction currency for the requisition line
            if (firstLastSame)
            {
                this.TransactionCurrencyAmount = CurrencyExchangeHelper::curAmount(trvPartyEmployeeRelationship.PerDiem, this.TransactionCurrencyCode);
            }
            else
            {
                if (hrsFirstDay)
                {
                    numdays++;
                }

                if (hrsLastDay)
                {
                    numdays++;
                }

                this.TransactionCurrencyAmount = CurrencyExchangeHelper::curAmount(trvPartyEmployeeRelationship.PerDiem * numdays, this.TransactionCurrencyCode);
            }
            //update dependant fields
            this.calculateExchangeRate();
            this.calculateAccountingCurrencyAmount();
            return;
        }

        //now that we didn't find an employee rule, we need
        //a travel location to look up a general rule
        if (!this.TrvLocations)
        {
            this.TransactionCurrencyAmount = 0;
            return;
        }

        select firstonly trvPerDiems where
            trvPerDiems.TrvLocations == this.TrvLocations &&
            (trvPerDiems.DateFrom <= DateTimeUtil::date(dateFrom) || !trvPerDiems.DateFrom) &&
            (trvPerDiems.DateTo >= DateTimeUtil::date(dateTo) || !trvPerDiems.DateTo);

        if (!trvPerDiems.RecId)
        {
            warning("@SYS116199");

            select firstonly RecId from trvPerDiems where
                trvPerDiems.TrvLocations == this.TrvLocations &&
                (trvPerDiems.DateFrom <= DateTimeUtil::date(dateFrom) || !trvPerDiems.DateFrom);

            if (trvPerDiems.RecId)
            {
                warning(strFmt("@SYS117995", date2StrUsr(trvPerDiems.DateTo, DateFlags::FormatAll)));
            }

            this.TransactionCurrencyAmount = 0;
            return;
        }

        // handle first day

        // check if any allowance rates exist for the perdiem
        select firstonly RecId from trvAllowanceRateAnyExist where
            trvAllowanceRateAnyExist.PerDiemRecId == trvPerDiems.RecId &&
            (trvAllowanceRateAnyExist.TrvFirstLastBoth == TrvFirstLastBoth::FirstDay || trvAllowanceRateAnyExist.TrvFirstLastBoth == TrvFirstLastBoth::Both);

        if (!trvAllowanceRateAnyExist.RecId)
        {
            // if no rates have been setup, then count day as a full day only if hrs > 0
            if (hrsFirstDay > 0)
            {
                numdays++;
            }
        }
        else
        {
            select firstonly trvAllowanceRate where
                trvAllowanceRate.PerDiemRecId == trvPerDiems.RecId &&
                (trvAllowanceRate.TrvFirstLastBoth == TrvFirstLastBoth::FirstDay || trvAllowanceRate.TrvFirstLastBoth == TrvFirstLastBoth::Both) &&
                trvAllowanceRate.FromQty <= hrsFirstDay && trvAllowanceRate.ToQty >= hrsFirstDay;

            if (trvAllowanceRate.RecId && hrsFirstDay > 0)
            {
                // rates are setup and found for first day, use it
                if (trvParameters.PerDiemRounding == TrvPerDiemRounding::RoundUp)
                {
                    mealAllowance += roundUp(trvPerDiems.MealAllowance * trvAllowanceRate.MealReduction / 100, 1.0);
                    hotelAllowance += roundUp(trvPerDiems.HotelAllowance * trvAllowanceRate.HotelReduction / 100, 1.0);
                    otherAllowance += roundUp(trvPerDiems.OtherAllowance * trvAllowanceRate.OtherReduction / 100, 1.0);
                }
                else
                {
                    mealAllowance += trvPerDiems.MealAllowance * trvAllowanceRate.MealReduction / 100;
                    hotelAllowance += trvPerDiems.HotelAllowance * trvAllowanceRate.HotelReduction / 100;
                    otherAllowance += trvPerDiems.OtherAllowance * trvAllowanceRate.OtherReduction / 100;
                }
            }
            // else pay nothing
        }

        // handle last day

        // do not apply last day reductions if first and last days are the same
        if (!firstLastSame && (hrsLastDay>0))
        {
            // check if any allowance rates exist for the perdiem
            select firstonly RecId from trvAllowanceRateAnyExist where
                trvAllowanceRateAnyExist.PerDiemRecId == trvPerDiems.RecId &&
                (trvAllowanceRateAnyExist.TrvFirstLastBoth == TrvFirstLastBoth::LastDay || trvAllowanceRateAnyExist.TrvFirstLastBoth == TrvFirstLastBoth::Both);

            if (!trvAllowanceRateAnyExist.RecId)
            {
                // if no rates have been setup, then count day as a full day only if hrs > 0
                if (hrsLastDay > 0)
                {
                    numdays++;
                }
            }
            else
            {
                select firstonly trvAllowanceRate where
                    trvAllowanceRate.PerDiemRecId == trvPerDiems.RecId &&
                    (trvAllowanceRate.TrvFirstLastBoth == TrvFirstLastBoth::LastDay || trvAllowanceRate.TrvFirstLastBoth == TrvFirstLastBoth::Both) &&
                    trvAllowanceRate.FromQty <= hrsLastDay && trvAllowanceRate.ToQty >= hrsLastDay;

                if (trvAllowanceRate.RecId)
                {
                   // rates are setup and found for last day, use it
                    if (trvParameters.PerDiemRounding == TrvPerDiemRounding::RoundUp)
                    {
                        mealAllowance += roundUp(trvPerDiems.MealAllowance * trvAllowanceRate.MealReduction / 100, 1.0);
                        hotelAllowance += roundUp(trvPerDiems.HotelAllowance * trvAllowanceRate.HotelReduction / 100, 1.0);
                        otherAllowance += roundUp(trvPerDiems.OtherAllowance * trvAllowanceRate.OtherReduction / 100, 1.0);
                    }
                    else
                    {
                        mealAllowance += trvPerDiems.MealAllowance * trvAllowanceRate.MealReduction / 100;
                        hotelAllowance += trvPerDiems.HotelAllowance * trvAllowanceRate.HotelReduction / 100;
                        otherAllowance += trvPerDiems.OtherAllowance * trvAllowanceRate.OtherReduction / 100;
                    }
                }
                // else pay nothing
            }
        }

        mealAllowance += numdays * trvPerDiems.MealAllowance;
        hotelAllowance += numdays * trvPerDiems.HotelAllowance;
        otherAllowance += numdays * trvPerDiems.OtherAllowance;

        expAmount = mealAllowance + hotelAllowance + otherAllowance;

        this.TransactionCurrencyAmount=expAmount;
        this.TransactionCurrencyCode = trvPerDiems.Currency;

        //update dependant fields
        this.calculateExchangeRate();
        this.calculateAccountingCurrencyAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a budget check on the travel requisition line.
    /// </summary>
    /// <remarks>
    /// When the budget check is not triggered by an explicit user action, the check is performed only when
    /// the budget check on an entry value is set.
    /// </remarks>
    public void checkBudget()
    {
        BudgetControlSourceDocumentProcessor::submitSourceDocumentLineToCheckBudget(
                                        SourceDocumentLine::find(this.SourceDocumentLine),
                                        true,  // is draft reservation
                                        null,  // caller
                                        false);  // is not on demand check
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetOnDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs an on-demand budget check on the travel requisition line.
    /// </summary>
    public void checkBudgetOnDemand()
    {
        BudgetCheckResult budgetCheckResult = this.budgetCheckResult();

        if (budgetCheckResult == BudgetCheckResult::NoCheck ||
            budgetCheckResult == BudgetCheckResult::Failed)
        {
            BudgetControlSourceDocumentProcessor::submitSourceDocumentLineToCheckBudget(
                                            SourceDocumentLine::find(this.SourceDocumentLine),
                                            true,  // is draft reservation
                                            null,  // caller
                                            true);  // is on demand check
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a project budget check on the requisition expense line.
    /// </summary>
    public void checkProjectBudget()
    {
        SourceDocumentLineItem  sourceDocumentLineItem;

        sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(this.SourceDocumentLine));
        if (ProjectCommitmentFacade::isProjectBudgetControlEnabled(sourceDocumentLineItem, false))
        {
            ProjectCommitmentFacade::checkProjectBudgets(sourceDocumentLineItem, false, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjectBudgetOnDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs an on-demand project budget check on the requisition expense line.
    /// </summary>
    public void checkProjectBudgetOnDemand()
    {
        ProjBudgetCheckResult   budgetCheckResult;
        SourceDocumentLineItem  sourceDocumentLineItem;

        budgetCheckResult = this.projectBudgetCheckResult();
        if (budgetCheckResult == ProjBudgetCheckResult::NoCheck ||
            budgetCheckResult == ProjBudgetCheckResult::Failed  ||
            budgetCheckResult == ProjBudgetCheckResult::PassedWithWarnings)
        {
            sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(this.SourceDocumentLine));
            if (ProjectCommitmentFacade::isProjectBudgetControlEnabled(sourceDocumentLineItem, true))
            {
                ProjectCommitmentFacade::checkProjectBudgets(sourceDocumentLineItem, false, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearProjectRelatedFields</Name>
				<Source><![CDATA[
    private void clearProjectRelatedFields()
    {
        this.ProjTable = 0;
        this.ProjLinePropertyId = '';
        this.ProjActivityNumber = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        TrvPolicyEvalEngine::deleteNotNeededJustifications(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);

        if (TrvParameters::find().WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            TrvPolicyEvalEngine::evaluateViolationsForHdr(this.TrvRequisitionTable, SysPolicyTypeEnum::TrvRequisitionPolicy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchangeRate</Name>
				<Source><![CDATA[
    public edit ExchRate editExchangeRate(boolean _set, ExchRate _exchRate)
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.TransactionCurrencyCode);

        if (_set)
        {
            if (_exchRate >= 0)
            {
                this.ExchangeRate = exchangeRateHelper.prepareExchangeRateForStorage(_exchRate);
                this.calculateAccountingCurrencyAmount();
            }
            else
            {
                checkFailed(strFmt("@SYS71086", fieldPName(ExchangeRate, ExchangeRate), 0));
                _exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchangeRate);
            }
        }
        else
        {
            _exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchangeRate);
        }

        return _exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluate policies on the travel requisition line.
    /// </summary>
    public void evaluatePolicies()
    {
        TrvParameters trvParameters = TrvParameters::find();

        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            TrvPolicyEvalEngine::evaluateViolationsForLine(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPolicyViolations</Name>
				<Source><![CDATA[
    public boolean hasPolicyViolations()
    {
        return TrvPolicyEvalEngine::hasPolicyViolations(tableName2Id('TrvRequisitionLine'), this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.LegalEntity            = CompanyInfo::current();
        this.ReferenceDataAreaId    = curext();
        this.ReconciliationStatus   = TrvRequisitionReconciliationStatus::Open;

        this.TransactionCurrencyCode    = CompanyInfoHelper::standardCurrency();
        this.ExchangeRate               = 100;
        this.setDefaultDimension(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(boolean _evaluatePolicies = true, boolean _evaluateSourceDocAndPolicies = true)
    {
        TrvParameters trvParameters = TrvParameters::find();

        this.calculateExpType();
        this.calculatePerdiem();
        this.calculateMileage();
        this.calculateAccountingCurrencyAmount();

        ttsbegin;

        // The state transition model will update distributions, and check budget as required
        // Eg only if budget check on line save is on, distributions would be created, and move to fully distributed state
        // clear the source line value before insert.  If a previous attempt to insert threw an error this files is not empty
        this.SourceDocumentLine = 0;
        
        if (_evaluateSourceDocAndPolicies && this.TrvRequisitionTable != 0) 
        {
            // We create SDL for every trvRequisitionLine; the following call will set this.SourceDocumentLine field
            // The state transition model will update distributions, and check budget as required
            // Eg only if budget check on line save is on, distributions would be created, and move to fully distributed state
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
        }

        super();

        ttscommit;

        if (_evaluatePolicies && trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            TrvPolicyEvalEngine::evaluateViolationsForLine(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
            TrvPolicyEvalEngine::evaluateViolationsForHdr(this.TrvRequisitionTable, SysPolicyTypeEnum::TrvRequisitionPolicy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetCheckDone</Name>
				<Source><![CDATA[
    display boolean isBudgetCheckDone()
    {
        boolean ret = false;

        if (this.SourceDocumentLine)
        {
            ret = BudgetSourceSourceDocumentLine::existBudgetSource(this.SourceDocumentLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryIntegratedWithProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the category on the travel requisition line, is integrated with project.
    /// </summary>
    /// <returns>
    /// true if the travel requisition line category is integrated with project; otherwise, false.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display boolean isCategoryIntegratedWithProject()
    {
        return CategoryTable::find(this.Category).UseInProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case (fieldNum(TrvRequisitionLine, PerdiemDateFrom)):
            case (fieldNum(TrvRequisitionLine, PerdiemDateTo)):
            case (fieldNum(TrvRequisitionLine, TrvLocations)):
                this.calculatePerdiem();
                break;

            case (fieldNum(TrvRequisitionLine, Mileage)):
                this.calculateMileage();
                break;

            case (fieldNum(TrvRequisitionLine, Category)):
                this.calculateExpType();
                this.Merchant = '';
                if (this.isCategoryIntegratedWithProject())
                {
                    this.clearProjectRelatedFields();
                }
                if (this.ProjTable)
                {
                    this.setProjectFields();
                }
                break;

            case (fieldNum(TrvRequisitionLine, ProjTable)):
                if (this.ProjTable == 0)
                {
                    this.ProjLinePropertyId = '';
                }
                else
                {
                    this.setProjectFields(); // Do update amount
                }
                this.ProjActivityNumber = '';
                this.setDefaultDimension(true);
                break;

            case (fieldNum(TrvRequisitionLine, TransactionCurrencyAmount)):
                this.calculateAccountingCurrencyAmount();
                break;

            case (fieldNum(TrvRequisitionLine, TransactionCurrencyCode)):
                this.calculateExchangeRate();
                this.calculateAccountingCurrencyAmount();
                break;

            case (fieldNum(TrvRequisitionLine, ExchangeRate)):
                this.calculateAccountingCurrencyAmount();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return this.EstimatedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_TravelRequisition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_TravelRequisition::TravelRequisitionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader    sourceDocumentHeader;
        TrvRequisitionTable     trvRequisitionTable;

        if (this.TrvRequisitionTable)
        {
            select firstonly sourceDocumentHeader exists join trvRequisitionTable
                where trvRequisitionTable.SourceDocumentHeader == sourceDocumentHeader.RecId &&
                    trvRequisitionTable.RecId == this.TrvRequisitionTable;
        }

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>policyViolationLevelMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of <c>TrvPolicyViolation</c> objects for the requisition line.
    /// </summary>
    List policyViolationLevelMsg()
    {
        return TrvPolicyEvalEngine::displayPolicyViolationLevelMsg(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project budget check result for a travel requisition line.
    /// </summary>
    /// <returns>
    /// The project budget check result for a travel requisition line.
    /// </returns>
    display ProjBudgetCheckResult projectBudgetCheckResult()
    {
        ProjBudgetCheckResult   budgetCheckResult;

        budgetCheckResult = ProjBudgetTransactionManager::getProjBudgetSourceCheckResult(this.SourceDocumentLine);

        return budgetCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requisitionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the requisition number of the travel requisition.
    /// </summary>
    /// <returns>
    /// The requisition number of the travel requisition.
    /// </returns>
    display TrvRequisitionNumber requisitionNumber()
    {
        TrvRequisitionTable trvRequisitionTable;
        select firstonly RequisitionNumber from trvRequisitionTable where trvRequisitionTable.RecId == this.TrvRequisitionTable;

        return trvRequisitionTable.RequisitionNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default dimension for the travel requisition line.
    /// </summary>
    /// <param name="_calledFromInit">
    /// A Boolean value that indicates whether this method should replace the current 
    /// DefaultDimension or update it.  Default is update.
    /// </param>
    /// <remarks>
    /// If this method is called from the <c>TrvRequisitionLine.initValue</c> method, the default dimension
    /// is derived from the project table and header. Otherwise, it is derived from the project table and
    /// worker.
    /// </remarks>
    public void setDefaultDimension(boolean _calledFromInit = false)
    {
        DimensionDefault dimensionDefaultFromProject = 0;
        DimensionDefault dimensionDefaultFromTravelReq = 0;

        if (this.ProjTable)
        {
           dimensionDefaultFromProject = ProjTable::findRecId(this.ProjTable).DefaultDimension;
        }

        if (_calledFromInit || !this.DefaultDimension)
        {
            dimensionDefaultFromTravelReq = TrvRequisitionTable::find(this.TrvRequisitionTable).DefaultDimension;
        }
        else 
        {
            // use the current value as the user may have changed them
            dimensionDefaultFromTravelReq = this.DefaultDimension;
        }
        // merge the dimensions - project takes precedence
        this.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dimensionDefaultFromProject, dimensionDefaultFromTravelReq);

    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectFields</Name>
				<Source><![CDATA[
    private void setProjectFields()
    {
        this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(ProjTable::findRecId(this.ProjTable).ProjId, this.Category);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _evaluateSourceDocAndPolicies = true)
    {
        TrvParameters trvParameters = TrvParameters::find();

        this.calculateExpType();
        this.calculatePerdiem();
        this.calculateMileage();
        this.calculateAccountingCurrencyAmount();

        // project policies updates field values, and has to be done before super
        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            this.validateProjExpPoliciesExpense();
        }

        ttsbegin;

        super();

        if (_evaluateSourceDocAndPolicies && trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            this.executePolicyEvaluation();
        }

        // Re-submit distributions only if expense is on an travel requisition
        if (_evaluateSourceDocAndPolicies && this.TrvRequisitionTable != 0)
        {
            // The state transition model will update distributions, and check budget as required
            // based on existing state, budget settings and any fields in the state container that changed
            SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the cost type selected is valid for the expense record
    /// </summary>
    /// <param name="_costType">
    /// The cost type to validate.
    /// </param>
    /// <returns>
    /// true if cost type is valid for record; otherwise, false.
    /// </returns>
    public boolean validateCategory(TrvCostTypeEDT _costType = this.Category)
    {
        TrvCostType costType = TrvCostType::find(_costType);

        if (!costType.RecId || costType.IsInactive)
        {
            return checkFailed("@Expense:InvalidCostType");
        }

        if (costType.isImportOnly == NoYes::Yes)
        {
            return checkFailed(strFmt("@Expense:CannotSelectImportOnlyCategoryForRequisitionLine", this.Category));
        }

        if (costType.ExpType == TrvExpType::Empty)
        {
            this.calculateExpType();
        }
        
        if (costType.ExpType == TrvExpType::Advance || costType.ExpType == TrvExpType::Personal)
        {
            return checkFailed("@SYS341929");
        }

        if (this.ProjTable)
        {
            return TrvCostType::isValidCostTypeForWorker(costType, TrvRequisitionTable::find(this.TrvRequisitionTable).CreatingWorker , this.LegalEntity);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExpTypeRequiredFields</Name>
				<Source><![CDATA[
    public boolean validateExpTypeRequiredFields()
    {
        boolean retval = true;
        ;

        switch (this.ExpType)
        {
            case TrvExpType::Allowance:
                if (!this.TrvLocations || !this.PerdiemDateFrom || !this.PerdiemDateTo)
                {
                    retval = checkFailed("@SYS138265");
                }
                break;

            case TrvExpType::Transport:
                if (this.Mileage <= 0)
                {
                    retval = checkFailed("@SYS138266");
                }
                break;
        }
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        boolean ret;

        ret = super(_p1);

        switch (_p1)
        {
            case (fieldNum(TrvRequisitionLine, Category)):
                this.calculateExpType();
                ret = ret && this.validateCategory(this.Category);
                break;

            case (fieldNum(TrvRequisitionLine, PerdiemDateFrom)):
            case (fieldNum(TrvRequisitionLine, PerdiemDateTo)):
                ret = ret && this.validatePerdiemDates();
                break;

            case (fieldNum(TrvRequisitionLine, Mileage)):
                if (this.Mileage <= 0)
                {
                    ret = checkFailed("@SYS138266");
                }
                break;

            case (fieldNum(TrvRequisitionLine, ExchangeRate)):
                if (this.ExchangeRate <= 0)
                {
                    ret = ret && checkFailed("@SYS107000");
                }
                break;

            case (fieldNum(TrvRequisitionLine, TransactionCurrencyAmount)):
                if (this.TransactionCurrencyAmount < 0)
                {
                    ret = ret && checkFailed("@SYS105575");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePerdiemDates</Name>
				<Source><![CDATA[
    public boolean validatePerdiemDates()
    {
        ;
        if (this.ExpType == TrvExpType::Allowance)
        {
            if (this.PerdiemDateFrom && this.PerdiemDateTo && this.PerdiemDateTo < this.PerdiemDateFrom)
            {
                return checkFailed(strFmt("@SYS101492", datetime2str(this.PerdiemDateFrom, DateFlags::FormatAll), datetime2str(this.PerdiemDateTo, DateFlags::FormatAll)));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the estimated amount that is entered by the user is not zero.
    /// </summary>
    /// <returns>
    /// true if the amount is not zero; otherwise, false.
    /// </returns>
    /// <remarks>
    /// For mileage or per diem expense types, the amount cannot be entered and is not validated.
    /// </remarks>
    public boolean validateTransactionAmount()
    {
        if (this.ExpType != TrvExpType::Transport &&
            this.ExpType != TrvExpType::Allowance)
        {
            if (this.TransactionCurrencyAmount == 0)
            {
                error(strFmt("@SYS84378", "@SYS153133"));
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        ProjTable projTable;
        ProjValCheckTrans projValCheckTrans;

        ret = this.validateExpTypeRequiredFields();

        ret = ret && super();

        if (this.ProjTable)
        {
            projTable = ProjTable::findRecId(this.ProjTable);
            if (projTable.RecId)
            {
                if ((projTable.Status == ProjStatus::Completed) || (projTable.Header == NoYes::Yes))
                {
                    ret = checkFailed("@SYS327728");
                }

                if (ret && !projTable.isTravelRequisitionAllowedForMultipleFundingSources())
                {
                    ret = checkFailed("@Expense:TravelReqCreateError_MultipleFundingSources");
                }

                if (ret)
                {
                    projValCheckTrans = new ProjValCheckTrans();
                    if (!projValCheckTrans.validateMandatory(this))
                    {
                        return false;
                    }
                }
            }
        }

        ret = ret && this.validateCategory(this.Category);

        ret = ret && this.validatePerdiemDates();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateApprove</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that approval can be performed.
    /// </summary>
    /// <returns>
    ///     true if approval can be performed, false otherwise.
    /// </returns>
    /// <remarks>
    ///     We check for necessary approver justifications and budget.
    /// </remarks>
    public boolean validateApprove()
    {
        TrvParameters trvParameters = TrvParameters::find();

        List                violations = this.policyViolationLevelMsg();
        ListEnumerator      listEnumerator;
        TrvPolicyViolation  violation;

        listEnumerator = violations.getEnumerator();

        while (listEnumerator.moveNext())
        {
            violation = listEnumerator.current();
            if (violation.parmAdjustedViolationLevel() == TrvPolicyViolationLevel::Error)
            {
                return false;
            }
        }

        SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(this);

        if ((!trvParameters.IsAllowApproveExpenseOnBudgetFail && this.isBudgetFailed()) || this.isProjBudgetFailed())
        {
            error(strFmt("@SYS304369", this.Category, this.TransactionCurrencyAmount, this.TransactionCurrencyCode));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResubmit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method validates the expense line before it can be resubmitted.
    /// </summary>
    /// <returns>
    ///     Boolean indicating whether validation succeeded or not.
    /// </returns>
    /// <remarks>
    ///     The validations include incomplete distributions, policy and budget errors.
    /// </remarks>
    public boolean validateResubmit()
    {
        TrvParameters           trvParameters = TrvParameters::find();
        AccountingDistribution  accountingDistribution;
        boolean                 invalidLedgerDimension = false;

        this.evaluateProjectPoliciesAndSave();

        if (this.anyProjectPolicyViolations())

        {
            return false;
        }

        TrvPolicyEvalEngine::evaluateViolationsForLine(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
        // check policies
        if (TrvPolicyEvalEngine::anyPolicyErrorsForLine(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy))
        {
            return false;
        }
       
        // only check distributions for lines for which distributions are created
        if (!this.isDistributionsCompleted())
        {
            error(strFmt("@SYS340882",this.Category, this.TransactionCurrencyAmount, this.TransactionCurrencyCode));
            return false;
        }

        // Validate project id used
        if (!this.validateProject())
        {
            return false;
        }

        // This will create distributions if they don't exist
        // It will check budget, even if the line is fully distributed
        SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(this);
        if (!trvParameters.IsAllowSubmitExpenseOnBudgetFail && (this.isBudgetFailed() || this.isProjBudgetFailed()) )
        {
            error(strFmt("@SYS304368",this.Category, this.TransactionCurrencyAmount, this.TransactionCurrencyCode));
            return false;
        }

        // Validate the ledge dimension value of the accounting distributions
        while select AccountingLegalEntity, LedgerDimension, AccountingDate from accountingDistribution
            where accountingDistribution.SourceDocumentLine == this.SourceDocumentLine
        {
            if (!TrvExpTable::validateLedgerDimension(accountingDistribution.AccountingLegalEntity, accountingDistribution.LedgerDimension, accountingDistribution.AccountingDate))
            {
                invalidLedgerDimension = true;
            }
        }

        if (invalidLedgerDimension)
        {
            error("@Expense:TravelReqSubmitFailed");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetFailed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the expense line has GL budget status of failed.
    /// </summary>
    /// <returns>
    ///     true if GL budget check failed on the expense line, false otherwise.
    /// </returns>
    display boolean isBudgetFailed()
    {
        BudgetCheckResult   budgetCheckResult;
        budgetCheckResult = BudgetSourceSourceDocumentLine::findBudgetCheckResult(this.SourceDocumentLine);
        return (budgetCheckResult == BudgetCheckResult::Failed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjBudgetFailed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the expense line has project budget status of failed.
    /// </summary>
    /// <returns>
    ///     true if project budget check failed on the expense line, false otherwise.
    /// </returns>
    display boolean isProjBudgetFailed()
    {
        return (ProjBudgetStatus::findBySourceDocumentLine(this.SourceDocumentLine).BudgetCheckResult == ProjBudgetCheckResult::Failed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributionsCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the expense line is fully distributed.
    /// </summary>
    /// <returns>
    ///     true if the expense line is fully distributed, false otherwise.
    /// </returns>
    public boolean isDistributionsCompleted()
    {
        return SourceDocumentLine::find(this.SourceDocumentLine).AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determine whether the project used in expense line is valid
    /// </summary>
    /// <returns>
    ///     True if the project used in valid. Otherwise, false.
    /// </returns>
    /// <remarks>
    ///     This is supposed to be called during submission and posting.
    /// </remarks>
    private boolean validateProject()
    {
        ProjTable           projTable;
        boolean             ret = true;
        ProjValCheckTrans   projValCheckTrans;

        if (this.ProjTable)
        {
            projValCheckTrans = new ProjValCheckTrans();
            
            if (!projValCheckTrans.validateMandatory(this))
            {
                ret = false;
            }
            
            projTable = ProjTable::findRecId(this.ProjTable);
            if (!projTable.status().validateWriteCreateJournal())
            {
                // validateWriteCreateJournal will give failure message
                ret = false;
            }

            if (projTable.Type == ProjType::Time)
            {
                ret = checkFailed(strFmt("@SYS53011", ProjType::Time));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RefRecId _recId)
    {
        return (select firstonly RecId from trvRequisitionLine where trvRequisitionLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TrvRequisitionLine find(RefRecId _recId, boolean _forUpdate = false)
    {
        TrvRequisitionLine trvRequisitionLine;
        if (_recId)
        {
            trvRequisitionLine.selectForUpdate(_forUpdate);
            select firstonly trvRequisitionLine where trvRequisitionLine.RecId == _recId;
        }
        return trvRequisitionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMappedReqiusition</Name>
				<Source><![CDATA[
    public static TrvRequisitionLine getMappedReqiusition(TrvRequisitionNumber _reqNumber, RefRecId _mappedToRequisition, RefRecId _worker)
    {
        TrvRequisitionTable trvRequisitionTable;
        TrvRequisitionLine trvRequisitionLine;
        
        select firstonly trvRequisitionLine
            where trvRequisitionLine.RecId == _mappedToRequisition
                exists join trvRequisitionTable
                    where trvRequisitionTable.RecId == trvRequisitionLine.TrvRequisitionTable
                    && trvRequisitionTable.RequisitionNumber == _reqNumber
                    && trvRequisitionTable.CreatingWorker == _worker;
        
        return trvRequisitionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TrvRequisitionLine</c> record using a <c>SourceDocumentLine</c> record ID.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// A <c>SourceDocumentLine</c> record ID.
    /// </param>
    /// <returns>
    /// A <c>TrvRequisitionLine</c> record.
    /// </returns>
    public static TrvRequisitionLine findBySourceDocumentLine(RefRecId _sourceDocumentLine)
    {
        TrvRequisitionLine    trvRequisitionLine;

        select firstonly trvRequisitionLine
            where trvRequisitionLine.SourceDocumentLine == _sourceDocumentLine;

        return trvRequisitionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitterJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// The submit justification entered for the current record.
    /// </summary>
    /// <returns>The justification text entered while submitting.</returns>
    display TrvSubmitterJustification submitterJustification()
    {
        return TrvJustificationHelper::submitterJustification(this.RecId, TrvPolicyViolationJustificationTypeEnum::TrvReqLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubmitJustificationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the line has a policy violation that requires submit justification.
    /// </summary>
    /// <returns>True if the line requires user justification on submit for policy errors; otherwise, false.</returns>
    public boolean isSubmitJustificationRequired()
    {
        if (!this.RecId)
        {
            return false;
        }

        return TrvJustificationHelper::isJustificationRequired(this.RecId, TrvPolicyViolationJustificationTypeEnum::TrvReqLine, TrvPolicyViolationLevel::SubmitJustification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproveJustificationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the line has a policy violation that requires approve justification.
    /// </summary>
    /// <returns>
    /// True if the line requires user justification on approval for policy errors; otherwise, false.
    /// </returns>
    public boolean isApproveJustificationRequired()
    {
        if (!this.RecId)
        {
            return false;
        }

        return TrvJustificationHelper::isJustificationRequired(this.RecId, TrvPolicyViolationJustificationTypeEnum::TrvReqLine, TrvPolicyViolationLevel::ApproveJustification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwInfologsForPolicyViolationLevelMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the policy violation messages for the line to the infolog.
    /// </summary>
    public void throwInfologsForPolicyViolationLevelMsg()
    {
        List                violations = this.policyViolationLevelMsg();
        ListEnumerator      listEnumerator;
        TrvPolicyViolation  violation;

        listEnumerator = violations.getEnumerator();

        while (listEnumerator.moveNext())
        {
            violation = listEnumerator.current();
            
            switch (violation.parmAdjustedViolationLevel())
            {
                case TrvPolicyViolationLevel::None:
                    continue;

                case TrvPolicyViolationLevel::Error:
                    error(violation.parmViolationMessage());
                    break;

                default:
                    warning(violation.parmViolationMessage());
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePolicyEvaluation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the policy evaluation for line and header.
    /// </summary>
    private void executePolicyEvaluation()
    {
        TrvPolicyEvalEngine::evaluateViolationsForLine(this.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);

        TrvPolicyEvalEngine::evaluateViolationsForHdr(this.TrvRequisitionTable, SysPolicyTypeEnum::TrvRequisitionPolicy);
        
        TrvRequisitionTable::find(this.TrvRequisitionTable).validateProjPolicies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustedPolicyViolationLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the adjusted policy violation level for the line. This will be none or error or warning.
    /// </summary>
    /// <param name = "_suppressJustificationError">
    /// True if justification related policy errors can be suppressed to warnings; otherwise false by default.
    /// This is used when the caller knows that justification record exists and policy re-evaluation might not have been done.
    /// </param>
    display TrvPolicyViolationLevel adjustedPolicyViolationLevel(boolean _suppressJustificationError = false)
    {
        List                    violations = this.policyViolationLevelMsg();
        ListEnumerator          listEnumerator;
        TrvPolicyViolation      violation;

        TrvPolicyViolationLevel adjustedViolationLevel = TrvPolicyViolationLevel::None;
        TrvPolicyViolationLevel violationLevel = TrvPolicyViolationLevel::None;

        listEnumerator = violations.getEnumerator();

        while (listEnumerator.moveNext())
        {
            violation = listEnumerator.current();
            // The enum value of error > value of warning > value of none.
            // The final violation level will be greatest of these 3.
            if (violation.parmAdjustedViolationLevel() > adjustedViolationLevel)
            {
                adjustedViolationLevel = violation.parmAdjustedViolationLevel();
                violationLevel = violation.parmViolationLevel();
            }
        }

        // If needed, convert submit justification related errors to warnings.
        if (_suppressJustificationError && (violationLevel == TrvPolicyViolationLevel::SubmitJustification
            || violationLevel == TrvPolicyViolationLevel::SubmitApproveJustification))
        {
            adjustedViolationLevel = TrvPolicyViolationLevel::Warning;
        }

        return adjustedViolationLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectBudgetViolationLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the project budget violation level for current requisition expense line.
    /// </summary>
    /// <returns>The project budget violation level of the current requisition expense line.</returns>
    public ProjBudgetControlErrorWarning projectBudgetViolationLevel()
    {
        ProjBudgetStatus projBudgetStatus;
        ProjBudgetStatusDetail projBudgetStatusDetail;

        projBudgetStatus = ProjBudgetStatus::findBySourceDocumentLine(this.SourceDocumentLine);
        if (projBudgetStatus.RecId)
        {
            select firstonly projBudgetStatusDetail
                where projBudgetStatusDetail.ProjBudgetStatus == projBudgetStatus.RecId;

            if (projBudgetStatusDetail.RecId)
            {
                return projBudgetStatusDetail.ProjBudgetControlErrorWarning;
            }
        }

        return ProjBudgetControlErrorWarning::NoError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetViolationLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the budget violation level for current requisition expense line.
    /// </summary>
    /// <returns>The budget violation level of the current requisition expense line.</returns>
    public BudgetCheckResult budgetViolationLevel()
    {
        BudgetSource budgetSource;

        select firstonly RecId, CheckResult from budgetSource
            where budgetSource.SourceDocumentLine == this.SourceDocumentLine
                && budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine;

        if (budgetSource.RecId)
        {
            return budgetSource.CheckResult;
        }

        return BudgetCheckResult::NoCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributionsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether distributions should be enabled for the current requisition expense line.
    /// </summary>
    /// <returns>
    /// True if distributions should be enabled, false otherwise.
    /// </returns>
    display boolean isDistributionsEnabled()
    {
        if (this.RecId != 0 && this.TransactionCurrencyAmount == 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleRequisitionSourceDocumentAndPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create source document line and evaluate policies.
    /// </summary>
    /// <param name = "_trvReqLineRecId">RecId of <c>TrvRequisitionLine</c> record.</param>
    /// <param name = "_evaluatePolicies">True if policies should be evaluated; otherwise, false.</param>
    /// <remarks>
    /// This method can be used to complete the actions that are skipped when the travel requisition is inserted (or updated).
    /// See insert method's skipSourceDocAndPolicies parameter.
    /// </remarks>
    public static void handleRequisitionSourceDocumentAndPolicies(RefRecId _trvReqLineRecId, boolean _evaluatePolicies = true)
    {
        TrvRequisitionLine  trvReqLine;
        TrvParameters       trvParameters = TrvParameters::find();

        try
        {
            ttsbegin;

            // Get the latest record.
            trvReqLine = TrvRequisitionLine::find(_trvReqLineRecId, true);

            // Do not create or update source document line if line is not on an travel requisition
            if (trvReqLine.TrvRequisitionTable != 0)
            {
                if (_evaluatePolicies && trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
                {
                    // If policies are set to be evaluated on line save, then distributions should be created since
                    // there might be policies which need to evaluate the distributions
                    SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(trvReqLine, true, SourceDocumentLineAccountingStatus::FullyDistributed);
                }
            }
            else if (!trvReqLine)
            {
                // Valid recId is passed, but couldn't fetch the requisition expense line.
                throw Exception::Error;
            }

            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                // If update conflict is encountered, retry upto 3 times.
                // This may happen if there are multiple updates to the same requisition expense line at the same time.
                if (xSession::currentRetryCount() > 3)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Deadlock)
        {
            // If deadlock is encountered, retry upto 3 times.
            // This may happen if there are multiple updates to the tax records at the same time.
            if (appl.ttsLevel() == 0 && xSession::currentRetryCount() <= 3)
            {
                retry;
            }
            else
            {
                throw Exception::Deadlock;
            }
        }
        catch (Exception::Error)
        {
            // If valid recId is passed and we couldn't fetch the requisition expense, retry upto 3 times.
            // This may happen if the previous insert is not committed yet.
            if (!trvReqLine && xSession::currentRetryCount() <= 3)
            {
                retry;
            }
            else
            {
                throw Exception::Error;
            }
        }

        if (trvReqLine)
        {
            if (_evaluatePolicies && trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
            {
                trvReqLine.executePolicyEvaluation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExpenseTypeIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given the current requisition expense's type this method will return the appropriate symbol.
    /// </summary>
    /// <returns>Container with the image for this requisition expense record.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display container showExpenseTypeIcon()
    {
        ImageReference imgRef;
        container imgContainer;

        imgRef = ImageReference::constructForSymbol(TrvExpenseHelper::getExpenseTypeIconName(this.ExpType));
        imgContainer = imgRef.pack();

        return imgContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateRequisitionExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the current requisition expense line
    /// </summary>
    /// <returns>
    /// Recid of the duplicated requisition expense line
    /// </returns>
    public RefRecId duplicateRequisitionExpenseLine(RefRecId _trvReqTableRecId = 0, TrvDateStd _estimatedDate = this.EstimatedDate)
    {
        TrvRequisitionLine      trvReqLineNew, trvReqLineOrig;

        // Make sure every field is selected
        trvReqLineOrig = TrvRequisitionLine::find(this.RecId);

        if (this.RecId == 0)
        {
            checkFailed(strFmt("@Expense:TravelReqSaveLineBeforeDuplicating", this.Category, this.EstimatedDate, this.AccountingCurrencyAmount));
            return trvReqLineNew.RecId;
        }

        // copy requisition expense line
        trvReqLineNew.data(trvReqLineOrig);

        if (_trvReqTableRecId)
        {
            // Move new line to the provided travel requisition (e.g. duplicating an entire travel requisition)
            TrvRequisitionTable requisitionTable = TrvRequisitionTable::find(_trvReqTableRecId);
            trvReqLineNew.TrvRequisitionTable = requisitionTable.RecId;
        }
        else if (trvReqLineNew.TrvRequisitionTable != 0)
        {
            // Copying line from travel requisition that has already been submitted.  Create new unattached line.
            TrvRequisitionTable requisitionTable = TrvRequisitionTable::find(trvReqLineNew.TrvRequisitionTable);
            if (!requisitionTable.isEditable())
            {
                trvReqLineNew.TrvRequisitionTable = 0;
                info("@Expense:TravelReqWarningExpenseToBeCopiedOnSubmittedRequisition");
            }
        }
        
        trvReqLineNew.RecId = 0;
        trvReqLineNew.SourceDocumentLine = 0;
        trvReqLineNew.EstimatedDate = _estimatedDate;
        trvReqLineNew.ReconciliationStatus = TrvRequisitionReconciliationStatus::Open;
        trvReqLineNew.IsBudgetCheckPending = NoYes::No;
        trvReqLineNew.ProjPolicyStatus = ProjExpPolicyStatus::NoPolicy;
        trvReqLineNew.ProjPolicyText = '';

        trvReqLineNew.insert();

        return trvReqLineNew.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProjectPolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the requisition expense line has any project policy violations.
    /// </summary>
    /// <returns>
    /// True if the requisition expense line has project policy violations, false otherwise.
    /// </returns>
    public boolean anyProjectPolicyViolations()
    {
        return this.ProjPolicyStatus == ProjExpPolicyStatus::ExpenseFailed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateProjectPoliciesAndSave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the project policies, and saves them.
    /// </summary>
    public void evaluateProjectPoliciesAndSave()
    {
        ProjExpPolicyStatus oldProjPolicyStatus = this.ProjPolicyStatus;
        SysInfoLogStr       oldProjPolicyText   = this.ProjPolicyText;

        this.validateProjExpPoliciesExpense();

        if (oldProjPolicyStatus != this.ProjPolicyStatus ||
            oldProjPolicyText   != this.ProjPolicyText)
        {
            ttsbegin;
            this.selectForUpdate(true);
            this.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjExpPoliciesExpense</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks the project policies defined for the requisition expense line.
    /// </summary>
    /// <returns>
    ///  True if there was a failure, false otherwise.
    /// </returns>
    boolean validateProjExpPoliciesExpense()
    {
        CustAccount          sClient;
        ProjInvoiceProjId    sContract;
        ProjExpPolicies      tProjPolicies;
        ProjTable            projTable = ProjTable::findRecId(this.ProjTable);
        boolean              ret = true;
        ProjLineProperty     tProjLineProperty;
        str                  dateStr;

        //reset policy status
        this.ProjPolicyStatus = ProjExpPolicyStatus::NoPolicy;
        this.ProjPolicyText = '';

        sContract = projTable.ProjInvoiceProjId;
        sClient = ProjFundingSource::findCustAccount(sContract).CustAccount;
        dateStr = date2str(this.EstimatedDate, 312, 2,3,2,3,4, DateFlags::FormatAll);

        //retrieve company rules
        tProjPolicies = ProjExpPolicies::findRulesByType(this.EstimatedDate, this.TransactionCurrencyCode,
                this.Category, 0, '', sClient, sContract, projTable.ProjId,
                ProjExpPolicyPerUnit::Expense, ProjExpPolicyType::Company);

        //Check Company Rules
        while (tProjPolicies)
        {
            str projPolicyMessage = '';

            //Check Amount
            if (this.TransactionCurrencyAmount > tProjPolicies.AllowableAmount)
            {
                if (tProjPolicies.MaximumAmount == 0 || this.TransactionCurrencyAmount > tProjPolicies.MaximumAmount)
                {
                    //fail
                    this.ProjPolicyStatus = ProjExpPolicyStatus::ExpenseFailed;
                    ret = false;
                }
                else
                {
                    // If there is already an error, that takes precedence. Don't overwrite.
                    if ((this.ProjPolicyStatus != ProjExpPolicyStatus::DayFailed) && (this.ProjPolicyStatus != ProjExpPolicyStatus::ReportFailed) && (this.ProjPolicyStatus != ProjExpPolicyStatus::ExpenseFailed))
                    {
                        this.ProjPolicyStatus = ProjExpPolicyStatus::ExpenseWarning;
                    }
                }

                projPolicyMessage = strFmt("@Expense:ProjectPolicyMessage_ExpenseLevel", this.TransactionCurrencyAmount, this.Category, tProjPolicies.AllowableAmount);
                if (this.ProjPolicyText != '')
                {
                    this.ProjPolicyText += ' ' + projPolicyMessage;
                }
                else
                {
                    this.ProjPolicyText = projPolicyMessage;
                }
            }
            next tProjPolicies;
        }

        if (!ret)
        {
            return ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyDayOrReportProjectPolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the requisition expense line has any project policy violations on day or report level.
    /// </summary>
    /// <returns>
    /// True if the requisition expense line has project policy violations, false otherwise.
    /// </returns>
    public boolean anyDayOrReportProjectPolicyViolations()
    {
        return (this.ProjPolicyStatus == ProjExpPolicyStatus::DayFailed
                || this.ProjPolicyStatus == ProjExpPolicyStatus::DayWarning
                || this.ProjPolicyStatus == ProjExpPolicyStatus::ReportFailed
                || this.ProjPolicyStatus == ProjExpPolicyStatus::ReportWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequisitionTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets requisition table record identifier for requisition line.
    /// </summary>
    /// <param name = "_reqNo">Travel requistion number.</param>
    /// <param name = "_legalEntity">Legal entity for the travel requisition.</param>
    public void setRequisitionTableRecId(TrvRequisitionNumber _reqNo, LegalEntityDataAreaId _legalEntity)
    {
        TrvRequisitionTable trvRequisitionTable;
        select RecId from trvRequisitionTable
            where trvRequisitionTable.RequisitionNumber == _reqNo
            && trvRequisitionTable.ReferenceDataAreaId == _legalEntity;
        this.TrvRequisitionTable = trvRequisitionTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets project record identifier for requisition line.
    /// </summary>
    /// <param name = "_projNum">Project identifier.</param>
    /// <param name = "_legalEntity">Legal entity for the travel requisition.</param>
    public void setProjTableRecId(ProjId _projNum, LegalEntityDataAreaId _legalEntity = curExt())
    {
        ProjTable projTable;
        changecompany(_legalEntity)
        {
            select RecId from projTable
                where projTable.ProjId == _projNum ;
        }
        this.ProjTable = projTable.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ExpenseTravelRequisition</ConfigurationKey>
	<DeveloperDocumentation>@SYS317019</DeveloperDocumentation>
	<Label>@SYS153130</Label>
	<SingularLabel>@SYS153130</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Category</TitleField1>
	<TitleField2>AccountingCurrencyAmount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Expense</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TrvPolicyViolationsCache</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TrvPolicyViolationsCache</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SourceDocumentLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>SourceDocumentLine</Relation>
			<Table>SourceDocumentLine</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EstimatedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Expense</Name>
			<Label>@SYS101318</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EstimatedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReconciliationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Preview</Name>
			<Label>@SYS313169</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EstimatedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS103045</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReferenceDataArea</Name>
			<Label>@SYS135125</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Merchant</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction_Airline</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Merchant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AirlineServiceClass</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction_CarRental</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Merchant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarRentalVehicleClass</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction_Mileage</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Merchant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mileage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction_Perdiem</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Merchant</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrvLocations</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerdiemDateFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerdiemDateTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountingCurrencyAmount</Name>
			<Label>AccountingCurrencyAmount</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccountingCurrencyAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AirlineServiceClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvAirlineServiceClassEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CarRentalVehicleClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvCarRentalVehicleClassEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Category</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostTypeEDT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EstimatedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvDateStd</ExtendedDataType>
			<Label>@SYS153131</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchangeRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExpType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TrvExpType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsBudgetCheckPending</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Merchant</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvExpMerchantId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Mileage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvMileage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MileageRate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PerdiemDateFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvDateTime</ExtendedDataType>
			<Label>@SYS122757</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PerdiemDateTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvDateTime</ExtendedDataType>
			<Label>@SYS122758</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PerdiemLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>128</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<Label>@Expense:Billable</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS103045</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReconciliationStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TrvRequisitionReconciliationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvTransactionCurrencyAmount</ExtendedDataType>
			<Label>@SYS153133</Label>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TrvLocations</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS115833</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TrvRequisitionTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjPolicyStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjExpPolicyStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPolicyText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysInfoLogStr</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LegalEntityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TrvRequisitionTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TrvRequisitionTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceDataAreaId</Name>
					<Field>ReferenceDataAreaId</Field>
					<RelatedField>DataArea</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCurrencyCode</Name>
					<SourceEDT>TrvCurrencyCode</SourceEDT>
					<Field>TransactionCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Designates</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DesginatedBy</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LegallyAccounts</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LegallyAccountedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceDataAreaId</Name>
					<Field>ReferenceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TrvRequisitionLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTable</Name>
					<Field>ProjTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceDataAreaId</Name>
					<Field>ReferenceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ProjActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DescribesAccountingOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AccountingDescribedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvCostType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TrvCostType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceDataAreaId</Name>
					<Field>ReferenceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<SourceEDT>TrvCostTypeEDT</SourceEDT>
					<Field>Category</Field>
					<RelatedField>CostType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CostType</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvExpMerchant</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TrvExpMerchant</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceDataAreaId</Name>
					<Field>ReferenceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Merchant</Name>
					<SourceEDT>TrvExpMerchantId</SourceEDT>
					<Field>Merchant</Field>
					<RelatedField>MerchantId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>MerchantIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvLocations</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TrvLocations</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TrvLocations</Name>
					<Field>TrvLocations</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvRequisitionTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TrvRequisitionTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Contains</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BelongsTo</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TrvRequisitionTable</Name>
					<Field>TrvRequisitionTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>