<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrActivityRequirementSet</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrActivityRequirementSet extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applicableResourcesCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of resources that satisfy all the requirements at any point in the
    /// specified date interval.
    /// </summary>
    /// <param name="_searchFromDate">
    /// The first date on which to search for resources.
    /// </param>
    /// <param name="_searchToDate">
    /// The last date on which to search for resources.
    /// </param>
    /// <param name="_siteId">
    /// The ID of the site on which to search for resources.
    /// </param>
    /// <param name="_jobSchedRequirements">
    /// A Boolean value that indicates whether the activity requirements that the list is based on is
    /// required to have the <c>UsedForJobScheduling</c> value set to true in order to be included as
    /// filters.
    /// </param>
    /// <param name="_operationSchedRequirements">
    /// A Boolean value that indicates whether the activity requirements that the list is based on are
    /// required to have the <c>UsedForOperationScheduling</c> value set to true in order to be included as
    /// filters.
    /// </param>
    /// <param name="_retrieveGroups">
    /// A Boolean value that indicates whether the resource groups are retrieved.
    /// </param>
    /// <returns>
    /// The count of applicable resources.
    /// </returns>
    public int applicableResourcesCount(
        TransDate       _searchFromDate             = dateNull(),
        TransDate       _searchToDate               = maxDate(),
        InventSiteId    _siteId                     = '',
        boolean         _jobSchedRequirements       = false,
        boolean         _operationSchedRequirements = false,
        boolean         _retrieveGroups             = false)
    {
        List applicableResources = this.applicableResourcesList(_searchFromDate, _searchToDate, _siteId, _jobSchedRequirements, _operationSchedRequirements, _retrieveGroups);

        return applicableResources.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applicableResourcesList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of the IDs of the resources that satisfy all the requirements at any point in the
    /// specified date interval.
    /// </summary>
    /// <param name="_searchFromDate">
    /// The first date on which to search for resources.
    /// </param>
    /// <param name="_searchToDate">
    /// The last date on which to search for resources.
    /// </param>
    /// <param name="_siteId">
    /// The ID of the site on which to search for resources.
    /// </param>
    /// <param name="_jobSchedRequirements">
    /// A Boolean value that indicates whether the activity requirements that the list is based on is
    /// required to have the <c>UsedForJobScheduling</c> value set to true in order to be included as
    /// filters.
    /// </param>
    /// <param name="_operationSchedRequirements">
    /// A Boolean value that indicates whether the activity requirements that the list is based on are
    /// required to have the <c>UsedForOperationScheduling</c> value set to true in order to be included as
    /// filters.
    /// </param>
    /// <param name="_retrieveGroups">
    /// A Boolean value that indicates whether the resource groups are retrieved.
    /// </param>
    /// <returns>
    /// A list of applicable resources or resource groups.
    /// </returns>
    public List applicableResourcesList(TransDate       _searchFromDate             = dateNull(),
                                        TransDate       _searchToDate               = maxDate(),
                                        InventSiteId    _siteId                     = '',
                                        boolean         _jobSchedRequirements       = false,
                                        boolean         _operationSchedRequirements = false,
                                        boolean         _retrieveGroups             = false)
    {
        List                result;
        Set                 resourceSet;
        QueryRun            queryRun;
        Query               query;
        WrkCtrTable         wrkCtrTable;
        WrkCtrResourceGroup wrkCtrResourceGroup;

        resourceSet = new Set(Types::String);
        result = new List(Types::String);

        query = this.applicableResourcesQuery(_searchFromDate, _searchToDate, _siteId, _jobSchedRequirements, _operationSchedRequirements, _retrieveGroups);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            if (!_retrieveGroups)
            {
                wrkCtrTable = queryRun.get(tableNum(WrkCtrTable));
                result.addEnd(wrkCtrTable.WrkCtrId);
            }
            else
            {
                wrkCtrResourceGroup = queryRun.get(tableNum(WrkCtrResourceGroup));
                if (wrkCtrResourceGroup.WrkCtrId &&
                    !resourceSet.in(wrkCtrResourceGroup.WrkCtrId))
                {
                    result.addEnd(wrkCtrResourceGroup.WrkCtrId);
                    resourceSet.add(wrkCtrResourceGroup.WrkCtrId);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applicableResourcesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Composes a query that will result in the resources that at some point in the given date interval satisfies all the requirements.
    /// </summary>
    /// <param name="_searchFromDate">
    /// The first date to search for resources on.
    /// </param>
    /// <param name="_searchToDate">
    /// The last date to search for resources on.
    /// </param>
    /// <param name="_siteId">
    /// The Id of the site to search for resources on. If blank the search is not limited to resources on a specific site.
    /// </param>
    /// <param name="_jobSchedRequirements">
    /// true if the activity requirements must have the <c>UsedForJobScheduling</c> flag set to true to be included as filters in the query; otherwise, false.
    /// </param>
    /// <param name="_operationSchedRequirements">
    /// true if the activity requirements must have the <c>UsedForOperationScheduling</c> flag set to true to be included as filters in the query; otherwise, false.
    /// </param>
    /// <param name="_retrieveGroups">
    /// true if the resource groups should be returned; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>Query</c> based on the <c>WrkCtrTable</c> table as primary data source.
    /// </returns>
    public Query applicableResourcesQuery(
        TransDate       _searchFromDate                     = dateNull(),
        TransDate       _searchToDate                       = maxDate(),
        InventSiteId    _siteId                             = '',
        boolean         _jobSchedRequirements               = false,
        boolean         _operationSchedRequirements         = false,
        boolean         _retrieveGroups                     = false)
    {
        return WrkCtrApplicableResourceQuery::newStandard(this,
                                                    _searchFromDate,
                                                    _searchToDate,
                                                    _siteId,
                                                    _jobSchedRequirements,
                                                    _operationSchedRequirements,
                                                    _retrieveGroups).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the <c>Quantity</c> field contains a valid value.
    /// </summary>
    /// <returns>
    ///    true if the <c>Quantity</c> field contains an invalid value; otherwise, false.
    /// </returns>
    boolean checkQuantity()
    {
        WrkCtrActivityRequirement           wrkCtrActivityRequirement;
        boolean                             ret = true;

        if (this.RecId && this.Quantity > 1)
        {
            select firstonly wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.ActivityRequirementSet  == this.RecId
                   && wrkCtrActivityRequirement.RelationshipType        == WrkCtrActivityRequirementType::Resource;

            if (wrkCtrActivityRequirement)
            {
                ret = checkFailed("@SYS134214");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the requirements of the set are correct.
    /// </summary>
    /// <returns>
    ///    true if the requirements are correct; otherwise, false.
    /// </returns>
    public boolean checkRequirements()
    {
        WrkCtrActivityRequirement   wrkCtrActivityRequirement;
        boolean                     ret = true;

        if (this.RecId)
        {
            // The set must contain at least one requirement
            select firstonly RecId from wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.ActivityRequirementSet == this.RecId;

            if (!wrkCtrActivityRequirement.RecId)
            {
                ret = checkFailed("@SYS301010");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstApplicableResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the first of the resources that at some point in the given date interval satisfies all the
    ///    requirements.
    /// </summary>
    /// <param name="_searchFromDate">
    ///    The first date to search for resources on.
    /// </param>
    /// <param name="_searchToDate">
    ///    The last date to search for resources on.
    /// </param>
    /// <param name="_siteId">
    ///    The ID of the site to search for resources on. If blank the search is not limited to resources on a
    ///    specific site.
    /// </param>
    /// <returns>
    ///    A <c>WrkCtrTable</c> record that satisfies the requirements.
    /// </returns>
    public WrkCtrTable firstApplicableResource( TransDate       _searchFromDate   = dateNull(),
                                                TransDate       _searchToDate     = maxDate(),
                                                InventSiteId    _siteId           = '')
    {
        QueryRun    queryRun;
        Query       query;
        WrkCtrTable wrkCtrTable;

        query = this.applicableResourcesQuery(_searchFromDate, _searchToDate, _siteId);

        queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            wrkCtrTable = queryRun.get(tableNum(WrkCtrTable));
        }

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstApplicableResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first resource group that satisfies all the requirements at any point in a specified date
    /// interval.
    /// </summary>
    /// <param name="_searchFromDate">
    /// The first date on which to search for resources.
    /// </param>
    /// <param name="_searchToDate">
    /// The last date on which to search for resources.
    /// </param>
    /// <param name="_siteId">
    /// The ID of the site on which to search for resources.
    /// </param>
    /// <returns>
    /// The first <c>WrkCtrResourceGroup</c> record that satisfies the requirements.
    /// </returns>
    public WrkCtrResourceGroup firstApplicableResourceGroup( TransDate       _searchFromDate   = dateNull(),
                                                             TransDate       _searchToDate     = maxDate(),
                                                             InventSiteId    _siteId           = '')
    {
        QueryRun                    queryRun;
        Query                       query;
        WrkCtrTable                 wrkCtrTable;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        Map                         resourceGroupMap = new Map(Types::Int64, Types::Int64);
        int                         resourceCount;

        // Get the query for the individual resources
        query = this.applicableResourcesQuery(_searchFromDate, _searchToDate, _siteId);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            wrkCtrTable = queryRun.get(tableNum(WrkCtrTable));
            wrkCtrResourceGroupResource = WrkCtrTable::resourceGroupResource(wrkCtrTable.WrkCtrId, _searchFromDate, _searchToDate);

            if (resourceGroupMap.exists(wrkCtrResourceGroupResource.ResourceGroup))
            {
                resourceCount = resourceGroupMap.lookup(wrkCtrResourceGroupResource.ResourceGroup);
                resourceCount++;
            }
            else
            {
                resourceCount = 1;
            }

            if (resourceCount >= this.Quantity)
            {
                wrkCtrResourceGroup = WrkCtrResourceGroup::find(wrkCtrResourceGroupResource.ResourceGroup);
                break;
            }
            else
            {
                resourceGroupMap.insert(wrkCtrResourceGroupResource.ResourceGroup, resourceCount);
            }
        }

        return wrkCtrResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Quantity = 1;
        this.LoadPercent = 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of activity requirements that this set contains.
    /// </summary>
    /// <returns>
    ///    The number of activity requirements that this set contains.
    /// </returns>
    public int requirementCount()
    {
        WrkCtrActivityRequirement   wrkCtrActivityRequirement;

        if (this.RecId)
        {
            select count(RecId) from wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.ActivityRequirementSet == this.RecId;
        }

        return int642int(wrkCtrActivityRequirement.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceGroupRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the resource group that is specified as a requirement by the set.
    /// </summary>
    /// <returns>
    ///    The <c>WrkCtrResourceGroup</c> record for the resource group that is specified as a requirement
    ///    by the set.
    /// </returns>
    public WrkCtrResourceGroup resourceGroupRequirement()
    {
        WrkCtrResourceGroup                     wrkCtrResourceGroup;
        WrkCtrActivityRequirement               wrkCtrActivityRequirement;
        WrkCtrActivityResourceGroupRequirement  wrkCtrActivityResourceGroupRequirement;

        select firstonly wrkCtrResourceGroup
            exists join wrkCtrActivityResourceGroupRequirement
            where   wrkCtrResourceGroup.RecId       == wrkCtrActivityResourceGroupRequirement.ResourceGroup
            exists join wrkCtrActivityRequirement
            where   wrkCtrActivityResourceGroupRequirement.ActivityRequirement  == wrkCtrActivityRequirement.RecId  &&
                    wrkCtrActivityRequirement.ActivityRequirementSet            == this.RecId;

        return wrkCtrResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the resource specified by the set as a requirement.
    /// </summary>
    /// <returns>
    /// The <c>WrkCtrTable</c> record for the resource specified by the set as a requirement.
    /// </returns>
    public WrkCtrTable resourceRequirement()
    {
        WrkCtrTable                         wrkCtrTable;
        WrkCtrActivityRequirement           wrkCtrActivityRequirement;
        WrkCtrActivityResourceRequirement   wrkCtrActivityResourceRequirement;

        select firstonly wrkCtrTable
            exists join wrkCtrActivityResourceRequirement
            where   wrkCtrTable.WrkCtrId    == wrkCtrActivityResourceRequirement.WrkCtrId                       &&
                    wrkCtrTable.DataAreaId  == wrkCtrActivityResourceRequirement.ResourceDataAreaId
            exists join wrkCtrActivityRequirement
            where   wrkCtrActivityResourceRequirement.ActivityRequirement   == wrkCtrActivityRequirement.RecId  &&
                    wrkCtrActivityRequirement.ActivityRequirementSet        == this.RecId;

        return wrkCtrTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedulingProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>Map</c> with all the requirements converted to text based scheduling properties.
    /// </summary>
    /// <param name="_siteId">
    /// The Id of the site to add as property.
    /// </param>
    /// <param name="_jobSchedRequirements">
    /// true if the activity requirements that the property map is based on must have the <c>UsedForJobScheduling</c> flag set to true to be included as properties; otherwise, false.
    /// </param>
    /// <param name="_operationSchedRequirements">
    /// true if the activity requirements that the property map is based on must have the <c>UsedForOperationScheduling</c> flag set to true to be included as properties; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>Map</c> with all the requirements converted to text based scheduling properties.
    /// </returns>
    public Map schedulingProperties(InventSiteId    _siteId                     = '',
                                    boolean         _jobSchedRequirements       = false,
                                    boolean         _operationSchedRequirements = false )
    {
        WrkCtrActivityRequirement               wrkCtrActivityRequirement;
        WrkCtrActivityCapabilityRequirement     wrkCtrActivityCapabilityRequirement;
        WrkCtrActivityCertificateRequirement    wrkCtrActivityCertificateRequirement;
        WrkCtrActivityCourseRequirement         wrkCtrActivityCourseRequirement;
        WrkCtrActivityResourceRequirement       wrkCtrActivityResourceRequirement;
        WrkCtrActivityResourceGroupRequirement  wrkCtrActivityResourceGroupRequirement;
        WrkCtrActivitySkillRequirement          wrkCtrActivitySkillRequirement;
        WrkCtrActivityResourceTypeRequirement   wrkCtrActivityResourceTypeRequirement;
        WrkCtrActivityPersonTitleRequirement    wrkCtrActivityPersonTitleRequirement;

        Map                                     propertyMap = new Map(Types::String, Types::Real);

        if (_siteId)
        {
            propertyMap.insert(WrkCtrSchedulingProperty::inventSiteSchedulingProperty(_siteId), 0.0);
        }

        // Loop all requirements
        while select wrkCtrActivityRequirement
            where wrkCtrActivityRequirement.ActivityRequirementSet              == this.RecId
              && (wrkCtrActivityRequirement.UsedForJobScheduling                == NoYes::Yes || !_jobSchedRequirements)
              && (wrkCtrActivityRequirement.UsedForOperationScheduling          == NoYes::Yes || !_operationSchedRequirements)
            outer join wrkCtrActivityCapabilityRequirement
                where wrkCtrActivityCapabilityRequirement.ActivityRequirement    == wrkCtrActivityRequirement.RecId
            outer join wrkCtrActivityCertificateRequirement
                where wrkCtrActivityCertificateRequirement.ActivityRequirement   == wrkCtrActivityRequirement.RecId
            outer join wrkCtrActivityCourseRequirement
                where wrkCtrActivityCourseRequirement.ActivityRequirement        == wrkCtrActivityRequirement.RecId
            outer join wrkCtrActivityResourceRequirement
                where wrkCtrActivityResourceRequirement.ActivityRequirement      == wrkCtrActivityRequirement.RecId
            outer join wrkCtrActivityResourceGroupRequirement
               where wrkCtrActivityResourceGroupRequirement.ActivityRequirement == wrkCtrActivityRequirement.RecId
            outer join wrkCtrActivitySkillRequirement
                where wrkCtrActivitySkillRequirement.ActivityRequirement         == wrkCtrActivityRequirement.RecId
            outer join wrkCtrActivityResourceTypeRequirement
                where wrkCtrActivityResourceTypeRequirement.ActivityRequirement  == wrkCtrActivityRequirement.RecId
            outer join wrkCtrActivityPersonTitleRequirement
                where wrkCtrActivityPersonTitleRequirement.ActivityRequirement   == wrkCtrActivityRequirement.RecId
        {
            if (this.includeRequirementInSchedulingProperties(wrkCtrActivityRequirement))
            {
                // Add the property of the requirement to the map
                wrkCtrActivityRequirement.determineSubtype(
                                                wrkCtrActivityCapabilityRequirement,
                                                wrkCtrActivityCertificateRequirement,
                                                wrkCtrActivityCourseRequirement,
                                                wrkCtrActivityResourceRequirement,
                                                wrkCtrActivityResourceGroupRequirement,
                                                wrkCtrActivitySkillRequirement,
                                                wrkCtrActivityResourceTypeRequirement,
                                                wrkCtrActivityPersonTitleRequirement).addToPropertyMap(propertyMap);
            }
        }

        return propertyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeRequirementInSchedulingProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether a requirement must be included in scheduling properties.
    /// </summary>
    /// <param name = "_wrkCtrActivityRequirement">A resource requirement.</param>
    /// <returns>true if <paramref name="_wrkCtrActivityRequirement" /> must be included in scheduling properties; otherwise, false.</returns>
    protected boolean includeRequirementInSchedulingProperties(WrkCtrActivityRequirement _wrkCtrActivityRequirement)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WrkCtrActivityRequirementSet, Quantity):
                ret = this.checkQuantity();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity record to which the requirement set relates.
    /// </summary>
    /// <returns>
    /// The activity record to which the requirement set relates.
    /// </returns>
    public WrkCtrActivity wrkCtrActivity()
    {
        return WrkCtrActivity::find(this.Activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistingRequirementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that the requirements with the specified requirement type do not exist in the requirement
    ///    set.
    /// </summary>
    /// <param name="_requirementType">
    ///    The requirement type for which to check.
    /// </param>
    /// <param name="_activityRequirementSet">
    ///    The activity requirement set for which to perform the check.
    /// </param>
    /// <param name="_activityRequirement">
    ///    The activity requirement for which to perform the check.
    /// </param>
    /// <returns>
    ///    true if no other requirements with the specified requirement type exist in the set; otherwise,
    ///    false.
    /// </returns>
    public static boolean checkExistingRequirementType(WrkCtrActivityRequirementType _requirementType,
                                                       RefRecId                      _activityRequirementSet,
                                                       RefRecId                      _activityRequirement)
    {
        WrkCtrActivityRequirement   wrkCtrActivityRequirement;
        boolean                     ret = true;

        select firstonly RecId from wrkCtrActivityRequirement
            where wrkCtrActivityRequirement.RelationshipType        == _requirementType
               && wrkCtrActivityRequirement.ActivityRequirementSet  == _activityRequirementSet
               && wrkCtrActivityRequirement.RecId                   != _activityRequirement;

        if (wrkCtrActivityRequirement.RecId)
        {
            ret = checkFailed(strFmt("@SYS133971", enum2str(_requirementType)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResourceIsHumanResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks that any existing requirements for a resource or resource type are only for human resources.
    /// </summary>
    /// <param name="_activityRequirementSet">
    ///    The activity requirement set for which to perform the check.
    /// </param>
    /// <returns>
    ///    true if any existing requirements for a resource or resource type are for human resources;
    ///    otherwise, false.
    /// </returns>
    public static boolean checkResourceIsHumanResource(RefRecId _activityRequirementSet)
    {
        WrkCtrActivityRequirement               wrkCtrActivityRequirement;
        WrkCtrActivityResourceRequirement       wrkCtrActivityResourceRequirement;
        WrkCtrTable                             wrkCtrTable;
        WrkCtrActivityResourceTypeRequirement   wrkCtrActivityResourceTypeRequirement;

        boolean ret = true;

        // Requirements can only be selected when the required resource is of type Human Resources
        select firstonly RecId from wrkCtrActivityRequirement
            where wrkCtrActivityRequirement.ActivityRequirementSet          == _activityRequirementSet
            exists join wrkCtrActivityResourceRequirement
                where wrkCtrActivityResourceRequirement.ActivityRequirement == wrkCtrActivityRequirement.RecId
            exists join wrkCtrTable
                where wrkCtrTable.WrkCtrId                                  == wrkCtrActivityResourceRequirement.WrkCtrId
                   && wrkCtrTable.DataAreaId                                == wrkCtrActivityResourceRequirement.ResourceDataAreaId
                   && wrkCtrTable.WrkCtrType                                != WrkCtrType::Personnel;

        if (wrkCtrActivityRequirement.RecId)
        {
            ret = checkFailed("@SYS301006");
        }

        if (ret)
        {
            // Requirements can only be selected when resources of type Human resource are required
            select firstonly RecId from wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.ActivityRequirementSet          == _activityRequirementSet
                exists join wrkCtrActivityResourceTypeRequirement
                    where wrkCtrActivityResourceTypeRequirement.ActivityRequirement == wrkCtrActivityRequirement.RecId
                       && wrkCtrActivityResourceTypeRequirement.ResourceType        != WrkCtrType::Personnel;

            if (wrkCtrActivityRequirement.RecId)
            {
                ret = checkFailed("@SYS301007");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the Requirement set and all requirements from one activity to another.
    /// </summary>
    /// <param name="_fromActivity">
    ///    The record ID if the activity to copy from.
    /// </param>
    /// <param name="_toActivity">
    ///    The record ID if the activity to copy to.
    /// </param>
    static void copyRequirements(RefRecId _fromActivity, RefRecId _toActivity)
    {
        if (_fromActivity == _toActivity)
        {
            return;
        }

        ttsbegin;

        WrkCtrActivityRequirementSet fromWrkCtrActivityRequirementSet;

        while select fromWrkCtrActivityRequirementSet
            where fromWrkCtrActivityRequirementSet.Activity == _fromActivity
        {
            WrkCtrActivityRequirementSet toWrkCtrActivityRequirementSet;

            // Find and update or create a new activityrequirementSet.
            select firstonly forupdate toWrkCtrActivityRequirementSet
                where toWrkCtrActivityRequirementSet.Activity == _toActivity;

            toWrkCtrActivityRequirementSet.createOrUpdateActivityRequirementSet(fromWrkCtrActivityRequirementSet, _toActivity);

            WrkCtrActivityRequirement fromWrkCtrActivityRequirement;

            while select fromWrkCtrActivityRequirement
                where fromWrkCtrActivityRequirement.ActivityRequirementSet == fromWrkCtrActivityRequirementSet.RecId
            {
                WrkCtrActivityRequirement toWrkCtrActivityRequirement;
                toWrkCtrActivityRequirement.copyFromActivityRequirement(fromWrkCtrActivityRequirement, toWrkCtrActivityRequirementSet);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateActivityRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the activity requirement set is copied from <paramref name="_fromWrkCtrActivityRequirementSet" />.
    /// </summary>
    /// <param name = "_fromWrkCtrActivityRequirementSet">An activity requirement set to copy from.</param>
    /// <param name = "_toActivity">An activity record ID.</param>
    protected void createOrUpdateActivityRequirementSet (WrkCtrActivityRequirementSet _fromWrkCtrActivityRequirementSet, RefRecId _toActivity)
    {
        if (!this.RecId)
        {
            this.data(_fromWrkCtrActivityRequirementSet);
            this.Activity = _toActivity;
            this.insert();
        }
        else
        {
            this.Quantity = _fromWrkCtrActivityRequirementSet.Quantity;
            this.LoadPercent = _fromWrkCtrActivityRequirementSet.LoadPercent;
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WrkCtrActivityRequirement</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The requirement set record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WrkCtrActivityRequirementSet</c> table; otherwise, an empty record.
    /// </returns>
    static WrkCtrActivityRequirementSet find(recId     _recId,
                                             boolean   _forUpdate = false)
    {
        WrkCtrActivityRequirementSet   wrkCtrActivityRequirementSet;
        wrkCtrActivityRequirementSet.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly wrkCtrActivityRequirementSet
                where wrkCtrActivityRequirementSet.RecId == _recId;
        }

        return wrkCtrActivityRequirementSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>WrkCtrActivityRequirementSet</c> buffer based on the record ID of an activity
    /// </summary>
    /// <param name="_activity">
    ///    The record ID of the activity to search for.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>WrkCtrActivityRequirementSet</c> table; otherwise, an empty record.
    /// </returns>
    static WrkCtrActivityRequirementSet findActivity(recId     _activity,
                                                     boolean   _forUpdate = false)
    {
        WrkCtrActivityRequirementSet   wrkCtrActivityRequirementSet;

        wrkCtrActivityRequirementSet.selectForUpdate(_forUpdate);

        if (_activity)
        {
            select firstonly wrkCtrActivityRequirementSet
                where wrkCtrActivityRequirementSet.Activity == _activity;
        }

        return wrkCtrActivityRequirementSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRouteOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first activity requirement for a given RouteOpr.
    /// </summary>
    /// <returns>
    /// The first activity requirement set that represents this record.
    /// </returns>
    public static WrkCtrActivityRequirementSet findByRouteOpr(RecId _routeOprRecId, DataAreaId _dataAreaId)
    {
        WrkCtrActivityRequirementSet wrkCtrActivityRequirementSet;

        if (_routeOprRecId)
        {
            WrkCtrRouteOprActivity wrkCtrRouteOprActivity;

            select firstonly wrkCtrActivityRequirementSet
                exists join wrkCtrRouteOprActivity
                where wrkCtrRouteOprActivity.RouteOpr == _routeOprRecId
                   && wrkCtrRouteOprActivity.RouteOprDataAreaId == _dataAreaId
                   && wrkCtrActivityRequirementSet.Activity == wrkCtrRouteOprActivity.Activity;
        }

        return wrkCtrActivityRequirementSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProdRouteOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first production route operation relation activity.
    /// </summary>
    /// <param name = "_operationNumber">The route operation number.</param>
    /// <param name = "_operationsPriority">The route operation priority.</param>
    /// <param name = "_prodId">The production number.</param>
    /// <param name = "_dataAreaId">The company data area id.</param>
    /// <returns>The first production route operation relation activity that matches the given parameters.</returns>
    public static WrkCtrActivityRequirementSet findByProdRouteOpr(
        OprNum              _operationNumber,
        RouteOprPriority    _operationsPriority,
        ProdId              _prodId,
        DataAreaId          _dataAreaId)
    {        
        WrkCtrActivityRequirementSet wrkCtrActivityRequirementSet;
        if (_operationNumber && _prodId)
        {
            WrkCtrProdRouteActivity wrkCtrProdRouteActivity;

            select firstonly wrkCtrActivityRequirementSet
                exists join wrkCtrProdRouteActivity
                where wrkCtrProdRouteActivity.OprNum            == _operationNumber
                   && wrkCtrProdRouteActivity.OprPriority       == _operationsPriority
                   && wrkCtrProdRouteActivity.ProdId            == _prodId
                   && wrkCtrProdRouteActivity.RouteDataAreaId   == _dataAreaId
                   && wrkCtrActivityRequirementSet.Activity     == wrkCtrProdRouteActivity.Activity;
        }

        return wrkCtrActivityRequirementSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitActivityQueryOnResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Limits an activity query to only include records for which the given resource or group is
    ///    applicable.
    /// </summary>
    /// <param name="_qbdsActivity">
    ///    A query for the <c>WrkCtrAcivity</c> records.
    /// </param>
    /// <param name="_activityType">
    ///    The type of activity for which to limit the query.
    /// </param>
    /// <param name="_wrkCtrTable">
    ///    The resource or resource group for which the activity is filtered on.
    /// </param>
    /// <returns>
    ///    A handle to the filter table records that are being used.
    /// </returns>
    /// <remarks>
    ///    After this method is used the <c>WrkCtrActivityResourceFilter::deleteFilterId</c> static method
    ///    must be called to reset the filter.
    /// </remarks>
    public static WrkCtrActivityFilterId limitActivityQueryOnResource(QueryBuildDataSource _qbdsActivity, WrkCtrActivityType _activityType, WrkCtrTable _wrkCtrTable)
    {
        WrkCtrActivityFilterId          filterId;
        WrkCtrResourceGroupResource     wrkCtrResourceGroupResource;
        Query                           query;
        QueryRun                        queryRun;
        QueryBuildDataSource            qbdsActivityResource;
        WrkCtrActivity                  wrkCtrActivity;
        RecordInsertList                recordInsertList;
        WrkCtrActivityResourceFilter    wrkCtrActivityResourceFilter;
        QueryBuildDataSource            qbdsActivityRequirementSet;
        QueryBuildDataSource            qbdsActivityResourceFilter;
        QueryBuildDataSource            qbdsActivityRequirementView;
        QueryBuildDataSource            qbdsWrkCtrAbility;
        QueryBuildDataSource            qbdsWrkCtrResourceGroupResource;
        QueryBuildRange                 qbrActivityRequirementSetQuantity;

        date                            todaysDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (_wrkCtrTable.IsIndividualResource)
        {
            // Just limit the existing query directly from the resource's abilities
            qbdsActivityRequirementSet = _qbdsActivity.addDataSource(tableNum(WrkCtrActivityRequirementSet), 'RequirementSetFilter');
            qbdsActivityRequirementSet.joinMode(JoinMode::ExistsJoin);
            qbdsActivityRequirementSet.addLink(fieldNum(WrkCtrActivity, RecId), fieldNum(WrkCtrActivityRequirementSet, Activity));

            qbdsActivityRequirementView = qbdsActivityRequirementSet.addDataSource(tableNum(WrkCtrActivityRequirementView));
            qbdsActivityRequirementView.joinMode(JoinMode::NoExistsJoin);
            qbdsActivityRequirementView.addLink(fieldNum(WrkCtrActivityRequirementSet, RecId), fieldNum(WrkCtrActivityRequirementView, ActivityRequirementSet));

            qbdsWrkCtrAbility = qbdsActivityRequirementView.addDataSource(tableNum(WrkCtrAbility));
            qbdsWrkCtrAbility.joinMode(JoinMode::NoExistsJoin);
            qbdsWrkCtrAbility.addLink(fieldNum(WrkCtrActivityRequirementView, AbilityType), fieldNum(WrkCtrAbility, AbilityType));
            qbdsWrkCtrAbility.addLink(fieldNum(WrkCtrActivityRequirementView, AbilityRecId), fieldNum(WrkCtrAbility, AbilityRecId));
            qbdsWrkCtrAbility.addRange(fieldNum(WrkCtrAbility, LevelValue)).value(
                            strFmt('(%1.%2 >= %3.%4)',
                                   qbdsWrkCtrAbility.name(),
                                   fieldStr(WrkCtrAbility, LevelValue),
                                   qbdsActivityRequirementView.name(),
                                   fieldStr(WrkCtrActivityRequirementView, MinimumLevelNeeded)));
            qbdsWrkCtrAbility.addRange(fieldNum(WrkCtrAbility, WrkCtrId)).value(queryValue(_wrkCtrTable.WrkCtrId));
            qbdsWrkCtrAbility.addRange(fieldNum(WrkCtrAbility, ValidFrom)).value(SysQuery::range(dateNull(),todaysDate));
            qbdsWrkCtrAbility.addRange(fieldNum(WrkCtrAbility, ValidTo)).value(SysQuery::range(todaysDate, dateNull()));
        }
        else
        {
            // Generate new filterId
            filterId = WrkCtrActivityResourceFilter::newFilterId();

            // Get the resource count per activity and insert into the filter table
            recordInsertList = new RecordInsertList(tableNum(WrkCtrActivityResourceFilter));

            query = new Query();
            qbdsActivityResource = query.addDataSource(tableNum(WrkCtrActivity));
            qbdsActivityResource.addRange(fieldNum(WrkCtrActivity, EntityType)).value(queryValue(_activityType));

            qbdsWrkCtrResourceGroupResource = qbdsActivityResource.addDataSource(tableNum(WrkCtrResourceGroupResource));
            qbdsWrkCtrResourceGroupResource.addRange(fieldNum(WrkCtrResourceGroupResource, ResourceGroup)).value(queryValue(WrkCtrResourceGroup::findWrkCtrId(_wrkCtrTable.WrkCtrId).RecId));

            qbdsActivityRequirementSet = qbdsWrkCtrResourceGroupResource.addDataSource(tableNum(WrkCtrActivityRequirementSet), 'RequirementSetFilter');
            qbdsActivityRequirementSet.joinMode(JoinMode::ExistsJoin);
            qbdsActivityRequirementSet.addLink(fieldNum(WrkCtrActivity, RecId), fieldNum(WrkCtrActivityRequirementSet, Activity), qbdsActivityResource.name() );

            qbdsActivityRequirementView = qbdsActivityRequirementSet.addDataSource(tableNum(WrkCtrActivityRequirementView));
            qbdsActivityRequirementView.joinMode(JoinMode::NoExistsJoin);
            qbdsActivityRequirementView.addLink(fieldNum(WrkCtrActivityRequirementSet, RecId), fieldNum(WrkCtrActivityRequirementView, ActivityRequirementSet));

            qbdsWrkCtrAbility = qbdsActivityRequirementView.addDataSource(tableNum(WrkCtrAbility));
            qbdsWrkCtrAbility.joinMode(JoinMode::NoExistsJoin);
            qbdsWrkCtrAbility.addLink(fieldNum(WrkCtrActivityRequirementView, AbilityType), fieldNum(WrkCtrAbility, AbilityType));
            qbdsWrkCtrAbility.addLink(fieldNum(WrkCtrActivityRequirementView, AbilityRecId), fieldNum(WrkCtrAbility, AbilityRecId));
            qbdsWrkCtrAbility.addRange(fieldNum(WrkCtrAbility, LevelValue)).value(
                            strFmt('(%1.%2 >= %3.%4)',
                                   qbdsWrkCtrAbility.name(),
                                   fieldStr(WrkCtrAbility, LevelValue),
                                   qbdsActivityRequirementView.name(),
                                   fieldStr(WrkCtrActivityRequirementView, MinimumLevelNeeded)));
            qbdsWrkCtrAbility.addRange(fieldNum(WrkCtrAbility, ValidFrom)).value(SysQuery::range(dateNull(),todaysDate));
            qbdsWrkCtrAbility.addRange(fieldNum(WrkCtrAbility, ValidTo)).value(SysQuery::range(todaysDate, dateNull()));
            qbdsWrkCtrAbility.addLink(fieldNum(WrkCtrResourceGroupResource, WrkCtrId), fieldNum(WrkCtrAbility, WrkCtrId),qbdsWrkCtrResourceGroupResource.name());

            qbdsActivityResource.addSelectionField(fieldNum(WrkCtrActivity, RecId));
            qbdsActivityResource.addGroupByField(fieldNum(WrkCtrActivity, RecId));
            qbdsWrkCtrResourceGroupResource.addSelectionField(fieldNum(WrkCtrResourceGroupResource, RecId), SelectionField::Count);

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                wrkCtrActivity = queryRun.get(tableNum(WrkCtrActivity));
                wrkCtrResourceGroupResource = queryRun.get(tableNum(WrkCtrResourceGroupResource));

                wrkCtrActivityResourceFilter.FilterId = filterId;
                wrkCtrActivityResourceFilter.Activity = wrkCtrActivity.RecId;
                wrkCtrActivityResourceFilter.ResourceCount = int642int(wrkCtrResourceGroupResource.RecId);
                recordInsertList.add(wrkCtrActivityResourceFilter);
            }
            recordInsertList.insertDatabase();

            // Exist join the original activity data source with the filter table
            // where WrkCtrActivityResourceFilter.ResourceCount >= WrkCtrActivityRequirementSet.Quantity
            qbdsActivityResourceFilter = _qbdsActivity.addDataSource(tableNum(WrkCtrActivityResourceFilter));
            qbdsActivityResourceFilter.joinMode(JoinMode::ExistsJoin);
            qbdsActivityResourceFilter.addLink(fieldNum(WrkCtrActivity, RecId), fieldNum(WrkCtrActivityResourceFilter, Activity));
            qbdsActivityResourceFilter.addRange(fieldNum(WrkCtrActivityResourceFilter, FilterId)).value(queryValue(filterId));

            qbdsActivityRequirementSet = qbdsActivityResourceFilter.addDataSource(tableNum(WrkCtrActivityRequirementSet), 'RequirementSetFilter');
            qbdsActivityRequirementSet.joinMode(JoinMode::ExistsJoin);
            qbdsActivityRequirementSet.addLink(fieldNum(WrkCtrActivityResourceFilter, Activity), fieldNum(WrkCtrActivityRequirementSet, Activity));
            qbrActivityRequirementSetQuantity = qbdsActivityRequirementSet.addRange(fieldNum(WrkCtrActivityRequirementSet, Quantity));
            qbrActivityRequirementSetQuantity .value(
                                            strFmt('(%1.%2 >= %3.%4)',
                                                    qbdsActivityResourceFilter.name(),
                                                    fieldStr(WrkCtrActivityResourceFilter, ResourceCount),
                                                    qbdsActivityRequirementSet.name(),
                                                    fieldStr(WrkCtrActivityRequirementSet, Quantity)));
            qbrActivityRequirementSetQuantity.status(RangeStatus::Hidden);
        }

        return filterId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS134885</DeveloperDocumentation>
	<FormRef>RouteOpr</FormRef>
	<Label>@SYS134729</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Description</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ActivityIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>ActivityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityRequirement</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Activity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Activity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Resources</Name>
			<Label>@SYS10369</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Activity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Activity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrActivityRequirementSetDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LoadPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrLoadPct</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrRequirementQuantity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ActivityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Activity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Activity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WrkCtrActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Activity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ActivityRequirementSet</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Activity</Name>
					<Field>Activity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>