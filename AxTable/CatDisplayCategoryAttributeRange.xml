<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatDisplayCategoryAttributeRange</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatDisplayCategoryAttributeRange extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cloneRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record of the <c>CatDisplayCategoryAttributeRange</c> table by duplicating this record.
    /// </summary>
    /// <param  name='_tblFilterableAttribute'>
    /// The <c>CatDisplayCategoryFilterableAttribute</c> record the cloned <c>CatDisplayCategoryAttributeRange</c> record will point to.
    /// </param>
    /// <returns>
    /// The cloned instance of the <c>CatDisplayCategoryAttributeRange</c> data type.
    /// </returns>
    /// <remarks>
    /// The cloned record is not inserted into the database.
    /// </remarks>
    public CatDisplayCategoryAttributeRange cloneRecord(CatDisplayCategoryFilterableAttribute _tblFilterableAttribute)
    {
        CatDisplayCategoryAttributeRange tblDisplayCategoryAttributeRangeDup;

        tblDisplayCategoryAttributeRangeDup.clear();
        tblDisplayCategoryAttributeRangeDup.FilterAttribute = _tblFilterableAttribute.RecId;
        tblDisplayCategoryAttributeRangeDup.FilterRange = this.FilterRange;
        tblDisplayCategoryAttributeRangeDup.UnitOfMeasure = this.UnitOfMeasure;

        return tblDisplayCategoryAttributeRangeDup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        if ( this.validate() )
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        private boolean validate()
    {
        CatDisplayCategoryFilterRange       validFilterRange;
        CatDisplayCategoryFilterRange       dcFilterRange;
        CatDisplayCategoryAttributeRange    dcPriceRange;

        RefRecID filterAttribute = this.FilterAttribute;
        real lowerLimit;
        real upperLimit;

        //Get the given limit
        select LowerLimit, UpperLimit from dcFilterRange where dcFilterRange.RecId == this.FilterRange;
        lowerLimit = dcFilterRange.LowerLimit;
        upperLimit = dcFilterRange.UpperLimit;

        //Validate if range is overlapping in the beginning
        select FilterAttribute, RecId from dcPriceRange
            join LowerLimit, UpperLimit, RecId from validFilterRange
                where validFilterRange.RecId == dcPriceRange.FilterRange
                    && dcPriceRange.FilterAttribute == filterAttribute
                    && (( validFilterRange.UpperLimit > lowerLimit) && (validFilterRange.UpperLimit < upperLimit ));
        if (validFilterRange)
        {
            throw error(strfmt("@SYS309036",lowerLimit,upperLimit,validFilterRange.LowerLimit,validFilterRange.UpperLimit));
        }

        //Validate if range is overlapping at the end
        select FilterAttribute, RecId from dcPriceRange
            join LowerLimit, UpperLimit, RecId from validFilterRange
                where validFilterRange.RecId == dcPriceRange.FilterRange
                    && dcPriceRange.FilterAttribute == filterAttribute
                    && (( validFilterRange.LowerLimit < upperLimit) && (validFilterRange.LowerLimit > lowerLimit ));
        if (validFilterRange)
        {
            throw error(strfmt("@SYS309036",lowerLimit,upperLimit,validFilterRange.LowerLimit,validFilterRange.UpperLimit));
        }

        //Validate if range is inside the other range
        select FilterAttribute, RecId from dcPriceRange
            join LowerLimit, UpperLimit, RecId from validFilterRange
                where validFilterRange.RecId == dcPriceRange.FilterRange
                    && dcPriceRange.FilterAttribute == filterAttribute
                    && (( validFilterRange.UpperLimit <= upperLimit) && (validFilterRange.LowerLimit >= lowerLimit ));
        if (validFilterRange)
        {
            throw error(strfmt("@SYS309036",lowerLimit,upperLimit,validFilterRange.LowerLimit,validFilterRange.UpperLimit));
        }

        //Validate if someother range is inside the given range
        select FilterAttribute, RecId from dcPriceRange
            join LowerLimit, UpperLimit, RecId from validFilterRange
                where validFilterRange.RecId == dcPriceRange.FilterRange
                    && dcPriceRange.FilterAttribute == filterAttribute
                    && (( validFilterRange.UpperLimit >= upperLimit) && (validFilterRange.LowerLimit <= lowerLimit ));
        if (validFilterRange)
        {
            throw error(strfmt("@SYS309036",lowerLimit,upperLimit,validFilterRange.LowerLimit,validFilterRange.UpperLimit));
        }
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CatDisplayCategoryAttributeRange</c> table.
    /// </summary>
    /// <param  name='_filterableAttributes'>
    /// An instance of the <c>RefRecId</c> class denoting filterable attributes field.
    /// </param>
    /// <param  name='_filterRange'>
    /// An instance of the <c>RefRecId</c> class denoting filter range field.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _filterableAttributes, RefRecId _filterRange)
    {
        if (!CatDisplayCategoryAttributeRange::exist(_filterableAttributes, _filterRange))
        {
            return checkFailed(strfmt(CatDisplayCategoryAttributeRange::txtNotExist(), _filterableAttributes, _filterRange));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CatDisplayCategoryAttributeRange</c> table.
    /// </summary>
    /// <param  name='_filterableAttributes'>
    /// An instance of the <c>RefRecId</c> class denoting filterable attributes field.
    /// </param>
    /// <param  name='_filterRange'>
    /// An instance of the <c>RefRecId</c> class denoting filter range field.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _filterableAttributes, RefRecId _filterRange)
    {
        return (CatDisplayCategoryAttributeRange::find(_filterableAttributes, _filterRange).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>CatDisplayCategoryAttributeRange</c> table.
    /// </summary>
    /// <param  name='_filterAttribute'>
    /// An instance of the <c>RefRecId</c> class denoting filter attribute field.
    /// </param>
    /// <param  name='_filterRange'>
    /// An instance of the <c>RefRecId</c> class denoting filter range field.
    /// </param>
    /// <param  name='_forUpdate'>
    /// A Boolean value to specify the selected record is for update; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatDisplayCategoryAttributeRange</c> class.
    /// </returns>
    public static CatDisplayCategoryAttributeRange find(RefRecId _filterAttribute, RefRecId _filterRange, boolean _forUpdate = false)
    {
        CatDisplayCategoryAttributeRange tblCatDisplayCategoryAttribRangeAssociation;
        ;
        if (_filterAttribute && _filterRange)
        {
            tblCatDisplayCategoryAttribRangeAssociation.selectForUpdate(_forUpdate);
            select firstonly tblCatDisplayCategoryAttribRangeAssociation
                index hint FilterableRangeAssociationIdx
                where tblCatDisplayCategoryAttribRangeAssociation.FilterAttribute == _filterAttribute
                    && tblCatDisplayCategoryAttribRangeAssociation.FilterRange    == _filterRange;
        }
        return tblCatDisplayCategoryAttribRangeAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static str txtNotExist()
    {
        return "@SYS131155";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SYS324358</DeveloperDocumentation>
	<Label>@SYS191287</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FilterAttribute</TitleField1>
	<TitleField2>FilterRange</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>FilterableRangeAssociationIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>FilterableRangeAssociationIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FilterAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterRange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FilterAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterRange</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FilterAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FilterRange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FilterAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS35881</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FilterRange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS122037</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FilterableRangeAssociationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FilterAttribute</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FilterRange</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FilterableAttributeRel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatDisplayCategoryFilterableAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatDisplayCategoryFilterableAttribute</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatDisplayCategoryFilterableAttribute_CatDisplayCategoryAttributeRange</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterAttribute</Name>
					<Field>FilterAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FilterRangeRel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatDisplayCategoryFilterRange</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatDisplayCategoryFilterRange</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatDisplayCategoryFilterRange_CatDisplayCategoryAttributeRange</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FilterRange</Name>
					<Field>FilterRange</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasureRel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_CatDisplayCategoryAttributeRange</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitOfMeasure</Name>
					<Field>UnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>