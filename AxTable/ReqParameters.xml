<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqParameters extends common
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoUpdateDynamicPlan</Name>
				<Source><![CDATA[
    boolean autoUpdateDynamicPlan(ReqPlanId _currentReqPlanId)
    {
        if (this.CurrentReqPlanIdSchedStatic  == _currentReqPlanId   &&
            this.CurrentReqPlanIdSchedDynamic                        &&
            this.CurrentReqPlanIdSchedDynamic != this.CurrentReqPlanIdSchedStatic &&
            this.AutoCopyStaticPlan)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    void delete()
    {
        throw error("@SYS23721");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.DefaultMarkUpdate= ReqMarkUpdate::Standard;
        this.ReqTimePoDefault = 36000;
        this.ReqTimeFutures = 36000;
        this.AutoCopyStaticPlan = NoYes::Yes;
        this.ReqPOCollectPerVendor = NoYes::Yes;
        this.ItemFilterPreUpdate = NoYes::Yes;
        this.ItemFilterPreCoverage = NoYes::No;
        this.ReqInactive = NoYes::Yes;
        this.DynamicNegativeDays = NoYes::Yes;
        this.UseCache = ReqUseCache::Maximum;
        this.DefaultNumberOfThreads = 0;
        this.ReqCalcTimeoutInMinutes = ReqParameters::ReqCalcTimeoutInMinutesDefaultValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return new SysTableExtension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ReqParameters, ReqPOCollectPerPurchAgreement):
                if (this.isFieldSet(fieldNum(ReqParameters, ReqPOCollectPerVendor))
                    || this.isFieldSet(fieldNum(ReqParameters, ReqPOSearchPurchAgreement)))
                {
                    this.ReqPOCollectPerPurchAgreement = this.ReqPOCollectPerVendor && this.ReqPOSearchPurchAgreement;
                }
                break;

            case fieldNum(ReqParameters, ReqPOCollectPerVendor):
                if (this.ReqPOSearchPurchAgreement
                    && this.isFieldSet(fieldNum(ReqParameters, ReqPOCollectPerPurchAgreement)))
                {
                    this.ReqPOCollectPerVendor = this.ReqPOCollectPerPurchAgreement;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            // [field that needs defaulting,
            //      [fields that affect the default value]]

            [fieldNum(ReqParameters, ReqPOCollectPerPurchAgreement),
                [fieldNum(ReqParameters, ReqPOCollectPerVendor), fieldNum(ReqParameters, ReqPOSearchPurchAgreement)]],

            [fieldNum(ReqParameters, ReqPOCollectPerVendor),
                [fieldNum(ReqParameters, ReqPOCollectPerPurchAgreement)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeleteInventSumLogTTS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the records in the <c>InventSumLogTTS</c> table must be deleted.
    /// </summary>
    /// <param name="_reqPlanId">
    /// The ID of the master plan that is updated.
    /// </param>
    /// <param name="_isRegeneratingAllItems">
    /// A Boolean value that indicates whether plan regeneration is executed for all items.
    /// </param>
    /// <returns>
    /// true if the records in the <c>InventSumLogTTS</c> table must be deleted; otherwise, false.
    /// </returns>
    public boolean mustDeleteInventSumLogTTS(ReqPlanId _reqPlanId, boolean _isRegeneratingAllItems)
    {
        boolean ret;

        ret = _reqPlanId == this.CurrentReqPlanIdSchedDynamic;

        if (_isRegeneratingAllItems)
        {
            ret = ret || this.autoUpdateDynamicPlan(_reqPlanId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustLockDynamicPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the default dynamic master plan must be locked during the regeneration.
    /// </summary>
    /// <param name="_reqPlanId">
    /// The ID of the master plan being updated.
    /// </param>
    /// <param name="_isRegeneratingAllItems">
    /// A Boolean value which specifies whether plan regeneration is executed for all items.
    /// </param>
    /// <returns>
    /// true if the master plan must be locked; otherwise, false.
    /// </returns>
    public boolean mustLockDynamicPlan(ReqPlanId _reqPlanId, boolean _isRegeneratingAllItems)
    {
        boolean ret = false;

        if (_isRegeneratingAllItems)
        {
            ret = _reqPlanId == this.CurrentReqPlanIdSchedDynamic || this.autoUpdateDynamicPlan(_reqPlanId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (! this.ReqPOCollectPerVendor)
        {
            this.ReqPOCollectPerBuyer               = NoYes::No;
            this.DefaultCollectPerPeriodPurch       = ReqPoCollectPerPeriod::No;
            this.ReqPOCollectPerPurchAgreement      = NoYes::No;
            this.ReqPOCollectPerPlanningPriority    = NoYes::No;
        }

        super();

        flush ReqParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ReqParameters, ReqTimeFutures):
            case fieldStr(ReqParameters, ReqTimePoDefault):
                if (this.ReqTimePoDefault > this.ReqTimeFutures)
                {
                    //Just give a warning, but still allow it
                    checkFailed("@SYS107030");
                }
                break;

            case fieldStr(ReqParameters, ReqInactive):
                if (this.ReqInactive)
                {
                    if ((select firstonly RecId from ReqGroup).RecId)
                    {
                        warning("@SCM:ReqInactivationReqGroupMessage");
                    }

                    SalesParameters salesParameters = SalesParameters::find();

                    if (!salesParameters.isAtpInclPlannedOrdersFieldValidWithPlanningParameters(this))
                    {
                        ret = checkFailed("@SCMPlanning:ReqParametersFormWarning_CheckSalesParameter_AtpInclPlannedOrders") && ret;
                    }

                    InventItemSalesSetup inventItemSalesSetup;

                    select firstonly RecId from inventItemSalesSetup
                        where inventItemSalesSetup.DeliveryDateControlType == SalesDeliveryDateControlType::CTP
                        ||   (inventItemSalesSetup.DeliveryDateControlType == SalesDeliveryDateControlType::FullRunCTP
                        &&    MpsReqInactiveCTPValidationFlight::instance().isEnabled());

                    if (!salesParameters.isDeliveryDateControlTypeFieldValidWithPlanningParameters(this)
                        || inventItemSalesSetup.RecId)
                    {
                        ret = checkFailed("@SCMPlanning:ReqParametersFormWarning_CheckSalesParameter_DeliveryDateControlType") && ret;
                    }

                    ProdParametersDim prodParameters = ProdParametersDim::findDefault();

                    if (!prodParameters.isLimitCapProdPOFieldValidWithPlanningParameters(this))
                    {
                        ret = checkFailed("@SCMPlanning:ReqParametersFormWarning_CheckProdParameter_LimitCapProdPO") && ret;
                    }

                    if (!prodParameters.isMatLimitedFieldValidWithPlanningParameters(this))
                    {
                        ret = checkFailed("@SCMPlanning:ReqParametersFormWarning_CheckProdParameter_MatLimited") && ret;
                    }
                }
                break;

            case fieldStr(ReqParameters, DefaultNumberOfThreads):
                if (this.DefaultNumberOfThreads)
                {
                    int max = ReqParameters::getMaxNumberOfAvailableThreads() - 1;
                    if (this.DefaultNumberOfThreads > max)
                    {
                        ret = checkFailed(strFmt("@SCMPlanning:ReqMRPValueCannotBeLargerThan", "@SYS109551", max));
                    }
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNumberOfAvailableThreads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum number of threads according to the batch server configuration.
    /// </summary>
    /// <returns>Maximum number of available threads</returns>
    internal static int getMaxNumberOfAvailableThreads()
    {
        SysServerConfig     sysServerConfig;
        BatchServerConfig   batchServerConfig;
        select sum(MaxBatchSessions) from batchServerConfig join sysServerConfig
                where batchServerConfig.ServerId == sysServerConfig.ServerId
                && sysServerConfig.EnableBatch == NoYes::Yes;

        return batchServerConfig.MaxBatchSessions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPlanningProcessesAreEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if master planning are enabled; throws an error if not.
    /// </summary>
    public static void checkPlanningProcessesAreEnabled()
    {
        if (ReqParameters::find().ReqInactive)
        {
            throw error("@SCM:ReqInactiveException");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>warnIfPlanningProcessesAreDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Issues a warning if master planning is disabled.
    /// </summary>
    public static void warnIfPlanningProcessesAreDisabled()
    {
        if (ReqParameters::find().ReqInactive)
        {
            warning("@SCM:ReqInactiveException");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ReqParameters find(boolean _forupdate = false)
    {
        ReqParameters parameter;

        parameter.selectForUpdate(_forupdate);

        select firstonly parameter
            where parameter.Key == 0;

        if (!parameter && !parameter.isTmp())
        {
            Company::createParameter(parameter);
        }
        
        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReqCalcTimeoutInMinutesDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default value for the timout values of ReqCalc process.
    /// </summary>
    internal static int ReqCalcTimeoutInMinutesDefaultValue()
    {
        return  #hoursPerDay * #minutesPerHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrNumRefReqLogIdContinuity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence reference record for the continuity scheduling session number.
    /// </summary>
    /// <returns>
    /// The number sequence reference record for the continuity scheduling session number.
    /// </returns>
    public static NumberSequenceReference mcrNumRefReqLogIdContinuity()
    {
        return NumberSeqReference::findReference(extendedTypeNum(MCRReqLogIdContinuity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrNumRefReqPOIdContinuity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence reference record for the continuity scheduling planned order.
    /// </summary>
    /// <returns>
    /// The number sequence reference record for the continuity scheduling planned order.
    /// </returns>
    public static NumberSequenceReference mcrNumRefReqPOIdContinuity()
    {
        return NumberSeqReference::findReference(extendedTypeNum(MCRReqPOIdContinuity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    static NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::Req;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefReqItemJournalId</Name>
				<Source><![CDATA[
    static NumberSequenceReference numRefReqItemJournalId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(ReqItemJournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefReqLogId</Name>
				<Source><![CDATA[
    static NumberSequenceReference numRefReqLogId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(ReqLogId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefReqLogIdForecast</Name>
				<Source><![CDATA[
    static NumberSequenceReference numRefReqLogIdForecast()
    {
        return NumberSeqReference::findReference(extendedTypeNum(ReqLogIdForecast));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefReqPOId</Name>
				<Source><![CDATA[
    static NumberSequenceReference numRefReqPOId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(ReqPOId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefReqPOIdForecast</Name>
				<Source><![CDATA[
    static NumberSequenceReference numRefReqPOIdForecast()
    {
        return NumberSeqReference::findReference(extendedTypeNum(ReqPOIdForecast));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefForecastDemandForecast</Name>
				<Source><![CDATA[
    static NumberSequenceReference numRefForecastDemandForecast()
    {
        return NumberSeqReference::findReference(extendedTypeNum(ForecastDemandForecastNumSeq));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultBundleSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default bundle size.
    /// </summary>
    /// <param name="_size">
    /// The size to set; optional.
    /// </param>
    /// <returns>
    /// The bundle size.
    /// </returns>
    public static ReqCalcBundleSize setDefaultBundleSize(ReqCalcBundleSize _size = 1)
    {
        ReqParameters parameters;

        ttsbegin;

        parameters = ReqParameters::find(true);

        if (!parameters.BundleSize)
        {
            parameters.BundleSize = _size;
            parameters.update();
        }

        ttscommit;

        return parameters.BundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ReqParameters, ReqPOCollectPerVendor):
                if (this.ReqPOCollectPerVendor == NoYes::No)
                {
                    this.ReqPOCollectPerBuyer = NoYes::No;
                    this.ReqPOCollectPerPurchAgreement = NoYes::No;
                    this.ReqPOCollectPerPlanningPriority = NoYes::No;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS124121</DeveloperDocumentation>
	<Label>@SYS27942</Label>
	<TableGroup>Parameter</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>Key</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>Key</PrimaryIndex>
	<ReplacementKey>Key</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrentReqPlanIdForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentReqPlanIdSchedDynamic</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardReqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOCollectPerVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOCollectPerBuyer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOCollectPerPlanningPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Key</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Coverage</Name>
			<Label>@SYS26726</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StandardReqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqTimeFutures</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DynamicNegativeDays</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Explosion</Name>
			<Label>@SYS9304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrentDaySchedFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Firming</Name>
			<Label>@SYS77789</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultMarkUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqAbortFirmIfError</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FirmPurchase</Name>
			<Label>@SYS70027</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPOCollectPerVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOCollectPerBuyer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOCollectPerPurchAgreement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultCollectPerPeriodPurch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOSearchPurchAgreement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOCollectPerPlanningPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FirmTransfer</Name>
			<Label>@SYS70182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultCollectPerPeriodJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOCollectPerPlanningPriorityTransfer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRContinuity</Name>
			<Label>@MCR12291</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRCurrentReqPlanIdContinuity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Performance</Name>
			<Label>@SYS70209</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseCache</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BundleSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemFilterPreUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemFilterPreCoverage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FirmingBundleSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultNumberOfThreads</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqCalcTimeoutInMinutes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedOrders</Name>
			<Label>@SYS53282</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqTimePoDefault</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Plans</Name>
			<Label>@SYS25324</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrentReqPlanIdForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentReqPlanIdSchedStatic</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentReqPlanIdSchedDynamic</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoCopyStaticPlan</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SafetyMargin</Name>
			<Label>@SYS19505</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarginCalendarDays</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Update</Name>
			<Label>@SYS2934</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TodaysdateCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS8079</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqSearchTradeAgreement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqSearchTradeMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanningProcesses</Name>
			<Label>@SCM:ReqPlanningProcessesFieldGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqInactive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoCopyStaticPlan</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS70680</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BundleSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCalcBundleSize</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CurrentDaySchedFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqCurrentDaySchedFrom</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrentReqPlanIdForecast</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdForecast</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS26877</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrentReqPlanIdSchedDynamic</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
			<Label>@SYS70678</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrentReqPlanIdSchedStatic</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
			<Label>@SYS70676</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultCollectPerPeriodJournal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>InventTransferOrders</ConfigurationKey>
			<EnumType>ReqPoCollectPerPeriod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultCollectPerPeriodPurch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqPoCollectPerPeriod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultMarkUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqMarkUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DynamicNegativeDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDynamicNegativeDays</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MarginCalendarDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarDays</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRCurrentReqPlanIdContinuity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRCurrentReqPlanIdContinuity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqAbortFirmIfError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqAbortFirmIfError</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqPOCollectPerBuyer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOCollectPerBuyer</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqPOCollectPerPurchAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOCollectPerPurchAgreement</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqPOCollectPerPlanningPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOCollectPerPlanningPriority</ExtendedDataType>
			<FeatureClass>ReqPriorityBasedPlanningFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqPOCollectPerVendor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOCollectPerVendor</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqPOSearchPurchAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOSearchPurchAgreement</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqSearchTradeAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqSearchTradeAgreement</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqSearchTradeMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqSearchTradeMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ReqTimeFutures</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqTime</ExtendedDataType>
			<Label>@SYS72924</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ReqTimePoDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqTimePoDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StandardReqGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS72830</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TodaysdateCalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS70653</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseCache</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqUseCache</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemFilterPreUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SCM:ItemFilterPreUpdate</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemFilterPreCoverage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SCM:ItemFilterPreCoverage</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqInactive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@FieldDescriptions_MasterPlanning:ReqParameters_ReqInactive</HelpText>
			<Label>@SCM:ReqInactiveLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FirmingBundleSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCalcFirmingBundleSize</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipPreallocatingRecIds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PreallocatedRecIdBlockSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccurateOpSchedFiniteCapacity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@SCMPlanning:AccurateOpSchedFiniteCapacityHelpText</HelpText>
			<Label>@SCMPlanning:AccurateOpSchedFiniteCapacityLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DefaultNumberOfThreads</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCalcDefaultNumberOfThreads</ExtendedDataType>
			<Label>@SYS109551</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ReqCalcTimeoutInMinutes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Minutes</ExtendedDataType>
			<Label>@SCMPlanning:ReqCalcProcessTimeout</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqPOCollectPerPlanningPriorityTransfer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOCollectPerPlanningPriorityTransfer</ExtendedDataType>
			<FeatureClass>ReqPriorityBasedPlanningFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Key</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrentDynamicMasterPlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CurrentDynamicMasterPlan</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReqParameters</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrentReqPlanIdSchedDynamic</Name>
					<SourceEDT>ReqPlanIdSched</SourceEDT>
					<Field>CurrentReqPlanIdSchedDynamic</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrentForecastPlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqPlanForecast</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrentReqPlanIdForecast</Name>
					<Field>CurrentReqPlanIdForecast</Field>
					<RelatedField>ReqPlanIdForecast</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrentStaticMasterPlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CurrentStaticMasterPlan</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReqParameters</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrentReqPlanIdSchedStatic</Name>
					<SourceEDT>ReqPlanIdSched</SourceEDT>
					<Field>CurrentReqPlanIdSchedStatic</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StandardReqGroupId</Name>
					<Field>StandardReqGroupId</Field>
					<RelatedField>ReqGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TodaysDateWorkCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TodaysdateCalendarId</Name>
					<Field>TodaysdateCalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>