<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCoverage</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanCoverage extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSameProductRelationAs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the current record to a <c>LeanCoverage</c> record and determines whether they have the
    /// same product relation.
    /// </summary>
    /// <param name="_leanCoverage">
    /// A <c>LeanCoverage</c> record to compare to the current one.
    /// </param>
    /// <returns>
    /// true if the product relation of both <c>LeanCoverage</c> records is the same; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean hasSameProductRelationAs(LeanCoverage _leanCoverage)
    {
        InventDim                   inventDim1;
        InventDim                   inventDim2;
        EcoResProductDimGroupSetup  ecoResProductDimGroupSetup;
        boolean                     sameProductRelation = false;

        if (   this.RuleCoverageType        == _leanCoverage.RuleCoverageType
            && this.AllocationDataAreaId    == _leanCoverage.AllocationDataAreaId
            && this.AllocationId            == _leanCoverage.AllocationId
            && this.ItemDataAreaId          == _leanCoverage.ItemDataAreaId
            && this.ItemId                  == _leanCoverage.ItemId)
        {
            inventDim1                  = InventDim::find(this.InventDimId,false);
            inventDim2                  = InventDim::find(_leanCoverage.InventDimId,false);
            ecoResProductDimGroupSetup  = EcoResProductDimGroupSetup::newItemId(this.ItemId);

            if (InventDim::isInventDimEqualProductDim(ecoResProductDimGroupSetup, inventDim1, inventDim2))
            {
                sameProductRelation = true;
            }
        }

        return sameProductRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the table record buffer.
    /// </summary>
    public void initValue()
    {
        super();
        this.RuleCoverageType      = LeanRuleCoverageType::Product;
        this.InventDimId           = InventDim::inventDimIdBlank();
        this.InventDimDataAreaId   = this.InventDimId ? appl.company().dataArea(tableNum(InventDim)) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the record has been changed.
    /// </summary>
    /// <returns>
    ///    true if any of the buffer fields were changed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isChanged()
    {
        LeanCoverage origLeanCoverage = this.orig();

        return    origLeanCoverage.RuleCoverageType != this.RuleCoverageType
               || origLeanCoverage.ItemId           != this.ItemId
               || origLeanCoverage.InventDimId      != this.InventDimId
               || origLeanCoverage.AllocationId     != this.AllocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current record can be edited.
    /// </summary>
    /// <returns>
    ///    true if the record can be edited; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A <c>LeanCoverage</c> record can be edited if it is not shared between several rules.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isEditable()
    {
        boolean result = false;
        LeanCoverageKanbanRule leanCoverageKanbanRule;

        // for new rules the record is editable
        if (!this.RecId)
        {
            result = true;
        }
        else
        {
            // the record is editable only for non-shared coverage
            result = !LeanCoverageKanbanRule::isMultipleCoverage(this.RecId);

            if (result)
            {
                leanCoverageKanbanRule = LeanCoverageKanbanRule::findCoverage(this.RecId);

                // the record is only editable for non-shared coverage of rules with no
                // active kanbans
                result = !LeanRuleData::newKanbanRuleRecId(leanCoverageKanbanRule.KanbanRule).hasActiveKanbans();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(LeanCoverage, RuleCoverageType):
                // if the type is switched to non-product, we need to reset the ItemId
                if (this.RuleCoverageType != LeanRuleCoverageType::Product)
                {
                    this.ItemId         = '';
                    this.ItemDataAreaId = '';
                }

                // if we're moving away from product family, we need to reset the allocation ID
                if (this.RuleCoverageType != LeanRuleCoverageType::ProductFamily)
                {
                    this.AllocationId         = '';
                    this.AllocationDataAreaId = '';
                }
                break;
            case fieldNum(LeanCoverage, ItemId):
                this.ItemDataAreaId = this.ItemId ? appl.company().dataArea(tableNum(InventTable)) : '';
                break;
            case fieldNum(LeanCoverage, AllocationId):
                this.AllocationDataAreaId = this.AllocationId ? appl.company().dataArea(tableNum(ForecastItemAllocation)) : '';
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionsInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventDimId</c> value that applies to this coverage rule after it applies the
    /// coverage type.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to determine the <c>InventDimId</c> value. This parameter is optional.
    /// </param>
    /// <returns>
    /// The <c>InventDimId</c> value that applies to this record after it applies the coverage type.
    /// </returns>
    public InventDimId productDimensionsInventDimId(ItemId _itemId = this.ItemId)
    {
        ForecastItemAllocationLine  forecastItemAllocationLine;
        InventDimId                 inventDimId;
        InventDimParm               inventDimParm;
        InventDim                   inventDim;

        switch (this.RuleCoverageType)
        {
            // product family coverage type gets the InventDim of the item as defined by the forecast allocation key
            case LeanRuleCoverageType::ProductFamily:
                select firstonly InventDimId from forecastItemAllocationLine
                    where forecastItemAllocationLine.AllocationId == this.AllocationId
                       && forecastItemAllocationLine.ItemId       == _itemId;

                inventDimId = forecastItemAllocationLine.InventDimId;
                break;

            // For an item, it is defined by the kanban rule coverage settings
            case LeanRuleCoverageType::Product:
                inventDimId = this.InventDimId;
                break;

            // Otherwise we do not have specific inventory dimensions for that item
            case LeanRuleCoverageType::All:
                break;
        }

        if (inventDimId)
        {
            inventDim = InventDim::find(inventDimId);

            if (_itemId)
            {
                inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_itemId));
            }
            else
            {
                inventDimParm.initProductDimensionsAllGroups();
                inventDim.clearNotSelectedDim(inventDimParm);
            }

            inventDim   = InventDim::findOrCreate(inventDim);
            inventDimId = inventDim.InventDimId;
        }
        else
        {
            inventDimId = InventDim::inventDimIdBlank();
        }

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productSelectionString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a string that represents the product selection of the current record.
    /// </summary>
    /// <returns>
    /// A string that represents the product selection of the current record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display LeanCoverageProductSelection productSelectionString()
    {
        LeanCoverageProductSelection    result;
        InventDim                       inventDim;

        switch (this.RuleCoverageType)
        {
            case LeanRuleCoverageType::Product:
                inventDim = InventDim::findInLegalEntity(this.InventDimId, this.InventDimDataAreaId);

                List preferredOrder = new List(Types::Integer);
                preferredOrder.addEnd(fieldNum(InventDim, ConfigId));
                preferredOrder.addEnd(fieldNum(InventDim, InventSizeId));
                preferredOrder.addEnd(fieldNum(InventDim, InventColorId));
                preferredOrder.addEnd(fieldNum(InventDim, InventStyleId));
                preferredOrder.addEnd(fieldNum(InventDim, InventVersionId));

                result = this.ItemId;
                InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledOrderedDimensions(preferredOrder);
                while (enum.moveNext())
                {
                    result = result + ' ' + inventDim.dimValue2str(enum.currentInventDimFieldId());
                }

                result = strLRTrim(result);
                break;
            case LeanRuleCoverageType::ProductFamily:
                result = this.AllocationId;
                break;
            case LeanRuleCoverageType::All:
                break;
            default:
                // do nothing for newly created rules (no product selection specified yet)
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefProductSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides jumpRef functionality for product selection.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void jumpRefProductSelection()
    {
        if (this.ItemId)
        {
            InventDim               inventDim = InventDim::findInLegalEntity(this.InventDimId, this.InventDimDataAreaId);
            InventDimCombination    inventDimCombination = InventDimCombination::findByInventDim(this.ItemId, inventDim);
            if (inventDimCombination)
            {
                Args args = new Args();
                args.record(inventDimCombination);

                new MenuFunction(menuItemDisplayStr(EcoResProductInformation), MenuItemType::Display).run(args);
            }
            else
            {
                InventTable::jumpRefItemIdProductInformation(this.ItemId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim setInventDimId(InventDim _inventDim)
    {
        InventDim   inventDim;
        inventDim   inventDimOrig   = inventDim::findInLegalEntity(this.InventDimId, appl.company().dataArea(tableNum(InventDim)));
        boolean     result          = true;

        inventDim.data(_inventDim);

        switch (this.RuleCoverageType)
        {
            case LeanRuleCoverageType::Product:
                if (!this.ItemId)
                {
                    throw error("@SYS133818");
                }
                //keep coverage dimensions only
                inventDim.clearNotCovPrDim(InventDimGroupSetup::newItemId(this.ItemId));
                break;
            case LeanRuleCoverageType::ProductFamily:
                if (!this.AllocationId)
                {
                    throw error("@SYS133819");
                }
                //fall through
            case LeanRuleCoverageType::All:
                //keep site and warehouse only
                inventDim.clearNotSiteAndWarehouseDim();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (   !inventDim.InventDimId
               || !InventDim::isInventDimEqual(inventDimOrig, inventDim))
        {
            if (inventDim.validateWrite())
            {
                inventDim = InventDim::findOrCreate(inventDim);
            }
            else
            {
                inventDim.clear();
            }
        }

        this.InventDimId         = inventDim.InventDimId;
        this.InventDimDataAreaId = this.InventDimId ? appl.company().dataArea(tableNum(InventDim)) : '';

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        if (this.orig().ItemId       != this.ItemId ||
            this.orig().InventDimId  != this.InventDimId ||
            this.orig().AllocationId != this.AllocationId)
        {
            KanbanFindRulesCache::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the mandatory fields are present.
    /// </summary>
    /// <returns>
    /// true if the fields are valid; otherwise, false.
    /// </returns>
    private boolean validateFields()
    {
        boolean result = false;

        switch (this.RuleCoverageType)
        {
            case LeanRuleCoverageType::Product:
                result =    this.ItemId
                         && this.InventDimId;

                if (!result)
                {
                    // For product selection of type 'Product' the inventory dimensions and Item are mandatory fields.
                    error("@SYS133818");
                }
                break;
            case LeanRuleCoverageType::ProductFamily:
                result = this.AllocationId != '';
                if (!result)
                {
                    // For product selection of type 'Product family' the Item Allocation Group is a mandatory field.
                    error("@SYS133819");
                }
                break;
            case LeanRuleCoverageType::All:
                // we don't do any validation here as there're no mandatory fields
                result = true;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        ret = super() && ret;

        // the coverage should be editable or unchanged
        ret = (this.isEditable() || !this.isChanged()) && ret;

        // validate the mandatory RuleCoverageType-specific fields
        ret = this.validateFields() && ret;

        if (this.itemId 
            && PdsGlobal::pdsIsCWItem(this.itemId))
        {
            ret = ret && checkFailed("@WAX:CatchWeightEnabledItemsAreNotSupportedForKanbanRules");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>LeanCoverage</c> table exists.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>LeanCoverage</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(LeanCoverageRefRecId _refRecId)
    {
        return _refRecId &&
               (select firstonly RecId from leanCoverage
                    where leanCoverage.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LeanCoverage</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>LeanCoverage</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LeanCoverage</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCoverage find(
        LeanCoverageRefRecId  _refRecId,
        boolean               _forUpdate = false)
    {
        LeanCoverage leanCoverage;

        if (_refRecId)
        {
            leanCoverage.selectForUpdate(_forUpdate);

            select firstonly leanCoverage
                where leanCoverage.RecId == _refRecId;
        }

        return leanCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LeanCoverage</c> table.
    /// </summary>
    /// <param name="_kanbanRuleRefRecId">
    ///    The record ID of the <c>KanbanRule</c> record for which to find LeanCoverage.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LeanCoverage</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCoverage findKanbanRule(
        KanbanRuleRefRecId  _kanbanRuleRefRecId,
        boolean             _forUpdate = false)
    {
        LeanCoverage            leanCoverage;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;

        if (_kanbanRuleRefRecId)
        {
            leanCoverage.selectForUpdate(_forUpdate);

            select firstonly leanCoverage
                join leanCoverageKanbanRule
                where  leanCoverageKanbanRule.Coverage == leanCoverage.RecId
                    && leanCoverageKanbanRule.KanbanRule == _kanbanRuleRefRecId;
        }

        return leanCoverage;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS319218</DeveloperDocumentation>
	<FormRef>KanbanRules</FormRef>
	<Label>@SYS132003</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RecId</TitleField1>
	<TitleField2>RuleCoverageType</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductionControl</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LeanCoverageKanbanRule</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanCoverageKanbanRule</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RuleCoverageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS131988</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllocationDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemRelation</Name>
			<Label>@SYS131924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RuleCoverageType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AllocationDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AllocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastItemAllocationId</ExtendedDataType>
			<Label>@SYS115399</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Label>@SYS103105</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RuleCoverageType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>LeanRuleCoverageType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Allocation</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AllocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AllocationDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Item</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ForecastItemAllocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastItemAllocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ForecastItemAllocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LeanCoverage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AllocationDataAreaId</Name>
					<Field>AllocationDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AllocationId</Name>
					<SourceEDT>ForecastItemAllocationId</SourceEDT>
					<Field>AllocationId</Field>
					<RelatedField>AllocateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AllocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LeanCoverage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimDataAreaId</Name>
					<Field>InventDimDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LeanCoverage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>
