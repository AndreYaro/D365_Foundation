<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransExtensionTH</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransExtensionTH extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        LedgerJournalTrans  ledgerJournalTrans;

        ttsBegin;
        // Release the certificate number if exists
        if (this.CertificateNumber)
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(this.LedgerJournalTrans, false);

            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                if (DirPartyTable::findRec(VendTable::find(ledgerJournalTrans.parmAccount()).Party).baseType() == DirPartyBaseType::Person)
                {
                    NumberSeq::releaseNumber(VendParameters::numRefTaxWithholdPND3Number().NumberSequenceId, this.CertificateNumber);
                }
                else
                {
                    NumberSeq::releaseNumber(VendParameters::numRefTaxWithholdPND53Number().NumberSequenceId, this.CertificateNumber);
                }
            }
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies that current record of <c>LedgerJournalTransExtensionTH</c> is a empty record or not.
    /// </summary>
    /// <returns>
    /// true if it is empty; otherwise, return false.
    /// </returns>
    public boolean isEmpty()
    {
        LedgerJournalTransExtensionTH    emptyRecord;

        changeCompany(this.dataAreaId)
        {
            emptyRecord.clear();
            return this.equal(emptyRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LedgerJournalTransExtensionTH</c> table based on its own record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LedgerJournalTransExtensionTH</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The specified record in the <c>LedgerJournalTransExtensionTH</c> table if found; otherwise, empty record.
    /// </returns>
    public static LedgerJournalTransExtensionTH find(
        RefRecId    _recId,
        boolean     _forUpdate = false)
    {
        LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;

        if (_recId)
        {
            ledgerJournalTransExtensionTH.selectForUpdate(_forUpdate);

            select firstonly ledgerJournalTransExtensionTH
                where ledgerJournalTransExtensionTH.RecId == _recId;
        }

        return ledgerJournalTransExtensionTH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>LedgerJournalTransExtensionTH</c> table based on
    /// the record ID of <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    ///     The record ID of the <c>LedgerJournalTrans</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     The specified record in the <c>LedgerJournalTransExtensionTH</c> table if found;
    /// otherwise, empty record.
    /// </returns>
    public static LedgerJournalTransExtensionTH findByLedgerJournalTrans(
        LedgerJournalTransRefRecId  _ledgerJournalTransRecId,
        boolean                     _forUpdate = false)
    {
        LedgerJournalTransExtensionTH    ledgerJournalTransExtensionTH;

        if (_ledgerJournalTransRecId)
        {
            ledgerJournalTransExtensionTH.selectForUpdate(_forUpdate);

            select firstonly ledgerJournalTransExtensionTH
                where ledgerJournalTransExtensionTH.LedgerJournalTrans == _ledgerJournalTransRecId;
        }

        return ledgerJournalTransExtensionTH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtensionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether table <c>LedgerJournalTransExtensionTH</c> is enabled.
    /// </summary>
    /// <returns>
    /// Reuturns true if the extension table enabled, otherwise false.
    /// </returns>
    public static boolean isExtensionEnabled()
    {
        return TaxThaiGovCertificationFeatureChecker::isCountryRegionTH();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxBranchFromCustVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update tax branch information from customer or vendor default value.
    /// </summary>
    /// <param name="_custVendTable">
    /// <c>CustVendTable</c> map.
    /// </param>
    public void updateTaxBranchFromCustVendTable(CustVendTable _custVendTable)
    {
        TaxInformation_TH                taxInformation;

        if (_custVendTable)
        {
            taxInformation             = _custVendTable.getDefaultTaxInformation_TH();
            this.BranchNumber          = taxInformation.BranchNumber;
            this.TaxNatureOfAddress    = taxInformation.TaxNatureOfAddress;
            this.TaxRegNum             = _custVendTable.getDefaultTaxRegistration_TH().RegistrationNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBranchNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the branch number of tax information.
    /// </summary>
    /// <returns>
    /// Branch number.
    /// </returns>
    public BranchNumber_TH getBranchNumber()
    {
        BranchNumber_TH branchNumber;

        if (this.TaxNatureOfAddress == TaxNatureOfAddress_TH::HeadOffice)
        {
            branchNumber = enum2str(TaxNatureOfAddress_TH::HeadOffice);
        }
        else
        {
            branchNumber = this.BranchNumber;
        }

        return branchNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>TH</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4083026</DeveloperDocumentation>
	<Label>@SYS4083025</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RealVendName</TitleField1>
	<TitleField2>TaxAgent</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LedgerJournalTransIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<ReplacementKey>LedgerJournalTransIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentGrossUpOtherDetail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentGrossUpType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAgent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Certificate</Name>
			<Label>@SYS4082630</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceReceiptDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentGrossUp</Name>
			<Label>@SYS4082505</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentGrossUpType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentGrossUpOtherDetail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxAgent</Name>
			<Label>@SYS4082708</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAgent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInvoice</Name>
			<Label>@SYS115505</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInvoiceReceiptDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealVendName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxNatureOfAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CertificateDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxUnrealizedPurchInvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceReceiptDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxUnrealizedPurchInvoiceReceiptDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>test 123</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentGrossUpOtherDetail</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdPaymentGrossUpOtherDetail</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentGrossUpType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdPaymentGrossUpType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RealVendName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxUnrealizedPurchRealVendName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxAgent</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxAgentRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxInvoiceReceiptDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxUnrealizedPurchTaxInvoiceRcptDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BranchNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BranchNumber_TH</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxNatureOfAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxNatureOfAddress_TH</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxRegNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyCoRegNum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>LedgerJournalTrans</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxAgent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxAgent</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxAgent</Name>
					<Field>TaxAgent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>