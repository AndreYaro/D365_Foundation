<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpCustBillingClassificationBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpCustBillingClassificationBalance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custBillingClassificationBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate customer balances by billing classification.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number of the selected customer.
    /// </param>
    /// <param name="_currency">
    /// A Boolean value that specifies to calculate customer balance by billing classification and currency.
    /// </param>
    /// <returns>
    /// A buffer of the <c>TmpCustBillingClassificationBalance</c> table; otherwise an empty buffer.
    /// </returns>
    /// <remarks>
    /// This method inserts the calculated customer balances into <c>CustBillingClassificationBalance</c> table.
    /// </remarks>
    public static TmpCustBillingClassificationBalance custBillingClassificationBalance(CustAccount _accountNum, boolean _currency)
    {
        Query                               query;
        QueryRun                            queryRun;
        QueryBuildDataSource                qbdsCustBillingClassification;
        QueryBuildDataSource                qbdsCustTrans;
        QueryBuildDataSource                qbdsCustTransOpen;
        AmountCurDebCred                    sumAmount;
        CustTransOpen                       custTransOpen;
        CustTrans                           custTrans;
        CustBillingClassification           custBillingClassification;
        TmpCustBillingClassificationBalance tmpCustBalance;
        TmpCustBillingClassificationBalance tmpCurrentCustBalance;
        int                                 lineNumber;
        RecordSortedList                    rslCustBalannce;
        List                                listCustBalance;
        ListEnumerator                      listEnumerator;

        listCustBalance = new List(Types::Record);
        rslCustBalannce = new RecordSortedList(tableNum(TmpCustBillingClassificationBalance));
        rslCustBalannce.sortOrder(fieldNum(TmpCustBillingClassificationBalance, Balance),fieldNum(TmpCustBillingClassificationBalance, LineNum));

        query = new Query();
        qbdsCustBillingClassification = query.addDataSource(tableNum(CustBillingClassification));
        qbdsCustBillingClassification.fields().clearFieldList();
        qbdsCustBillingClassification.addGroupByField(fieldNum(CustBillingClassification, BillingClassification));

        qbdsCustTrans = qbdsCustBillingClassification.addDataSource(tableNum(CustTrans));
        qbdsCustTrans.relations(true);
        qbdsCustTrans.fields().clearFieldList();
        qbdsCustTrans.addRange(fieldNum(CustTrans, AccountNum)).value(queryValue(_accountNum));

        qbdsCustTransOpen = qbdsCustTrans.addDataSource(tableNum(CustTransOpen));
        qbdsCustTransOpen.relations(true);
        qbdsCustTransOpen.fields().clearFieldList();
        qbdsCustTransOpen.addSelectionField(fieldNum(CustTransOpen, AmountCur), SelectionField::Sum);
        qbdsCustTransOpen.addSelectionField(fieldNum(CustTransOpen, AmountMST), SelectionField::Sum);

        if (_currency)
        {
            qbdsCustTrans.addGroupByField(fieldNum(CustTrans, CurrencyCode));
        }
        else
        {
            qbdsCustTrans.joinMode(JoinMode::OuterJoin);
            qbdsCustTransOpen.joinMode(JoinMode::OuterJoin);
        }

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            custBillingClassification = queryRun.get(tableNum(CustBillingClassification));
            custTrans = queryRun.get(tableNum(CustTrans));
            custTransOpen = queryRun.get(tableNum(CustTransOpen));
            tmpCustBalance.BillingClassification = custBillingClassification.BillingClassification;
            lineNumber++;
            tmpCustBalance.LineNum = lineNumber;

            if (_currency)
            {
                tmpCustBalance.CurrencyCode = custTrans.CurrencyCode;
                tmpCustBalance.Balance = custTransOpen.AmountCur;
                sumAmount += custTransOpen.AmountCur;
            }
            else
            {
                tmpCustBalance.Balance = custTransOpen.AmountMST;
                sumAmount += custTransOpen.AmountMST;
            }

            rslCustBalannce.ins(tmpCustBalance);
        }

        while (rslCustBalannce.next(tmpCustBalance))
        {
            listCustBalance.addStart(tmpCustBalance);
        }

        listEnumerator = listCustBalance.getEnumerator();

        ttsbegin;
        tmpCustBalance.AccountNum = _accountNum;

        while (listEnumerator.moveNext())
        {
            tmpCurrentCustBalance = listEnumerator.current();

            tmpCustBalance.BillingClassification = tmpCurrentCustBalance.BillingClassification;
            tmpCustBalance.Balance = tmpCurrentCustBalance.Balance;
            tmpCustBalance.CurrencyCode = tmpCurrentCustBalance.CurrencyCode;

            tmpCustBalance.insert();
        }

        if (_currency)
        {
            while select CurrencyCode from custTrans
                    group by CurrencyCode
                        join sum(AmountCur) from custTransOpen
                            where custTrans.AccountNum == _accountNum
                                && custTransOpen.RefRecId == custTrans.RecId
                                && custTrans.CustBillingClassification == 0
            {
                if (custTransOpen.AmountCur != 0)
                {
                    tmpCustBalance.BillingClassification    = "@SYS80253";
                    tmpCustBalance.CurrencyCode             = custTrans.CurrencyCode;
                    tmpCustBalance.Balance                  = custTransOpen.AmountCur;
                    tmpCustBalance.insert();
                }
            }
        }
        else
        {
            select sum(AmountMST) from custTransOpen
                exists join custTrans
                    where custTrans.RecId == custTransOpen.RefRecId
                        && custTrans.AccountNum == _accountNum
                        && custTrans.CustBillingClassification == 0;

            tmpCustBalance.BillingClassification    = "@SYS80253";
            tmpCustBalance.Balance                  = custTransOpen.AmountMST;
            tmpCustBalance.insert();

            sumAmount                               += custTransOpen.AmountMST;

            tmpCustBalance.BillingClassification    = "@SYS76086";
            tmpCustBalance.Balance                  = sumAmount;
            tmpCustBalance.insert();
        }
        ttscommit;

        return tmpCustBalance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS2370</DeveloperDocumentation>
	<Label>@SYS179473</Label>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Balance</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS76086</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillingClassification</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BillingClassification</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Line</ExtendedDataType>
			<Label>@SYS9367</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomerAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>