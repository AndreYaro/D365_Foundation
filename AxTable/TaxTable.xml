<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxTable extends common
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPctPerNetOrAmountByUnit_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the India specific Indirect taxes.
    /// </summary>
    /// <param name="_tmpTax">
    /// The tax buffer - TmpTax
    /// </param>
    /// <param name="_calculatedBase">
    /// The amount origin on which Tax is calculated.
    /// </param>
    /// <param name="_sourceCurrencyCode">
    /// The source currency code.
    /// </param>
    /// <param name="_salesPurchJournalLine">
    /// The map that contains order lines(SalesLine/PurchLine/CustInvoiceLine/LedgerJournalTransLine etc)
    /// </param>
    /// <returns>
    /// The tax amount calculated.
    /// </returns>
    public TaxAmountCur calcPctPerNetOrAmountByUnit_IN(
        TmpTax                   _tmpTax,
        TaxBase                  _calculatedBase,
        CurrencyCode             _sourceCurrencyCode,
        SalesPurchJournalLine _salesPurchJournalLine)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        TaxAmountCur        taxAmountCur;
        TaxAmountCur        taxAmountCurOrig;
        PurchLine           purchLine;
        VendTable           vendTable;
        TaxData             taxData;
        TaxOnItem           taxOnItem;
        TaxAmount           customsTaxAmount;
        TaxAmount           taxAmountOrigMST;
        TransDate           calculationDate = _tmpTax.CalculationDate;
        TransDate           customscalculationDate;
        CurrencyCode        standardCurrency = CompanyInfoHelper::standardCurrency();
        CurrencyCode        currencyCode;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        boolean             taxAsPerOriginalInvoice;
        boolean             isNonPoLines;

        if (this.TaxType_IN != TaxType_IN::None)
        {

            // 1. Non-PO lines are never part of credit note. Tax asper original Invoice is only for credit note.
            // 2. Non-PO lines are not applicable for Customs.
            if (_salesPurchJournalLine.SourceTableId == tableNum(VendInvoiceInfoLine))
            {
                vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_salesPurchJournalLine.SourceRecId);
            }
            else if (_salesPurchJournalLine.SourceTableId == tableNum(VendInvoiceInfoLineTaxExtension_IN))
            {
                vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(VendInvoiceInfoLineTaxExtension_IN::findRecId(_salesPurchJournalLine.SourceRecId).VendInvoiceInfoLine);
            }

            taxAsPerOriginalInvoice = (((_salesPurchJournalLine.SourceTableId == tableNum(PurchLine) || _salesPurchJournalLine.SourceTableId == tableNum(SalesLine))
                                        && _salesPurchJournalLine.SalesPurchJournalLine::getSalesPurchJournalLineExtension_IN().TaxAsPerOriginalInvoice == true)
                                        || (vendInvoiceInfoLine.RecId!= 0 && PurchLine_IN::findByPurchLine(vendInvoiceInfoLine.PurchLineRecId).TaxAsPerOriginalInvoice));

            if (_salesPurchJournalLine.SourceTableId == tableNum(ProjEmplTrans)      ||
                _salesPurchJournalLine.SourceTableId == tableNum(ProjCostTrans)      ||
                _salesPurchJournalLine.SourceTableId == tableNum(ProjItemTrans)      ||
                _salesPurchJournalLine.SourceTableId == tableNum(ProjRevenueTrans)   ||
                _salesPurchJournalLine.SourceTableId == tableNum(ProjOnAccTrans))
            {
                taxAsPerOriginalInvoice = this.determineTaxPerOrigInv_Project_IN(_salesPurchJournalLine, _tmpTax, taxAsPerOriginalInvoice);
            }

            isNonPoLines = (vendInvoiceInfoLine.RecId!= 0 && vendInvoiceInfoLine.isNonPO());

            if (taxAsPerOriginalInvoice == true)// Credit note scenarios
            {
                if (isNonPoLines == false)// Normal invoice lines only
                {
                    taxData.TaxValue = Tax::determineTaxValue_IN(_tmpTax.TaxCode, _salesPurchJournalLine);
                    if (this.TaxType_IN == TaxType_IN::Customs)
                    {
                        taxData.TaxValue = TaxTable::getCustomsPercent_IN(_salesPurchJournalLine, taxData);
                    }
                }
            }
            else// Normal scenarios
            {
                if (isNonPoLines == true)
                {
                    if (this.TaxType_IN == TaxType_IN::Customs)
                    {
                        taxData.TaxValue = 0; // No Customs duty for Non-PO lines
                    }
                    else
                    {
                        taxData = this.getTaxData_IN(_tmpTax,calculationDate, _calculatedBase, _salesPurchJournalLine);
                    }
                }
                else
                {// PO lines
                    taxData = this.getTaxData_IN(_tmpTax,calculationDate, _calculatedBase, _salesPurchJournalLine);
                    if (this.TaxType_IN == TaxType_IN::Customs)
                    {
                        taxData.TaxValue = TaxTable::getCustomsPercent_IN(_salesPurchJournalLine, taxData);
                    }
                }
            }

            // handle SSI
            if (this.TaxType_IN == TaxType_IN::Excise)
            {
                if (_salesPurchJournalLine.SourceTableId == tableNum(LedgerJournalTrans))
                {
                    select firstonly ledgerJournalTrans
                        where ledgerJournalTrans.RecId   == _salesPurchJournalLine.SourceRecId
                            && ledgerJournalTrans.TableId == _salesPurchJournalLine.SourceTableId;

                    if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                    {
                        vendTable = ledgerJournalTrans.findVendTable();
                    }
                    else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                    {
                        vendTable = ledgerJournalTrans.findVendForOffset();
                    }
                }
                else if (_salesPurchJournalLine.SourceTableId == tableNum(PurchLine))
                {
                    select firstonly purchLine
                        where purchLine.RecId   == _salesPurchJournalLine.SourceRecId
                            && purchLine.TableId == _salesPurchJournalLine.SourceTableId;
                    vendTable = purchLine.purchTable().vendTable_InvoiceAccount();
                }
                else if (vendInvoiceInfoLine.RecId != 0)
                {
                    vendTable = vendInvoiceInfoLine.vendInvoiceInfoTable().vendTable_InvoiceAccount();
                }

                if (vendTable && vendTable.isSSI())
                {
                    taxData.TaxValue = taxData.ConcessionalValue_IN;
                }
            }

            if (this.TaxBase == TaxBaseType::AmountByUnit)
            {
                select firstonly AbatementPercent_IN from taxOnItem where
                    taxOnItem.TaxCode             == _tmpTax.TaxCode
                        && taxOnItem.TaxItemGroup == this.getTaxItemGroup_IN(_salesPurchJournalLine);
                if (taxOnItem.AbatementPercent_IN)
                {
                    taxData.TaxValue = taxData.TaxValue * (100 - taxOnItem.AbatementPercent_IN) / 100;
                }
            }
        }
        switch (this.TaxBase)// Calculate the Tax
        {
            case TaxBaseType::PctPerNet :
                taxAmountCur = (_calculatedBase * taxData.TaxValue) / 100;
                break;

            case TaxBaseType::AmountByUnit:
                taxAmountCur = (_calculatedBase * taxData.TaxValue);
                break;
        }

        if ((this.TaxBase == TaxBaseType::AmountByUnit)
            && this.TaxCurrencyCode
            && (this.TaxCurrencyCode != standardCurrency))
        {
            currencyCode = this.TaxCurrencyCode;
        }
        else if (_sourceCurrencyCode != standardCurrency)
        {
            currencyCode = _sourceCurrencyCode;
        }
        else
        {
            currencyCode = standardCurrency;
        }

        if (this.TaxBase == TaxBaseType::AmountByUnit
            && this.TaxType_IN != TaxType_IN::Customs
            && this.TaxCurrencyCode != _sourceCurrencyCode)
        {
            if (this.TaxCurrencyCode != standardCurrency)
            {
                taxAmountCur = CurrencyExchangeHelper::mstAmount(taxAmountCur, currencyCode, calculationDate);
            }

            if (_sourceCurrencyCode != standardCurrency)
            {
                taxAmountCur = CurrencyExchangeHelper::curAmount(taxAmountCur, _sourceCurrencyCode, calculationDate);
            }
        }

        if (this.TaxType_IN == TaxType_IN::Customs)
        {
            taxAmountCurOrig = taxAmountCur;

            if (_salesPurchJournalLine && _salesPurchJournalLine.TableId == tableNum(LedgerJournalTrans))
            {
                customscalculationDate = _salesPurchJournalLine.TransDate;
            }

            if (this.TaxCurrencyCode
                && (this.TaxCurrencyCode != standardCurrency)
                    && (this.TaxCurrencyCode != _sourceCurrencyCode))
            {
                // Step 1. Convert from transaction currency to comapny currency using the tax code currency.
                taxAmountOrigMST = CurrencyExchangeHelper::mstAmount(taxAmountCur, currencyCode, _tmpTax.CalculationDate, UnknownNoYes::Unknown, 0, 0, false);

                // Step 2. Convert the above MST amount back to transaction currency
                taxAmountCur     = CurrencyExchangeHelper::curAmount(taxAmountOrigMST, _sourceCurrencyCode, calculationDate);

                _tmpTax.CustomsDuty_IN = CurrencyHelper_IN::customsMSTAmount_IN(taxAmountCur,
                                                                        _sourceCurrencyCode,
                                                                        CurrencyHelper_IN::taxDirection2CustomsDirection_New_IN(_tmpTax.TaxDirection),
                                                                        customscalculationDate ? customscalculationDate : _tmpTax.CalculationDate,
                                                                        true);
                customsTaxAmount       = _tmpTax.CustomsDuty_IN;
            }
            else
            {
                if (this.TaxBase == TaxBaseType::AmountByUnit
                    && (_sourceCurrencyCode != standardCurrency
                        && this.TaxCurrencyCode != _sourceCurrencyCode))
                {
                    taxAmountCur = CurrencyExchangeHelper::curAmount(taxAmountCur, _sourceCurrencyCode, calculationDate);

                    // condition will fail when transaction and tax currences are same.
                    if (this.TaxCurrencyCode
                        && ((this.TaxCurrencyCode != standardCurrency
                             && this.TaxCurrencyCode != _sourceCurrencyCode)
                             || (this.TaxCurrencyCode == standardCurrency)))
                    {
                        taxAmountCurOrig = taxAmountCur;
                    }
                }

                // Not apply round before convert tax amount to customs currency.
                taxAmountOrigMST = CurrencyExchangeHelper::mstAmount(taxAmountCurOrig, standardCurrency, _tmpTax.CalculationDate, UnknownNoYes::Unknown, 0, 0, false);

                _tmpTax.CustomsDuty_IN = CurrencyHelper_IN::customsMSTAmount_IN(taxAmountOrigMST,
                                                                       _sourceCurrencyCode,
                                                                       CurrencyHelper_IN::taxDirection2CustomsDirection_New_IN(_tmpTax.TaxDirection),
                                                                       customscalculationDate ? customscalculationDate : calculationDate);
            }
            _tmpTax.TaxBaseAmountMST = CurrencyExchangeHelper::mstAmount(_calculatedBase, _sourceCurrencyCode, calculationDate);
            if (customsTaxAmount == 0)
            {
                customsTaxAmount = CurrencyHelper_IN::customsMSTAmount_IN(taxAmountCurOrig,
                                                                _sourceCurrencyCode,
                                                                CurrencyHelper_IN::taxDirection2CustomsDirection_New_IN(_tmpTax.TaxDirection),
                                                                _tmpTax.CalculationDate,
                                                                true);
            }
            if (_sourceCurrencyCode == this.TaxCurrencyCode)
            {
                customsTaxAmount = this.roundedOffTax(customsTaxAmount);
            }
            if (this.TaxBase == TaxBaseType::AmountByUnit)
            {
                _tmpTax.CustomsDuty_IN = customsTaxAmount;
            }
        }
        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /* Calculates tax from tax currency, because of limits in amounts */
    public TaxAmount calcTax(TransDate       _date,
                                    TmpTax          _tmpTax,
                                    TaxBase         _amountBase,
                                    TaxBase         _amountBaseBefore,
                                    CurrencyCode    _sourceCurrencyCode,
                                    NoYes           _triangulation,
                                    TransDate       _calculationDate
                                    ,
                                    SalesPurchJournalLine _salesPurchJournalLine = null
                                    )
    {
        TaxAmount            taxAmount;
        TaxAmount            taxInCostPrice;
        TaxData              taxData;
        TaxBase              calculatedBase;
        TaxBase              calculatedBaseMST;
        TaxBase              currencyBase;
        TaxBase              amountBaseBeforeCur;
        CurrencyCode         standardCurrency;
        TaxValue             taxValue;
        TaxAmountCur         taxAmountCurReal;
        TaxAmount            taxAmountMSTReal;
        boolean              isAverageVATEnabled = TaxThaiGovCertificationFeatureChecker::isAverageVATEnabled();
        TaxOnItem            taxOnItem;
        Percent              loiPercent;
        Percent              nonRecovPercent;
        NoYes                compositionSchemeEnabled;

        TaxCurrencyConversionRoutineHandler handler = TaxCurrencyConversionRoutineHandler::instance();

        standardCurrency = CompanyInfoHelper::standardCurrency();

        if (this.TaxBase == TaxBaseType::AmountByUnit)
        {
            calculatedBase = _tmpTax.TaxBaseQty;
        }
        else
        {
            //Feature Sales Tax Conversion
            if (TaxCurrencyConversionFeatureExposure::isEnabled())
            {
                //since the calculation will be using tax currency, we directly use tax currency to fill calculatedBase, instead converting it from accounting currency
                calculatedBase = _tmpTax.TaxBaseAmountCur;

                // _amountBaseBefore is in accounting currency, converted from tax currency. here we need to convert it back to tax currency, since follwoing calculation will be done all in tax currency
                if (!this.splitCalculate())
                {
                    amountBaseBeforeCur = CurrencyExchangeHelper::curAmount(_amountBaseBefore, this.TaxCurrencyCode, _date, UnknownNoYes::Unknown, 0, 0, false);
                    calculatedBase = _tmpTax.TaxBaseAmountCur + amountBaseBeforeCur;
                }
                calculatedBaseMST   = _amountBase;
            }
            else
            {
                calculatedBase = _amountBase;

                if (!this.splitCalculate())
                    calculatedBase = _amountBase + _amountBaseBefore;

                calculatedBaseMST   = calculatedBase;

                if (this.TaxCurrencyCode && (this.TaxCurrencyCode != standardCurrency))
                {
                    calculatedBase = CurrencyExchangeHelper::curAmount(calculatedBase, this.TaxCurrencyCode, _date, UnknownNoYes::Unknown, 0, 0, false);
                }
            }
        }

        //Feature Sales Tax Conversion
        if (TaxCurrencyConversionFeatureExposure::isEnabled())
        {
            if (this.TaxCurrencyCode && (this.TaxCurrencyCode != standardCurrency) &&
                (this.TaxBase != TaxBaseType::AmountByUnit))
            {
                currencyBase = _tmpTax.TaxBaseLimitCur;
            }
            else
            {
                currencyBase = _tmpTax.TaxBaseLimit;
            }
        }
        else
        {
            currencyBase = _tmpTax.TaxBaseLimit;

            if (this.TaxCurrencyCode && (this.TaxCurrencyCode != standardCurrency) &&
                (this.TaxBase != TaxBaseType::AmountByUnit))
            {
                currencyBase = CurrencyExchangeHelper::curAmount(currencyBase, this.TaxCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation));
            }
        }

        taxData  = TaxData::find(this.TaxCode,
                                 _calculationDate,
                                 (this.TaxValueQty_RU ? currencyBase / this.TaxValueQty_RU : currencyBase) - 0.0001); // - 0.0001 to be sure to be within the interval
        if (TaxParameters::checkTaxParameters_IN()
            && (this.TaxType_IN != TaxType_IN::None)
            && ((this.TaxBase == TaxBaseType::PctPerNet) || (this.TaxBase == TaxBaseType::AmountByUnit)))
        {
            taxAmount = this.calcPctPerNetOrAmountByUnit_IN(_tmpTax, calculatedBase, _sourceCurrencyCode, _salesPurchJournalLine);
        }
        else
        {
            taxValue = taxData.TaxValue;
        }

        switch (this.TaxBase)
        {
            case TaxBaseType::PctPerNet,
                 TaxBaseType::PctPerGross,
                 TaxBaseType::PctPerTax:
                if (this.TaxBase == TaxBaseType::PctPerNet
                    && this.TaxType_IN != TaxType_IN::None)
                {
                    break;
                }
                if (this.TaxLimitBase == TaxLimitBase::UnitWithoutVAT ||
                    this.TaxLimitBase == TaxLimitBase::UnitInclVAT)
                {
                    taxAmount = (calculatedBase * taxValue) / 100 * abs(_tmpTax.TaxBaseQty);
                }
                else
                {
                    if (!BrazilParameters::isEnabled() || this.TaxSubstitution_BR != TaxSubstitutionEnum_BR::SimplifiedEstimate)
                    {
                        taxAmount = (calculatedBase * taxValue) / 100;
                    }
                    else
                    {
                        taxAmount = (calculatedBase   * taxData.TaxSubstitutionMarkupValue) / 100;
                    }
                }

                break;

            case TaxBaseType::PctGrosOnNet :

                taxAmount = (calculatedBase   * Tax::calcPctGrosOnNet(taxValue)) / 100;

                break;

            case TaxBaseType::AmountByUnit:

                if (this.TaxBase == TaxBaseType::AmountByUnit
                    && this.TaxType_IN != TaxType_IN::None)
                {
                    break;
                }
                // If AmountByUnit then the tax value is not a percentage but a currency amount
                // in the currency on the tax code.  So convert it to MST
                taxValue = CurrencyExchangeHelper::mstAmount(taxData.TaxValue, this.TaxCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation));

                taxAmount = calculatedBase * taxValue;
                if (_tmpTax.TaxDirection == TaxDirection::IncomingTax   ||
                    _tmpTax.TaxDirection == TaxDirection::UseTax)
                {
                    if (TaxParameters::find().PurchTaxOnOperations)
                        taxInCostPrice = taxAmount;
                    else
                    {
                        if (!(isAverageVATEnabled && TaxTable::isNormalVAT(this.TaxCode)))
                        {
                            taxInCostPrice = taxAmount * taxData.vatExemptPct / 100;
                        }
                    }
                }

                calculatedBase = 0;
                break;
        }

        if (_tmpTax.TaxDirection == TaxDirection::IncomingTax   ||
            _tmpTax.TaxDirection == TaxDirection::UseTax)
        {
            if (!BrazilParameters::isEnabled())
            {
                if (TaxParameters::find().PurchTaxOnOperations)
                {
                    taxInCostPrice = taxAmount;
                }
                else
                {
                    if (this.TaxType_IN != TaxType_IN::None
                        && TaxParameters::checkTaxParameters_IN())
                    {
                        if (this.TaxType_IN == TaxType_IN::Customs)
                        {
                            taxInCostPrice = 0;
                        }
                        else
                        {
                            taxOnItem = TaxOnItem::find(this.getTaxItemGroup_IN(_salesPurchJournalLine), this.TaxCode);
                            loiPercent = taxOnItem.LoadOnInventoryPercent_IN;
                            nonRecovPercent = TransTaxInformationHelper::findOrCreateTransTaxInformation(_salesPurchJournalLine.SourceTableId, _salesPurchJournalLine.SourceRecId).VATNonRecoverablePercent;
                            compositionSchemeEnabled = VendTable::compositionSchemeEnabled(
                                _salesPurchJournalLine.SourceTableId,
                                _salesPurchJournalLine.SourceRecId);

                            taxInCostPrice = TaxTable::calcTaxInCostPrice(
                                taxAmount,
                                this.TaxType_IN,
                                compositionSchemeEnabled,
                                loiPercent,
                                nonRecovPercent);
                        }
                    }
                    else
                    {
                        if (!(isAverageVATEnabled && TaxTable::isNormalVAT(this.TaxCode)))
                        {
                            taxInCostPrice          = taxAmount * taxData.vatExemptPct / 100;
                        }
                    }
                }
            }
            else
            {
                if (_tmpTax.TaxFiscalValue_BR == TaxFiscalValue_BR::WithoutCreditDebitOther)
                {
                    taxInCostPrice = taxAmount;
                }
                else if (_tmpTax.TaxFiscalValue_BR == TaxFiscalValue_BR::WithCreditDebit)
                {
                    taxInCostPrice = taxAmount * taxData.vatExemptPct / 100;
                }
            }
        }

        taxAmountCurReal = taxAmount;

        //Feature Sales Tax Conversion
        if (TaxCurrencyConversionFeatureExposure::isEnabled())
        {
            //fill tax currency amounts
            _tmpTax.TaxInCostPriceCur   = this.roundedOffTax(taxInCostPrice);
            _tmpTax.TaxAmountCur        = this.roundedOffTax(taxAmount);
            _tmpTax.TaxBaseAmountCur    = this.roundedOffTax(calculatedBase);

            //fill transaction currency amounts
            _tmpTax.SourceTaxAmountCurReal = handler.taxCurrencyToTransCurrency(_sourceCurrencyCode, this.TaxCurrencyCode, taxAmountCurReal,
                                                                                0, 0, _date, false);
            _tmpTax.SourceTaxAmountCur     = _tmpTax.SourceTaxAmountCurReal;

            _tmpTax.SourceTaxBaseAmountCur =  handler.taxCurrencyToTransCurrency(_sourceCurrencyCode, this.TaxCurrencyCode, calculatedBase,
                                                                                0, 0, _date, false);
            _tmpTax.SourceTaxBaseAmountCurRaw = handler.taxCurrencyToTransCurrency(_sourceCurrencyCode, this.TaxCurrencyCode, calculatedBase,
                                                                                0, 0, _date, false);
            _tmpTax.TaxInCostPrice         = handler.taxCurrencyToTransCurrency(_sourceCurrencyCode, this.TaxCurrencyCode, taxInCostPrice,
                                                                                0, 0, _date, true);

            //fill accounting currency amounts
            _tmpTax.TaxBaseAmountMSTRaw = CurrencyExchangeHelper::mstAmount(_tmpTax.SourceTaxBaseAmountCurRaw, _sourceCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation), 0, 0, false);
            _tmpTax.TaxBaseAmountMST    = CurrencyExchangeHelper::mstAmount(_tmpTax.SourceTaxBaseAmountCur, _sourceCurrencyCode, _date);
            _tmpTax.TaxAmountMST        = CurrencyExchangeHelper::mstAmount(_tmpTax.SourceTaxAmountCur, _sourceCurrencyCode, _date);
            _tmpTax.TaxInCostPriceMST   = CurrencyExchangeHelper::mstAmount(_tmpTax.TaxInCostPrice, _sourceCurrencyCode, _date);
            taxAmount = _tmpTax.TaxAmountMST;
        }
        else
        {
            if (_sourceCurrencyCode == this.TaxCurrencyCode)
            {
                taxAmount      = this.roundedOffTax(taxAmount);
                taxInCostPrice = this.roundedOffTax(taxInCostPrice);
            }

            _tmpTax.TaxInCostPriceCur   = taxInCostPrice;
            _tmpTax.TaxAmountCur        = taxAmount;
            _tmpTax.TaxBaseAmountCur    = calculatedBase;

            if (!this.TaxCurrencyCode)
            {
                taxAmountMSTReal = taxAmountCurReal;
            }
            else
            {
                if (this.TaxCurrencyCode == standardCurrency)
                {
                    taxAmountMSTReal = taxAmountCurReal;
                }
                else
                {
                    taxAmountMSTReal = CurrencyExchangeHelper::mstAmount(taxAmountCurReal, this.TaxCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation), 0, 0, false);
                    taxAmount        = CurrencyExchangeHelper::mstAmount(taxAmount, this.TaxCurrencyCode, _date);
                    taxInCostPrice   = CurrencyExchangeHelper::mstAmount(taxInCostPrice, this.TaxCurrencyCode, _date);
                }
            }

            _tmpTax.TaxBaseAmountMSTRaw = calculatedBaseMST;
            _tmpTax.TaxBaseAmountMST    = CurrencyExchangeHelper::amount(calculatedBaseMST);
            _tmpTax.TaxAmountMST        = taxAmount;
            _tmpTax.TaxInCostPriceMST   = taxInCostPrice;

            if (_sourceCurrencyCode !=  standardCurrency)
            {
                _tmpTax.SourceTaxAmountCurReal = CurrencyExchangeHelper::curAmount(taxAmountMSTReal, _sourceCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation));

                _tmpTax.SourceTaxAmountCur      = _tmpTax.SourceTaxAmountCurReal;

                _tmpTax.SourceTaxBaseAmountCurRaw  = CurrencyExchangeHelper::curAmount(_tmpTax.TaxBaseAmountMSTRaw, _sourceCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation), 0, 0, false);

                _tmpTax.SourceTaxBaseAmountCur  = CurrencyExchangeHelper::curAmount(_tmpTax.TaxBaseAmountMSTRaw, _sourceCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation));

                _tmpTax.TaxInCostPrice         = CurrencyExchangeHelper::curAmount(_tmpTax.TaxInCostPriceMST, _sourceCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation));
            }
            else
            {
                _tmpTax.SourceTaxAmountCurReal = taxAmountMSTReal;
                _tmpTax.SourceTaxAmountCur     = _tmpTax.TaxAmountMST;
                _tmpTax.SourceTaxBaseAmountCur = _tmpTax.TaxBaseAmountMST;
                _tmpTax.SourceTaxBaseAmountCurRaw = _tmpTax.TaxBaseAmountMSTRaw;
                _tmpTax.TaxInCostPrice         = _tmpTax.TaxInCostPriceMST;
            }
        }

        // <GBR>
        if (TaxTable::TaxMustMatchBaseAndPercentage_BR(this.TaxType_BR))
        {
            _tmpTax.TaxBaseAmountMST += TaxTable::calcPennyDiffFromTaxBasePercentageTaxCode_BR(_tmpTax.TaxBaseAmountMST, taxData.TaxValue, _tmpTax.TaxAmountMST, _tmpTax.TaxCode);
        }
        // </GBR>

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomCharge_RUImportOrExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if tax is customs fee for import or export with a correct settings.
    /// </summary>
    /// <returns>True if tax is customs fee; otherwise false.</returns>
    /// <remarks>
    /// If a selected tax is customs fee with parameters, described below, we should change use invoice cost as a base,
    /// instead of default behaviour for amount by unit to look up tax data by quantity as base.
    ///  Type of tax is customs fee,
    ///  origin is amount by unit,
    ///  fee type is import issuance or export issuance.
    /// </remarks>
    protected boolean isCustomCharge_RUImportOrExport()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.TaxBase == TaxBaseType::AmountByUnit &&
                this.TaxType_W == TaxType_W::CustomCharge_RU &&
                this.TaxLimitBase == TaxLimitBase::LineWithoutVAT &&
                (
                    this.CustomChargeType_RU == CustomChargeType_RU::AdministrationExport ||
                    this.CustomChargeType_RU == CustomChargeType_RU::AdministrationImport
                )
            )
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxSimple</Name>
				<Source><![CDATA[
    /* Calculates tax from SourceCurrencyCode */
    TaxAmountCur calcTaxSimple(TransDate     _date,
                                      TmpTax        _tmpTax,
                                      TaxBaseCur    _amountBaseCur,
                                      CurrencyCode  _sourceCurrencyCode,
                                      NoYes         _triangulation,
                                      TransDate     _calculationDate
                                      ,
                                      SalesPurchJournalLine _salesPurchJournalLine = null
                                )
    {
        TaxAmountCur    taxAmount;
        TaxAmountCur    taxInCostPrice;
        TaxData         taxData;
        TaxBase         calculatedBase;
        TaxBase         taxCalculatedBase;
        TaxAmountCur    taxAmountRounded;
        CurrencyCode    standardCurrency;
        Currency        sourceCurrency;
        TaxOnItem            taxOnItem;
        Percent              loiPercent;
        Percent              nonRecovPercent;
        NoYes                compositionSchemeEnabled;
        boolean              countryRegion_IN;
        TaxCurrencyConversionRoutineHandler handler = TaxCurrencyConversionRoutineHandler::instance();

        if (this.TaxBase == TaxBaseType::AmountByUnit)
        {
            calculatedBase  = _tmpTax.TaxBaseQty;
        }
        else
        {
            calculatedBase  = _amountBaseCur;
        }

        taxCalculatedBase = this.isCustomCharge_RUImportOrExport() ? _amountBaseCur : calculatedBase;

        taxData = TaxData::find(this.TaxCode, 
                                _calculationDate, 
                                this.TaxValueQty_RU ? taxCalculatedBase / this.TaxValueQty_RU : taxCalculatedBase);

        standardCurrency    = CompanyInfoHelper::standardCurrency();
        sourceCurrency      = Currency::find(_sourceCurrencyCode);
        countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);

        if (TaxParameters::checkTaxParameters_IN()
            && (this.TaxType_IN != TaxType_IN::None)
            && ((this.TaxBase == TaxBaseType::PctPerNet) || (this.TaxBase == TaxBaseType::AmountByUnit)))
        {
            taxAmount = this.calcPctPerNetOrAmountByUnit_IN(_tmpTax, calculatedBase, _sourceCurrencyCode, _salesPurchJournalLine);
        }
        switch (this.TaxBase)
        {
            case TaxBaseType::PctPerNet,
                 TaxBaseType::PctPerGross,
                 TaxBaseType::PctPerTax:
                if (countryRegion_IN
                    && this.TaxBase == TaxBaseType::PctPerNet
                    && this.TaxType_IN != TaxType_IN::None)
                {
                    break;
                }

                if (this.TaxLimitBase == TaxLimitBase::UnitWithoutVAT ||
                    this.TaxLimitBase == TaxLimitBase::UnitInclVAT)
                {
                    taxAmount = (calculatedBase * taxData.TaxValue) / 100 * abs(_tmpTax.TaxBaseQty);
                }
                else
                {
                    if (!BrazilParameters::isEnabled() || this.TaxSubstitution_BR != TaxSubstitutionEnum_BR::SimplifiedEstimate)
                    {
                        taxAmount = (calculatedBase   * taxData.TaxValue) / 100;
                    }
                    else
                    {
                        taxAmount = (calculatedBase   * taxData.TaxSubstitutionMarkupValue) / 100;
                    }
                }
                break;

            case TaxBaseType::PctGrosOnNet :

                taxAmount = (calculatedBase   * Tax::calcPctGrosOnNet(taxData.TaxValue)) / 100;
                break;

            case TaxBaseType::AmountByUnit:
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                    && this.TaxBase == TaxBaseType::AmountByUnit
                    && this.TaxType_IN != TaxType_IN::None)
                {
                    calculatedBase = 0;
                    break;
                }
                taxAmount = calculatedBase   * taxData.TaxValue;
                //Feature Sales Tax Conversion
                if (TaxCurrencyConversionFeatureExposure::isEnabled())
                {
                    //here taxAmount is in tax currency, and we need to convert it back to transaction currency
                    taxAmount = handler.taxCurrencyToTransCurrency(_sourceCurrencyCode, this.TaxCurrencyCode, taxAmount, 0, 0, _date, false);
                }
                else
                {
                    if (this.TaxCurrencyCode && (this.TaxCurrencyCode != standardCurrency))
                    taxAmount = CurrencyExchangeHelper::mstAmount(taxAmount, this.TaxCurrencyCode, _date);

                    if (_sourceCurrencyCode != standardCurrency)
                    taxAmount = CurrencyExchangeHelper::curAmount(taxAmount, _sourceCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation));
                }

                if (_tmpTax.TaxDirection == TaxDirection::IncomingTax   ||
                    _tmpTax.TaxDirection == TaxDirection::UseTax)
                {
                    if (TaxParameters::find().PurchTaxOnOperations)
                        taxInCostPrice = taxAmount;
                    else
                        taxInCostPrice = taxAmount * taxData.vatExemptPct / 100;
                }
                calculatedBase = 0;
                break;
        }

        if (!BrazilParameters::isEnabled() || this.RetainedTax_BR == false)
        {
            if (_tmpTax.TaxDirection == TaxDirection::IncomingTax   ||
                _tmpTax.TaxDirection == TaxDirection::UseTax)
            {
                if (!BrazilParameters::isEnabled())
                {
                    if (TaxParameters::find().PurchTaxOnOperations)
                    {
                        taxInCostPrice  = taxAmount;
                    }
                    else
                    {
                        if (this.TaxType_IN != TaxType_IN::None
                            && TaxParameters::checkTaxParameters_IN())
                        {
                            if (this.TaxType_IN == TaxType_IN::Customs)
                            {
                                taxInCostPrice = 0;
                            }
                            else
                            {
                                taxOnItem = TaxOnItem::find(this.getTaxItemGroup_IN(_salesPurchJournalLine), this.TaxCode);
                                loiPercent = taxOnItem.LoadOnInventoryPercent_IN;
                                nonRecovPercent = TransTaxInformationHelper::findOrCreateTransTaxInformation(_salesPurchJournalLine.SourceTableId, _salesPurchJournalLine.SourceRecId).VATNonRecoverablePercent;
                                compositionSchemeEnabled = VendTable::compositionSchemeEnabled(
                                    _salesPurchJournalLine.SourceTableId,
                                    _salesPurchJournalLine.SourceRecId);

                                taxInCostPrice = TaxTable::calcTaxInCostPrice(
                                    taxAmount,
                                    this.TaxType_IN,
                                    compositionSchemeEnabled,
                                    loiPercent,
                                    nonRecovPercent);
                            }
                        }
                        else
                        {
                            taxInCostPrice          = taxAmount * taxData.vatExemptPct / 100;
                        }
                    }
                }
                else
                {
                    if (_tmpTax.TaxFiscalValue_BR == TaxFiscalValue_BR::WithoutCreditDebitOther && _tmpTax.TaxReceivableLongTerm_BR == false)
                    {
                        taxInCostPrice          = taxAmount;
                    }
                    else if (_tmpTax.TaxFiscalValue_BR == TaxFiscalValue_BR::WithCreditDebit
                        || (_tmpTax.TaxFiscalValue_BR == TaxFiscalValue_BR::WithoutCreditDebitOther && _tmpTax.TaxReceivableLongTerm_BR == true))
                    {
                        taxInCostPrice = taxAmount * taxData.vatExemptPct / 100;
                    }
                }
            }
        }

        _tmpTax.SourceTaxAmountCurReal = taxAmount;

        if (_sourceCurrencyCode == this.TaxCurrencyCode)
        {
            taxAmountRounded    = this.roundedOffTax(taxAmountRounded);
            taxAmount           = this.roundedOffTax(taxAmount);
        }

        taxAmountRounded = sourceCurrency.amount_Instance(taxAmount);

        _tmpTax.SourceTaxAmountCur     = taxAmountRounded;
        _tmpTax.SourceTaxBaseAmountCurRaw = calculatedBase;
        _tmpTax.SourceTaxBaseAmountCur = sourceCurrency.amount_Instance(calculatedBase);

        if (this.isRoundDeductibleFirstApplicable(taxData.VATExemptPct)
            && taxInCostPrice)
        {
            TaxAmountCur taxInCostPriceDeductibleRounded = _tmpTax.SourceTaxAmountCurReal - taxInCostPrice;
            if (_sourceCurrencyCode == this.TaxCurrencyCode)
            {
                taxInCostPriceDeductibleRounded = this.roundedOffTax(taxInCostPriceDeductibleRounded);
            }
            taxInCostPriceDeductibleRounded = sourceCurrency.amount_Instance(taxInCostPriceDeductibleRounded);
            taxInCostPrice = _tmpTax.SourceTaxAmountCur - taxInCostPriceDeductibleRounded;
        }
        else
        {
            if (_sourceCurrencyCode == this.TaxCurrencyCode)
            {
                taxInCostPrice = this.roundedOffTax(taxInCostPrice);
            }
            taxInCostPrice = sourceCurrency.amount_Instance(taxInCostPrice);
        }
        _tmpTax.TaxInCostPrice = taxInCostPrice;

        if (_sourceCurrencyCode != standardCurrency)
        {
            _tmpTax.TaxAmountMST    = CurrencyExchangeHelper::mstAmount(taxAmountRounded, _sourceCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation));

            _tmpTax.TaxBaseAmountMSTRaw    =  CurrencyExchangeHelper::mstAmount(calculatedBase, _sourceCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation), 0, 0, false);

            // _tmpTax.TaxBaseAmountMSTRaw was converted from a raw transactional amount, for the rounded base in MST
            // we need to convert from a rounded transactional base amount
            _tmpTax.TaxBaseAmountMST    =  CurrencyExchangeHelper::mstAmount(_tmpTax.SourceTaxBaseAmountCur, _sourceCurrencyCode, _date, Currency::noYes2UnknownNoYes(_triangulation), 0, 0, true);

            _tmpTax.TaxInCostPriceMST   = CurrencyExchangeHelper::mstAmount(taxInCostPrice, _sourceCurrencyCode, _date);

            // <GBR>
            if (TaxTable::TaxMustMatchBaseAndPercentage_BR(this.TaxType_BR))
            {
                _tmpTax.TaxBaseAmountMST += TaxTable::calcPennyDiffFromTaxBasePercentageTaxCode_BR(_tmpTax.TaxBaseAmountMST, taxData.TaxValue, _tmpTax.TaxAmountMST, _tmpTax.TaxCode);
            }
            // </GBR>
        }
        else
        {
            _tmpTax.TaxAmountMST        = taxAmountRounded;
            _tmpTax.TaxBaseAmountMSTRaw    = calculatedBase;
            _tmpTax.TaxBaseAmountMST       = _tmpTax.SourceTaxBaseAmountCur;
            _tmpTax.TaxInCostPriceMST   = taxInCostPrice;
        }

        //Feature Sales Tax Conversion
        if (TaxCurrencyConversionFeatureExposure::isEnabled())
        {
            _tmpTax.TaxAmountCur        = handler.transCurrencyToTaxCurrency(_sourceCurrencyCode, this.TaxCurrencyCode, _tmpTax.SourceTaxAmountCur, 0, 0, _date);
            _tmpTax.TaxBaseAmountCur    = handler.transCurrencyToTaxCurrency(_sourceCurrencyCode, this.TaxCurrencyCode, _tmpTax.SourceTaxBaseAmountCur, 0, 0, _date);
            _tmpTax.TaxInCostPriceCur    = handler.transCurrencyToTaxCurrency(_sourceCurrencyCode, this.TaxCurrencyCode, _tmpTax.TaxInCostPrice, 0, 0, _date);
        }
        else
        {
            if (this.TaxCurrencyCode && (this.TaxCurrencyCode != standardCurrency))
            {
                if (this.TaxCurrencyCode == _sourceCurrencyCode)
                {
                    _tmpTax.TaxAmountCur      = _tmpTax.SourceTaxAmountCur;
                    _tmpTax.TaxBaseAmountCur  = _tmpTax.SourceTaxBaseAmountCur;
                    _tmpTax.TaxInCostPriceCur = _tmpTax.TaxInCostPrice;
                }
                else
                {
                    _tmpTax.TaxAmountCur        = CurrencyExchangeHelper::curAmount(_tmpTax.TaxAmountMST, this.TaxCurrencyCode, _date);
                    _tmpTax.TaxBaseAmountCur    = CurrencyExchangeHelper::curAmount(_tmpTax.TaxBaseAmountMST, this.TaxCurrencyCode, _date);
                    _tmpTax.TaxInCostPriceCur   = CurrencyExchangeHelper::curAmount(_tmpTax.TaxInCostPriceMST, this.TaxCurrencyCode, _date);
                }
            }
            else
            {
                _tmpTax.TaxAmountCur        = _tmpTax.TaxAmountMST;
                _tmpTax.TaxBaseAmountCur    = _tmpTax.TaxBaseAmountMST;
                _tmpTax.TaxInCostPriceCur   = _tmpTax.TaxInCostPriceMST;
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTaxBaseAdjusted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the tax base can be adjusted.
    /// </summary>
    /// <returns>
    /// Ture if tax base can be changed, otherwise false.
    /// </returns>
    /// <remarks>
    /// Tax base can be adjusted only if the tax does not depend on other tax and the calculation is not based on unit.
    /// </remarks>
    public boolean canTaxBaseAdjusted()
    {
        return !this.TaxOnTax && !this.isTaxBaseByUnit() && !this.isTaxLimitBaseByUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTaxTypeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the tax type can be changed.
    /// </summary>
    /// <returns>
    /// Ture if tax type can be changed, otherwise false.
    /// </returns>
    private boolean canTaxTypeChanged()
    {
        TaxOnItem   taxOnItem;
        boolean     ret = true;

        select firstonly TaxCode from taxOnItem
            where taxOnItem.TaxCode == this.TaxCode;

        if (taxOnItem.RecId
            && this.orig().TaxType_TH != this.TaxType_TH)
        {
            // Cannot change the tax type while connected to an item sales tax group.
            ret = checkFailed("@SYS4082810");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChargeType_RU</Name>
				<Source><![CDATA[
    boolean checkChargeType_RU()
    {
        TaxTable    taxTable;
        boolean     ret = true;

        if (! this.CustomChargeType_RU)
        {
            ret = checkFailed(strFmt("@GLS103654", fieldId2pname(tableNum(TaxTable), fieldNum(TaxTable, CustomChargeType_RU))));
        }

        select firstonly taxTable
            where taxTable.TaxType_W            == TaxType_W::CustomCharge_RU                   &&
                  taxTable.CustomChargeType_RU  == this.CustomChargeType_RU                     &&
                  taxTable.CustomChargeType_RU  == CustomChargeType_RU::AdministrationExport    &&
                  taxTable.RecId                != this.RecId;

        if (taxTable)
        {
            ret = checkFailed(strFmt("@GLS115249", CustomChargeType_RU::AdministrationExport));
        }

        select firstonly taxTable
            where taxTable.TaxType_W            == TaxType_W::CustomCharge_RU                   &&
                  taxTable.CustomChargeType_RU  == this.CustomChargeType_RU                     &&
                  taxTable.CustomChargeType_RU  == CustomChargeType_RU::AdministrationImport    &&
                  taxTable.RecId                != this.RecId;

        if (taxTable)
        {
            ret = checkFailed(strFmt("@GLS115249", CustomChargeType_RU::AdministrationImport));
        }

        if (this.TaxValueQty_RU <= 0 && (this.CustomChargeType_RU == CustomChargeType_RU::Escort || this.CustomChargeType_RU == CustomChargeType_RU::Storage))
        {
            ret = checkFailed("@SYS113821");
        }

        if (this.TaxBase != TaxBaseType::AmountByUnit)
        {
            ret = checkFailed(strFmt("@GLS115256", TaxBaseType::AmountByUnit));
        }

        if (this.CustomChargeType_RU == CustomChargeType_RU::AdministrationExport
         || this.CustomChargeType_RU == CustomChargeType_RU::AdministrationImport)
        {
            if (this.TaxLimitBase != TaxLimitBase::LineWithoutVAT)
            {
                ret = checkFailed(strFmt("@GLS223715", TaxLimitBase::LineWithoutVAT));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataConsistency</Name>
				<Source><![CDATA[
    boolean checkDataConsistency()
    {
        if (this.isTaxBaseByUnit() &&
            ! this.TaxUnit)
            return checkFailed("@SYS23528");

        if (this.isTaxOnTaxRequired() &&
            ! this.TaxOnTax)
            return checkFailed("@SYS23530");

        if (this.isTaxOnTaxRequired() &&
            ! TaxTable::exist(this.TaxOnTax))
            return checkFailed(strFmt("@SYS24542", this.TaxCode));

        if (this.TaxBase == TaxBaseType::PctPerGross &&
            this.TaxOnTax)
        {
            if (TaxTable::find(this.TaxOnTax).TaxBase == TaxBaseType::PctPerGross &&
                !TaxTable::exist(this.TaxOnTax))
                return checkFailed(strFmt("@SYS24542", this.TaxCode));
        }

        // When tax calculation service eabled and the source of the tax code is tax calculation, the valiation below would be skipped.
        if (TaxParameters::find().CalculatePrinciple == TaxCalcPrin::Total
            && !(Tax::isTaxIntegrationEnabledForTaxService() && this.Source == TaxMasterDataSource::TaxService))
        {
            if (this.isTaxLimitBaseByUnit() ||
                this.TaxLimitBase       == TaxLimitBase::LineWithoutVAT ||
                this.TaxLimitBase       == TaxLimitBase::LineInclVAT)
            {
                return checkFailed(strFmt("@Tax:CalcMethodAndBaseConflict", this.TaxLimitBase));
            }
        }

        if (this.isTaxLimitBaseByUnit() &&
            ! this.TaxUnit)
            return checkFailed("@SYS23528");

        if (! this.isTaxBaseByUnit() &&
            this.TaxIncludeInTax)
            return checkFailed("@SYS60449");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxReportCollection_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether specified record exists in <c>TaxReportCollection</c> table and displays a message when record does not exists.
    /// </summary>
    /// <param name="_taxReportField">
    /// The tax report field of the record for which to check
    /// </param>
    /// <param name="_taxReportLayout">
    /// The tax report layout of the record for which to check
    /// </param>
    /// <returns>
    /// true if specified record exists, otherwise false
    /// </returns>
    public boolean checkTaxReportCollection_MY(TaxReportField _taxReportField, TaxReportLayout _taxReportLayout)
    {
        boolean ret = true;

        if (TaxGSTFeatureChecker_MY::isCountryRegionMY()
            && _taxReportField
            && !TaxReportCollection::findByReportFieldLayout(_taxReportField, _taxReportLayout))
        {
            ret = checkFailed(strFmt("@SYS78854", _taxReportField, _taxReportLayout));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxTotal</Name>
				<Source><![CDATA[
    boolean checkTaxTotal()
    {
    /*
        if (this.taxBase      == TaxBaseType::PctPerTax &&
            ! TaxTable::find(this.taxOnTax).taxOnTax)
             return checkFailed(strFmt("@SYS24542", this.taxCode));
    */
        if (this.TaxBase      == TaxBaseType::PctPerGross && this.TaxOnTax)
        {
            if (TaxTable::find(this.TaxOnTax).TaxBase        == TaxBaseType::PctPerGross &&
                !TaxTable::find(this.TaxOnTax).TaxOnTax)
                return checkFailed(strFmt("@SYS24542", this.TaxCode));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxTypeNotEmpty_BR</Name>
				<Source><![CDATA[
    boolean checkTaxTypeNotEmpty_BR()
    {
        if (this.TaxType_BR == TaxType_BR::Blank)
        {
            return checkFailed(strFmt("@SYS26332", fieldId2name(tableNum(TaxTable),fieldNum(TaxTable,TaxType_BR))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxValueQty_RU</Name>
				<Source><![CDATA[
    boolean checkTaxValueQty_RU()
    {
        boolean ret = true;

        if (this.TaxValueQty_RU <= 0 && (this.CustomChargeType_RU == CustomChargeType_RU::Escort || this.CustomChargeType_RU == CustomChargeType_RU::Storage))
        {
            ret = checkFailed("@SYS113821");
        }

        if (this.TaxValueQty_RU != 1 && (this.CustomChargeType_RU == CustomChargeType_RU::AdministrationExport || this.CustomChargeType_RU == CustomChargeType_RU::AdministrationImport))
        {
            ret = checkFailed("@GLS115432");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        if (this.TaxJurisdictionCode)
        {
            this.deleteTaxGroupData();
        }

        super();

        ttscommit;

        TaxCache::clearScope(TaxCacheScope::TaxPerUnitAndGrossDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxGroupData</Name>
				<Source><![CDATA[
    public void deleteTaxGroupData()
    {
        TaxJurisdiction         taxJurisdiction;
        TaxGroupTaxJurisdiction taxGroupTaxJurisdiction;
        TaxGroupData            taxGroupData;
        ;

        ttsbegin;

        if (this.orig().TaxJurisdictionCode)
        {
            while select RecId from taxJurisdiction
            where taxJurisdiction.TaxJurisdictionCode == this.orig().TaxJurisdictionCode
            join TaxGroup from taxGroupTaxJurisdiction
            where taxGroupTaxJurisdiction.TaxJurisdictionCode == taxJurisdiction.TaxJurisdictionCode
            {
                select forupdate taxGroupData
                where taxGroupData.TaxGroup == taxGroupTaxJurisdiction.TaxGroup
                   && taxGroupData.TaxCode == this.TaxCode;
                taxGroupData.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxPerOrigInv_Project_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether TaxAsPerOriginalInvoice_IN field is enabled for each journals.
    /// </summary>
    /// <param name="_salesPurchJournalLine">
    /// The Map buffer - SalesPurchJournalLine
    /// </param>
    /// <param name="_tmpTax">
    /// The tax buffer - TmpTax.
    /// </param>
    /// <param name="_taxAsPerOriginalInvoice">
    /// True or false.
    /// </param>
    /// <returns>
    /// return true if record found.
    /// </returns>
    public boolean determineTaxPerOrigInv_Project_IN(SalesPurchJournalLine      _salesPurchJournalLine,
                                                     TmpTax                     _tmpTax,
                                                     boolean                    _taxAsPerOriginalInvoice)
    {
        ProjProposalEmpl            projProposalEmpl;
        ProjEmplTransSale           projEmplTransSale;
        ProjProposalEmplDetail      projProposalEmplDetail;

        ProjProposalCost            projProposalCost;
        ProjCostTransSale           projCostTransSale;
        ProjProposalCostDetail      projProposalCostDetail;

        ProjProposalItem            projProposalItem;
        ProjItemTransSale           projItemTransSale;
        ProjProposalItemDetail      projProposalItemDetail;

        ProjProposalRevenue         projProposalRevenue;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjProposalRevenueDetail   projProposalRevenueDetail;

        ProjProposalOnAcc           projProposalOnAcc;
        ProjOnAccTransSale          projOnAccTransSale;
        ProjProposalOnAccDetail     projProposalOnAccDetail;

        if (!_taxAsPerOriginalInvoice)
        {
            if (_salesPurchJournalLine.SourceTableId == tableNum(ProjEmplTrans))
            {
                select firstonly TaxAsPerOriginalInvoice_IN from projEmplTransSale
                    join RecId from projProposalEmplDetail
                        where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
                    join RecId from projProposalEmpl
                        where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId &&
                              projProposalEmpl.RecId == _tmpTax.SourceRecId_IN &&
                              projProposalEmpl.TableId == _tmpTax.SourceTableId_IN;

                if (projEmplTransSale.TaxAsPerOriginalInvoice_IN)
                {
                    return true;
                }
            }

            if (_salesPurchJournalLine.SourceTableId == tableNum(ProjCostTrans))
            {
                select firstonly TaxAsPerOriginalInvoice_IN from projCostTransSale
                    join RecId from projProposalCostDetail
                        where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
                    join RecId from projProposalCost
                        where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId &&
                              projProposalCost.RecId == _tmpTax.SourceRecId_IN &&
                              projProposalCost.TableId == _tmpTax.SourceTableId_IN;

                if (projCostTransSale.TaxAsPerOriginalInvoice_IN)
                {
                    return true;
                }
            }

            if (_salesPurchJournalLine.SourceTableId == tableNum(ProjItemTrans))
            {
                select firstonly TaxAsPerOriginalInvoice_IN from projItemTransSale
                    join RecId from projProposalItemDetail
                        where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
                    join RecId from projProposalItem
                        where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId &&
                              projProposalItem.RecId == _tmpTax.SourceRecId_IN &&
                              projProposalItem.TableId == _tmpTax.SourceTableId_IN;

                if (projItemTransSale.TaxAsPerOriginalInvoice_IN)
                {
                    return true;
                }
            }

            if (_salesPurchJournalLine.SourceTableId == tableNum(ProjRevenueTrans))
            {
                select firstonly TaxAsPerOriginalInvoice_IN from projRevenueTransSale
                    join RecId from projProposalRevenueDetail
                        where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
                    join RecId from projProposalRevenue
                        where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId &&
                              projProposalRevenue.RecId == _tmpTax.SourceRecId_IN &&
                              projProposalRevenue.TableId == _tmpTax.SourceTableId_IN;

                if (projRevenueTransSale.TaxAsPerOriginalInvoice_IN)
                {
                    return true;
                }
            }

            if (_salesPurchJournalLine.SourceTableId == tableNum(ProjOnAccTrans))
            {
                select firstonly TaxAsPerOriginalInvoice_IN from projOnAccTransSale
                    join RecId from projProposalOnAccDetail
                        where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
                    join RecId from projProposalOnAcc
                        where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId &&
                              projProposalOnAcc.RecId == _tmpTax.SourceRecId_IN &&
                              projProposalOnAcc.TableId == _tmpTax.SourceTableId_IN;

                if (projOnAccTransSale.TaxAsPerOriginalInvoice_IN)
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispTaxIntegrated_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// display method for tax integration profile that contain sales tax code.
    /// </summary>
    /// <returns>
    /// return true if record found.
    /// </returns>
    /// <remarks>
    /// This is used by form "TaxTable"
    /// </remarks>
    display NoYes dispTaxIntegrated_CN()
    {
        return TaxProfileTable_CN::existByTaxCode(this.TaxCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDataSourceFields</Name>
				<Source><![CDATA[
    public void enableDataSourceFields()
    {
        FormDataObject  formDataObject;
        ;

        if (FormDataUtil::isFormDataSource(this))
        {
            formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(TaxTable, PrintCode));
            formDataObject.allowEdit(this.TaxWriteSelection == TaxWriteSelection::PrintCode);

            formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(TaxTable, CustomChargeType_RU));
            formDataObject.enabled(this.TaxType_W == TaxType_W::CustomCharge_RU);

            formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(TaxTable, CustomCombinedRate_RU));
            formDataObject.enabled(this.TaxType_W == TaxType_W::CustomDuty_RU);

            formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(TaxTable, CustomCalcMethod_RU));
            formDataObject.enabled(this.CustomCombinedRate_RU != CustomCombinedRate_RU::None);

            formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(TaxTable, CustomUnitId_RU));
            formDataObject.enabled(this.CustomCombinedRate_RU != CustomCombinedRate_RU::None || this.CustomChargeType_RU == CustomChargeType_RU::Storage);

            formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(TaxTable, TaxValueQty_RU));
            formDataObject.enabled(this.TaxType_W == TaxType_W::CustomCharge_RU && (this.CustomChargeType_RU == CustomChargeType_RU::Escort || this.CustomChargeType_RU == CustomChargeType_RU::Storage));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxData_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax data information.
    /// </summary>
    /// <param name="_tmpTax">
    /// The tmp tax.
    /// </param>
    /// <param name="_calculationDate">
    /// The calculation transaction date.
    /// </param>
    /// <param name="_amountBaseCur">
    /// The tax base amount.
    /// </param>
    /// <param name="_salesPurchJournalLine">
    /// The sales purch journal line.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxData</c> class.
    /// </returns>
    public  TaxData getTaxData_IN(
        TmpTax                        _tmpTax,
        TransDate                     _calculationDate,
        TaxBase                       _amountBaseCur,
        SalesPurchJournalLine         _salesPurchJournalLine)
    {
        TaxData     taxData;
        VendInvoiceInfoLineTaxExtension_IN         vendInvoiceInfoLineTaxLoc;

        TransTaxInformation  transTaxInformation;

        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformation(_salesPurchJournalLine.SourceTableId, _salesPurchJournalLine.SourceRecId);

        switch (this.TaxType_IN)
        {
            case TaxType_IN::VAT:
            case TaxType_IN::ServiceTax:
                taxData = TaxData::find(this.TaxCode, _calculationDate, _amountBaseCur);
                break;

            case TaxType_IN::SalesTax:
                taxData = TaxData::findFormType_IN(this.TaxCode, transTaxInformation.SalesTaxFormTypes, _calculationDate, _amountBaseCur);
                break;
            case TaxType_IN::Excise:
                taxData = TaxData::findExciseType_IN(this.TaxCode, transTaxInformation.ExciseTariffCodes, _calculationDate, _amountBaseCur);
                break;

            case TaxType_IN::Customs:
                switch (_salesPurchJournalLine.SourceTableId)
                {
                    case tableNum(PurchLine):
                    case tableNum(VendInvoiceInfoLine):
                    case tableNum(PurchReqLine):
                    case tableNum(PurchRFQLine):
                    case tableNum(SalesLine):
                    case tableNum(CustInvoiceLine):
                    case tableNum(SalesQuotationLine):
                    case tableNum(LedgerJournalTrans):
                    case tableNum(ProjItemTrans):
                    case tableNum(ProjCostTrans):
                    case tableNum(ProjOnAccTrans):
                        taxData = TaxData::findCustomsValue_IN(this.TaxCode, _calculationDate, _amountBaseCur, transTaxInformation.CustomsTariffCode);
                        break;
                }
                break;
        }

        return taxData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.TaxCurrencyCode = CompanyInfoHelper::standardCurrency();
        this.CustomCalcMethod_RU    = CustomCalcMethod_RU::Weight;
        this.TaxValueQty_RU         = 1;

        if (TaxParameters::find().CalculatePrinciple == TaxCalcPrin::Total)
            this.TaxLimitBase = TaxLimitBase::InvoiceWithoutVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        super();

        if (this.TaxJurisdictionCode)
        {
            this.insertTaxGroupData();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxGroupData</Name>
				<Source><![CDATA[
    private void insertTaxGroupData()
    {
        TaxJurisdiction         taxJurisdiction;
        TaxGroupTaxJurisdiction taxGroupTaxJurisdiction;
        TaxGroupData            taxGroupData;
        ;

        ttsbegin;

        if (this.TaxJurisdictionCode)
        {
            while select RecId from taxJurisdiction
            where taxJurisdiction.TaxJurisdictionCode == this.TaxJurisdictionCode
            join TaxGroup, TaxExemptTax, TaxExemptCode, TaxUseTax from taxGroupTaxJurisdiction
            where taxGroupTaxJurisdiction.TaxJurisdictionCode == taxJurisdiction.TaxJurisdictionCode
            {
                taxGroupData.TaxGroup = taxGroupTaxJurisdiction.TaxGroup;
                taxGroupData.TaxCode = this.TaxCode;
                taxGroupData.ExemptTax = taxGroupTaxJurisdiction.TaxExemptTax;
                taxGroupData.TaxExemptCode = taxGroupTaxJurisdiction.TaxExemptCode;
                taxGroupData.UseTax = taxGroupTaxJurisdiction.TaxUseTax;
                taxGroupData.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExportVAT_RU</Name>
				<Source><![CDATA[
    boolean isExportVAT_RU()
    {
        return this.TaxType_W == TaxType_W::VATZero && this.DomesticMarketTaxCode_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxOnTaxRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if tax on tax code is required to be specified.
    /// </summary>
    /// <returns>True if tax on tax code is required to be specified, otherwise false.</returns>
    public boolean isTaxOnTaxRequired()
    {
        return this.TaxBase == TaxBaseType::PctPerTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxOnTaxAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the user should be allowed to enter a value in the tax on tax field.
    /// </summary>
    /// <returns>True if tax on tax is allowed; otherwise false.</returns>
    public boolean isTaxOnTaxAllowed()
    {
        // Gross amount can include another tax code and in effect becomes a tax on tax situation
        // however, unlike a regular tax on tax scenario, tax on gross amount does not have to
        // always be a tax on tax, so the value is optional
        return this.TaxBase == TaxBaseType::PctPerGross || this.isTaxOnTaxRequired();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxBaseByUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if tax base calculation is set per unit.
    /// </summary>
    /// <returns>True if tax base calculation is set per unit, otherwise false.</returns>
    public boolean isTaxBaseByUnit()
    {
        return TaxBaseType::AmountByUnit == this.TaxBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxLimitBaseByUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if tax limit base calculation is set per unit.
    /// </summary>
    /// <returns>True if tax limit base calculation is set per unit, otherwise false.</returns>
    public boolean isTaxLimitBaseByUnit()
    {
        return TaxLimitBase::UnitWithoutVAT == this.TaxLimitBase ||
               TaxLimitBase::UnitInclVAT    == this.TaxLimitBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        TaxJurisdiction     taxJurisdiction;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TaxTable, TaxCode):
            case fieldNum(TaxTable, TaxJurisdictionCode):
                if (this.TaxJurisdictionCode)
                {
                    taxJurisdiction = TaxJurisdiction::find(this.TaxJurisdictionCode);
                    this.TaxPeriod = taxJurisdiction.TaxPeriod;
                    if (!this.RecId)
                    {
                        this.TaxPeriod = taxJurisdiction.TaxPeriod;
                        this.TaxCurrencyCode = taxJurisdiction.TaxCurrencyCode;
                        this.TaxAccountGroup = taxJurisdiction.TaxAccountGroup;
                        switch (TaxParameters::find().CalculatePrinciple)
                        {
                            case TaxCalcPrin::Line:
                                this.TaxLimitBase = TaxLimitBase::LineWithoutVAT;
                                break;
                            case TaxCalcPrin::Total:
                                this.TaxLimitBase = TaxLimitBase::InvoiceWithoutVAT;
                                break;
                        }
                    }
                }
                break;

            case fieldNum(TaxTable, TaxWriteSelection) :
                if (this.TaxWriteSelection != this.orig().TaxWriteSelection &&
                    this.TaxWriteSelection != TaxWriteSelection::PrintCode)
                {
                    this.PrintCode = '';
                }
                this.enableDataSourceFields();
                break;

            case fieldNum(TaxTable, NegativeTax):
                if (BrazilParameters::isEnabled())
                {
                    if (this.NegativeTax)
                        warning("@GLS390");
                }
                break;

            case fieldNum(TaxTable, TaxSubstitution_BR):
                if (this.TaxSubstitution_BR)
                {
                    this.TaxBase = TaxBaseType::PctPerGross;
                }
                else
                {
                    this.TaxBase = TaxBaseType::PctPerNet;
                }
                break;

            case fieldNum(TaxTable, RevenueCode_BR):
                this.RevenueCode_BR = strKeep(this.RevenueCode_BR, '0123456789');
                break;

            case fieldNum(TaxTable, TaxType_IN):
                if (TaxParameters::checkTaxParameters_IN() && this.TaxType_IN != TaxType_IN::None && !this.TaxAccountGroup)
                {
                    this.TaxAccountGroup = 'Blank';
                }
                break;
            case fieldNum(TaxTable, CustomChargeType_RU):
                if (this.CustomChargeType_RU == CustomChargeType_RU::AdministrationExport || this.CustomChargeType_RU == CustomChargeType_RU::AdministrationImport)
                    this.TaxValueQty_RU = 1;
                if (this.TaxValueQty_RU <= 0 && this.CustomChargeType_RU != CustomChargeType_RU::None)
                    this.TaxValueQty_RU = 1;
                break;

            case fieldNum(TaxTable, TaxType_W):
                this.CustomChargeType_RU = CustomChargeType_RU::None;

                if (this.TaxType_W == TaxType_W::CustomDuty_RU)
                    this.CustomCombinedRate_RU = CustomCombinedRate_RU::Max;
                else
                    this.CustomCombinedRate_RU = CustomCombinedRate_RU::None;

                this.enableDataSourceFields();
                break;

            case fieldNum(TaxTable, TaxBase):
                if (!this.isTaxBaseByUnit())
                {
                    this.TaxIncludeInTax = NoYes::No;

                    if (!this.isTaxLimitBaseByUnit())
                    {
                        this.TaxUnit = '';
                        this.TaxPackagingTax = NoYes::No;
                        this.TaxValueQty_RU = 0;
                    }
                }
                if (!this.isTaxOnTaxAllowed())
                {
                    this.TaxOnTax = '';
                }
                if (!this.isReconcileAmountOriginAllowed())
                {
                    this.ReconcileAmountOrigin = NoYes::No;
                }

                if (this.TaxBase != TaxBaseType::PctPerGross)
                {
                    this.TaxAllowLineDiscountOnTaxPerUnit = NoYes::No;
                }
                break;

            case fieldNum(TaxTable, TaxLimitBase):
                if (!this.isTaxLimitBaseByUnit() &&
                    !this.isTaxBaseByUnit())
                {
                    this.TaxUnit = '';
                    this.TaxPackagingTax = NoYes::No;
                    this.TaxValueQty_RU = 0;
                }
                if (!this.isReconcileAmountOriginAllowed())
                {
                    this.ReconcileAmountOrigin = NoYes::No;
                }
                break;
            case fieldNum(TaxTable, TaxType_TH) :
                if (this.TaxType_TH == TaxType_TH::AverageRealized)
                {
                    this.PaymentTaxCode = this.TaxCode;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        boolean             isVirtual;
        DataArea            company;
        TaxTable            originalTaxTable;
        LedgerJournalTrans  ledgerJournalTrans;
        VirtualDataAreaList virtualCompanies;
        container           concreteCompanies;
        int                 concreteCompanyCount;
        CompanyId           outerCompany;
        int                 innerLoopCounter;
        CompanyId           innerCompany;
        ;

        // Capture the renamed record
        originalTaxTable = this.orig();

        super();

        select firstonly company where company.Id == this.DataAreaId;
        isVirtual = company.IsVirtual;

        if (isVirtual)
        {
            // Sales tax code is in a virtual company

            // Capture the concrete companies that are part of the sales tax code's virtual company
            while select Id from virtualCompanies where virtualCompanies.VirtualDataArea == this.DataAreaId
            {
                concreteCompanies += virtualCompanies.Id;
            }

            concreteCompanyCount = conLen(concreteCompanies);

            // Intercompany is enabled - need to loop over all concrete companies
            while select Id from company
                where company.IsVirtual == false
            {
                outerCompany = company.Id;

                // Update related records for each concrete company
                changecompany(outerCompany)
                {
                    // Reset the ledgerJournalTrans
                    ledgerJournalTrans = null;
                    ledgerJournalTrans.skipDataMethods(true);

                    // Loop over concrete companies in the virtual company
                    for (innerLoopCounter = 1; innerLoopCounter <= concreteCompanyCount; innerLoopCounter++)
                    {
                        innerCompany = conPeek(concreteCompanies, innerLoopCounter);

                        // Update records with this sales tax code as primary account
                        update_recordset ledgerJournalTrans
                            setting TaxCode = this.TaxCode
                        where ledgerJournalTrans.Company == innerCompany &&
                            ledgerJournalTrans.TaxCode == originalTaxTable.TaxCode;
                    }
                }
            }
        }
        else
        {
            // Customer posting profile that is being updated is not in a virtual company
            // If intercompany is enabled, must update the intercompany transactions for all other companies
            if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
            {
                while select Id from company
                    where company.IsVirtual == false
                {
                    outerCompany = company.Id;

                    // Update related records for each concrete company
                    changecompany(outerCompany)
                    {
                        // Reset the ledgerJournalTrans
                        ledgerJournalTrans = null;
                        ledgerJournalTrans.skipDataMethods(true);

                        // Update records with this sales tax code as primary account
                        update_recordset ledgerJournalTrans
                            setting TaxCode = this.TaxCode
                        where ledgerJournalTrans.Company == originalTaxTable.DataAreaId &&
                            ledgerJournalTrans.TaxCode == originalTaxTable.TaxCode;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundedOffTax</Name>
				<Source><![CDATA[
    TaxAmount   roundedOffTax(TaxAmount _taxAmount, boolean _round = true)
    {
        if (!_taxAmount)
            return 0;

        if (!_round)
            return _taxAmount;

        return CurrencyExchange::roundWithRule(
            _taxAmount,
            this.TaxRoundOff,
            this.TaxRoundOffType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxValue</Name>
				<Source><![CDATA[
    display TaxValue showTaxValue()
    {
        TaxValue  taxValue;
        TaxParameters   taxParameters;

        taxValue  = TaxData::percent(this.TaxCode,
                                     DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                     0);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            taxParameters = TaxParameters::find();

            if ((taxParameters.Customs_IN
                    || taxParameters.SalesTax_IN
                    || taxParameters.Excise_IN)
                &&
                    (TaxTable::find(this.TaxCode).TaxType_IN    == TaxType_IN::Customs
                    || TaxTable::find(this.TaxCode).TaxType_IN  == TaxType_IN::SalesTax
                    || TaxTable::find(this.TaxCode).TaxType_IN  == TaxType_IN::Excise))
            {
                taxValue = TaxData::percentValue_IN(this.TaxCode,
                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                    0);
            }
        }
        return taxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitCalculate</Name>
				<Source><![CDATA[
    boolean splitCalculate()
    {
        return (this.TaxCalcMethod      == TaxCalcMode::Interval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIntegrated_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// display method for tax integration profile that contain sales tax code.
    /// </summary>
    /// <returns>
    /// return true if record found.
    /// </returns>
    /// <remarks>
    /// This is used by form "TaxTable"
    /// </remarks>
    display TaxIntegrated_CN taxIntegrated_CN()
    {
        if (CustParameters::find().TaxIntegrationSystem_CN == NoYes::Yes)
        {
            return TaxProfileTable_CN::existByTaxCode(this.TaxCode);
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolTipField</Name>
				<Source><![CDATA[
    public str toolTipField(FieldId _fieldId)
    {
        str              ret;
        SysDictField     sysDictField;
        Common           common;
        TaxReportField   taxReportField;
        TaxReportLayout  taxReportLayout;
        ;
        sysDictField = new SysDictField(tableNum(TaxTable), _fieldId);
        if (sysDictField &&
            sysDictField.typeId() == extendedTypeNum(TaxReportField))
        {
            common = this.data();
            taxReportField = common.(_fieldId);
            taxReportLayout = TaxAuthorityAddress::find(TaxPeriodHead::find(this.TaxPeriod).TaxAuthority).TaxReportLayout;
            ret = TaxReportCollection::findByReportFieldLayout(taxReportField, taxReportLayout).toolTipRecord();
        }
        else
        {
            ret = super(_fieldId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TaxTable    orig;
        ttsbegin;

        orig = this.orig();

        if (orig.TaxJurisdictionCode &&
            orig.TaxJurisdictionCode != this.TaxJurisdictionCode)
        {
            this.deleteTaxGroupData();
        }

        super();

        if (this.TaxJurisdictionCode &&
            orig.TaxJurisdictionCode != this.TaxJurisdictionCode)
        {
            this.insertTaxGroupData();
        }

        if (orig.TaxBase != this.TaxBase
            || orig.TaxAllowLineDiscountOnTaxPerUnit != this.TaxAllowLineDiscountOnTaxPerUnit)
        {
            TaxCache::clearScope(TaxCacheScope::TaxPerUnitAndGrossDisc);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEInvoiceTaxType_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>TaxType_MX</c> field has a value.
    /// </summary>
    /// <returns>
    /// false if the <c>TaxType_MX</c> field value is blank; otherwise, true.
    /// </returns>
    public boolean validateEInvoiceTaxType_MX()
    {
        boolean ok = true;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]) && this.TaxType_MX == TaxType_MX::Blank)
        {
            ok  = checkFailed(strFmt("@SYS136411",fieldId2pname(tableNum(TaxTable),fieldNum(TaxTable,TaxType_MX))));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret;
        TaxData taxData;
        TaxReportLayout taxReportLayout;

        TaxTable                 taxTable;
        boolean                  taxParametersLoc = TaxParameters::checkTaxParameters_IN();
        TaxComponentTable_IN     taxComponentTable;
        TaxLedgerAccountGroup_IN taxLedgerAccountGroup;

        ret = super(p1);

        if (ret)
        {
            taxReportLayout = TaxAuthorityAddress::find(TaxPeriodHead::find(this.TaxPeriod).TaxAuthority).TaxReportLayout;

            switch (p1)
            {
                case fieldNum(TaxTable, NegativeTax):
                    if (!this.NegativeTax)
                    {
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                        {
                            select firstonly TaxValue, ConcessionalValue_IN, PreferentialValue_IN
                                from taxData where this.TaxCode == taxData.TaxCode;
                        }
                        else
                        {
                        select firstonly TaxValue from taxData where this.TaxCode == taxData.TaxCode;
                        }
                        if (taxData.TaxValue < 0)
                            ret = checkFailed("@SYS55196");

                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                            && taxParametersLoc)
                        {
                            if (taxData.ConcessionalValue_IN < 0)
                            {
                                ret = checkFailed("@GLS5501");
                            }
                            if (taxData.PreferentialValue_IN < 0)
                            {
                                ret = checkFailed("@GLS5332");
                            }
                        }
                    }
                    break;

                case fieldNum(TaxTable, RepFieldBaseOutgoing):
                    if (this.RepFieldBaseOutgoing &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldBaseOutgoing, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldBaseOutgoing, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldTaxFreeSales):
                    if (this.RepFieldTaxFreeSales &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldTaxFreeSales, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldTaxFreeSales, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldTaxOutgoing):
                    if (this.RepFieldTaxOutgoing &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldTaxOutgoing, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldTaxOutgoing, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldBaseIncoming):
                    if (this.RepFieldBaseIncoming &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldBaseIncoming, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldBaseIncoming, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldTaxFreeBuy):
                    if (this.RepFieldTaxFreeBuy &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldTaxFreeBuy, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldTaxFreeBuy, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldTaxIncoming):
                    if (this.RepFieldTaxIncoming &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldTaxIncoming, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldTaxIncoming, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldBaseUseTax):
                    if (this.RepFieldBaseUseTax &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldBaseUseTax, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldBaseUseTax, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldBaseUseTaxOffset):
                    if (this.RepFieldBaseUseTaxOffset &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldBaseUseTaxOffset, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldBaseUseTaxOffset, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldUseTax):
                    if (this.RepFieldUseTax &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldUseTax, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldUseTax, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldUseTaxOffset):
                    if (this.RepFieldUseTaxOffset &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldUseTaxOffset, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldUseTaxOffset, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldBaseOutgoingCreditNote):
                    if (this.RepFieldBaseOutgoingCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldBaseOutgoingCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldBaseOutgoingCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldTaxFreeSalesCreditNote):
                    if (this.RepFieldTaxFreeSalesCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldTaxFreeSalesCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldTaxFreeSalesCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldTaxOutgoingCreditNote):
                    if (this.RepFieldTaxOutgoingCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldTaxOutgoingCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldTaxOutgoingCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldBaseIncomingCreditNote):
                    if (this.RepFieldBaseIncomingCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldBaseIncomingCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldBaseIncomingCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldTaxFreeBuyCreditNote) :
                    if (this.RepFieldTaxFreeBuyCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldTaxFreeBuyCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldTaxFreeBuyCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldTaxIncomingCreditNote):
                    if (this.RepFieldTaxIncomingCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldTaxIncomingCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldTaxIncomingCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldBaseUseTaxCreditNote):
                    if (this.RepFieldBaseUseTaxCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldBaseUseTaxCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldBaseUseTaxCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldBaseUseTaxOffsetCreditNote):
                    if (this.RepFieldBaseUseTaxOffsetCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldBaseUseTaxOffsetCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldBaseUseTaxOffsetCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldUseTaxCreditNote):
                    if (this.RepFieldUseTaxCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldUseTaxCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldUseTaxCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, RepFieldUseTaxOffsetCreditNote):
                    if (this.RepFieldUseTaxOffsetCreditNote &&
                        ! TaxReportCollection::findByReportFieldLayout(this.RepFieldUseTaxOffsetCreditNote, taxReportLayout))
                        ret = checkFailed(strFmt("@SYS78854",this.RepFieldUseTaxOffsetCreditNote, taxReportLayout));
                    break;

                case fieldNum(TaxTable, TaxType_MX):
                    ret = this.validateEInvoiceTaxType_MX();
                    break;

                case fieldNum(TaxTable, TaxPeriod), fieldNum(TaxTable, TaxType_W) :
                    if ((this.TaxType_W == TaxType_W::VAT        ||
                         this.TaxType_W == TaxType_W::VATReduced ||
                         this.TaxType_W == TaxType_W::VATZero) &&
                        SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
                        this.TaxPeriod != '')
                    {
                        select firstonly RecId from taxTable
                            where taxTable.RecId     != this.RecId     &&
                                  taxTable.TaxPeriod != this.TaxPeriod &&
                                  (taxTable.TaxType_W == TaxType_W::VAT        ||
                                   taxTable.TaxType_W == TaxType_W::VATReduced ||
                                   taxTable.TaxType_W == TaxType_W::VATZero);

                        if (taxTable.RecId)
                        {
                            ret = checkFailed("@GLS104862");
                        }
                    }
                    break;

                case fieldNum(TaxTable, DomesticMarketTaxCode_RU) :
                    if (this.DomesticMarketTaxCode_RU  != '' )
                    {
                        if (this.TaxType_W != TaxType_W::VATZero)
                        {
                            ret = checkFailed(strFmt("@GLS112971", TaxType_W::VATZero));
                        }
                        taxTable = TaxTable::find(this.DomesticMarketTaxCode_RU);
                        if (!(taxTable.TaxType_W == TaxType_W::VAT ||
                             taxTable.TaxType_W == TaxType_W::VATReduced))
                        {
                            ret = checkFailed(strFmt("@GLS115422", taxTable.TaxType_W)) ;
                        }
                    }
                    break;

                case fieldNum(TaxTable, TaxValueQty_RU) :
                    ret = this.checkTaxValueQty_RU();
                    break;

                case fieldNum(TaxTable, TaxBase):
                    if (taxParametersLoc && this.TaxType_IN != TaxType_IN::None)
                    {
                        if (this.TaxBase    == TaxBaseType::PctPerGross    ||
                            this.TaxBase    == TaxBaseType::PctGrosOnNet   ||
                            this.TaxBase    == TaxBaseType::PctPerTax
                           )
                        {
                            ret = checkFailed(strFmt("@GLS5134", this.TaxBase, "@SYS38159"));
                        }
                    }
                    break;

                case fieldNum(TaxTable, TaxType_IN):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                    {
                        if (taxParametersLoc && this.TaxType_IN != TaxType_IN::None)
                        {
                            ret = TaxParameters::checkParameter_IN(this.TaxType_IN);
                        }
                        if (taxParametersLoc && this.TaxType_IN != TaxType_IN::None  && this.TaxAccountGroup && this.TaxAccountGroup != 'Blank')
                        {
                            info (strFmt("@GLS6645", this.TaxAccountGroup, this.TaxCode));
                        }
                    }
                    break;

                case fieldNum(TaxTable, TaxComponentTable_IN):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                        && (taxParametersLoc && this.TaxComponentTable_IN))
                    {
                        taxComponentTable = TaxComponentTable_IN::find(this.TaxComponentTable_IN);
                        if (!TaxComponentTable_IN::exist(this.TaxType_IN, taxComponentTable.Component))
                        {
                            ret = checkFailed(strFmt("@GLS5073", taxComponentTable.Component, this.TaxType_IN));
                        }
                    }
                    break;

                case fieldNum(TaxTable, TaxLedgerAccountGroup_IN) :
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                        && (taxParametersLoc && this.TaxLedgerAccountGroup_IN))
                    {
                        taxLedgerAccountGroup = TaxLedgerAccountGroup_IN::find(this.TaxLedgerAccountGroup_IN);
                        if (!TaxLedgerAccountGroup_IN::checkTaxAccountGroup(taxLedgerAccountGroup.TaxAccountGroup, this.TaxType_IN))
                        {
                            ret = checkFailed(strFmt("@GLS5074", taxLedgerAccountGroup.TaxAccountGroup, this.TaxType_IN));
                        }
                    }
                    break;

                //<GMY>
                case fieldNum(TaxTable, RepFieldBaseIncomingDebitNote_MY):
                    ret = this.checkTaxReportCollection_MY(this.RepFieldBaseIncomingDebitNote_MY, taxReportLayout);
                    break;

                case fieldNum(TaxTable, RepFieldBaseOutgoingDebitNote_MY):
                    ret = this.checkTaxReportCollection_MY(this.RepFieldBaseOutgoingDebitNote_MY, taxReportLayout);
                    break;

                case fieldNum(TaxTable, RepFieldTaxFreeBuyDebitNote_MY):
                    ret = this.checkTaxReportCollection_MY(this.RepFieldTaxFreeBuyDebitNote_MY, taxReportLayout);
                    break;

                case fieldNum(TaxTable, RepFieldTaxFreeSalesDebitNote_MY):
                    ret = this.checkTaxReportCollection_MY(this.RepFieldTaxFreeSalesDebitNote_MY, taxReportLayout);
                    break;

                case fieldNum(TaxTable, RepFieldTaxIncomingDebitNote_MY):
                    ret = this.checkTaxReportCollection_MY(this.RepFieldTaxIncomingDebitNote_MY, taxReportLayout);
                    break;

                case fieldNum(TaxTable, RepFieldTaxOutgoingDebitNote_MY):
                    ret = this.checkTaxReportCollection_MY(this.RepFieldTaxOutgoingDebitNote_MY, taxReportLayout);
                    break;
                //</GMY>

               case fieldNum(TaxTable, TaxType_BR):
                   if (this.TaxType_BR == TaxType_BR::INSSCPRB)
                   {
                       ret = checkFailed(strFmt("@SpedReinf_AS:TaxTypeIsNotApplicableForManualSelection", this.TaxType_BR));
                       this.TaxType_BR = this.orig().TaxType_BR;
                   }
                   break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the <c>TaxVATType_TH</c> field is a validated value.
    /// </summary>
    /// <returns>
    ///     Returns false in the following cases:
    ///     1) The PaymentTaxCode value is not the same as TaxCode when the sales tax is specified as Realized.
    ///     2) The PaymentTaxCode value is empty when the sales tax is specified as Unrealized.
    /// </returns>
    private boolean validateTaxType()
    {
        boolean     ret = true;

        if (this.TaxType_TH == TaxType_TH::AverageUnrealized)
        {
            if (!this.PaymentTaxCode)
            {
                // The payment sales tax code must be filled in when Tax type is Average unrealized.
                ret = checkFailed("@SYS4082515");
            }

            if (this.PaymentTaxCode == this.TaxCode)
            {
                // The payment sales tax code cannot be the same as sales tax code when Tax type is Average unrealized.
                ret = checkFailed("@SYS4082516");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite()
    {
        boolean  ok;

        ok = super();

        if (ok && this.TaxType_W == TaxType_W::CustomCharge_RU)
        {
            ok = this.checkChargeType_RU();
        }
        if (ok)
        {
            ok = this.checkDataConsistency();
        }

        if (ok
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            ok = this.validateEInvoiceTaxType_MX();
        }

        if (ok
            && TaxThaiGovCertificationFeatureChecker::isAverageVATEnabled())
        {
            ok = this.validateTaxType();
            ok = ok && this.canTaxTypeChanged();
        }

        if (BrazilParameters::isEnabled())
        {
            if (this.TaxType_BR == TaxType_BR::Blank)
            {
                ok = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(TaxTable),fieldNum(TaxTable,TaxType_BR))));
            }
            else if (this.TaxType_BR == TaxType_BR::ICMSST
                        && this.TaxSubstitution_BR == TaxSubstitutionEnum_BR::None)
            {
                ok = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(TaxTable),fieldNum(TaxTable,TaxSubstitution_BR))));
            }

            if (this.TaxationCodeTable_BR
                    && !TaxationCodeTable_BR::asOf(this.TaxationCodeTable_BR))
            {
                ok = checkFailed(strFmt("@GLS63485", TaxationCodeTable_BR::findRecId(this.TaxationCodeTable_BR).TaxationCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
            }
        }

        ok = ok && this.checkTaxValueQty_RU();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (this.TaxType_IN == TaxType_IN::None)
            {
                if (this.TaxAccountGroup == '')
                {
                    ok = checkFailed(strFmt("@SYS26332", "@SYS59367"));
                }
            }
            else
            {
                if (TaxParameters::checkTaxParameters_IN())
                {
                    if (this.TaxLedgerAccountGroup_IN == 0)
                    {
                        ok = checkFailed(strFmt("@SYS26332", "@GLS5094"));
                    }
                    if (this.TaxComponentTable_IN == 0)
                    {
                        ok = checkFailed(strFmt("@SYS26332", "@GLS5042"));
                    }

                    ok = ok && TaxParameters::checkParameter_IN(this.TaxType_IN);
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxInCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax in cost price.
    /// </summary>
    /// <param name="_taxAmount">
    /// The tax amount.
    /// </param>
    /// <param name="_taxType">
    /// The India tax type.
    /// </param>
    /// <param name="_compositeSchemeEnabled">
    /// The composite scheme status.
    /// </param>
    /// <param name="_loadOnInventoryPercent">
    /// The load on inventory percentage.
    /// </param>
    /// <param name="_nonRecPercent">
    /// The nonrecoverable percentage for India VAT.
    /// </param>
    /// <returns>
    /// The tax in cost price.
    /// </returns>
    public static TaxAmount calcTaxInCostPrice(
        TaxAmount   _taxAmount,
        TaxType_IN  _taxType,
        NoYes       _compositeSchemeEnabled,
        Percent     _loadOnInventoryPercent,
        Percent     _nonRecPercent)
    {
        TaxAmount   loiAmount;
        TaxAmount   nonRecoverableAmount;
        TaxAmount   taxInCostPrice;

        if (_compositeSchemeEnabled
            && _taxType == TaxType_IN::VAT)
        {
            taxInCostPrice = _taxAmount;
        }
        else
        {
            if (_loadOnInventoryPercent
                && _taxType != TaxType_IN::None)
            {
                loiAmount = _taxAmount * _loadOnInventoryPercent / 100;
            }

            if (_nonRecPercent
                && _taxType == TaxType_IN::VAT)
            {
                nonRecoverableAmount = (_taxAmount - loiAmount) * _nonRecPercent / 100;
            }
            taxInCostPrice = loiAmount + nonRecoverableAmount;
        }

        return taxInCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculationBase</Name>
				<Source><![CDATA[
    static TaxBaseType      calculationBase(TaxCode  _taxCode)
    {
        return TaxTable::find(_taxCode).TaxBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(TaxCode  _taxCode)
    {
        if (_taxCode  && !TaxTable::exist(_taxCode))
            return checkFailed(strFmt(TaxTable::txtNotExist(),_taxCode));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(TaxCode  _taxCode)
    {
        if (_taxCode)
        return (select taxTable
                    where taxTable.TaxCode   == _taxCode
               ).RecId != 0;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static TaxTable  find(TaxCode  _taxCode)
    {
        TaxTable  taxTable;

        if (_taxCode)
        {
            select firstonly taxTable
                where taxTable.TaxCode   == _taxCode;
        }
        return taxTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountGroup</Name>
				<Source><![CDATA[
    static TaxAccountGroup findAccountGroup(TaxCode    _taxCode)
    {
        return TaxTable::find(_taxCode).TaxAccountGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustomCharge_RU</Name>
				<Source><![CDATA[
    static TaxTable findCustomCharge_RU(CustomChargeType_RU _customChargeType,
                                        boolean             _forupdate = false)
    {
        TaxTable taxTable;

        taxTable.selectForUpdate(_forupdate);

        select firstonly taxTable
            where taxTable.TaxType_W           == TaxType_W::CustomCharge_RU &&
                  taxTable.CustomChargeType_RU == _customChargeType;

        return taxTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record that matches the specified record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The record to select from the table.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether the record is to be selected for update.
    /// </param>
    /// <returns>
    /// The record that matches the specified <c>recId</c> value.
    /// </returns>
    static TaxTable findRecId(RecId     _recId,
                              boolean   update = false)
    {
        TaxTable  taxTable;
        ;

        taxTable.selectForUpdate(update);

        if (_recId)
        {
            select firstonly taxTable
                   where taxTable.RecId == _recId;
        }

        return taxTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxPeriod_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds tax period from tax table.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The tax period.
    /// </param>
    /// <param name="_taxComponentTableRecId">
    /// The tax component table RecId.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxTable</c> class.
    /// </returns>
    public static TaxTable findTaxPeriod_IN(
        TaxPeriod  _taxPeriod ,
        RefRecId   _taxComponentTableRecId)
    {
        TaxTable  taxTable;

        if (_taxPeriod)
        {
            select firstonly taxTable
                where taxTable.TaxPeriod         == _taxPeriod
                   && taxTable.TaxComponentTable_IN == _taxComponentTableRecId;
        }

        return taxTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsPercent_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method takes the sourceTableId and sourceRecId and returns the TaxValue or Preferential Value
    /// depending on whether the Customer/Vendor is marked preferential or not
    /// </summary>
    /// <param name="_salesPurchJournalLine">
    /// The instance of <c>SalesPurchJournalLine</c> table.
    /// </param>
    /// <param name="_taxData">
    /// The instance of <c>TaxData</c> table.
    /// </param>
    /// <returns>
    /// The tax value.
    /// </returns>
    public static TaxValue getCustomsPercent_IN(
        SalesPurchJournalLine _salesPurchJournalLine,
        TaxData _taxData)
    {
        TaxValue                            taxValue;
        LedgerJournalTrans                  ledgerJournalTrans;
        AccountNum                          accountNum;

        switch (_salesPurchJournalLine.SourceTableId)
        {
            case tableNum(PurchLine):
                if (VendTable::find(PurchTable::find(_salesPurchJournalLine.SourceId).OrderAccount).IsPreferential() == NoYes::Yes)
                {
                    taxValue = _taxData.PreferentialValue_IN;
                }
                else
                {
                    taxValue = _taxData.TaxValue;
                }
                break;

            case tableNum(VendInvoiceInfoLine):
                if (VendTable::find(VendInvoiceInfoLine::findRecId(_salesPurchJournalLine.SourceRecId).orderAccount()).IsPreferential() == NoYes::Yes)
                {
                    taxValue = _taxData.PreferentialValue_IN;
                }
                else
                {
                    taxValue = _taxData.TaxValue;
                }
                break;
            case tableNum(PurchReqLine):
                taxValue = _taxData.TaxValue;
                break;
            case tableNum(PurchRFQLine):

                if ((VendTable::find(PurchRFQVendLink::find(PurchRFQCaseLine::findRecId(PurchRFQLine::find(_salesPurchJournalLine.SourceId).rfqCaseLineRefRecId).rfqCaseId).VendAccount).IsPreferential() == NoYes::Yes))
                {
                    taxValue = _taxData.PreferentialValue_IN;
                }
                else
                {
                    taxValue = _taxData.TaxValue;
                }

                break;
            case tableNum(SalesLine):
                if (CustTable::find(SalesLine::findRecId(_salesPurchJournalLine.SourceRecId).CustAccount).isPreferential() == NoYes::Yes)
                {
                    taxValue = _taxData.PreferentialValue_IN;
                }
                else
                {
                    taxValue = _taxData.TaxValue;
                }
                break;
            case tableNum(CustInvoiceLine):
                if (CustTable::find(CustInvoiceTable::findRecId(CustInvoiceLine::find(_salesPurchJournalLine.SourceRecId).ParentRecId).OrderAccount).isPreferential() == NoYes::Yes)
                {
                    taxValue = _taxData.PreferentialValue_IN;
                }
                else
                {
                    taxValue = _taxData.TaxValue;
                }
                break;
            case tableNum(SalesQuotationLine):
                taxValue = _taxData.TaxValue;
                break;
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = LedgerJournalTrans::findRecId(_salesPurchJournalLine.SourceRecId, false);
                if ((ledgerJournalTrans.AccountType         == LedgerJournalACType::Vend    ||
                     ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Vend)   &&
                   !(ledgerJournalTrans.AccountType         == LedgerJournalACType::Vend    &&
                     ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Vend))
                {
                    accountNum = (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend) ? ledgerJournalTrans.parmAccount() : ledgerJournalTrans.parmOffsetAccount();
                    if (VendTable::find(accountNum).IsPreferential() == NoYes::Yes)
                    {
                        taxValue = _taxData.PreferentialValue_IN;
                    }
                    else
                    {
                        taxValue = _taxData.TaxValue;
                    }
                }
                else if ((ledgerJournalTrans.AccountType        == LedgerJournalACType::Cust    ||
                          ledgerJournalTrans.OffsetAccountType  == LedgerJournalACType::Cust)   &&
                        !(ledgerJournalTrans.AccountType        == LedgerJournalACType::Cust    &&
                          ledgerJournalTrans.OffsetAccountType  == LedgerJournalACType::Cust))
                {
                    accountNum = (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust) ? ledgerJournalTrans.parmAccount() : ledgerJournalTrans.parmOffsetAccount();
                    if (CustTable::find(accountNum).isPreferential() == NoYes::Yes)
                    {
                        taxValue = _taxData.PreferentialValue_IN;
                    }
                    else
                    {
                        taxValue = _taxData.TaxValue;
                    }
                }
                else if (ledgerJournalTrans.AccountType         == LedgerJournalACType::Ledger ||
                         ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Ledger)
                {
                    taxValue = _taxData.TaxValue;
                }
                else
                {
                    taxValue = 0;
                }
                break;

            case tableNum(ProjItemTrans):
                taxValue = _taxData.TaxValue;
                break;
            case tableNum(ProjCostTrans):
                taxValue = _taxData.TaxValue;
                break;
            case tableNum(ProjOnAccTrans):
                taxValue = _taxData.TaxValue;
                break;

            default:
                break;
        }

        return  taxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludeFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>ExcludeFromInvoice</c> field for the specified values.
    /// </summary>
    /// <param name="_taxGroup">
    /// A <c>TableGroup</c> value.
    /// </param>
    /// <param name="_taxItemGroup">
    /// A <c>TableItemGroup</c> value.
    /// </param>
    /// <returns>
    /// A <c>boolean</c>.
    /// </returns>
    public static boolean getExcludeFromInvoice(TaxGroup _taxGroup, TaxItemGroup _taxItemGroup)
    {
        TaxTable        taxTable;
        TaxGroupData    taxGroupData;
        TaxOnItem       taxOnItem;

        select firstonly ExcludeFromInvoice from taxTable
            where taxTable.ExcludeFromInvoice == NoYes::Yes
            exists join taxGroupData
                where taxGroupData.TaxCode == taxTable.TaxCode
                    && taxGroupData.TaxGroup == _taxGroup
            exists join taxOnItem
                where taxOnItem.TaxCode == taxGroupData.TaxCode
                    && taxOnItem.TaxItemGroup == _taxItemGroup;

        return taxTable.ExcludeFromInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWriteCodeVat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax print code for the specified sales tax group and item sales tax group.
    /// </summary>
    /// <param name="_taxGroup">
    /// A sales tax group.
    /// </param>
    /// <param name="_taxItemGroup">
    /// An item sales tax group.
    /// </param>
    /// <returns>
    /// A string that represents a tax print code.
    /// </returns>
    public static TaxWriteCode getTaxWriteCodeVat(TaxGroup _taxGroup, TaxItemGroup _taxItemGroup)
    {
        TaxWriteCode taxWriteCode;
        TaxGroupData taxGroupData;
        TaxOnItem    taxOnItem;
        TaxTable     taxTable;

        while select PrintCode from taxTable
            where taxTable.TaxType_W     == TaxType_W::VAT        ||
                  taxTable.TaxType_W     == TaxType_W::VATReduced ||
                  taxTable.TaxType_W     == TaxType_W::VATZero
        exists join taxGroupData
            where taxGroupData.TaxGroup  == _taxGroup     &&
                  taxGroupData.TaxCode   == taxTable.TaxCode
        exists join taxOnItem
            where taxOnItem.TaxItemGroup == _taxItemGroup &&
                  taxOnItem.TaxCode      == taxTable.TaxCode
        {
            taxWriteCode += taxWriteCode ? strFmt("@GLS107148", taxWriteCode, taxTable.PrintCode) : taxTable.PrintCode;
        }

        return taxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxAccountGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts tax account group data.
    /// </summary>
    public static void insertTaxAccountGroup_IN()
    {
        TaxLedgerAccountGroup   taxLedgerAccountGroupLoc;

        if (!TaxLedgerAccountGroup::find('Blank'))
        {
            ttsbegin;

            taxLedgerAccountGroupLoc.TaxAccountGroup    = 'Blank';
            taxLedgerAccountGroupLoc.Name               = SysLabel::labelId2String2("@GLS6646");
            taxLedgerAccountGroupLoc.insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNormalVAT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the specified tax code is Normal type.
    /// </summary>
    /// <param name="_taxCode">
    ///     Given tax code.
    /// </param>
    /// <returns>
    ///     Returns true if tax type is Normal. Otherwise, returns false.
    /// </returns>
    public static boolean isNormalVAT(TaxCode _taxCode)
    {
        boolean     ret;

        if (_taxCode)
        {
            ret = (TaxTable::find(_taxCode).TaxType_TH == TaxType_TH::Normal);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRealizedVAT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the specified tax code is realized VAT.
    /// </summary>
    /// <param name="_taxCode">
    ///     Given tax code
    /// </param>
    /// <returns>
    ///     Returns true if tax type is Normal and payment sales tax code is empty.
    ///     Returns true if tax type is average realized.
    ///     Otherwise, returns false.
    /// </returns>
    public static boolean isRealizedVAT(TaxCode _taxCode)
    {
        TaxTable    taxTable;
        boolean     ret;

        if (_taxCode)
        {
            taxTable = TaxTable::find(_taxCode);
            ret = ((taxTable.TaxType_TH == TaxType_TH::Normal
                && !taxTable.PaymentTaxCode)
                || taxTable.TaxType_TH == TaxType_TH::AverageRealized);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxVat_PL</Name>
				<Source><![CDATA[
    public static NoYesId isTaxVat_PL(TaxCode _taxCode)
    {
        TaxTable taxTable = TaxTable::find(_taxCode);

        return taxTable.TaxType_W == TaxType_W::VAT        ||
               taxTable.TaxType_W == TaxType_W::VATReduced ||
               taxTable.TaxType_W == TaxType_W::VATZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryWithTaxType_W</Name>
				<Source><![CDATA[
    internal static boolean isCountryWithTaxType_W()
    {
        return new VATDeclarationExportByTaxIdToggle().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitBase</Name>
				<Source><![CDATA[
    public static TaxBase limitBase(TaxCode  _taxCode)
    {
        return TaxTable::find(_taxCode).TaxLimitBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupExciseTaxCode_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup excise tax code.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <param name="_eccNumber">
    /// The ecc number.
    /// </param>
    public static void lookupExciseTaxCode_IN(
        FormControl _formControl,
        TaxType_IN  _taxType,
        RefRecId    _eccNumber)
    {
        SysTableLookup              sysTableLookup;
        Query                       query = new Query();
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildRange             queryBuildRange;
        boolean                     done, found;
        TaxLedgerAccountSetup_IN    taxLedgerAccountSetup, taxLedgerAccountSetupCopy;
        TaxLedgerAccountGroup_IN    taxLedgerAccountGroup;
        const int                   emptyEnumValue = 255;

        sysTableLookup          = SysTableLookup::newParameters(tableNum(TaxTable), _formControl);
        queryBuildDataSource    = query.addDataSource(tableNum(TaxTable));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(TaxTable, TaxType_IN));
        queryBuildRange.value(queryValue(emptyEnumValue));//Lookup shoud be empty if while loop is skipped

        if (_eccNumber)
        {
            while select RecId,AccountCode,TaxLedgerAccountGroup,TaxRegistrationNumberTable from taxLedgerAccountSetup
                where taxLedgerAccountSetup.AccountCode == TaxAccountCode_IN::Table
                   && taxLedgerAccountSetup.TaxRegistrationNumberTable == _eccNumber
            {
                taxLedgerAccountGroup = TaxLedgerAccountGroup_IN::find(taxLedgerAccountSetup.TaxLedgerAccountGroup);
                if (taxLedgerAccountGroup.TaxType == TaxTypeComponent_IN::Excise)
                {
                    if (!done)
                    {
                        queryBuildRange.value(queryValue(_taxType));
                    }
                    queryBuildRange = queryBuildDataSource.addRange(fieldNum(TaxTable, TaxLedgerAccountGroup_IN));
                    queryBuildRange.value(queryValue(taxLedgerAccountGroup.RecId));
                    done = true;
                }
            }

            if (!done)
            {
                while select AccountCode from taxLedgerAccountSetupCopy
                    where taxLedgerAccountSetupCopy.AccountCode == TaxAccountCode_IN::All
                {
                    taxLedgerAccountGroup = TaxLedgerAccountGroup_IN::find(taxLedgerAccountSetupCopy.TaxLedgerAccountGroup);
                    if (taxLedgerAccountGroup.TaxType == TaxTypeComponent_IN::Excise)
                    {
                        if (!found)
                        {
                            queryBuildRange.value(queryValue(_taxType));
                        }
                        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(TaxTable, TaxLedgerAccountGroup_IN));
                        queryBuildRange.value(queryValue(taxLedgerAccountGroup.RecId));
                        found = true;
                    }
                }
            }
        }

        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxCode));
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxName));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Builds a query using <paramref name="_taxType"/> and <paramref name="_fiscalValue"/> to show in <paramref name="_ctrl"/>.
    /// </summary>
    /// <param name="_ctrl">
    ///  A <c>FormStringControl</c> to show the lookup.
    /// </param>
    /// <param name="_taxType">
    ///  A <c>TaxType_BR</c> to build query.
    /// </param>
    /// <param name="_fiscalValue">
    /// A <c>TaxFiscalValue_BR</c> to build query.
    /// </param>
    static void lookupTaxCode_BR(FormStringControl      _ctrl,
                                        TaxType_BR             _taxType,
                                        TaxFiscalValue_BR      _fiscalValue = TaxFiscalValue_BR::Blank)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource, qbdsTaxationCode;
        QueryBuildRange         queryBuildRange;

        sysTableLookup = SysTableLookup::newParameters(tableNum(TaxTable), _ctrl);
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxCode));
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxName));
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxAccountGroup));

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(TaxTable));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(TaxTable, TaxType_BR));
        queryBuildRange.value(SysQuery::value(_taxType));

        if (_fiscalValue != TaxFiscalValue_BR::Blank)
        {
            qbdsTaxationCode = queryBuildDataSource.addDataSource(tableNum(TaxationCodeTable_BR));
            qbdsTaxationCode.relations(true);
            qbdsTaxationCode.addRange(fieldNum(TaxationCodeTable_BR, FiscalValue)).value(SysQuery::value(_fiscalValue));
        }

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxCode_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup tax code in tax table.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <param name="_component">
    /// Extra components of the reference.
    /// </param>
    public static void lookupTaxCode_IN(
        FormControl _formControl,
        TaxType_IN  _taxType,
        RefRecId    _component)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysTableLookup          = SysTableLookup::newParameters(tableNum(TaxTable), _formControl);
        queryBuildDataSource    = query.addDataSource(tableNum(TaxTable));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(TaxTable, TaxType_IN));
        queryBuildRange.value(queryValue(_taxType));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(TaxTable, TaxComponentTable_IN));
        queryBuildRange.value(queryValue(_component));
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxCode));
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxName));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxCode_RU</Name>
				<Source><![CDATA[
    static void lookupTaxCode_RU(FormStringControl      _ctrl,
                                        CustomChargeType_RU    _customChargeType)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysTableLookup = SysTableLookup::newParameters(tableNum(TaxTable), _ctrl);
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxCode));
        sysTableLookup.addLookupfield(fieldNum(TaxTable, TaxName));

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(TaxTable));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(TaxTable, CustomChargeType_RU));
        queryBuildRange.value(SysQuery::value(_customChargeType));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxTypeStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the custom lookup for the freight type
    /// </summary>
    /// <param name="_formControl">
    /// The control to display the lookup
    /// </param>
    /// <param name="_taxTypes">
    /// Container of tax types to be filtered
    /// </param>
    ///
    public static void lookupTaxTypeStr(FormControl _formControl, container _taxTypes = conNull())
    {
        SysTableLookup              sysTableLookup;
        SkipAOSValidationPermission skipValidationPermission = new SkipAOSValidationPermission();

        TmpLookupValues_BR          lookupValuesTmp;

        TaxType_BR taxType;
        int i;

        if (_taxTypes != conNull())
        {
            for (i = 1; i <= conLen(_taxTypes); i++)
            {
                taxType = conPeek(_taxTypes, i);

                lookupValuesTmp.Name    = enum2str(taxType);
                lookupValuesTmp.insert();
            }
        }

        skipValidationPermission.assert();
        sysTableLookup  = SysTableLookup::newParameters(tableNum(TmpLookupValues_BR), _formControl);
        sysTableLookup.addLookupfield(fieldNum(TmpLookupValues_BR, Name), true);

        sysTableLookup.parmTmpBuffer(lookupValuesTmp);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCode</Name>
				<Source><![CDATA[
    public static TaxWriteCode  printCode(TaxCode  _taxCode
    , TransDate _taxDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
    , TaxBase   _taxBase = 0
    )
    {
        TaxWriteCode taxWriteCode;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            taxWriteCode = TaxData::find(_taxCode, _taxDate, _taxBase).PrintCode;
        }

        if (!taxWriteCode)
        {
            taxWriteCode = TaxTable::find(_taxCode).PrintCode;
        }

        return taxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportField_DE</Name>
				<Source><![CDATA[
    public static TaxReportField reportField_DE(TaxCode _lastTaxCode, TaxDirection _taxDirection)
    {
        TaxTable        taxTable;
        TaxReportField  taxReportField;
        ;
        select firstonly RepFieldTaxIncoming, RepFieldBaseIncoming, RepFieldTaxOutgoing, RepFieldBaseOutgoing, RepFieldUseTax, RepFieldBaseUseTax, RepFieldTaxFreeBuy, RepFieldTaxFreeSales
        from taxTable where taxTable.TaxCode == _lastTaxCode;

        switch (_taxDirection)
        {
            case TaxDirection::IncomingTax          :
                if (taxTable.RepFieldTaxIncoming)
                    taxReportField = taxTable.RepFieldTaxIncoming;
                else
                    taxReportField = taxTable.RepFieldBaseIncoming;
                break;

            case TaxDirection::OutgoingTax          :
                if (taxTable.RepFieldTaxOutgoing)
                    taxReportField = taxTable.RepFieldTaxOutgoing;
                else
                    taxReportField = taxTable.RepFieldBaseOutgoing;
                break;

            case TaxDirection::UseTax               :
                if (taxTable.RepFieldUseTax)
                    taxReportField = taxTable.RepFieldUseTax;
                else
                    taxReportField = taxTable.RepFieldBaseUseTax;
                break;

            case TaxDirection::TaxExemptPurchase    :
                taxReportField = taxTable.RepFieldTaxFreeBuy;
                break;

            case TaxDirection::TaxExemptSales       :
                taxReportField = taxTable.RepFieldTaxFreeSales;
                break;
        }

        return taxReportField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxOnTax</Name>
				<Source><![CDATA[
    public static TaxCode taxOnTax(TaxCode  _taxCode)
    {
        return TaxTable::find(_taxCode).TaxOnTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriod</Name>
				<Source><![CDATA[
    public static TaxPeriod taxPeriod(TaxCode   _taxCode)
    {
        return TaxTable::find(_taxCode).TaxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTableLookup</Name>
				<Source><![CDATA[
    public static void taxTableLookup(Object    _ctrl,
                                             CompanyId  _company = curext()
                                             ,TaxType_BR _taxtype = TaxType_BR::Blank
                                             )
    {
        Args        args;
        FormRun     formRun;
        CompanyId   companyId = _company;

        if (! companyId)
        {
            companyId = curext();
        }
        else
        {
            if (! xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666", companyId));
            }
        }

        changecompany(companyId)
        {
            args = new Args();
            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                args.parmEnumType(enumNum(TaxType_BR));
                args.parmEnum(_taxtype);
            }
            // </GBR>
            args.name(formStr(TaxTableLookup));
            args.caller(_ctrl);
            formRun = classfactory.formRunClass(args);
            formRun.init();
            _ctrl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS21976";
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatCode_RU</Name>
				<Source><![CDATA[
    public static TaxCode vatCode_RU(TaxGroup       _taxGroup,
                                            TaxItemGroup   _taxItemGroup)
    {
        TaxTable        taxTable;
        TaxGroupData    taxGroup;
        TaxOnItem       taxItem;

        if (_taxGroup && _taxItemGroup)
        {
            select firstonly TaxCode from taxTable
                where taxTable.TaxType_W == TaxType_W::VAT        ||
                      taxTable.TaxType_W == TaxType_W::VATReduced ||
                      taxTable.TaxType_W == TaxType_W::VATZero
            exists join taxGroup
                where taxGroup.TaxGroup    == _taxGroup              &&
                      taxGroup.TaxCode     == taxTable.TaxCode
            exists join taxItem
                where taxItem.TaxItemGroup == _taxItemGroup          &&
                      taxItem.TaxCode      == taxTable.TaxCode;
        }
        return taxTable.TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnrealizedVAT_MX</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the specified tax code is unrealized VAT.
    /// </summary>
    /// <param name="_taxCode">
    ///     The given tax code
    /// </param>
    /// <returns>
    ///     Returns true if tax code is marked as unrealized tax. Otherwise, returns false.
    /// </returns>
    public static boolean isUnrealizedVAT_MX(TaxCode _taxCode)
    {
        TaxTable    taxTable;

        if (_taxCode)
        {
            select UnrealizedTax from taxTable where taxTable.TaxCode == _taxCode;
        }

        return taxTable.UnrealizedTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPennyDiffFromTaxBasePercentage_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the penny difference of recalculated base amount when TaxAmount != TaxBase * TaxPercentage.
    /// </summary>
    /// <param name = "_taxBaseAmount">The tax base amount.</param>
    /// <param name = "_taxPercentage">The tax percentage.</param>
    /// <param name = "_taxAmount">The tax amount.</param>
    /// <returns>The penny difference from the recalculated base amount.</returns>
    public static AmountMST calcPennyDiffFromTaxBasePercentage_BR(TaxBase _taxBaseAmount, TaxValue _taxPercentage, TaxAmount _taxAmount)
    {
        return TaxTable::calcPennyDiffFromTaxBasePercentageTaxCode_BR(_taxBaseAmount, _taxPercentage, _taxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPennyDiffFromTaxBasePercentageTaxCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the penny difference of recalculated base amount when TaxAmount != TaxBase * TaxPercentage.
    ///     Added tax code parameter for correct rounding.
    /// </summary>
    /// <param name = "_taxBaseAmount">The tax base amount.</param>
    /// <param name = "_taxPercentage">The tax percentage.</param>
    /// <param name = "_taxAmount">The tax amount.</param>
    /// <param name = "_taxCode">The tax code.</param>
    /// <returns>The penny difference from the recalculated base amount.</returns>
    public static AmountMST calcPennyDiffFromTaxBasePercentageTaxCode_BR(TaxBase _taxBaseAmount, TaxValue _taxPercentage, TaxAmount _taxAmount, TaxCode _taxCode = '')
    {
        if (_taxBaseAmount == 0 || _taxBaseAmount == _taxAmount || _taxPercentage == 0)
        {
            return 0;
        }
        
        CurrencyCode currencyCode   = CompanyInfoHelper::standardCurrency();
        Currency currency           = Currency::find(currencyCode);

        var roundingPrecision       = currency.RoundingPrecision ? currency.RoundingPrecision : 0.01;
        var taxPct                  = _taxPercentage / 100;
        var recalculatedBaseAmount  = _taxBaseAmount;

        TaxAmount calculatedTaxAmount = recalculatedBaseAmount * taxPct;

        if (_taxCode)
        {
            calculatedTaxAmount = TaxTable::find(_taxCode).roundedOffTax(calculatedTaxAmount);
        }
        else 
        {
            calculatedTaxAmount = decRound(calculatedTaxAmount, 2);
        }

        if (calculatedTaxAmount == _taxAmount)
        {
            return 0;
        }

        while (calculatedTaxAmount != _taxAmount)
        {
            if (calculatedTaxAmount > _taxAmount)
            {
                recalculatedBaseAmount -= roundingPrecision;
            }
            else
            {
                recalculatedBaseAmount += roundingPrecision;
            }

            calculatedTaxAmount = CurrencyExchange::round(recalculatedBaseAmount * taxPct, currencyCode);
        }

        return recalculatedBaseAmount - _taxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxMustMatchBaseAndPercentage_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if the <c>TaxType_BR</c> tax must match base amount * percentage
    /// </summary>
    /// <param name = "_taxType">The <c>TaxType_BR</c></param>
    /// <returns>True if matches is mandatory, otherwise false</returns>
    public static boolean TaxMustMatchBaseAndPercentage_BR(TaxType_BR _taxType)
    {
        switch (_taxType)
        {
            case TaxType_BR::ICMS : return true;

            default : return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item tax group for given the table buffer.
    /// </summary>
    /// <param name = "_salesPurchJournalLine">The map for a table buffer</param>
    /// <returns>The item tax group</returns>
    private TaxItemGroup getTaxItemGroup_IN(SalesPurchJournalLine _salesPurchJournalLine)
    {
        TaxItemGroup taxItemGroup;

        if (_salesPurchJournalLine.SourceTableId == tableNum(InventTransferLine))
        {
            taxItemGroup = InventTransferLine_IN::findByinventTransferLine(_salesPurchJournalLine.SourceRecId).TaxItemGroup;
        }
        else
        {
            taxItemGroup = _salesPurchJournalLine.TaxItemGroup;
        }

        return taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTaxTransWithReducedTaxType_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches <c>TaxTrans</c> table for corresponding records with Japanese Reduced Consumption Tax applied.
    /// </summary>
    /// <param name = "_record">Cursor to the source of <c>TaxTrans</c> records.</param>
    /// <returns>True if at least one of corresponding <c>Taxtrans</c> records has Reduced Consumption Tax applied to it, and False otherwise.</returns>
    public static boolean existTaxTransWithReducedTaxType_JP(Common _record)
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        select firstonly RecId from taxTrans
            where taxTrans.SourceRecId == _record.RecId
                && taxTrans.SourceTableId == _record.TableId
            exists join taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                    && taxTable.TaxType_JP == TaxType_JP::Reduced;
        return taxTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReconcileAmountOriginAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the user should be allowed to edit ReconcileAmountOrigin.
    /// </summary>
    /// <returns>true if ReconcileAmountOrigin is allowed to edit; otherwise false.</returns>
    internal boolean isReconcileAmountOriginAllowed()
    {
        return this.TaxBase == TaxBaseType::PctPerNet && this.TaxLimitBase == TaxLimitBase::InvoiceWithoutVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRoundDeductibleFirstApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the functionality RoundDeductibleFirst is applicable.
    /// </summary>
    /// <param name="_vatExemptPct">
    ///    The Non-deductible tax value on sales tax code.
    /// </param>
    /// <returns>true if the functionality RoundDeductibleFirst is applicable; otherwise false.</returns>
    internal boolean isRoundDeductibleFirstApplicable(TaxValue _vatExemptPct)
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
            && !TaxParameters::find().PurchTaxOnOperations
            && this.RoundDeductibleFirst
            && _vatExemptPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxInCostPriceWithRounding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates nondeductible tax amount with rounding rules.
    /// </summary>
    /// <param name="_taxAmount">
    ///    The tax amount.
    /// </param>
    /// <param name="_vatExemptPct">
    ///    The Non-deductible tax value on sales tax code.
    /// </param>
    /// <param name="_sourceCurrencyCode">
    ///    The transaction currency code.
    /// </param>
    /// <returns>The calculated nondeductible tax amount.</returns>
    internal TaxAmount calcTaxInCostPriceWithRounding(TaxAmount _taxAmount, TaxValue _vatExemptPct, CurrencyCode _sourceCurrencyCode)
    {
        TaxAmount taxInCostPrice;
        if (this.isRoundDeductibleFirstApplicable(_vatExemptPct))
        {
            AmountCur deductibleTaxAmount = _taxAmount * (1 - _vatExemptPct / 100);
            deductibleTaxAmount = TaxRoundingHelper::roundTaxAmountWithRule(deductibleTaxAmount, _sourceCurrencyCode, this);
            taxInCostPrice = _taxAmount - deductibleTaxAmount;
        }
        else
        {
            taxInCostPrice = _taxAmount * _vatExemptPct / 100;
        }

        return TaxRoundingHelper::roundTaxAmountWithRule(taxInCostPrice, _sourceCurrencyCode, this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126037</DeveloperDocumentation>
	<FormRef>TaxTable</FormRef>
	<Label>@SYS22350</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxCode</TitleField1>
	<TitleField2>TaxName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>TaxIdx</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<PrimaryIndex>TaxIdx</PrimaryIndex>
	<ReplacementKey>TaxIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustomsComponentTaxCodes_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustomsComponentTaxCodes_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ExceptionCodeTable_BR</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ExceptionCodeTable_BR</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxCollectLimit</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxCollectLimit</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxData</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxData</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxFiscalClassification_BR</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxFiscalClassification_BR</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxGroupData</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxGroupData</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxOnItem</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxOnItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>TaxTable</Relation>
			<Table>FBEconomicActivityCode_BR</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAccountGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCalcMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxLimitBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxOnTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AlandTax_FI</Name>
			<Label>@SYS97513</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBorderNumReq_FI</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsPractice_FI</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BrazilianTaxes</Name>
			<Label>@GLS66</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetainedTax_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludedTax_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSubstitution_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxationCodeTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevenueCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSubstitutionBaseRedCalcMode_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalculationParameters</Name>
			<Label>@SYS25887</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxLimitBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCalcMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxOnTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType_SG</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType_IT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusinessType_LV</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConditionalTax</Name>
			<Label>@SYS74689</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentTaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnrealizedTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomCharges_RU</Name>
			<Label>@GLS115053</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomChargeType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValueQty_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomDutes_RU</Name>
			<Label>@GLS114971</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomCombinedRate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomCalcMethod_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomUnitId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DIOT_MX</Name>
			<Label>@SYS312682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiotAddInfo_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Duty</Name>
			<Label>@SYS767</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPackagingTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxIncludeInTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EUSalesList</Name>
			<Label>@SYS17928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NotEUSalesList</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportVAT_RU</Name>
			<Label>@GLS112970</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DomesticMarketTaxCode_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATOperationCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATChargeSource_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoicing</Name>
			<Label>@SYS5779</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWriteSelection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxIntegrated_CN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExcludeFromInvoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Jurisdiction</Name>
			<Label>@SYS91175</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxJurisdictionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS13356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAccountGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NegativeSalesTaxPercentage</Name>
			<Label>@SYS54422</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NegativeTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackingDuty</Name>
			<Label>@SYS55167</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPackagingSort</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseDuty</Name>
			<Label>@SYS58675</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPurchaseTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportingCreditNote</Name>
			<Label>@SYS60688</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseUseTaxOffsetCreditNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxFreeSalesCreditNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxFreeBuyCreditNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldUseTaxOffsetCreditNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldUseTaxCreditNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseUseTaxCreditNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseIncomingCreditNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxIncomingCreditNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseOutgoingCreditNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxOutgoingCreditNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportingDebitNote_MY</Name>
			<Label>@SYP4882340</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseIncomingDebitNote_MY</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseOutgoingDebitNote_MY</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxFreeBuyDebitNote_MY</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxFreeSalesDebitNote_MY</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxIncomingDebitNote_MY</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxOutgoingDebitNote_MY</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoundOff</Name>
			<Label>@SYS8172</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRoundOffType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundDeductibleFirst</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SpecialReport</Name>
			<Label>@SYS10223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseOutgoing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxOutgoing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseIncoming</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxIncoming</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseUseTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldUseTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldUseTaxOffset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxFreeBuy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldTaxFreeSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCountryRegionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPurchaseTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepFieldBaseUseTaxOffset</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailSAFTStandardVATCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxAllowLineDiscountOnTaxPerUnit</Name>
			<Label>@TaxCoreTax:TaxAllowLineDiscountOnTaxPerUnit</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAllowLineDiscountOnTaxPerUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxLedgerPostingGroup_IN</Name>
			<Label>@SYS59367</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxLedgerAccountGroup_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxType_IN</Name>
			<Label>@SYS33553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxType_MX</Name>
			<Label>@SYS33553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxType_TH</Name>
			<Label>@SYS33553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxVatReportCategory_MX</Name>
			<Label>@SYS312386</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxVatReportCategory_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GST</Name>
			<Label>@SYP4860814</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsGST_MY</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailSAFT</Name>
			<Label>@SaftCashRegister:StandardCodeFieldName</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailSAFTStandardVATCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailReceipt</Name>
			<Label>@RetailPrintCode:Receipt</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailPrintCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxType_JP</Name>
			<Label>@SYS33553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Source</Name>
			<Label>@SYS11258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BusinessType_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LvBusinessType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomCalcMethod_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustomCalcMethod_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomChargeType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustomChargeType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomCombinedRate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustomCombinedRate_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustomsPractice_FI</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsPractice_FI</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomUnitId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DiotAddInfo_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiotAddInfo_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DomesticMarketTaxCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<Label>@GLS112968</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExcludeFromInvoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,HU</CountryRegionCodes>
			<ExtendedDataType>TaxExcludeFromInvoice</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludedTax_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<Label>@GLS67</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NegativeTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxNegativeTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NotEUSalesList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ForeignTrade</ConfigurationKey>
			<CountryRegionCodes>AT,BE,BG,CH,CY,CZ,DE,DK,EE,GR,ES,FI,FR,GB,HR,HU,IE,IT,LT,LU,LV,MT,NL,PL,PT,RO,SE,SI,SK</CountryRegionCodes>
			<Label>@SYS313148</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentTaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<HelpText>@Tax:PaymentSalesTaxCodeHelpText</HelpText>
			<Label>@SYS74836</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrintCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseIncoming</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS21915</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseIncomingCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS60675</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseIncomingDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYP4882341</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseOutgoing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS23351</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseOutgoingCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS60671</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseOutgoingDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYP4882343</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseUseTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS23353</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseUseTaxCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS60677</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseUseTaxOffset</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS65264</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseUseTaxOffsetCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS65266</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxFreeBuy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS23182</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxFreeBuyCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS60686</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxFreeBuyDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYP4882345</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxFreeSales</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS23183</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxFreeSalesCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS60684</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxFreeSalesDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYP4882348</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxIncoming</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS23180</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxIncomingCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS60672</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxIncomingDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYP4882350</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxOutgoing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS23181</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxOutgoingCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS60667</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldTaxOutgoingDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYP4882352</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldUseTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS23363</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldUseTaxCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS60679</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldUseTaxOffset</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS23365</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldUseTaxOffsetCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@SYS60681</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetainedTax_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<Label>@GLS69</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxAccountGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAccountGroup</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAllowLineDiscountOnTaxPerUnit</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxCoreTax:TaxAllowLineDiscountOnTaxPerUnitHelpText</HelpText>
			<Label>@TaxCoreTax:TaxAllowLineDiscountOnTaxPerUnit</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxationCodeTable_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS60378</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxBase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxBaseType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxBorderNumReq_FI</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBorderNumRequired_FI</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxCalcMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS21899</Label>
			<EnumType>TaxCalcMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5042</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxCountryRegionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<EnumType>CountryRegionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxIncludeInTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIncludeInTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxJurisdictionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxJurisdictionCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxLedgerAccountGroup_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5094</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxLimitBase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxLimitBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxOnTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<HelpText>@Tax:SalesTaxOnSalesTaxHelpText</HelpText>
			<Label>@SYS21912</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPackagingSort</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPackagingSort</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxPackagingTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPackagingTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPeriod</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxPurchaseTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPurchaseTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRoundOff</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxRoundOffType</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxRoundOffType</ExtendedDataType>
			<EnumType>RoundOffType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxSubstitution_BR</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxSubstitution_BR</ExtendedDataType>
			<EnumType>TaxSubstitutionEnum_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_BR</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TaxType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_JP</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TaxType_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TaxType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_IT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TaxType_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_MX</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TaxType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_SG</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TaxType_SG</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_TH</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TaxType_TH</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_W</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<FeatureClass>VATDeclarationExportByTaxIdToggle</FeatureClass>
			<EnumType>TaxType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<HelpText>@Tax:TaxUnitHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValueQty_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>TaxQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxVatReportCategory_MX</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS312382</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWriteSelection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWriteSelection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnrealizedTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS115509</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATChargeSource_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VATChargeSource_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATOperationCode_RU</Name>
			<ExtendedDataType>VATOperationCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxSubstitutionBaseRedCalcMode_BR</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TaxSubstitutionBaseRedCalculationMode_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsGST_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<Label>@SYP4860814</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseUseTaxDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@TaxGST:TaxableImportDebitNote</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldBaseUseTaxOffsetDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@TaxGST:OffsetTaxableImportDebitNote</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldUseTaxDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@TaxGST:SalesTaxImportDebitNote</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RepFieldUseTaxOffsetDebitNote_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<ExtendedDataType>TaxReportField</ExtendedDataType>
			<Label>@TaxGST:OffsetSalesTaxImportDebitNote</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailSAFTStandardVATCode</Name>
			<ExtendedDataType>RetailSAFTStandardVATCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailPrintCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPrintCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RevenueCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RevenueCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>TaxMasterDataSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReconcileAmountOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@Tax:ReconcileAmountOriginHelpText</HelpText>
			<Label>@Tax:ReconcileAmountOriginLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExcludeICMS_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<HelpText>@TaxCoreTax:ExcludeICMSHelpText</HelpText>
			<Label>@TaxCoreTax:ExcludeICMS</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExcludeISS_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<HelpText>@TaxCoreTax:ExcludeISSHelpText</HelpText>
			<Label>@TaxCoreTax:ExcludeISS</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundDeductibleFirst</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<HelpText>@TaxCoreTax:TaxRoundDeductibleFirstHelpText</HelpText>
			<Label>@TaxCoreTax:TaxRoundDeductibleFirst</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxJurisdictionCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>LedgerBasicSalesTaxJurisdictions</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxJurisdictionCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxVatReportCategory_MXIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxVatReportCategory_MX</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxComponentTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxComponentTable_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxLedgerAccountGroup_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxLedgerAccountGroup_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxationCodeTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxationCodeTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxCodeTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxType_IN</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TaxCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxationCodeTable_BR</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxationCodeTable_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxationCodeTable_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxationCodeTable_BR</Name>
					<Field>TaxationCodeTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5042</EntityRelationshipRole>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_TaxTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable_IN</Name>
					<Field>TaxComponentTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxJurisdiction</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxJurisdiction</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxJurisdictionCode</Name>
					<SourceEDT>TaxJurisdictionCode</SourceEDT>
					<Field>TaxJurisdictionCode</Field>
					<RelatedField>TaxJurisdictionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxJurisdictionCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxLedgerAccountGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxLedgerAccountGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxAccountGroup</Name>
					<SourceEDT>TaxAccountGroup</SourceEDT>
					<Field>TaxAccountGroup</Field>
					<RelatedField>TaxAccountGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxAccountGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxLedgerAccountGroup_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5094</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxLedgerAccountGroup_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxLedgerAccountGroup_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxLedgerAccountGroup_IN_TaxTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxLedgerAccountGroup_IN</Name>
					<Field>TaxLedgerAccountGroup_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxPeriodHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxPeriodHead</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<SourceEDT>TaxPeriod</SourceEDT>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxPeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseIncoming</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseIncoming</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseIncoming</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseIncoming</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseIncoming</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseIncomingCreditNo</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseIncomingCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseIncomingCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseIncomingCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseIncomingCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseIncomingDebit_MY</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseIncomingDebitNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseIncomingDebitNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseIncomingDebitNote_MY</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseIncomingDebitNote_MY</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseOutgoing</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseOutgoing</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseOutgoing</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseOutgoing</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseOutgoing</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseOutgoingCreditNo</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseOutgoingCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseOutgoingCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseOutgoingCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseOutgoingCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseOutgoingDebit_MY</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseOutgoingDebitNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseOutgoingDebitNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseOutgoingDebitNote_MY</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseOutgoingDebitNote_MY</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseUseTax</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseUseTax</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseUseTax</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseUseTax</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseUseTax</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseUseTaxCreditNote</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseUseTaxCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseUseTaxCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseUseTaxCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseUseTaxCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseUseTaxOffset</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseUseTaxOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseUseTaxOffset</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseUseTaxOffset</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseUseTaxOffset</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_BaseUseTaxOffsetCred</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldBaseUseTaxOffsetCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldBaseUseTaxOffsetCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldBaseUseTaxOffsetCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldBaseUseTaxOffsetCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxFreeBuy</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxFreeBuy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxFreeBuy</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxFreeBuy</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxFreeBuy</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxFreeBuyCreditNote</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxFreeBuyCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxFreeBuyCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxFreeBuyCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxFreeBuyCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxFreeBuyDebitN_MY</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxFreeBuyDebitNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxFreeBuyDebitNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxFreeBuyDebitNote_MY</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxFreeBuyDebitNote_MY</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxFreeSales</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxFreeSales</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxFreeSales</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxFreeSales</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxFreeSales</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxFreeSalesCreditNo</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxFreeSalesCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxFreeSalesCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxFreeSalesCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxFreeSalesCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxFreeSalesDebit_MY</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxFreeSalesDebitNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxFreeSalesDebitNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxFreeSalesDebitNote_MY</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxFreeSalesDebitNote_MY</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxIncoming</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxIncoming</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxIncoming</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxIncoming</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxIncoming</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxIncomingCreditNot</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxIncomingCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxIncomingCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxIncomingCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxIncomingCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxIncomingDebitN_MY</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxIncomingDebitNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxIncomingDebitNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxIncomingDebitNote_MY</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxIncomingDebitNote_MY</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxOutgoing</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxOutgoing</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxOutgoing</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxOutgoing</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxOutgoing</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxOutgoingCreditNot</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxOutgoingCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxOutgoingCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxOutgoingCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxOutgoingCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_TaxOutgoingDebitN_MY</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldTaxOutgoingDebitNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldTaxOutgoingDebitNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldTaxOutgoingDebitNote_MY</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldTaxOutgoingDebitNote_MY</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_UseTax</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldUseTax</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldUseTax</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldUseTax</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldUseTax</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_UseTaxCreditNote</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldUseTaxCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldUseTaxCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldUseTaxCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldUseTaxCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_UseTaxOffset</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldUseTaxOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldUseTaxOffset</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldUseTaxOffset</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldUseTaxOffset</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportCollection_UseTaxOffsetCreditNo</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxReportCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RepFieldUseTaxOffsetCreditNote</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RepFieldUseTaxOffsetCreditNote</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RepFieldUseTaxOffsetCreditNote</Name>
					<SourceEDT>TaxReportField</SourceEDT>
					<Field>RepFieldUseTaxOffsetCreditNote</Field>
					<RelatedField>TaxReportField</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable_DomesticMarketTaxCode_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTable_DomesticMarketTaxCode_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DomesticMarketTaxCode_RU</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>DomesticMarketTaxCode_RU</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable_PaymentTaxCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTable_PaymentTaxCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentTaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>PaymentTaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable_TaxOnTax</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTable_TaxOnTax</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxOnTax</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxOnTax</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxUnit</Name>
					<Field>TaxUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxVatReportCategory_MX</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxVatReportCategory_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxVatReportCategory_MX</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxVatReportCategory_MX_TaxTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxVatReportCategory_MX</Name>
					<Field>TaxVatReportCategory_MX</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VATOperationCodeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VATOperationCodeTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VATOperationCode_RU</Name>
					<SourceEDT>VATOperationCode_RU</SourceEDT>
					<Field>VATOperationCode_RU</Field>
					<RelatedField>OperationCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TmpAccountSum</Name>
			<RelatedTable>TmpAccountSum</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>