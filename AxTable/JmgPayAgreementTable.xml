<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayAgreementTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgPayAgreementTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies an entire pay agreement to a new pay agreement.
    /// </summary>
    /// <param name="toAgreement">
    /// The ID of the pay agreement to copy the pay agreement to.
    /// </param>
    /// <param name="doOverwrite">
    /// The <c>NoYes::Yes</c> enumeration value if the specified <c>toAgreement</c> is overridden;
    /// otherwise, the <c>NoYes::No</c> value.
    /// </param>
    public void copyAgreement(JmgPayAgreement toAgreement, NoYes doOverwrite)
    {
        JmgPayAgreementTable    jmgPayAgreementTable;
        JmgPayAgreementLine     jmgPayAgreementLine;
        JmgPayCountTable        jmgPayCountTable;
        Map                     newPayCountIds;
        recId                   payCountRecId;

        // Won't copy to itself.
        if (this.PayAgreement == toAgreement)
        {
            return;
        }

        ttsbegin;

        if (doOverwrite)
        {
            delete_from jmgPayAgreementTable where jmgPayAgreementTable.PayAgreement == toAgreement;
        }

        if ((select firstonly RecId from jmgPayAgreementTable
                 where jmgPayAgreementTable.PayAgreement == toAgreement).RecId)
        {
            ttsabort;
            return;
        }

        select jmgPayAgreementTable
            where jmgPayAgreementTable.RecId==this.RecId;
        jmgPayAgreementTable.PayAgreement = toAgreement;
        jmgPayAgreementTable.insert();

        if ((select firstonly RecId from jmgPayAgreementLine
                 where jmgPayAgreementLine.PayAgreement == toAgreement).RecId)
        {
            ttsabort;
            return;
        }

        newPayCountIds  = new Map(Types::Int64, Types::String);
        while select jmgPayAgreementLine
            order by PayCountId
            where jmgPayAgreementLine.PayAgreement == this.PayAgreement

        {
            payCountRecId = JmgPayCountTable::find(jmgPayAgreementLine.PayCountId).RecId;
            if (jmgPayAgreementLine.PayCountId && payCountRecId)
            {
                if (newPayCountIds.exists(payCountRecId))
                {
                    jmgPayAgreementLine.PayCountId  = newPayCountIds.lookup(payCountRecId);
                }
                else
                {
                    jmgPayCountTable = JmgPayCountTable::find(jmgPayAgreementLine.PayCountId);
                    jmgPayCountTable.PayCountId   = NumberSeq::newGetNum(JmgParameters::numRefPayCountId()).num();
                    jmgPayCountTable.PayAgreement = toAgreement;
                    jmgPayCountTable.insert();
                    newPayCountIds.insert(payCountRecId, jmgPayCountTable.PayCountId);
                    jmgPayAgreementLine.PayCountId  = jmgPayCountTable.PayCountId;
                }
            }
            jmgPayAgreementLine.PayAgreement = toAgreement;
            jmgPayAgreementLine.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>PayDeductToLateSeconds</c> field from the <c>JmgPayAgreementTable</c> record formatted as a description.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayDeductToLateSeconds</c> field formatted as a description.
    /// </returns>
    public display JmgDeductionDescription deductionDescription()
    {
        return strfmt("@SYS39571", JmgProfileSeconds::formattedSeconds(this.PayDeductToLateSeconds,JmgSecondPresentationEnum::Minuts));
    }

]]></Source>
			</Method>
			<Method>
				<Name>overTimeRoundEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>OverTimeRound</c> field of the <c>JmgPayAgreementTable</c> record.
    /// </summary>
    /// <param name="_set">
    /// true if the <c>OverTimeRound</c> field value must be updated; otherwise, false.
    /// </param>
    /// <param name="value">
    /// The new value of the <c>OverTimeRound</c> field.
    /// </param>
    /// <returns>
    /// the value of the <c>OverTimeRound</c> field, formatted as a string.
    /// </returns>
    public edit JmgLabelRound overTimeRoundEdit(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.OverTimeRound = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Centitime);
        }

        return JmgProfileSeconds::formattedSeconds(this.OverTimeRound,JmgSecondPresentationEnum::Centitime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payDeductToLate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PayDeductToLateSeconds</c> field of the <c>JmgPayAgreementTable</c> record.
    /// </summary>
    /// <param name="set">
    /// true if the <c>PayDeductToLateSeconds</c> field value must be updated; otherwise, false.
    /// </param>
    /// <param name="value">
    /// The new value of the <c>PayDeductToLateSeconds</c> field.
    /// </param>
    /// <returns>
    /// The value of the <c>PayDeductToLateSeconds</c> field, formatted as a string.
    /// </returns>
    public edit JmgLabelSecondsPayDeductToLate payDeductToLate(boolean set, JmgTimeString value)
    {
        if (set && value)
        {
            this.PayDeductToLateSeconds = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Minuts);
        }

        return JmgProfileSeconds::formattedSeconds(this.PayDeductToLateSeconds,JmgSecondPresentationEnum::Minuts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>OverTimeRound</c> field from the <c>JmgPayAgreementTable</c> record formatted as a description.
    /// </summary>
    /// <returns>
    /// the value of the <c>OverTimeRound</c> field formatted as a description.
    /// </returns>
    public display JmgRoundOffDescription roundOffDescription()
    {
        return strfmt("@SYS39572", JmgProfileSeconds::formattedSeconds(this.OverTimeRound),JmgParameters::find().SecondPresentation,this.OverTimeRoundType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specified pay agreement from the database.
    /// </summary>
    /// <param name="jmgPayAgreement">
    /// The ID of the pay agreement to search for.
    /// </param>
    /// <param name="_update">
    /// true if the returned record must be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>JmgPayAgreementTable</c> record for the specified pay agreement.
    /// </returns>
    static JmgPayAgreementTable find(JmgPayAgreement jmgPayAgreement, boolean _update = false)
    {
        JmgPayAgreementTable jmgPayAgreementTable;

        jmgPayAgreementTable.selectForUpdate(_update);

        select firstonly jmgPayAgreementTable
            where jmgPayAgreementTable.PayAgreement == jmgPayAgreement;

        return jmgPayAgreementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgPayroll</ConfigurationKey>
	<DeveloperDocumentation>@SYS317270</DeveloperDocumentation>
	<FormRef>JmgPayAgreementTable</FormRef>
	<Label>@SYS38550</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PayAgreement</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>AgreementIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>AgreementIdx</PrimaryIndex>
	<ReplacementKey>AgreementIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgEmployee</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>JmgEmployee</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgPayAdjustSetup</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>JmgPayAdjustSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgPayAgreementLine</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>JmgPayAgreementLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgPayCountTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgPayCountTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayAgreement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayDeductToLateSeconds</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayAgreement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeductPayWhenLate</Name>
			<Label>@SYS38601</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayDeductToLateSeconds</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayAgreement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoundOff</Name>
			<Label>@SYS8172</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverTimeRoundType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverTimeRound</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoundOffOvertime</Name>
			<Label>@SYS39437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverTimeRoundType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverTimeRound</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OverTimeRound</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS8172</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverTimeRoundType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgRoundType</ExtendedDataType>
			<EnumType>JmgRoundTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayAgreement</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayAgreement</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayDeductToLateSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS24560</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AgreementIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PayAgreement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>