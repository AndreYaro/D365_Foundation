<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResAttributeType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResAttributeType extends common
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        EcoResEnumerationAttributeTypeValue    enumAttributeTypeValue;
        EcoResBoundedAttributeTypeValue        bounds;        

        _visitor.visitStart(this);

        if (this.IsEnumeration)
        {
            while select enumAttributeTypeValue
            order by enumAttributeTypeValue.OrdinalNumber
            where   enumAttributeTypeValue.AttributeType == this.RecId
            {
                enumAttributeTypeValue.accept(_visitor);
            }
        }
        else
        {
            if (AttributeDataTypeDiscriminator::checkAttributeDataTypeInteger(this.DataType))
            {
                select firstonly bounds
                where bounds.AttributeType == this.RecId;

                if (bounds.RecId != 0)
                {
                    bounds.accept(_visitor);
                }
            }
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecoRes2PC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an <c>AttributeDataType</c> value to the corresponding <c>PCAttributeType</c> value.
    /// </summary>
    /// <param name="_type">
    /// An <c>AttributeDataType</c> value to convert.
    /// </param>
    /// <param name="_isEnumeration">
    /// Whether or not the passed attribute type is an enumeration.
    /// </param>
    /// <param name="_hasBounds">
    /// Whether or not the passed attribute type is in a range or boundless (only relevant for integers).
    /// </param>
    /// <returns>
    /// A corresponding <c>PCAttributeType</c> value.
    /// </returns>
    protected PCAttributeType ecoRes2PC(AttributeDataType _type, NoYes _isEnumeration, NoYes _hasBounds)
    {
        PCAttributeType ret;

        switch (_type)
        {
            case AttributeDataType::Integer:
                ret = _isEnumeration ? PCAttributeType::IntegerSet :
                                       (_hasBounds ? PCAttributeType::IntegerRangeBound :
                                                     PCAttributeType::Integer);
                break;
            case AttributeDataType::TrueFalse:
                ret = PCAttributeType::Boolean;
                break;
            case AttributeDataType::Text:
                ret = _isEnumeration ? PCAttributeType::Enum : PCAttributeType::Text;
                break;
            case AttributeDataType::Decimal:
                ret = PCAttributeType::Decimal;
                break;
            case AttributeDataType::Currency:
                // Fall through
            case AttributeDataType::DateTime:
                throw error(Error::wrongUseOfFunction(funcName()));
            default:
                ret = PCAttributeType::Integer;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProductConfigurationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets a <c>PCAttributeType</c> value.
    /// </summary>
    /// <param name="_set">
    /// true if the attribute type is set; otherwise, false.
    /// </param>
    /// <param name="_type">
    /// A <c>PCAttributeType</c> value.
    /// </param>
    /// <returns>
    /// A <c>PCAttributeType</c> value.
    /// </returns>
    edit PCAttributeType editProductConfigurationType(boolean _set, PCAttributeType _type)
    {
        if (_set)
        {
            this.DataType = this.pc2EcoRes(_type);
        }

        return this.ecoRes2PC(this.DataType, this.IsEnumeration, this.hasBounds());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBounds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an attribute type has bounds.
    /// </summary>
    /// <returns>
    /// true if the attribute type has bounds; otherwise false.
    /// </returns>
    public boolean hasBounds()
    {
        return EcoResBoundedAttributeTypeValue::findByAttributeType(this).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.DataType = AttributeDataType::Text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pc2EcoRes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a <c>PCAttributeType</c> value to the corresponding <c>AttributeDataType</c> value.
    /// </summary>
    /// <param name="_type">
    ///    A <c>PCAttributeType</c> value to convert.
    /// </param>
    /// <returns>
    ///    An <c>AttributeDataType</c> value.
    /// </returns>
    private AttributeDataType pc2EcoRes(PCAttributeType _type)
    {
        AttributeDataType ret;
        switch (_type)
        {
            case PCAttributeType::Integer:
            case PCAttributeType::IntegerSet:
            case PCAttributeType::IntegerRangeBound:
                ret = AttributeDataType::Integer;
                break;
            case PCAttributeType::Boolean:
                ret = AttributeDataType::TrueFalse;
                break;
            case PCAttributeType::Text:
            case PCAttributeType::Enum:
                ret = AttributeDataType::Text;
                break;
            case PCAttributeType::Decimal:
                ret = AttributeDataType::Decimal;
                break;
            default:
                ret = this.pc2EcoResDefault(_type);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pc2EcoResDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a <c>PCAttributeType</c> default value to the corresponding <c>AttributeDataType</c> value.
    /// </summary>
    /// <param name="_type">
    ///    A <c>PCAttributeType</c> value to convert.
    /// </param>
    /// <returns>
    ///     An attribute data type.
    /// </returns>
    [Replaceable]
    protected AttributeDataType pc2EcoResDefault(PCAttributeType _type)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcToXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_attributeTypeWriter">
    /// The XML writer used to store the types of attributes.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_parsedTypes">
    /// A collection that contains the record IDs of the attribute types already parsed.
    /// </param>
    /// <param name="_parsedIntegerDomains">
    /// A map that contains integer domains that have already been encountered during the XML generation.
    /// </param>
    /// <param name="_sessionLanguage">
    /// The language ID of the current session.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// Throws an error if an integer domain with no ranges specified is encountered.
    /// </exception>
    public void pcToXML(
        PCXmlWriter _attributeTypeWriter,
        PCXmlWriter _componentTreeWriter,
        Set         _parsedTypes,
        Map         _parsedIntegerDomains,
        LanguageId  _sessionLanguage)
    {        
        if(!this.generateAttributeDataTypeXML(_attributeTypeWriter, _componentTreeWriter, _parsedTypes, _parsedIntegerDomains, _sessionLanguage))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAttributeDataTypeXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_attributeTypeWriter">
    ///     The XML writer used to store the types of attributes.
    /// </param>
    /// <param name="_componentTreeWriter">
    ///     The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_parsedTypes">
    ///     A collection that contains the record IDs of the attribute types already parsed.
    /// </param>
    /// <param name="_parsedIntegerDomains">
    ///     A map that contains integer domains that have already been encountered during the XML generation.
    /// </param>
    /// <param name="_sessionLanguage">
    ///     The language ID of the current session.
    /// </param>
    /// <returns>
    ///     true after generating xml based on attribute data type; Otherwise, false.
    /// </returns>
    protected boolean generateAttributeDataTypeXML(PCXmlWriter _attributeTypeWriter,
        PCXmlWriter _componentTreeWriter,
        Set         _parsedTypes,
        Map         _parsedIntegerDomains,
        LanguageId  _sessionLanguage)
    {
        #PC
        EcoResEnumerationAttributeTypeValue    enumAttributeTypeValue;
        EcoResBoundedAttributeTypeValue        bounds;
        EcoResValue                     upperBound;
        EcoResValue                     lowerBound;
        XmlWriter                       integerDomainXMLWriter;
        str                             integerDomainXML;

        EcoResTextValue                 textValue;
        EcoResTextValueTranslation      textValueTranslation;
        PCSolverTextValue               solverValue;
        boolean isAssigned = false;

        if (this.IsEnumeration && AttributeDataTypeDiscriminator::checkAttributeDataTypeText(this.DataType))
        {
            _componentTreeWriter.writeStartElement(#enumDomainElement);
            _componentTreeWriter.writeAttributeString(#variableDomainAttribute, this.Name);
            _componentTreeWriter.writeAttributeString(#enumDefinitionId, int642str(this.RecId));

            if (!_parsedTypes.in(this.RecId))
            {
                //don't write the enum domain more than once
                _parsedTypes.add(this.RecId);
                _attributeTypeWriter.writeStartElement(#enumDomainElement);
                _attributeTypeWriter.writeAttributeString(#nameAttribute, this.Name);
                _attributeTypeWriter.writeAttributeString(#enumDomainId, int642str(this.RecId));

                while select Value from solverValue
                    join RecId, TextValue from textValue
                    where textValue.RecId == solverValue.TextValue
                        join RecId from enumAttributeTypeValue
                            order by enumAttributeTypeValue.OrdinalNumber
                                where   enumAttributeTypeValue.AttributeType == this.RecId &&
                                        enumAttributeTypeValue.Value == textValue.RecId
                     outer join TextValue from textValueTranslation
                                where textValueTranslation.TextValueTable   == textValue.RecId &&
                                      textValueTranslation.Language         == _sessionLanguage
                {
                    _attributeTypeWriter.writeStartElement(#EnumValueElement);
                    _attributeTypeWriter.writeAttributeString(#valueAttribute, solverValue.Value);
                    // if translation exists for client language use it, else use default language
                    _attributeTypeWriter.writeAttributeString(#displayValue, textValueTranslation.TextValue ? textValueTranslation.TextValue : textValue.TextValue);
                    _attributeTypeWriter.writeEndElement();
                }
                _attributeTypeWriter.writeEndElement();
            }
            _componentTreeWriter.writeEndElement();
            isAssigned = true;
        }
        else if (!this.IsEnumeration && this.DataType == AttributeDataType::Text)  // text with no enumerations
        {
            _componentTreeWriter.writeStartElement(#textDomainElement);
            _componentTreeWriter.writeEndElement();
            isAssigned = true;
        }
        else if (this.DataType == AttributeDataType::Integer && this.hasBounds())
        {
            if ( ! _parsedIntegerDomains.exists(this.RecId) )
            {
                select firstonly RecId from bounds
                where   bounds.AttributeType == this.RecId
                join    upperBound
                where   upperBound.RecId == bounds.UpperBound
                join    lowerBound
                where   lowerBound.RecId == bounds.LowerBound;

                // check if this is an integer with no bounds
                if (upperBound.RecId == 0 || lowerBound.RecId == 0)
                {
                    _componentTreeWriter.writeStartElement(#booleanDomainElement);
                    _componentTreeWriter.writeEndElement();
                    isAssigned = true;
                    return isAssigned;
                }

                integerDomainXMLWriter = PCRuntimeLibrary::createXmlWriter();
                integerDomainXMLWriter.writeStartElement(#integerDomainElement);
                integerDomainXMLWriter.writeAttributeString(#fromAttribute, lowerBound.pcGetStringValue());
                integerDomainXMLWriter.writeAttributeString(#toAttribute, upperBound.pcGetStringValue());
                integerDomainXMLWriter.writeEndElement();
                integerDomainXMLWriter.close();

                integerDomainXML = integerDomainXMLWriter.writeToString();
                _parsedIntegerDomains.insert(this.RecId, integerDomainXML);
            }

            _componentTreeWriter.writeRaw(_parsedIntegerDomains.lookup(this.RecId));
            isAssigned = true;
        }
        else if (this.DataType == AttributeDataType::Integer && !this.hasBounds())
        {
            _componentTreeWriter.writeStartElement(#integerUnboundDomainElement);
            _componentTreeWriter.writeEndElement();
            isAssigned = true;
        }
        else if (this.DataType == AttributeDataType::Decimal)
        {
            _componentTreeWriter.writeStartElement(#decimalDomainElement);
            _componentTreeWriter.writeEndElement();
            isAssigned = true;
        }
        else if (this.DataType == AttributeDataType::TrueFalse)
        {
            _componentTreeWriter.writeStartElement(#booleanDomainElement);
            _componentTreeWriter.writeEndElement();
            isAssigned = true;
        }
        return IsAssigned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcValidateChangeToUnsupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a change to an attribute type that is unsupported by product configuration.
    /// </summary>
    /// <returns>
    /// true if the change is accepted; otherwise, false.
    /// </returns>
    public boolean pcValidateChangeToUnsupported()
    {
        boolean ret = true;

        if (PCTableConstraintColumnDefinition::existAttributeType(this.RecId))
        {
            ret = checkFailed("@SYS4000181");
        }
        else if (PCClass::existsAttributeWithAttributeType(this.RecId))
        {
            warning("@SYS4000182");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field value for a given field name.
    /// </summary>
    /// <param name="_fieldName">
    /// Name of the field whose value has to be validated.
    /// </param>
    /// <param name="_arrayIndex">
    /// Value of array index.
    /// </param>
    /// <returns>
    /// Boolean true if action is successful; else false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(EcoResAttributeType, IsEnumeration):
                if (!this.IsEnumeration)
                {
                    ret = this.pcValidateChangeToUnsupported();
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>EcoResAttributeType</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResAttributeType::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResAttributeType</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResAttributeType</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResAttributeType find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResAttributeType record;

        if (!_recId)
        {
            return record;
        }

        record.selectForUpdate(_forupdate);

        select firstonly record
            where record.RecId == _recId;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResAttributeType</c> table.
    /// </summary>
    /// <param name="_attributeRecId">
    /// The record ID of the attribute record related to the domain.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResAttributeType</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResAttributeType findByAttribute(RefRecId _attributeRecId, boolean _forupdate = false)
    {
        EcoResAttributeType    domain;
        EcoResAttribute attribute;

        if (!_attributeRecId)
        {
            return domain;
        }

        domain.selectForUpdate(_forupdate);

        select firstonly domain
            join firstonly RecId from attribute
                where attribute.RecId == _attributeRecId
                    && attribute.AttributeType == domain.RecId;

        return domain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the attribute type record in the <c>EcoResAttributeType</c> table
    /// by an attribute type name.
    /// </summary>
    /// <param name="_name">
    /// The attribute type name to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResAttributeType</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResAttributeType findByName(Name _name, boolean _forupdate = false)
    {
        EcoResAttributeType record;

        if (_name)
        {
            record.selectForUpdate(_forupdate);

            select firstonly record
                where record.Name == _name;
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the attribute type record.
    /// </summary>
    /// <param name="_typeName">
    /// The attribute type name.
    /// </param>
    /// <param name="_dataType">
    /// The attribute data type.
    /// </param>
    /// <param name="_isEnum">
    /// Indicates whether the attribute type is enumeration.
    /// </param>
    /// <param name="_isHidden">
    /// Indicates whether the attribute type is hidden.
    /// </param>
    /// <returns>
    /// The record of <c>EcoResAttributeType</c> table.
    /// </returns>
    public static RefRecId findOrCreateAttributeType(Name _typeName, AttributeDataType _dataType,
                                                        NoYes _isEnum = NoYes::No, NoYes _isHidden = NoYes::No)
    {
        EcoResAttributeType attributeType;

        select firstOnly attributeType where attributeType.Name == _typeName;

        if (!attributeType.RecId)
        {
            ttsBegin;
                attributeType.selectForUpdate(true);
                attributeType.DataType = _dataType;
                attributeType.Name = _typeName;
                attributeType.IsEnumeration = AttributeDataTypeDiscriminator::checkAttributeDataTypeText(_dataType) ? _isEnum : NoYes::No;
                attributeType.IsHidden = _isHidden;
                attributeType.insert();
            ttsCommit;
        }

        return attributeType.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVisibleAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Presents the lookup form to the user of <c>SysReferenceTableLookup</c> class.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The reference control value.
    /// </param>
    /// <returns>
    /// A data of type <c>EcoResAttributeType</c> table record.
    /// </returns>
    public static EcoResAttributeType lookupVisibleAttributes(FormReferenceControl _formReferenceControl)
    {
        EcoResAttributeType selectedRecord;
        SysReferenceTableLookup sysTableLookup =
            SysReferenceTableLookup::newParameters(tableNum(EcoResAttributeType), _formReferenceControl, true);

        Query lookupQuery = new Query();

        sysTableLookup.addLookupfield(fieldNum(EcoResAttributeType, Name));
        sysTableLookup.addLookupfield(fieldNum(EcoResAttributeType, DataType));

        lookupQuery.addDataSource(tableNum(EcoResAttributeType))
            .addRange(fieldNum(EcoResAttributeType, IsHidden))
            .value(queryValue(NoYes::No));
        sysTableLookup.parmQuery(lookupQuery);

        selectedRecord = sysTableLookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcCheckDefaultValueBounds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a default value for product configuration is outside the given range.
    /// </summary>
    /// <param name="_dataType">
    /// The attribute data type.
    /// </param>
    /// <param name="_attributeTypeRecId">
    /// The attribute type record ID.
    /// </param>
    /// <param name="_lowerValue">
    /// The lower value.
    /// </param>
    /// <param name="_upperValue">
    /// The upper value.
    /// </param>
    /// <returns>
    /// A default value which lies outside the given range if it exists; otherwise, null.
    /// </returns>
    public static EcoResValue pcCheckDefaultValueBounds(
        AttributeDataType _dataType,
        EcoResAttributeTypeRecId _attributeTypeRecId,
        anytype _lowerValue,
        anytype _upperValue)
    {        
        // Avoid server call for other types
        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeInteger(_dataType))
        {
            return EcoResAttributeType::pcCheckDefaultValueBoundsServer(_dataType, _attributeTypeRecId, _lowerValue, _upperValue);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcCheckDefaultValueBoundsServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a default value for product configuration is outside the given range.
    /// </summary>
    /// <param name="_dataType">
    /// The attribute data type.
    /// </param>
    /// <param name="_attributeTypeRecId">
    /// The attribute type record ID.
    /// </param>
    /// <param name="_lowerValue">
    /// The lower value.
    /// </param>
    /// <param name="_upperValue">
    /// The upper value.
    /// </param>
    /// <returns>
    /// A default value which lies outside the given range if it exists; otherwise, null.
    /// </returns>
    protected static EcoResValue pcCheckDefaultValueBoundsServer(
        AttributeDataType _dataType,
        EcoResAttributeTypeRecId _attributeTypeRecId,
        anytype _lowerValue,
        anytype _upperValue)
    {
        EcoResAttribute attribute;
        EcoResAttributeDefaultValue defaultValue;
        EcoResTextValue textValue;
        int intValue;
        
        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeInteger(_dataType))
        {
            // Default values for PC are stored as TextValue so a record by record check is performed.
            while   select TableId from attribute
                        where attribute.AttributeType == _attributeTypeRecId
                    join TableId from defaultValue
                        where defaultValue.Attribute == attribute.RecId
                    join textValue
                        where defaultValue.Value == textValue.RecId
            {
                intValue = str2int(textValue.TextValue);
                if (intValue < _lowerValue || intValue > _upperValue)
                {
                    return textValue;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetSolverSupportedAttributeTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query for attribute types that are supported by product configuration.
    /// </summary>
    /// <returns>
    /// A query.
    /// </returns>
    public static Query pcGetSolverSupportedAttributeTypes()
    {
        QueryBuildDataSource    dataSource, boundsDataSource;
        Query query;

        query       = new Query();
        dataSource  = query.addDataSource(tableNum(EcoResAttributeType), tableStr(EcoResAttributeType));

        boundsDataSource = dataSource.addDataSource(tableNum(EcoResBoundedAttributeTypeValue), tableStr(EcoResBoundedAttributeTypeValue));
        boundsDataSource.joinMode(JoinMode::OuterJoin);
        boundsDataSource.relations(true);

        dataSource.addRange(fieldNum(EcoResAttributeType, DataType)).value(
        strFmt('((%1.%2 == %3) || ((%1.%2 == %4) && (%1.%5 == %6)) || ((%1.%2 == %7) && ((%8.%9 != 0) || (%1.%5 == %6))))',
            dataSource.name(),
            fieldStr(EcoResAttributeType,DataType),
            // Include booleans,
            any2int(AttributeDataType::TrueFalse),
            // Enumerated text,
            any2int(AttributeDataType::Text),
            fieldStr(EcoResAttributeType,IsEnumeration),
            any2int(NoYes::Yes),
            // and integers with ranges
            any2int(AttributeDataType::Integer),
            boundsDataSource.name(),
            fieldStr(EcoResBoundedAttributeTypeValue, RecId)));

        dataSource.fields().addField(fieldNum(EcoResAttributeType, RecId));
        dataSource.fields().addField(fieldNum(EcoResAttributeType, Name));
        dataSource.fields().addField(fieldNum(EcoResAttributeType, DataType));
        boundsDataSource.fields().addField(fieldNum(EcoResBoundedAttributeTypeValue, TableId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcLookupSupportedAttributeTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up attribute types that are supported by product configuration.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// A form reference control.
    /// </param>
    /// <returns>
    /// The selected <c>EcoResAttributeType</c> buffer.
    /// </returns>
    public static Common pcLookupSupportedAttributeTypes(FormReferenceControl _formReferenceControl)
    {
        SysReferenceTableLookup lookup = SysReferenceTableLookup::newParameters(tableNum(EcoResAttributeType), _formReferenceControl, true);

        lookup.parmQuery(EcoResAttributeType::pcGetSolverSupportedAttributeTypes());

        lookup.addLookupfield(fieldNum(EcoResAttributeType, Name));
        lookup.addLookupfield(fieldNum(EcoResAttributeType, DataType));

        return lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS152873</DeveloperDocumentation>
	<FormRef>EcoResAttributeType</FormRef>
	<Label>@SYS310128</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>DataType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>NameIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResAttribute</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResAttribute</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResAttributeTypeUnitOfMeasure</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResAttributeTypeUnitOfMeasure</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResBoundedAttributeTypeValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResBoundedAttributeTypeValue</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResEnumerationAttributeTypeValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResEnumerationAttributeTypeValue</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnumeration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsHidden</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnumeration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsHidden</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS131474</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEnumeration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS183787</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductConfigurationDataType</Name>
			<Label>@SYS153377</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editProductConfigurationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1201</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>AttributeDataType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEnumeration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS310130</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsHidden</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Label>@RET5775</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SCM:AttributeType</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>