<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanActivityRelationship</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlanActivityRelationship extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PlanConstraint</c> record that belongs to the current relation.
    /// </summary>
    /// <returns>
    ///    A <c>PlanConstraint</c> record if one is attached to the relation; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanConstraint constraint()
    {
        PlanConstraint planConstraint;

        if (this.Constraint)
        {
            planConstraint = PlanConstraint::find(this.Constraint);
        }

        return planConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the current record in the <c>PlanActivityRelationship</c> table.
    /// </summary>
    public void delete()
    {
        if (this.validateDelete())
        {
            // remove from cache
            PlanActivityNextLevelCache::construct().remove(this.IndependentPlanActivity);
            PlanActivityPrevLevelCache::construct().remove(this.DependentPlanActivity);

            super();
        }
        else
        {
            // Operation failed
            throw error("@SYS138340");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependentActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the dependent <c>PlanActivity</c> that is used by the current relation.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivity</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity dependentActivity()
    {
        return PlanActivity::find(this.DependentPlanActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>independentActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the independent <c>PlanActivity</c> that is used by the current relation.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivity</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity independentActivity()
    {
        return PlanActivity::find(this.IndependentPlanActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the current record into the <c>PlanActivityRelationship</c> table.
    /// </summary>
    public void insert()
    {
        super();

        // remove from cache
        PlanActivityNextLevelCache::construct().remove(this.IndependentPlanActivity);
        PlanActivityPrevLevelCache::construct().remove(this.DependentPlanActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedInActivePlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an active plan in which the current record is used.
    /// </summary>
    /// <returns>
    /// A <c>Plan</c> record; otherwise, an empty table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan isUsedInActivePlan()
    {
        Plan                plan;
        PlanPlanActivity    planPlanActivity;

        select firstonly plan
            where plan.Status == PlanStatus::Active
            exists join planPlanActivity
                where planPlanActivity.Plan          == plan.RecId
                   && (planPlanActivity.PlanActivity == this.IndependentPlanActivity
                   ||  planPlanActivity.PlanActivity == this.DependentPlanActivity);

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the current record in the <c>PlanActivityRelationship</c> table.
    /// </summary>
    public void update()
    {
        // remove from cache
        PlanActivityNextLevelCache::construct().remove(this.IndependentPlanActivity);
        PlanActivityNextLevelCache::construct().remove(this.orig().IndependentPlanActivity);
        PlanActivityPrevLevelCache::construct().remove(this.DependentPlanActivity);
        PlanActivityPrevLevelCache::construct().remove(this.orig().DependentPlanActivity);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        Plan                plan;
        PlanReference       planReference;
        PlanConstraint      planConstraint;
        boolean             result = super();

        if (result)
        {
            planConstraint = this.constraint();

            if (   !planConstraint
                || planConstraint.ConstraintType == ConstraintTypes::Sequence)
            {
                plan = this.isUsedInActivePlan();
                if (plan.RecId)
                {
                    planReference = plan.planReference();
                    result        = checkFailed(strfmt("@SYS327324",planReference.PlanName,plan.VersionNum));
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        PlanActivity    independentActivity = PlanActivity::find(this.IndependentPlanActivity);
        PlanActivity    dependentActivity   = PlanActivity::find(this.DependentPlanActivity);
        PlanConstraint  planConstraint      = PlanConstraint::find(this.Constraint);
        boolean         ret;

        ret = super();

        // validate the type of activities to be related given the constraint
        ret =    ret
              && independentActivity.RecId != dependentActivity.RecId
              && (!planConstraint
              ||  (planConstraint.ConstraintType == ConstraintTypes::Aggregation
              &&   !independentActivity.isAtomic()
              &&   dependentActivity.isAtomic()
              &&   independentActivity.PlanReference == dependentActivity.PlanReference)
              ||  (planConstraint.ConstraintType == ConstraintTypes::Sequence
              &&   !independentActivity.isAtomic()
              &&   !dependentActivity.isAtomic())
              ||  (planConstraint.ConstraintType == ConstraintTypes::Sequence
              &&   independentActivity.isAtomic()
              &&   dependentActivity.isAtomic()));

        if (!ret)
        {
            ret = checkFailed("@SYS305454");
        }

        // validate legal entities
        if (   ret
            && dependentActivity.LegalEntity != independentActivity.LegalEntity)
        {
            ret = checkFailed(strfmt("@SYS332724",
                              independentActivity.Name,
                              dependentActivity.Name));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>PlanActivityRelationship</c> object and the related records in the database.
    /// </summary>
    /// <param name="_independent">
    ///    The identificator of the independent <c>PlanActivity</c> object.
    /// </param>
    /// <param name="_dependent">
    ///    The identificator of the dependent <c>PlanActivity</c> object.
    /// </param>
    /// <param name="_constraintValue">
    ///    The constraint value.
    /// </param>
    /// <param name="_unitOfMeasure">
    ///    The unit of measure in which the constraint value is stated.
    /// </param>
    /// <returns>
    ///    A <c>PlanActivityRelationship</c> record if the object and records were created; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityRelationship createRelation(
        PlanActivityId     _independent,
        PlanActivityId     _dependent,
        ConstraintValue    _constraintValue,
        UnitOfMeasureRecId _unitOfMeasure)
    {
        PlanActivityRelationship            planActivityRelationship;
        PlanConstraint                      planConstraint;
        boolean                             result = true;

        if (!_independent
            || !_dependent )
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        // Create constraint record and optional constraint value record
        planConstraint = PlanConstraint::findOrCreate(ConstraintTypes::Sequence, SequenceTypes::EndStart, ConstraintRoleTypes::Minimum, _constraintValue, _unitOfMeasure);
        result = result && planConstraint.RecId != 0;

        planActivityRelationship.IndependentPlanActivity    = PlanActivity::findPlanActivityId(_independent).RecId;
        planActivityRelationship.DependentPlanActivity      = PlanActivity::findPlanActivityId(_dependent).RecId;
        planActivityRelationship.Constraint                 = planConstraint.RecId;

        if (result && planActivityRelationship.validateWrite())
        {
            planActivityRelationship.insert();
        }
        else
        {
            // Operation failed
            throw error("@SYS138340");
        }

        ttscommit;

        return planActivityRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>PlanActivityRelationship</c> table exists.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>PlanActivityRelationship</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId _refRecId)
    {
        return    _refRecId
               && (select firstonly RecId from planActivityRelationship
                       where planActivityRelationship.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PlanActivityRelationship</c> table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>PlanActivityRelationship</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PlanActivityRelationship</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityRelationship find(
        RefRecId _refRecId,
        boolean  _forUpdate = false)
    {
        PlanActivityRelationship    planActivityRelationship;

        if (_refRecId)
        {
            planActivityRelationship.selectForUpdate(_forUpdate);

            select firstonly planActivityRelationship
                where planActivityRelationship.RecId == _refRecId;
        }

        return planActivityRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateRelation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityRelationship findOrCreateRelation(
        PlanActivityId     _independent,
        PlanActivityId     _dependent,
        ConstraintValue    _constraintValue,
        UnitOfMeasureRecId _unitOfMeasure)
    {
        PlanActivityRelationship            planActivityRelationship;

        if (!_independent
            || !_dependent )
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        planActivityRelationship = PlanActivityRelationship::findPlanActivity(
                                        PlanActivity::findPlanActivityId(_independent).RecId,
                                        PlanActivity::findPlanActivityId(_dependent).RecId);
        if (!planActivityRelationship.RecId)
        {
            planActivityRelationship = PlanActivityRelationship::createRelation(_independent, _dependent, _constraintValue, _unitOfMeasure);
        }

        return planActivityRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PlanActivityRelationship</c> table.
    /// </summary>
    /// <param name="_independentPlanActivity">
    ///    The record identifier of the independent plan activity in the relation.
    /// </param>
    /// <param name="_dependentPlanActivity">
    ///    The record identifier of the dependent plan activity in the relation.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PlanActivityRelationship</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityRelationship findPlanActivity(
        PlanActivityRefRecId _independentPlanActivity,
        PlanActivityRefRecId _dependentPlanActivity,
        boolean              _forUpdate = false)
    {
        PlanActivityRelationship    planActivityRelationship;

        if (   _independentPlanActivity != 0
            && _dependentPlanActivity   != 0 )
        {
            planActivityRelationship.selectForUpdate(_forUpdate);

            select firstonly planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity == _independentPlanActivity
                   && planActivityRelationship.DependentPlanActivity   == _dependentPlanActivity;
        }

        return planActivityRelationship;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS323998</DeveloperDocumentation>
	<FormRef>PlanActivity</FormRef>
	<Label>@SYS152564</Label>
	<SingularLabel>@SYS152565</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>IndependentPlanActivity</TitleField1>
	<TitleField2>DependentPlanActivity</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>RelationshipIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LeanProdFlowPlanActivityRelation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanProdFlowPlanActivityRelation</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IndependentPlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DependentPlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Constraint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IndependentPlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DependentPlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Constraint</Name>
			<Label>@SYS152588</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Constraint</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Relationship</Name>
			<Label>@SYS152626</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IndependentPlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DependentPlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Constraint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanConstraintRefRecid</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DependentPlanActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityRefRecId</ExtendedDataType>
			<Label>@SYS152893</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IndependentPlanActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityRefRecId</ExtendedDataType>
			<Label>@SYS152892</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RelationshipIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>IndependentPlanActivity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DependentPlanActivity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DependentPlanActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DependentPlanActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ActivityRelation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DependentPlanActivity</Name>
					<Field>DependentPlanActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IndependentPlanActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IndependentPlanActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ActivityRelation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IndependentPlanActivity</Name>
					<Field>IndependentPlanActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanConstraint</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanConstraint</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlanConstraint</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ActivityRelation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Constraint</Name>
					<Field>Constraint</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>