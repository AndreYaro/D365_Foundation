<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMAServiceOrderLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMAServiceOrderLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelLine</Name>
				<Source><![CDATA[
    public void cancelLine()
    {
        boolean allowLineCancel = false;

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        // Cancellation is not allowed
        if (this.ServiceOrderStatus != SMAServiceOrderStatus::Posted)
        {
            allowLineCancel = SMAStageTable::find(SMAServiceOrderTable::find(this.ServiceOrderId).StageId).StageCanCancel == NoYes::Yes;
        }

        if (!allowLineCancel)
        {
            // Service Order line cannot be cancelled due to status or Service stage option.
            throw error("@SYS8364");
        }

        if (this.ServiceOrderStatus == SMAServiceOrderStatus::Created)
        {
            ttsbegin;

            this.ServiceOrderStatus = SMAServiceOrderStatus::Canceled;
            this.update();

            this.deleteAssociatedActivity();

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeEmployeeAndTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates merged activities or deletes an activity when the employee, or the service task, or both
    ///    were changed.
    /// </summary>
    /// <param name="_originalOrderLine">
    ///    The original service order line.
    /// </param>
    void changeEmployeeAndTask(SMAServiceOrderLine _originalOrderLine)
    {
        smmActivities           activity;
        smmActivityId           activityId;

        if (this.TransactionType == SMATransactionType::Hour && this.Worker)
        {
            // Is a task associated with the service order line?
            if (this.ServiceTaskId)
            {
                activityId = this.findActivityWithSameProfile(_originalOrderLine);
            }

            ttsbegin;

            if (activityId)
            {
                select firstonly forupdate activity where activity.ActivityNumber == activityId;

                activity.TotalWork -= _originalOrderLine.Qty;

                activity.update();
            }
            else
            {
                select firstonly forupdate activity where activity.ActivityNumber == _originalOrderLine.ActivityId;

                activity.delete();
            }

            ttscommit;

            this.ActivityId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    private boolean checkActivity()
    {
        boolean ret = true;

        if (this.ActivityNumber)
        {
            ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.ProjId, this.ActivityNumber);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkServiceTaskRelation</Name>
				<Source><![CDATA[
    public void checkServiceTaskRelation(boolean            _createRelation = false,
                                    SMAAgreementLine    _originSAL      = null,
                                    SMAServiceOrderLine _originSOL      = null)
    {
        boolean                 existRelation   = false;
        SMAServiceTaskRelation  taskRelationOrigin;

        // Check for existing service task relation
        existRelation = SMAServiceTaskRelation::existRelation(tableNum(SMAServiceOrderTable), this.ServiceOrderId, this.ServiceTaskId) ||
                    SMAServiceTaskRelation::existRelation(tableNum(SMAAgreementTable), this.AgreementId, this.ServiceTaskId);

        if (!existRelation && _createRelation)
        {
            if (_originSAL)
            {
                // Find original relation
                taskRelationOrigin  = SMAServiceTaskRelation::findAgreement(_originSAL.AgreementId);
            }

            if (_originSOL)
            {
                // Find original Service task relation
                taskRelationOrigin  = SMAServiceTaskRelation::findServiceOrder(_originSOL.ServiceOrderId);
            }

            // Create Service task relation
            SMAServiceTaskRelation::createRelation(this.ServiceTaskId,
                                               this.ServiceOrderId,
                                               tableNum(SMAServiceOrderTable),
                                               taskRelationOrigin.DescriptionExternal,
                                               taskRelationOrigin.DescriptionInternal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusAllowModify</Name>
				<Source><![CDATA[
    public boolean checkStatusAllowModify()
    {
        boolean ret = true;

        if (this.ServiceOrderStatus == SMAServiceOrderStatus::Posted || this.ServiceOrderStatus == SMAServiceOrderStatus::Canceled)
        {
            ret = checkFailed("@SYS96676");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
    DimensionDefault _defaultDimension,
    DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                  this.companyInfo().RecId
                                                                  )
    )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    display CostAmount costAmount()
    {
        return this.Qty * this.ProjCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateActivity</Name>
				<Source><![CDATA[
    void createUpdateActivity(smmActivityPhaseId _phaseId)
    {
        smmActivityId           activityId;
        smmActivities           activity;
        SMAServiceOrderTable    serviceOrderTable = SMAServiceOrderTable::find(this.ServiceOrderId);

        ttsbegin;

        if (this.TransactionType == SMATransactionType::Hour && this.Worker && serviceOrderTable.ServiceDateTime)
        {
            // Is a task associated with the service order line?
            if (this.ServiceTaskId)
            {
                activityId = this.findActivityWithSameProfile();
            }

            if (!this.ActivityId)
            {
                if (!activityId)
                {
                    // Clear previous used id to get a new id from the init method
                    activity.ActivityNumber = '';

                    // Set the activity number
                    activity.setActivityNum();

                    activity.initFromCommon(this);

                    activity.initValue(smmActivityCategory::Appointment);

                    activity.TypeId                 = serviceOrderTable.ActivityTypeId;
                    activity.TaskPriority           = serviceOrderTable.Priority;

                    activity.Purpose                = serviceOrderTable.Description;
                    activity.ResponsibleWorker      = this.Worker;
                    activity.TotalWork              = this.Qty;

                    if (this.ServiceTaskId)
                    {
                        activity.UserMemo = SMAServiceTaskRelation::find(tableNum(SMAServiceOrderTable), this.ServiceOrderId, this.ServiceTaskId).DescriptionInternal;
                    }

                    activity.Dispatched             = SMADispatched::No;

                    activity.StartDateTime          = serviceOrderTable.ServiceDateTime;

                    activity.findEndDateTimeBasedOnTotalWork();

                    activity.PhaseId                = _phaseId;

                    activity.insert();

                    this.ActivityId = activity.ActivityNumber;
                }
                else
                {
                    ttsbegin;

                    select firstonly forupdate activity where activity.ActivityNumber == activityId;

                    activity.TotalWork += this.Qty;
                    activity.findEndDateTimeBasedOnTotalWork();

                    activity.doUpdate();

                    ttscommit;

                    this.ActivityId = activityId;
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        SMAServiceOrderTable    tmpServiceOrderTable;
        SMAPreServiceOrderLine  preServiceOrderLine;

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        tmpServiceOrderTable = SMAServiceOrderTable::find(this.ServiceOrderId,true);

        ttsbegin;

        // Check and delete a record in SMAPreServiceOrderLine if it exists
        if (this.ServiceOrderStatus != SMAServiceOrderStatus::Posted && SMAPreServiceOrderLine::exist(this.AgreementId, this.AgreementLineNum, this.DateCalculated))
        {
            if (!SMAPreServiceOrderLine::deleteLine(this.ServiceOrderId, this.ProjTransId))
            {
                preServiceOrderLine = SMAPreServiceOrderLine::find(this.AgreementId, this.AgreementLineNum, this.DateCalculated, true);

                if (preServiceOrderLine)
                {
                    preServiceOrderLine.delete();
                }
            }
        }

        this.deleteAssociatedActivity();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        ttscommit;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssociatedActivity</Name>
				<Source><![CDATA[
    public void deleteAssociatedActivity()
    {
        smmActivities           activity;
        SMAServiceOrderLine     serviceLine;

        ttsbegin;

        // Is a activity associated with the service line
        if (this.ActivityId)
        {
            // Is there any other lines associated with the activity?
            select forupdate activity join serviceLine where activity.ActivityNumber == serviceLine.ActivityId && activity.ActivityNumber == this.ActivityId && serviceLine.RecId != this.RecId;

            // Is other lines found?
            if (activity)
            {
                // Subtract service line quantity from the total work on the shared activity
                activity.TotalWork = activity.TotalWork - this.Qty;
                activity.findEndDateTimeBasedOnTotalWork();

                activity.update();
            }
            else
            {
                // If no other lines are associated, just delete the activity
                select forupdate activity where activity.ActivityNumber == this.ActivityId;

                activity.delete();

                // Call to activity.delete() might change this object, so reread
                // in order to prevent conflict
                this.reread();

                this.ActivityId = '';
                this.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjId</Name>
				<Source><![CDATA[
    public void fieldModifiedProjId()
    {
        this.SMAServiceLineMap::initFromProjTable(ProjTable::find(this.ProjId));
        this.SMAServiceLineMap::fieldModifiedCategoryId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivityWithSameProfile</Name>
				<Source><![CDATA[
    smmActivityId findActivityWithSameProfile(SMAServiceOrderLine _serviceLine = null)
    {
        SMAServiceOrderLine     serviceOrderLine;

        if (_serviceLine)
        {
            // Is there another service order line with activity connected to this task
            select firstonly serviceOrderLine where serviceOrderLine.ServiceOrderId  == _serviceLine.ServiceOrderId &&
                                                serviceOrderLine.Worker          == _serviceLine.Worker &&
                                                serviceOrderLine.TransactionType == SMATransactionType::Hour &&
                                                serviceOrderLine.ServiceTaskId   == _serviceLine.ServiceTaskId &&
                                                serviceOrderLine.ServiceTaskId   != '' &&
                                                serviceOrderLine.ActivityId      != '' &&
                                                serviceOrderLine.RecId           != _serviceLine.RecId;
        }
        else
        {
            // Is there another service order line with activity connected to this task
            select firstonly serviceOrderLine where serviceOrderLine.ServiceOrderId  == this.ServiceOrderId &&
                                                serviceOrderLine.Worker          == this.Worker &&
                                                serviceOrderLine.TransactionType == SMATransactionType::Hour &&
                                                serviceOrderLine.ServiceTaskId   == this.ServiceTaskId &&
                                                serviceOrderLine.ServiceTaskId   != '' &&
                                                serviceOrderLine.ActivityId      != '' &&
                                                serviceOrderLine.RecId           != this.RecId;
        }

        return serviceOrderLine.ActivityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateActivity</Name>
				<Source><![CDATA[
    void generateActivity()
    {
        SMAStageId  stageId;

        stageId = SMAServiceOrderTable::find(this.ServiceOrderId).StageId;

        if (stageId && (SMAParameters::find().ServiceLineActivityStage == stageId))
        {
            this.createUpdateActivity(SMAStageTable::find(stageId).StageActivityPhaseId);

            this.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceInformation</Name>
				<Source><![CDATA[
    container getInvoiceInformation()
    {
        container           invoiceInformation;
        ProjEmplTrans       projEmplTrans;
        ProjCostTrans       projCostTrans;
        ProjItemTrans       projItemTrans;
        ProjRevenueTrans    projRevenueTrans;

        switch (this.TransactionType)
        {
            case SMATransactionType::Expense :
                projCostTrans = ProjCostTrans::find(this.ProjTransId);
                if (projCostTrans)
                {
                    invoiceInformation = [projCostTrans.proposalId(), projCostTrans.invoiceId()];
                }
                break;

            case SMATransactionType::Fee :
                projRevenueTrans = ProjRevenueTrans::find(this.ProjTransId);
                if (projRevenueTrans)
                {
                    invoiceInformation = [projRevenueTrans.proposalId(), projRevenueTrans.invoiceId()];
                }
                break;

            case SMATransactionType::Hour :
                projEmplTrans = ProjEmplTrans::find(this.ProjTransId);
                if (projEmplTrans)
                {
                    invoiceInformation = [projEmplTrans.proposalId(), projEmplTrans.invoiceId()];
                }
                break;

            case SMATransactionType::Item :
                projItemTrans = ProjItemTrans::find(this.ProjTransId);
                if (projItemTrans)
                {
                    invoiceInformation = [projItemTrans.proposalId(), projItemTrans.invoiceId()];
                }
                break;
        }

        return invoiceInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    public void initFromAgreementLine(SMAAgreementLine    _agreementLine,
                                  boolean             _includeProj     = true,
                                  boolean             _includeTask     = true,
                                  boolean             _includeAgreementRef = true)
    {
        // <GIN>
        InventTable                          inventTable;
        SMAServiceOrderLineTaxExtension_IN   smaServiceOrderLineTaxExtension;
        // </GIN>

        this.initValue();

        if (_includeAgreementRef)
        {
            this.AgreementId            = _agreementLine.AgreementId;
            this.AgreementLineNum       = _agreementLine.AgreementLineNum;
        }
        this.TransactionType        = _agreementLine.TransactionType;
        this.Description            = _agreementLine.Description;
        this.DescriptionService     = _agreementLine.DescriptionService;
        this.Qty                    = _agreementLine.Qty;

        // If the employee on the service agreement line is not active a warning is shown
        if (_agreementLine.Worker && !HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().validateWorker(_agreementLine.Worker))
        {
            // Worker %1 is not active in this company
            warning(strFmt("@SYS326113", HcmWorker::find(_agreementLine.Worker).name()));
        }
        this.Worker                 = _agreementLine.Worker;

        this.ProjCategoryId         = _agreementLine.ProjCategoryId;

        // Item fields
        this.ItemId                 = _agreementLine.ItemId;

        InventDim inventDim = InventDim::find(_agreementLine.InventDimId);
        if (!inventDim.wmsLocationId)
        {
            inventDim = this.SMAServiceLineMap::modifyWMSLocation(inventDim, InventDirection::Issue);
            inventDim = InventDim::findOrCreate(inventDim);
        }
        this.setInventDimId(inventDim.inventDimId, inventDim);

        this.Unit                   = _agreementLine.Unit;

        this.ServiceTimeStartAfter  = _agreementLine.ServiceTimeStartAfter;
        this.ServiceTimeEndBefore   = _agreementLine.ServiceTimeEndBefore;

        this.DefaultDimension       = this.copyDimension(_agreementLine.DefaultDimension);

        if (_includeProj)
        {
            this.ProjId                 = _agreementLine.ProjId;
            this.ProjLinePropertyId     = _agreementLine.ProjLinePropertyId;
            this.ProjCurrencyCode       = _agreementLine.ProjCurrencyId;
        }

        // Copy activity if there is one matching to original
        if (ProjActivity::find(_agreementLine.ActivityNumber))
        {
            this.ActivityNumber     = _agreementLine.ActivityNumber;
        }

        this.ProjTaxGroup       = _agreementLine.ProjTaxGroupId;
        this.ProjTaxItemGroup   = _agreementLine.ProjTaxItemGroupId;
        this.ProjTransTxt       = _agreementLine.ProjTransTxt;

        if (_includeTask && _agreementLine.ServiceTaskId)
        {
            this.ServiceTaskId          = _agreementLine.ServiceTaskId;

            // Check and create service task relation
            this.checkServiceTaskRelation(true, _agreementLine);
        }

        this.ProjCostPrice      = this.SMAServiceLineMap::projCostPrice();
        this.ProjSalesPrice     = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPrice);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            smaServiceOrderLineTaxExtension = this.smaServiceOrderLineTaxExtension_IN();
            inventTable = InventTable::find(_agreementLine.ItemId);

            if (inventTable)
            {
                smaServiceOrderLineTaxExtension.initCompanyLocation();
                smaServiceOrderLineTaxExtension.maxRetailPrice();
            }

            smaServiceOrderLineTaxExtension.AssessableValueTransactionCurrency = this.Qty * this.ProjSalesPrice;
            this.SysExtensionSerializerMap::packExtensionTable(smaServiceOrderLineTaxExtension);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOffsetAccount</Name>
				<Source><![CDATA[
    public void initFromOffsetAccount()
    {
        VendTable    vendTable;

        this.initTaxGroup();
        this.initTaxItemGroup();

        if (this.TransactionType == SMATransactionType::Expense && this.LedgerDimension)
        {
            if (this.OffsetAccountTypeExpense == LedgerJournalACType::Vend)
            {
                vendTable               = VendTable::findByLedgerDimension(this.LedgerDimension);
                this.CurrencyIdCost     = vendTable.Currency;
                this.TaxGroupExpense    = vendTable.TaxGroup;
            }
            else
            {
                this.CurrencyIdCost     = CompanyInfoHelper::standardCurrency();
                this.TaxGroupExpense    = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromServiceOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets the project records
    /// </summary>
    /// <param name="_projTable">
    /// projtable as parameter
    /// </param>
    public void initFromServiceOrder(SMAServiceOrderId _serviceOrderId)
    {
        SMAServiceOrderTable    serviceOrderTable;
        // <GIN>
        ProjTable               projTableLoc;
        // </GIN>
        CustTable custTable = CustTable::find(SMAServiceOrderTable::find(_serviceOrderId).CustAccount);
        InventDim inventDim = this.inventDim();

        serviceOrderTable = SMAServiceOrderTable::find(_serviceOrderId);

        this.AgreementId    = serviceOrderTable.AgreementId;
        this.ProjId         = serviceOrderTable.ProjId;
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            projTableLoc        = ProjTable::find(serviceOrderTable.ProjId);
        }
        // </GIN>

        // If the employee on the service order is not active a warning is shown
        if (serviceOrderTable.WorkerPreferredTechnician && !HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().validateWorker(serviceOrderTable.WorkerPreferredTechnician))
        {
            // Worker %1 is not active in this company
            warning(strFmt("@SYS326113", HcmWorker::find(serviceOrderTable.WorkerPreferredTechnician).name()));
        }

        this.Worker = serviceOrderTable.WorkerPreferredTechnician;

        if (serviceOrderTable.ProjId)
        {
            this.SMAServiceLineMap::initFromProjTable(ProjTable::find(this.ProjId));
        }

        if (custTable.InventLocation || custTable.InventSiteId)
        {
            inventDim.InventLocationId = custTable.InventLocation;
            inventDim.InventSiteId     = custTable.InventSiteId;
        }

        this.setInventDimIdFromInventDim(inventDim);

        this.DateExecution = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(serviceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromServiceOrderLine</Name>
				<Source><![CDATA[
    public void initFromServiceOrderLine(SMAServiceOrderLine    _serviceOrderLine,
                                     boolean                _includeProj     = true,
                                     boolean                _includeTask     = true)
    {
        this.initValue();

        this.TransactionType        = _serviceOrderLine.TransactionType;
        this.Description            = _serviceOrderLine.Description;
        this.DescriptionService     = _serviceOrderLine.DescriptionService;
        this.Unit                   = _serviceOrderLine.Unit;
        this.Qty                    = _serviceOrderLine.Qty;
        this.ServiceTimeStartAfter  = _serviceOrderLine.ServiceTimeStartAfter;
        this.ServiceTimeEndBefore   = _serviceOrderLine.ServiceTimeEndBefore;

        // If the employee on the service order line is not active a warning is shown
        if (_serviceOrderLine.Worker && !HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().validateWorker(_serviceOrderLine.Worker))
        {
            // Worker %1 is not active in this company
            warning(strFmt("@SYS326113", HcmWorker::find(_serviceOrderLine.Worker).name()));
        }

        // Mandatory fields
        this.Worker                 = _serviceOrderLine.Worker;
        this.ProjCategoryId         = _serviceOrderLine.ProjCategoryId;
        this.ProjLinePropertyId     = _serviceOrderLine.ProjLinePropertyId;

        // Item fields
        this.ItemId                 = _serviceOrderLine.ItemId;
        this.setInventDimId(_serviceOrderLine.InventDimId);
        this.Unit                   = _serviceOrderLine.Unit;

        // Copy activity if there is one matching to original
        if (ProjActivity::find(_serviceOrderLine.ActivityNumber))
        {
            this.ActivityNumber     = _serviceOrderLine.ActivityNumber;
        }

        if (_includeProj)
        {
            this.ProjId                 = _serviceOrderLine.ProjId;
            this.DefaultDimension       = this.copyDimension(_serviceOrderLine.DefaultDimension);

            // Project fields
            this.ProjCurrencyCode       = _serviceOrderLine.ProjCurrencyCode;
            this.ProjTaxGroup           = _serviceOrderLine.ProjTaxGroup;
            this.ProjTaxItemGroup       = _serviceOrderLine.ProjTaxItemGroup;
            this.ProjTransTxt           = _serviceOrderLine.ProjTransTxt;
        }

        if (_includeTask && _serviceOrderLine.ServiceTaskId)
        {
            this.ServiceTaskId = _serviceOrderLine.ServiceTaskId;

            // Check and create service task relation
            this.checkServiceTaskRelation(true, null, _serviceOrderLine);
        }

        this.ProjCostPrice       = this.SMAServiceLineMap::projCostPrice();
        this.ProjSalesPrice      = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxGroup</Name>
				<Source><![CDATA[
    private void initTaxGroup()
    {
        this.TaxGroupExpense = '';

        if (this.LedgerDimension)
        {
            if (this.OffsetAccountTypeExpense == LedgerJournalACType::Cust)
            {
                this.TaxGroupExpense = CustTable::findByLedgerDimension(this.LedgerDimension).TaxGroup;
            }
            else
        if (this.OffsetAccountTypeExpense == LedgerJournalACType::Vend)
            {
                this.TaxGroupExpense = VendTable::findByLedgerDimension(this.LedgerDimension).TaxGroup;
            }
            else
        if (this.OffsetAccountTypeExpense == LedgerJournalACType::Ledger)
            {
                this.TaxGroupExpense =
                MainAccountLegalEntity::findByMainAccountLegalEntity(
                        LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension).RecId,
                    CompanyInfo::current()).TaxGroup;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxItemGroup</Name>
				<Source><![CDATA[
    public void initTaxItemGroup()
    {
        this.ProjTaxItemGroup = '';
        this.TaxItemGroupExpense = '';

        if (this.OffsetAccountTypeExpense == LedgerJournalACType::Ledger)
        {
            if (!MainAccountLegalEntity::findByMainAccountLegalEntity(
            LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension).RecId,
            CompanyInfo::current()).TaxFree)
            {
                this.ProjTaxItemGroup = MainAccountLegalEntity::findByMainAccountLegalEntity(
                LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension).RecId,
                CompanyInfo::current()).TaxItemGroup;
            }
        }

        if (this.ProjCategoryId)
        {
            this.ProjTaxItemGroup = ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;
        }
        else
        {
            this.ProjTaxItemGroup = TaxParameters::find().TaxItemGroup;
        }

        this.TaxItemGroupExpense = this.ProjTaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        SMAServiceOrderTable   tmpServiceOrderTable;

        // <GIN>
        #ISOCountryRegionCodes
        ProjTable   projTableLoc;
        // </GIN>

        tmpServiceOrderTable = SMAServiceOrderTable::find(this.ServiceOrderId,true);

        this.ServiceOrderLineNum = this.setLineNum();

        if (!this.ProjCostPrice)
        {
            this.ProjCostPrice = this.SMAServiceLineMap::projCostPrice();
        }

        if (!this.ProjSalesPrice && this.IsSalesPriceModified == NoYes::No)
        {
            this.ProjSalesPrice = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPrice);
        }

        if (!this.ProjTransId)
        {
            this.ProjTransId = ProjParameters::newTransId();
        }

        super();

        this.generateActivity();

        // Sign off the Service Order if all lines are signed off
        if (tmpServiceOrderTable)
        {
            ttsbegin;
            tmpServiceOrderTable.updateSignOff();
            tmpServiceOrderTable.doUpdate();
            ttscommit;
        }

        SMAServiceLevelAgreementLogHelper::checkUpdateSignOffServiceOrderFromLine(this);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        // </GIN>

        this.signOffActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean  _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTable</c> record that corresponds to the item ID of the current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>InventTable</c> record that corresponds to the item ID of the current record.
    /// </returns>
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceIdRequired</Name>
				<Source><![CDATA[
    public boolean invoiceIdRequired()
    {
        return (this.OffsetAccountTypeExpense == LedgerJournalACType::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default <c>SMAServiceOrderLine.dimension</c> values that are based on the <c>InventDim</c>
    ///    record buffer values.
    /// </summary>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer linked to the current <c>SMAServiceOrderLine</c> record buffer;
    ///    optional.
    /// </param>
    public void linkInventDim2Dimension(InventDim _inventDim)
    {
        _inventDim.modifiedInventSiteFromParent(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        // <GIN>
        InventTable                         inventable;
        InventDim                           inventDim;
        SMAServiceOrderLineTaxExtension_IN  smaServiceOrderLineTaxExtension;
        TransTaxInformation                 transTaxInformation;

        #ISOCountryRegionCodes
        // </GIN>
        SMAServiceObjectRelation    smaServiceObjectRelation;
        InventDimGroupSetup         inventDimGroupSetup;

        //<GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            smaServiceOrderLineTaxExtension = this.smaServiceOrderLineTaxExtension_IN();
        }
        //</GIN>

        super(_fieldId);

        switch (_fieldId)
        {
            case(fieldNum(SMAServiceOrderLine, ProjId)):
            this.fieldModifiedProjId();
                if (this.TransactionType == SMATransactionType::Expense)
                {
                    this.setDefaultOffsetAccount();
                }
                break;

            case(fieldNum(SMAServiceOrderLine, ProjCategoryId)):
            this.SMAServiceLineMap::fieldModifiedCategoryId();
                if (this.TransactionType == SMATransactionType::Expense)
                {
                    this.setDefaultOffsetAccount();
                }
                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    smaServiceOrderLineTaxExtension.AssessableValueTransactionCurrency = this.Qty * this.ProjSalesPrice;
                    this.SysExtensionSerializerMap::packExtensionTable(smaServiceOrderLineTaxExtension);
                }
                // </GIN>
                break;

            case(fieldNum(SMAServiceOrderLine, ActivityNumber)):
            this.SMAServiceLineMap::fieldModifiedActivityId();
                break;

            case(fieldNum(SMAServiceOrderLine, ProjLinePropertyId)):
            this.SMAServiceLineMap::fieldModifiedLinePropertyId();
                break;

            case(fieldNum(SMAServiceOrderLine, Worker)):
            this.SMAServiceLineMap::fieldModifiedWorker();
                if (this.TransactionType == SMATransactionType::Expense)
                {
                    this.setDefaultOffsetAccount();
                }
                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    smaServiceOrderLineTaxExtension.AssessableValueTransactionCurrency = this.Qty * this.ProjSalesPrice;
                    this.SysExtensionSerializerMap::packExtensionTable(smaServiceOrderLineTaxExtension);
                }
                // </GIN>
                break;

            case(fieldNum(SMAServiceOrderLine, SignOff)):
            if (this.RecId)
                {
                    this.updateSignOff();
                }
                else
                {
                    this.SignOff = NoYes::No;
                }
                break;

            case(fieldNum(SMAServiceOrderLine, ItemId)):
                inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);
                inventDim = this.inventDim();
                inventDim.clearNotProductDim(inventDimGroupSetup);
                this.inventDimId = InventDim::findOrCreate(inventDim).inventDimId;
                this.SMAServiceLineMap::fieldModifiedItemId();
                this.postUpdateDimDependantFields();
                break;

            case(fieldNum(SMAServiceOrderLine, ProjCategoryId)):
            this.SMAServiceLineMap::fieldModifiedCurrency();
                break;

            case(fieldNum(SMAServiceOrderLine, Qty)):
            this.SMAServiceLineMap::fieldModifiedQty();
                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    smaServiceOrderLineTaxExtension.AssessableValueTransactionCurrency = this.Qty * this.ProjSalesPrice;
                    this.SysExtensionSerializerMap::packExtensionTable(smaServiceOrderLineTaxExtension);
                }
                // </GIN>
                break;

            case(fieldNum(SMAServiceOrderLine, ProjCostPrice)):
            this.ProjSalesPrice = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPrice);
                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    smaServiceOrderLineTaxExtension.AssessableValueTransactionCurrency = this.Qty * this.ProjSalesPrice;
                    this.SysExtensionSerializerMap::packExtensionTable(smaServiceOrderLineTaxExtension);
                }
                // </GIN>
                break;

            case(fieldNum(SMAServiceOrderLine, TransactionType)):
            this.ProjCategoryId     = '';
                this.ActivityNumber     = '';
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && this.TransactionType == SMATransactionType::Item)
                {
                    transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(this);

                    smaServiceOrderLineTaxExtension.initCompanyLocation();

                    if (transTaxInformation)
                    {
                        ttsbegin;
                        transTaxInformation.ExciseType = ExciseType_IN::Manufacturer;
                        transTaxInformation.SalesTaxFormTypes = 0;
                        transTaxInformation.ServiceCode = 0;
                        transTaxInformation.VATCommodityCode = 0;

                        transTaxInformation.update();
                        ttscommit;
                    }
                }
                // </GIN>
                break;

            case(fieldNum(SMAServiceOrderLine, OffsetAccountTypeExpense)):
            this.InvoiceId              = '';
                this.LedgerDimension        = 0;

            case (fieldNum(SMAServiceOrderLine, ServiceObjectRelationId)):
            if (!this.ServiceObjectRelationId)
                {
                    this.ServiceObjectId = '';
                }
                else
                {
                    smaServiceObjectRelation = SMAServiceObjectRelation::find(this.ServiceObjectRelationId);
                    this.ServiceObjectId = smaServiceObjectRelation.ServiceObjectId;
                    if (this.TransactionType == SMATransactionType::Item)
                    {
                        this.ItemId = smaServiceObjectRelation.itemId();
                        this.SMAServiceLineMap::fieldModifiedItemId();
                        this.InventDimId = smaServiceObjectRelation.InventDimId;
                    }
                }
                break;

            case (fieldNum(SMAServiceOrderLine, TimeSheetStartTime)):
                this.setQtyFromToTime();
                break;

            case (fieldNum(SMAServiceOrderLine, TimeSheetEndTime)):
                this.setQtyFromToTime();
                break;

            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles reinitialization if needed when an associated <c>InventDim</c> buffer is changed.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer.</param>
    /// <param name = "_inventDimFieldId">The field that was changed.</param>
    public void modifyInventDim(InventDim _inventDim, FieldId _inventDimFieldId = 0)
    {
        boolean shouldDoDimensionSpecificDefaulting = _inventDim.siteOrProductDimFieldModified(_inventDimFieldId) || _inventDimFieldId == fieldNum(InventDim, InventLocationId);
        this.InventDimId = _inventDim.inventDimId;

        if (shouldDoDimensionSpecificDefaulting)
        {
            this.SMAServiceLineMap::initDimensionsSpecificDefaulting();
            this.postUpdateDimDependantFields();
        }
        this.updatePrices();

        _inventDim.refreshFormDataSource(this.inventDimId);

        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            LogisticsPostalAddressRecId logisticsPostalAddressRecId
                = LogisticsPostalAddress::findByLocation(TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(_inventDim.InventLocationId, _inventDim.InventSiteId)).RecId;

            TransTaxInformationHelper::newHelper().updateCompanyLocationFromTransTable(this, logisticsPostalAddressRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimension</Name>
				<Source><![CDATA[
    public DimensionDynamicAccount parmLedgerDimension(DimensionDynamicAccount _ledgerDimension = this.LedgerDimension)
    {
        this.LedgerDimension = _ledgerDimension;
        return this.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDate</Name>
				<Source><![CDATA[
    public date priceDate()
    {
        return this.Origin == SMAServiceOrderOrigin::System && this.DateCalculated ? this.DateCalculated : this.DateExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revokeCancelLine</Name>
				<Source><![CDATA[
    public void revokeCancelLine()
    {
        if (this.ServiceOrderStatus == SMAServiceOrderStatus::Canceled)
        {
            ttsbegin;

            this.ServiceOrderStatus = SMAServiceOrderStatus::Created;
            this.update();

            this.generateActivity();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    display SalesAmount salesAmount()
    {
        return this.Qty * this.ProjSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get default offset account for project ledger journal.
    /// </summary>
    /// <remarks>
    /// The default offset account will only be set, if an offset account
    /// has not been set for the active ledger journal.
    /// </remarks>
    public void setDefaultOffsetAccount()
    {
        LedgerJournalName ledgerJournalName = LedgerJournalName::find(SMAParameters::find().ProjJournalExpense);
        ResourceRecId resourceRecId = ResourceFacade::findByWorker(this.Worker);
        if (ledgerJournalName.OffsetLedgerDimension)
        {
            this.setLedgerDimension(ledgerJournalName.OffsetAccountType, ledgerJournalName.OffsetLedgerDimension, resourceRecId);
        }
        else
        {
            this.setOffsetAccountFromProjOffsetSetup(resourceRecId);
        }

        this.initFromOffsetAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOffsetAccountFromProjOffsetSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default offset account from the project default offset setup, if found.
    /// </summary>
    /// <remarks>
    /// The projDefaultOffsetSetup.LedgerDimension is a default account and must be converted to a ledger dimension account to be used in posting
    /// </remarks>
    private void setOffsetAccountFromProjOffsetSetup(ResourceRecId _resourceRecId)
    {
        ProjDefaultOffsetSetup projDefaultOffsetSetup = ProjDefaultOffsetSetup::findDefaultOffsetAccount(this.ProjId, this.ProjCategoryId, _resourceRecId);
        if (projDefaultOffsetSetup)
        {
            this.setLedgerDimension(projDefaultOffsetSetup.getLedgerOffsetType(), projDefaultOffsetSetup.LedgerDimension, _resourceRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension along with its segments when account is of type Ledger.
    /// </summary>
    /// <param name = "_ledgerDimension">The default ledger dimension</param>
    /// <param name = "_workerResourceRecId">The resource id of the worker</param>
    /// <remarks>
    /// The dynamic account types of cust/vend/etc can be used directly for ledger dimensions.
    /// </remarks>
    private void setLedgerDimension(LedgerJournalACType _ledgerJournalACType, DimensionDynamicDefaultAccount _ledgerDimension, ResourceRecId _workerResourceRecId)
    {
        this.OffsetAccountTypeExpense = _ledgerJournalACType;
        if (this.OffsetAccountTypeExpense == LedgerJournalACType::Ledger)
        {
            DimensionDefault workerDefaultDimension = ResourceFacade::getDefaultDimension(_workerResourceRecId);
            LedgerDefaultDimensionValueSet projDefaultDimension = ProjTable::find(this.ProjId).DefaultDimension;
            this.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimension, projDefaultDimension, workerDefaultDimension);
        }
        else 
        {
            this.LedgerDimension = _ledgerDimension;       
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>InventDimId</c> parameter to the <c>SMAServiceOrderLine.inventDimId</c> field and
    ///    assigns default values that are based on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value that should be applied to the <c>SMAServiceOrderLine.InventDimId</c>
    ///    field.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaServiceOrderLineTaxExtension_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>SMAServiceOrderLineTaxExtension_IN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>SMAServiceOrderLineTaxExtension_IN</c> associated with the current record.
    /// </returns>
    public SMAServiceOrderLineTaxExtension_IN smaServiceOrderLineTaxExtension_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(SMAServiceOrderLineTaxExtension_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    ///    found <c>InventDimId</c> to the <c>SMAServiceOrderLine.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> record buffer that should be referenced by the current
    ///    <c>SMAServiceOrderLine</c> record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNum</Name>
				<Source><![CDATA[
    public LineNum setLineNum()
    {
        LineNum tmpLineNum;

        tmpLineNum = (select maxof (ServiceOrderLineNum) from smaServiceOrderLine where smaServiceOrderLine.ServiceOrderId == this.ServiceOrderId).ServiceOrderLineNum;
        tmpLineNum++;

        return tmpLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyFromToTime</Name>
				<Source><![CDATA[
    public void setQtyFromToTime()
    {
        this.Qty = ((this.TimeSheetEndTime - this.TimeSheetStartTime) / 3600);
    }

]]></Source>
			</Method>
			<Method>
				<Name>signOffActivity</Name>
				<Source><![CDATA[
    void signOffActivity()
    {
        smmActivities           activity;
        SMAServiceOrderLine     serviceLine;

        if (this.ActivityId)
        {
            if (this.SignOff)
            {
                select firstonly activity join RecId, SignOff, ActivityId from serviceLine where
                activity.ActivityNumber == serviceLine.ActivityId &&
                activity.Closed         == NoYes::No &&
                activity.ActivityNumber == this.ActivityId &&
                serviceLine.SignOff     == NoYes::No &&
                serviceLine.RecId       != this.RecId;

                if (!activity)
                {
                    ttsbegin;

                    select forupdate activity where activity.ActivityNumber == this.ActivityId;

                    if (activity.Closed == NoYes::No)
                    {
                        activity.Closed = NoYes::Yes;
                        activity.update();
                    }

                    ttscommit;
                }
            }
            else
            {
                ttsbegin;

                select forupdate activity where activity.ActivityNumber == this.ActivityId;

                if (activity.Closed == NoYes::Yes)
                {
                    activity.Closed = NoYes::No;
                    activity.update();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>signOffServiceOrder</Name>
				<Source><![CDATA[
    void signOffServiceOrder()
    {
        SMAServiceOrderTable   serviceOrderTable;
        SMAServiceOrderLine    serviceOrderLine;

        serviceOrderTable = SMAServiceOrderTable::find(this.ServiceOrderId,true);

        if (this.SignOff != serviceOrderTable.SignOff)
        {
            // Sign off the Service Order if all lines are signed off
            select RecId from  serviceOrderLine
                     where serviceOrderLine.ServiceOrderId  == this.ServiceOrderId
                        && serviceOrderLine.SignOff         == NoYes::No;
            serviceOrderTable.SignOff   = !serviceOrderLine.RecId;
            serviceOrderTable.update(true, false, null, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _signOffActivities = true)
    {
        boolean signOffUpdate = this.orig().SignOff != this.SignOff;
        SMAServiceOrderLine this_Orig = this.orig();

        ttsbegin;

        this.updateActivity();

        super();

        ttscommit;

        if (signOffUpdate)
        {
            if (_signOffActivities)
            {
                this.signOffActivity();
            }

            SMAServiceLevelAgreementLogHelper::checkUpdateSignOffServiceOrderFromLine(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates activity related to the service order line.
    /// </summary>
    public void updateActivity()
    {
        smmActivities   activity;

        if (this.ActivityId)
        {
            activity = smmActivities::find(this.ActivityId);

            if (!activity.Closed)
            {
                // If Employee or task were changed activity should be recreated.
                // Quantity changes will be taken into account during activity creation
                if (    this.Worker         != this.orig().Worker
                ||  this.ServiceTaskId  != this.orig().ServiceTaskId)
                {
                    this.changeEmployeeAndTask(this.orig());
                    this.createUpdateActivity('');
                }
                else if (this.Qty           != this.orig().Qty)
                {
                    this.updateUpdateActivity(this.Qty - this.orig().Qty);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the price of the service order line.
    /// </summary>
    public void updatePrices()
    {
        this.ProjCostPrice  = this.SMAServiceLineMap::projCostPrice();
        this.ProjSalesPrice = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSignOff</Name>
				<Source><![CDATA[
    void updateSignOff()
    {
        boolean                 updateThroughSLA = false;

        updateThroughSLA = (this.SignOff == NoYes::Yes &&
                        SMAServiceLevelAgreementLogHelper::shouldSignOffServiceOrderLines(this.ServiceOrderId, this.RecId) &&
                        SMAServiceLevelAgreementLogHelper::checkAndStopSLA(this.ServiceOrderId, this));

        if (!updateThroughSLA)
        {
            ttsbegin;
            this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUpdateActivity</Name>
				<Source><![CDATA[
    public void updateUpdateActivity(Qty _deltaQty = 0)
    {
        SMAServiceOrderTable    serviceOrderTable = SMAServiceOrderTable::find(this.ServiceOrderId);
        smmActivities           activity;
        smmActivityId           activityId;

        ttsbegin;

        if (this.TransactionType == SMATransactionType::Hour && this.Worker && serviceOrderTable.ServiceDateTime && this.ActivityId != '')
        {
            if (this.ServiceTaskId)
            {
                activityId = this.findActivityWithSameProfile();
            }

            if (!activityId)
            {
                select forupdate activity where activity.ActivityNumber == this.ActivityId;
                if (activity)
                {
                    activity.TotalWork = this.Qty;
                }
            }
            else
            {
                select forupdate activity where activity.ActivityNumber == activityId;
                if (activity)
                {
                    activity.TotalWork += _deltaQty;
                }
            }

            activity.findEndDateTimeBasedOnTotalWork();

            if (activity.orig().TotalWork != activity.TotalWork)
            {
                activity.Dispatched = SMADispatched::No;
            }

            activity.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        ret = ret && SMAServiceOrderTable::find(this.ServiceOrderId).checkStageAllowDelete();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        ret = ret && SMAServiceOrderTable::find(this.ServiceOrderId).checkStageAllowModify();

        switch (_fieldIdToCheck)
        {
            case fieldNum(SMAServiceOrderLine, TransactionType):
                ret = ret && this.SMAServiceLineMap::checkTransTypeAllowed();
                break;

            case fieldNum(SMAServiceOrderLine, ProjCategoryId):
                ret = ret && this.SMAServiceLineMap::checkProjCategoryId();
                break;

            case fieldNum(SMAServiceOrderLine, Worker):
                ret = ret && this.SMAServiceLineMap::checkWorker();
                break;

            case fieldNum(SMAServiceOrderLine, InventDimId):
                ret = ret && InventDim::exist(this.InventDimId);

            case fieldNum(SMAServiceOrderLine, ActivityNumber):
                ret = ret && this.checkActivity();
                break;

            case fieldNum(SMAServiceOrderLine, ServiceTaskId):
            if (ret && this.ServiceTaskId)
                {
                    ret = ret && (SMAServiceTaskRelation::existRelation(tableNum(SMAServiceOrderTable), this.ServiceOrderId, this.ServiceTaskId) ||
                              SMAServiceTaskRelation::existRelation(tableNum(SMAAgreementTable), this.AgreementId, this.ServiceTaskId));
                }
                break;

            case fieldNum(SMAServiceOrderLine, ServiceObjectRelationId):
            if (ret && this.ServiceObjectRelationId)
                {
                    ret = ret && (SMAServiceObjectRelation::existRelation(this.ServiceObjectRelationId, this.ServiceOrderId, tableNum(SMAServiceOrderTable)) ||
                              SMAServiceObjectRelation::existRelation(this.ServiceObjectRelationId, this.AgreementId, tableNum(SMAAgreementTable)));
                }
                break;

            case fieldNum(SMAServiceOrderLine, LedgerDimension):
                // Use BankAccountTableLookup view, since it contains a publicly accessible
                // subset of the info in BankAccountTable
                if (ret && this.OffsetAccountTypeExpense == LedgerJournalACType::Bank)
                {
                    ret = ret && BankAccountTableLookup::checkIsActive(
                             BankAccountTableLookup::findByLedgerDimension(this.parmLedgerDimension()).AccountID);
                }
                break;

            case fieldNum(SMAServiceOrderLine, Qty):
                ret = ret && this.validateQty(this.Qty);
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validating that the Line Quantity is meeting the constraints.
    /// </summary>
    /// <param name = "_qty"> The quantity value to be validated.</param>
    /// <returns> Returns true if the quantity value has been validated; otherwise false. </returns>
    protected boolean validateQty(SMAQuantity _qty)
    {
        if (_qty >= 0)
        {
            return true;
        }
        else
        {
            return checkFailed("@SCM:SMAQtyLineValidation");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.ServiceOrderStatus == SMAServiceOrderStatus::Posted)
        {
            // It is not possible to change transferred line.
            ret = checkFailed("@SYS91979");
        }

        if (!SMAServiceOrderLineTimeIntervalFlight::instance().isEnabled() && 
            this.ServiceTimeStartAfter > this.ServiceTimeEndBefore)
        {
            warning("@SYS32682");
            ret = false;
        }

        // Check the stage that it does allow to modify
        ret = ret && SMAServiceOrderTable::find(this.ServiceOrderId).checkStageAllowModify();

        if (ret)
        {
            ret = this.SMAServiceLineMap::validateWrite();
        }

        if (ret)
        {
            ret = new ProjValCheckTrans().validateMandatory(this);
        }

        if (ret)
        {
            ret = this.checkActivity();
        }

        if (ret && this.TransactionType == SMATransactionType::Item && this.SignOff)
        {
            // check dimensions
            InventDim inventDim = InventDim::find(this.InventDimId);
            ret = ret && inventDim.checkDimFieldsValid(this.ItemId, inventDim);
        }

        if (ret && this.TransactionType == SMATransactionType::Expense && this.SignOff)
        {
            // Cost currency, offset account must be filled in
            if (!this.CurrencyIdCost)
            {
                // Cost currency must be filled in.
                ret = checkFailed("@SYS96131");
            }
            else
            {
                if (!this.LedgerDimension)
                {
                    // Offset account is not specified.
                    ret = checkFailed("@SYS25236");
                }
                else
                {
                    if (this.InvoiceId == '')
                    {
                        // If the Offsettype is a vendor, InvoiceId is reqiured
                        if (this.invoiceIdRequired())
                        {
                            // Invoice number is not filled in
                            ret = checkFailed("@SYS24539");
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the worker that is related to the record.
    /// </summary>
    /// <returns>
    /// A string that contains the name.
    /// </returns>
    public display HcmWorkerName workerName()
    {
        return HcmWorker::find(this.Worker).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjCategoryQuery</Name>
				<Source><![CDATA[
    public static Query buildProjCategoryQuery(ProjId _projId, HcmPersonnelNumberId _personnelNumberId, Args _args)
    {
        Query                   query;
        ProjCategoryLookup      pcLookup;
        ProjValCheckTrans       projValTrans;
        TableId                 tmpTableId;
        str                     formName;

        if (_args)
        {
            tmpTableId = _args.dataset();
            if (_args.caller())
            formName = _args.caller().name();
        }

        // set the value of the fields that will be used to build the query for the lookup
        projValTrans    = new ProjValCheckTrans();
        if (projValTrans.checkBuffer(_args))
        {
            projValTrans.setVariablesFromBuffer(_args);
        }

        // Build the query used for the category lookup
        pcLookup = new ProjCategoryLookup();

        pcLookup.parmCategoryType(projValTrans.parmCategoryType());
        pcLookup.parmFilterEstimate(projValTrans.parmFilterEstimate());
        pcLookup.parmFilterSubscription(projValTrans.parmFilterSubscription());
        pcLookup.parmShowActiveOrSubscription(projValTrans.parmShowActiveOrSubscription());
        pcLookup.parmSubscription(projValTrans.parmSubscription());
        pcLookup.parmShowInactiveCategories(ProjParameters::find().ShowInactiveCategories);
        pcLookup.parmFormName(formName);
        query = pcLookup.buildQuery(tmpTableId, _projId, ResourceFacade::findByWorker(HcmWorker::findByPersonnelNumber(_personnelNumberId).RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(SMAServiceOrderId _serviceOrderId)
    {
        return (select firstonly RecId from smaServiceOrderLine where smaServiceOrderLine.ServiceOrderId == _serviceOrderId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAgreementId</Name>
				<Source><![CDATA[
    public static boolean existAgreementId(SMAAgreementId _agreementId)
    {
        boolean ret = false;

        if (_agreementId)
        {
            ret = (select firstonly RecId from smaServiceOrderLine where smaServiceOrderLine.AgreementId == _agreementId).RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existServiceOrderLine</Name>
				<Source><![CDATA[
    public static boolean existServiceOrderLine(SMAServiceOrderId _serviceOrderId)
    {
        boolean ret = false;

        if (_serviceOrderId)
        {
            ret = (select firstonly RecId from smaServiceOrderLine where smaServiceOrderLine.ServiceOrderId == _serviceOrderId).RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existServiceOrderLineStatus</Name>
				<Source><![CDATA[
    public static boolean existServiceOrderLineStatus(SMAServiceOrderId _serviceOrderId, SMAServiceOrderStatus _status)
    {
        boolean ret = false;

        if (_serviceOrderId)
        {
            ret = (select firstonly RecId from smaServiceOrderLine
                where smaServiceOrderLine.ServiceOrderId == _serviceOrderId
                    && smaServiceOrderLine.ServiceOrderStatus == _status).RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTask</Name>
				<Source><![CDATA[
    public static boolean existTask(SMAServiceOrderId   _serviceOrderId,
                                SMAServiceTaskId    _taskId,
                                SMAAgreementId      _agreementId = '')
    {
        boolean ret = false;

        if (_taskId)
        {
            if (_agreementId)
            {
                ret = (select firstonly RecId from smaServiceOrderLine
                        where smaServiceOrderLine.AgreementId    == _agreementId
                        &&    smaServiceOrderLine.ServiceTaskId  == _taskId).RecId != 0;
            }
            else
            {
                ret = (select firstonly RecId from smaServiceOrderLine
                        where smaServiceOrderLine.ServiceOrderId == _serviceOrderId
                        &&    smaServiceOrderLine.ServiceTaskId  == _taskId).RecId != 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTransTypePosted</Name>
				<Source><![CDATA[
    public static container existTransTypePosted(SMAServiceOrderId        serviceOrderId,
                                NoYes hour              = NoYes::No,
                                NoYes itemJournal       = NoYes::No,
                                NoYes itemRequirement   = NoYes::No,
                                NoYes expense           = NoYes::No,
                                NoYes fee               = NoYes::No)
    {
        container               existTransType = [false,false,false,false,false];
        SMAServiceOrderLine     serviceOrderLine;
        SalesLine               salesLine;

        if (hour)
        {
            select firstonly serviceOrderLine where serviceOrderLine.ServiceOrderId == serviceOrderId &&
                                    serviceOrderLine.TransactionType == SMATransactionType::Hour  &&
                                    serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Posted;

            if (serviceOrderLine)
            {
                existTransType = conPoke(existTransType,1,true);
            }
        }

        if (itemJournal)
        {
            select firstonly serviceOrderLine where serviceOrderLine.ServiceOrderId == serviceOrderId &&
                                    serviceOrderLine.TransactionType            == SMATransactionType::Item  &&
                                    serviceOrderLine.ServiceOrderStatus         == SMAServiceOrderStatus::Posted;

            if (serviceOrderLine)
            {
                existTransType = conPoke(existTransType,2,true);
            }
        }

        if (itemRequirement)
        {
            select firstonly salesLine where salesLine.ServiceOrderId            == serviceOrderId &&
                                         salesLine.SalesType                 == SalesType::ItemReq;

            if (salesLine)
            {
                existTransType = conPoke(existTransType,3,true);
            }
        }

        if (expense)
        {
            select firstonly serviceOrderLine where serviceOrderLine.ServiceOrderId     == serviceOrderId &&
                                                serviceOrderLine.TransactionType    == SMATransactionType::Expense &&
                                                serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Posted;

            if (serviceOrderLine)
            {
                existTransType = conPoke(existTransType,4,true);
            }
        }

        if (fee)
        {
            select firstonly serviceOrderLine where serviceOrderLine.ServiceOrderId     == serviceOrderId &&
                                                serviceOrderLine.TransactionType    == SMATransactionType::Fee &&
                                                serviceOrderLine.ServiceOrderStatus == SMAServiceOrderStatus::Posted;

            if (serviceOrderLine)
            {
                existTransType = conPoke(existTransType,5,true);
            }
        }

        return existTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SMAServiceOrderLine find(SMAServiceOrderId _serviceOrderId, LineNum _serviceOrderLineNum, boolean _forupdate = false)
    {
        SMAServiceOrderLine serviceOrderLine = null;

        if (_serviceOrderId && _serviceOrderLineNum)
        {
            serviceOrderLine.selectForUpdate(_forupdate);

            select firstonly serviceOrderLine
            index hint ServiceOrderIdx
            where serviceOrderLine.ServiceOrderId        == _serviceOrderId &&
                  serviceOrderLine.ServiceOrderLineNum   == _serviceOrderLineNum;
        }

        return serviceOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static SMAServiceOrderLine findRecId(RecId      _recId,
                           boolean              _update = false)
    {
        SMAServiceOrderLine smaServiceOrderLine;

        if (_update)
        {
            smaServiceOrderLine.selectForUpdate(_update);
        }

        select smaServiceOrderLine
        where smaServiceOrderLine.RecId == _recId;

        return smaServiceOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateDimDependantFields</Name>
				<Source><![CDATA[
    private void postUpdateDimDependantFields()
    {
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            smaServiceOrderLineTaxExtension_IN smaServiceOrderLineTaxExtension = this.smaServiceOrderLineTaxExtension_IN();
            smaServiceOrderLineTaxExtension.maxRetailPrice();
            smaServiceOrderLineTaxExtension.AssessableValueTransactionCurrency = this.Qty * this.ProjSalesPrice;
            this.SysExtensionSerializerMap::packExtensionTable(smaServiceOrderLineTaxExtension);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of inventory item order setup based on item setup type.
    /// </summary>
    /// <returns>Returns the type of inventory item order setup.</returns>
    public InventItemOrderSetupType getInventItemOrderSetupType()
    {
        return InventItemOrderSetupType::Invent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SMAManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS122715</DeveloperDocumentation>
	<Label>@SYS88878</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ServiceOrderId</TitleField1>
	<TitleField2>ServiceOrderLineNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ServiceOrderIdx</ClusteredIndex>
	<Modules>ServiceManagement</Modules>
	<PrimaryIndex>ServiceOrderIdx</PrimaryIndex>
	<ReplacementKey>ServiceOrderIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>SMAServiceOrderLine</Relation>
			<Table>TaxGSTTaxInformation_MY</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activity</Name>
			<Label>@SYS7772</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement</Name>
			<Label>@SYS15240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceTaskId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateControl</Name>
			<Label>@SYS16056</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DateCalculated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateExecution</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DescriptionService</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Employee</Name>
			<Label>@SYS4705</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExpenseCost</Name>
			<Label>@SYS99164</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyIdCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupExpense</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupExpense</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountTypeExpense</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Origin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SignOff</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IdentificationKey</Name>
			<Label>@SYS12005</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SignOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceObjectRelationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceTaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalestPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS81755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceRelation</Name>
			<Label>@SYS90610</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceObjectRelationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceObjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceTaskId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceTime</Name>
			<Label>@SYS90312</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceTimeStartAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceTimeEndBefore</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeSheet</Name>
			<Label>@SYS716</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimeSheetStartTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeSheetEndTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeWindow</Name>
			<Label>@SYS90551</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DateRangeFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateRangeTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS99887</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityId</ExtendedDataType>
			<Label>@SYS113232</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAAgreementId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AgreementLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAAgreementLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyIdCost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS87716</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateCalculated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMADateCalculated</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateExecution</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMADateExecution</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateRangeFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMADateRangeFrom</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateRangeTo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMADateRangeTo</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteSMAItemLinkedDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DescriptionService</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMADescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSalesPriceModified</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetAccountTypeExpense</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS23950</Label>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Origin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SMAServiceOrderOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjCostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransTxt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAQuantity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceObjectId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceObjectId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceObjectRelationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceObjectRelationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceOrderId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceOrderId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ServiceOrderLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceOrderStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SMAServiceOrderStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceTaskId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceTaskId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ServiceTimeEndBefore</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAEndBeforeTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ServiceTimeStartAfter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStartAfter</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SignOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMASignOff</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupExpense</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroupJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupExpense</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroupJournal</ExtendedDataType>
			<Label>@SYS21932</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>TimeSheetEndTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceFinishedTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>TimeSheetStartTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceStartedTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SMATransactionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SMAWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValue_IN</Name>
			<ConfigurationKey>SysDeletedObjects73</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompanyLocation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomerLocation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomerTaxInformation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsTariffCodeTable_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DirectSettlement_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>DirectSettlement_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DSA_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseRecordType_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>ExciseRecordType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExciseTariffCodes_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExciseType_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>ExciseType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HSNCodeTable_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ITCCategory_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<EnumType>ITCCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostalAddress_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTaxFormTypes_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>SalesTaxFormTypesRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceAccountingCodeTable_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceCodeTable_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxInventVATCommodityCodeId_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxInventVATCommodityCodeId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSGroup_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSGroup_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorLocation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorTaxInformation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WarehouseLocation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ServiceOrderIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceOrderId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ServiceOrderLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ServiceObjectIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceObjectId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ServiceTaskIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceTaskId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ServiceIdStatusTransType</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceOrderId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ServiceOrderStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SMAServiceLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AgreementId</MapField>
					<MapFieldTo>AgreementId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AgreementLineId</MapField>
					<MapFieldTo>AgreementLineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>ProjCurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyIdCost</MapField>
					<MapFieldTo>CurrencyIdCost</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DateCalculated</MapField>
					<MapFieldTo>DateCalculated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DateExecution</MapField>
					<MapFieldTo>DateExecution</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DescriptionService</MapField>
					<MapFieldTo>DescriptionService</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Dimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntervalId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemSetupType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>ServiceOrderLineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Origin</MapField>
					<MapFieldTo>Origin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostPriceCost</MapField>
					<MapFieldTo>ProjCostPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjJournalId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjJournalLineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPriceCost</MapField>
					<MapFieldTo>ProjSalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroup</MapField>
					<MapFieldTo>ProjTaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroup</MapField>
					<MapFieldTo>ProjTaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceObjectId</MapField>
					<MapFieldTo>ServiceObjectId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceOrderId</MapField>
					<MapFieldTo>ServiceOrderId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceOrderStatus</MapField>
					<MapFieldTo>ServiceOrderStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceTaskId</MapField>
					<MapFieldTo>ServiceTaskId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceTimeEndBefore</MapField>
					<MapFieldTo>ServiceTimeEndBefore</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceTimeStartAfter</MapField>
					<MapFieldTo>ServiceTimeStartAfter</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Stopped</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TimeAgreementId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TimeSheetEndTime</MapField>
					<MapFieldTo>TimeSheetEndTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TimeSheetStartTime</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionType</MapField>
					<MapFieldTo>TransactionType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransTxt</MapField>
					<MapFieldTo>ProjTransTxt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitID</MapField>
					<MapFieldTo>Unit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Worker</MapField>
					<MapFieldTo>Worker</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>Unit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>ServiceOrderId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroupExpense</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroupExpense</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SMAServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyIdCost</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyIdCost</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DispatchActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DispatchActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SMAServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityId</Name>
					<SourceEDT>smmActivityId</SourceEDT>
					<Field>ActivityId</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Worker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjCostTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCostTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Expense</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionType</Name>
					<Field>TransactionType</Field>
					<ValueStr>SMATransactionType::Expense</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SMAServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectSalesCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjectSalesCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SMAServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCurrencyCode</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>ProjCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroup</Name>
					<Field>ProjTaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjectTaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroup</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>ProjTaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjEmplTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjEmplTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Hour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionType</Name>
					<Field>TransactionType</Field>
					<ValueStr>SMATransactionType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionType</Name>
					<Field>TransactionType</Field>
					<ValueStr>SMATransactionType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjRevenueTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjRevenueTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Fee</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionType</Name>
					<Field>TransactionType</Field>
					<ValueStr>SMATransactionType::Fee</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<Field>ProjTransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAAgreementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAAgreementTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementId</Name>
					<Field>AgreementId</Field>
					<RelatedField>AgreementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AgreementIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SMAServiceObjectRelation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SMAServiceObjectRelation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceObjectRelationId</Name>
					<Field>ServiceObjectRelationId</Field>
					<RelatedField>ServiceObjectRelationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAServiceObjectTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceObjectTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceObjectId</Name>
					<Field>ServiceObjectId</Field>
					<RelatedField>ServiceObjectId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ObjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SMAServiceOrderTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceOrderTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ServiceOrder</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceOrderId</Name>
					<Field>ServiceOrderId</Field>
					<RelatedField>ServiceOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAServiceTask</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceTask</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceTaskId</Name>
					<Field>ServiceTaskId</Field>
					<RelatedField>ServiceTaskId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaskIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxItemGroupExpense</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ItemSalesTaxGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupExpense</Name>
					<Field>TaxItemGroupExpense</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Unit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ServiceOrderLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Unit</Name>
					<Field>Unit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>