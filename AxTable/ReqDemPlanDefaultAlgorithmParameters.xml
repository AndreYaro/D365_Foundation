<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanDefaultAlgorithmParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqDemPlanDefaultAlgorithmParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setRecordValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Restores the passed values for the algorithm parameter. It updates the existing record, if a record with the paramter name is found,
    ///     and inserts a new record if otherwise.
    /// </summary>
    /// <param name="_realName">
    ///     The actual name for the algorithm parameter.
    /// </param>
    /// <param name="_friendlyName">
    ///     The friendly name to be used for the parameter.
    /// </param>
    /// <param name="_value">
    ///     The value to be used for the parameter.
    /// </param>
    /// <param name="_valueDescription">
    ///     The value explanation to be used for the parameter.
    /// </param>
    /// <param name="_overwrite">
    ///     Specifies whether to overwrite the parameter value if it already exists.
    /// </param>
    public void setRecordValue(ReqDemPlanAzureMlParameterName _realName,
                               ReqDemPlanAzureMlFriendlyName _friendlyName,
                               ReqDemPlanAzureMlParameterValue _value,
                               ReqDemPlanAzureMlValueDescription _valueDescription,
                               boolean _overwrite = false)
    {
        ReqDemPlanDefaultAlgorithmParameters defaultAlgorithmParameters;

        defaultAlgorithmParameters = ReqDemPlanDefaultAlgorithmParameters::findByRealName(_realName, true);
        if (!defaultAlgorithmParameters || _overwrite)
        {
            defaultAlgorithmParameters.RealName = _realName;
            defaultAlgorithmParameters.FriendlyName = _friendlyName;
            defaultAlgorithmParameters.Value = _value;
            defaultAlgorithmParameters.ValueDescription = _valueDescription;

            defaultAlgorithmParameters.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        ret = super(_fieldIdToCheck);
        if (_fieldIdToCheck == fieldNum(ReqDemPlanDefaultAlgorithmParameters, Value))
        {
            ret = ReqDemPlanDataProcessingHelper::validateMinMaxField(this.RealName, this.Value);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the record based on the specified ID.
    /// </summary>
    /// <param name="_defaultAlgorithmParameterId">
    ///     The specified ID of the record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value which specifies whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record of the <c>ReqDemPlanDefaultAlgorithmParameters</c> table or an empty buffer, if none is found.
    /// </returns>
    public static ReqDemPlanDefaultAlgorithmParameters find(ReqDemPlanDefaultAlgorithmParameter _defaultAlgorithmParameterId, boolean _forUpdate = false)
    {
        ReqDemPlanDefaultAlgorithmParameters defaultAlgorithmParameters;
        defaultAlgorithmParameters.selectForUpdate(_forUpdate);

        if (_defaultAlgorithmParameterId)
        {
            select firstonly defaultAlgorithmParameters
                where defaultAlgorithmParameters.RecId == _defaultAlgorithmParameterId;
        }

        return defaultAlgorithmParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRealName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the record.
    /// </summary>
    /// <param name="_realName">
    ///     The name of the record to be found and returned.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value which specifies whether to select record for update; optional.
    /// </param>
    /// <returns>
    ///     The record found.
    /// </returns>
    public static ReqDemPlanDefaultAlgorithmParameters findByRealName(ReqDemPlanAzureMlParameterName _realName, boolean _forUpdate = false)
    {
        ReqDemPlanDefaultAlgorithmParameters defaultAlgorithmParameters;
        defaultAlgorithmParameters.selectForUpdate(_forUpdate);

        if (_realName)
        {
            select defaultAlgorithmParameters where defaultAlgorithmParameters.RealName == _realName;
        }

        return defaultAlgorithmParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryLookupIAKParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the query that retrieves the forecasting parameters that can be used for item allocation keys.
    /// </summary>
    /// <param name="_serverSupportsForecastingPerIAK">
    ///     A boolean value indicating whether the server supports multiple statistical forecasting models per item allocation keys.
    /// </param>
    /// <param name="_defaultAlgorithmParameterId">
    ///     An ID to use for filtering the results of the query; optional, defaults to zero.
    /// </param>
    /// <returns>
    ///     An initialized query that can retrieve the parameters that match the server settings.
    /// </returns>
    public static Query queryLookupIAKParameters(
        boolean                                 _serverSupportsForecastingPerIAK,
        ReqDemPlanDefaultAlgorithmParameter     _defaultAlgorithmParameterId = 0)
    {
        #ReqDemPlanForecastAlgorithmParameters
        Query                   query   = new Query();
        QueryBuildDataSource    qbds    = query.addDataSource(tableNum(ReqDemPlanDefaultAlgorithmParameters));

        if (!_serverSupportsForecastingPerIAK)
        {
            qbds.addRange(fieldNum(ReqDemPlanDefaultAlgorithmParameters, RealName)).value(queryValue(#MaximumSeriesValueName));
            qbds.addRange(fieldNum(ReqDemPlanDefaultAlgorithmParameters, RealName)).value(queryValue(#MinimumSeriesValueName));
        }
        if (_defaultAlgorithmParameterId != 0)
        {
            qbds.addRange(fieldNum(ReqDemPlanDefaultAlgorithmParameters, RecId)).value(queryValue(_defaultAlgorithmParameterId));
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Replaces the global parameters with the predefined dafault values.
    /// </summary>
    /// <param name="_overwrite">
    ///     Specifies whether to overwrite the parameter value if it already exists
    /// </param>
    public static void setDefaults(boolean _overwrite = false)
    {
        ReqDemPlanDefaultAlgorithmParameters    parameters;
        #ReqDemPlanForecastAlgorithmParameters

        ttsBegin;

        parameters.setRecordValue(#SeasonalityName, "@DMP1530", #SeasonalityValue, "@DMP1531", _overwrite);
        parameters.setRecordValue(#MaximumSeriesValueName,"@DMP1395", #MaximumSeriesValueValue,"@DMP1396", _overwrite);
        parameters.setRecordValue(#MinimumSeriesValueName,"@DMP1397", #MinimumSeriesValueValue,"@DMP1398", _overwrite);

        parameters.setRecordValue(#TimeSeriesModelName,"@DMP1377", #TimeSeriesModelValue,"@DMP1378", _overwrite);
        parameters.setRecordValue(#ConfidenceLevelName,"@DMP1551", #ConfidenceLevelValue,"@DMP1552", _overwrite);
        parameters.setRecordValue(#TestSetSizePercentName,"@DMP1553", #TestSetSizePercentValue,"@DMP1554", _overwrite);
        parameters.setRecordValue(#MissingValueSubstitutionName,"@DMP:ParameterMissingValueSubstitution", #MissingValueSubstitutionValue,"@DMP:ParameterMissingValueSubstitutionDescription", _overwrite);
        parameters.setRecordValue(#ForceSeasonalityName,"@DMP:ParameterForceSeasonality", #ForceSeasonalityValue,"@DMP:ParameterForceSeasonalityDescription", _overwrite);
        parameters.setRecordValue(#MissingValueScopeName,"@DMP:ParameterMissingValueScope", #MissingValueScopeValue,"@DMP:ParameterMissingValueScopeDescription", _overwrite);
        
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ReqDemandPlanning</ConfigurationKey>
	<DeveloperDocumentation>@DMP1376</DeveloperDocumentation>
	<FormRef>ReqDemPlanDefaultAlgorithmParameters</FormRef>
	<Label>@DMP1375</Label>
	<TitleField1>FriendlyName</TitleField1>
	<TitleField2>RealName</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>FriendlyName</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>FriendlyName</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FriendlyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RealName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FriendlyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FriendlyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GridGroup</Name>
			<Label>@DMP1214</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RealName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FriendlyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FriendlyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanAzureMlFriendlyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RealName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanAzureMlParameterName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanAzureMlParameterValue</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValueDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDemPlanAzureMlValueDescription</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FriendlyName</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FriendlyName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RealName</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RealName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>