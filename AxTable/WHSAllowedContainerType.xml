<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSAllowedContainerType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSAllowedContainerType extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        ret = ret && WHSAllowedContainerTypeGroup::find(this.AllowedContainerTypeGroup).canRemoveContainerType(this.ContainerTypeCode);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSAllowedContainerType, ContainerTypeCode):
                    ret = !WHSAllowedContainerType::existForContainerAndAllowedGroup(this.ContainerTypeCode, this.AllowedContainerTypeGroup);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return (_recId) &&
           (select firstonly RecId from WHSAllowedContainerType
            where WHSAllowedContainerType.RecId == _RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForContainerAndAllowedGroup</Name>
				<Source><![CDATA[
    public static boolean existForContainerAndAllowedGroup(
        WHSContainerTypeCode    _containerTypeCode,
        RefRecId                _allowedContainerTypeGroup)
    {
        return (_containerTypeCode)
        &&     (_allowedContainerTypeGroup)
        &&     (select firstonly RecId from WHSAllowedContainerType
                where WHSAllowedContainerType.ContainerTypeCode         == _containerTypeCode
                &&    WHSAllowedContainerType.AllowedContainerTypeGroup == _allowedContainerTypeGroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSAllowedContainerType find(
        RecId   _recId,
        boolean _forupdate = false)
    {
        WHSAllowedContainerType    allowedContainerType;

        if (_recId)
        {
            allowedContainerType.selectForUpdate(_forupdate);

            select firstonly allowedContainerType
                where allowedContainerType.RecId == _recId;
        }

        return allowedContainerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAllowedConTypeAndContainerType</Name>
				<Source><![CDATA[
    public static WHSAllowedContainerType findByAllowedConTypeAndContainerType(
        RefRecId             _allowedContainerTypeGroupId,
        WHSContainerTypeCode _containerTypeCode,
        boolean              _forUpdate = false)
    {
        WHSAllowedContainerType allowedContainerType;

        allowedContainerType.selectForUpdate(_forUpdate);

        if (_allowedContainerTypeGroupId && _containerTypeCode)
        {
            select firstOnly allowedContainerType
                where allowedContainerType.AllowedContainerTypeGroup   == _allowedContainerTypeGroupId
                    && allowedContainerType.ContainerTypeCode          == _containerTypeCode;
        }

        return allowedContainerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContainerTypeLPOnLocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validate that an update to on hand inventory does not include adding a container type to an invalid location.
    /// </summary>
    /// <param name="_args">
    /// The information that describes the changes to the physical on hand.
    /// </param>
    public static void validateContainerTypeLPOnLocationProfile(InventPhysicalOnHandChangeArgs _args)
    {
        WHSLocationProfile  locationProfile = _args.parmWHSLocationProfile();

        // Don't validate any further if allowed container types are not configured.
        if (_args.parmInventDim().wMSLocationId
            && locationProfile.AllowedContainerTypeGroup != 0)
        {
            WHSLicensePlate licensePlate = WHSLicensePlate::find(_args.parmInventDim().LicensePlateId);

            if (licensePlate.RecId && !WHSAllowedContainerType::validateContainerTypeOnLocationProfile(locationProfile, licensePlate.ContainerTypeCode))
            {
                throw error (strFmt("@WAX:ErrorContainerTypeLPOnLocationProfile",
                                     licensePlate.LicensePlateId,
                                     _args.parmWMSLocation().wMSLocationId,
                                     licensePlate.ContainerTypeCode));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContainerTypeOnLocationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the container type is allowed on a location profile.
    /// </summary>
    /// <param name="_locationProfile">
    /// The location profile for the location of the container type.
    /// </param>
    /// <param name="_containerTypeCode">
    /// The container type to be validated.
    /// </param>
    /// <returns>
    /// True if the container type can be put on a location; otherwise, false.
    /// </returns>
    public static boolean validateContainerTypeOnLocationProfile(
        WHSLocationProfile      _locationProfile,
        WHSContainerTypeCode    _containerTypeCode)
    {
        boolean ret = true;

        if (_locationProfile.AllowedContainerTypeGroup != 0)
        {
            //use two statements to hit table cache
            if (_containerTypeCode == '' && WHSAllowedContainerTypeGroup::find(_locationProfile.AllowedContainerTypeGroup).AllowUnspecifiedContainerTypes == NoYes::Yes)
            {
                return true;
            }

            ret = WHSAllowedContainerType::findByAllowedConTypeAndContainerType(_locationProfile.AllowedContainerTypeGroup, _containerTypeCode).RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSAllowedContainerTypeTableDeveloperDoc</DeveloperDocumentation>
	<Label>@WAX:WHSAllowedContainerTypeTable</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>AllowedContainerTypeGroup</TitleField1>
	<TitleField2>ContainerTypeCode</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedContainerTypeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerTypeCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedContainerTypeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerTypeCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AllowedContainerTypeGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContainerTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSContainerTypeCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AllowedContainerTypesIdTypeCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AllowedContainerTypeGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContainerTypeCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSAllowedContainerTypeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSAllowedContainerTypeGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AllowedContainerTypeGroup</Name>
					<Field>AllowedContainerTypeGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSContainerType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSContainerType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainerTypeCode</Name>
					<SourceEDT>WHSContainerTypeCode</SourceEDT>
					<Field>ContainerTypeCode</Field>
					<RelatedField>ContainerTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>