<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntentLetter_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class IntentLetter_IT extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the intent letter.
    /// </summary>
    /// <param name = "_notes">The note text to update.</param>
    public void cancel(Notes _notes = '')
    {
        this.Status = IntentLetterStatus_IT::Canceled;

        if (_notes)
        {
            this.ClosingNotes = _notes;
        }

        this.ClosedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the intent letter.
    /// </summary>
    public void close()
    {
        this.Status = IntentLetterStatus_IT::Closed;
        this.ClosedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.VendName)
        {
            this.VendName = VendTable::find(this.VendAccount).name();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if intent letter is used by invoices.
    /// </summary>
    /// <returns>true if related invoices exist, otherwise false.</returns>
    public boolean isUsedByInvoices()
    {
        VendInvoiceJour vendInvoiceJour;

        select firstonly RecId from vendInvoiceJour
            where vendInvoiceJour.IntentLetterId_IT == this.IntentLetterId;

        return (vendInvoiceJour.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining amount for intent letters by amount
    /// </summary>
    /// <returns>The remaining amount value.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display AmountMST remainAmountMST()
    {
        AmountMST amountMST;

        if (this.IntentLetterAmountMST)
        {
            TaxTrans taxTrans;
            TaxTrans_IT taxTrans_IT;

            select sum(TaxBaseAmount) from taxTrans
                exists join taxTrans_IT
                    where taxTrans_IT.TaxTrans == taxTrans.RecId
                        && taxTrans_IT.IntentLetterOrigin == IntentLetterOrigin_IT::Vend
                        && taxTrans_IT.IntentLetterId == this.IntentLetterId;

            amountMST = this.IntentLetterAmountMST - taxTrans.TaxBaseAmount;
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates purchase orders with new intent letters.
    /// </summary>
    /// <param name = "_excludePartlyDelivered">Determines if partly/fully delivered orders must be updated.</param>
    /// <param name = "_reconfirm">Determines if updated orders must be reconfirmed.</param>
    /// <returns>The number of updated orders.</returns>
    public int updatePurchOrders(boolean _excludePartlyDelivered = false, boolean _reconfirm = false)
    {
        PurchTable purchTable;
        PurchLine purchLine;
        int updateMade;
        TaxGroup plafondTaxgroup = VendParameters::find().PlafondTaxGroup_IT;
        int retryCnt;
        PurchId purchId, prevPurchId;
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        Set confirmPurchIdSet = new Set(Types::String);
        IntentLetter_IT intentLetterCurrent;

        ttsbegin;
        while select forupdate purchTable
            outer join RecId from intentLetterCurrent
                where intentLetterCurrent.IntentLetterId == purchTable.IntentLetterId_IT
            join forupdate purchLine
                where purchLine.PurchId == purchTable.PurchId
                    && (purchLine.PurchStatus == PurchStatus::None
                        || purchLine.PurchStatus == PurchStatus::Backorder
                        || purchLine.PurchStatus == PurchStatus::Received)
                    && !purchLine.IsDeleted
                    && purchTable.InvoiceAccount == this.VendAccount
                    && (purchTable.IntentLetterId_IT == '' || intentLetterCurrent.Status != IntentLetterStatus_IT::Open)
            notExists join inventTransOrigin
                where inventTransOrigin.InventTransId == purchLine.InventTransId
            join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.InvoiceId != ''
        {
            if (!_excludePartlyDelivered || (!purchTable.lastInvoice() && !purchTable.lastPackingSlip()))
            {
                purchLine.reread();

                TransDate purchLineDate = purchLine.deliveryDate(DateTimeUtil::date(purchTable.createdDateTime));
                Plafond_IT plafond = Plafond_IT::findActivePlafond(purchLineDate);

                if (plafond && (purchLineDate >= this.FromDate) && (purchLineDate <= this.ToDate))
                {
                    if (!purchTable.ChangeRequestRequired || purchTable.editAllowedByWorkflow())
                    {
                        if (purchTable.DocumentState == VersioningDocumentState::Confirmed)
                        {
                            confirmPurchIdSet.add(purchTable.PurchId);
                        }

                        purchLine.TaxGroup = plafondTaxgroup;

                        using (IntentLetterContext_IT intentLetterContext = IntentLetterContext_IT::instance())
                        {
                            purchLine.update();
                        }

                        purchTable.reread();

                        if (prevPurchId != purchTable.PurchId)
                        {
                            try
                            {
                                purchTable.TaxGroup = plafondTaxgroup;
                                purchTable.IntentLetterId_IT = this.IntentLetterId;

                                using (IntentLetterContext_IT intentLetterContext = IntentLetterContext_IT::instance())
                                {
                                    purchTable.update();
                                }
                            }
                            catch (exception::UpdateConflict)
                            {
                                if (!retryCnt)
                                {
                                    retryCnt++;
                                    purchTable.reread();
                                    retry;
                                }
                                else
                                {
                                    throw Exception::UpdateConflictNotRecovered;
                                }
                            }
                        }

                        updateMade++;
                    }
                    else
                    {
                        warning(strFmt("@ExtendedItallianLocalization:PurchOrderInActiveWorkflowNotUpdated", purchTable.PurchId));
                    }

                    prevPurchId = purchTable.PurchId;
                }
            }
        }

        if (_reconfirm)
        {
            SetEnumerator e = confirmPurchIdSet.getEnumerator();

            while (e.moveNext())
            {
                purchId = e.current();

                IntentLetter_IT::confirmPurchaseOrder(purchId);
            }
        }

        ttscommit;

        return updateMade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms purch order.
    /// </summary>
    /// <param name = "_purchId">Purchase order ID.</param>
    public static void confirmPurchaseOrder(PurchId _purchId)
    {
        PurchTable purchTable = PurchTable::find(_purchId, true);
        if (purchTable)
        {
            ttsBegin;
            PurchFormLetterParmData purchFormLetterParmData = PurchFormLetterParmData::newData(DocumentStatus::PurchaseOrder);
            purchFormLetterParmData.parmOnlyCreateParmUpdate(true);
            purchFormLetterParmData.createData(false);
            PurchParmUpdate purchParmUpdate = purchFormLetterParmData.parmParmUpdate();

            PurchParmTable purchParmTable;
            purchParmTable.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            purchParmTable.DocumentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            purchParmTable.Ordering = DocumentStatus::Confirmation;
            purchParmTable.ParmJobStatus = ParmJobStatus::Waiting;
            purchParmTable.PurchId = purchTable.PurchId;
            purchParmTable.purchName = purchTable.purchName;
            purchParmTable.DeliveryName = purchTable.DeliveryName;
            purchParmTable.DeliveryPostalAddress = purchTable.DeliveryPostalAddress;
            purchParmTable.OrderAccount = purchTable.OrderAccount;
            purchParmTable.CurrencyCode = purchTable.CurrencyCode;
            purchParmTable.InvoiceAccount = purchTable.InvoiceAccount;
            purchParmTable.ParmId = purchParmUpdate.ParmId;
            purchParmTable.insert();
            PurchFormLetter purchFormLetter = PurchFormLetter::construct(DocumentStatus::PurchaseOrder);
            purchFormLetter.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            purchFormLetter.proforma(false);
            purchFormLetter.specQty(PurchUpdate::All);
            purchFormLetter.purchTable(purchTable);
        
            purchFormLetter.parmParmTableNum(purchParmTable.ParmId);
            purchFormLetter.parmId(purchParmTable.ParmId);
            purchFormLetter.purchParmUpdate(purchFormLetterParmData.parmParmUpdate());
            purchFormLetter.update(purchTable, purchParmTable.ParmId);
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.FromDate > this.ToDate)
        {
            throw warning("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIntentLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>IntentLetter_IT</c> record.
    /// </summary>
    /// <param name = "_vendAccount">THe related vendor account.</param>
    /// <param name = "_letterType">The intent letter type.</param>
    /// <param name = "_fromDate">The beginning date of validity period.</param>
    /// <param name = "_toDate">The ending date of validity period.</param>
    /// <param name = "_amountMST">The intent letter amount value.</param>
    /// <param name = "_letterNotes">The intent letter note.</param>
    /// <param name = "_letterDate">The intent letter accounting date.</param>
    /// <returns>The created <c>IntentLetter_IT</c> record.</returns>
    public static IntentLetter_IT createIntentLetter(
        VendAccount _vendAccount,
        IntentLetterType_IT _letterType,
        FromDate _fromDate,
        ToDate _toDate,
        AmountMST _amountMST,
        Notes _letterNotes,
        IntentLetterPostingDate_IT _letterDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        IntentLetter_IT::validatePlafond(_fromDate, _toDate, _amountMST);

        NumberSeq numberSeq = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedTypeNum(VendIntentLetterId_IT)));
        IntentLetter_IT intentLetter;
        intentLetter.IntentLetterId = numberSeq.num();
        intentLetter.IntentLetterType = _letterType;
        intentLetter.Status = IntentLetterStatus_IT::Open;
        intentLetter.VendAccount = _vendAccount;
        intentLetter.VendName = VendTable::find(_vendAccount).name();
        intentLetter.FromDate = _fromDate;
        intentLetter.ToDate = _toDate;
        intentLetter.IntentLetterDate = _letterDate;
        intentLetter.IntentLetterYear = year(_letterDate);
        intentLetter.IntentLetterAmountMST = _amountMST;
        intentLetter.IntentLetterNotes = _letterNotes;
        intentLetter.insert();

        return intentLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existIntentLetterInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if intent letter exist in specified interval.
    /// </summary>
    /// <param name = "_vendAccount">The vendor account to find intent letters for.</param>
    /// <param name = "_fromDate">The beginning date.</param>
    /// <param name = "_toDate">The ending date.</param>
    /// <returns>true if active letter exists, otherwise false.</returns>
    public static boolean existIntentLetterInPeriod(
        VendAccount _vendAccount,
        FromDate _fromDate,
        ToDate _toDate)
    {
        IntentLetter_IT intentLetter;
        select firstOnly RecId
            from intentLetter
            where intentLetter.VendAccount == _vendAccount
                && intentLetter.IntentLetterType == IntentLetterType_IT::Period
                && intentLetter.Status == IntentLetterStatus_IT::Open
                && (((intentLetter.FromDate >= _fromDate) || (intentLetter.ToDate >= _fromDate)) &&
                    ((intentLetter.FromDate <= _toDate) || (intentLetter.ToDate <= _toDate)));

        return intentLetter.recId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveIntentLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the active intent letter.
    /// </summary>
    /// <param name = "_vendAccount">The vendor account to find intent letters for.</param>
    /// <param name = "_currentDate">The date to perform search for.</param>
    /// <returns>The <c>IntentLetter_IT</c> record.</returns>
    public static IntentLetter_IT findActiveIntentLetter(
        VendAccount _vendAccount,
        TransDate _currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        IntentLetter_IT intentLetter;

        if (_vendAccount)
        {
            select firstonly intentLetter
                order by ToDate asc
                where intentLetter.VendAccount == _vendAccount &&
                      intentLetter.Status == IntentLetterStatus_IT::Open &&
                      intentLetter.FromDate <= _currentDate &&
                      intentLetter.ToDate >= _currentDate;
        }

        return intentLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveIntentLetterByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets intelt letter by type.
    /// </summary>
    /// <param name = "_vendAccount">The vendor account to find intent letters for.</param>
    /// <param name = "_intentLetterType">The intent letter type.</param>
    /// <param name = "_currentDate">The date to perform search for.</param>
    /// <returns>The <c>IntentLetter_IT</c> record.</returns>
    public static IntentLetter_IT findActiveIntentLetterByType(
        VendAccount _vendAccount,
        IntentLetterType_IT _intentLetterType,
        TransDate _currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        IntentLetter_IT intentLetter;

        if (_vendAccount)
        {
            select firstonly intentLetter
                order by ToDate asc
                where intentLetter.VendAccount == _vendAccount
                    && intentLetter.IntentLetterType == _intentLetterType
                    && intentLetter.Status == IntentLetterStatus_IT::Open
                    && (_intentLetterType == IntentLetterType_IT::SpecificOperation
                        || (intentLetter.FromDate <= _currentDate
                            && intentLetter.ToDate >= _currentDate));
        }

        return intentLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOpenIntentLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup.
    /// </summary>
    /// <param name = "_formControl">The form control to perform lookup for.</param>
    /// <param name = "_vendAccount">The vendor account.</param>
    public static void lookupOpenIntentLetter(FormControl _formControl, VendAccount _vendAccount = '')
    {
        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(tableNum(IntentLetter_IT));
        qbds.addRange(fieldNum(IntentLetter_IT, Status)).value(queryValue(IntentLetterStatus_IT::Open));

        if (_vendAccount)
        {
            qbds.addRange(fieldNum(IntentLetter_IT, VendAccount)).value(_vendAccount);
        }

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(IntentLetter_IT), _formControl, true);

        sysTableLookup.parmQuery(q);

        sysTableLookup.addLookupfield(fieldNum(IntentLetter_IT, IntentLetterId));
        sysTableLookup.addLookupfield(fieldNum(IntentLetter_IT, Protocol));
        sysTableLookup.addLookupfield(fieldNum(IntentLetter_IT, IntentLetterType));
        sysTableLookup.addLookupfield(fieldNum(IntentLetter_IT, FromDate));
        sysTableLookup.addLookupfield(fieldNum(IntentLetter_IT, ToDate));
        sysTableLookup.addLookupfield(fieldNum(IntentLetter_IT, IntentLetterAmountMST));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.IntentLetterType = IntentLetterType_IT::Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of current intent letter to open.
    /// </summary>
    public void open()
    {
        this.Status = IntentLetterStatus_IT::Open;
        this.ClosedDate = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds intent letter record from intent letter ID.
    /// </summary>
    /// <param name = "_intentLetterId">Intent letter ID.</param>
    /// <param name = "_forUpdate">true if record can be updated; false otherwise.</param>
    /// <returns>The intent letter record.</returns>
    public static IntentLetter_IT find(VendIntentLetterId_IT _intentLetterId, boolean _forUpdate = false)
    {
        IntentLetter_IT intentLetter;

        if (_intentLetterId)
        {
            intentLetter.selectForUpdate(_forUpdate);

            select firstonly intentLetter
                where intentLetter.IntentLetterId == _intentLetterId;
        }

        return intentLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePlafond</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a intent letter validity period and aggregated amount.
    /// </summary>
    /// <param name = "_fromDate">The beginning date of validity period.</param>
    /// <param name = "_toDate">The ending date of validity period.</param>
    /// <param name = "_amountMST">The intent letter amount value.</param>
    private static void validatePlafond(
        FromDate _fromDate,
        ToDate _toDate,
        AmountMST _amountMST)
    {
        Plafond_IT plafond = Plafond_IT::findPlafondInPeriod(_fromDate, _toDate);
        if (plafond.RecId != 0)
        {
            IntentLetter_IT intentLetter;
            select sum(IntentLetterAmountMST) from intentLetter 
                where plafond.FromDate <= intentLetter.FromDate && intentLetter.ToDate <= plafond.ToDate;
            if (intentLetter.IntentLetterAmountMST + _amountMST >= plafond.InitialAmount)
            {
                warning("@ExtendedItallianLocalization:AggregatedAmountExceedsPlafond");
            }
        }
        else
        {
            warning("@ExtendedItallianLocalization:NoPlafondForDateRange");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IT</CountryRegionCodes>
	<DeveloperDocumentation>@ExtendedItallianLocalization:IntentLetterTableDoc</DeveloperDocumentation>
	<Label>@ExtendedItallianLocalization:IntentLetter</Label>
	<TitleField1>IntentLetterId</TitleField1>
	<TitleField2>VendAccount</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>IntentLetterIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>IntentLetterIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntentLetterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosingNotes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntentLetterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS62867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntentLetterAmountMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntentLetterId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Protocol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Notes</Name>
			<Label>@SYS70989</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntentLetterNotes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosingNotes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS69996</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchaseType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@ExtendedItallianLocalization:IntentLetterStatus</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TelematicModel</Name>
			<Label>@ExtendedItallianLocalization:LetterModel</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidityPeriod</Name>
			<Label>@SYS29148</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS8079</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ClosedDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:CloosingDateOfValidity</HelpText>
			<Label>@SYS22065</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClosingNotes</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>Notes</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:NoteInsertedWhenLetterClosed</HelpText>
			<Label>@ExtendedItallianLocalization:ClosingNotes</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:StartingDayOfValidity</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntentLetterAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntentLetterDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>IntentLetterPostingDate_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntentLetterId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>VendIntentLetterId_IT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntentLetterNotes</Name>
			<ExtendedDataType>Notes</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:ClosingNotesHelpText</HelpText>
			<Label>@SYS40182</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntentLetterType</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>IntentLetterType_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntentLetterYear</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>IntentLetterYear_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Protocol</Name>
			<ExtendedDataType>IntentLetterProtocol_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchaseType</Name>
			<EnumType>IntentLetterPurchaseType_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>IntentLetterReportId_IT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<HelpText>@ExtendedItallianLocalization:IntentLetterStatusHelpText</HelpText>
			<EnumType>IntentLetterStatus_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:EndingDayOfValidity</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:VendorAccountRelatedToLetter</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendName</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>VendName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IntentLetterIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>IntentLetterId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>