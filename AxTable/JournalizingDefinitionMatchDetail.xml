<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionMatchDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingDefinitionMatchDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the date effective delete when the value in the server cache is a
    /// <c>CreateNewTimePeriod</c> enumeration value; otherwise, performs a simple delete.
    /// </summary>
    public void delete()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the date effective insert when the value in the server cache is a
    /// <c>CreateNewTimePeriod</c> enumeration value; otherwise, performs a simple insert.
    /// </summary>
    public void insert()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the date effective update when the value in the server cache is a
    /// <c>CreateNewTimePeriod</c> enumeration value; otherwise, performs a simple update.
    /// </summary>
    public void update()
    {
        super();
        JournalizingDefinitionCache::clearScope(JournalizingDefinitionCacheScope::GetSystemGeneratedEntries);
        JournalizingMainAccDimensionListProvider::clearCache();
        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration)))
        {
            PayrollMainAccDimensionListProvider::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        boolean useBudgetDimension;
        JournalizingDefinitionMatch journalizingDefinitionMatch;

        ret = super(_fieldIdToCheck);

        switch ( _fieldIdToCheck )
        {
            case fieldNum(JournalizingDefinitionMatchDetail,LedgerDimension):
                useBudgetDimension = JournalizingDefinition::findByJournalizingDefinitionMatchId(this.JournalizingDefinitionMatch).JournalizingDefinitionModuleValue == JournalizingDefinitionModuleId::Budget;
                journalizingDefinitionMatch = JournalizingDefinitionMatch::findByRecId(this.JournalizingDefinitionMatch);
                JournalizingDefinitionMatch::isDimensionMissing(
                            journalizingDefinitionMatch.LedgerDimension,
                            this.LedgerDimension,
                            journalizingDefinitionMatch.DimensionHierarchy,
                            useBudgetDimension,
                            true);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                     ret;
        boolean                     useBudgetDimension;
        JournalizingDefinitionMatch journalizingDefinitionMatch;

        useBudgetDimension = JournalizingDefinition::findByJournalizingDefinitionMatchId(this.JournalizingDefinitionMatch).JournalizingDefinitionModuleValue == JournalizingDefinitionModuleId::Budget;
        journalizingDefinitionMatch = JournalizingDefinitionMatch::findByRecId(this.JournalizingDefinitionMatch);
        ret =   !JournalizingDefinitionMatch::isDimensionMissing(
                                    journalizingDefinitionMatch.LedgerDimension,
                                    this.LedgerDimension,
                                    journalizingDefinitionMatch.DimensionHierarchy,
                                    useBudgetDimension,
                                    true);

        ret = super() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified ledger dimension account exists in the table for a specific
    ///    journalizing definition.
    /// </summary>
    /// <param name="_journalizingDefinitionMatchId">
    ///    The journalizing definition match ID to check for existence.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    ///    The ledger dimension account number for which to look.
    /// </param>
    /// <returns>
    ///    true if the ledger dimension account exists for the journalizing definition in the table;
    ///    otherwise, false.
    /// </returns>
    public static boolean exist(JournalizingDefinitionMatchId _journalizingDefinitionMatchId,
                                LedgerDimensionAccount _ledgerDimensionAccount)
    {
        boolean found;

        found = (select firstonly RecId from journalizingDefinitionMatchDetail
                    where
                        journalizingDefinitionMatchDetail.JournalizingDefinitionMatch == _journalizingDefinitionMatchId &&
                        journalizingDefinitionMatchDetail.LedgerDimension == _ledgerDimensionAccount).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>JournalizingDefinitionMatchDetail</c> table.
    /// </summary>
    /// <param name="_journalizingDefinitionMatchId">
    ///    The journalizing definition match ID of the record to find.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    ///    The ledger dimension account number of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>JournalizingDefinitionMatch</c> table.
    /// </returns>
    public static JournalizingDefinitionMatchDetail find(
        JournalizingDefinitionMatchId _journalizingDefinitionMatchId,
        LedgerDimensionAccount _ledgerDimensionAccount,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionMatchDetail journalizingDefinitionMatchDetail;

        journalizingDefinitionMatchDetail.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionMatchDetail.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinitionMatchDetail
            where
                journalizingDefinitionMatchDetail.JournalizingDefinitionMatch == _journalizingDefinitionMatchId &&
                journalizingDefinitionMatchDetail.LedgerDimension == _ledgerDimensionAccount;

        return journalizingDefinitionMatchDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the specified record in the <c>JournalizingDefinitionMatchDetail</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record with the specified record ID in the <c>JournalizingDefinitionMatch</c> table.
    /// </returns>
    public static JournalizingDefinitionMatchDetail findByRecId(
        recId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        JournalizingDefinitionMatchDetail journalizingDefinitionMatchDetail;

        journalizingDefinitionMatchDetail.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            journalizingDefinitionMatchDetail.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            journalizingDefinitionMatchDetail
            where
            journalizingDefinitionMatchDetail.RecId == _recId;

        return journalizingDefinitionMatchDetail;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS342299</DeveloperDocumentation>
	<FormRef>JournalizingDefinition</FormRef>
	<Label>@SYS132641</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LedgerDimension</TitleField1>
	<TitleField2>JournalizingDefinitionSign</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>JournalizingDefinitionMatchDetailIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionMatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionSign</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionMatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionSign</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionMatch</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS132156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionSign</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS110924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalizingDefinitionSign</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS310383</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>JournalizingDefinitionMatch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionMatchId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalizingDefinitionSign</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalizingDefinitionSignValue</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>JournalizingDefinitionSignId</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<Label>@SYS132157</Label>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalizingDefinitionMatchDetailIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>JournalizingDefinitionMatch</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JournalizingDefinitionMatchDetail</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchy</Name>
					<Field>DimensionHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JournalizingDefinitionMatch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JournalizingDefinitionMatch</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>JournalizingDefinitionMatch</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>JournalizingDefinitionMatchDetail</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalizingDefinitionMatch</Name>
					<Field>JournalizingDefinitionMatch</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>