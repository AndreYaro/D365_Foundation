<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAgreementHeaderExt_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesAgreementHeaderExt_RU extends AgreementHeaderExt_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAgreementUniqueness</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the uniqueness of the agreement.
    /// </summary>
    /// <param name="_agreementHeader">
    ///     The record of the <c>AgreementHeader</c> table.
    /// </param>
    /// <returns>
    ///     true if agreement is unique; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     The argument is not a <c>SalesAgreementHeader</c> table datatype.
    /// </exception>
    public boolean checkAgreementUniqueness(AgreementHeader _agreementHeader)
    {
        SalesAgreementHeader     salesAgreementHeader;
        SalesAgreementHeader     agreementHeaderSales;
        PurchAgreementHeader     purchAgreementHeader;
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;
        smmParametersTable       smmParametersTable;
        boolean                  isExtendedUniqueness;
        RefRecId                 legalEntityId;
        RecId                    curRecId;
        AgreementId_RU           agreementId;
        CustVendAC               custVendAc;
        RefRecId                 classificationId;
        CurrencyCode             currency;
        AgreementDocumentTitle   documentTitle;
        StartDate                startDate;
        EndDate                  endDate;
        AgreementDocumentExternalReference extRef;
        boolean ok = true;

        if (_agreementHeader is SalesAgreementHeader)
        {
            agreementHeaderSales = _agreementHeader as SalesAgreementHeader;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        smmParametersTable   = smmParametersTable::find();
        isExtendedUniqueness =     smmParametersTable.AgreementAccountKey_RU
                                || smmParametersTable.AgreementClassificationKey_RU
                                || smmParametersTable.AgreementCurrencyKey_RU
                                || smmParametersTable.AgreementDocumentTitleKey_RU
                                || smmParametersTable.AgreementExtRefKey_RU
                                || smmParametersTable.AgreementYearKey_RU;

        legalEntityId        = agreementHeaderSales.SellingLegalEntity;
        curRecId             = agreementHeaderSales.RecId;
        agreementId          = agreementHeaderSales.SalesNumberSequence;
        custVendAc           = agreementHeaderSales.CustAccount;

        classificationId     = agreementHeaderSales.AgreementClassification;
        currency             = agreementHeaderSales.Currency;
        documentTitle        = agreementHeaderSales.DocumentTitle;
        extRef               = agreementHeaderSales.DocumentExternalReference;
        startDate            = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), this.AgreementDate);
        endDate              = DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), this.AgreementDate);

        // Base uniqueness
        select firstOnly RecId from purchAgreementHeader
            where purchAgreementHeader.PurchNumberSequence == agreementId
               && purchAgreementHeader.BuyingLegalEntity   == legalEntityId;

        if (purchAgreementHeader.RecId)
        {
            ok = checkFailed(strFmt("@GLS220555", agreementId));
        }

        // Extended uniqueness
        if (ok && isExtendedUniqueness)
        {
            select firstOnly SalesNumberSequence from salesAgreementHeader
                where  (!smmParametersTable.AgreementAccountKey_RU        || salesAgreementHeader.CustAccount               == custVendAc)
                    && (!smmParametersTable.AgreementClassificationKey_RU || salesAgreementHeader.AgreementClassification   == classificationId)
                    && (!smmParametersTable.AgreementCurrencyKey_RU       || salesAgreementHeader.Currency                  == currency)
                    && (!smmParametersTable.AgreementDocumentTitleKey_RU  || salesAgreementHeader.DocumentTitle             == documentTitle)
                    && (!smmParametersTable.AgreementExtRefKey_RU         || salesAgreementHeader.DocumentExternalReference == extRef)
                    && salesAgreementHeader.SellingLegalEntity == legalEntityId
                    && salesAgreementHeader.RecId != curRecId
                    && !salesAgreementHeader.IsDeleted
            exists join salesAgreementHeaderExt
                where salesAgreementHeaderExt.AgreementHeader == salesAgreementHeader.RecId
                    && (!smmParametersTable.AgreementYearKey_RU           || (salesAgreementHeaderExt.AgreementDate >= startDate && salesAgreementHeaderExt.AgreementDate <= endDate));

            if (salesAgreementHeader.SalesNumberSequence)
            {
                ok = checkFailed(strFmt("@GLS220556", salesAgreementHeader.SalesNumberSequence));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAvailableCreditLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the actual credit limit excess check.
    /// </summary>
    /// <returns>
    ///     false if the credit limit is exceeded; otherwise, true.
    /// </returns>
    public boolean checkAvailableCreditLimit()
    {
        AmountMST            creditLimitTotal, balanceWithoutAgreement, openBalance;
        CustTable            custTable;
        boolean              warning = CustParameters::find().CreditLineError == CreditLineErrorType::Warning;
        CustAccount          accountNum = SalesAgreementHeader::find(this.AgreementHeader).CustAccount;
        boolean              ret = true;

        void showErrorMsg(str _msg)
        {
            if (warning)
            {
                warning(_msg);
            }
            else
            {
                error(_msg);
            }
        }

        if (accountNum)
        {
            custTable = CustTable::find(accountNum);

            if (custTable.CreditMax)
            {
                creditLimitTotal        = SalesAgreementHeaderExt_RU::creditLimitPerCustAccount(accountNum, this.RecId) + this.CreditMax;
                balanceWithoutAgreement = custTable.openBalanceMSTPerAgreement_RU('');
                creditLimitTotal        = creditLimitTotal + (balanceWithoutAgreement > 0 ? balanceWithoutAgreement : 0);

                if (custTable.CreditMax < creditLimitTotal)
                {
                    ret = false;
                    showErrorMsg(strFmt("@GLS112517", accountNum, creditLimitTotal, custTable.CreditMax));
                }
            }

            if (this.CreditMax)
            {
                openBalance             = custTable.openBalanceMSTPerAgreement_RU(this.AgreementId);

                if (this.CreditMax < openBalance)
                {
                    ret = false;
                    showErrorMsg(strFmt("@SYS1532" +' %1 '+"@SYS98556" + ' ' + "@SYS79458"+ ' %2 ', this.CreditMax, openBalance));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventOwnerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines existing of the iventory owner transactions.
    /// </summary>
    /// <returns>
    ///     true if inventory owner transactions exist for an agreement; otherwise, false.
    /// </returns>
    boolean hasInventOwnerTrans()
    {
        InventOwner_RU inventOwner;
        InventTrans    inventTrans;
        InventDim      inventDim;

        SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(this.AgreementHeader);

        select firstonly RecId from inventOwner
            where inventOwner.AccountType        == InventOwnerAccountType_RU::Cust
               && inventOwner.AccountNum         == salesAgreementHeader.CustAccount
               && inventOwner.AgreementHeaderExt == this.RecId
        join TableId from inventDim
            where inventDim.InventOwnerId_RU    == inventOwner.InventOwnerId
        join TableId from inventTrans
            where inventTrans.InventDimId       == inventDim.InventDimId;

        if (   !inventOwner.RecId
            && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            WHSInventReserve inventReserve;

            select firstonly RecId from inventOwner
                where inventOwner.AccountType        == InventOwnerAccountType_RU::Cust
                   && inventOwner.AccountNum         == salesAgreementHeader.CustAccount
                   && inventOwner.AgreementHeaderExt == this.RecId
            exists join inventReserve
                where  inventReserve.InventOwnerId_RU == inventOwner.InventOwnerId
                    && inventReserve.AvailPhysical != 0;
        }

        return inventOwner.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>SalesAgreementHeaderExt_RU</c> and <c>AgreementHeaderExt_RU</c> records from the
    ///     <c>AgreementHeader</c> table to default values.
    /// </summary>
    /// <param name="_agreementHeader">
    ///     The agreement record from which to initialize.
    /// </param>
    public void initFromAgreementHeader(AgreementHeader _agreementHeader)
    {
        SalesAgreementHeader salesAgreementHeader = _agreementHeader as SalesAgreementHeader;

        super(salesAgreementHeader);

        this.AgreementId = salesAgreementHeader.SalesNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>SalesAgreementHeaderExt_RU</c> and <c>AgreementHeaderExt_RU</c> records from the
    ///     <c>CustTable</c> table to default values.
    /// </summary>
    /// <param name="_custTable">
    ///     The customer record from which to initialize.
    /// </param>
    public void initFromCustTable(CustTable _custTable)
    {
        this.initFromCustVendTable(_custTable);

        this.InventProfileId   = _custTable.InventProfileId_RU;
        this.InventProfileType = _custTable.InventProfileType_RU;

        this.Email             = _custTable.email();
        this.Phone             = _custTable.phone();
        this.PhoneLocal        = _custTable.phoneLocal();
        this.TeleFax           = _custTable.telefax();
        this.Url               = _custTable.url();

        this.LineOfBusinessId  = _custTable.LineOfBusinessId;

        this.SalesInvoicePostingType = _custTable.InvoicePostingType_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySync</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes changed data to the intercompany purchase agreement header record that relates to the
    ///     sales agreement header record.
    /// </summary>
    /// <param name="_forceIntercompanySync">
    ///     A Boolean value that indicates whether to force the intercompany synchronization; optional.
    /// </param>
    public void intercompanySync(boolean _forceIntercompanySync = false)
    {
        PurchAgreementHeaderExt_RU agreementHeaderPurchExt;
        CustTable                  custTable;
        InterCompanyCompanyId      custTableInterCompanyTradingPartneCompanyId;
        SalesAgreementHeader       salesAgreementHeader;
        PurchAgreementHeader       purchAgreementHeader;
        boolean                    create;
        AgreementHeaderDefault     agreementHeaderDefault;
        #ISOCountryRegionCodes

        if (!_forceIntercompanySync)
        {
            if (this.InterCompanySkipUpdate == InterCompanySkipUpdate::InterCompany
             || !this.intercompanyUpdateNow())
            {
                return;
            }
        }

        select firstonly salesAgreementHeader
            where salesAgreementHeader.RecId == this.AgreementHeader;

        custTable = salesAgreementHeader.custTable();
        custTableInterCompanyTradingPartneCompanyId = custTable.interCompanyTradingPartnerCompanyID();

        if (!TradeInterCompany::checkDataAreaAccess(custTableInterCompanyTradingPartneCompanyId))
        {
            return;
        }

        changecompany(custTableInterCompanyTradingPartneCompanyId)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                create = !this.purchAgreementHeaderIntercompany(false);

                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                if (create)
                {
                    purchAgreementHeader   = salesAgreementHeader.purchAgreementHeader();
                    agreementHeaderDefault = purchAgreementHeader.agreementHeaderDefault();

                    agreementHeaderPurchExt.initFromAgreementHeader(purchAgreementHeader);
                    agreementHeaderPurchExt.initFromDeliveryTerm(DlvTerm::find(agreementHeaderDefault.DeliveryTerm));
                    agreementHeaderPurchExt.initFromContactInfo(ContactPerson::find(agreementHeaderDefault.ContactPerson));
                    agreementHeaderPurchExt.initFromVendTable(VendTable::find(purchAgreementHeader.VendAccount));
                }
                else
                {
                    agreementHeaderPurchExt = this.purchAgreementHeaderIntercompany(true);
                }

                this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, AgreementDate));
                this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, AgreementAmount));
                this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, AgreementSubject));
                this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, AgreementVatAmount));
                this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, TaxAmountDifference));

                agreementHeaderPurchExt.InterCompanySkipUpdate = InterCompanySkipUpdate::InterCompany;

                if (create)
                {
                    if (!agreementHeaderPurchExt.checkAgreementUniqueness(purchAgreementHeader))
                    {
                        throw Exception::Error;
                    }

                    agreementHeaderPurchExt.insert();
                }
                else
                {
                    agreementHeaderPurchExt.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanySync</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes changed data to the intracompany purchase agreement header record that relates to the
    ///     sales agreement header record.
    /// </summary>
    /// <param name="_forceIntracompanySync">
    ///     A Boolean value that indicates whether to force the intracompany synchronization; optional.
    /// </param>
    public void intracompanySync(boolean _forceIntracompanySync = false)
    {
        PurchAgreementHeaderExt_RU agreementHeaderPurchExt;
        CustTable                  custTable;
        VendTable                  vendTable;
        SalesAgreementHeader       salesAgreementHeader;
        PurchAgreementHeader       purchAgreementHeader;
        boolean                    create;
        AgreementHeaderDefault     agreementHeaderDefault;

        if (!_forceIntracompanySync)
        {
            if (this.InterCompanySkipUpdate == InterCompanySkipUpdate::Internal
             || !this.intracompanyUpdateNow())
            {
                return;
            }
        }

        select firstonly salesAgreementHeader
            where salesAgreementHeader.RecId == this.AgreementHeader;

        custTable = salesAgreementHeader.custTable();
        vendTable = VendTable::findByPartyRecId(custTable.Party);
        create    = !this.purchAgreementHeaderIntracompany(false);

        if (create)
        {
            purchAgreementHeader   = salesAgreementHeader.purchAgreementHeader_RU();
            agreementHeaderDefault = purchAgreementHeader.agreementHeaderDefault();

            agreementHeaderPurchExt.initFromAgreementHeader(purchAgreementHeader);
            agreementHeaderPurchExt.initFromDeliveryTerm(DlvTerm::find(agreementHeaderDefault.DeliveryTerm));
            agreementHeaderPurchExt.initFromContactInfo(ContactPerson::find(agreementHeaderDefault.ContactPerson));
            agreementHeaderPurchExt.initFromVendTable(VendTable::find(purchAgreementHeader.VendAccount));
        }
        else
        {
            agreementHeaderPurchExt = this.purchAgreementHeaderIntracompany(true);
        }

        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, AgreementDate));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, AgreementAmount));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, AgreementSubject));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, AgreementVatAmount));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, TaxAmountDifference));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, PaymDayId));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, InventProfileType));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, InventProfileId));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, LineOfBusinessId));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, Phone));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, PhoneLocal));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, CellularPhone));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, Telex));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, TeleFax));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, Email));
        this.syncField(agreementHeaderPurchExt, create, fieldNum(AgreementHeaderExt_RU, Url));

        agreementHeaderPurchExt.InterCompanySkipUpdate = InterCompanySkipUpdate::Internal;

        if (create)
        {
            if (!agreementHeaderPurchExt.checkAgreementUniqueness(purchAgreementHeader))
            {
                throw Exception::Error;
            }
            this.updateInventOwnerRelation();
            agreementHeaderPurchExt.insert();
        }
        else
        {
            agreementHeaderPurchExt.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the event that is caused when a field is modified for an <c>SalesAgreementHeaderExt_RU</c>
    ///     record.
    /// </summary>
    /// <param name="_fieldId">
    ///     A modified field ID.
    /// </param>
    /// <remarks>
    ///     Call super to invoke parent method.
    /// </remarks>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAgreementHeaderIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the intercompany purchase agreement header record that is related to the sales agreement header record.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the <c>PurchAgreementHeaderExt_RU</c> record for update; optional.
    /// </param>
    /// <returns>
    ///     A table buffer that contains the intercompany purchase agreement header.
    /// </returns>
    public PurchAgreementHeaderExt_RU purchAgreementHeaderIntercompany(boolean _forUpdate = false)
    {
        AgreementReference agreementReference;

        select firstonly DerivedAgreement from agreementReference
            where agreementReference.SourceAgreement == this.AgreementHeader
               && !agreementReference.IsIntraCompany_RU;

        if (agreementReference.DerivedAgreement)
        {
            return PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(agreementReference.DerivedAgreement,_forUpdate);
        }

        select firstonly SourceAgreement from agreementReference
            where agreementReference.DerivedAgreement == this.AgreementHeader
               && !agreementReference.IsIntraCompany_RU;

        return PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(agreementReference.SourceAgreement,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchAgreementHeaderIntracompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the intracompany purchase agreement header record that is related to the sales agreement header record.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the <c>PurchAgreementHeaderExt_RU</c> record for update; optional.
    /// </param>
    /// <returns>
    ///     A table buffer that contains the intracompany purchase agreement header.
    /// </returns>
    public PurchAgreementHeaderExt_RU purchAgreementHeaderIntracompany(boolean _forUpdate = false)
    {
        AgreementReference agreementReference;

        select firstonly DerivedAgreement from agreementReference
            where agreementReference.SourceAgreement == this.AgreementHeader
               && agreementReference.IsIntraCompany_RU;

        if (agreementReference.DerivedAgreement)
        {
            return PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(agreementReference.DerivedAgreement,_forUpdate);
        }

        select firstonly SourceAgreement from agreementReference
            where agreementReference.DerivedAgreement == this.AgreementHeader
               && agreementReference.IsIntraCompany_RU;

        return PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(agreementReference.SourceAgreement,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the record in the <c>SalesAgreementHeaderExt_RU</c> table.
    /// </summary>
    public void update()
    {
        this.setInventProfileId();

        if (this.InterCompanySkipUpdate != InterCompanySkipUpdate::Internal
            && this.intracompanyLinkExist()
            && this.intracompanyUpdateNow())
        {
            ttsbegin;
            this.intracompanySync();
            ttscommit;
        }

        if (this.InterCompanySkipUpdate != InterCompanySkipUpdate::InterCompany
            && this.InterCompanySkipUpdate != InterCompanySkipUpdate::Both
            && this.intercompanyLinkExist()
            && this.intercompanyUpdateNow())
        {
            ttsbegin;
            this.intercompanySync();
            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventOwnerRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the inventory owner agreement relations.
    /// </summary>
    void updateInventOwnerRelation()
    {
        InventOwner_RU          inventOwner;

        ttsbegin;

        update_recordset inventOwner
            setting RelatedAgreementHeaderExt = this.purchAgreementHeaderIntracompany().RecId
            where inventOwner.AccountType        == InventOwnerAccountType_RU::Cust
               && inventOwner.AccountNum         == SalesAgreementHeader::find(this.AgreementHeader).CustAccount
               && inventOwner.AgreementHeaderExt == this.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the event that is caused when a field is validated for an <c>SalesAgreementHeaderExt_RU</c>
    ///     record.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///     A validated field ID.
    /// </param>
    /// <returns>
    ///     true if field has valid information and may be modified; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Call super to invoke parent method.
    /// </remarks>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditLimitPerCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the credit limit.
    /// </summary>
    /// <param name="_custAccount">
    ///     The customer account number.
    /// </param>
    /// <param name="_excludeRecId">
    ///     The record ID of the agreement to exclude from the calculation.
    /// </param>
    /// <returns>
    ///     The credit limit amount.
    /// </returns>
    public static AmountMST creditLimitPerCustAccount(CustAccount  _custAccount,
                                                      recId        _excludeRecId = 0)
    {
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;
        SalesAgreementHeader salesAgreementHeader;

        select sum(CreditMax) from salesAgreementHeaderExt
            exists join salesAgreementHeader
            where salesAgreementHeader.CustAccount == _custAccount &&
                  salesAgreementHeaderExt.AgreementHeader == salesAgreementHeader.RecId &&
                  (_excludeRecId == 0 || salesAgreementHeaderExt.RecId != _excludeRecId);

        return salesAgreementHeaderExt.CreditMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SalesAgreementHeaderExt_RU</c> table.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///    The record ID of the <c>SalesAgreementHeaderExt_RU</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>SalesAgreementHeaderExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static SalesAgreementHeaderExt_RU find(
        AgreementHeaderExtRecId_RU _agreementHeaderExtRecId,
        boolean                    _forUpdate = false)
    {
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;

        if (_agreementHeaderExtRecId)
        {
            if (_forUpdate)
            {
                salesAgreementHeaderExt.selectForUpdate(_forUpdate);
            }

            select firstonly salesAgreementHeaderExt
                where salesAgreementHeaderExt.recId == _agreementHeaderExtRecId;
        }

        return salesAgreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySalesAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SalesAgreementHeaderExt_RU</c> table.
    /// </summary>
    /// <param name="_agreementHeaderRecId">
    ///    The record ID of the <c>SalesAgreementHeader</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>SalesAgreementHeaderExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static SalesAgreementHeaderExt_RU findBySalesAgreementHeader(
        AgreementHeaderRecId _agreementHeaderRecId,
        boolean              _forUpdate = false)
    {
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;

        if (_agreementHeaderRecId)
        {
            if (_forUpdate)
            {
                salesAgreementHeaderExt.selectForUpdate(_forUpdate);
            }

            select firstonly salesAgreementHeaderExt
                where salesAgreementHeaderExt.AgreementHeader == _agreementHeaderRecId;
        }

        return salesAgreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the record from <c>SalesAgreementHeader</c> table.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///     The record ID of the <c>SalesAgreementHeaderExt_RU</c> record.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the <c>SalesAgreementHeader</c> record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>SalesAgreementHeader</c> table.
    /// </returns>
    public static SalesAgreementHeader salesAgreementHeader(
        AgreementHeaderExtRecId_RU _agreementHeaderExtRecId,
        boolean                    _forUpdate = false)
    {
        SalesAgreementHeader       salesAgreementHeader;
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;

        if (_agreementHeaderExtRecId)
        {
            if (_forUpdate)
            {
                salesAgreementHeader.selectForUpdate(_forUpdate);
            }

            select firstonly salesAgreementHeader
                exists join salesAgreementHeaderExt
                    where salesAgreementHeader.RecId    == salesAgreementHeaderExt.AgreementHeader
                       && salesAgreementHeaderExt.RecId == _agreementHeaderExtRecId;
        }

        return salesAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAgreementJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides functionality to go to main table.
    /// </summary>
    /// <param name="_salesAgreementExtRecId">
    ///    The record ID of the <c>SalesAgreementHeaderExt_RU</c> record.
    /// </param>
    /// <param name="_companyId">
    ///     The company account identifier; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     The company does not exist.
    /// </exception>
    public static void salesAgreementJumpRef(AgreementHeaderExtRecId_RU _salesAgreementExtRecId, CompanyId _companyId = curext())
    {
        Args args;
        CompanyId companyId;

        if (_companyId)
        {
            companyId = _companyId;
        }
        else
        {
            companyId = curext();
        }

        if (! xDataArea::exist(companyId))
        {
            throw error(strFmt("@SYS10666", companyId));
        }

        changecompany(companyId)
        {
            if (_salesAgreementExtRecId)
            {
                args = new Args();
                args.record(
                    SalesAgreementHeaderExt_RU::salesAgreementHeader(_salesAgreementExtRecId));
            }

            new MenuFunction(menuitemDisplayStr(SalesAgreement), MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAgreementReferenceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the sales agreements lookup.
    /// </summary>
    /// <param name="_callingControl">
    ///     The control for which lookup will be created.
    /// </param>
    /// <param name="_custAccount">
    ///     The customer account number.
    /// </param>
    /// <param name="_transDate">
    ///     The agreement date; optional.
    /// </param>
    /// <param name="_invoiceAccount">
    ///     The invoice account number; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>SalesAgreementHeaderExt_RU</c> table.
    /// </returns>
    public static SalesAgreementHeaderExt_RU salesAgreementReferenceLookup(
        FormReferenceControl _callingControl,
        CustAccount          _custAccount,
        TransDate            _transDate      = dateNull(),
        CustInvoiceAccount   _invoiceAccount = '')
    {
        Query query;
        QueryBuildDataSource qbds;
        SalesAgreementId salesAgreementId;
        SalesAgreementHeaderExt_RU selectedRecord;
        FormRun formRun;
        Args args;

        query = AgreementHeader::partyAgreementsQuery(tableNum(SalesAgreementHeader),
            fieldNum(SalesAgreementHeader, CustAccount),
            _custAccount ? _custAccount : SysQuery::valueEmptyString(),
            _transDate,
            false,
            tableNum(SalesAgreementHeaderExt_RU)
            );

        salesAgreementId = _callingControl.filterValue(AbsoluteFieldBinding::construct(
            fieldstr(AgreementHeaderExt_RU, AgreementId),
            tablestr(AgreementHeaderExt_RU))).value();

        if (salesAgreementId)
        {
            findOrCreateRange_W(query.dataSourceTable(tableNum(SalesAgreementHeader)),
                fieldNum(SalesAgreementHeader, SalesNumberSequence),
                salesAgreementId);
        }

        if (_invoiceAccount)
        {
            qbds = query.dataSourceTable(tableNum(SalesAgreementHeader));
            qbds = qbds.addDataSource(tableNum(SalesAgreementHeaderDefault));
            qbds.relations(true);

            qbds.addRange(fieldNum(SalesAgreementHeaderDefault, CustomerInvoiceAccount)).value(_invoiceAccount);
        }

        args = new Args();
        args.name(formStr(SalesAgreementHeaderExtLookup_RU));
        args.caller(_callingControl);
        args.parmObject(query);
        formRun = classFactory.formRunClass(args);
        formRun.init();

        _callingControl.performFormLookup(formRun);

        selectedRecord = formRun.selectRecordModeSelectedRecord();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS325539</DeveloperDocumentation>
	<Label>@SYS190135</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>RecId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>AgreementHeaderExt_RU</Extends>
	<Modules>AccountsReceivable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostingProfile</Name>
			<Label>@SYS21530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustPostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPrepaymentPostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesOrder</Name>
			<Label>@SYS80119</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesInvoicePostingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPrepaymentPostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
			<Label>@SYS59471</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesInvoicePostingType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesInvoicePostingType_RU</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedgePostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedgePostingProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustPostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>CustPostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedgerPrepaymentProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedgerPrepaymentProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustPrepaymentPostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>CustPrepaymentPostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesAgreementHeaderExt</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AgreementHeaderExt_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>