<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemLocationCountingStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemLocationCountingStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that a counting journal ID can only be specified if counting is marked as started.
    /// </summary>
    public void update()
    {
        if (! this.CountingStarted)
        {
            this.CountingJournalId = '';
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemIdDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the record to find.
    /// </param>
    /// <param name="_inventDimId">
    /// The invent Dimension ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventItemLocationCountingStatus</c> table; otherwise, an empty record.
    /// </returns>
    static public InventItemLocationCountingStatus findItemIdDimId(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        boolean             _forUpdate = false)
    {
        InventItemLocationCountingStatus    inventItemLocationCountingStatus;

        if (!_itemId || !_inventDimId)
        {
            return inventItemLocationCountingStatus;
        }

        inventItemLocationCountingStatus.selectForUpdate(_forUpdate);

        select firstonly inventItemLocationCountingStatus
            where inventItemLocationCountingStatus.ItemId           == _itemId
               && inventItemLocationCountingStatus.InventDimId      == _inventDimId;

        return inventItemLocationCountingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountingStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that counting is marked as started for the specified item and dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// The item that is being counted.
    /// </param>
    /// <param name="_inventDimId">
    /// The product dimensions and warehouse for which counting is performed.
    /// </param>
    /// <param name="_inventJournalId">
    /// The counting journal ID; optional.
    /// </param>
    /// <returns>
    /// true if counting is started; otherwise, false.
    /// </returns>
    static public boolean isCountingStarted(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        InventJournalId         _inventJournalId = '')
    {
        InventItemLocationCountingStatus    inventItemLocationCountingStatus;

        inventItemLocationCountingStatus = InventItemLocationCountingStatus::findItemIdDimId(_itemId, _inventDimId);
        if (!inventItemLocationCountingStatus.RecId || !inventItemLocationCountingStatus.CountingStarted)
        {
            return false;
        }

        if (inventItemLocationCountingStatus.CountingJournalId
            && InventJournalTable::find(inventItemLocationCountingStatus.CountingJournalId).Posted)
        {
            InventItemLocationCountingStatus::updateStopCounting(_itemId, _inventDimId);
            return false;
        }

        if (prmisDefault(_inventJournalId))
        {
            return true;
        }

        return (inventItemLocationCountingStatus.CountingJournalId != _inventJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStartCounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks counting as started with the specified journal for the specified combination of items and
    /// dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// The item to count.
    /// </param>
    /// <param name="_inventDimId">
    /// The product dimensions and warehouse for which counting is performed.
    /// </param>
    /// <param name="_inventJournalId">
    /// The ID of the counting journal that is used for the counting.
    /// </param>
    public static void updateStartCounting(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        InventJournalId         _inventJournalId)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            InventItemLocationCountingStatus inventItemLocationCountingStatus = InventItemLocationCountingStatus::findItemIdDimId(_itemId, _inventDimId, true);

            if (!inventItemLocationCountingStatus.CountingStarted)
            {
                if (!inventItemLocationCountingStatus.RecId)
                {
                    // initialize relationship to InventItemLocation
                    inventItemLocationCountingStatus.ItemId         = _itemId;
                    inventItemLocationCountingStatus.InventDimId    = _inventDimId;
                }

                inventItemLocationCountingStatus.CountingStarted    = NoYes::Yes;
                inventItemLocationCountingStatus.CountingJournalId  = _inventJournalId;
                inventItemLocationCountingStatus.write();
            }
            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            // Even inside transaction scope we can recover without going further up the call stack
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            // Even inside transaction scope we can recover without going further up the call stack
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStopCounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks counting as stopped for the specified combination of items and dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// The item that is being counted.
    /// </param>
    /// <param name="_inventDimId">
    /// The product dimensions and warehouse for which counting is performed.
    /// </param>
    static public void updateStopCounting(
        ItemId              _itemId,
        InventDimId         _inventDimId)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            InventItemLocationCountingStatus inventItemLocationCountingStatus = InventItemLocationCountingStatus::findItemIdDimId(_itemId, _inventDimId, true);

            if (inventItemLocationCountingStatus.RecId && inventItemLocationCountingStatus.CountingStarted)
            {
                inventItemLocationCountingStatus.CountingStarted    = NoYes::No;
                inventItemLocationCountingStatus.CountingJournalId  = '';
                inventItemLocationCountingStatus.update();
            }
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            // Even inside transaction scope we can recover without going further up the call stack
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOtherJournalTransSameItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if another journal line exists on the same journal for the same item.
    /// </summary>
    /// <param name = "_inventJournalTrans">The journal line to compare with.</param>
    /// <returns>true if another journal line exists; otherwise, false.</returns>
    static protected boolean existsOtherJournalTransSameItem(InventJournalTrans _inventJournalTrans)
    {
        InventItemLocation inventItemLocation;
        InventJournalTrans otherTrans;

        while select InventDimId from otherTrans
            where otherTrans.JournalId == _inventJournalTrans.JournalId
                && otherTrans.ItemId   == _inventJournalTrans.ItemId
                && otherTrans.RecId    != _inventJournalTrans.RecId
        {
            InventItemLocation otherInventItemLocation = InventItemLocation::find(_inventJournalTrans.ItemId, otherTrans.InventDimId);

            if (otherInventItemLocation)
            {
                if (!inventItemLocation)
                {
                    inventItemLocation = InventItemLocation::find(_inventJournalTrans.ItemId, _inventJournalTrans.InventDimId);
                }

                if (otherInventItemLocation.ItemId == inventItemLocation.ItemId
                    && otherInventItemLocation.InventDimId == inventItemLocation.InventDimId)
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStopCountingJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the counting has stopped for the combination of items and dimensions that are
    /// specified by the counting journal line.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// The counting journal line that is counted.
    /// </param>
    /// <param name="_always">
    /// A Boolean value that indicates whether to check if other journal lines exist for the same journal
    /// before marking counting as having stopped; optional.
    /// </param>
    static public void updateStopCountingJournal(
        InventJournalTrans      _inventJournalTrans,
        boolean                 _always = false)
    {
        InventItemLocation    inventItemLocation  = InventItemLocation::find(_inventJournalTrans.ItemId, _inventJournalTrans.InventDimId);
        boolean               doStop              = true;

        if (!inventItemLocation.RecId)
        {
            return;
        }

        InventItemLocationCountingStatus inventItemLocationCountingStatus = InventItemLocationCountingStatus::findItemIdDimId(inventItemLocation.ItemId, inventItemLocation.InventDimId, true);

        if (!inventItemLocationCountingStatus.RecId                                                 // No record - so by definition counting isn't started
          ||!inventItemLocationCountingStatus.CountingStarted                                       // Counting not marked as started - so nothing to do
          || inventItemLocationCountingStatus.CountingJournalId != _inventJournalTrans.JournalId)   // Counting isn't marked as started by this journal, so this journal cannot stop counting
        {
            return;
        }

        if (!_always)
        {
            doStop = !InventItemLocationCountingStatus::existsOtherJournalTransSameItem(_inventJournalTrans);
        }

        if (doStop)
        {
            inventItemLocationCountingStatus.CountingStarted      = NoYes::No;
            inventItemLocationCountingStatus.CountingJournalId    = '';
            inventItemLocationCountingStatus.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS328879</DeveloperDocumentation>
	<Label>@SYS328878</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>InventItemLocationIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<ReplacementKey>InventItemLocationIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountingStarted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountingJournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountingStatus</Name>
			<Label>@SYS328880</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CountingStarted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountingJournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountingJournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventJournalId_Counting</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CountingStarted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCountingStarted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventItemLocationIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CountingJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountingJournalId</Name>
					<Field>CountingJournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemLocation</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventItemLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemDimIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>