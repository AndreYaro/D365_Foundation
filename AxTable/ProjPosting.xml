<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPosting extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.ProjCode       = TableGroupAll::All;
        this.CategoryCode   = TableGroupAll::All;

        DataAreaId currentCompanyId = strUpr(curext());
        this.LendingLegalEntity     = currentCompanyId;
        this.BorrowingLegalEntity   = currentCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the account name for the currently displayed record.
    /// </summary>
    /// <returns>
    ///    A string with the <c>AccountName</c> field from the table <c>LedgerTable</c>.
    /// </returns>
    display AccountName ledgerAccountName()
    {
        MainAccount mainAccount;

        mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension);

        return mainAccount.localizedName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayOnlyCategoryCodeAllBeSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether <c>TableGroup::ALL</c> is the only value acceptable for the <c>CategoryCode</c> field based on the value of the posting account type.
    /// </summary>
    /// <returns>
    ///    true if the only acceptable value for the <c>CategoryCode</c> field is <c>TableGroup::ALL</c>; otherwise, false.
    /// </returns>
    public boolean mayOnlyCategoryCodeAllBeSet()
    {
        switch (this.ProjAccountType)
        {
            case ProjAccountType::OnAccountAccount,
                 ProjAccountType::AccruedTurnoverProd,
                 ProjAccountType::WIPProduction,
                 ProjAccountType::AccruedTurnoverProfit,
                 ProjAccountType::WIPProfit   :
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Used to change the <c>ProjRelation</c> and <c>CategoryRelation</c> fields when the <c>ProjCode</c> and <c>CategoryCode</c> fields have been modified.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID of the field modified by a form.
    /// </param>
    /// <remarks>
    ///    This method is automatically called by the forms when any field is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjPosting, ProjCode) :
                this.ProjRelation = '';
                this.ProjFundingSource = 0;
                break;

            case fieldNum(ProjPosting, ProjRelation) :
                this.ProjFundingSource = 0;
                break;

            case fieldNum(ProjPosting, CategoryCode) :
                if (this.orig().CategoryCode != this.CategoryCode)
                {
                    this.ProjCategoryRelation = '';
                }
                break;
            case fieldNum(ProjPosting, BorrowingLegalEntity):
                if (this.orig().BorrowingLegalEntity != this.BorrowingLegalEntity)
                {
                    this.ProjCategoryRelation = '';
                    this.TaxGroupId = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId id)
    {
        boolean     ret;
        DataAreaId  currentCompany = curExt();
        container	projCategoryDataAreaId = [this.LendingLegalEntity, this.BorrowingLegalEntity];

        ret = super(id);

        switch (id)
        {
            case fieldNum(ProjPosting, LedgerDimension):
                return MainAccount::checkTransactionAccount(this.LedgerDimension) && ret;

            case fieldNum(ProjPosting,ProjRelation):
                switch (this.ProjCode)
                {
                    case TableGroupAll::Table   :
                        return ProjTable::find(this.ProjRelation).checkValid() && ret;
                    case TableGroupAll::GroupId :
                        return ProjGroup::find(this.ProjRelation).checkValid() && ret;
                    case TableGroupAll::All     :
                        if (this.ProjRelation)
                        {
                            return checkFailed("@SYS24200") && ret;
                        }
                }
            case fieldNum(ProjPosting,ProjCategoryRelation):
                switch (this.CategoryCode)
                {
                    case TableGroupAll::Table   :
                        ProjCategory projCategory;

                        select firstonly crossCompany:projCategoryDataAreaId projCategory
                            where projCategory.CategoryId == this.ProjCategoryRelation;

                        return projCategory.checkValid() && ret;

                    case TableGroupAll::GroupId :
                        ProjCategoryGroup projCategoryGroup;

                        select firstonly crossCompany:projCategoryDataAreaId projCategoryGroup
                            where projCategoryGroup.CategoryGroupId == this.ProjCategoryRelation;

                        return projCategoryGroup.checkValid() && ret;

                    case TableGroupAll::All     :
                        if (this.ProjCategoryRelation)
                        {
                            return checkFailed("@SYS24200") && ret;
                        }
                }
            case fieldNum(ProjPosting, LendingLegalEntity):
                if (ret && this.LendingLegalEntity != currentCompany)
                {
                    // @SYS113857: Intercompany posting relationship between company %1 and company %2 is missing.
                    ret = LedgerInterCompany::checkExistForCompanyPair(currentCompany, this.LendingLegalEntity);
                }
                break;
            case fieldNum(ProjPosting, BorrowingLegalEntity):
                if (ret && this.BorrowingLegalEntity != currentCompany)
                {
                    // @SYS113857: Intercompany posting relationship between company %1 and company %2 is missing.
                    ret = LedgerInterCompany::checkExistForCompanyPair(currentCompany, this.BorrowingLegalEntity);
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.ProjCode != TableGroupAll::All && ! this.ProjRelation)
        {
            ret = checkFailed("@SYS68855");
        }

        if (this.CategoryCode != TableGroupAll::All && ! this.ProjCategoryRelation)
        {
            ret = checkFailed("@SYS68856");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountType2LedgerPostingTypesConverting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delegate for conversion of <c>ProjAccountType</c> enumeration value to <c>LedgerPostingType</c> enumeration value.
    /// </summary>
    /// <param name = "_projAccountType">
    ///    The <c>ProjAccountType</c> enumeration value to convert.
    /// </param>
    /// <param name = "_result">
    ///    An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.
    /// </param>
    static delegate void accountType2LedgerPostingTypesConverting(ProjAccountType _projAccountType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountType2LedgerPostingTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a <c>ProjAccountType</c> enumeration to the corresponding <c>LedgerPostingType</c> enumeration value.
    /// </summary>
    /// <param name="projAccountType">
    ///    A <c>ProjAccountType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    The value of the <c>ProjAccountType</c> enumeration as a <c>LedgerPostingType</c> enumeration.
    /// </returns>
    public static LedgerPostingType accountType2LedgerPostingTypes(ProjAccountType projAccountType)
    {
        LedgerPostingType retval;

        switch (projAccountType)
        {
            case ProjAccountType::StatusAccount         : retval = LedgerPostingType::ProjWIPCostvalue;            break;
            case ProjAccountType::OnAccountAccount      : retval = LedgerPostingType::ProjOnAccount;               break;
            case ProjAccountType::CostAccount           : retval = LedgerPostingType::ProjCost;                    break;
            case ProjAccountType::PayrollAllocation     : retval = LedgerPostingType::ProjPayrollAllocation;       break;
            case ProjAccountType::RevenueAccount        : retval = LedgerPostingType::ProjTurnover;                break;
            case ProjAccountType::SalesValue            : retval = LedgerPostingType::ProjSalesvalue;              break;
            case ProjAccountType::SalesOffsetAccount    : retval = LedgerPostingType::ProjSalesvalueOffset;        break;
            case ProjAccountType::OffsetAccountItem     : retval = LedgerPostingType::ProjOffsetAccountItem;       break;
            case ProjAccountType::StatusAccountItem     : retval = LedgerPostingType::ProjStatusAccountItem;       break;
            case ProjAccountType::AccruedTurnoverProd   : retval = LedgerPostingType::ProjAccruedTurnoverProd;     break;
            case ProjAccountType::WIPProduction         : retval = LedgerPostingType::ProjWIPProduction;           break;
            case ProjAccountType::AccruedTurnoverProfit : retval = LedgerPostingType::ProJAccruedTurnoverProfit;   break;
            case ProjAccountType::WIPProfit             : retval = LedgerPostingType::ProjWIPProfit;               break;
            case ProjAccountType::AccruedCost           : retval = LedgerPostingType::ProjAccruedCost;             break;
            case ProjAccountType::WIPCostAccruals       : retval = LedgerPostingType::ProjWIPCost;                 break;
            case ProjAccountType::AccruedRevenueOnAccount
                : retval = LedgerPostingType::ProjAccruedRevenueOnAccount; break;
            case ProjAccountType::WIPInvoicedOnAccount  : retval = LedgerPostingType::ProjWIPInvoicedOnAccount;    break;
            case ProjAccountType::WIPSubscription       : retval = LedgerPostingType::ProjWIPSubscription;         break;
            case ProjAccountType::AccruedRevenueSubscription
                : retval = LedgerPostingType::ProjAccruedRevenueSubscription; break;
            case ProjAccountType::IntercompanyCost      : retval = LedgerPostingType::IntercompanyCost;             break;
            case ProjAccountType::IntercompanyRevenue   : retval = LedgerPostingType::IntercompanyRevenue;          break;

            // <GBR>
            case ProjAccountType::DebitNote_BR:
                if (BrazilParameters::isEnabled())
                {
                    retval = LedgerPostingType::DebitNote_BR;
                    break;
                }
                else
                {
                    throw error(strFmt("@SYS12580",projAccountType));
                }
            case ProjAccountType::InvoiceCancelRevenueAccount:
                if (ProjParameters::find().EnableCancelPostingProfiles)
                {
                    retval = LedgerPostingType::ProjTurnover;
                    break;
                }
                else
                {
                    throw error(strFmt("@SYS12580",projAccountType));
                }
            // </GBR>

            default:
                var eventHandlerResult = new EventHandlerResult();
                ProjPosting::accountType2LedgerPostingTypesConverting(projAccountType, eventHandlerResult);

                if (eventHandlerResult.hasResult())
                {
                    retval = eventHandlerResult.result();
                }
                else
                {
                    throw error(strFmt("@SYS12580",projAccountType));
                }

                break;
        }
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or updates a record in the <c>ProjPosting</c> table. If an existing record is found, the ledger account number will be updated to the new value. Otherwise a new record is created based on the
    ///    values supplied by the parameters.
    /// </summary>
    /// <param name="_ledgerAccount">
    ///    The ledger account that will be used for posting.
    /// </param>
    /// <param name="_projAccountType">
    ///    The cost or sales posting account type.
    /// </param>
    /// <param name="_projTableGroupAll">
    ///    A <c>TableGroupAll</c> enumeration value that specifies whether the account should be used for all projects, group of projects, or a specific project; optional.
    /// </param>
    /// <param name="_projRel">
    ///    A <c>ProjRelation</c> value that specifies a project or group of projects to use this posting account; optional.
    /// </param>
    /// <param name="_catTableGroupAll">
    ///    A <c>TableGroupAll</c> enumeration value that specifies whether the account should be used for all categories, category group, or a specific category. The default value is
    ///    <c>TableGroupAll::GroupId</c>; optional.
    /// </param>
    /// <param name="_projCategoryId">
    ///    A <c>ProjCategoryId</c> value that specifies a category or group of categories to use the posting account; optional.
    /// </param>
    /// </param>
    /// <param name="_lendingLegalEntity">
    ///    The lending legal entity; optional
    /// </param>
    /// <param name="_borrowingLegalEntity">
    ///    The borrowing legal entity; optional
    /// </param>
    /// <remarks>
    ///    If the ledger account value is null, the existing record will be deleted.
    /// </remarks>
    public static void createTrans(LedgerDimensionDefaultAccount     _ledgerAccount,
                                          ProjAccountType   _projAccountType,
                                          TableGroupAll     _projTableGroupAll    = TableGroupAll::All,
                                          ProjRelation      _projRel              = '',
                                          TableGroupAll     _catTableGroupAll     = TableGroupAll::GroupId,
                                          ProjCategoryId    _projCategoryId       = '',
                                          DataAreaId        _lendingLegalEntity   = curExt(),
                                          DataAreaId        _borrowingLegalEntity = curExt())
    {
        ttsbegin;

        ProjPosting projPosting  = ProjPosting::find(_projAccountType,
                                                    _projTableGroupAll,
                                                    _projRel,
                                                    _catTableGroupAll,
                                                    _projCategoryId,
                                                    true,
                                                    0,
                                                    '',
                                                    _lendingLegalEntity,
                                                    _borrowingLegalEntity);

        if (_ledgerAccount)
        {
            projPosting.ProjCode                = _projTableGroupAll;
            projPosting.ProjRelation            = _projRel;
            projPosting.CategoryCode            = _catTableGroupAll;
            projPosting.ProjCategoryRelation    = _projCategoryId;
            projPosting.LedgerDimension         = _ledgerAccount;
            projPosting.ProjAccountType         = _projAccountType;
            projPosting.LendingLegalEntity      = _lendingLegalEntity;
            projPosting.BorrowingLegalEntity    = _borrowingLegalEntity;

            if (projPosting.validateField(fieldNum(ProjPosting, LedgerDimension)))
            {
                projPosting.write();
            }
        }
        else
        {
            projPosting.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a record is in the table for the values passed as parameters.
    /// </summary>
    /// <param name="_accountType">
    ///    The posting account type for the transaction.
    /// </param>
    /// <param name="_projCode">
    ///    The project used by the transaction for posting.
    /// </param>
    /// <param name="_projRelation">
    ///    The project relation field that is used by the transaction for posting.
    /// </param>
    /// <param name="_categoryCode">
    ///    The category used by the transaction for posting.
    /// </param>
    /// <param name="_categoryRelation">
    ///    The category relation used by the transaction for posting.
    /// </param>
    /// <param name="_projFundingSourceId">
    ///    The funding Source associated with the project used by the transaction; optional.
    /// </param>
    /// </param>
    /// <param name="_lendingLegalEntity">
    ///    The lending legal entity; optional
    /// </param>
    /// <param name="_borrowingLegalEntity">
    ///    The borrowing legal entity; optional
    /// </param>
    /// <returns>
    ///    true if the posting account record exists; otherwise, false.
    /// </returns>
    public static boolean exist(ProjAccountType         _accountType,
                                TableGroupAll           _projCode,
                                ProjRelation            _projRelation,
                                TableGroupAll           _categoryCode,
                                ProjCategoryId          _categoryRelation,
                                ProjFundingSourceRefId  _projFundingSourceId = 0,
                                DataAreaId              _lendingLegalEntity   = curExt(),
                                DataAreaId              _borrowingLegalEntity = curExt())
    {
        return (select firstonly projPosting
                    where projPosting.ProjAccountType           == _accountType             &&
                        projPosting.ProjCode                    == _projCode                &&
                        projPosting.ProjRelation                == _projRelation            &&
                        projPosting.CategoryCode                == _categoryCode            &&
                        projPosting.ProjCategoryRelation        == _categoryRelation        &&
                        projPosting.ProjFundingSource           == _projFundingSourceId     &&
                        projPosting.LendingLegalEntity      == _lendingLegalEntity  &&
                        projPosting.BorrowingLegalEntity    == _borrowingLegalEntity).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the record that corresponds to the values passed as parameters.
    /// </summary>
    /// <param name="_accountType">
    ///    The posting account type for the transaction.
    /// </param>
    /// <param name="_projCode">
    ///    The project used by the transaction for posting.
    /// </param>
    /// <param name="_projRelation">
    ///    The project relation field that is used by the transaction for posting.
    /// </param>
    /// <param name="_categoryCode">
    ///    The category used by the transaction for posting.
    /// </param>
    /// <param name="_categoryRelation">
    ///    The category relation used by the transaction for posting.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_projFundingSourceId">
    ///    The funding Source associated with the project used by the transaction; optional.
    /// </param>
    /// <param name="_taxGroupId">
    ///    The sales tax group used by the transaction for posting; optional
    /// </param>
    /// <param name="_lendingLegalEntity">
    ///    The lending legal entity; optional
    /// </param>
    /// <param name="_borrowingLegalEntity">
    ///    The borrowing legal entity; optional
    /// </param>
    /// <returns>
    ///    The desired posting account record.
    /// </returns>
    /// <remarks>
    ///    This method returns null if the record does not exist.
    /// </remarks>
    public static ProjPosting find(ProjAccountType          _accountType,
                                   TableGroupAll            _projCode,
                                   ProjRelation             _projRelation,
                                   TableGroupAll            _categoryCode,
                                   ProjCategoryId           _categoryRelation,
                                   boolean                  _forUpdate = false,
                                   ProjFundingSourceRefId   _projFundingSourceId = 0,
                                   TaxGroup                 _taxGroupId = '',
                                   DataAreaId               _lendingLegalEntity = curExt(),
                                   DataAreaId               _borrowingLegalEntity = curExt())
    {
        ProjPosting   projPosting = null;

        projPosting.selectForUpdate(_forUpdate);

        select firstonly projPosting
            order by TaxGroupId desc
            where projPosting.ProjAccountType       == _accountType             &&
                  projPosting.ProjCode              == _projCode                &&
                  projPosting.CategoryCode          == _categoryCode            &&
                  projPosting.ProjRelation          == _projRelation            &&
                  projPosting.ProjCategoryRelation  == _categoryRelation        &&
                  (projPosting.TaxGroupId           == _taxGroupId              ||
                   !projPosting.TaxGroupId)                                     &&
                  projPosting.ProjFundingSource     == _projFundingSourceId     &&
                  projPosting.LendingLegalEntity    == _lendingLegalEntity  &&
                  projPosting.BorrowingLegalEntity  == _borrowingLegalEntity;

        return projPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCategoryGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>ProjCategoryGroupId</c> for the specified project category and legal entity
    /// </summary>
    /// <param name = "_projCategoryId">Poject Category ID for lending company</param>
    /// <param name = "_companyId">Legal Entity</param>
    /// <returns>Project category group ID.</returns>

    private static ProjCategoryGroupId getProjCategoryGroupId(ProjCategoryId _projCategoryId, DataAreaId _companyId)
    {
        ProjCategory projCategory;
        select firstonly crossCompany CategoryGroupId from projCategory
        where projCategory.CategoryId == _projCategoryId && projCategory.DataAreaId == _companyId;
        return projCategory.CategoryGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findprojPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record that corresponds to the values that are passed as parameters.
    /// </summary>
    /// <param name="_projAccountType">
    ///    The posting account type for the transaction.
    /// </param>
    /// <param name="_projId">
    ///    The project that is used by the transaction.
    /// </param>
    /// <param name="_projCategoryId">
    ///    The category code that is used by the transaction.
    /// </param>
    /// <param name="_projFundingSourceId">
    ///    The funding source that is associated with the project used by the transaction.
    /// </param>
    /// <param name="_mustBeGroup">
    ///    A Boolean value that indicates whether the <c>ProjLedgerPosting</c> value must be of the
    ///    <c>ProjLedgerPosting::GroupId</c> enumeration type; optional.
    /// </param>
    /// <param name="_taxGroupId">
    ///    The sales tax group used by the transaction for posting; optional
    /// </param>
    /// <param name="_lendingLegalEntity">
    ///    The lending legal entity; optional
    /// </param>
    /// <param name="_borrowingLegalEntity">
    ///    The borrowing legal entity; optional
    /// </param>
    /// <returns>
    ///    The specified posting account record.
    /// </returns>
    /// <remarks>
    ///    This method returns null if the record does not exist.
    /// </remarks>
    public static ProjPosting findprojPosting(ProjAccountType         _projAccountType,
                                              ProjId                  _projId,
                                              ProjCategoryId          _projCategoryId,
                                              ProjFundingSourceRefId  _projFundingSourceId,
                                              boolean                 _mustBeGroup    = false,
                                              TaxGroup                _taxGroupId = '',
                                              DataAreaId              _lendingLegalEntity = curExt(),
                                              DataAreaId              _borrowingLegalEntity = curExt())
    {
        ProjLedgerPosting   projLedgerPosting;
        ProjPosting         projPosting;
        ProjGroupId         projGroupId;
        ProjCategoryGroupId projCategoryGroupId;
        ProjTable projTable;
        DataAreaId borrowingLegalEntity = _borrowingLegalEntity;


        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled() && _lendingLegalEntity != _borrowingLegalEntity && (_projAccountType == ProjAccountType::CostAccount || _projAccountType == ProjAccountType::PayrollAllocation || _projAccountType == ProjAccountType::SalesValue))
        {
            //This is intercompany scenario for integerated advanced journal,
            //we will get the projGroupId based upon borrowing legal entity.
            projTable = ProjTable::findByDataArea(_projId, borrowingLegalEntity);
            projGroupId = projTable.ProjGroupId;
      
            //The projadvancedjournalline contains the categoryId of lending company we will get the categroup groupId from lending company category table.
            projCategoryGroupId = ProjPosting::getProjCategoryGroupId(_projCategoryId, borrowingLegalEntity);
            
            // Currently ProjPosting data is always stored with respect to current legal entity(unless it's account type is intercompanyRevenue) which here is represented by lendingLegalEntity.
            // We will only find the valid account when we query against current legal entity, hence making borrowingLegalEntity = lendingLegalEntity
            borrowingLegalEntity = _lendingLegalEntity;
        }
        else if (_projAccountType == ProjAccountType::IntercompanyRevenue
                || _projAccountType == ProjAccountType::IntercompanyCost)
        {
            //This is intercompany revenue scenario, we will always get data with respect to borrowing legal entity.
            projTable = ProjTable::findByDataArea(_projId, borrowingLegalEntity);
            projGroupId = projTable.ProjGroupId;
            projCategoryGroupId = projPosting::getProjCategoryGroupId(_projCategoryId, borrowingLegalEntity);
        }
        else
        {
            //This is default scenario for which we always take current legal entity.
            projTable = ProjTable::findByDataArea(_projId, _lendingLegalEntity);
            projGroupId = projTable.ProjGroupId;
            projCategoryGroupId = projPosting::getProjCategoryGroupId(_projCategoryId, _lendingLegalEntity);
        }
  
        
        projPosting = ProjPosting::find(_projAccountType,
                                        TableGroupAll::Table,
                                        _projId,
                                        TableGroupAll::Table,
                                        _projCategoryId,
                                        false,
                                        _projFundingSourceId,
                                        _taxGroupId,
                                        _lendingLegalEntity,
                                        borrowingLegalEntity);
        if (!projPosting)
        {
            projPosting = ProjPosting::find(_projAccountType,
                                            TableGroupAll::Table,
                                            _projId,
                                            TableGroupAll::Table,
                                            _projCategoryId,
                                            false,
                                            0,
                                            _taxGroupId,
                                            _lendingLegalEntity,
                                            borrowingLegalEntity);

            if (!projPosting)
            {
                if (_mustBeGroup)
                {
                    projLedgerPosting = ProjLedgerPosting::GroupId;
                }
                else
                {
                    projLedgerPosting = projTable.ProjLedgerPosting;
                }

                if (projLedgerPosting == ProjLedgerPosting::GroupId)
                {
                    projPosting = ProjPosting::find(_projAccountType,
                                                    TableGroupAll::Table,
                                                    _projId,
                                                    TableGroupAll::GroupId,
                                                    projCategoryGroupId,
                                                    false,
                                                    _projFundingSourceId,
                                                    _taxGroupId,
                                                    _lendingLegalEntity,
                                                    borrowingLegalEntity);

                    if (!projPosting)
                    {
                        projPosting = ProjPosting::find(_projAccountType,
                                                        TableGroupAll::Table,
                                                        _projId,
                                                        TableGroupAll::GroupId,
                                                        projCategoryGroupId,
                                                        false,
                                                        0,
                                                        _taxGroupId,
                                                        _lendingLegalEntity,
                                                        borrowingLegalEntity);

                        if (!projPosting)
                        {
                            projPosting = ProjPosting::find(_projAccountType,
                                                            TableGroupAll::Table,
                                                            _projId,
                                                            TableGroupAll::All,
                                                            '',
                                                            false,
                                                            _projFundingSourceId,
                                                            _taxGroupId,
                                                            _lendingLegalEntity,
                                                            borrowingLegalEntity);
                            if (!projPosting)
                            {
                                projPosting = ProjPosting::find(_projAccountType,
                                                                TableGroupAll::Table,
                                                                _projId,
                                                                TableGroupAll::All,
                                                                '',
                                                                false,
                                                                0,
                                                                _taxGroupId,
                                                                _lendingLegalEntity,
                                                                borrowingLegalEntity);

                                if (!projPosting)
                                {
                                    projPosting = ProjPosting::find(_projAccountType,
                                                                    TableGroupAll::GroupId,
                                                                    projGroupId,
                                                                    TableGroupAll::Table,
                                                                    _projCategoryId,
                                                                    false,
                                                                    0,
                                                                    _taxGroupId,
                                                                    _lendingLegalEntity,
                                                                    _borrowingLegalEntity);

                                    if (!projPosting)
                                    {
                                        projPosting = ProjPosting::find(_projAccountType,
                                                                        TableGroupAll::GroupId,
                                                                        projGroupId,
                                                                        TableGroupAll::GroupId,
                                                                        projCategoryGroupId,
                                                                        false,
                                                                        0,
                                                                        _taxGroupId,
                                                                        _lendingLegalEntity,
                                                                        borrowingLegalEntity);
                                        if (!projPosting)
                                        {
                                            projPosting = ProjPosting::find(_projAccountType,
                                                                            TableGroupAll::GroupId,
                                                                            projGroupId,
                                                                            TableGroupAll::All,
                                                                            '',
                                                                            false,
                                                                            0,
                                                                            _taxGroupId,
                                                                            _lendingLegalEntity,
                                                                            borrowingLegalEntity);

                                            if (!projPosting)
                                            {
                                                projPosting = ProjPosting::find(_projAccountType,
                                                                                TableGroupAll::All,
                                                                                '',
                                                                                TableGroupAll::Table,
                                                                                _projCategoryId,
                                                                                false,
                                                                                0,
                                                                                _taxGroupId,
                                                                                _lendingLegalEntity,
                                                                                borrowingLegalEntity);

                                                if (!projPosting)
                                                {
                                                    projPosting = ProjPosting::find(_projAccountType,
                                                                                    TableGroupAll::All,
                                                                                    '',
                                                                                    TableGroupAll::GroupId,
                                                                                    projCategoryGroupId,
                                                                                    false,
                                                                                    0,
                                                                                   _taxGroupId,
                                                                                   _lendingLegalEntity,
                                                                                   borrowingLegalEntity);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    projPosting = ProjPosting::find(_projAccountType,
                                                    TableGroupAll::GroupId,
                                                    projGroupId,
                                                    TableGroupAll::Table,
                                                    _projCategoryId,
                                                    false,
                                                    0,
                                                    _taxGroupId,
                                                    _lendingLegalEntity,
                                                    borrowingLegalEntity);
                    if (!projPosting)
                    {
                        projPosting = ProjPosting::find(_projAccountType,
                                                        TableGroupAll::All,
                                                        '',
                                                        TableGroupAll::Table,
                                                        _projCategoryId,
                                                        false,
                                                        0,
                                                        _taxGroupId,
                                                        _lendingLegalEntity,
                                                        borrowingLegalEntity);
                        if (!projPosting)
                        {
                            projPosting = ProjPosting::find(_projAccountType,
                                                            TableGroupAll::Table,
                                                            _projId,
                                                            TableGroupAll::GroupId,
                                                            projCategoryGroupId,
                                                            false,
                                                            _projFundingSourceId,
                                                            _taxGroupId,
                                                            _lendingLegalEntity,
                                                            borrowingLegalEntity);

                            if (!projPosting)
                            {
                                projPosting = ProjPosting::find(_projAccountType,
                                                                TableGroupAll::Table,
                                                                _projId,
                                                                TableGroupAll::GroupId,
                                                                projCategoryGroupId,
                                                                false,
                                                                0,
                                                                _taxGroupId,
                                                                _lendingLegalEntity,
                                                                borrowingLegalEntity);

                                // Considers a criteria of finding ledger account against a project(table) in relation to all categories.
                                if (!projPosting)
                                {
                                    projPosting = ProjPosting::find(_projAccountType,
                                                            TableGroupAll::Table,
                                                            _projId,
                                                            TableGroupAll::All,
                                                            '',
                                                            false,
                                                            _projFundingSourceId,
                                                            _taxGroupId,
                                                            _lendingLegalEntity,
                                                            borrowingLegalEntity);
                                    if (!projPosting)
                                    {
                                        projPosting = ProjPosting::find(_projAccountType,
                                                                TableGroupAll::Table,
                                                                _projId,
                                                                TableGroupAll::All,
                                                                '',
                                                                false,
                                                                0,
                                                                _taxGroupId,
                                                                _lendingLegalEntity,
                                                                borrowingLegalEntity);

                                        if (!projPosting)
                                        {
                                            projPosting = ProjPosting::find(_projAccountType,
                                                                            TableGroupAll::GroupId,
                                                                            projGroupId,
                                                                            TableGroupAll::GroupId,
                                                                            projCategoryGroupId,
                                                                            false,
                                                                            0,
                                                                            _taxGroupId,
                                                                            _lendingLegalEntity,
                                                                            borrowingLegalEntity);

                                            if (!projPosting)
                                            {
                                                projPosting = ProjPosting::find(_projAccountType,
                                                                                TableGroupAll::All,
                                                                                '',
                                                                                TableGroupAll::GroupId,
                                                                                projCategoryGroupId,
                                                                                false,
                                                                                0,
                                                                                _taxGroupId,
                                                                                _lendingLegalEntity,
                                                                                borrowingLegalEntity);

                                                if (!projPosting)
                                                {
                                                    projPosting = ProjPosting::find(_projAccountType,
                                                                                    TableGroupAll::Table,
                                                                                    _projId,
                                                                                    TableGroupAll::All,
                                                                                    '',
                                                                                    false,
                                                                                    _projFundingSourceId,
                                                                                    _taxGroupId,
                                                                                    _lendingLegalEntity,
                                                                                    borrowingLegalEntity);
                                                    if (!projPosting)
                                                    {
                                                        projPosting = ProjPosting::find(_projAccountType,
                                                                                        TableGroupAll::Table,
                                                                                        _projId,
                                                                                        TableGroupAll::All,
                                                                                        '',
                                                                                        false,
                                                                                        0,
                                                                                        _taxGroupId,
                                                                                        _lendingLegalEntity,
                                                                                        borrowingLegalEntity);

                                                        if (!projPosting)
                                                        {
                                                            projPosting = ProjPosting::find(_projAccountType,
                                                                                            TableGroupAll::GroupId,
                                                                                            projGroupId,
                                                                                            TableGroupAll::All,
                                                                                            '',
                                                                                            false,
                                                                                            0,
                                                                                            _taxGroupId,
                                                                                            _lendingLegalEntity,
                                                                                            borrowingLegalEntity);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        if (!projPosting)
        {
            projPosting = ProjPosting::find(_projAccountType,
                                            TableGroupAll::All,
                                            '',
                                            TableGroupAll::All,
                                            '',
                                            false,
                                            0,
                                            _taxGroupId,
                                            _lendingLegalEntity,
                                            borrowingLegalEntity);
        }

        return projPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a ledger dimension number based on the specified project, category, and account type.
    /// </summary>
    /// <param name="_projAccountType">
    ///    The posting account type for the transaction.
    /// </param>
    /// <param name="_projId">
    ///    The project used by this transaction.
    /// </param>
    /// <param name="_projCategoryId">
    ///    The category code used by this transaction.
    /// </param>
    /// <param name="_projFundingSourceId">
    ///    The funding source that is associated with the project that is used by the transaction.
    /// </param>
    /// <param name="_mustBeGroup">
    ///    A Boolean value that indicates whether the value in the <c>ProjLedgerPosting</c> field must have
    ///    the <c>ProjLedgerPosting::GroupId</c> enumeration value; optional.
    /// </param>
    /// <param name="_throw">
    ///    A Boolean value that determines whether an exception will be thrown if the record is not in the
    ///    <c>ProjPosting</c> table; optional.
    /// </param>
    /// <param name="_lendingLegalEntity">
    ///    The lending legal entity; optional
    /// </param>
    /// <param name="_borrowingLegalEntity">
    ///    The borrowing legal entity; optional
    /// </param>
    /// <returns>
    ///    The ledger dimension that is used by the transaction, based on the parameters for posting.
    /// </returns>
    public static LedgerDimensionDefaultAccount getInventLedgerDimension( ProjAccountType   _projAccountType,
                                                        ProjId                _projId,
                                                        ProjCategoryId        _projCategoryId,
                                                        boolean               _mustBeGroup  = false,
                                                        boolean               _throw        = true,
                                                        DataAreaId            _lendingLegalEntity = curExt(),
                                                        DataAreaId            _borrowingLegalEntity = curExt())
    {
        ProjPosting projPosting;

        if (ProjFundingSource::numberOfFundingSources(ProjTable::find(_projId).ProjInvoiceProjId ) >= 2 )
        {
            projPosting = ProjPosting::findprojPosting(_projAccountType,
                                                        _projId,
                                                        _projCategoryId,
                                                        0,
                                                        _mustBeGroup,
                                                        '',
                                                        _lendingLegalEntity,
                                                        _borrowingLegalEntity);

            if (!projPosting && _throw)
            {
                throw error("@SYS309590");
            }

            return projPosting.LedgerDimension;
        }
        else
        {
            return ProjPosting::getLedgerDimension(_projAccountType,
                                                    _projId,
                                                    _projCategoryId,
                                                    0,
                                                    _mustBeGroup,
                                                    _throw,
                                                    '',
                                                    _lendingLegalEntity,
                                                    _borrowingLegalEntity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a ledger dimension number based on the specified project, category, and account type.
    /// </summary>
    /// <param name="_projAccountType">
    ///    The posting account type for the transaction.
    /// </param>
    /// <param name="_projId">
    ///    The project used by this transaction.
    /// </param>
    /// <param name="_projCategoryId">
    ///    The category code used by this transaction.
    /// </param>
    /// <param name="_projFundingSourceId">
    ///    The funding source that is associated with the project that is used by the transaction.
    /// </param>
    /// <param name="_mustBeGroup">
    ///    A Boolean value that indicates whether the value in the <c>ProjLedgerPosting</c> field must have
    ///    the <c>ProjLedgerPosting::GroupId</c> enumeration value; optional.
    /// </param>
    /// <param name="_throw">
    ///    A Boolean value that determines whether an exception will be thrown if the record is not in the
    ///    <c>ProjPosting</c> table; optional.
    /// </param>
    /// <param name="_taxGroupId">
    ///    The sales tax group used by the transaction for posting; optional
    /// </param>
    /// <param name="_lendingLegalEntity">
    ///    The lending legal entity; optional
    /// </param>
    /// <param name="_borrowingLegalEntity">
    ///    The borrowing legal entity; optional
    /// </param>
    /// <returns>
    ///    The ledger dimension that is used by the transaction, based on the parameters for posting.
    /// </returns>
    public static LedgerDimensionDefaultAccount getLedgerDimension(
        ProjAccountType         _projAccountType,
        ProjId                  _projId,
        ProjCategoryId          _projCategoryId,
        ProjFundingSourceRefId  _projFundingSourceId,
        boolean                 _mustBeGroup    = false,
        boolean                 _throw        = true,
        TaxGroup                _taxGroupId = '',
        DataAreaId              _lendingLegalEntity = curExt(),
        DataAreaId              _borrowingLegalEntity = curExt())
    {
        ProjPosting projPosting = ProjPosting::findprojPosting(_projAccountType,
                                                                _projId,
                                                                _projCategoryId,
                                                                _projFundingSourceId,
                                                                _mustBeGroup,
                                                                _taxGroupId,
                                                                _lendingLegalEntity,
                                                                _borrowingLegalEntity);

        if (!projPosting && _throw)
        {
            error(strFmt("@SYS53099", _projAccountType, _projId));
        }

        return projPosting.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionLedgerPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a ledger dimension number based on the specified project, category, funding source and posting type.
    /// </summary>
    /// <param name="_ledgerPostingType">
    ///    The posting account type for the transaction.
    /// </param>
    /// <param name="_projId">
    ///    The project used by this transaction.
    /// </param>
    /// <param name="_projCategoryId">
    ///    The category code used by this transaction.
    /// </param>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project that is used by the transaction.
    /// </param>
    /// <param name="_mustBeGroup">
    ///    A Boolean value that indicates whether the value in the <c>ProjLedgerPosting</c> field must have
    ///    the <c>ProjLedgerPosting::GroupId</c> enumeration value; optional.
    /// </param>
    /// <param name="_throw">
    ///    A Boolean value that determines whether an exception will be thrown if the record is not in the
    ///    <c>ProjPosting</c> table; optional.
    /// </param>
    /// <param name="_lendingLegalEntity">
    ///    The lending legal entity; optional
    /// </param>
    /// <param name="_borrowingLegalEntity">
    ///    The borrowing legal entity; optional
    /// </param>
    /// <returns>
    ///    The ledger dimension that is used by the transaction, based on the parameters for posting.
    /// </returns>
    public static LedgerDimensionDefaultAccount getLedgerDimensionLedgerPostingType(LedgerPostingType   _ledgerPostingType,
        ProjId                 _projId,
        ProjCategoryId         _projCategoryId,
        ProjFundingSourceRefId _fundingSourceId,
        boolean                _mustBeGroup = false,
        boolean                _throw   = true,
        DataAreaId             _lendingLegalEntity  = curExt(),
        DataAreaId             _borrowingLegalEntity = curExt())
    {
        ProjAccountType     projAccountType;
        LedgerDimensionDefaultAccount   ret;

        if (_ledgerPostingType == LedgerPostingType::None
            || _ledgerPostingType == LedgerPostingType::ProjNoLedger
            || _ledgerPostingType == LedgerPostingType::ProjNeverLedger)
        {
            return ret;
        }

        try
        {
            projAccountType = ProjPosting::ledgerPostingType2accountType(_ledgerPostingType);
        }
        catch
        {
            if (_throw)
            {
                exceptionTextFallThrough();
                throw Exception::Error;
            }
            else
            {
                return ret;
            }
        }

        return ProjPosting::getLedgerDimension(projAccountType, _projId, _projCategoryId, _fundingSourceId,_mustBeGroup, _throw, '', _lendingLegalEntity, _borrowingLegalEntity) ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccessibleToSetLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify a ledger account can be set to on an editable field.
    /// </summary>
    /// <param name = "_set">A boolean value that indicates whether to set the ledger account to the value of
    ///    the <paramref name="_ledgerAccount" /> parameter.</param>
    /// <param name = "_ledgerAccount">The ledger account.</param>
    /// <returns>Returns true if the field is accessible to edit; otherwise false.</returns>
    public static boolean isAccessibleToSetLedger(boolean _set, LedgerDimensionDefaultAccount _ledgerAccount)
    {
        AccessType reqdAccessType;

        DictTable dictTable = new DictTable(tableNum(ProjPosting));

        if (_set)
        {
            if (_ledgerAccount)
            {
                reqdAccessType = AccessType::Edit;
            }
            else
            {
                reqdAccessType = AccessType::Delete;
            }
        }
        else
        {
            reqdAccessType = AccessType::View;
        }

        return dictTable.rights() >= reqdAccessType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefProjContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open the project contract form for the selected project contract.
    /// </summary>
    /// <param name = "_projInvoiceProjId">The project contract identifier.</param>
    /// <param name = "_caller">The caller form.</param>
    static void jumpRefProjContract(ProjInvoiceProjId  _projInvoiceProjId , Object _caller)
    {
        ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(_projInvoiceProjId);
        Args args = new Args();

        args.caller(_caller);
        args.parm(_projInvoiceProjId );

        new MenuFunction(menuitemDisplayStr(ProjInvoiceTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType2accountTypeConverting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delegate for conversion of <c>LedgerPostingType</c> enumeration value to <c>ProjAccountType</c> enumeration value.
    /// </summary>
    /// <param name = "_ledgerPostingType">
    ///    The <c>LedgerPostingType</c> enumeration value to convert.
    /// </param>
    /// <param name = "_result">
    ///    An <c>EventHandlerResult</c> instance, where subscribers can provide the conversion result.
    /// </param>
    static delegate void ledgerPostingType2accountTypeConverting(LedgerPostingType _ledgerPostingType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType2accountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a <c>LedgerPostingType</c> enumeration value to the corresponding <c>ProjAccountType</c>
    ///    enumeration value.
    /// </summary>
    /// <param name="ledgerPostingType">
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    The value of the <c>LedgerPostingType</c> enumeration value as a <c>ProjAccountType</c> enumeration
    ///    value.
    /// </returns>
    public static ProjAccountType ledgerPostingType2accountType(LedgerPostingType ledgerPostingType)
    {
        ProjAccountType retval;

        switch (ledgerPostingType)
        {
            case LedgerPostingType::ProjWIPCostvalue            : retval = ProjAccountType::StatusAccount;            break;
            case LedgerPostingType::ProjOnAccount               : retval = ProjAccountType::OnAccountAccount;               break;
            case LedgerPostingType::ProjCost                    : retval = ProjAccountType::CostAccount;                    break;
            case LedgerPostingType::ProjPayrollAllocation       : retval = ProjAccountType::PayrollAllocation;       break;
            case LedgerPostingType::ProjTurnover                : retval = ProjAccountType::RevenueAccount;                break;
            case LedgerPostingType::ProjSalesvalue              : retval = ProjAccountType::SalesValue;              break;
            case LedgerPostingType::ProjSalesvalueOffset        : retval = ProjAccountType::SalesOffsetAccount;        break;
            case LedgerPostingType::ProjOffsetAccountItem       : retval = ProjAccountType::OffsetAccountItem;       break;
            case LedgerPostingType::ProjStatusAccountItem       : retval = ProjAccountType::StatusAccountItem;       break;
            case LedgerPostingType::ProjAccruedTurnoverProd     : retval = ProjAccountType::AccruedTurnoverProd;     break;
            case LedgerPostingType::ProjWIPProduction           : retval = ProjAccountType::WIPProduction;           break;
            case LedgerPostingType::ProJAccruedTurnoverProfit   : retval = ProjAccountType::AccruedTurnoverProfit;   break;
            case LedgerPostingType::ProjWIPProfit               : retval = ProjAccountType::WIPProfit;               break;
            case LedgerPostingType::ProjAccruedCost             : retval = ProjAccountType::AccruedCost;             break;
            case LedgerPostingType::ProjWIPCost                 : retval = ProjAccountType::WIPCostAccruals;                 break;
            case LedgerPostingType::ProjAccruedRevenueOnAccount : retval = ProjAccountType::AccruedRevenueOnAccount; break;
            case LedgerPostingType::ProjWIPInvoicedOnAccount    : retval = ProjAccountType::WIPInvoicedOnAccount;    break;
            case LedgerPostingType::ProjWIPSubscription         : retval = ProjAccountType::WIPSubscription;         break;
            case LedgerPostingType::ProjAccruedRevenueSubscription
                : retval = ProjAccountType::AccruedRevenueSubscription; break;
            case LedgerPostingType::IntercompanyCost            : retval = ProjAccountType::IntercompanyCost;         break;
            case LedgerPostingType::IntercompanyRevenue         : retval = ProjAccountType::IntercompanyRevenue;         break;

            // <GBR>
            case LedgerPostingType::DebitNote_BR                :

                if (BrazilParameters::isEnabled())
                {
                    retval = ProjAccountType::DebitNote_BR;
                    break;
                }
                else
                {
                    throw error(strFmt("@SYS12580",ledgerPostingType));
                }
            // </GBR>
            default:
                var eventHandlerResult = new EventHandlerResult();
                ProjPosting::ledgerPostingType2accountTypeConverting(ledgerPostingType, eventHandlerResult);

                if (eventHandlerResult.hasResult())
                {
                    retval = eventHandlerResult.result();
                }
                else
                {
                    throw error(strFmt("@SYS12580",ledgerPostingType));
                }

                break;
        }
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjectRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a SysTableLookup to be used for ProjPosting's Project relation lookup
    /// </summary>
    /// <param name = "_formControl">Project relation's lookup control</param>
    /// <param name = "_validFor">Selected Valid For selection</param>
    /// <param name = "_lendingLegalEntity">Lending legal entity ID</param>
    /// <returns>SysTableLookup object with either the ProjTable or ProjGroup as root datasource</returns>
    public static SysTableLookup lookupProjectRelation(FormControl _formControl, TableGroupAll _validFor, DataAreaId _legalEntity)
    {
        if (_validFor == TableGroupAll::All)
        {
            return null;
        }

        SysTableLookup sysTableLookup;
        Query query = new Query();

        if(_validFor == TableGroupAll::Table)
        {
            query.addDataSource(tableNum(ProjTable));
            sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), _formControl);
            sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
            sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));
            if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                sysTableLookup.addLookupfield(fieldNum(ProjTable, Type));
            }
            sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjInvoiceProjId));
            sysTableLookup.addLookupfield(fieldNum(ProjTable, CustAccount));
            sysTableLookup.addLookupfield(fieldNum(ProjTable, ParentId));
        }
        else if (_validFor == TableGroupAll::GroupId)
        {
            query.addDataSource(tableNum(ProjGroup));
            sysTableLookup = SysTableLookup::newParameters(tableNum(ProjGroup), _formControl);
            sysTableLookup.addLookupfield(fieldNum(ProjGroup, ProjGroupId));
            if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                sysTableLookup.addLookupfield(fieldNum(ProjGroup, projType));
            }
        }

        if (_legalEntity != curExt())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_legalEntity);
        }

        sysTableLookup.parmQuery(query);

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCategoryRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a SysTableLookup to be used for ProjPosting's Category relation lookup
    /// </summary>
    /// <param name = "_formControl">Category relation's lookup control</param>
    /// <param name = "_validFor">Selected Valid For selection</param>
    /// <param name = "_legalEntity">Lending legal entity ID</param>
    /// <returns>SysTableLookup object with either the ProjCategory or ProjCategoryGroup as root datasource</returns>
    public static SysTableLookup lookupCategoryRelation(FormControl _formControl, TableGroupAll _validFor, DataAreaId _legalEntity)
    {
        if (_validFor == TableGroupAll::All)
        {
            return null;
        }

        SysTableLookup sysTableLookup;
        Query query = new Query();

        if(_validFor == TableGroupAll::Table)
        {
            query.addDataSource(tableNum(ProjCategory));
            sysTableLookup = SysTableLookup::newParameters(tableNum(ProjCategory), _formControl);
            sysTableLookup.addLookupfield(fieldNum(ProjCategory, CategoryId));
            sysTableLookup.addLookupfield(fieldNum(ProjCategory, Name));
            sysTableLookup.addLookupfield(fieldNum(ProjCategory, CategoryType));
            sysTableLookup.addLookupfield(fieldNum(ProjCategory, CategoryGroupId));
        }
        else if (_validFor == TableGroupAll::GroupId)
        {
            query.addDataSource(tableNum(ProjCategoryGroup));
            sysTableLookup = SysTableLookup::newParameters(tableNum(ProjCategoryGroup), _formControl);
            sysTableLookup.addLookupfield(fieldNum(ProjCategoryGroup, CategoryGroupId));
            sysTableLookup.addLookupfield(fieldNum(ProjCategoryGroup, Name));
            sysTableLookup.addLookupfield(fieldNum(ProjCategoryGroup, CategoryType));
        }

        if (_legalEntity != curExt())
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_legalEntity);
        }

        sysTableLookup.parmQuery(query);

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a buffer is inserted as a new record.
    /// This is overridden to ensure that the ExtensionHash field is calculated before insertion into the database.
    /// </summary>
    public void insert()
    {
        // Compute the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjPosting::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a buffer is updated in a transaction.
    /// This is overridden to ensure that the ExtensionHash field is calculated before insertion into the database.
    /// </summary>
    public void update()
    {
        // Update the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjPosting::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enumerates extension fields of this table, by registering them with the '_hashCalculator' object.
    /// This is the the intended CoC extension point for table extensions to register fields included in the hash.
    /// </summary>
    public static void getExtensionFields(ProjExtensionHashCalculator _hashCalculator)
    {
        // ex: _hashCalculator.addExtensionField(fieldNum(ProjPosting, MyCustomField), defaultFieldValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124925</DeveloperDocumentation>
	<FormRef>ProjPosting</FormRef>
	<Label>@SYS18008</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ProjAccountType</TitleField1>
	<TitleField2>LedgerDimension</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ProjCodeIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ProjCodeIdx</PrimaryIndex>
	<ReplacementKey>ProjCodeIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LendingLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BorrowingLegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Category</Name>
			<Label>@SYS50039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjAccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTaxGroup</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CategoryCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjAccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryRelation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryRelation</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjRelation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LendingLegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@Proj:LendingLegalEntity</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BorrowingLegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@Proj:BorrowingLegalEntity</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtensionHash</Name>
			<ExtendedDataType>ProjExtensionHash</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjFundingSource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjAccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjCategoryRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LendingLegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BorrowingLegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExtensionHash</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjAccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjCategoryRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjFundingSource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LendingLegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BorrowingLegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>DimensionAttributeValueCombination_ProjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjectGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124926</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LendingLegalEntity</Name>
					<Field>LendingLegalEntity</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjCode</Name>
					<Field>ProjCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjRelation</Name>
					<Field>ProjRelation</Field>
					<RelatedField>ProjGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjectTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124926</EntityRelationshipRole>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LendingLegalEntity</Name>
					<Field>LendingLegalEntity</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjCode</Name>
					<Field>ProjCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjRelation</Name>
					<Field>ProjRelation</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjFundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_ProjPosting</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>