<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductInstanceValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductInstanceValue extends EcoResInstanceValue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>EcoResProductInstanceValue</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID to check for existence.
    /// </param>
    /// <returns>
    ///    true if a record with the provided ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResProductInstanceValue::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResProductInstanceValue</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID for which to search.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResProductInstanceValue</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResProductInstanceValue find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResProductInstanceValue  ecoResProductInstanceValue;

        if (_recId)
        {
            ecoResProductInstanceValue.selectForUpdate(_forupdate);
            select firstonly ecoResProductInstanceValue
                where ecoResProductInstanceValue.RecId == _recId;
        }
        return ecoResProductInstanceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>EcoResProductInstanceValue</c> table record with the supplied <c>EcoResProduct</c>
    ///    record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>EcoResProduct</c> record ID to use for the search.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether the record must be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A <c>EcoResProductInstanceValue</c> table record, or an empty buffer.
    /// </returns>
    public static EcoResProductInstanceValue findByProduct(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResProductInstanceValue ecoResProductInstanceValue;

        if (_recId)
        {
            ecoResProductInstanceValue.selectForUpdate(_forupdate);
            select firstonly ecoResProductInstanceValue
                where ecoResProductInstanceValue.Product == _recId;
        }
        return ecoResProductInstanceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create a new <c>EcoResProductInstanceValue</c> record.
    /// </summary>
    /// <param name = "_recId">The <c>EcoResProduct</c> record ID to use for the search.</param>
    /// <param name = "_forupdate">A Boolean value that indicates whether the record must be selected for update; optional.</param>
    /// <returns></returns>
    public static EcoResProductInstanceValue findOrCreateByProduct(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResProductInstanceValue result = EcoResProductInstanceValue::findByProduct(_recId, _forupdate);
        if (!result.RecId)
        {
            result.Product = _recId;
            result.insert();
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS152869</DeveloperDocumentation>
	<Label>@SYS152868</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Product</TitleField1>
	<TitleField2>RecId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResInstanceValue</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResInstanceValue</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResInstanceValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProduct</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResProduct_EcoResProductInstanceValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>