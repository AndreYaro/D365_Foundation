<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvEmpPaymethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvEmpPaymethod extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cardNumber4Digits</Name>
				<Source><![CDATA[
        // mitigated by CRUD AOS validation
    [SysObsolete('This method has been deprecated due to usability concerns', true, 31\05\2017)]
    public display TrvCardNumber4Digits cardNumber4Digits()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplName</Name>
				<Source><![CDATA[
    [SysObsolete('Use join to or reference datasource instead', true, 31\05\2017)]
    display EmplName emplName()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorkerPaymentIDAndCardType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in TrvEmpPaymethod using the values supplied for the <c>WorkerPaymethodID</c> 
    /// and <c>TrvCreditCardType</c> fields.
    /// </summary>
    /// <param name = "_paymethodId">The value used to search for in the <c>WorkerPaymentID</c> field.</param>
    /// <param name = "_cardType">The value to search for in the <c>TrvCreeditCardType</c></param>
    public static TrvEmpPaymethod findByWorkerPaymentIDAndCardType(TrvWorkerPaymethodID _paymethodId, TrvCreditCardType _cardType)
    {
        TrvEmpPaymethod empPaymethod;

        if (TrvParameters::find().AllowCreditCardNumberEntry == TrvPaymethodNumberValidationRule::HashCardNumbers)
        {
            select firstonly * from empPaymethod
                where empPaymethod.HashedPaymethodID == TrvEmpPaymethod::generateHash(_paymethodId, _cardType)
                && empPaymethod.TrvCreditCardType == _cardType;
        }
        else
        {
            select firstonly * from empPaymethod
                where empPaymethod.WorkerPaymethodID == _paymethodId
                && empPaymethod.TrvCreditCardType == _cardType;
        }

        return empPaymethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByHash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in TrvEmpPaymethod using the values supplied for the <c>HashedPaymethodID</c> field.
    /// </summary>
    /// <param name = "_hash">The value used to search for in the <c>HashedPaymethodID</c> field.</param>
    /// <returns>The related TrvEmpPaymethod record.</returns>
    public static TrvEmpPaymethod findByHash(str _hash)
    {
        TrvEmpPaymethod empPaymethod;

        if(!_hash)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        select firstonly * from empPaymethod where empPaymethod.HashedPaymethodID == _hash;

        return empPaymethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayMethodsForWorker</Name>
				<Source><![CDATA[
    public static TrvEmpPaymethod getPayMethodsForWorker(TrvHcmWorkerRecId _worker)
    {
        TrvEmpPaymethod trvEmpPaymethod;
        select trvEmpPaymethod where trvEmpPaymethod.Worker == _worker;
        return trvEmpPaymethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup for the <c>TrvEmpPaymethod</c> records, filtered on a specific worker value.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control.
    /// </param>
    /// <param name="_worker">
    /// The RecID of the worker for which the lookup needs to filter.
    /// </param>
    /// <returns>
    /// A <c>TrvEmpPaymethod</c> record.
    /// </returns>
    public static Common lookupReference(FormReferenceControl _formReferenceControl, RefRecId _worker)
    {
        TrvEmpPaymethod         selectedRecord;
        Query                   lookupQuery;
        QueryBuildDataSource    qbds;
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(TrvEmpPaymethod), _formReferenceControl, true);

        // Display the Paymethod and Worker fields in the lookup form.
        sysTableLookup.addLookupfield(fieldNum(TrvEmpPaymethod, Paymethod));
        sysTableLookup.addLookupfield(fieldNum(TrvEmpPaymethod, Worker));

        // Create a custom Query
        lookupQuery = new Query();
        qbds = lookupQuery.addDataSource(tableNum(TrvEmpPaymethod));
        qbds.addRange(fieldNum(TrvEmpPayMethod, Worker)).value(queryValue(_worker));
        sysTableLookup.parmQuery(lookupQuery);

        selectedRecord = sysTableLookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLuhnValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified string is valid according to the Luhn algorithm.
    /// </summary>
    /// <param name = "_trvWorkerPaymethodID">The card Id.</param>
    /// <returns>true if the specified string is valid according to the Luhn algorithm; otherwise, false.</returns>
    public static boolean isLuhnValid(TrvWorkerPaymethodID _trvWorkerPaymethodID)
    {
        if (strKeep(_trvWorkerPaymethodID, '0123456789') != _trvWorkerPaymethodID)
        {
            // Non-numeric characters found.
            return false; 
        }

        int strLength = strLen(_trvWorkerPaymethodID);
        int sumAll, currentDigitNum;

        for (int i = strLength; i > 0; i--)
        {
            // Get the current rightmost digit.
            int currentDigit = str2Int(subStr(_trvWorkerPaymethodID, i, 1));

            // Double the value of every second rightmost digit.
            // If the result of this doubling operation is greater than 9, subtract 9 from the product.
            if (currentDigitNum mod 2 != 0)
            {
                currentDigit = currentDigit * 2;

                if (currentDigit > 9)
                {
                    currentDigit -= 9;
                }
            }

            currentDigitNum++;
    
            sumAll += currentDigit;
        }
   
        // If the sum is divisible by 10, return true (Luhn valid). Otherwise return false (not valid).
        return (sumAll mod 10 == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean returnValue;
    
        returnValue = super();

        if (returnValue && TrvParameters::find().AllowCreditCardNumberEntry == TrvPaymethodNumberValidationRule::PreventCardNumberEntry)
        {
            // Credit card number entry is not allowed.
            // If the card ID is valid according to the Luhn algorithm then it is considered a valid credit card number.
            if (TrvEmpPaymethod::isLuhnValid(this.WorkerPaymethodID))
            {
                returnValue = checkFailed("@Expense:CreditCardNumberEntryNotAllowed");
            }
        }
    
        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateHash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a hash for the given payment id.  The hash is salted by combining it with the credit card type.
    /// </summary>
    /// <param name = "_paymentId">Payment id to has.</param>
    /// <param name = "_salt">Value that is combined with the payment ID to make the hash more unique.</param>
    /// <returns>The salted SHA512 hash of the provided values.</returns>
    public static TrvHashedPaymentId generateHash(TrvWorkerPaymethodID _paymentId, str _salt)
    {
        var hashedInputStringBuilder = new System.Text.StringBuilder(128);

        str info = _paymentId + _salt;
        using (System.Security.Cryptography.SHA512 shaM = new System.Security.Cryptography.SHA512Managed())
        {
            var hashBytes = shaM.ComputeHash(System.Text.Encoding::UTF8.GetBytes(info));
            
            for (int i = 0; i < hashBytes.length; i++)
            {
                System.Byte b = hashBytes.GetValue(i);
                hashedInputStringBuilder.Append(b.ToString("X2"));
            }

        }

        return hashedInputStringBuilder.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastFourCharacters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last four characters of the given TrvWorkerPaymethodID.
    /// </summary>
    /// <param name = "_trvWorkerPaymethodID">The TrvWorkerPaymethodID to get the last four characters from.</param>
    /// <returns>The last four characters of the given TrvWorkerPaymethodID.</returns>
    public static str getLastFourCharacters(TrvWorkerPaymethodID _trvWorkerPaymethodID)
    {
        return subStr(_trvWorkerPaymethodID, strLen(_trvWorkerPaymethodID), -4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // Replaces the given WorkerPaymethodID with a hashed version and the last four digits.
        if (!this.HashedPaymethodID && TrvParameters::find().AllowCreditCardNumberEntry == TrvPaymethodNumberValidationRule::HashCardNumbers)
        {
            this.HashedPaymethodID = TrvEmpPaymethod::generateHash(this.WorkerPaymethodID, this.TrvCreditCardType);
            this.WorkerPaymethodID = TrvEmpPaymethod::getLastFourCharacters(this.WorkerPaymethodID);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPaymethodID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show only last four characters of the paymetod ID.
    /// </summary>
    /// <param name = "_set">True when the <c>WorkerPaymethodID</c> field is being set; otherwise false</c></param>
    /// <param name = "_value">The new value when set is true.</param>
    /// <returns>The last four digits of the <c>WorkerPaymethodID</c> for existing records, or the full string if the record is new.</returns>
    public edit TrvWorkerPaymethodID editPaymethodID(boolean _set, TrvWorkerPayMethodID _value)
    {
        TrvWorkerPaymethodID displayValue;

        if (_set)
        {
            this.WorkerPaymethodID = _value;
        }
        if (this.RecId)
        {
            displayValue =  TrvEmpPaymethod::getLastFourCharacters(this.WorkerPaymethodID);
        }
        else
        {
            displayValue =  this.WorkerPaymethodID;
        }
        return displayValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TrvElectronicPayment</ConfigurationKey>
	<DeveloperDocumentation>@SYS124828</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>TrvWorkerPickerExpenseReports</FormRef>
	<Label>@SYS101484</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>Paymethod</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CardNumberReference</ClusteredIndex>
	<Modules>Expense</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CardNumberReference</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TXT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Paymethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerPaymethodID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrvCreditCardType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Paymethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HashedPaymethodID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Employee</Name>
			<Label>@SYS4705</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrvCreditCardType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TXT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Paymethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EmployeePaymentMethod</Name>
			<Label>@SYS101484</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Paymethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CardNumberRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Paymethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvPayMethodEDT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TrvCreditCardType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCreditCardType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TXT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvEmpPaymethodTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TrvHcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkerPaymethodID</Name>
			<AllowEdit>No</AllowEdit>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvWorkerPaymethodID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HashedPaymethodID</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TrvHashedPaymentId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CardNumberReference</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerPaymethodID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HashedPaymethodID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TrvCreditCardType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Paymethod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TrvEmpPayIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Paymethod</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TrvCardTypes</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TrvCardTypes</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Describes</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsDescribedBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TrvCreditCardType</Name>
					<Field>TrvCreditCardType</Field>
					<RelatedField>TrvCreditCardType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvHcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UsesThePaymentMethod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsForTheWorker</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>