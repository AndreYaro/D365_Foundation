<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementHeaderExt_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class AgreementHeaderExt_RU extends common
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementClsTranslationName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the agreement classification translation.
    /// </summary>
    /// <returns>
    ///     The agreement classification translation in the current user language.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    display public AgreementClsTranslationName_RU agreementClsTranslationName()
    {
        return(select firstonly Name from agreementClassificationTranslation
            where agreementClassificationTranslation.AgreementClassification == AgreementHeader::find(this.AgreementHeader).AgreementClassification
               && agreementClassificationTranslation.Language == xUserInfo::find().Language).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreementUniqueness</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the uniqueness of the agreement.
    /// </summary>
    /// <param name="_agreementHeader">
    ///     The record of the <c>AgreementHeader</c> table.
    /// </param>
    /// <returns>
    ///     true if agreement is unique; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Throws this exception if this method is not overriden in the subtype table.
    /// </exception>
    public boolean checkAgreementUniqueness(AgreementHeader _agreementHeader)
    {
        throw error(error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAvailableCreditLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the actual credit limit excess check.
    /// </summary>
    /// <returns>
    ///     false if the credit limit is exceeded; otherwise, true.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Throws this exception if this method is not overriden in the subtype table.
    /// </exception>
    public boolean checkAvailableCreditLimit()
    {
        throw error(error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the inventory profile dimension in the agreement lines.
    /// </summary>
    /// <returns>
    ///     true if the inventory profile dimension is valid; otherwise, false.
    /// </returns>
    boolean checkInventProfile()
    {
        AgreementHeaderExt_RU agreementHeaderExtTmp = SysDictTable::newTableId(this.TableId).makeRecord();
        AgreementLine         agreementLine;
        InventDim             inventDim;
        InventProfile_RU      inventProfile;
        boolean               ok = true;

        if (!this.AgreementHeader)
        {
            return ok;
        }

        agreementHeaderExtTmp.data(this);
        agreementHeaderExtTmp.setInventProfileId();

        if (this.InventProfileType != InventProfileType_RU::NotSpecified)
        {
            select firstonly RecId from agreementLine
                where agreementLine.Agreement == this.AgreementHeader
            join InventProfileId_RU from inventDim
                where inventDim.InventDimId == agreementLine.InventDimId
            exists join inventProfile
                where inventProfile.InventProfileId   == inventDim.InventProfileId_RU
                   && inventProfile.InventProfileType != this.InventProfileType;

            if (agreementLine)
            {
                ok = checkFailed(strFmt("@GLS113728",
                                        inventDim.InventProfileId_RU,
                                        this.InventProfileType));
            }
        }

        select firstonly RecId from agreementLine
            where agreementLine.Agreement == this.AgreementHeader
        join InventProfileId_RU from inventDim
            where inventDim.InventDimId == agreementLine.InventDimId
               && inventDim.InventProfileId_RU
               && inventDim.InventProfileId_RU != agreementHeaderExtTmp.InventProfileId;

        if (agreementLine)
        {
            ok = checkFailed(strFmt("@GLS220560",
                                    inventDim.InventProfileId_RU,
                                    agreementHeaderExtTmp.InventProfileId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the record from the <c>AgreementHeaderExt_RU</c> table.
    /// </summary>
    public void  delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.AgreementId));
        }

        ttsBegin;

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        this.updateInventOwnerRelation();

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies whether a field in the <c>AgreementHeaderExt_RU</c> buffer has changed in relation to the
    ///     intercompany or intracompany.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field ID for the field to check for changes.
    /// </param>
    /// <returns>
    ///     true if the field has changed in relation to the intercompany or intracompany; otherwise, false.
    /// </returns>
    public boolean  fieldChanged(fieldId  _fieldId)
    {
        boolean ret = false;

        if (!this.RecId)
        {
            ret = true;
        }

        if (this.orig().(_fieldId) != this.(_fieldId))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventOwnerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines existing of the iventory owner transactions.
    /// </summary>
    /// <returns>
    ///     true if inventory owner transactions exist for an agreement; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Throws this exception if this method is not overriden in the subtype table.
    /// </exception>
    boolean hasInventOwnerTrans()
    {
        throw error(error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the agreement header values from the <c>AgreementHeader</c> record.
    /// </summary>
    /// <param name="_agreementHeader">
    ///     A table buffer that contains the <c>AgreementHeader</c> record.
    /// </param>
    public void initFromAgreementHeader(AgreementHeader _agreementHeader)
    {
        this.AgreementHeader = _agreementHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContactInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the agreement header values from the <c>ContactPerson</c> record.
    /// </summary>
    /// <param name="_contactPerson">
    ///     A table buffer that contains the <c>ContactPerson</c> record.
    /// </param>
    public void initFromContactInfo(ContactPerson _contactPerson)
    {
        if (_contactPerson.email())
        {
            this.Email = _contactPerson.Email();
        }

        if (_contactPerson.phone())
        {
            this.Phone = _contactPerson.phone();
        }

        if (_contactPerson.phoneLocal())
        {
            this.PhoneLocal = _contactPerson.phoneLocal();
        }

        if (_contactPerson.telefax())
        {
            this.TeleFax = _contactPerson.telefax();
        }

        if (_contactPerson.telex())
        {
            this.Telex = _contactPerson.telex();
        }

        if (_contactPerson.url())
        {
            this.Url = _contactPerson.url();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the agreement header values from the <c>CustVendTable</c> record.
    /// </summary>
    /// <param name="_custVendTable">
    ///     A table buffer that contains the <c>CustVendTable</c> record.
    /// </param>
    public void initFromCustVendTable(CustVendTable _custVendTable)
    {
        this.PaymDayId        = _custVendTable.PaymDayId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDeliveryTerm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the agreement header values from the <c>DlvTerm</c> record.
    /// </summary>
    /// <param name="_dlvTerm">
    ///     A table buffer that contains the <c>DlvTerm</c> record.
    /// </param>
    public void initFromDeliveryTerm(DlvTerm _dlvTerm)
    {
        if (_dlvTerm.CustomInventProfileId_RU)
        {
            this.InventProfileId   = _dlvTerm.CustomInventProfileId_RU;
            this.InventProfileType = InventProfile_RU::find(this.InventProfileId).InventProfileType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.AgreementDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the new record in the <c>AgreementHeaderExt_RU</c> table.
    /// </summary>
    public void insert()
    {
        ttsBegin;
        super();
        this.updateDefaultDimension();
        ttsCommit;
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00041, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyLinkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether an intercompany link for the agreement exists.
    /// </summary>
    /// <returns>
    ///     true if an intercompany link exists; otherwise, false.
    /// </returns>
    public boolean intercompanyLinkExist()
    {
        return (select firstonly RecId from agreementReference
            where (  agreementReference.SourceAgreement == this.AgreementHeader
                    || agreementReference.DerivedAgreement == this.AgreementHeader)
                && !agreementReference.IsIntraCompany_RU).RecId != 0 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyUpdateNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies whether the intercompany agreement should be updated.
    /// </summary>
    /// <returns>
    ///     true if the intercompany agreement should be updated; otherwise, false.
    /// </returns>
    public boolean intercompanyUpdateNow()
    {
        AgreementHeaderExt_RU this_orig;
        boolean ret;

        if (!this.RecId)
        {
            ret = true;
        }

        if (!ret)
        {
            this_orig = this.orig();

            if (this_orig.AgreementAmount    != this.AgreementAmount
            ||  this_orig.AgreementDate      != this.AgreementDate
            ||  this_orig.AgreementSubject   != this.AgreementSubject
            ||  this_orig.AgreementVatAmount != this.AgreementVatAmount)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanyLinkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether an intracompany link for the agreement exists.
    /// </summary>
    /// <returns>
    ///     true if an intracompany link exists; otherwise, false.
    /// </returns>
    public boolean intracompanyLinkExist()
    {
        return (select firstonly RecId from agreementReference
            where (  agreementReference.SourceAgreement == this.AgreementHeader
                    || agreementReference.DerivedAgreement == this.AgreementHeader)
                && agreementReference.IsIntraCompany_RU).RecId != 0 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanyOriginDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates how the agreement was created in relation to intracompany agreements.
    /// </summary>
    /// <returns>
    ///     A string that indicates how the agreement is created in relation to intracompany agreement.
    /// </returns>
    display AgreementIntercompanyOrigin intracompanyOriginDisplay()
    {
        AgreementIntercompanyOrigin agreementIntracompanyOrigin;
        DictEnum                    dictEnum = new DictEnum(enumNum(InterCompanyOrigin));

        if (AgreementReference::existSourceAgreement(this.AgreementHeader, true))
        {
            agreementIntracompanyOrigin = dictEnum.value2Name(InterCompanyOrigin::Source);
        }

        if (AgreementReference::existDerivedAgreement(this.AgreementHeader, true))
        {
            agreementIntracompanyOrigin = dictEnum.value2Name(InterCompanyOrigin::Derived);
        }

        return agreementIntracompanyOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intracompanyUpdateNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies whether the intracompany agreement should be updated.
    /// </summary>
    /// <returns>
    ///     true if the intracompany agreement should be updated; otherwise, false.
    /// </returns>
    public boolean intracompanyUpdateNow()
    {
        AgreementHeaderExt_RU this_orig;
        boolean ret;

        if (!this.RecId)
        {
            ret = true;
        }

        if (!ret)
        {
            this_orig = this.orig();

            if (this_orig.AgreementAmount     != this.AgreementAmount
            ||  this_orig.AgreementDate       != this.AgreementDate
            ||  this_orig.AgreementSubject    != this.AgreementSubject
            ||  this_orig.AgreementVatAmount  != this.AgreementVatAmount
            ||  this_orig.TaxAmountDifference != this.TaxAmountDifference
            ||  this_orig.PaymDayId           != this.PaymDayId
            ||  this_orig.InventProfileType   != this.InventProfileType
            ||  this_orig.InventProfileId     != this.InventProfileId
            ||  this_orig.LineOfBusinessId    != this.LineOfBusinessId
            ||  this_orig.Phone               != this.Phone
            ||  this_orig.PhoneLocal          != this.PhoneLocal
            ||  this_orig.CellularPhone       != this.CellularPhone
            ||  this_orig.Telex               != this.Telex
            ||  this_orig.TeleFax             != this.TeleFax
            ||  this_orig.Email               != this.Email
            ||  this_orig.Url                 != this.Url)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAgencyAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if agreement is an agency agreement.
    /// </summary>
    /// <returns>
    /// True if agreement is agency agreement; Otherwise false.
    /// </returns>
    public boolean isAgencyAgreement()
    {
        return this.AgencyAgreement == AgencyAgreement_RU::PurchaseCommission || this.agencyAgreement == AgencyAgreement_RU::SaleCommission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modifies field in the <c>AgreementHeaderExt_RU</c> record.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field ID to modify.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AgreementHeaderExt_RU, InventProfileType):
                this.setInventProfileId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Renames primary key.
    /// </summary>
    public void renamePrimaryKey()
    {
        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes inventory profile.
    /// </summary>
    void setInventProfileId()
    {
        if (this.InventProfileType == InventProfileType_RU::NotSpecified ||
            this.InventProfileType != InventProfile_RU::find(this.InventProfileId).InventProfileType)
        {
            this.InventProfileId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes a field value from this <c>AgreementHeaderExt_RU</c> record to another
    ///     <c>AgreementHeaderExt_RU</c> record.
    /// </summary>
    /// <param name="_toAgreementHeaderExt">
    ///     The <c>AgreementHeaderExt_RU</c> record to which to synchronize the field value.
    /// </param>
    /// <param name="_create">
    ///     Specifies whether the synchronization is performed in a creation scenario.
    /// </param>
    /// <param name="_fieldId">
    ///     The field ID for the field to synchronize.
    /// </param>
    /// <remarks>
    ///     This method is used in intercompany and intracompany scenarios.
    /// </remarks>
    public void syncField(AgreementHeaderExt_RU _toAgreementHeaderExt, boolean _create, fieldId _fieldId)
    {
        if (_create || this.fieldChanged(_fieldId))
        {
            _toAgreementHeaderExt.(_fieldId) = this.(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimension</Name>
				<Source><![CDATA[
    private void updateDefaultDimension()
    {
        AgreementHeader agreementHeader = AgreementHeaderExt_RU::agreementHeader(this.RecId, true);
        AgreementLine   agreementLine;

        if (agreementHeader)
        {
            agreementHeader.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(this.RecId, agreementHeader.DefaultDimension);
            agreementHeader.doUpdate();

            if (agreementHeader.DefaultDimension)
            {
                while select forUpdate agreementLine
                    where agreementLine.Agreement == agreementHeader.RecId
                       && !agreementLine.IsDeleted
                {
                    agreementLine.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(this.RecId, agreementLine.DefaultDimension);
                    agreementLine.IsModified = NoYes::Yes;
                    agreementLine.doUpdate();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventOwnerRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the inventory owner agreement relations.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     Throws this exception if this method is not overriden in the subtype table.
    /// </exception>
    void updateInventOwnerRelation()
    {
        throw error(error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && this.hasInventOwnerTrans())
        {
            ret = checkFailed(strfmt("@GLS115623", fieldid2pname(tablenum(InventDim), fieldnum(InventDim, InventOwnerId_RU))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(AgreementHeaderExt_RU, AgreementDate):
                if (!this.AgreementDate)
                {
                    ret = checkFailed(strFmt("@SYS84753", fieldPName(AgreementHeaderExt_RU, AgreementDate)));
                }
                break;
            case fieldNum(AgreementHeaderExt_RU, CreditMax):
                if (this.CreditMax < 0)
                {
                    ret = checkFailed("@SYS69970");
                }
                else
                {
                    ret = this.checkAvailableCreditLimit();
                }
                break;
            case(fieldnum(AgreementHeaderExt_RU, InventProfileType)):
            case(fieldnum(AgreementHeaderExt_RU, InventProfileId)):
                ret = this.checkInventProfile();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>AgreementHeader</c> record from the current <c>AgreementHeaderExt_RU</c> record.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///     The record ID of the <c>AgreementHeaderExt_RU</c> record.
    /// </param>
    /// <param name="_forupdate">
    ///     A Boolean value that indicates whether the <c>AgreementHeader</c> record is selected for
    ///     update; optional.
    /// </param>
    /// <returns>
    ///     A table buffer that contains the <c>AgreementHeader</c> record.
    /// </returns>
    public static AgreementHeader agreementHeader(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId,
        boolean _forupdate = false)
    {
        AgreementHeader       agreementHeader;
        AgreementHeaderExt_RU agreementHeaderExt;

        if (_agreementHeaderExtRecId)
        {
            if (_forupdate)
            {
                agreementHeader.selectForUpdate(_forupdate);
            }

            select firstOnly agreementHeader
                exists join agreementHeaderExt
                    where agreementHeader.RecId    == agreementHeaderExt.AgreementHeader
                       && agreementHeaderExt.RecId == _agreementHeaderExtRecId;
        }

        return agreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreementCreditLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the actual credit limit excess check.
    /// </summary>
    /// <param name="_agreementSet">
    ///     Set that contains information about agreements.
    /// </param>
    /// <returns>
    ///     false if the credit limit is exceeded; otherwise, true.
    /// </returns>
    #define.CompanyPos(1)
    #define.AgreementModulePos(2)
    #define.AgreementPos(3)
    #define.AgreementCustVendPos(4)
    public static boolean checkAgreementCreditLimit(Set _agreementSet)
    {
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;
        container               agreementCon;
        SetEnumerator           agreementSetEnumerator;
        dataAreaId              company;
        ModuleSalesPurch        agreementModule;
        AgreementHeaderExtRecId_RU agreementHeaderExtRecId;
        CustVendAC              custVendAc;
        boolean                 ret = true;

        if (_agreementSet)
        {
            agreementSetEnumerator = _agreementSet.getEnumerator();
            while (agreementSetEnumerator.moveNext())
            {
                agreementCon            = agreementSetEnumerator.current();
                company                 = conPeek(agreementCon, #CompanyPos);
                agreementModule         = conPeek(agreementCon, #AgreementModulePos);
                agreementHeaderExtRecId = conPeek(agreementCon, #AgreementPos);
                custVendAc              = conPeek(agreementCon, #AgreementCustVendPos);
                changecompany(company)
                {
                    if (agreementHeaderExtRecId)
                    {
                        switch (agreementModule)
                        {
                            case ModuleSalesPurch::Sales:
                                salesAgreementHeaderExt = SalesAgreementHeaderExt_RU::find(agreementHeaderExtRecId);
                                ret = salesAgreementHeaderExt.checkAvailableCreditLimit() && ret;
                                setPrefix(salesAgreementHeaderExt.caption());
                                break;
                            case ModuleSalesPurch::Purch:
                                purchAgreementHeaderExt = PurchAgreementHeaderExt_RU::find(agreementHeaderExtRecId);
                                ret = purchAgreementHeaderExt.checkAvailableCreditLimit() && ret;
                                setPrefix(purchAgreementHeaderExt.caption());
                                break;
                        }
                    }
                    else
                    {
                        ret = AgreementHeaderExt_RU::checkCreditLimitWithoutAgreement(agreementModule, custVendAc) && ret;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditLimitWithoutAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the credit limit for customer or vendor.
    /// </summary>
    /// <param name="_agreementModule">
    ///     The sales or purchase module.
    /// </param>
    /// <param name="_custVendAc">
    ///     The customer or vendor account number.
    /// </param>
    /// <param name="_creditMax">
    ///     The maximum available credit limit; optional.
    /// </param>
    /// <returns>
    ///     false if the credit limit is exceeded; otherwise, true.
    /// </returns>
    public static boolean checkCreditLimitWithoutAgreement(ModuleSalesPurch _agreementModule,
                                                           CustVendAc       _custVendAc,
                                                           AmountMST        _creditMax = 0)
    {
        AmountMST creditLimitAgreementTotal, balanceWithoutAgreement, creditMax;
        CustTable custTable;
        VendTable vendTable;
        boolean   ret = true;

        switch (_agreementModule)
        {
            case ModuleSalesPurch::Sales:
                custTable               = CustTable::find(_custVendAc);
                balanceWithoutAgreement = custTable.openBalanceMSTPerAgreement_RU('');
                if (prmisDefault(_creditMax))
                {
                    creditMax = custTable.CreditMax;
                }
                creditLimitAgreementTotal = SalesAgreementHeaderExt_RU::creditLimitPerCustAccount(_custVendAc);
            break;

            case ModuleSalesPurch::Purch:
                vendTable               = VendTable::find(_custVendAc);
                balanceWithoutAgreement = vendTable.openBalanceMSTPerAgreement_RU('');
                if (prmisDefault(_creditMax))
                {
                    creditMax = vendTable.CreditMax;
                }
                creditLimitAgreementTotal = PurchAgreementHeaderExt_RU::creditLimitPerVendAccount(_custVendAc);
            break;
        }

        creditMax = prmisDefault(_creditMax) ? creditMax : _creditMax;
        creditLimitAgreementTotal = creditLimitAgreementTotal + (balanceWithoutAgreement > 0 ? balanceWithoutAgreement : 0);

        if (creditMax < creditLimitAgreementTotal)
        {
            ret = checkFailed(strFmt("@GLS112517", _custVendAc, creditLimitAgreementTotal, creditMax));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAgreementDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears the agreement segment from the default dimension.
    /// </summary>
    /// <param name="_defaultDimension">
    ///     The default dimension that contains an areement.
    /// </param>
    /// <returns>
    ///     The default dimension without an areement.
    /// </returns>
    public static DimensionDefault clearAgreementDimension(DimensionDefault _defaultDimension)
    {
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        DimensionDefault defaultDimension = _defaultDimension;
        RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

        if (defaultDimension && dimAttrRecId)
        {
            dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(defaultDimension);
            dimAttrValueSetStorage.removeDimensionAttribute(dimAttrRecId);
            defaultDimension = dimAttrValueSetStorage.save();
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills the agreement segment in the default dimension.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///    The record ID of the <c>AgreementHeaderExt_RU</c> record.
    /// </param>
    /// <param name="_defaultDimension">
    ///     The default dimension.
    /// </param>
    /// <returns>
    ///     The default dimension that contains agreement value.
    /// </returns>
    public static DimensionDefault createAgreementDimension(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId, DimensionDefault _defaultDimension)
    {
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        DimensionAttributeValue dimAttrValue;
        DimensionDefault defaultDimension = _defaultDimension;
        RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

        if (_agreementHeaderExtRecId && dimAttrRecId)
        {
            dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
                dimAttrRecId, _agreementHeaderExtRecId, false, true);
            if (dimAttrValue.RecId)
            {
                dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(defaultDimension);
                dimAttrValueSetStorage.addItem(dimAttrValue);
                defaultDimension = dimAttrValueSetStorage.save();
            }
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>AgreementHeaderExt_RU</c> table.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId">
    ///     The record ID of the <c>AgreementHeaderExt_RU</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>AgreementHeaderExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static AgreementHeaderExt_RU find(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId,
        boolean _forUpdate = false)
    {
        AgreementHeaderExt_RU agreementHeaderExt;

        if (_agreementHeaderExtRecId)
        {
            if (_forUpdate)
            {
                agreementHeaderExt.selectForUpdate(_forUpdate);
            }

            select firstOnly agreementHeaderExt
                where agreementHeaderExt.RecId == _agreementHeaderExtRecId;
        }

        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>AgreementHeaderExt_RU</c> table.
    /// </summary>
    /// <param name="_agreementHeaderRecId">
    ///     The record ID of the <c>AgreementHeader</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>AgreementHeaderExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static AgreementHeaderExt_RU findByAgreementHeader(AgreementHeaderRecId _agreementHeaderRecId,
        boolean _forUpdate = false)
    {
        AgreementHeaderExt_RU agreementHeaderExt;

        if (_agreementHeaderRecId)
        {
            if (_forUpdate)
            {
                agreementHeaderExt.selectForUpdate(_forUpdate);
            }

            select firstOnly agreementHeaderExt
                where agreementHeaderExt.AgreementHeader == _agreementHeaderRecId;
        }

        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAgreementId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>AgreementHeaderExt_RU</c> table.
    /// </summary>
    /// <param name="_agreementId">
    ///     The agreement ID to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>AgreementHeaderExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static AgreementHeaderExt_RU findByAgreementId(AgreementId_RU _agreementId,
        boolean _forUpdate = false)
    {
        AgreementHeaderExt_RU agreementHeaderExt;

        if (_agreementId)
        {
            if (_forUpdate)
            {
                agreementHeaderExt.selectForUpdate(_forUpdate);
            }

            select agreementHeaderExt
                where agreementHeaderExt.AgreementId == _agreementId;
        }

        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>AgreementHeaderExt_RU</c> table.
    /// </summary>
    /// <param name="_defaultDimension">
    ///     The default dimension that contains an agreement.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>AgreementHeaderExt_RU</c> table; otherwise, an empty record.
    /// </returns>
    static public AgreementHeaderExt_RU findByDefaultDimension(DimensionDefault _defaultDimension,
                                                               boolean          _forUpdate = false)
    {
        AgreementHeaderExt_RU agreementHeaderExt;
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        AgreementHeaderExtRecId_RU agreementHeaderExtRecId;
        RecId dimAttrRecId;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();
        }

        if (_defaultDimension && dimAttrRecId)
        {
            dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(_defaultDimension);
            agreementHeaderExtRecId = DimensionAttributeValue::find(
                dimAttrValueSetStorage.getValueByDimensionAttribute(dimAttrRecId)).EntityInstance;

            if (agreementHeaderExtRecId)
            {
                agreementHeaderExt.selectForUpdate(_forUpdate);

                select firstonly agreementHeaderExt
                    where agreementHeaderExt.RecId == agreementHeaderExtRecId;
            }
        }

        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>DimensionAttribute</c> record ID for the <c>Agreement</c> entity.
    /// </summary>
    /// <returns>
    ///     The record ID of the agreement dimension attribute.
    /// </returns>
    public static recId getAgreementDimensionAttribute()
    {
        DimensionHierarchy             dimHier;
        DimensionHierarchyLevel        dimHierLevel;
        DimensionAttribute             dimAttribute;
        recId                          attributeId;
        container                      cachedResult;
        int                            tryCount;

        boolean checkAccountStructure()
        {
            select firstonly RecId from dimHierLevel
                where dimHierLevel.DimensionAttribute == attributeId
                exists join dimHier
                    where dimHier.RecId == dimHierLevel.DimensionHierarchy &&
                        dimHier.StructureType == DimensionHierarchyType::AccountStructure &&
                        dimHier.IsDraft == false;

            return dimHierLevel.RecId != 0;
        }

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return 0;
        }

        cachedResult = DimensionCache::getValue(
            DimensionCacheScope::AgreementDimensionAttribute_RU,
            conNull());

        if (cachedResult == conNull())
        {
            try
            {
                tryCount++;
                select RecId from dimAttribute where dimAttribute.BackingEntityType == tableNum(DimAttributeAgreementHeaderExt_RU);
                attributeId = dimAttribute.RecId;

                if (attributeId)
                {
                    if (AgreementParameters_RU::find().DisableAgreementDimension)
                    {
                        attributeId = 0;
                    }
                    else
                    {
                        if (!checkAccountStructure())
                        {
                            attributeId = 0;
                        }
                    }
                }
                else
                {
                    if (!AgreementParameters_RU::find().DisableAgreementDimension)
                    {
                        ttsbegin;
                        dimAttribute.Name = "@ApplicationSuite_Localization:Agreement";
                        dimAttribute.ViewName = tableStr(DimAttributeAgreementHeaderExt_RU);
                        dimAttribute.BackingEntityTableName = tableStr(AgreementHeaderExt_RU);
                        dimAttribute.BackingEntityKeyFieldName = fieldStr(AgreementHeaderExt_RU, RecId);
                        dimAttribute.BackingEntityValueFieldName = fieldStr(AgreementHeaderExt_RU, AgreementId);
                        dimAttribute.HashKey = newGuid();
                        dimAttribute.Type = DimensionAttributeType::ExistingList;
                        dimAttribute.insert();

                        // Create a default translation for this based on the current LanguageId
                        DimensionAttributeTranslation::createOrUpdateTranslation(dimAttribute.RecId, "@ApplicationSuite_Localization:Agreement");
                        ttscommit;

                        attributeId = dimAttribute.RecId;

                        if (!checkAccountStructure())
                        {
                            attributeId = 0;
                        }
                    }
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                // Prevent an endless loop
                if (tryCount < 5)
                {
                    retry;
                }
                else
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
            }

            DimensionCache::insertValue(
                DimensionCacheScope::AgreementDimensionAttribute_RU,
                conNull(),
                [attributeId]);
        }
        else
        {
            attributeId = conPeek(cachedResult, 1);
        }

        return attributeId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS325319</DeveloperDocumentation>
	<Label>@SYS15240</Label>
	<TableGroup>TransactionHeader</TableGroup>
	<TitleField1>AgreementId</TitleField1>
	<TitleField2>AgreementDate</TitleField2>
	<Abstract>Yes</Abstract>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>APARShared</Modules>
	<ReplacementKey>AgreementIdx</ReplacementKey>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventOwner_RU</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventOwner_RU</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AgreementAmount</Name>
			<Label>@GLS104644</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementVatAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AgreementSubject</Name>
			<Label>@GLS104654</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementSubject</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactInfo</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Phone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhoneLocal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CellularPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TeleFax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Url</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Telex</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineOfBusinessId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Credit</Name>
			<Label>@SYS7084</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Essential</Name>
			<Label>@GLS104656</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgencyAgreement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile</Name>
			<Label>@GLS113769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxAmountDifference</Name>
			<Label>@GLS101335</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAmountDifference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TermsOfPayment</Name>
			<Label>@SYS25084</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymDayId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RTax25Debts</Name>
			<Label>@GLS103834</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExcludeReserveCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExcludeReserveCalcTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgencyAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AgencyAgreement_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AgreementAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementAmount_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AgreementDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementSubject</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementSubject_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AgreementVatAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementVatAmount_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CellularPhone</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PhoneMobile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CreditMax</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditMaxMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Email</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanySkipUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>InterCompanySkipUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineOfBusinessId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineOfBusinessId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymDayId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymDayId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Phone</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhoneLocal</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PhoneLocal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAmountDifference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountDifference_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TeleFax</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TeleFax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Telex</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Telex</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Url</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExcludeReserveCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExcludeReserveCalc_RU</ExtendedDataType>
			<Label>@RTax25BadDebtReserve:ExcludeReserveCalcRAP</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExcludeReserveCalcTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExcludeReserveCalc_RU</ExtendedDataType>
			<Label>@RTax25BadDebtReserve:ExcludeReserveCalcTax</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementHeader</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementHeader</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementHeader</Name>
					<Field>AgreementHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProfileId</Name>
					<SourceEDT>InventProfileId_RU</SourceEDT>
					<Field>InventProfileId</Field>
					<RelatedField>InventProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LineOfBusiness</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LineOfBusiness</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineOfBusinessId</Name>
					<SourceEDT>LineOfBusinessId</SourceEDT>
					<Field>LineOfBusinessId</Field>
					<RelatedField>LineOfBusinessId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymDay</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymDay</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymDayId</Name>
					<SourceEDT>PaymDayId</SourceEDT>
					<Field>PaymDayId</Field>
					<RelatedField>PaymDayId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymDayIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>