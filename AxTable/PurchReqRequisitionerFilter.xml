<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqRequisitionerFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReqRequisitionerFilter extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOnBehalf</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records in the <c>PurchReqRequisitionerFilter</c> table for employees that the current user
    ///    can work on behalf of.
    /// </summary>
    static void createOnBehalf()
    {
        PurchReqAuthorizationOrigination    purchReqAuthorizationOrigination;
        TransDate                           dateExecuted          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        boolean                             addCurEmpl            = true;
        RecordInsertList                    purchReqReportingList = new RecordInsertList(tableNum(PurchReqRequisitionerFilter),true);
        PurchReqRequisitionerFilter         requisitionerFilter;
        HcmPositionWorkerAssignment         hcmParentPositionWorkerAssignment;
        HcmPositionHierarchy                hcmPositionHierarchy;

        void addRecord(RecId _requisitionerRecId)
        {
            requisitionerFilter.Requisitioner   = _requisitionerRecId;
            requisitionerFilter.Originator      = HcmWorkerLookup::currentWorker();
            requisitionerFilter.TransDate       = dateExecuted;
            requisitionerFilter.OnBehalfReports = PurchReqOnBehalfReports::OnBehalf;

            purchReqReportingList.add(requisitionerFilter);

            if (HcmWorkerLookup::currentWorker() == _requisitionerRecId)
            {
                addCurEmpl = false;
            }
        }

        void addDirectReports(RecId _parentWorkerRecId, Map requisitionerMap)
        {
            select firstOnly Worker, Position from hcmParentPositionWorkerAssignment where hcmParentPositionWorkerAssignment.Worker == _parentWorkerRecId;

            while select Position, ParentPosition, PositionHierarchyType from hcmPositionHierarchy
                where hcmPositionHierarchy.ParentPosition        == hcmParentPositionWorkerAssignment.Position 
                   && hcmPositionHierarchy.PositionHierarchyType == HcmPositionHierarchyType::lineHierarchyType()			
            {               
                HcmWorkerRecId parentWorkerId = HcmPosition::getWorker(hcmPositionHierarchy.Position);
                if(parentWorkerId != 0 && !requisitionerMap.exists(parentWorkerId) && parentWorkerId != HcmWorkerLookup::currentWorker())
                {
                    addRecord(parentWorkerId);
                    requisitionerMap.insert(parentWorkerId, 1);
                }
            }
        }

        ttsbegin;
        PurchReqRequisitionerFilter::deleteFilter(PurchReqOnBehalfReports::OnBehalf);

        Map requisitionerMap = new Map(Types::Int64, Types::Integer);
        Map specificReportingMap = new Map(Types::Int64, Types::Integer);
        while select Requisitioner,SpecificReporting from purchReqAuthorizationOrigination
            where purchReqAuthorizationOrigination.Originator == HcmWorkerLookup::currentWorker()
        {
            HcmWorkerRecId requisitioner = purchReqAuthorizationOrigination.Requisitioner;

            if (HcmWorker::workerStatusServer(requisitioner) != HcmWorkerStatus::Employed)
            {
                continue;
            }

            addRecord(requisitioner);
            requisitionerMap.insert(requisitioner, 1);

            if (purchReqAuthorizationOrigination.SpecificReporting == PurchReqAuthorizationSpecificReporting::Reporting)
            {
                specificReportingMap.insert(requisitioner, 1);
            }
        }
		
        MapEnumerator specificReportingEnumerator = specificReportingMap.getEnumerator();
        while(specificReportingEnumerator.moveNext())
        {
            addDirectReports(specificReportingEnumerator.currentKey(), requisitionerMap);
        }

        if (addCurEmpl && HcmWorker::find(HcmWorkerLookup::currentWorker()).isEmployee())
        {
            addRecord(HcmWorkerLookup::currentWorker());
        }

        purchReqReportingList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReports</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates records in the <c>PurchReqRequisitionerFilter</c> table for employees that report to the
    ///    current user.
    /// </summary>
    static void createReports()
    {
        //placeholder method for adding reports
        SetEnumerator                       le;
        Set                                 workerReportList;
        TransDate                           dateExecuted        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        Set                                 directReportsSet    = new Set(Types::Int64);
        RecordInsertList                    purchReqReportingList = new RecordInsertList(tableNum(PurchReqRequisitionerFilter),true);
        PurchReqRequisitionerFilter         requisitionerFilter;
        HcmPositionWorkerAssignment         positionWorkerAssignment;
        HcmPositionHierarchy                positionHierarchy;
        recId                               directReportWorkerRecId;
        HcmPositionHierarchyTypeRecId       lineHierarchyType = HcmPositionHierarchyType::lineHierarchyType();
        utcdatetime                         asOfDate = DateTimeUtil::utcNow();

        if (!PurchReqRequisitionerFilter::existFilter(PurchReqOnBehalfReports::Reports))
        {
            // loop through all positions currently assigned to the current user
            while select validTimeState(asOfDate) Position, Worker from positionWorkerAssignment
                where positionWorkerAssignment.Worker == HcmWorkerLookup::currentWorker()
            {
                // find the positions that directly report to the positions assigned to current user
                while select Position from positionHierarchy
                    where positionHierarchy.ParentPosition == positionWorkerAssignment.Position &&
                          positionHierarchy.PositionHierarchyType == lineHierarchyType
                {
                    // get the workers that are assigned to the positions that directly report to the current user
                    directReportWorkerRecId = HcmPosition::getWorker(positionHierarchy.Position);
                    if (directReportWorkerRecId)
                    {
                        directReportsSet.add(directReportWorkerRecId);
                    }
                }
            }

            ttsbegin;
            workerReportList = HcmPositionWorkerAssignment::workerReports(HcmWorkerLookup::currentWorker(), false);
            le = workerReportList.getEnumerator();
            while (le.moveNext())
            {
                requisitionerFilter.Originator      = HcmWorkerLookup::currentWorker();
                requisitionerFilter.Requisitioner   = le.current();
                requisitionerFilter.TransDate       = dateExecuted;
                requisitionerFilter.OnBehalfReports = PurchReqOnBehalfReports::Reports;
                requisitionerFilter.DirectReport    = directReportsSet.in(requisitionerFilter.Originator) ? NoYes::Yes : NoYes::No;
                purchReqReportingList.add(requisitionerFilter);
            }
            purchReqReportingList.insertDatabase();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes records in the <c>PurchReqRequisitionerFilter</c> table that match the current user and
    ///    type parameter.
    /// </summary>
    /// <param name="_type">
    ///    A value that determines which filter to delete.
    /// </param>
    static void deleteFilter(PurchReqOnBehalfReports _type)
    {
        PurchReqRequisitionerFilter requisitionerFilter;

        ttsbegin;

        delete_from requisitionerFilter
            where requisitionerFilter.Originator        == HcmWorkerLookup::currentWorker() &&
                  requisitionerFilter.OnBehalfReports   == _type;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether records already exists in the <c>PurchReqRequisitionerFilter</c> table for the
    ///    current user and type parameter.
    /// </summary>
    /// <param name="_type">
    ///    A value that determines which filter to check for.
    /// </param>
    /// <returns>
    ///    true if a filter exists for the current user; otherwise, false.
    /// </returns>
    static boolean existFilter(PurchReqOnBehalfReports _type)
    {
        return (select firstonly RecId from purchReqRequisitionerFilter
            where purchReqRequisitionerFilter.Originator        == HcmWorkerLookup::currentWorker() &&
                  purchReqRequisitionerFilter.TransDate         == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) &&
                  purchReqRequisitionerFilter.OnBehalfReports   == _type).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchReq</ConfigurationKey>
	<DeveloperDocumentation>@SYS124592</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS119445</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Originator</TitleField1>
	<TitleField2>Requisitioner</TitleField2>
	<ClusteredIndex>Idx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>Idx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectReport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnBehalfReports</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Originator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Requisitioner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnBehalfReports</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DirectReport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnBehalfReports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Originator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Requisitioner</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>User</Name>
			<Label>@SYS16181</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DirectReport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnBehalfReports</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>PurchReqOnBehalfReports</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Originator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Requisitioner</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Idx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Originator</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Requisitioner</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OnBehalfReports</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Originator</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_PurchReqRequisitionerFilter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Originator</Name>
					<Field>Originator</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Requisitioner</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_PurchReqRequisitionerFilter</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Requisitioner</Name>
					<Field>Requisitioner</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>