<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;

public abstract class EcoResValue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compareTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the type of this record with the specified record value.
    /// </summary>
    /// <param name="_value">
    /// The value definition to which to compare.
    /// </param>
    /// <returns>
    /// 0 if the types of this record and the given record are identical.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// This record and the specified record are not comparable as they are not of the same type.
    /// </exception>
    public int compareTo(EcoResValue _value)
    {
        if (!this.isOfSameType(_value))
        {
            throw error("@SYS152880");
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of this record that is compatible with the Procurement Category configuration.
    /// </summary>
    /// <returns>
    /// The string representation of this record.
    /// </returns>
    /// <remarks>
    /// This method should be overriden in subtype tables.
    /// </remarks>
    public str getStringValue()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of this record.
    /// </summary>
    /// <returns>
    ///    The representation of this record.
    /// </returns>
    public anytype getValue()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOfSameType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the type of this record is the same as the type of the given record value.
    /// </summary>
    /// <param name="_value">
    ///    The value definition to which to compare.
    /// </param>
    /// <returns>
    ///    true if the types are the same; otherwise, false.
    /// </returns>
    public boolean isOfSameType(EcoResValue _value)
    {
        return this.TableId == _value.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <returns>
    /// A reference to the duplicated record.
    /// </returns>
    public RefRecId pcDuplicate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the string representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <returns>
    ///    The string representation of this record.
    /// </returns>
    /// <remarks>
    ///    This method should be overwritten in subtype tables.
    /// </remarks>
    public str pcGetStringValue()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the unit of measure data.
    /// </summary>
    /// <param name="_ecoResValue">
    ///    The <c>EcoResValue</c> record for which to find the unit of measure data.
    /// </param>
    /// <returns>
    ///    The value of a <c>Symbol</c> field of a <c>unitOfMeasure</c> object.
    /// </returns>
    display UnitOfMeasureSymbol unitOfMeasure(EcoResValue _ecoResValue)
    {
        EcoResFloatValue    ecoResFloatValue;
        EcoResIntValue      ecoResIntValue;
        UnitOfMeasure       unitOfMeasure;

        UnitOfMeasureSymbol result = '';
        if (_ecoResValue.RecId)
        {
            switch (_ecoResValue.getInstanceRelationType())
            {
                case tablestr(EcoResFloatValue):
                    ecoResFloatValue = (_ecoResValue as EcoResFloatValue);
                    unitOfMeasure = UnitOfMeasure::find(ecoResFloatValue.FloatUnitOfMeasure);
                    break;
                case tablestr(EcoResIntValue):
                    ecoResIntValue = (_ecoResValue as EcoResIntValue);
                    unitOfMeasure = UnitOfMeasure::find(ecoResIntValue.IntUnitOfMeasure);
                    break;
                default:
                    // ignore the rest
                    break;
            }

            if (unitOfMeasure.RecId)
            {
                result = unitOfMeasure.Symbol;
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>value</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>AttributeValueText</c> enumeration value that represents the value data.
    /// </returns>
    public display AttributeValueText value()
    {
        return this.getValueAsText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlankValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a blank <c>EcoResValue</c> record for the specified <c>EcoResAttribute</c> record.
    /// </summary>
    /// <param name="_attribute">
    /// The <c>RefRecId</c> value of an <c>EcoResAttribute</c> record.
    /// </param>
    /// <returns>
    /// The <c>RefRecId</c> value for a new blank <c>EcoResValue</c> record.
    /// </returns>
    public static RefRecId createBlankValue(RefRecId _attribute)
    {
        EcoResAttribute attribute = EcoResAttribute::find(_attribute);
        EcoResDateTimeValue dateTimeValue;
        EcoResCurrencyValue currencyValue;
        EcoResFloatValue    floatValue;
        EcoResIntValue      intValue;
        EcoResTextValue     textValue;
        EcoResBooleanValue  booleanValue;
        EcoResReferenceValue referenceValue;

        if (attribute.RecId)
        {
            switch (attribute.getAttributeTypeDataType())
            {
                case AttributeDataType::DateTime:
                    dateTimeValue.insert();
                    return dateTimeValue.RecId;

                case AttributeDataType::Currency:
                    currencyValue.insert();
                    return currencyValue.RecId;

                case AttributeDataType::Decimal:
                    floatValue.insert();
                    return floatValue.RecId;

                case AttributeDataType::Integer:
                    intValue.insert();
                    return intValue.RecId;

                case AttributeDataType::Text:
                    textValue.insert();
                    return textValue.RecId;

                case AttributeDataType::TrueFalse:
                    booleanValue.insert();
                    return booleanValue.RecId;

                case AttributeDataType::Reference:
                    referenceValue.insert();
                    return referenceValue.RecId;

                default:
                    return EcoResValue::createBlankValueDefault(_attribute);
            }
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBlankValueDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a blank <c>EcoResValue</c> record for the specified default <c>EcoResAttribute</c> record.
    /// </summary>
    /// <param name="_attribute">
    ///     The reference id value of an attribute record.
    /// </param>
    /// <returns>
    ///     The reference id value for a new blank <c>EcoResValue</c> record.
    /// </returns>
    [Replaceable]
    protected static RefRecId createBlankValueDefault(RefRecId _attribute)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>EcoResValue</c> record with defaults for the specified <c>EcoResAttribute</c> record.
    /// </summary>
    /// <param name="_attribute">
    /// The <c>RefRecId</c> value of an <c>EcoResAttribute</c> record.
    /// </param>
    /// <returns>
    /// The <c>RefRecId</c> value for a new default <c>EcoResValue</c> record.
    /// </returns>
    public static RefRecId createDefaultValue(RefRecId _attribute)
    {
        EcoResAttributeDefaultValue defaultAttributeValue =
            EcoResAttributeDefaultValue::findByAttribute(_attribute);

        EcoResValue defaultValue = EcoResValue::find(defaultAttributeValue.Value);
        if (defaultValue.RecId)
        {
            return defaultValue.pcDuplicate();
        }
        else
        {
            return EcoResValue::createBlankValue(_attribute);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record of the <c>EcoResValue</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResValue::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResValue</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResValue</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResValue find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResValue record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueAsText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get text representation of the attribute value.
    /// </summary>
    /// <param name="_languageId">
    /// Language Id for text value. Ignored for nontext types of attributes.
    /// </param>
    /// <param name="_localTimeZone">
    /// Local timezone for datetime value. Ignored for non datetime types of attributes.
    /// </param>
    /// <returns>
    /// An instance of the <c>AttributeValueText</c> enumeration value that represents the value data.
    /// </returns>
    public AttributeValueText getValueAsText(LanguageId _languageId = '', boolean _localTimeZone = true)
    {
        EcoResBooleanValue          ecoResBooleanValue;
        EcoResDateTimeValue         ecoResDateTimeValue;
        EcoResFloatValue            ecoResFloatValue;
        EcoResCurrencyValue         ecoResCurrencyValue;
        EcoResIntValue              ecoResIntValue;
        EcoResTextValue             ecoResTextValue;
        EcoResTextValueTranslation  ecoResTextValueTranslation;
        AttributeValueText          result;

        switch (this.getInstanceRelationType())
        {
            case tableStr(EcoResBooleanValue):
                ecoResBooleanValue = (this as EcoResBooleanValue);
                result = strFmt('%1', ecoResBooleanValue.BooleanValue);
                break;
            case tableStr(EcoResDateTimeValue):
                ecoResDateTimeValue = (this as EcoResDateTimeValue);
                result = ecoResDateTimeValue.getStringValue(_localTimeZone);
                break;
            case tableStr(EcoResFloatValue):
                ecoResFloatValue = (this as EcoResFloatValue);
                UnitOfMeasure unitOfMeasure = UnitOfMeasure::find(ecoResFloatValue.FloatUnitOfMeasure);
                if (unitOfMeasure)
                {
                    // Set the number of decimals to the unit of measure's decimal precision value.
                    result = num2Str(ecoResFloatValue.FloatValue, 0, unitOfMeasure.DecimalPrecision, DecimalSeparator::Auto, ThousandSeparator::Auto);
                }
                else
                {
                    // Fallback
                    result = strFmt('%1', ecoResFloatValue.FloatValue);
                }
                break;
            case tableStr(EcoResCurrencyValue):
                ecoResCurrencyValue = (this as EcoResCurrencyValue);
                result = strFmt("@SYS324543", ecoResCurrencyValue.CurrencyCode, ecoResCurrencyValue.CurrencyValue);
                break;
            case tableStr(EcoResIntValue):
                ecoResIntValue = (this as EcoResIntValue);
                result = int2str(ecoResIntValue.IntValue);
                break;
            case tableStr(EcoResTextValue):
                ecoResTextValue = (this as EcoResTextValue);

                if (!_languageId)
                {
                    _languageId = SysTranslationHelper::getPrimaryLanguage();
                }

                select firstonly TextValue from ecoResTextValueTranslation
                    where ecoResTextValueTranslation.Language == _languageId
                        && ecoResTextValueTranslation.TextValueTable == ecoResTextValue.RecId;

                if (ecoResTextValueTranslation.RecId)
                {
                    result = ecoResTextValueTranslation.TextValue;
                }
                else
                {
                    result = ecoResTextValue.TextValue;
                }
                break;
            default:
                result = '';
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFromHashAndValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>EcoResValue</c> table, used for overriding lookup logic in inherited classes.
    /// </summary>
    /// <param name = "_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>A <c>EcoResValue</c></returns>
    public EcoResValue readFromHashAndValue(boolean _forupdate = false)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// The hashKey from which the hashValue is generated.
    /// </summary>
    /// <remark>
    /// This should be overridden in any inheritees to return a hashkey 'unique' for that type.
    /// </remark>
    /// <returns>A string.</returns>
    protected str hashKey()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the hashed value for the values based on hashKey().
    /// </summary>
    /// <returns>
    /// A <c>EcoResValueSHA1HashHex</c> value.
    /// </returns>
    [SuppressMessage("Microsoft.Cryptographic.Standard", "CA5354:SHA1CannotBeUsed", Justification = "The hash is used for data upgrade scenarios.")]
    public EcoResValueSHA1HashHex hashValue()
    {
        str hashKey = strLwr(this.hashKey());
        str hexString;

        using (MemoryStream keyStream = new MemoryStream())
        {
            new BinaryFormatter().Serialize(keyStream, hashKey);
            keyStream.Seek(0, SeekOrigin::Begin);

            using (var algorithm = new SHA1CryptoServiceProvider())
            {
                using (MemoryStream hashStream = new MemoryStream(algorithm.ComputeHash(keyStream)))
                {
                    hexString = StrRem(System.BitConverter::ToString(hashStream.ToArray()), '-');
                }
            }
        }

        return hexString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // Note HashHex is optional and may be empty, please don't rely on it being filled.
        this.sha1HashHex = this.hashValue();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the concrete implementation of EcoResValue based on data type provided.
    /// </summary>
    /// <param name = "_dataType">The data type of attribute</param>
    /// <returns>EcoResValue record.</returns>
    public static EcoResValue makeRecord(AttributeDataType _dataType)
    {
        switch (_dataType)
        {
            case AttributeDataType::Currency:
                EcoResCurrencyValue currencyValue;
                return currencyValue;

            case AttributeDataType::DateTime:
                EcoResDateTimeValue datetimeValue;
                return datetimeValue;

            case AttributeDataType::Decimal:
                EcoResFloatValue floatValue;
                return floatValue;

            case AttributeDataType::Integer:
                EcoResIntValue integerValue;
                return integerValue;

            case AttributeDataType::Text:
                EcoResTextValue textValue;
                return textValue;

            case AttributeDataType::TrueFalse:
                EcoResBooleanValue booleanValue;
                return booleanValue;

            case AttributeDataType::Reference:
                EcoResReferenceValue referenceValue;
                return referenceValue;

            default:
                EcoResValue value;
                return value;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConcreteEcoResValueRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the concrete table record for the specified <c>EcoResValue</c> buffer based on its instance type.
    /// </summary>
    /// <param name = "_value">The value record.</param>
    /// <returns>The value record cast as a concrete table type.</returns>
    public static EcoResValue getConcreteEcoResValueRecord(EcoResValue _value)
    {
        switch (_value.InstanceRelationType)
        {
            case tableNum(EcoResCurrencyValue):
                return _value as EcoResCurrencyValue;
            case tableNum(EcoResDateTimeValue):
                return _value as EcoResDateTimeValue;
            case tableNum(EcoResFloatValue):
                return _value as EcoResFloatValue;
            case tableNum(EcoResIntValue):
                return _value as EcoResIntValue;
            case tableNum(EcoResTextValue):
                return _value as EcoResTextValue;
            case tableNum(EcoResBooleanValue):
                return _value as EcoResBooleanValue;
        }

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueFieldId</Name>
				<Source><![CDATA[
    public FieldId valueFieldId()
    {
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS341222</DeveloperDocumentation>
	<Label>@SYS130988</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>InstanceRelationType</TitleField1>
	<TitleField2>RecId</TitleField2>
	<Abstract>Yes</Abstract>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Origin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Origin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Origin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SHA1HashHex</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Access Control Data</AssetClassification>
			<ExtendedDataType>EcoResValueSHA1HashHex</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransactionOriginIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>createdTransactionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Origin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InstanceRelationType</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InstanceRelationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SHA1HashHexIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SHA1HashHex</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Origin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Origin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Origin</Name>
					<Field>Origin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>