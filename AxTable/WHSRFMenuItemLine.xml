<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFMenuItemLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSRFMenuItemLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        // Flush any cached validation
        classFactory.globalObjectCache().clear(tableStr(WHSRFMenuItemLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkTransType</Name>
				<Source><![CDATA[
	/// <summary>
	/// Method to display work transaction type of the record.
	/// </summary>
	/// <returns>
	/// The work transaction type of the record.
	/// </returns>
	/// <remarks>

	/// </remarks>
    display WHSWorkTransType displayWorkTransType()
    {
        return (select firstOnly WorkTransType from WHSWorkClassTable
                    where WHSWorkClassTable.WorkClassId == this.WorkClassId).WorkTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        // Flush any cached validation
        classFactory.globalObjectCache().clear(tableStr(WHSRFMenuItemLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        // Flush any cached validation
        classFactory.globalObjectCache().clear(tableStr(WHSRFMenuItemLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>WHSRFMenuItemLine</c> record exists.
	/// </summary>
	/// <param name="_menuItemName">
	/// Menu item name of the record.
	/// </param>
	/// <param name="_workClassId">
	/// Work class id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSMenuItemName _menuItemName,
                                WHSWorkClassId  _workClassId)
    {
        return (_menuItemName && _workClassId) &&
               (select firstonly WHSRFMenuItemLine
                where WHSRFMenuItemLine.MenuItemName == _menuItemName    &&
                      WHSRFMenuItemLine.WorkClassId  == _workClassId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSRFMenuItemLine</c> record with given parameters.
	/// </summary>
	/// <param name="_menuItemName">
	/// Menu item name of the record.
	/// </param>
	/// <param name="_workClassId">
	/// Work class id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSRFMenuItemLine find(WHSMenuItemName    _menuItemName,
                                         WHSWorkClassId     _workClassId,
                                         boolean            _forupdate = false)
    {
        WHSRFMenuItemLine   menuItemLine;

        if (_menuItemName && _workClassId)
        {
            menuItemLine.selectForUpdate(_forupdate);

            select firstonly menuItemLine
                where menuItemLine.MenuItemName  == _menuItemName    &&
                      menuItemLine.WorkClassId   == _workClassId;
        }

        return menuItemLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMenuItemWorkClass</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if menu item work class is valid.
	/// </summary>
    /// <param name="_menuItem">
    /// The parameter of type <c>WHSMenuItemName</c>.
    /// </param>
	/// <param name="_workClassId">
	/// Id of the work class.
	/// </param>
	/// <returns>
	/// True if the menu item work class is valid.
	/// </returns>
    public static boolean validateMenuItemWorkClass(WHSMenuItemName _menuItem, WHSWorkClassId _workClassId)
    {
        WHSRFMenuItemLine    menuItemLine;
        WHSRFMenuItemLine    menuItemLineExists;
        SysGlobalObjectCache sgoc = classFactory.globalObjectCache();
        container            result;
        container            cacheKey = [curext(), _menuItem, _workClassId];

        // The menu item work class is invalid if lines exist for the menu item, but not with the
        // specified class ID. So if no lines exist for the menu item, or lines exist with both the
        // menu item and work class ID, then it is valid. Since this information is very static,
        // use the memoization pattern to cache the results in SGOC.
        result = sgoc.find(tableStr(WHSRFMenuItemLine), cacheKey);
        if (result == conNull())
        {
            select firstOnly RecId from menuItemLine
                where menuItemLine.MenuItemName == _menuItem
                notExists join menuItemLineExists
                    where
                        menuItemLineExists.MenuItemName == _menuItem
                     && menuItemLineExists.WorkClassId == _workClassId;

            // A found result means the validation failed. So return
            // false if a result was found, true if it was not.
            result = [menuItemLine.RecId == 0];

            sgoc.insert(tableStr(WHSRFMenuItemLine), cacheKey, result);
        }

        return conPeek(result, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
    
        WHSWorkClassTable workClassTable = WHSWorkClassTable::findByWorkClassId(this.WorkClassId);

        if (workClassTable.WorkTransType == WHSWorkTransType::Replenishment
            && WHSRFMenuItemTable::find(this.MenuItemName).AllowShippingOverpick == NoYes::Yes)
        {
            ret = checkFailed("@WAX:WHSReplenishmentNotAllowOverPick");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForMenuItemNameWorkTransType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existsForMenuItemNameWorkTransType(WHSMenuItemName _menuItemName, WHSWorkTransType _workTransType)
    {
        WHSRFMenuItemLine rfmenuItemLine;
        WHSWorkClassTable workClassTable;
        
        select firstOnly RecId from rfmenuItemLine
            where rfmenuItemLine.MenuItemName == _menuItemName
            exists join workClassTable
                where workClassTable.WorkClassId == rfmenuItemLine.WorkClassId
                && workClassTable.WorkTransType == _workTransType;

        return rfmenuItemLine.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4437</DeveloperDocumentation>
	<FormRef>WHSRFMenuItem</FormRef>
	<Label>@WAX1041</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>MenuItemName</TitleField1>
	<TitleField2>WorkClassId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>MenuItemNameWorkClassIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>MenuItemNameWorkClassIdIdx</PrimaryIndex>
	<ReplacementKey>MenuItemNameWorkClassIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkClassId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkClassId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkClassId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MenuItemName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMenuItemName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkClassId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkClassId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MenuItemNameWorkClassIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MenuItemName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkClassId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSRFMenuItemTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSRFMenuItemTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MenuItemName</Name>
					<SourceEDT>WHSMenuItemName</SourceEDT>
					<Field>MenuItemName</Field>
					<RelatedField>MenuItemName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkClassTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkClassTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkClassId</Name>
					<Field>WorkClassId</Field>
					<RelatedField>WorkClassId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>