<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25ProfitTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RTax25ProfitTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        RTax25ProfitTable   profitTable;

        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.ProfitId));
        }

        ttsbegin;
        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        while select forupdate profitTable
            where profitTable.ParentProfitRecId == this.RecId
        {
            profitTable.ParentProfitRecId = 0;
            profitTable.doUpdate();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existChild</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existChild()
    {
        return (select firstonly RecId from rTax25ProfitTable
                   index hint ParentProfitIdx
                   where rTax25ProfitTable.ParentProfitRecId == this.RecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChildRecords</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initChildRecords()
    {
        RTax25ProfitTable   tmpProfit;

        ttsbegin;
        while select forupdate tmpProfit
            where tmpProfit.ParentProfitRecId == this.RecId
        {
            tmpProfit.initFromParent(this);
            tmpProfit.update();
            tmpProfit.initChildRecords();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromParent(RTax25ProfitTable _parentProfitTable = null)
    {
        RTax25ProfitTable rTax25ProfitTableLoc;

        if (this.ParentProfitRecId)
        {
            if (_parentProfitTable)
            {
                this.ProfitType = _parentProfitTable.ProfitType;
            }
            else
            {
                select firstonly ProfitType from rTax25ProfitTableLoc
                    where rTax25ProfitTableLoc.RecId == this.ParentProfitRecId;

                this.ProfitType = rTax25ProfitTableLoc.ProfitType;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShortDescription</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initShortDescription()
    {
        int                 uniqueTail;
        str                 description, tail;
        RTax25ProfitTable   profitTable = RTax25ProfitTable::findShortDescription(this.ShortDescription),
                            orig        = this.orig();
        int                 shortDescriptionFieldLength;

        if (! this.ShortDescription || (profitTable && profitTable.RecId != this.RecId))
        {
            if (profitTable && profitTable.RecId != this.RecId)
            {
                warning("@GLS104494");
                description = orig.ShortDescription;
            }
            else
            {
                shortDescriptionFieldLength = new DictField(tableNum(RTax25ProfitTable),fieldNum(RTax25ProfitTable,ShortDescription)).stringLen();
                description = subStr(this.Description,1,shortDescriptionFieldLength);

                while (! description || RTax25ProfitTable::findShortDescription(description))
                {
                    uniqueTail ++;
                    tail        = int2str(uniqueTail);
                    description = subStr(this.Description,1,shortDescriptionFieldLength-strLen(tail)) + tail;
                }
            }

            this.ShortDescription = description;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.initShortDescription();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the primary key for the current <c>RTax25ProfitTable</c> record.
    /// </summary>
    public void renamePrimaryKey()
    {
        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxCode taxCode()
    {
        RTax25ProfitTable rTax25ProfitTable;
        TaxCode           taxCode = this.TaxCode;

        if (!taxCode && this.ParentProfitRecId)
        {
            rTax25ProfitTable = RTax25ProfitTable::find(this.ParentProfitRecId);

            if (rTax25ProfitTable.RecId)
            {
                taxCode = rTax25ProfitTable.taxCode();
            }
        }

        return taxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display TaxName taxName()
    {
        return TaxTable::find(this.TaxCode).TaxName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        this.initShortDescription();

        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(RTax25ProfitTable, ParentProfitRecId) :
                    if (this.ParentProfitRecId == this.RecId
                     || !RTax25ProfitTable::checkProfitRecursion(this.ParentProfitRecId, this.RecId))
                    {
                        ret = checkFailed("@SYS25609");
                    }
                    if (RTax25ProfitTable::profitRecId2DimensionAttributeValue(this.ParentProfitRecId, false)
                     || (select firstonly RecId from rTax25ProfitLedgerSetup
                             where rTax25ProfitLedgerSetup.rTax25ProfitTable == this.ParentProfitRecId).RecId)
                    {
                        ret = checkFailed(strFmt("@GLS104193", RTax25ProfitTable::find(this.ParentProfitRecId).ProfitId));
                    }
                    break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (RTax25ProfitTable::profitId2DimensionAttributeValue(this.ProfitId, false) && (this.existChild() || this.Blocked))
        {
            ret = checkFailed("@GLS104192");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RTax25ProfitId _profitId)
    {
        if (_profitId  && ! RTax25ProfitTable::exist(_profitId))
            return checkFailed(strFmt(RTax25ProfitTable::txtNotExist(), _profitId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProfitRecursion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkProfitRecursion(
        RefRecId  _parentProfitRecId,
        RefRecId  _mainProfitRecId)
    {
        RTax25ProfitTable profitTable;
        boolean           ret = true;

        while select ParentProfitRecId, RecId
            from profitTable
              where profitTable.RecId == _parentProfitRecId
                 && profitTable.RecId != 0
        {
            if ((_mainProfitRecId && profitTable.ParentProfitRecId == _mainProfitRecId) ||
                profitTable.RecId == profitTable.ParentProfitRecId)
            {
                ret = false;
                break;
            }
            else
            {
                ret = RTax25ProfitTable::checkProfitRecursion(profitTable.ParentProfitRecId, _mainProfitRecId);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RTax25ProfitId _profitId)
    {
        return _profitId && (select firstonly RecId from rTax25ProfitTable
                                 where rTax25ProfitTable.ProfitId  == _profitId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>RTax25ProfitTable</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>RTax25ProfitTable</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25ProfitTable find(
        RecId             _recId,
        boolean           _forupdate = false,
        ConcurrencyModel  _concurrencyModel = ConcurrencyModel::Auto)
    {
        RTax25ProfitTable rTax25ProfitTable;

        rTax25ProfitTable.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            rTax25ProfitTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly rTax25ProfitTable
            where rTax25ProfitTable.RecId == _recId;

        return rTax25ProfitTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProfitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>RTax25ProfitTable</c> table for the specified profit code.
    /// </summary>
    /// <param name="_profitId">
    /// The unique profit code to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>RTax25ProfitTable</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25ProfitTable findByProfitId(
        RTax25ProfitId _profitId,
        boolean        _forUpdate = false)
    {
        RTax25ProfitTable profitTable;

        if (_profitId)
        {
            profitTable.selectForUpdate(_forUpdate);

            select firstonly profitTable
                where profitTable.ProfitId == _profitId;
        }

        return profitTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>RTax25ProfitTable</c> table for the specified default dimension and optional register id.
    /// </summary>
    /// <param name="_defaultDimension">
    /// The default dimension which is used to find profit record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_registerId">
    /// The register id to find; optional.
    /// </param>
    /// <returns>
    /// A buffer containing <c>RTax25ProfitTable</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25ProfitTable findDefaultDimension(
        DimensionDefault _defaultDimension,
        boolean          _forUpdate  = false,
        RTax25RegisterId _registerId = "")
    {
        RTax25ProfitTable       profitTable;
        RTax25RegisterProfit    registerTable;
        DimensionAttribute      dimAttr;
        DimensionAttributeValue dimAttrValue;

        if (_defaultDimension)
        {
            dimAttr = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);
            if (dimAttr)
            {
                dimAttrValue = DimensionAttributeValue::find(
                    DimensionAttributeValueSetStorage::find(_defaultDimension).getValueByDimensionAttribute(dimAttr.RecId));

                if (_registerId)
                {
                    select firstonly profitTable
                        where profitTable.RecId == dimAttrValue.EntityInstance
                        exists join registerTable
                            where registerTable.RegisterId        == _registerId
                               && registerTable.rTax25ProfitTable == profitTable.RecId;
                }
                else
                {
                    select firstonly profitTable
                        where profitTable.RecId == dimAttrValue.EntityInstance;
                }
            }
        }

        return profitTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRoot</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25ProfitTable findRoot(
        RefRecId _profitTableRecId,
        boolean  _forUpdate = false)

    {
        RTax25ProfitTable  profitTable;

        profitTable = RTax25ProfitTable::find(_profitTableRecId, _forUpdate);

        if (profitTable.ParentProfitRecId)
        {
            RTax25ProfitTable::findRoot(profitTable.ParentProfitRecId, _forUpdate);
        }

        return profitTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findShortDescription</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25ProfitTable findShortDescription(RTax25ShortDescription _description,
                                                         boolean                _forUpdate = false)
    {
        RTax25ProfitTable profitTable;

        if (_description)
        {
            profitTable.selectForUpdate(_forUpdate);

            select firstonly profitTable
                where profitTable.ShortDescription  == _description;
        }
        return profitTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the dimension validation for profit rec id.
    /// </summary>
    /// <param name="_profitRecId">
    /// A profit rec id of the <c>RTax25ProfitTable</c> table.
    /// </param>
    /// <returns>
    /// true if the validation is OK; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isValidDimension(RTax25ProfitTableRecId _profitRecId)
    {
        DictTable               dictTable;
        Common                  common;
        DimensionAttribute      dimAttr;
        boolean                 ret;
        ;

        if (_profitRecId)
        {
            dimAttr = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);

            if (dimAttr)
            {
                dictTable = new DictTable(dimAttr.BackingEntityType);
                common    = dictTable.makeRecord();

                select firstonly common where common.(dimAttr.KeyAttribute) == _profitRecId;
                if (common)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLeafProfitId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupLeafProfitId(FormStringControl _ctrl,
                                          RTax25ProfitType  _profitType  = RTax25ProfitType::Unknown,
                                          boolean           _dimNotEmpty = false)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(RTax25ProfitTable), _ctrl);
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        ;

        sysTableLookup.addLookupfield(fieldNum(RTax25ProfitTable, ProfitId));
        sysTableLookup.addLookupfield(fieldNum(RTax25ProfitTable, Description));

        query = new Query(queryStr(RTax25ProfitDimension));
        qbds  = query.dataSourceTable(tableNum(RTax25ProfitTable));

        if (_profitType != RTax25ProfitType::Unknown)
        {
            qbds.addRange(fieldNum(RTax25ProfitTable, ProfitType)).value(queryValue(_profitType));
        }

        if (!_dimNotEmpty)
        {
            qbr = qbds.findRange(fieldNum(RTax25ProfitTable, Blocked));
            if (qbr)
            {
                qbr.value(SysQuery::valueUnlimited());
            }
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLeafProfitTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and displays lookup to select the leafs of the expense and income codes.
    /// </summary>
    /// <param name="_ctrlProfit">
    /// An instance of the form control where the lookup is called out.
    /// </param>
    /// <param name="_profitType">
    /// A <c>RTax25ProfitType</c> value that sets filter by profit type.
    /// </param>
    /// <param name="_dimNotEmpty">
    /// A Boolean value that sets filter by blocked field.
    /// </param>
    /// <returns>
    /// The container of the selected <c>RTax25ProfitTable</c> table record.
    /// </returns>
    public static RTax25ProfitTable lookupLeafProfitTable(
        FormReferenceControl _ctrlProfit,
        RTax25ProfitType     _profitType  = RTax25ProfitType::Unknown,
        boolean              _dimNotEmpty = false)
    {
        SysReferenceTableLookup  lookup = SysReferenceTableLookup::newParameters(
            tableNum(RTax25ProfitTable),
            _ctrlProfit,
            true);

        Query                 query;
        QueryBuildDataSource  qbds;
        QueryBuildRange       qbr;
        RTax25ProfitTable     selectedRecord;

        lookup.addLookupfield(fieldNum(RTax25ProfitTable, ProfitId));
        lookup.addLookupfield(fieldNum(RTax25ProfitTable, Description));

        query = new Query(queryStr(RTax25ProfitDimension));
        qbds  = query.dataSourceTable(tableNum(RTax25ProfitTable));

        if (_profitType != RTax25ProfitType::Unknown)
        {
            qbds.addRange(fieldNum(RTax25ProfitTable, ProfitType)).value(queryValue(_profitType));
        }

        if (!_dimNotEmpty)
        {
            qbr = qbds.findRange(fieldNum(RTax25ProfitTable, Blocked));
            if (qbr)
            {
                qbr.value(SysQuery::valueUnlimited());
            }
        }

        lookup.parmQuery(query);
        selectedRecord = lookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>profitId2DimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>DimensionAttributeValue</c> table for the specified profit code.
    /// </summary>
    /// <param name="_profitId">
    /// The profit code which is used to find dimension attribute.
    /// </param>
    /// <param name="_createIfNecessary">
    /// A Boolean value that indicates whether a new record should be inserted if one does not yet exist;
    /// optional.
    /// </param>
    /// <returns>
    /// A record in the DimensionAttributeValue table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DimensionAttributeValue profitId2DimensionAttributeValue(RTax25ProfitId _profitId, boolean _createIfNecessary = true)
    {
        DictTable               dictTable;
        Common                  common;
        DimensionAttributeValue dimAttrValue;
        DimensionAttribute      dimAttr;

        if (_profitId)
        {
            dimAttr = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);

            if (dimAttr)
            {
                dimAttrValue.clear();
                dimAttrValue.DimensionAttribute = dimAttr.RecId;

                dictTable = new DictTable(dimAttr.BackingEntityType);
                common    = dictTable.makeRecord();

                select firstonly common where common.(dimAttr.ValueAttribute) == _profitId;
                if (common)
                {
                    dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimAttr.RecId, common.(dimAttr.KeyAttribute), false, _createIfNecessary);
                }
            }
        }

        return dimAttrValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>profitRecId2DefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record of the default dimension for the specified profit rec id.
    /// </summary>
    /// <param name="_profitRecId">
    /// The profit rec id which is used to find default dimension.
    /// </param>
    /// <returns>
    /// A record of the default dimension; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DimensionDefault profitRecId2DefaultDimension(RTax25ProfitTableRecId _profitRecId)
    {
        DimensionAttributeValue           dimAttrValue;
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        DimensionDefault                  defaultDimension;

        dimAttrValue = RTax25ProfitTable::profitRecId2DimensionAttributeValue(_profitRecId);

        if (dimAttrValue)
        {
            dimAttrValueSetStorage = new DimensionAttributeValueSetStorage();
            dimAttrValueSetStorage.addItem(dimAttrValue);
            defaultDimension = dimAttrValueSetStorage.save();
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>profitRecId2DimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>DimensionAttributeValue</c> table for the specified profit rec id.
    /// </summary>
    /// <param name="_profitRecId">
    /// The profit rec id which is used to find dimension attribute.
    /// </param>
    /// <param name="_createIfNecessary">
    /// A Boolean value that indicates whether a new record should be inserted if one does not yet exist;
    /// optional.
    /// </param>
    /// <returns>
    /// A record in the DimensionAttributeValue table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DimensionAttributeValue profitRecId2DimensionAttributeValue(RTax25ProfitTableRecId _profitRecId, boolean _createIfNecessary = true)
    {
        DictTable               dictTable;
        Common                  common;
        DimensionAttributeValue dimAttrValue;
        DimensionAttribute      dimAttr;

        if (_profitRecId)
        {
            dimAttr = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);

            if (dimAttr)
            {
                dimAttrValue.clear();
                dimAttrValue.DimensionAttribute = dimAttr.RecId;

                dictTable = new DictTable(dimAttr.BackingEntityType);
                common    = dictTable.makeRecord();

                select firstonly common
                    where common.(dimAttr.KeyAttribute) == _profitRecId;
                if (common)
                {
                    dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimAttr.RecId, common.(dimAttr.KeyAttribute), false, _createIfNecessary);
                }
            }
        }

        return dimAttrValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@GLS104169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS116101</DeveloperDocumentation>
	<FormRef>RTax25ProfitTable</FormRef>
	<Label>@GLS103734</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ProfitId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>RTax25</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ProfitIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RTax25ProfitLedgerSetup</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RTax25ProfitLedgerSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RTax25ProfitTotalsSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RTax25ProfitTotalsSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RTax25TaxTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RTax25TaxTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentProfitRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Balance</Name>
			<Label>@SYS95</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShortDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectExpenseType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ParentCode</Name>
			<Label>@GLS103907</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParentProfitRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProfitTreeOverview</Name>
			<Label>@GLS103733</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShortDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax</Name>
			<Label>@GLS106091</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS8709</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DirectExpenseType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DirectExpenseType_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentProfitRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RTax25ProfitTableRecId</ExtendedDataType>
			<Label>@GLS103907</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProfitId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25ProfitId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProfitType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RTax25ProfitType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShortDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25ShortDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProfitIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProfitId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentProfitIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentProfitRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShortDescriptionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ShortDescription</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RTax25ProfitTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25ProfitTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ParentRTax25ProfitTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RTax25ProfitTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentProfitRecId</Name>
					<Field>ParentProfitRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RTax25ProfitTableProfitId</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RTax25ProfitTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfitId</Name>
					<Field>ProfitId</Field>
					<RelatedField>ProfitId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>