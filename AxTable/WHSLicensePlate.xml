<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLicensePlate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultContainerType</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves the default container type code based upon a hierarchy of where this value can be set.
    /// </summary>
    /// <param name="_licensePlateId">
    ///  A license plate id
    /// </param>
    /// <param name="_menuItemName">
    ///  A mobile device menu item name
    /// </param>
    /// <param name="_userId">
    ///  A mobile device user id
    /// </param>
    /// <param name="_inventLocationId">
    ///  A warehouse id
    /// </param>
    /// <param name="_locationId">
    ///  A warehouse location
    /// </param>
    /// <param name="_itemId">
    ///  An item id
    /// </param>
    /// <param name="_uomSeqGroupId">
    ///  A unit of measure group id
    /// </param>
    /// <param name="_unitId">
    ///  A unit of measure symbol
    /// </param>
    /// <returns>
    ///  Returns the default container type.
    /// </returns>
    public static WHSDefaultContainerTypeCode getDefaultContainerType(
        WHSLicensePlateId   _licensePlateId     = '',
        WHSMenuItemName     _menuItemName       = '',
        WHSUserId           _userId             = '',
        InventLocationId    _inventLocationId   = '',
        WMSLocationId       _locationId         = '',
        ItemId              _itemId             = '',
        WHSUOMSeqGroupId    _uomSeqGroupId      = '',
        UnitOfMeasureSymbol _unitId             = '')
    {
        WHSUOMSeqGroupId                uomSeqGroupId   = _uomSeqGroupId;
        UnitOfMeasureSymbol             unitId          = _unitId;
        WHSDefaultContainerTypeCode     defaultContainerType;

        // Existing license place default container
        if (_licensePlateId)
        {
            defaultContainerType = WHSLicensePlate::find(_licensePlateId).ContainerTypeCode;
        }

        // Mobile device menu item default container type
        if (_menuItemName
        &&  _userId
        && (_inventLocationId
        ||  _locationId)
        && !defaultContainerType)
        {
            WHSRFMenuItemTable whsRFMenuItemTable = WHSRFMenuItemTable::find(_menuItemName);

            if (whsRFMenuItemTable.canDefaultContainerType())
            {
                defaultContainerType = WHSRFDefaultData::getDefaultValue(_menuItemName, WHSDefaultDataField::ContainerType, _userId, _inventLocationId, _locationId);
            }
        }

        // Unit sequence group default container type
        if (_itemId && !defaultContainerType)
        {
            uomSeqGroupId = _uomSeqGroupId ? _uomSeqGroupId : WHSInventTable::find(_itemId).UOMSeqGroupId;
            unitId = _unitId ? _unitId : WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

            defaultContainerType = WHSUOMSeqGroupLine::findByUnitId(uomSeqGroupId, unitId).DefaultContainerTypeCode;
        }

        // Warehouse default container type
        if (_inventLocationId && !defaultContainerType)
        {
            InventLocation inventLocation = InventLocation::find(_inventLocationId);

            defaultContainerType = inventLocation.DefaultContainerTypeCode;
        }

        // Warehouse management parameters default container type
        if (!defaultContainerType)
        {
            defaultContainerType = WHSParameters::find().DefaultContainerTypeCode;
        }

        return defaultContainerType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChildLicensePlatesInLocation</Name>
				<Source><![CDATA[
    internal static boolean hasChildLicensePlatesInLocation(WHSLicensePlateId _licensePlateId, InventLocationId _inventLocationId)
    {
        List nestedLicensePlates = WHSLicensePlate::getNestedLicensePlates(_licensePlateId);
        ListIterator iterator = new ListIterator(nestedLicensePlates);
            
        while (iterator.more())
        {
            if (WhsLicensePlate::findLicensePlatesWarehouse(iterator.value()) == _inventLocationId)
            {
                return true;
            }

            iterator.next();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLicensePlatesWarehouse</Name>
				<Source><![CDATA[
    internal static InventLocationId findLicensePlatesWarehouse(WHSLicensePlateId _licensePlateId)
    {
        InventSum inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly InventLocationId from inventSum
                where inventSum.LicensePlateId == _licensePlateId
                    && inventSum.ClosedQty == NoYes::No
                    && (inventsum.physicalinvent != 0 || inventsum.PdsCWPhysicalInvent != 0);

            return inventsum.InventLocationId;
        }
        else
        {
            InventDim inventDim;

            select firstonly InventLocationId from inventDim
                where inventDim.LicensePlateId == _licensePlateId
                    exists join inventSum
                    where inventSum.InventDimId == inventDim.InventDimId
                    && (inventSum.PhysicalInvent != 0 || inventSum.PdsCWPhysicalInvent != 0);
           
            return inventDim.InventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQtyOnLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds physical quantity on a license plate.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id.
    /// </param>
    /// <returns>
    /// The total quantity on-hand of all items with the specified license plate.
    /// </returns>
    [SysObsolete('Please use the getTotalHandlingQtyOnLicensePlate instead since this method will not account for catch weight items', false, 31\03\2019)]
    public static InventQty getTotalQtyOnLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        InventSum inventSum;

        if (_licensePlateId)
        {
            Query query = WHSLicensePlate::buildTotalHandlingQtyOnLicensePlateQuery(_licensePlateId);
            QueryRun queryRun = new QueryRun(query);

            if (queryRun.next())
            {
                inventSum = queryRun.get(tableNum(InventSum));
            }
        }

        return inventSum.PhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateEmptyOnLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the licenseplate is empty on a location.
    /// </summary>
    /// <param name = "_licensePlateId">The license plate Id.</param>
    /// <param name = "_wmsLocationId">The location Id.</param>
    /// <param name = "_inventLocationId">The locations warehouse.</param>
    /// <returns>true if the licenseplate is empty; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean isLicensePlateEmptyOnLocation(
        WHSLicensePlateId   _licensePlateId,
        WMSLocationId       _wmsLocationId,
        InventLocationId    _inventLocationId)
    {
        boolean ret = true;

        //guard against missing parameters to avoid heavy query from being executed
        if (_licensePlateId && _wmsLocationId && _inventLocationId)
        {
            InventDim inventDim;
        
            if (InventUpdateOnhandGlobal::instance().inventUpdateOnhand().mustAddAnyInventSumDeltaOnhand())
            {
                if (InventUseDimOfInventSumToggle::instance().isEnabled() && InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
                {
                    InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty inventSumWithDim;

                    select sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSumWithDim
                        where inventSumWithDim.LicensePlateId  == _licensePlateId
                        && inventSumWithDim.WMSLocationId      == _wmsLocationId
                        && inventSumWithDim.inventLocationId   == _inventLocationId;
                       
                    ret = (inventSumWithDim.PhysicalInvent == 0 && inventSumWithDim.PdsCWPhysicalInvent == 0);
                }
                else
                {
                    InventSumUnionDeltaPhysicalQty  inventSumUnionDeltaPhysicalQty;

                    select sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSumUnionDeltaPhysicalQty
                    exists join inventDim
                        where inventDim.InventDimId         == inventSumUnionDeltaPhysicalQty.InventDimId
                            && inventDim.LicensePlateId     == _licensePlateId
                            && inventDim.WMSLocationId      == _wmsLocationId
                            && inventDim.inventLocationId   == _inventLocationId;

                    ret = (inventSumUnionDeltaPhysicalQty.PhysicalInvent == 0 && inventSumUnionDeltaPhysicalQty.PdsCWPhysicalInvent == 0);
                }
            }
            else
            {
                InventSum inventSum;
                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {
                    select sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSum
                    where inventSum.ClosedQty           == NoYes::No
                        && inventSum.LicensePlateId     == _licensePlateId
                        && inventSum.WMSLocationId      == _wmsLocationId
                        && inventSum.inventLocationId   == _inventLocationId;
                }
                else
                {
                    select sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSum
                    where inventSum.ClosedQty == NoYes::No
                    exists join inventDim
                        where inventDim.InventDimId        == inventSum.InventDimId
                           && inventDim.LicensePlateId     == _licensePlateId
                           && inventDim.WMSLocationId      == _wmsLocationId
                           && inventDim.inventLocationId   == _inventLocationId;
                }

                ret = (inventSum.PhysicalInvent == 0 && inventSum.PdsCWPhysicalInvent == 0);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalHandlingQtyOnLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines total handling quantity on a license plate including on-hand delta.
    /// </summary>
    /// <param name="_licensePlateId">
    ///  The ID for a license plate
    /// </param>
    /// <returns>
    ///  Returns the physical inventory found on a license plate including on-hand delta.
    /// </returns>
    public static InventHandlingQty getTotalHandlingQtyOnLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return WHSLicensePlate::getTotalQuantitiesOnLicensePlate(_licensePlateId);
        }

        return WHSLicensePlate::getTotalQtyOnLicensePlate(_licensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQuantitiesOnLicensePlate</Name>
				<Source><![CDATA[
    private static InventHandlingQty getTotalQuantitiesOnLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        InventHandlingQty totalQty;

        if (_licensePlateId)
        {
            Query query = WHSLicensePlate::buildTotalQtyOnLicensePlateQueryNonCW(_licensePlateId);
            QueryRun queryRun = new QueryRun(query);
            InventSum inventSum;

            if (queryRun.next())
            {
                inventSum = queryRun.get(tableNum(InventSum));

                totalQty += inventSum.PhysicalInvent;
            }

            query = WHSLicensePlate::buildTotalQtyOnLicensePlateQueryCW(_licensePlateId);
            queryRun = new QueryRun(query);

            if (queryRun.next())
            {
                inventSum = queryRun.get(tableNum(InventSum));

                totalQty += inventSum.PdsCWPhysicalInvent;
            }
        }

        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTotalQtyOnLicensePlateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Query</c> object to find the the physical quantity on a license plate.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object to finds the physical quantity on a license plate.
    /// </returns>
    /// <remarks>
    /// The query returned from this does not account for catch weight items. Use the other
    /// catch weight appropriate query build methods instead.
    /// </remarks>
    protected static Query buildTotalQtyOnLicensePlateQuery(WHSLicensePlateId _licensePlateId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventSum = query.addDataSource(tableNum(InventSum));
        qbdsInventSum.addSelectionField(fieldNum(InventSum, PhysicalInvent), SelectionField::Sum);
        qbdsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));

        QueryBuildDataSource qbdsInventDim = qbdsInventSum.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.relations(true);
        qbdsInventDim.addRange(fieldNum(InventDim, LicensePlateId)).value(queryValue(_licensePlateId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTotalHandlingQtyOnLicensePlateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Query</c> object to find the the physical quantity on a license plate.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id.
    /// </param>
    /// <returns>
    /// A <c>Query</c> object to find the physical quantity on a license plate.
    /// </returns>
    [Hookable(false)]
    internal protected static Query buildTotalHandlingQtyOnLicensePlateQuery(WHSLicensePlateId _licensePlateId)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            throw error("@WAX:Error_WHSLicensePlateTableBuildQueryNotSupportCW");
        }

        return WHSLicensePlate::buildTotalQtyOnLicensePlateQuery(_licensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTotalQtyOnLicensePlateQueryNonCW</Name>
				<Source><![CDATA[
    private static Query buildTotalQtyOnLicensePlateQueryNonCW(WHSLicensePlateId _licensePlateId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventSum = query.addDataSource(tableNum(InventSum));
        qbdsInventSum.addSelectionField(fieldNum(InventSum, PhysicalInvent), SelectionField::Sum);
        qbdsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));

        QueryBuildDataSource qbdsInventDim = qbdsInventSum.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.relations(true);
        qbdsInventDim.addRange(fieldNum(InventDim, LicensePlateId)).value(queryValue(_licensePlateId));
        
        QueryBuildDataSource qbdsPdsCatchWeightItem = qbdsInventSum.addDataSource(tableNum(PdsCatchWeightItem));
        qbdsPdsCatchWeightItem.joinMode(JoinMode::NoExistsJoin);
        qbdsPdsCatchWeightItem.addLink(fieldNum(InventSum, ItemId), fieldNum(PdsCatchWeightItem, ItemId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTotalQtyOnLicensePlateQueryCW</Name>
				<Source><![CDATA[
    private static Query buildTotalQtyOnLicensePlateQueryCW(WHSLicensePlateId _licensePlateId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventSum = query.addDataSource(tableNum(InventSum));
        qbdsInventSum.addSelectionField(fieldNum(InventSum, PdsCWPhysicalInvent), SelectionField::Sum);
        qbdsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));

        QueryBuildDataSource qbdsInventDim = qbdsInventSum.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.relations(true);
        qbdsInventDim.addRange(fieldNum(InventDim, LicensePlateId)).value(queryValue(_licensePlateId));
        
        QueryBuildDataSource qbdsPdsCatchWeightItem = qbdsInventSum.addDataSource(tableNum(PdsCatchWeightItem));
        qbdsPdsCatchWeightItem.joinMode(JoinMode::ExistsJoin);
        qbdsPdsCatchWeightItem.addLink(fieldNum(InventSum, ItemId), fieldNum(PdsCatchWeightItem, ItemId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQtyOnParentLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds physical quantity from the children of the passed license plate.
    /// </summary>
    /// <param name="_parentLicensePlateId">
    /// Parent license plate id.
    /// </param>
    /// <returns>
    /// The total quantity of the items on children of the passd license plate.
    /// </returns>
    public static InventQty getTotalQtyOnParentLicensePlate(WHSLicensePlateId _parentLicensePlateId)
    {
        InventSum		inventSum;
        WHSLicensePlate	licensePlate;

        if (_parentLicensePlateId)
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select sum(PhysicalInvent) from inventSum
                where inventSum.ClosedQty == NoYes::No
                    exists join licensePlate
                        where licensePlate.LicensePlateId		== inventSum.LicensePlateId
                            && licensePlate.LicensePlateParent	== _parentLicensePlateId;
            }
            else
            {
                InventDim		inventDim;

                select sum(PhysicalInvent) from inventSum
                where inventSum.ClosedQty == NoYes::No
                exists join inventDim
                    where inventSum.InventDimId	== inventDim.InventDimId
                    exists join licensePlate
                        where licensePlate.LicensePlateId		== inventDim.LicensePlateId
                            && licensePlate.LicensePlateParent	== _parentLicensePlateId;
            }
        }

        return inventSum.PhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalHandlingQtyOnParentLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds physical handling quantity from the children of the passed license plate.
    /// </summary>
    /// <param name="_parentLicensePlateId">
    /// Parent license plate id.
    /// </param>
    /// <returns>
    /// The total handling quantity of the items on children of the passd license plate.
    /// </returns>
    [Hookable(false)]
    internal static InventHandlingQty getTotalHandlingQtyOnParentLicensePlate(WHSLicensePlateId _parentLicensePlateId)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return WHSLicensePlate::getTotalQuantitiesOnParentLicensePlate(_parentLicensePlateId);
        }

        return WHSLicensePlate::getTotalQtyOnParentLicensePlate(_parentLicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQuantitiesOnParentLicensePlate</Name>
				<Source><![CDATA[
    private static InventHandlingQty getTotalQuantitiesOnParentLicensePlate(WHSLicensePlateId _parentLicensePlateId)
    {
        InventSum inventSum, inventSumCW;
        WHSLicensePlate	licensePlate;
        PdsCatchWeightItem pdsCatchWeightItem;

        if (_parentLicensePlateId)
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select sum(PhysicalInvent) from inventSum
                where inventSum.ClosedQty == NoYes::No
                exists join licensePlate
                    where licensePlate.LicensePlateId == inventSum.LicensePlateId
                        && licensePlate.LicensePlateParent == _parentLicensePlateId
                    notexists join pdsCatchWeightItem
                        where pdsCatchWeightItem.ItemId == inventSum.ItemId;

                select sum(PdsCWPhysicalInvent) from inventSumCW
                where inventSumCW.ClosedQty == NoYes::No
                exists join licensePlate
                    where licensePlate.LicensePlateId == inventSumCW.LicensePlateId
                        && licensePlate.LicensePlateParent == _parentLicensePlateId
                    exists join pdsCatchWeightItem
                        where pdsCatchWeightItem.ItemId == inventSumCW.ItemId;
            }
            else
            {
                InventDim inventDim;

                select sum(PhysicalInvent) from inventSum
                where inventSum.ClosedQty == NoYes::No
                exists join inventDim
                    where inventSum.InventDimId	== inventDim.InventDimId
                    exists join licensePlate
                        where licensePlate.LicensePlateId == inventDim.LicensePlateId
                            && licensePlate.LicensePlateParent == _parentLicensePlateId
                        notexists join pdsCatchWeightItem
                            where pdsCatchWeightItem.ItemId == inventSum.ItemId;

                select sum(PdsCWPhysicalInvent) from inventSumCW
                where inventSumCW.ClosedQty == NoYes::No
                exists join inventDim
                    where inventSumCW.InventDimId	== inventDim.InventDimId
                    exists join licensePlate
                        where licensePlate.LicensePlateId == inventDim.LicensePlateId
                            && licensePlate.LicensePlateParent == _parentLicensePlateId
                        exists join pdsCatchWeightItem
                            where pdsCatchWeightItem.ItemId == inventSumCW.ItemId;
            }
        }

        return inventSum.PhysicalInvent + inventSumCW.PdsCWPhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSLocationWithOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the warehouse location, which the specified license plate is currently located at.
    /// </summary>
    /// <param name="_licensePlateId">License plate Id to find the current warehouse location for.</param>
    /// <param name="_forUpdate">Select the <c>WHSLocation</c> record for update?</param>
    /// <returns><c>WMSLocation</c> record of the warehouse location with physical on-hand of the specified license plate.</returns>
    public static WMSLocation getWMSLocationWithOnHand(WHSLicensePlateId _licensePlateId, boolean _forUpdate = false)
    {
        InventDim inventDim = WHSLicensePlate::getInventDimWithOnHand(_licensePlateId);

        return inventDim.wmsLocation(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimWithOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the inventDim, which the specified license plate is currently located at.
    /// </summary>
    /// <param name="_licensePlateId">License plate Id to find the current inventDim for.</param>
    /// <returns><c>InventDim</c> record with physical on-hand of the specified license plate.</returns>
    public static InventDim getInventDimWithOnHand(WHSLicensePlateId _licensePlateId)
    {
        InventSum inventSum;
        InventDim inventDim;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (_licensePlateId)
            {
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    PdsCatchWeightItem catchWeightItem;

                    select firstonly InventDimId, wMSLocationId from inventSum
                        where inventSum.licensePlateId  == _licensePlateId
                           && inventSum.PhysicalInvent   > 0
                           && inventSum.ClosedQty       == NoYes::No
                        notexists join catchWeightItem
                            where catchWeightItem.ItemId == inventSum.ItemId;

                    if (!inventSum.wMSLocationId)
                    {
                        select firstonly InventDimId from inventSum
                            where inventSum.licensePlateId      == _licensePlateId
                               && inventSum.PdsCWPhysicalInvent  > 0
                               && inventSum.ClosedQty           == NoYes::No
                            exists join catchWeightItem
                                where catchWeightItem.ItemId == inventSum.ItemId;
                    }
                }
                else
                {
                    select firstonly InventDimId from inventSum
                        where inventSum.licensePlateId  == _licensePlateId
                           && inventSum.PhysicalInvent   > 0
                           && inventSum.ClosedQty       == NoYes::No;
                }

                inventDim = InventDim::find(inventSum.InventDimId);
            }
        }
        else
        {
            if (_licensePlateId)
            {
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    PdsCatchWeightItem catchWeightItem;

                    select firstonly inventDim
                        where inventDim.licensePlateId == _licensePlateId
                        exists join inventSum
                            where inventSum.InventDimId == inventDim.InventDimId
                                && inventSum.PhysicalInvent > 0
                                && inventSum.ClosedQty == NoYes::No
                            notexists join catchWeightItem
                                where catchWeightItem.ItemId == inventSum.ItemId;

                    if (!inventDim.wMSLocationId)
                    {
                        select firstonly inventDim
                            where inventDim.licensePlateId == _licensePlateId
                            exists join inventSum
                                where inventSum.InventDimId == inventDim.InventDimId
                                    && inventSum.PdsCWPhysicalInvent > 0
                                    && inventSum.ClosedQty == NoYes::No
                                exists join catchWeightItem
                                    where catchWeightItem.ItemId == inventSum.ItemId;
                    }
                }
                else
                {
                    select firstonly inventDim
                        where inventDim.licensePlateId == _licensePlateId
                        exists join inventSum
                            where inventSum.InventDimId == inventDim.InventDimId
                                && inventSum.PhysicalInvent > 0
                                && inventSum.ClosedQty == NoYes::No;
                }
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks to see if there are any open on-hand records for an individual license plate
    /// </summary>
    /// <returns>
    ///    First open record found for specific license plate
    /// </returns>
    [SysObsolete("Please use the method hasOpenInventSumQuantity if you want to check for open quantity.", false, 31\03\2019)]
    public boolean hasOpenInventSum()
    {
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.LicensePlateId  == this.LicensePlateId
                && inventSum.Closed         == NoYes::No;

            return inventSum.RecId ? true : false;
        }
        else
        {
            InventDim   inventDim;

            select firstonly RecId from inventDim
            where inventDim.LicensePlateId == this.LicensePlateId
            exists join inventSum
            where inventSum.InventDimId == inventDim.InventDimId
                && inventSum.Closed     == NoYes::No;

            return inventDim.RecId ? true : false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSumQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the license plate has <c>InventSum</c> records with open quantity.
    /// </summary>
    /// <returns>true if the license plate has <c>InventSum</c> records with open quantity; otherwise, false.</returns>
    public boolean hasOpenInventSumQuantity()
    {
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.LicensePlateId  == this.LicensePlateId
                && inventSum.ClosedQty      == NoYes::No;

            return inventSum.RecId ? true : false;
        }
        else
        {
            InventDim   inventDim;

            select firstonly RecId from inventDim
            where inventDim.LicensePlateId == this.LicensePlateId
            exists join inventSum
            where inventSum.InventDimId == inventDim.InventDimId
                && inventSum.ClosedQty == NoYes::No;

            return inventDim.RecId ? true : false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.AgingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        this.validateParentLicensePlate();
        this.validateNotAllowCreateDummyLP();

        if (WHSLicensePlateCreationRuleFlight::instance().isEnabled())
        {
            if (WHSLicensePlateCreationRuleSkipCheckContextFlight::instance().isEnabled())                
            {
                if (!WHSLicensePlateCreationRuleSkipCheckContext::instanceExists())
                {
                    this.validateLicensePlateMeetCreationRule();
                }
            }
            else
            {
                this.validateLicensePlateMeetCreationRule();
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.validateParentLicensePlate();
        this.validateNotAllowCreateDummyLP();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParentLicensePlate</Name>
				<Source><![CDATA[
    private void validateParentLicensePlate()
    {
        this.validateParentLicensePlateNotSameAsLicensePlateId();
        this.validateNoLicensePlateParentCircularity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParentLicensePlateNotSameAsLicensePlateId</Name>
				<Source><![CDATA[
    private void validateParentLicensePlateNotSameAsLicensePlateId()
    {
        if (this.LicensePlateParent
            && this.LicensePlateParent == this.LicensePlateId)
        {
            throw error(strFmt("@WAX:Error_LicensePlateSameAsParent", this.LicensePlateId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoLicensePlateParentCircularity</Name>
				<Source><![CDATA[
    private void validateNoLicensePlateParentCircularity()
    {
        if (this.LicensePlateParent
            && this.LicensePlateParent != this.orig().LicensePlateParent
            && this.isLicensePlateAncestor(this.LicensePlateId))
        {
            throw error(strFmt("@WAX:LicensePlateParentCircularityError", this.LicensePlateId, this.LicensePlateParent));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNotAllowCreateDummyLP</Name>
				<Source><![CDATA[
    private void validateNotAllowCreateDummyLP()
    {
        if (InventDimWithLicensePlateIdCleanupFeature::isEnabled() && InventDimLPCleanupDoNotAllowCreateDummyLPFlight::instance().isEnabled())
        {
            WHSLicensePlateId licensePlateId = InventDimLPCleanupService::getDummyLPForCleanup();
            if (this.LicensePlateId == licensePlateId)
            {
                throw error(strFmt("@SCM:InventDimLPCleanupCreateDummyLPError", licensePlateId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateAncestor</Name>
				<Source><![CDATA[
    private boolean isLicensePlateAncestor(WHSLicensePlateId _licensePlateId)
    {
        WHSLicensePlate licensePlateParent = WHSLicensePlate::find(this.LicensePlateParent);

        if (licensePlateParent)
        {
            if (licensePlateParent.LicensePlateId == _licensePlateId)
            {
                return true;
            }
            if (licensePlateParent.LicensePlateParent)
            {
                return licensePlateParent.isLicensePlateAncestor(_licensePlateId);
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (this.hasOpenInventSumQuantity())
        {
            ret = checkFailed(strFmt("@SYS79457", tablePName(InventSum)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.LicensePlateParent)
            {
                // Validate that the Parent License plate being set actually exists.
                if (!WHSLicensePlate::find(this.LicensePlateParent))
                {
                    ret = false;
                }
            }

            if (this.orig().ContainerTypeCode != this.ContainerTypeCode)
            {
                // Validate that the license plate is not associated with open work
                ret = this.validateLPContainerTypeOnOpenWork();

                // Validate that the location the license plate is on allows for container types
                if (ret)
                {
                    ret = this.validateLPContainerTypeOnLocation();
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateMeetCreationRule</Name>
				<Source><![CDATA[
    private void validateLicensePlateMeetCreationRule()
    {
        WHSParameters parameters = WHSParameters::find();

        if (parameters.LicensePlateCreationRule == WHSLicensePlateCreationRule::MinimumLength)
        {
            this.validateLicensePlateIdLength(parameters.LicensePlateIdMinLength);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateIdLength</Name>
				<Source><![CDATA[
    private void validateLicensePlateIdLength(WHSLicensePlateIdMinLength _licensePlateIdMinLength)
    {
        if (strLen(this.LicensePlateId) < _licensePlateIdMinLength)
        {
            throw error(strFmt("@WAX:WHSLicensePlateDoesntMeetMinLengthRuleError", this.LicensePlateId, _licensePlateIdMinLength));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMixedBatchLP</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loops over LP Inventory to validate batch mixing rules
    /// </summary>
    /// <param name="_licensePlateId">
    ///     The license ID
    /// </param>
    /// <param name="_locationId">
    ///     The warehouse location ID
    /// </param>
    /// <param name="_inventLocationId">
    ///     The location ID
    /// </param>
    /// <returns>
    ///     true if location allows mix batches; otherwise, false
    /// </returns>
    static boolean allowMixedBatchLP(WHSLicensePlateId  _licensePlateId,
                                     WMSLocationId      _locationId,
                                     InventLocationId   _inventLocationId)
    {
        InventSum   inventSum;
        boolean     ret = true;

        if (_licensePlateId && _locationId && _inventLocationId)
        {
            ttsbegin;
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select ItemId, InventBatchId from inventSum
                group by InventBatchId, ItemId
                where inventSum.InventLocationId    == _inventLocationId
                    && inventSum.LicensePlateId     == _licensePlateId
                    && inventSum.ClosedQty          == NoYes::No
                    && inventSum.PhysicalInvent     > 0
                {
                    ret = WHSInvent::allowMixedBatch(inventSum.ItemId,
                                                     inventSum.InventBatchId,
                                                     _inventLocationId,
                                                     _locationId);

                    if (!ret)
                    {
                        break;
                    }
                }
            }
            else
            {
                InventDim   inventDim;

                while select InventBatchId from inventDim
                group by InventBatchId
                where inventDim.InventLocationId    == _inventLocationId
                    && inventDim.LicensePlateId     == _licensePlateId
                join ItemId from inventSum
                    group by ItemId
                    where inventSum.InventDimId     == inventDim.InventDimId
                        && inventSum.ClosedQty      == NoYes::No
                        && inventSum.PhysicalInvent > 0
                {
                    ret = WHSInvent::allowMixedBatch(inventSum.ItemId,
                                                     inventDim.InventBatchId,
                                                     _inventLocationId,
                                                     _locationId);

                    if (!ret)
                    {
                        break;
                    }
                }
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMixedItemLP</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loops over LP Inventory to validate item mixing rules
    /// </summary>
    /// <param name="_licensePlateId">
    ///     The license ID
    /// </param>
    /// <param name="_locationId">
    ///     The warehouse location ID
    /// </param>
    /// <param name="_inventLocationId">
    ///     The location ID
    /// </param>
    /// <returns>
    ///     true if location allows mix items; otherwise, false
    /// </returns>
    static boolean allowMixedItemLP(WHSLicensePlateId   _licensePlateId,
                                    WMSLocationId       _locationId,
                                    InventLocationId    _inventLocationId)
    {
        InventSum   inventSum;
        boolean     ret = true;

        if (_licensePlateId && _locationId && _inventLocationId)
        {
            ttsbegin;
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select ItemId from inventSum
                group by ItemId
                where inventSum.ClosedQty           == NoYes::No
                    && inventSum.PhysicalInvent     > 0
                    && inventSum.InventLocationId   == _inventLocationId
                    && inventSum.LicensePlateId     == _licensePlateId
                {
                    ret = WHSInvent::allowMixedItem(inventSum.ItemId, _locationId, _inventLocationId);

                    if (!ret)
                    {
                        break;
                    }
                }
            }
            else
            {
                InventDim   inventDim;

                while select ItemId from inventSum
                group by ItemId
                where inventSum.ClosedQty       == NoYes::No
                    && inventSum.PhysicalInvent > 0
                exists join inventDim
                    where inventDim.InventDimId         == inventSum.InventDimId
                        && inventDim.InventLocationId   == _inventLocationId
                        && inventDim.LicensePlateId     == _licensePlateId
                {
                    ret = WHSInvent::allowMixedItem(inventSum.ItemId, _locationId, _inventLocationId);

                    if (!ret)
                    {
                        break;
                    }
                }
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMixedStatusLP</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loops over LP Inventory to validate status mixing rules
    /// </summary>
    /// <param name="_licensePlateId">
    ///     The license ID
    /// </param>
    /// <param name="_locationId">
    ///     The warehouse location ID
    /// </param>
    /// <param name="_inventLocationId">
    ///     The location ID
    /// </param>
    /// <returns>
    ///     true if location allows mix status; otherwise, false
    /// </returns>
    static boolean allowMixedStatusLP(WHSLicensePlateId _licensePlateId,
                                      WMSLocationId     _locationId,
                                      InventLocationId  _inventLocationId)
    {
        InventSum   inventSum;
        InventDim   inventDim;
        boolean     ret = true;

        if (_licensePlateId && _locationId && _inventLocationId)
        {
            ttsbegin;
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select InventStatusId from inventSum
                group by InventStatusId
                where inventSum.InventLocationId    == _inventLocationId
                    && inventSum.LicensePlateId     == _licensePlateId
                    && inventSum.ClosedQty          == NoYes::No
                    && inventSum.PhysicalInvent     > 0
                {
                    ret = WHSInvent::allowMixedStatus(inventSum.InventStatusId, _inventLocationId, _locationId);

                    if (!ret)
                    {
                        break;
                    }
                }
            }
            else
            {
                while select InventStatusId from inventDim
                group by InventStatusId
                where inventDim.InventLocationId    == _inventLocationId
                    && inventDim.LicensePlateId     == _licensePlateId
                exists join inventSum
                    where inventSum.InventDimId     == inventDim.InventDimId
                        && inventSum.ClosedQty      == NoYes::No
                        && inventSum.PhysicalInvent > 0
                {
                    ret = WHSInvent::allowMixedStatus(inventDim.InventStatusId, _inventLocationId, _locationId);

                    if (!ret)
                    {
                        break;
                    }
                }
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLicensePlateCheckDigit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the check digit of the license plate.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id.
    /// </param>
    /// <returns>
    /// The check digit of the license plate.
    /// </returns>
    public static str calcLicensePlateCheckDigit(str _licensePlateId)
    {
        str     checkDigit;
        int     oddSum = 0;
        int     evenSum = 0;
        int     length;
        int     value;
        int     i;

        length = strLen(_licensePlateId);

        for (i = 0; i < length; ++i)
        {
            value = str2int(subStr(_licensePlateId, length - i, 1));
            if (i mod 2 == 0)
            {
                oddSum += value;
            }
            else
            {
                evenSum += value;
            }
        }

        oddSum = oddSum * 3;

        checkDigit = int2str((10 - ((evenSum + oddSum) mod 10)) mod 10);

        return checkDigit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a license plate with the given ID.
    /// </summary>
    /// <param name="_licensePlateId">
    ///    The license plate ID.
    /// </param>
    /// <param name="_update">
    ///    A boolean value that indicates if the record should be selected for update.
    /// </param>
    /// <param name="_containerTypeCode">
    ///  The container type code that should be set on the license plate.
    /// </param>
    /// <returns>
    ///    The license plate record.
    /// </returns>
    public static WHSLicensePlate createLicensePlate(
        WHSLicensePlateId       _licensePlateId,
        boolean                 _update = false,
        WHSContainerTypeCode    _containerTypeCode = '')
    {
        WHSLicensePlate     licensePlate;

        if (_licensePlateId)
        {
            ttsbegin;

            licensePlate = WHSLicensePlate::find(_licensePlateId,_update);

            if (!licensePlate)
            {
                licensePlate.LicensePlateId = _licensePlateId;
                licensePlate.ContainerTypeCode = _containerTypeCode;
                licensePlate.insert();
            }
            else if (_containerTypeCode != '')
            {
                if (licensePlate.ContainerTypeCode != _containerTypeCode)
                {
                    licensePlate.ContainerTypeCode = _containerTypeCode;
                    licensePlate.update();
                }
            }

            ttscommit;
        }

        return licensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLicensePlateWithAgingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a license plate with the given ID and aging date.
    /// </summary>
    /// <param name="_licensePlateId">
    ///    The license plate ID.
    /// </param>
    /// <param name="_agingDate">
    ///    The aging date that should be set on the license plate.
    /// </param>
    /// <returns>
    ///    The license plate record.
    /// </returns>
    [Hookable(false)]
    internal static WHSLicensePlate createLicensePlateWithAgingDate(WHSLicensePlateId _licensePlateId, WHSAgingDate _agingDate)
    {
        ttsbegin;

        WHSLicensePlate licensePlate = WHSLicensePlate::createLicensePlate(_licensePlateId, true);

        if (WHSLicensePlate::checkIfAgingDateShouldBeUpdated(licensePlate, _agingDate))
        {
            licensePlate.AgingDate = _agingDate;
            licensePlate.update();
        }
 
        ttscommit;
        
        return licensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfAgingDateShouldBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the aging date of the provided license plate should be updated
    /// </summary>
    /// <param name = "_lp">The <c>WHSLicensePlate</c> record of to be updated.</param>
    /// <param name = "_newAgingDate">The new value for the aging date field of the <c>WHSLicensePlate</c> record.</param>
    /// <returns>true if the<c>WHSLicensePlate</c> record should be updated with the new aging date; false otherwise.</returns>
    [Wrappable(true)]
    internal static boolean checkIfAgingDateShouldBeUpdated(WHSLicensePlate _lp, WHSAgingDate _newAgingDate)
    {
        return _newAgingDate != dateNull() && _lp.AgingDate != _newAgingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the aging date of the license plate or location (for non-license plate controlled locations).
    /// </summary>
    /// <param name = "_licensePlateId">
    ///     License plate id
    /// </param>
    /// <param name = "_locationId">
    ///     Location id.
    /// </param>
    /// <param name = "_inventLocationId">
    ///     Warehouse id.
    /// </param>
    /// <returns>
    ///     The aging date of the license plate or location.
    /// </returns>
    [Hookable(false)]
    internal static WHSAgingDate getAgingDate(WHSLicensePlateId _licensePlateId, WMSLocationId _locationId, InventLocationId _inventLocationId)
    {
        WHSAgingDate agingDate;

        if (_licensePlateId)
        {
            agingDate = WHSLicensePlate::find(_licensePlateId).AgingDate;
        }
        else if (_locationId 
             &&  WHSLocationProfile::findByWarehouseAndLocation(_inventLocationId, _locationId).EnableLocationStatusUpdate)
        {
            agingDate = WMSLocationAggregateStatus::find(_locationId, _inventLocationId).AgingDate;
        }

        return agingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventoryWithAgingDate</Name>
				<Source><![CDATA[
    private boolean hasInventoryWithAgingDate()
    {
        return this.AgingDate && WHSLicensePlate::getInventDimWithOnHand(this.LicensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAgingDateForMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates target license plate aging date for inventory movement operation.
    /// </summary>
    /// <param name = "_fromLicensePlateId">
    ///     Origin license plate id.
    /// </param>
    /// <param name = "_fromLocationId">
    ///     Origin location id.
    /// </param>
    /// <param name = "_fromInventLocationId">
    ///     Origin warehouse id.
    /// </param>
    /// <param name = "_toLicensePlateId">
    ///     Target license plate id.
    /// </param>
    /// <returns>
    ///     Aging date for target license plate.
    /// </returns>
    [Hookable(false)]
    internal static WHSAgingDate calculateAgingDateForMovement(
        WHSLicensePlateId _fromLicensePlateId,
        WMSLocationId     _fromLocationId,
        InventLocationId  _fromInventLocationId,
        WHSLicensePlateId _toLicensePlateId = '')
    {
        WHSAgingDate agingDate;

        agingDate = WHSLicensePlate::getAgingDate(_fromLicensePlateId, _fromLocationId, _fromInventLocationId);

        if (_toLicensePlateId && agingDate)
        {
            WHSLicensePlate toLicensePlate = WHSLicensePlate::find(_toLicensePlateId);

            if (toLicensePlate && toLicensePlate.hasInventoryWithAgingDate())
            {
                agingDate = min(agingDate, toLicensePlate.AgingDate); // set oldest of origin and destination as aging date
            }
        }

        return agingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whsLicensePlate</c> record exists.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSLicensePlateId _licensePlateId)
    {
        return (_licensePlateId) &&
               (select firstonly RecId from whsLicensePlate
                where whsLicensePlate.LicensePlateId == _licensePlateId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>whsLicensePlate</c> record with given parameters.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSLicensePlate find(WHSLicensePlateId    _licensePlateId,
                                       boolean              _forupdate = false)
    {
        WHSLicensePlate    licensePlate;

        if (_licensePlateId)
        {
            licensePlate.selectForUpdate(_forupdate);

            select firstonly licensePlate
                where licensePlate.LicensePlateId == _licensePlateId;
        }

        return licensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a new license plate id for an item.
    /// </summary>
    /// <param name="_itemId">
    /// Id of the item.
    /// </param>
    /// <param name="_unitId">
    /// UOM id of the item.
    /// </param>
    /// <returns>
    /// Newly generated license plate id.
    /// </returns>
    public static WHSLicensePlateId generateLicensePlateId(ItemId _itemId, UnitOfMeasureSymbol _unitId)
    {
        WHSUOMSeqGroupId    seqGroupId = WHSInventTable::find(_itemId).uomSeqGroupId;
        WHSUOMSeqGroupLine  seqGroupLine;
        
        select firstonly LicensePlatePackType from seqGroupLine
            where seqGroupLine.uomSeqGroupId    == seqGroupId   &&
                  seqGroupLine.UnitId           == _unitId;

        return WHSLicensePlate::generateLicensePlateNumberSeq(seqGroupLine.LicensePlatePackType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLicensePlateIdNoItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a void license plate id.
    /// </summary>
    /// <returns>
    /// Newly generated license plate id.
    /// </returns>
    public static WHSLicensePlateId generateLicensePlateIdNoItem()
    {
        WHSLicensePlateId licensePlateId;

        licensePlateId = WHSLicensePlate::generateLicensePlateNumberSeq(0);
 
        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLicensePlateNumberSeq</Name>
				<Source><![CDATA[
    private static WHSLicenseplateid generateLicensePlateNumberSeq(WHSLicensePlatePackType _licensePlatePackType)
    {
        WHSLicensePlateId licensePlateId;

        NumberSequenceReference        numRefWHSLicensePlateId = WHSParameters::numRefWHSLicensePlateId();
        WHSNumberSequenceExtReference  numberSequenceExtReference = WHSNumberSequenceExtReference::findReference(numRefWHSLicensePlateId.RecId);

        if (numberSequenceExtReference.NumberSequenceExtId)
        {
            licensePlateId = WHSNumberSeqExt::newGetNum(numRefWHSLicensePlateId).num(WHSNumberSeqExtParameters::newFromLicensePlatePackType(_licensePlatePackType));
        }
        else
        {
            str numSeq = NumberSeq::newGetNum(numRefWHSLicensePlateId).num();

            licensePlateId = int2str(_licensePlatePackType) +
                         WHSParameters::find().uccCompanyPrefix +
                         numSeq;

            str checkDigit = WHSLicensePlate::calcLicensePlateCheckDigit(licensePlateId);

            licensePlateId = '00'+ licensePlateId + checkDigit;
        }
        
        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLPMultiDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if license plate has multiple dimension combinations physically on it.
    /// </summary>
    /// <param name="_licensePlateId">
    /// The license plate being evaluated.
    /// </param>
    /// <returns>
    /// true if License Plate has multiple physical dimensions; otherwise false.
    /// </returns>
    public static boolean isLPMultiDimension(WHSLicensePlateId  _licensePlateId)
    {
        InventSum   inventSum;
        boolean     first = false;

        if (_licensePlateId)
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select firstonly10 RecId from inventSum
                where inventSum.PhysicalInvent  > 0
                    && inventSum.ClosedQty      == NoYes::No
                    && inventSum.LicensePlateId == _licensePlateId
                {
                    if (first)
                    {
                        return true;
                    }
                    first = true;
                }
            }
            else
            {
                InventDim   inventDim;

                while select firstonly10 RecId from inventSum
                where inventSum.PhysicalInvent      > 0
                    && inventSum.ClosedQty          == NoYes::No
                exists join inventDim
                    where inventDim.InventDimId     == inventSum.InventDimId
                        && inventDim.LicensePlateId == _licensePlateId
                {
                    if (first)
                    {
                        return true;
                    }
                    first = true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiSKU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if License Plate has multiple items physicallly on it.
    /// </summary>
    /// <param name="_licensePlateId">
    /// The license plate being evaluated.
    /// </param>
    /// <returns>
    /// true if license plate has multiple items; otherwise false.
    /// </returns>
    public static boolean isMultiSKU(WHSLicensePlateId _licensePlateId)
    {
        InventSum   inventSum;
        ItemId      tmpItemId;
        boolean     ret;

        if (_licensePlateId)
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select ItemId from inventSum
                group by ItemId
                where inventSum.PhysicalInvent   > 0
                &&    inventSum.ClosedQty        == NoYes::No
                &&    inventSum.LicensePlateId  == _licensePlateId
                {
                    if (tmpItemId && tmpItemId != inventSum.ItemId)
                    {
                        ret = true;
                        break;
                    }

                    tmpItemId = inventSum.ItemId;
                }
            }
            else
            {
                InventDim   inventDim;

                while select ItemId from inventSum
                group by ItemId
                where inventSum.PhysicalInvent   > 0
                &&    inventSum.ClosedQty        == NoYes::No
                exists join inventDim
                    where inventDim.InventDimId     == inventSum.InventDimId
                    &&    inventDim.LicensePlateId  == _licensePlateId
                {
                    if (tmpItemId && tmpItemId != inventSum.ItemId)
                    {
                        ret = true;
                        break;
                    }

                    tmpItemId = inventSum.ItemId;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParentLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a license plate is parent of another license plate.
    /// </summary>
    /// <param name="_licensePlateId">
    /// Id of the parent license plate.
    /// </param>
    /// <returns>
    /// True if the license plate is a parent.
    /// </returns>
    public static boolean isParentLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        WHSLicensePlate licensePlate;

        if (_licensePlateId)
        {
            select firstonly RecId from licensePlate
                where licensePlate.LicensePlateParent == _licensePlateId;
        }

        return licensePlate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nestLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Nest all the children of a license plate.
    /// </summary>
    /// <param name="_parentLP">
    /// Parent license plate id.
    /// </param>
    /// <param name="_childLP">
    /// Child license plate id.
    /// </param>
    /// <param name="_whsUserId">
    /// User id of the activity owner.
    /// </param>
    public static void nestLicensePlate(
        WHSLicensePlateId  _parentLP,
        WHSLicensePlateId  _childLP,
        WHSUserId          _whsUserId = '')
    {
        if (_parentLP == _childLP)
        {
            warning(strFmt("@KB_4465880:SameLPNestingWarning", _parentLP, _childLP));
            return;
        }

        WHSLicensePlate childLicensePlate = WHSLicensePlate::find(_childLP, true);
        if (childLicensePlate.RecId != 0)
        {
            WHSLicensePlate parentLicensePlate = WHSLicensePlate::find(_parentLP);
            IdentifierName  licensePlateLabel  = extendedTypeId2pname(extendedTypeNum(WHSLicensePlateId));

            ttsbegin;

            childLicensePlate.LicensePlateParent = _parentLP;
            childLicensePlate.LicensePlateLevel  = parentLicensePlate.LicensePlateLevel + 1;
            if (!childLicensePlate.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSLicensePlate)));
            }
            else
            {
                childLicensePlate.update();
            }

            if (strLen(_whsUserId) > 0)
            {
                WHSMobileDeviceActivityLogger::newStandard(_whsUserId, WHSWorkExecuteMode::LicensePlateBuild)
                    .append(licensePlateLabel, _childLP)
                    .append(licensePlateLabel, _parentLP)
                    .save();
            }

            WHSLicensePlate nestedLicensePlate;
            while select nestedLicensePlate
                where nestedLicensePlate.LicensePlateParent == _childLP
            {
                WHSLicensePlate::nestLicensePlate(_childLP, nestedLicensePlate.LicensePlateId);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNestedLicensePlates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets IDs of nested license plates for the specified license plate.
    /// </summary>
    /// <param name = "_parentLP">The ID of the parent license plate.</param>
    /// <returns>A list of IDs of nested license plates.</returns>
    public static List getNestedLicensePlates(WHSLicensePlateId _parentLP)
    {
        List nestedLicensePlates = new List(Types::String);

        WHSLicensePlate nestedLicensePlate;
        while select LicensePlateId from nestedLicensePlate
            where nestedLicensePlate.LicensePlateParent  == _parentLP
        {
            nestedLicensePlates.addEnd(nestedLicensePlate.LicensePlateId);
        }

        return nestedLicensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromParentLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a child license plate from parent license plate.
    /// </summary>
    /// <param name="_childLP">
    /// Child license plate id.
    /// </param>
    /// <param name="_whsUserId">
    /// User id of the activity owner.
    /// </param>
    public static void removeFromParentLP(WHSLicensePlateId _childLP, WHSUserId _whsUserId = '')
    {
        ttsbegin;

        WHSLicensePlate childLicensePlate = WHSLicensePlate::find(_childLP, true);
        WHSLicensePlate nestedLicensePlate;

        if (childLicensePlate.RecId && childLicensePlate.LicensePlateParent)
        {
            childLicensePlate.LicensePlateParent = '';
            childLicensePlate.LicensePlateLevel  = 0;
            if (!childLicensePlate.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSLicensePlate)));
            }
            else
            {
                childLicensePlate.update();
            }

            if (strLen(_whsUserId) > 0)
            {
                WHSMobileDeviceActivityLogger::newStandard(_whsUserId, WHSWorkExecuteMode::LicensePlateBreak)
                    .append(#WHSLabelFromEDT(WHSLicensePlateId), _childLP)
                    .save();
            }

            while select nestedLicensePlate
                where nestedLicensePlate.LicensePlateParent  == _childLP
            {
                WHSLicensePlate::nestLicensePlate(_childLP, nestedLicensePlate.LicensePlateId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalHandlingQtyOnLicensePlateWithDelta</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines total handling quantity on a license plate including on-hand delta.
    /// </summary>
    /// <param name="_licensePlateId">
    ///  The ID for a license plate
    /// </param>
    /// <returns>
    ///  Returns the physical inventory found on a license plate including on-hand delta.
    /// </returns>
    [Hookable(false)]
    internal static InventHandlingQty getTotalHandlingQtyOnLicensePlateWithDelta(WHSLicensePlateId _licensePlateId)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return WHSLicensePlate::getAllQuantitiesOnLicensePlateWithDelta(_licensePlateId);
        }

        return WHSLicensePlate::getTotalQtyOnLicensePlateWithDelta(_licensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllQuantitiesOnLicensePlateWithDelta</Name>
				<Source><![CDATA[
    private static InventHandlingQty getAllQuantitiesOnLicensePlateWithDelta(WHSLicensePlateId _licensePlateId)
    {
        InventHandlingQty ret;

        if (_licensePlateId)
        {
            InventDim                       inventDim;
            PdsCatchWeightItem              catchWeightItem;

            if (InventUpdateOnhandGlobal::instance().inventUpdateOnhand().mustAddAnyInventSumDeltaOnhand())
            {
                if (InventUseDimOfInventSumToggle::instance().isEnabled() && InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
                {
                    InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty inventSumWithDim, inventSumWithDimCW;

                    select sum(PhysicalInvent) from inventSumWithDim
                        where inventSumWithDim.LicensePlateId == _licensePlateId
                    notExists join catchWeightItem
                        where catchWeightItem.ItemId == inventSumWithDim.ItemId;
    
                    select sum(PdsCWPhysicalInvent) from inventSumWithDimCW
                        where inventSumWithDimCW.LicensePlateId == _licensePlateId
                    exists join catchWeightItem
                        where catchWeightItem.ItemId == inventSumWithDimCW.ItemId;

                    ret = inventSumWithDim.PhysicalInvent + inventSumWithDimCW.PdsCWPhysicalInvent;
                }
                else
                {
                    InventSumUnionDeltaPhysicalQty  inventSumUnionDeltaPhysicalQty, inventSumUnionDeltaPhysicalQtyCW;

                    select sum(PhysicalInvent) from inventSumUnionDeltaPhysicalQty
                    exists join inventDim
                        where inventDim.InventDimId == inventSumUnionDeltaPhysicalQty.InventDimId
                            && inventDim.LicensePlateId == _licensePlateId
                    notExists join catchWeightItem
                        where catchWeightItem.ItemId == inventSumUnionDeltaPhysicalQty.ItemId;
    
                    select sum(PdsCWPhysicalInvent) from inventSumUnionDeltaPhysicalQtyCW
                    exists join inventDim
                        where inventDim.InventDimId == inventSumUnionDeltaPhysicalQtyCW.InventDimId
                            && inventDim.LicensePlateId == _licensePlateId
                    exists join catchWeightItem
                        where catchWeightItem.ItemId == inventSumUnionDeltaPhysicalQtyCW.ItemId;

                    ret = inventSumUnionDeltaPhysicalQty.PhysicalInvent + inventSumUnionDeltaPhysicalQtyCW.PdsCWPhysicalInvent;
                }
            }
            else
            {
                InventSum inventSumPhysicalQty, inventSumPhysicalQtyCW;
                
                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {
                    select sum(PhysicalInvent) from inventSumPhysicalQty
                    where inventSumPhysicalQty.ClosedQty        == NoYes::No
                        && inventSumPhysicalQty.LicensePlateId  == _licensePlateId
                    notExists join catchWeightItem
                        where catchWeightItem.ItemId == inventSumPhysicalQty.ItemId;
    
                    select sum(PdsCWPhysicalInvent) from inventSumPhysicalQtyCW
                    where inventSumPhysicalQtyCW.ClosedQty      == NoYes::No
                        && inventSumPhysicalQtyCW.LicensePlateId  == _licensePlateId
                    exists join catchWeightItem
                        where catchWeightItem.ItemId == inventSumPhysicalQtyCW.ItemId;
                }
                else
                {
                    select sum(PhysicalInvent) from inventSumPhysicalQty
                    where inventSumPhysicalQty.ClosedQty == NoYes::No
                    exists join inventDim
                    where inventDim.InventDimId     == inventSumPhysicalQty.InventDimId
                       && inventDim.LicensePlateId  == _licensePlateId
                    notExists join catchWeightItem
                        where catchWeightItem.ItemId == inventSumPhysicalQty.ItemId;
    
                    select sum(PdsCWPhysicalInvent) from inventSumPhysicalQtyCW
                    where inventSumPhysicalQtyCW.ClosedQty == NoYes::No
                    exists join inventDim
                    where inventDim.InventDimId     == inventSumPhysicalQtyCW.InventDimId
                       && inventDim.LicensePlateId  == _licensePlateId
                    exists join catchWeightItem
                        where catchWeightItem.ItemId == inventSumPhysicalQtyCW.ItemId;
                }

                ret = inventSumPhysicalQty.PhysicalInvent + inventSumPhysicalQtyCW.PdsCWPhysicalInvent;
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQtyOnLicensePlateWithDelta</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines total quantity on a license plate including on-hand delta.
    /// </summary>
    /// <param name="_licensePlateId">
    ///  The ID for a license plate
    /// </param>
    /// <returns>
    ///  Returns the physical inventory found on a license plate including on-hand delta.
    /// </returns>
    public static InventQty getTotalQtyOnLicensePlateWithDelta(WHSLicensePlateId _licensePlateId)
    {
        InventQty ret;

        if (_licensePlateId)
        {
            InventDim inventDim;
            if (InventUpdateOnhandGlobal::instance().inventUpdateOnhand().mustAddAnyInventSumDeltaOnhand())
            {
                if (InventUseDimOfInventSumToggle::instance().isEnabled() && InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
                {
                    InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty inventSumWithDim;

                    select sum(PhysicalInvent) from inventSumWithDim
                        where inventSumWithDim.LicensePlateId  == _licensePlateId;

                    ret = inventSumWithDim.PhysicalInvent;
                }
                else
                {
                    InventSumUnionDeltaPhysicalQty inventSumUnionDeltaPhysicalQty;

                    select sum(PhysicalInvent) from inventSumUnionDeltaPhysicalQty
                        exists join inventDim
                        where inventDim.InventDimId     == inventSumUnionDeltaPhysicalQty.InventDimId
                           && inventDim.LicensePlateId  == _licensePlateId;

                    ret = inventSumUnionDeltaPhysicalQty.PhysicalInvent;
                }
            }
            else
            {
                InventSum inventSum;
                
                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {
                    select sum(PhysicalInvent) from inventSum
                    where inventSum.ClosedQty       == NoYes::No
                       && inventSum.LicensePlateId  == _licensePlateId;
                }
                else
                {
                    select sum(PhysicalInvent) from inventSum
                    where inventSum.ClosedQty == NoYes::No
                    exists join inventDim
                    where inventDim.InventDimId     == inventSum.InventDimId
                       && inventDim.LicensePlateId  == _licensePlateId;
                }

                ret = inventSum.PhysicalInvent;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the primary key field of this table.
    /// </summary>
    public void renamePrimaryKey()
    {
        InventDim inventDim;
        WHSLicensePlateId origWHSLicensePlateId = this.orig().LicensePlateId;

        ttsBegin;

        while select forupdate inventDim
            where inventDim.LicensePlateId == origWHSLicensePlateId
        {
            inventDim.LicensePlateId = this.LicensePlateId;
            inventDim.update(true);
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSLicensePlate, ContainerTypeCode):
                    if (!this.validateLPNotOnLocationLoad())
                    {
                        ret = checkFailed("@WAX:ErrorLPContainerTypeVolumetricsUpdateFailure");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLPContainerTypeOnLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Verify that the container type associated with the license plate is allowed on the location where the license plate exists.
    /// </summary>
    /// <returns>
    ///  Returns true if the license plate and container type combination is allowed on the location; otherwise, false.
    /// </returns>
    private boolean validateLPContainerTypeOnLocation()
    {
        WMSLocation wmsLocationWithOnHandOnLP = WHSLicensePlate::getWMSLocationWithOnHand(this.LicensePlateId);

        if (wmsLocationWithOnHandOnLP
            && !WHSAllowedContainerType::validateContainerTypeOnLocationProfile(wmsLocationWithOnHandOnLP.whsLocationProfile(), this.ContainerTypeCode))
        {
            return checkFailed(strFmt("@WAX:ErrorContainerTypeLPOnLocationProfile", this.LicensePlateId, wmsLocationWithOnHandOnLP.wMSLocationId, this.ContainerTypeCode));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLPContainerTypeOnOpenWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that the container type can be updated if the license plate is on any open work.
    /// </summary>
    /// <returns>
    /// True if the container type is valid; otherwise, false.
    /// </returns>
    public boolean validateLPContainerTypeOnOpenWork()
    {
        WMSLocation              location;
        WHSLocationProfile       locationProfile;
        WHSWorkTable             workTable;
        WHSWorkLine              workLine;
        boolean                  ret = true;

        select firstOnly WorkId from workTable
            where workTable.TargetLicensePlateId == this.LicensePlateId
                && (workTable.WorkStatus         == WHSWorkStatus::Open
                || workTable.WorkStatus          == WHSWorkStatus::InProcess)
            join RecId from workLine
                where workLine.WorkId    == workTable.WorkId
                    && workLine.WorkType == WHSWorkType::Put
            join WMSLocationId from location
                where location.wMSLocationId == workLine.WMSLocationId
                    && location.inventLocationId == workTable.InventLocationId
            join locationProfile
                where locationProfile.LocProfileId == location.LocProfileId;

        if (workTable.WorkId)
        {
            if (!WHSAllowedContainerType::validateContainerTypeOnLocationProfile(locationProfile, this.ContainerTypeCode))
            {
                ret = checkFailed(strFmt("@WAX:ErrorContainerTypeUpdateOnLPTiedToOpenWork", this.LicensePlateId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLPNotOnLocationLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Verify whether the license plate is in a location tracking volumetrics.
    /// </summary>
    /// <returns>
    ///  Returns true if the license plate is in a location tracking volumetrics; otherwise, false.
    /// </returns>
    private boolean validateLPNotOnLocationLoad()
    {
        InventSum           inventSum;
        WHSLicensePlate     licensePlate;
        WHSLocationLoad     locationLoad;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstOnly RecId from inventSum
            where inventSum.PhysicalInvent  > 0
                && inventSum.ClosedQty      == NoYes::No
                && inventSum.LicensePlateId == this.LicensePlateId
            exists join licensePlate
                where licensePlate.LicensePlateId       == inventSum.LicensePlateId
                    && licensePlate.ContainerTypeCode   == this.containerTypeCode
            exists join locationLoad
                where locationLoad.InventLocationId     == inventSum.InventLocationId
                    &&  locationLoad.WMSLocationId      == inventSum.wMSLocationId;
        }
        else
        {
            InventDim           inventDim;

            select firstOnly RecId from inventSum
            where inventSum.PhysicalInvent > 0
                && inventSum.ClosedQty == NoYes::No
            exists join inventDim
                where inventDim.InventDimId         == inventSum.InventDimId
                    && inventDim.LicensePlateId     == this.LicensePlateId
                exists join licensePlate
                    where licensePlate.LicensePlateId       == inventDim.LicensePlateId
                        && licensePlate.ContainerTypeCode   == this.containerTypeCode
                exists join locationLoad
                    where locationLoad.InventLocationId     == inventDim.InventLocationId
                        &&  locationLoad.WMSLocationId      == inventDim.wMSLocationId;
        }

        return inventSum.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ContainerTypeCode = WHSLicensePlate::getDefaultContainerType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLPFromParentLPIfNecessary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the parent license plate from the given license plate if
    /// the parent license plate has no inventory, inventory exists in a different location,
    /// or has another child with inventory in a different location.
    /// </summary>
    /// <param name = "_licensePlateId">The license plate ID being moved.</param>
    /// <param name = "_wmsLocationId">The location ID the license plate is moving to.</param>
    /// <param name = "_inventLocationId">The warehouse ID the license plate is moving to.</param>
    public static void removeLPFromParentLPIfNecessary(
        WHSLicensePlateId _licensePlateId,
        WMSLocationId     _wmsLocationId,
        InventLocationId  _inventLocationId)
    {
        WHSLicensePlateId parentLicensePlateId = WHSLicensePlate::find(_licensePlateId).LicensePlateParent;

        // If there is a parent license plate that has no inventory, inventory exists in a different location,
        // or has another child with inventory in a different location then remove the parent license plate relationship.
        if (parentLicensePlateId
            && (WHSLicensePlate::getTotalHandlingQtyOnLicensePlateWithDelta(parentLicensePlateId) == 0
            ||  !WHSInvent::canPutLicensePlateOnLocation(parentLicensePlateId, _wmsLocationId, _inventLocationId, false)))
        {
            WHSLicensePlate::removeFromParentLp(_licensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that there exists item on license plate.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id to be validated.
    /// </param>
    /// <returns>
    /// True if it is valid, false otherwise.
    /// </returns>
    [Hookable(false)]
    internal static boolean validateLicensePlateQty(WHSLicensePlateId _licensePlateId)
    {
        InventSum       inventSum;
        InventDim       inventDim;

        ttsbegin;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
            {
                PdsCatchWeightItem catchWeightItem;

                select firstonly RecId from inventSum
                where inventSum.ClosedQty == NoYes::No
                    && (inventSum.PhysicalInvent != 0
                        || inventSum.Picked != 0)
                    && inventSum.LicensePlateId == _licensePlateId
                notexists join catchWeightItem
                    where catchWeightItem.ItemId == inventSum.ItemId;

                if (inventSum.RecId == 0)
                {
                    select firstonly RecId from inventSum
                    where inventSum.ClosedQty == NoYes::No
                        && (inventSum.PdsCWPhysicalInvent != 0
                            || inventSum.PdsCWPicked != 0)
                        && inventSum.LicensePlateId == _licensePlateId
                    exists join catchWeightItem
                        where catchWeightItem.ItemId == inventSum.ItemId;
                }
            }
            else
            {
                select firstonly RecId from inventSum
                where inventSum.ClosedQty == NoYes::No
                    && (inventSum.PhysicalInvent != 0
                        || inventSum.Picked != 0)
                    && inventSum.LicensePlateId == _licensePlateId;
            }
        }
        else
        {
            if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
            {
                PdsCatchWeightItem catchWeightItem;

                select firstonly RecId from inventSum
                where inventSum.ClosedQty       == NoYes::No
                &&    (inventSum.PhysicalInvent != 0
                ||     inventSum.Picked         != 0)
                exists join inventDim
                    where inventSum.InventDimId      == inventDim.InventDimId
                    &&    inventDim.LicensePlateId   == _licensePlateId
                    notexists join catchWeightItem
                        where catchWeightItem.ItemId == inventSum.ItemId;

                if (inventSum.RecId == 0)
                {
                    select firstonly RecId from inventSum
                    where inventSum.ClosedQty            == NoYes::No
                    &&    (inventSum.PdsCWPhysicalInvent != 0
                    ||     inventSum.PdsCWPicked         != 0)
                    exists join inventDim
                        where inventSum.InventDimId     == inventDim.InventDimId
                        &&    inventDim.LicensePlateId   == _licensePlateId
                        exists join catchWeightItem
                            where catchWeightItem.ItemId == inventSum.ItemId;
                }
            }
            else
            {
                select firstonly RecId from inventSum
                where inventSum.ClosedQty       == NoYes::No
                &&    (inventSum.PhysicalInvent != 0
                ||     inventSum.Picked         != 0)
                exists join inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId
                    &&    inventDim.LicensePlateId   == _licensePlateId;
            }
        }

        ttscommit;

        return inventSum.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agingDateByLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the license plate aging date by location.
    /// </summary>
    /// <param name = "_location">The location record.</param>
    /// <returns>The aging date if found; otherwise, empty date.</returns>
    [Hookable(false)]
    internal static WHSAgingDate agingDateByLocation(WMSLocation _location)
    {
        WHSLicensePlate licensePlate;

        if (InventUseDimOfInventSumToggle::instance().isEnabled() && InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
        {
            InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty inventSumWithDim;

            select firstonly forceselectorder TableId from inventSumWithDim
                where inventSumWithDim.InventLocationId == _location.inventLocationId
                    && inventSumWithDim.wMSLocationId == _location.wMSLocationId
                    && inventSumWithDim.PhysicalInvent > 0
                join AgingDate from licensePlate
                    order by AgingDate
                    where licensePlate.LicensePlateId == inventSumWithDim.LicensePlateId;

        }
        else
        {
            InventDim                       inventDim;
            InventSumUnionDeltaPhysicalQty  inventSum;

            select firstonly forceselectorder TableId from inventDim
                where inventDim.InventLocationId == _location.inventLocationId
                    && inventDim.wMSLocationId == _location.wMSLocationId
                join TableId from inventSum
                    where inventSum.InventDimId == inventDim.inventDimId
                        && inventSum.PhysicalInvent > 0
                    join AgingDate from licensePlate
                        order by AgingDate
                        where licensePlate.LicensePlateId == inventDim.LicensePlateId;
        }

        return licensePlate.AgingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4384</DeveloperDocumentation>
	<Label>@WAX359</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LicensePlateId</TitleField1>
	<TitleField2>LicensePlateLevel</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LicensePlateIdIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LicensePlateIdIdx</PrimaryIndex>
	<ReplacementKey>LicensePlateIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateParent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerTypeCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateParent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerTypeCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AgingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAgingDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContainerTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSContainerTypeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LicensePlateLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateParent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateParent</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LicensePlateIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LicensePlateParentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateParent</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgingDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AgingDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSContainerType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSContainerType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainerTypeCode</Name>
					<SourceEDT>WHSContainerTypeCode</SourceEDT>
					<Field>ContainerTypeCode</Field>
					<RelatedField>ContainerTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateParent</Name>
					<SourceEDT>WHSLicensePlateParent</SourceEDT>
					<Field>LicensePlateParent</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>