<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCDSContractLineMilestoneImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCDSContractLineMilestoneImport extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        PSAContractLineItems contractLineItems;

        this.PSAContractLineItems = this.getContractLineItemsId();
        if (this.PSAContractLineItems)
        {
            select LineType from contractLineItems
                where contractLineItems.ContractLineNum == this.PSAContractLineItems;

            if (contractLineItems.LineType == PSAContractLineType::LumpSum)
            {
                ttsbegin;
    
                this.ProjOnAccount = this.createProjOnAccTransRecord();
    
                super();
    
                ttscommit;
            }
            else
            {
                infolog.add(Exception::Error, strFmt("@Proj:BillingRuleMustBeOfType", PSAContractLineType::LumpSum));
            }
        }
        else
        {
            SysDictTable table = new SysDictTable(this.TableId);
            infolog.add(Exception::Error, strFmt("@Proj:OperationInvalidFKNotFound", table.label()));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        this.updateProjOnAccTransRecord();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (ret)
        {
            ProjCDSContractLineImport contractLineImport = ProjCDSContractLineImport::findByTransactionId(this.ContractLineRef);

            ret = ret & this.isProjectValid(contractLineImport.ProjectId);
            ret = ret & this.doesContractExist(contractLineImport.ContractId);
            ret = ret & this.doesCurrencyExist(this.CurrencyId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjOnAccTrans</Name>
				<Source><![CDATA[
    protected ProjOnAccTrans initializeProjOnAccTrans(ProjCDSContractLineImport _contractLineImport)
    {
        ProjOnAccTrans projOnAccTrans;
        projOnAccTrans.TransId = this.ProjOnAccount;
        projOnAccTrans.initValue();
        projOnAccTrans.ProjID = _contractLineImport.ProjectId;
        projOnAccTrans.Description = this.Description;
        projOnAccTrans.TotalSalesAmountCur = this.Amount;
        projOnAccTrans.CurrencyId = this.CurrencyId;
        projOnAccTrans.PSAContractLineNum = this.PSAContractLineItems;
        projOnAccTrans.TransDate = this.InvoiceDate;
        projOnAccTrans.TransactionOrigin = ProjOrigin::Milestone;

        return projOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjOnAccTransRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in <c>ProjOnAccTrans</c> table
    /// </summary>
    private ProjOnAccTransId createProjOnAccTransRecord()
    {
        ProjOnAccTransId returnValue;

        ProjCDSContractLineImport contractLineImport = ProjCDSContractLineImport::findByTransactionId(this.ContractLineRef);

        ProjOnAccTrans projOnAccTrans = this.initializeProjOnAccTrans(contractLineImport);
        returnValue = ProjOnAccTrans::createOnAccTrans_ReturnTransId(projOnAccTrans, this.Amount);

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjOnAccTransRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates fields in the <c>ProjOnAccTrans</c> and <c>ProjOnAccTransSale</c> tables
    /// </summary>
    private void updateProjOnAccTransRecord()
    {
        ProjOnAccTrans projOnAccTrans;
        boolean isDirty = false;

        select firstonly forupdate Description, TotalSalesAmountCur, CurrencyId, TransDate, ProjID from projOnAccTrans
            where projOnAccTrans.TransId == this.ProjOnAccount;

        // update Description field
        if (projOnAccTrans.Description != this.Description)
        {
            isDirty = true;
            projOnAccTrans.Description = this.Description;
        }

        // update Sales amount field
        if (projOnAccTrans.TotalSalesAmountCur != this.Amount)
        {
            isDirty = true;
            projOnAccTrans.TotalSalesAmountCur = this.Amount;
        }

        // update Currency field
        if (projOnAccTrans.CurrencyId != this.CurrencyId)
        {
            isDirty = true;
            projOnAccTrans.CurrencyId = this.CurrencyId;
        }

        // update Invoice Date field
        if (projOnAccTrans.TransDate != this.InvoiceDate)
        {
            isDirty = true;
            projOnAccTrans.TransDate = this.InvoiceDate;

            // update corresponding ProjOnAccTransSale records with this change
            ProjOnAccTransSale transSale;
            update_recordset transSale
                setting LedgerTransdate = this.InvoiceDate
                where transSale.TransId == projOnAccTrans.TransId;
        }

        // update Project field
        ProjCDSContractLineImport contractLineImport = ProjCDSContractLineImport::findByTransactionId(this.ContractLineRef);
        if (projOnAccTrans.ProjID != contractLineImport.ProjectId)
        {
            isDirty = true;
            projOnAccTrans.ProjID = contractLineImport.ProjectId;
        }

        if (isDirty)
        {
            ProjOnAccTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContractLineItemsId</Name>
				<Source><![CDATA[
    private PSAContractLineNum getContractLineItemsId()
    {
        ProjCDSContractLineImport contractLineImport;
        
        select firstonly PSAContractLineItems from contractLineImport
            where contractLineImport.TransactionId == this.ContractLineRef;

        return contractLineImport.PSAContractLineItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the project is valid.
    /// </summary>
    /// <param name = "_project">
    ///     The Project ID.
    /// </param>
    /// <returns>
    ///     true if the project is valid; otherwise, false.
    /// </returns>
    protected boolean isProjectValid(ProjId _project)
    {
        boolean ret = true;
        ProjTable projTable;

        if (_project)
        {
            projTable = ProjTable::find(_project);

            if (projTable)
            {
                if (projTable.Type != ProjType::FixedPrice)
                {
                    ret = false;
                    infolog.add(Exception::Error, strFmt("@Proj:ProjectTypeMustSpecificType", enum2Str(ProjType::FixedPrice)));
                }
            }
            else
            {
                ret = false;
                infolog.add(Exception::Error, strFmt(ProjTable::txtNotExist(), _project));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesContractExist</Name>
				<Source><![CDATA[
    private boolean doesContractExist(ProjInvoiceProjId _contract)
    {
        boolean ret = true;

        if (!ProjInvoiceTable::exist(_contract))
        {
            ret = checkFailed(strFmt("@SYS58850", _contract));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesCurrencyExist</Name>
				<Source><![CDATA[
    private boolean doesCurrencyExist(CurrencyCode _currency)
    {
        boolean ret = true;

        if (_currency)
        {
            ret = Currency::checkExist(_currency);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjCDSContractLineMilestoneImportDevDoc</DeveloperDocumentation>
	<Label>@Proj:ProjCDSContractLineMilestoneImport</Label>
	<TableGroup>Transaction</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>TransactionId</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SYS38940</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ContractLineRef</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Proj:ContractLine</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS31438</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS340499</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAContractLineItems</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjOnAccount</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjOnAccTransId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransactionId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjOnAccount</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjOnAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjOnAccTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>