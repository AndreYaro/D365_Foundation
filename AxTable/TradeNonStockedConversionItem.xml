<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TradeNonStockedConversionItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCurrentItemModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current item model group for the current record in the
    /// <c>TradeNonStockedConversionItem</c> table is valid.
    /// </summary>
    /// <param name="_showInfolog">
    /// A Boolean that indicates whether to report errors in the Infolog.
    /// </param>
    /// <returns>
    /// true if the current item model group is valid; otherwise, false.
    /// </returns>
    public boolean checkCurrentItemModelGroup(boolean _showInfolog = true)
    {
        InventModelGroup    inventModelGroup;
        boolean             ok = true;

        if (this.ItemIdDataAreaId)
        {
            inventModelGroup = InventTable::modelGroupByItemId(this.ItemId, this.ItemIdDataAreaId);
            if (!inventModelGroup.StockedProduct || (inventModelGroup.PostOnhandFinancial && inventModelGroup.PostOnhandPhysical))
            {
                if (_showInfolog)
                {
                    ok = checkFailed("@SYS321766");
                }
                else
                {
                    ok = false;
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks whether the item ID for the current record in the <c>TradeNonStockedConversionItem</c> table is valid.
    /// </summary>
    /// <returns>
    ///   true if the item ID is valid; otherwise, false.
    /// </returns>
    public boolean checkItemId()
    {
        InventTable         inventTable = this.inventTable();
        boolean             ok = true;

        if (!inventTable)
        {
            ok = this.fieldValueNotExists(fieldStr(TradeNonStockedConversionItem, ItemId), tableNum(InventTable));
        }

        if (inventTable.ItemType != ItemType::Service)
        {
            ok = checkFailed("@SYS321767") && ok;
        }

        ok = this.checkCurrentItemModelGroup() && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks whether the product for the current record in the <c>TradeNonStockedConversionItem</c> table is valid.
    /// </summary>
    /// <returns>
    ///   true if the product is valid; otherwise, false.
    /// </returns>
    public  boolean checkProduct()
    {
        boolean ok = true;

        if (this.product().ProductType != EcoResProductType::Service)
        {
            ok = checkFailed("@SYS321768");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTargetItemModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks whether the target item model group for the current record in the <c>TradeNonStockedConversionItem</c> table is valid.
    /// </summary>
    /// <returns>
    ///   true if the target item model group is valid; otherwise, false.
    /// </returns>
    public boolean checkTargetItemModelGroup()
    {
        boolean ok = true;
        InventModelGroup inventModelGroup;

        select crosscompany inventModelGroup
            where inventModelGroup.ModelGroupId == this.TargetItemModelGroupId
            &&    inventModelGroup.DataAreaId   == this.TargetItemModelGroupDataAreaId;

        if (!inventModelGroup)
        {
            ok = this.fieldValueNotExists(fieldStr(TradeNonStockedConversionItem, TargetItemModelGroupId), tableNum(InventModelGroup));
        }

        if (inventModelGroup.StockedProduct)
        {
            ok = checkFailed("@SYS321769");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Clears the item ID on the current record in the <c>TradeNonStockedConversionItem</c> table.
    /// </summary>
    public void clearItemId()
    {
        this.ItemId = '';
        this.ItemIdDataAreaId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentItemModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current item model group for the current record in the <c>TradeNonStockedConversionItem</c> table.
    /// </summary>
    /// <param name="_item">
    ///    A string value that represents an item ID.
    /// </param>
    /// <returns>
    ///   An ID of the current item model group.
    /// </returns>
    display public TradeNonStockedCurrentItemModelGroupId currentItemModelGroup(TradeNonStockedConversionItem _item = this)
    {
        InventModelGroupId inventModelGroupId;

        if (_item.ItemId && _item.ItemIdDataAreaId)
        {
            inventModelGroupId = InventTable::modelGroupIdByItemId(this.ItemId, this.ItemIdDataAreaId);
        }

        return inventModelGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValueNotExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays an error message that states that the value in the field does not exist.
    /// </summary>
    /// <param name="_fieldName">
    /// A string value that represents a field name.
    /// </param>
    /// <param name="_relatedTableId">
    /// A table ID that represents the related table.
    /// </param>
    /// <returns>
    /// Always returns false.
    /// </returns>
    private boolean fieldValueNotExists(
        FieldName _fieldName,
        TableId _relatedTableId)
    {
        SysDictField        sysDictField = SysDictField::newName(tableStr(TradeNonStockedConversionItem), _fieldName);
        SysDictTable        sysDictTable = SysDictTable::newTableId(_relatedTableId);

        return checkFailed(strFmt("@SYS112224", this.(sysDictField.id()), sysDictField.label(), sysDictTable.label()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the buffer from a <c>InventTable</c> table buffer.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> table buffer from which to initialize.
    /// </param>
    public void initFromInventTable(InventTable _inventTable)
    {
        this.ItemId             = _inventTable.ItemId;
        this.ItemIdDataAreaId   = _inventTable.DataAreaId;
        this.Product            = _inventTable.Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTradeNonStockedConTmpCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the buffer from a <c>TradeNonStockedConversionTmpCompanies</c> buffer
    /// </summary>
    /// <param name="_companies">
    /// The <c>TradeNonStockedConversionTmpCompanies</c> table buffer from which to initialize.
    /// </param>
    public void initFromTradeNonStockedConTmpCompanies(TradeNonStockedConversionTmpCompanies _companies)
    {
        this.LegalEntity                    = _companies.LegalEntity;
        this.TargetItemModelGroupDataAreaId = _companies.TargetItemModelGroupDataAreaId;
        this.TargetItemModelGroupId         = _companies.TargetItemModelGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTradeNonStockedConTmpProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the buffer from a <c>TradeNonStockedConversionTmpProducts</c> table buffer.
    /// </summary>
    /// <param name="_products">
    /// The <c>TradeNonStockedConversionTmpProducts</c> buffer from which to initialize.
    /// </param>
    public void initFromTradeNonStockedConTmpProducts(TradeNonStockedConversionTmpProducts _products)
    {
        this.Product = _products.Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTradeNonStockedConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the buffer from a <c>TradeNonStockedConversion</c> buffer.
    /// </summary>
    /// <param name="_tradeNonStockedConversion">
    /// The <c>TradeNonStockedConversion</c> table from which to initialize.
    /// </param>
    public void initFromTradeNonStockedConversion(TradeNonStockedConversion _tradeNonStockedConversion)
    {
        this.NonStockedConversion = _tradeNonStockedConversion.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.Status = TradeNonStockedConversionStatus::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the <c>InventTable</c> record for the current <c>TradeNonStockedConversionItem</c> record.
    /// </summary>
    /// <returns>
    ///   A record in the <c>InventTable</c> table.
    /// </returns>
    public InventTable inventTable()
    {
        return InventTable::findInLegalEntity(this.ItemId, this.ItemIdDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the name of the <c>InventTable</c> record for the current <c>TradeNonStockedConversionItem</c> record.
    /// </summary>
    /// <returns>
    ///   The name of the <c>InventTable</c> record.
    /// </returns>
    display public ItemName itemName()
    {
        return this.inventTable().itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the <c>CompanyInfo</c> record for the current <c>TradeNonStockedConversionItem</c> record.
    /// </summary>
    /// <returns>
    ///   A record in the <c>CompanyInfo</c> table.
    /// </returns>
    public CompanyInfo legalEntity()
    {
        return CompanyInfo::findRecId(this.LegalEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        CompanyInfo companyInfo;

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(TradeNonStockedConversionItem, LegalEntity) :
                companyInfo = this.legalEntity();
                this.ItemIdDataAreaId = getCompany(tableNum(InventTable), companyInfo.DataArea);
                this.TargetItemModelGroupDataAreaId = getCompany(tableNum(InventModelGroup), companyInfo.DataArea);
                if (this.TargetItemModelGroupDataAreaId == '')
                {
                    this.TargetItemModelGroupId = '';
                }

                if (this.Product)
                {
                    this.setItemId();
                }
                break;

            case fieldStr(TradeNonStockedConversionItem, Product) :
                this.setItemId();
                break;

            case fieldStr(TradeNonStockedConversionItem, ItemId) :
                this.setProduct();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>product</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the <c>EcoResProduct</c> record for the current <c>TradeNonStockedConversionItem</c> record.
    /// </summary>
    /// <returns>
    ///   A record in the <c>EcoResProduct</c> table.
    /// </returns>
    public EcoResProduct product()
    {
        return EcoResProduct::find(this.Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productName</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the name of the <c>EcoResProduct</c> record for the current <c>TradeNonStockedConversionItem</c> record.
    /// </summary>
    /// <returns>
    ///   The name of the <c>EcoResProduct</c> record.
    /// </returns>
    display public EcoResProductName productName()
    {
        return this.product().productName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the item ID on the current record in the <c>TradeNonStockedConversionItem</c> table.
    /// </summary>
    public void setItemId()
    {
        InventTable             inventTable;
        InventModelGroupItem    inventModelGroupItem;
        InventModelGroup        inventModelGroup;

        if (this.LegalEntity && this.Product)
        {
            this.ItemIdDataAreaId = getCompany(tableNum(InventTable), this.legalEntity().DataArea);

            select crosscompany ItemId from inventTable
                where inventTable.Product    == this.Product
                &&    inventTable.DataAreaId == this.ItemIdDataAreaId
                &&    inventTable.ItemType   == ItemType::Service
                exists join inventModelGroupItem
                    where inventModelGroupItem.ItemId           == inventTable.ItemId
                       && inventModelGroupItem.ItemDataAreaId   == inventTable.DataAreaId
                exists join inventModelGroup
                    where inventModelGroup.ModelGroupId == inventModelGroupItem.ModelGroupId
                    &&    inventModelGroup.DataAreaId   == inventModelGroupItem.ModelGroupDataAreaId
                    &&   (!inventModelGroup.PostOnhandFinancial
                          || !inventModelGroup.PostOnhandPhysical);

            this.ItemId = inventTable.ItemId;
            if (!this.checkCurrentItemModelGroup())
            {
                this.clearItemId();
            }
        }
        else
        {
            this.clearItemId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the product on the current record in the <c>TradeNonStockedConversionItem</c> table.
    /// </summary>
    public void setProduct()
    {
        if (this.ItemId)
        {
            this.Product = this.inventTable().Product;
        }
        else
        {
            this.Product = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeNonStockedConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the <c>TradeNonStockedConversion</c> record for the current <c>TradeNonStockedConversionItem</c> record.
    /// </summary>
    /// <returns>
    ///   A record in the <c>TradeNonStockedConversion</c> table.
    /// </returns>
    public TradeNonStockedConversion tradeNonStockedConversion()
    {
        return TradeNonStockedConversion::find(this.NonStockedConversion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unresolvedIssuesItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns the number of unresolved issues for the item in the current <c>TradeNonStockedConversionItem</c> record.
    /// </summary>
    /// <returns>
    ///   The number of unresolved issues.
    /// </returns>
    display public TradeNonStockedConversionIssueItemCount unresolvedIssuesItem()
    {
        TradeNonStockedConversionCheckLog tradeNonStockedConversionCheckLog;
        TradeNonStockedConversionItem     tradeNonStockedConversionItem;

        select count(RecId) from tradeNonStockedConversionCheckLog
            where tradeNonStockedConversionCheckLog.Resolved == NoYes::No
            exists join tradeNonStockedConversionItem
                where tradeNonStockedConversionItem.RecId == tradeNonStockedConversionCheckLog.NonStockedConversionItem
                &&    tradeNonStockedConversionItem.NonStockedConversion == this.NonStockedConversion
                &&    tradeNonStockedConversionItem.LegalEntity == this.LegalEntity
                &&    tradeNonStockedConversionItem.ItemId == this.ItemId
                &&    tradeNonStockedConversionItem.ItemIdDataAreaId == this.ItemIdDataAreaId;

        return tradeNonStockedConversionCheckLog.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unresolvedIssuesLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns the number of unresolved issues for the legal entity in the current <c>TradeNonStockedConversionItem</c> record.
    /// </summary>
    /// <returns>
    ///   The number of unresolved issues.
    /// </returns>
    display public TradeNonStockedConvertIssueLegalEntity unresolvedIssuesLegalEntity()
    {
        TradeNonStockedConversionCheckLog tradeNonStockedConversionCheckLog;
        TradeNonStockedConversionItem     tradeNonStockedConversionItem;

        select count(RecId) from tradeNonStockedConversionCheckLog
            where tradeNonStockedConversionCheckLog.Resolved == NoYes::No
            exists join tradeNonStockedConversionItem
                where tradeNonStockedConversionItem.RecId == tradeNonStockedConversionCheckLog.NonStockedConversionItem
                &&    tradeNonStockedConversionItem.NonStockedConversion == this.NonStockedConversion
                &&    tradeNonStockedConversionItem.LegalEntity == this.LegalEntity;

        return tradeNonStockedConversionCheckLog.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean         ret = true;
        boolean         skipSuper;

        switch (_fieldName)
        {
            case fieldStr(TradeNonStockedConversionItem, ItemId) :
                ret = this.checkItemId();
                skipSuper = true;
                break;

            case fieldStr(TradeNonStockedConversionItem, TargetItemModelGroupId) :
                ret = this.checkTargetItemModelGroup();
                skipSuper = true;
                break;

            case fieldStr(TradeNonStockedConversionItem, Product) :
                ret = this.checkProduct();
                break;
        }

        if (!skipSuper)
        {
            ret = super(_fieldName, _arrayIndex) && ret;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;
        TradeNonStockedConversion       tradeNonStockedConversion;
        TradeNonStockedConversionItem   tradeNonStockedConversionItem;

        select firstonly RecId from tradeNonStockedConversionItem
            where tradeNonStockedConversionItem.ItemId == this.ItemId
            &&    tradeNonStockedConversionItem.ItemIdDataAreaId == this.ItemIdDataAreaId
            &&    tradeNonStockedConversionItem.NonStockedConversion != this.NonStockedConversion
            join Name from tradeNonStockedConversion
                where tradeNonStockedConversion.RecId == tradeNonStockedConversionItem.NonStockedConversion;

        if (tradeNonStockedConversionItem)
        {
            ret = checkFailed(strFmt("@SYS321770", tradeNonStockedConversion.Name));
        }

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>TradeNonStockedConversionItem</c> table exists.
    /// </summary>
    /// <param name="_itemId">
    /// A string value that represents an item ID.
    /// </param>
    /// <param name="_itemDataAreaId">
    /// A string value that represents the <c>dataAreaId</c> for a legal entity.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsItem(ItemId _itemId, DataAreaId _itemDataAreaId)
    {
        return (select firstonly tradeNonStockedConversionItem
            where tradeNonStockedConversionItem.ItemId == _itemId
            &&    tradeNonStockedConversionItem.ItemIdDataAreaId == _itemDataAreaId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>TradeNonStockedConversionItem</c> table exists.
    /// </summary>
    /// <param name="_tradeNonStockedConversion">
    /// A record ID.
    /// </param>
    /// <param name="_status">
    /// A <c>TradeNonStockedConversionStatus</c> enumeration value.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsStatus(
        TradeNonStockedConversionRecId  _tradeNonStockedConversion,
        TradeNonStockedConversionStatus _status)
    {
        return (select firstonly tradeNonStockedConversionItem
            where tradeNonStockedConversionItem.NonStockedConversion == _tradeNonStockedConversion
                && tradeNonStockedConversionItem.Status == _status).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventTable</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_companyId">
    /// The company in which to perform the lookup.
    /// </param>
    static public void lookupItemId(
        FormControl         _formControl,
        CompanyId           _companyId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsInventTable;
        QueryBuildRange         range;
        str                     rangeValue;

        void performLookup()
        {
            sysTableLookup.parmQuery(query);
            sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
            sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemName));
            sysTableLookup.performFormLookup();
        }

        qbdsInventTable = query.addDataSource(tableNum(InventTable));

        if (_companyId)
        {
            changecompany(_companyId)
            {
                range = qbdsInventTable.addRange(fieldNum(InventTable, ItemType));
                range.value(queryValue(ItemType::Service));
                range.status(RangeStatus::Hidden);

                qbds = qbdsInventTable.addDataSource(tableNum(TradeNonStockedConversionItem));
                qbds.relations(true);
                qbds.joinMode(JoinMode::NoExistsJoin);

                InventInventoriedPolicy::addInventoriedRangeToInventTable(qbdsInventTable);
                qbds = SysQuery::findOrCreateDataSource(query, tableNum(InventModelGroupItem), tableNum(InventTable));
                qbds = SysQuery::findOrCreateDataSource(query, tableNum(InventModelGroup), tableNum(InventModelGroupItem));
                qbds.relations(true);

                rangeValue = strFmt('((%1 == %2) || (%3 == %4))',
                                fieldStr(InventModelGroup, PostOnhandFinancial),
                                enum2int(NoYes::No),
                                fieldStr(InventModelGroup, PostOnhandPhysical),
                                enum2int(NoYes::No));

                range = qbds.addRange(fieldNum(InventModelGroup, PostOnhandPhysical));
                range.value((rangeValue));
                range.status(RangeStatus::Hidden);
                performLookup();
            }
        }
        else
        {
            range = qbdsInventTable.addRange(fieldNum(InventTable, RecId));
            range.value(queryValue(0));
            range.status(RangeStatus::Hidden);
            performLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Provides a lookup for the <c>CompanyInfo</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    ///   The form string control object with which to perform the lookup.
    /// </param>
    /// <returns>
    ///   A <c>CompanyInfo</c> record.
    /// </returns>
    static Common lookupLegalEntity(FormReferenceControl _formReferenceControl)
    {
        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(CompanyInfo), _formReferenceControl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        qbds = query.addDataSource(tableNum(CompanyInfo));

        sysReferenceTableLookup.parmQuery(query);
        sysReferenceTableLookup.addLookupfield(fieldNum(CompanyInfo, DataArea));
        sysReferenceTableLookup.addLookupfield(fieldNum(CompanyInfo, Name));

        return sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Provides a lookup for the <c>EcoResProduct</c> table.
    /// </summary>
    /// <param name="_formControl">
    ///   The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_tradeNonStockedConversionItem">
    ///   A <c>TradeNonStockedConversionItem</c> record.
    /// </param>
    /// <returns>
    ///   A <c>TradeNonStockedConversionItem</c> record.
    /// </returns>
    static public Common lookupProduct(
        FormControl _formControl,
        TradeNonStockedConversionItem _tradeNonStockedConversionItem)
    {
        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(EcoResProduct), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds, qbdsDistinctProduct;
        QueryBuildRange         range;

        qbds = query.addDataSource(tableNum(EcoResProduct));
        qbdsDistinctProduct = qbds.addDataSource(tableNum(EcoResDistinctProduct));
        qbdsDistinctProduct.addLink(fieldNum(EcoResProduct, RecId), fieldNum(EcoResDistinctProduct, RecId));
        qbdsDistinctProduct.joinMode(JoinMode::ExistsJoin);

        range = qbds.addRange(fieldNum(EcoResProduct, ProductType));
        range.value(queryValue(EcoResProductType::Service));
        range.status(RangeStatus::Hidden);

        if (_tradeNonStockedConversionItem.LegalEntity)
        {
            qbds = qbds.addDataSource(tableNum(TradeNonStockedConversionItem));
            qbds.addLink(fieldNum(EcoResProduct, RecId), fieldNum(TradeNonStockedConversionItem, Product));
            qbds.joinMode(JoinMode::NoExistsJoin);
        }

        sysReferenceTableLookup.parmQuery(query);
        sysReferenceTableLookup.addLookupfield(fieldNum(EcoResProduct, DisplayProductNumber));
        sysReferenceTableLookup.addLookupfield(fieldNum(EcoResProduct, SearchName));
        return sysReferenceTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTargetItemModelGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>InventModelGroup</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_companyId">
    /// The company in which to perform the lookup.
    /// </param>
    static public void lookupTargetItemModelGroupId(
        FormControl _formControl,
        CompanyId   _companyId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventModelGroup), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildRange         range;

        void performLookup()
        {
            sysTableLookup.parmQuery(query);
            sysTableLookup.addLookupfield(fieldNum(InventModelGroup, ModelGroupId));
            sysTableLookup.addLookupfield(fieldNum(InventModelGroup, Name));
            sysTableLookup.performFormLookup();
        }

        qbds = query.addDataSource(tableNum(InventModelGroup));

        if (_companyId)
        {
            changecompany(_companyId)
            {
                range = qbds.addRange(fieldNum(InventModelGroup, StockedProduct));
                range.value(queryValue(NoYes::No));
                range.status(RangeStatus::Hidden);
                performLookup();
            }
        }
        else
        {
            range = qbds.addRange(fieldNum(InventModelGroup, RecId));
            range.value(queryValue(0));
            range.status(RangeStatus::Hidden);
            performLookup();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS321729</DeveloperDocumentation>
	<Label>@SYS321728</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>TargetItemModelGroupId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>ItemIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NonStockedConversion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemIdDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TargetItemModelGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TargetItemModelGroupDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemIdDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS14428</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemIdDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LegalEntity</Name>
			<Label>@SYS13342</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Product</Name>
			<Label>@SYS103105</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS321721</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TargetItemModelGroup</Name>
			<Label>@SYS321742</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TargetItemModelGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TargetItemModelGroupDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemIdDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TradeNonStockedConversionLegalEntity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NonStockedConversion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeNonStockedConversionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TradeNonStockedConversionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TargetItemModelGroupDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TargetItemModelGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeNonStockedTargetItemModelGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TradeNonStockedConversionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>NonStockedConversion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemIdDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EcoResProductIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_TradeNonStockedConversionItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProduct</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResProduct_TradeNonStockedConversionItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventModelGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventModelGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventModelGroupRole</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventModelGroup_TradeNonStockedConversionItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TargetItemModelGroupDataAreaId</Name>
					<Field>TargetItemModelGroupDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TargetItemModelGroupId</Name>
					<Field>TargetItemModelGroupId</Field>
					<RelatedField>ModelGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTableRole</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable_TradeNonStockedConversionItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemIdDataAreaId</Name>
					<Field>ItemIdDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TradeNonStockedConversion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TradeNonStockedConversion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TradeNonStockedConversionRole</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>TradeNonStockedConversion_TradeNonStockedConversionItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NonStockedConversion</Name>
					<Field>NonStockedConversion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>