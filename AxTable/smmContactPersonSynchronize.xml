<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmContactPersonSynchronize</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
public class smmContactPersonSynchronize extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display ContactPersonName contactPersonName()
    {
        // Return the name of the contact person
        return ContactPerson::find(this.ContactPersonId).personName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the delete method, depending on the Outlook Sync parameter.
    /// </summary>
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
    public void delete()
    {
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            throw error(strFmt("@SYS19306",funcName()));
        }

        smmOutlookSyncDeprecationHandler::showDeprecationMessage();

        OutlookSyncParameters parameters = OutlookSyncParameters::find();

        if (parameters.OutlookContactDeleteAction == smmOutlookContactDeleteAction::Delete && this.Deleted == NoYes::No)
        {
            this.Deleted = NoYes::Yes;
            this.update();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronized</Name>
				<Source><![CDATA[
    display NoYes synchronized()
    {
        // The contact is not synchronized if it has no Outlook entry id
        return this.EntryId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if Worker of <c>smmContactPersonSynchronize</c> table belongs to the current Legal Entity.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// Worker of the record in the <c>smmContactPersonSynchronize</c> table.
    /// </param>
    /// <returns>
    /// True if Worker belongs to current Legal Entity otherwise false.
    /// </returns>    
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean         ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(smmContactPersonSynchronize, Worker) :
                if (this.Worker)
                {
                    ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.Worker);
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]                
    public boolean validateWrite(boolean validateWorkerOnly = false)
    {
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            throw error(strFmt("@SYS19306",funcName()));
        }

        smmOutlookSyncDeprecationHandler::showDeprecationMessage();

        UserId  userId;
        boolean ret = true;

        if (!validateWorkerOnly)
        {
            ret = super();

            // Have the contact been selected for synchronization with edit rights
            if (this.OutlookSyncType != smmOutlookSyncType::ViewContact)
            {
                // Is synchronization type higher than the allowed type set in the parameters
                if (this.OutlookSyncType > OutlookSyncParameters::find().OutlookMaxSynchronizationType)
                {
                    // Synchronization type for contact person %1 is not allowed
                    ret = checkFailed(strFmt("@SYS88874", this.ContactPersonId));
                }
                else
                {
                    // Is contact already edit syncrhonized by another employee?
                    userId = smmContactPersonSynchronize::isAlreadyEditSynchedBy(this.UserId);

                    if (userId && this.UserId != userId)
                    {
                        ret = false;

                        // The contact person %1 is already edit synchronized by %2.
                        error(strFmt("@SYS88829", this.ContactPersonId, DirPartyTable::getName(DirPersonUser::find(userId).PersonParty)));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromParty</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
    public static Counter addFromParty(DirPartyRecId _account, UserId _userId = curUserId(), DirPartyType _partyType = DirPartyType::Organization)
    {
        Counter numberOfContactsInserted;

        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            throw error(strFmt("@SYS19306",funcName()));
        }

        smmOutlookSyncDeprecationHandler::showDeprecationMessage();

        ContactPerson                   contactPerson;
        smmContactPersonSynchronize     smmContactPersonSyncrhonize;

        smmOutlookSyncPrinciple         syncPrinciple;
        smmOutlookSyncType              defaultSyncType;
        OutlookSyncParameters              outlookSyncParameters  = OutlookSyncParameters::find();

        // Find Outlook synchronization principle from parameters
        syncPrinciple   = outlookSyncParameters.OutlookSyncPrinciple;

        // Find Outlook default synchronization type from parameters
        defaultSyncType = outlookSyncParameters.OutlookDefaultSyncPrinciple;

        ttsbegin;

        // Find all contacts on the Party that are not already in My contacts
        while select contactPerson
            where (_partyType == DirPartyType::Organization && contactPerson.ContactForParty == _account) ||
                  (_partyType == DirPartyType::Person && contactPerson.Party == _account)
            notexists join smmContactPersonSyncrhonize
            where contactPerson.ContactPersonId == smmContactPersonSyncrhonize.ContactPersonId &&
                  smmContactPersonSyncrhonize.UserId == _userId
        {
            smmContactPersonSynchronize::insertFromContact(contactPerson,syncPrinciple,defaultSyncType,_userId);
            numberOfContactsInserted++;
        }

        ttscommit;

        return numberOfContactsInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existContactUser</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]                
    public static boolean existContactUser(ContactPersonId _contactPersonId, UserId _userId)
    {
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            throw error(strFmt("@SYS19306",funcName()));
        }

        smmOutlookSyncDeprecationHandler::showDeprecationMessage();

        smmContactPersonSynchronize smmContactPersonSynchronize = null;

        if (_contactPersonId && _userId)
        {
            select firstonly RecId from smmContactPersonSynchronize
                where smmContactPersonSynchronize.ContactPersonId   == _contactPersonId &&
                      smmContactPersonSynchronize.UserId            == _userId;
        }

        return (smmContactPersonSynchronize.RecId != 0 ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCont</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]                
    public static smmContactPersonSynchronize findCont(ContactPersonId _contactPersonId, boolean _forupdate = false)
    {
        smmContactPersonSynchronize smmContactPersonSynchronize = null;

        if (_contactPersonId)
        {
            smmContactPersonSynchronize.selectForUpdate(_forupdate);

            select firstonly smmContactPersonSynchronize where smmContactPersonSynchronize.ContactPersonId == _contactPersonId;
        }

        return smmContactPersonSynchronize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContEmpl</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]                
    public static smmContactPersonSynchronize findContEmpl(ContactPersonId _contactPersonId,
                                                           CrmWorkerRecId  _worker,
                                                           boolean         _forupdate = false)
    {
        smmContactPersonSynchronize smmContactPersonSynchronize = null;

        if (_contactPersonId && _worker)
        {
            smmContactPersonSynchronize.selectForUpdate(_forupdate);

            select firstonly smmContactPersonSynchronize
                where smmContactPersonSynchronize.ContactPersonId   == _contactPersonId &&
                      smmContactPersonSynchronize.Worker            == _worker;
        }

        return smmContactPersonSynchronize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContUser</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]                
    public static smmContactPersonSynchronize findContUser(ContactPersonId _contactPersonId, UserId _user, boolean _forupdate = false)
    {
        smmContactPersonSynchronize smmContactPersonSynchronize = null;

        if (_contactPersonId && _user)
        {
            smmContactPersonSynchronize.selectForUpdate(_forupdate);

            select firstonly smmContactPersonSynchronize
                where smmContactPersonSynchronize.ContactPersonId == _contactPersonId &&
                      smmContactPersonSynchronize.UserId == _user;
        }

        return smmContactPersonSynchronize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContWorker</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
    public static smmContactPersonSynchronize findContWorker(ContactPersonId _contactPersonId,
                                                           CrmWorkerRecId          _worker,
                                                           boolean         _forupdate = false)
    {
        smmContactPersonSynchronize smmContactPersonSynchronize = null;

        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            return smmContactPersonSynchronize;
        }

        if (_contactPersonId && _worker)
        {
            smmContactPersonSynchronize.selectForUpdate(_forupdate);

            select firstonly smmContactPersonSynchronize
                where smmContactPersonSynchronize.ContactPersonId   == _contactPersonId &&
                      smmContactPersonSynchronize.Worker    == _worker;
        }

        return smmContactPersonSynchronize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromContact</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]                
    public static smmContactPersonSynchronize insertFromContact(ContactPerson           _contact,
                                                                smmOutlookSyncPrinciple _syncPrinciple      = OutlookSyncParameters::find().OutlookSyncPrinciple,
                                                                smmOutlookSyncType      _defaultSyncType    = OutlookSyncParameters::find().OutlookDefaultSyncPrinciple,
                                                                UserId                  _currentUser      = curUserId())
    {
        if (smmOutlookSyncDeprecationHandler::isOutlookSyncDisabled())
        {
            smmOutlookSyncDeprecationHandler::logSyncSkipMessageToTelemetry();
            throw error(strFmt("@SYS19306",funcName()));
        }

        smmOutlookSyncDeprecationHandler::showDeprecationMessage();

        smmContactPersonSynchronize smmContactPersonSynchronize;

        smmContactPersonSynchronize.UserId          = _currentUser;
        smmContactPersonSynchronize.ContactPersonId = _contact.ContactPersonId;
        smmContactPersonSynchronize.Worker          = _contact.MainResponsibleWorker;

        // Is it only the main responsible that for edit synchronize contacts
        if (_syncPrinciple == smmOutlookSyncPrinciple::MainReponsibleMaster)
        {
            if (_contact.MainResponsibleWorker == DirPersonUserEx::worker(DirPersonUser::find(_currentUser)))
            {
                // Use default synchronization type from the parameters
                smmContactPersonSynchronize.OutlookSyncType = _defaultSyncType;
            }
            else
            {
                // Only allow contact to be view synchronized
                smmContactPersonSynchronize.OutlookSyncType = smmOutlookSyncType::ViewContact;
            }
        }
        else
        {
            // Use default synchronization type from the parameters
            smmContactPersonSynchronize.OutlookSyncType = _defaultSyncType;
        }

        // Is contact already edit synchronized by another user
        if (smmContactPersonSynchronize::isAlreadyEditSynchedBy(_contact.ContactPersonId))
        {
            // Only allow contact to be view synchronized
            smmContactPersonSynchronize.OutlookSyncType = smmOutlookSyncType::ViewContact;
        }

        smmContactPersonSynchronize.insert();

        // Create field mapping table
        smmContactPersonSynchronizeFieldMapping::createFieldMapping(smmContactPersonSynchronize.UserId, smmContactPersonSynchronize.ContactPersonId);

        return smmContactPersonSynchronize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyEditSynchedBy</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]                
    public static UserId isAlreadyEditSynchedBy(ContactPersonId _contactPersonId)
    {
        smmContactPersonSynchronize smmContactPersonSynchronize;

        // Have another employee already synchronized the contact with edit rights
        select firstonly smmContactPersonSynchronize where smmContactPersonSynchronize.ContactPersonId == _contactPersonId && smmContactPersonSynchronize.OutlookSyncType != smmOutlookSyncType::ViewContact;

        if (smmContactPersonSynchronize)
        {
            // Return the user ID that have syncrhonized the contact
            return smmContactPersonSynchronize.UserId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectContactsFromDataSource</Name>
				<Source><![CDATA[
    [SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]                
    public static void selectContactsFromDataSource(FormDataSource _callerDataSource)
    {
        ContactPerson               contact;
        Counter                     numberOfUpdatedContacts;
        smmOutlookSyncPrinciple     syncPrinciple;
        smmOutlookSyncType          defaultSyncType;
        OutlookSyncParameters       outlookSyncParameters   = OutlookSyncParameters::find();

        // Find Outlook synchronization principle from parameters
        syncPrinciple   = outlookSyncParameters.OutlookSyncPrinciple;

        // Find Outlook default synchronization type from parameters
        defaultSyncType = outlookSyncParameters.OutlookDefaultSyncPrinciple;

        // Is a range of contacts selected on the form
        contact = _callerDataSource.getFirst(true);

        // Only one contact is selected
        if (!contact)
        {
            // Get contact person
            contact              = _callerDataSource.cursor();

            if (contact)
            {
                if (!smmContactPersonSynchronize::existContactUser(contact.ContactPersonId, curUserId()))
                {
                    smmContactPersonSynchronize::insertFromContact(contact,syncPrinciple,defaultSyncType,curUserId());
                    numberOfUpdatedContacts++;
                }
            }
        }
        else
        // Traverse the selected contacts
        for (contact = _callerDataSource.getFirst(true); contact; contact = _callerDataSource.getNext())
        {
                if (!smmContactPersonSynchronize::existContactUser(contact.ContactPersonId, curUserId()))
                {
                    smmContactPersonSynchronize::insertFromContact(contact,syncPrinciple,defaultSyncType,curUserId());
                    numberOfUpdatedContacts++;
                }
        }

        // %1 contacts added to My contacts for synchronization with Outlook
        info(strFmt("@SYS88863", numberOfUpdatedContacts));
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPartyFromDataSource</Name>
				<Source><![CDATA[
    public static void selectPartyFromDataSource(FormDataSource _callerDataSource)
    {
        Common          common;
        FieldId         dirFieldId;
        DirPartyType    type;
        Counter         numberOfUpdatedContacts;

        dirFieldId = DirParty::getPartyFieldId(_callerDataSource.table());

        if (dirFieldId)
        {
            // Is a range of contacts selected on the form
            common = _callerDataSource.getFirst(true);

            // Only one Party is selected
            if (!common)
            {
                // Get Party
                common = _callerDataSource.cursor();

                if (common)
                {
                    type = DirPartyTable::findRec(common.(dirFieldId)).type();
                    numberOfUpdatedContacts = smmContactPersonSynchronize::addFromParty(common.(dirFieldId), curUserId(), type);
                }
            }
            else
            // Traverse the selected Party
            for (common = _callerDataSource.getFirst(true); common; common = _callerDataSource.getNext())
            {
                type = DirPartyTable::findRec(common.(dirFieldId)).type();
                numberOfUpdatedContacts += smmContactPersonSynchronize::addFromParty(common.(dirFieldId), curUserId(), type);
            }
        }

        // %1 contacts was added to My contacts for synchronization with Outlook
        info(strFmt("@SYS88863", numberOfUpdatedContacts));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>EntAssetResourcePlanningWithMaintenanceIntegrationTest</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>smmOutlook</ConfigurationKey>
	<DeveloperDocumentation>@SYS124813</DeveloperDocumentation>
	<FormRef>smmContactsListPage</FormRef>
	<Label>@SYS80355</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>UserId</TitleField1>
	<TitleField2>ContactPersonId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>UserIdContactPersonIdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>UserIdContactPersonIdIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>smmContactPersonSynchronizeFieldMapping</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmContactPersonSynchronizeFieldMapping</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllFields</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastSyncAxDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutlookSyncType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Deleted</Name>
			<Label>@SYS4197</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Deleted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EntryId</Name>
			<Label>@SYS79925</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LastAxaptaSync</Name>
			<Label>@SYS83694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastSyncAxDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutlookSyncType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Deleted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmContactDeleted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmContactPersonOutlookEntryID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastSyncAxDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmDateTimeLastSynchronized</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OutlookSyncType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmOutlookSyncType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CrmWorkerRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UserIdContactPersonIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContactPersonId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EntryIDIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>EntryId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124695</EntityRelationshipRole>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UserInfo</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>smmContactPersonSynchronize</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<SourceEDT>UserId</SourceEDT>
					<Field>UserId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Worker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_smmContactPersonSynchronize</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>