<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRReqPlanContinuity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRReqPlanContinuity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default continuity plan if no forecast already exists
    /// </summary>
    public void createDefault()
    {
        if (! ReqPlanForecast::find(this.ReqPlanIdContinuity))
        {
            ttsBegin;
            // sets the default time fence values and Plan Id / name
            this.initValue();
            this.ReqPlanIdContinuity  = "@MCR12291";
            this.Name                 = "@SYS26467";
            this.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default values for the <c>MCRReqPlanContinuity</c> record.
    /// </summary>
    public void initValue()
    {
        this.PlannedOrderSequenceRecId   = ReqParameters::MCRNumRefReqPOIdContinuity().NumberSequenceId;
        this.ReqPlanSequenceRecId        = ReqParameters::MCRNumRefReqLogIdContinuity().NumberSequenceId;

        this.TimeFenceCov           = 730;
        this.TimeFenceCapacity      = 730;
        this.TimeFenceExplosion     = 730;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ReqPlan reqPlan;

        ttsbegin;

        reqPlan.MCRInitFromReqPlanContinuity(this);

        if (reqPlan.validateWrite())
        {
            reqPlan.insert();
        }
        else
        {
            throw error("@SYS104318");
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>ReqPlanId</c> field to the original value.
    /// </summary>
    public void renamePrimaryKey()
    {
        ReqPlanIdSched  reqPlanIdContinuityOrig = this.orig().ReqPlanIdContinuity;
        ReqPlan         reqPlan;

        ttsbegin;

        super();

        reqPlan = ReqPlan::findReqPlanId(reqPlanIdContinuityOrig);
        if (reqPlan)
        {
            reqPlan.ReqPlanId = this.ReqPlanIdContinuity;
            reqPlan.renamePrimaryKey();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ReqPlan reqPlan;

        ttsbegin;

        reqPlan = ReqPlan::findReqPlanId(this.ReqPlanIdContinuity,true);
        if (! reqPlan.RecId)
        {
            reqPlan.MCRInitFromReqPlanContinuity(this);

            if (reqPlan.validateWrite())
            {
                reqPlan.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
        else
        {
            reqPlan.Name = this.Name;

            if (reqPlan.validateWrite())
            {
                reqPlan.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId id)
    {
        boolean ret;

        ret = super(id);

        switch  (fieldExt2Id(id))
        {
            case fieldNum(MCRReqPlanContinuity,IssueMargin):
                if (this.IssueMargin < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldNum(MCRReqPlanContinuity,ReceiptMargin):
                if (this.ReceiptMargin < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldNum(MCRReqPlanContinuity,OrderingMargin):
                if (this.OrderingMargin < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldNum(MCRReqPlanContinuity,TimeFenceExplosion):
                if (this.TimeFenceExplosion < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldNum(MCRReqPlanContinuity,TimeFenceCapacity):
                if (this.TimeFenceCapacity < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldNum(MCRReqPlanContinuity,TimeFenceCov):
                if (this.TimeFenceCov < 0)
                    return checkFailed("@SYS53966");

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ReqPlan reqPlan;

        if (!this)
        {
            reqPlan = ReqPlan::findReqPlanId(this.ReqPlanIdContinuity,true);
            if (reqPlan)
                return checkFailed(strFmt("@SYS25859",this.ReqPlanIdContinuity,reqPlan.PlanType));
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default <c>RecPlanID</c> for the continuity plan.
    /// </summary>
    /// <returns>
    /// The default <c>RecPlanID</c> for the continuity plan.
    /// </returns>
    private static ReqPlanIdSched defaultId()
    {
        MCRReqPlanContinuity mcrReqPlanContinuity;

        ReqPlanId       reqPlanId;

        reqPlanId = ReqParameters::find().mcrCurrentReqPlanIdContinuity;
        if (! reqPlanId)
        {
            mcrReqPlanContinuity.createDefault();
            reqPlanId = mcrReqPlanContinuity.ReqPlanIdContinuity;
        }

        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a <c>MCRReqPlanContinuity</c> record exists
    /// with the passed plan ID.
    /// </summary>
    /// <param name="_mcrReqPlanIdContinuity">
    /// The plan ID used to find a <c>MCRReqPlanContinuity</c> record.
    /// </param>
    /// <returns>
    /// true if a <c>MCRReqPlanContinuity</c> record is found; otherwise, false.
    /// </returns>
    public static boolean exist(MCRReqPlanIdContinuity   _mcrReqPlanIdContinuity)
    {
        return _mcrReqPlanIdContinuity && (select firstonly mcrReqPlanContinuity
                    index hint PlanIdx
                    where mcrReqPlanContinuity.ReqPlanIdContinuity == _mcrReqPlanIdContinuity
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns continuity plan based on the passed in parameters.
    /// </summary>
    /// <param name="_mcrReqPlanIdContinuity">
    /// The <c>MCRReqPlanIdContinuity</c> value for which to search the <c>MCRReqPlanContinuity</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// If true the <c>MCRReqPlanContinuity</c> table record should be returned for update; otherwise,
    /// the <c>MCRReqPlanContinuity</c> table record should not be returned for update.
    /// </param>
    /// <returns>
    /// The <c>MCRReqPlanContinuity</c> table record that was found based on passed in parameters.
    /// </returns>
    public static MCRReqPlanContinuity find(MCRReqPlanIdContinuity     _mcrReqPlanIdContinuity,
                                boolean               _forUpdate = false)
    {
        MCRReqPlanContinuity mcrReqPlanContinuity;

        mcrReqPlanContinuity.selectForUpdate(_forUpdate);

        if (_mcrReqPlanIdContinuity)
            select firstonly mcrReqPlanContinuity
                index hint PlanIdx
                where mcrReqPlanContinuity.ReqPlanIdContinuity == _mcrReqPlanIdContinuity;

        return mcrReqPlanContinuity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRContinuity</ConfigurationKey>
	<DeveloperDocumentation>@MCR31325</DeveloperDocumentation>
	<FormRef>MCRReqPlanContinuity</FormRef>
	<Label>@MCR31325</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ReqPlanIdContinuity</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PlanIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>PlanIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPlanIdContinuity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlannedOrderSequenceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanSequenceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SkipCovCalc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET18</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPlanIdContinuity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SafetyMargin</Name>
			<Label>@SYS19505</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiptMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderingMargin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>useProbabalisticContinuity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SkipCovCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanSequenceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlannedOrderSequenceRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeFences</Name>
			<Label>@SYS23490</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimeFenceCov</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeFenceExplosion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeFenceCapacity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IssueMargin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarginIssue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OrderingMargin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarginOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlannedOrderSequenceRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqSequencePORefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ReceiptMargin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarginReceipt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanIdContinuity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRReqPlanIdContinuity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReqPlanSequenceRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqSequenceJobRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipCovCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqSkipCovCalc</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TimeFenceCapacity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeFenceCapacity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TimeFenceCov</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeFenceCoverage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TimeFenceExplosion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeFenceExplosion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>useProbabalisticContinuity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRUseProbabalisticContinuity</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReqPlanIdContinuity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>PlannedOrderNumberSequence</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PlannedOrderNumberSequenceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRReqPlanContinuity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlannedOrderSequenceRecId</Name>
					<Field>PlannedOrderSequenceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqLog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqLog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanIdContinuity</Name>
					<Field>ReqPlanIdContinuity</Field>
					<RelatedField>ReqPlanId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqPlan</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ReqPlan</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanIdContinuity</Name>
					<Field>ReqPlanIdContinuity</Field>
					<RelatedField>ReqPlanId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqPlanNumberSequence</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ReqLogNumberSequenceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>MCRReqPlanContinuity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanSequenceRecId</Name>
					<Field>ReqPlanSequenceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>