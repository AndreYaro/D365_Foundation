<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSContainerTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSContainerTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes container trans record based on container line
    /// </summary>
    /// <param name="_containerLine">
    ///    Container line buffer used to establish record
    /// </param>
    public void initFromContainerLine(WHSContainerLine _containerLine)
    {
        this.ContainerId        = _containerLine.ContainerId;
        this.ContainerLine      = _containerLine.RecId;
        this.ItemId             = _containerLine.ItemId;
        this.Qty                = WHSCatchWeightHelper::convertInventQuantity(this.ItemId,
                                                                         _containerLine.UnitId,
                                                                         _containerLine.Qty,
                                                                         _containerLine.InventDimId);
        this.CapturedWeight     = _containerLine.CapturedWeight;
        this.RemainingCapturedWeight = this.CapturedWeight;

        this.InventQtyRemain    = this.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFinancialUpdate</Name>
				<Source><![CDATA[
    private void doFinancialUpdate(
        WHSInventMov_Container _movementFrom,
        WHSInventMov_Container _movementTo)
    {
        LedgerVoucher           ledgerVoucher;
        InventUpd_Financial     inventUpdFrom, inventUpdTo;
        InventDim               inventDimFrom, inventDimTo;
        InventDimParm           inventDimParmFrom, inventDimParmTo;

        inventDimFrom   = InventDim::find(this.InventDimIdFrom);
        inventDimTo     = InventDim::find(this.InventDimIdTo);
        inventDimParmFrom.initFromInventDim(inventDimFrom);
        inventDimParmTo.setAllInventDim();

        if (_movementFrom.canUseLiteProcess())
        {
            inventUpdFrom = InventUpd_FinancialLite::newWHSInventMovContainer(_movementFrom, inventDimFrom, inventDimParmFrom);
            //we are creating a new trans so there is no need to sum it up
            inventUpdFrom.parmSkipInventTransSumUp(true);
            inventUpdFrom.updateNow();

            inventUpdTo = InventUpd_FinancialLite::newWHSInventMovContainer(_movementTo, inventDimTo, inventDimParmTo);
            inventUpdTo.parmSkipInventTransSumUp(true);
            inventUpdTo.updateNow();
        }
        else
        {
            ledgerVoucher = WHSContainerTable::beginLedger(this.ContainerId);

            // Remove From Location
            inventDimFrom = InventDim::find(this.InventDimIdFrom);

            InventQty       inventQty;
            PdsCWInventQty  cwInventQty;

            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                inventQty   = this.CapturedWeight;
                cwInventQty = this.Qty;
            }
            else
            {
                inventQty = this.Qty;
            }
            
            inventUpdFrom = InventUpd_Financial::newFromContainerMovement(_movementFrom, ledgerVoucher, 0, -inventQty, -cwInventQty);
            inventUpdFrom.parmInventDim(inventDimFrom);
            inventUpdFrom.parmInventDimParm(inventDimParmFrom);
            inventUpdFrom.updateNow();

            // Put To Location
            inventUpdTo = InventUpd_Financial::newFromContainerMovement(_movementTo, ledgerVoucher, -inventUpdFrom.updCostAmountInvent(), inventQty, cwInventQty);
            inventUpdTo.parmInventDim(inventDimTo);
            inventUpdTo.parmInventDimParm(inventDimParmTo);
            inventUpdTo.updateNow();

            ledgerVoucher.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIds</Name>
				<Source><![CDATA[
    private void setInventTransIds()
    {
        NumberSeq numberSeq = NumberSeq::newGetNum(InventParameters::numRefInventTransId());
        this.InventTransIdFrom = numberSeq.num();
        this.InventTransIdTo = numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseInventUpd_FinancialLiteTransCreator</Name>
				<Source><![CDATA[
    private boolean canUseInventUpd_FinancialLiteTransCreator(WHSInventMov_Container _movementFrom)
    {
        if (!_movementFrom.canUseLiteProcess())
        {
            return false;
        }

        return InventUpd_FinancialLiteTransCreatorValidator::canUseFinancialLiteTransInventCreatorForMovement(_movementFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        this.ContainerTransId = NumberSeq::newGetNum(WHSParameters::numRefWHSContainerTransId()).num();

        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStackForContainer(this.ContainerId))
        {
            super();
        }
        else
        {
            this.setInventTransIds();

            InventMovement movementFrom = InventMovement::construct(this);
            InventMovement movementTo = InventMovement::construct(this, InventMovSubType::TransferReceipt);

            if (this.canUseInventUpd_FinancialLiteTransCreator(movementFrom))
            {
                InventUpd_FinancialLiteTransCreator inventUpdFrom = InventUpd_FinancialLiteTransCreator::newInventMovement(movementFrom);
                inventUpdFrom.updateNow();
                InventUpd_FinancialLiteTransCreator inventUpdTo = InventUpd_FinancialLiteTransCreator::newInventMovement(movementTo);
                inventUpdTo.updateNow();

                super();

                inventUpdFrom.updateOwnerRelationship();
                inventUpdTo.updateOwnerRelationship();
            }
            else
            {
                InventUpd_Estimated estimatedFrom = InventUpd_Estimated::newInventMovement(movementFrom);
                estimatedFrom.updateNow();
                InventUpd_Estimated estimatedTo = InventUpd_Estimated::newInventMovement(movementTo);
                estimatedTo.updateNow();

                super();

                estimatedFrom.updateOwnerRelationship();
                estimatedTo.updateOwnerRelationship();

                this.doFinancialUpdate(movementFrom, movementTo);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the fromInventDimId field on the <c>WHSContainerTrans</c> record.
    /// </summary>
    /// <param name="_containerLine">
    /// The container Line the <c>WHSContainerTrans</c> record is based on.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The container line must be related to a loadLine.
    /// </exception>
    public void setFromDim(WHSContainerLine _containerLine)
    {
        InventDim inventDim = _containerLine.calculateInventDimFrom();

        this.InventDimIdFrom = inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets InventDimIdTo field on the <c>WHSContainerTrans</c> record.
    /// </summary>
    /// <param name="_fromDim">
    /// Initial dimension.
    /// </param>
    /// <param name="_location">
    /// Location to be set on the dimension.
    /// </param>
    /// <param name="_serialId">
    /// Serial id to be set on the dimension.
    /// </param>
    /// <param name="_licensePlateId">
    /// License plate id to be set on the dimension.
    /// </param>
    public void setInventDimIdTo(
        InventDim           _fromDim,
        WMSLocation         _location,
        WHSSerialId         _serialId       = '',
        WHSLicensePlateId   _licensePlateId = this.ContainerId)
    {
        InventDim inventDimTo = WHSContainerTrans::calculateInventDimIdTo(_fromDim, _location, _serialId, _licensePlateId);
 
        this.InventDimIdTo =  inventDimTo.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInventDimIdTo</Name>
				<Source><![CDATA[
    private static InventDim calculateInventDimIdTo(
        InventDim           _fromDim,
        WMSLocation         _location,
        WHSSerialId         _serialId,
        WHSLicensePlateId   _licensePlateId)
    {
        InventDim inventDim;

        inventDim.initFromInventDim(_fromDim);

        inventDim.wmsLocationId = _location.wMSLocationId;
        inventDim.InventLocationId = _location.inventLocationId;
        inventDim.InventSiteId = _location.inventSiteId();

        WHSLicensePlate::createLicensePlate(_licensePlateId);

        inventDim.LicensePlateId    = _licensePlateId;
        inventDim.InventSerialId    = _serialId;
        inventDim = InventDim::findOrCreate(inventDim);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container line type of the record.
    /// </summary>
    /// <returns>New <c>WHSContainerLineType</c> instance.</returns>
    public WHSContainerLineType type()
    {
        return WHSContainerLineType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks whether a specific <c>whsContainerTrans</c> record exists with given parameters.
	/// </summary>
	/// <param name="_containerTransId">
	/// Transaction id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSContainerTransId _containerTransId)
    {
        return (_containerTransId) &&
               (select firstonly whsContainerTrans
                where whsContainerTrans.ContainerTransId == _containerTransId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>whsContainerTrans</c> record with given parameters.
	/// </summary>
	/// <param name="_containerTransId">
	/// Transaction id of the record.
	/// </param>
	/// <param name="_forUpdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSContainerTrans find(WHSContainerTransId _containerTransId, boolean _forUpdate = false)
    {
        WHSContainerTrans   whsContainerTrans;

        if (_containerTransId)
        {
            whsContainerTrans.selectForUpdate(_forUpdate);

            select firstonly whsContainerTrans
                where whsContainerTrans.ContainerTransId == _containerTransId;
        }

        return whsContainerTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryTransactionOriginId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setInventoryTransactionOriginId(guid _inventoryTransactionOriginId)
    {
        this.InventoryTransactionOriginId = _inventoryTransactionOriginId;
        this.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4340</DeveloperDocumentation>
	<FormRef>WHSContainerTable</FormRef>
	<Label>@WAX2358</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ContainerTransId</TitleField1>
	<TitleField2>ContainerId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ContainerTransIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ContainerTransIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQtyRemain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContainerTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQtyRemain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainerLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventDimIdTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdTo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventTransIdTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContainerId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSContainerId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ContainerLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSContainerLineRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContainerTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSContainerTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventDimIdFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQtyRemain</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyRemain</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventTransIdFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>TransDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapturedWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainingCapturedWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeightRemain</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>InventoryTransactionOriginId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSInventoryTransactionOriginId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ContainerTransIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ContainerTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdFromIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdToIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WHSContainerLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContainerLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDimFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDimFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdFrom</Name>
					<SourceEDT>WHSInventDimIdFrom</SourceEDT>
					<Field>InventDimIdFrom</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDimTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDimTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdTo</Name>
					<SourceEDT>WHSInventDimIdTo</SourceEDT>
					<Field>InventDimIdTo</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOriginFrom</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OriginFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdFrom</Name>
					<SourceEDT>WHSInventTransIdFrom</SourceEDT>
					<Field>InventTransIdFrom</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOriginTo</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OriginTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdTo</Name>
					<SourceEDT>WHSInventTransIdTo</SourceEDT>
					<Field>InventTransIdTo</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSContainerLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSContainerLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainerLine</Name>
					<Field>ContainerLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSContainerTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSContainerTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainerId</Name>
					<SourceEDT>WHSContainerId</SourceEDT>
					<Field>ContainerId</Field>
					<RelatedField>ContainerId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>