<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpMCRUpSellOrderEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpMCRUpSellOrderEntry extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructPriceDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>PriceDisc</c> table object using information from the table and a
    /// passed in <c>SalesLine</c> buffer.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record for which to create a <c>PriceDisc</c> table record.
    /// </param>
    /// <returns>
    /// The newly created <c>PriceDisc</c> table record.
    /// </returns>
    public PriceDisc constructPriceDisc(SalesLine _salesLine)
    {
        PriceDisc   priceDisc;

        priceDisc = PriceDisc::newFromPriceDiscParameters(this.createAndInitPriceDiscParameters(_salesLine));

        return priceDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record for which to create a <c>PriceDisc</c> table record.
    /// </param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters(SalesLine _salesLine)
    {
        PriceDiscParameters parameters = PriceDiscParameters::construct();

        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(this.ItemId);
        parameters.parmInventDim(_salesLine.inventDim());
        parameters.parmUnitID(InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).UnitId);
        parameters.parmPriceDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        parameters.parmQty(this.SalesQty);
        parameters.parmAccountNum(_salesLine.salesTable().CustAccount);
        parameters.parmCurrencyCode(_salesLine.CurrencyCode);

        // Check if Retail is in use and this form is called for a retail sales order.
        if (RetailParameters::isRetailEnabledAndInUse())
        {
            SalesTable salesTable;
            select RecId, SalesId, RetailChannelTable from salesTable where salesTable.SalesId == _salesLine.SalesId;

            if (salesTable.RetailChannelTable)
            {
                parameters.parmOrderNum(_salesLine.SalesId);
                parameters.parmUseRetailPricing(true);
            }
        }

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the sales line amount.
    /// </summary>
    /// <returns>
    /// The sales line amount .
    /// </returns>
    public display AmountCur displayAmount()
    {
        PriceDisc           priceDisc;
        SalesLineDisc       lineDisc;
        SalesLinePercent    linePercent;
        SalesLine           salesLine;

        salesLine = SalesLine::findRecId(this.SalesLineRecId);
        priceDisc  = this.constructPriceDisc(salesLine);
        priceDisc.findPrice(salesLine.priceGroupId());

        if (priceDisc.findLineDisc(InventTable::find(this.ItemId).salesLineDisc(),
                                    salesLine.lineDisc()))
        {
            lineDisc    = priceDisc.lineDiscAmount();
            linePercent = priceDisc.lineDiscPct();
        }
        return PriceDisc::price2Amount(
                priceDisc.price(),
                InventTableModule::find(this.ItemId,
                                        ModuleInventPurchSales::Sales).PriceUnit,
                PriceDisc::discAmount(SalesParameters::find().Disc,
                                     lineDisc,
                                     0),
                this.SalesQty,
                this.SalesQty,
                priceDisc.markup(),
                PriceDisc::discPercent(SalesParameters::find().Disc,
                                      linePercent,
                                      0),
                salesLine.CurrencyCode,
                0,
                true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the sales line price.
    /// </summary>
    /// <returns>
    /// The sales line price.
    /// </returns>
    public display PriceCur displayPrice()
    {
        PriceDisc   priceDisc;
        SalesLine   salesLine;

        salesLine = SalesLine::findRecId(this.SalesLineRecId);
        priceDisc  = this.constructPriceDisc(salesLine);

        if (priceDisc.parmPriceDiscParameters().parmUseRetailPricing())
        {
            PriceDiscGroup priceDiscGroup;
            RetailChannelPriceGroup retailChannelPriceGroup;
            SalesTable salesTable;

            select firstonly1 GroupId from priceDiscGroup join retailChannelPriceGroup where priceDiscGroup.RecId == retailChannelPriceGroup.PriceGroup
                join salesTable where salesTable.RetailChannelTable == retailChannelPriceGroup.RetailChannel && salesTable.SalesId == salesLine.SalesId;

            if (priceDiscGroup)
            {
                priceDisc.findPrice(priceDiscGroup.GroupId);
            }
            else
            {
                priceDisc.findPrice(salesLine.priceGroupId());
            }
        }
        else
        {
            priceDisc.findPrice(salesLine.priceGroupId());
        }
        return priceDisc.price();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the method used to pass back the corresponding image
    /// based on the users setup of encourage/discourage rules in
    /// the <c>jsItemSalesControl</c> table.
    /// </summary>
    /// <returns>
    /// The sales control display image.
    /// </returns>
    public display container displaySalesControl()
    {
        MCRSalesControl  mcrSalesControl = MCRItemSalesControl::MCRSalesControl(this.ItemId, this.inventDimId);

        switch (mcrSalesControl)
        {
            case MCRSalesControl::Discourage:
                return ImageReference::constructForSymbol(ImageReferenceSymbol::Dislike).pack();

            case MCRSalesControl::Encourage:
                return ImageReference::constructForSymbol(ImageReferenceSymbol::Like_).pack();
        }

        return [0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromUpSellItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TmpMCRUpSellOrderEntry</c> table field values from a
    /// passed in <c>MCRUpSellItem</c> record.
    /// </summary>
    /// <param name="_mcrUpSellItem">
    /// The <c>MCRUpSellItem</c> record to use to initialize the <c>TmpMCRUpSellOrderEntry</c> table field values.
    /// </param>
    public void initFromUpSellItems(MCRUpSellItem _mcrUpSellItem)
    {
        this.ItemId     = _mcrUpSellItem.LinkedItem;
        this.UpSellType = _mcrUpSellItem.UpSellType;
        this.Priority   = _mcrUpSellItem.Priority;

        if (_mcrUpSellItem.Catalog)
        {
            this.UpSellOrigin = MCRUpSellOrigin::Catalog;
        }
        else
        {
            if (_mcrUpSellItem.UpSellType == MCRUpSellType::CrossSell)
            {
                this.UpSellOrigin = MCRUpSellOrigin::ItemCrossSell;
            }
            else if (_mcrUpSellItem.UpSellType == MCRUpSellType::UpSell)
            {
                this.UpSellOrigin = MCRUpSellOrigin::ItemUpSell;
            }
        }

        this.Script     = MCRMessageAssociation::getFullMessage(_mcrUpSellItem.TableId,_mcrUpSellItem.RecId);

        this.SalesQty   = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the item name.
    /// </summary>
    /// <returns>
    /// The item name for the given item Id.
    /// </returns>
    public display Name itemName()
    {
        return InventTable::find(this.ItemId).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPcsPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the sales price for a given item Id.
    /// </summary>
    /// <returns>
    /// The sales price for the givne item Id.
    /// </returns>
    public display Price salesPcsPrice()
    {
        return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Sales).pcsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>_fieldIdToCheck</c>
    /// field is valid.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The <c>FieldID</c> of the field to validate.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// For size, color, and configuration
    /// Insure that they exist by calling checkExist methods of tables,
    /// and if they are active for the item and no value is given then an error occurred.
    /// For sales quantity do not allow values less than or equal to zero.
    /// </remarks>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean     ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(TmpMCRUpSellOrderEntry, SalesQty):
                if (this.SalesQty < 0)
                {
                    ret = checkFailed("@SYS53966");
                }
                else if (!this.SalesQty)
                {
                    ret = checkFailed("@SYS16660");
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validForAxSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether an <c>AxSalesLine</c> object can be created from this record.
    /// </summary>
    /// <param name="_showErrors">
    /// If true then errors will be shown; otherwise, they will not.
    /// </param>
    /// <returns>
    /// true if an <c>AxSalesLine</c> object can be created from this record;
    /// otherwise, false.
    /// </returns>
    /// <remarks>
    /// This validation is not included in the <c>ValidateWrite</c> method because when filling the temp table many
    /// fields may be missing values. Much of the same code appears also in the <c>ValidateField</c> method but
    /// this must be done in a separate method because it is necessary to validate the whole record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the <c>SalesQty</c> is negative throw an error.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If there is no <c>SalesQty</c> throw an error.
    /// </exception>
    public boolean validForAxSalesLine(boolean _showErrors = true)
    {
        boolean     isValid = true;
        InventTable inventTable = InventTable::find(this.ItemId);

        //Check sales quantity.
        if (this.SalesQty < 0)
        {
            isValid = false;
            if (_showErrors)
            {
                throw error("@SYS53966");
            }
        }
        if (!this.SalesQty)
        {
            isValid = false;
            if (_showErrors)
            {
                throw error("@SYS16660");
            }
        }

        //Check item exists.
        if (!inventTable)
        {
            if (_showErrors)
            {
                error(strFmt("@MCR11336", this.ItemId));
            }
            //If item doesn't exist just return false here.
            return false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>UpsellOrderEntry</c> form.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> buffer that is required to be passed in to the <c>UpSellOrderEntry</c> form.
    /// </param>
    public static void mcrJumpRef(SalesLine _salesLine)
    {
        Args args;
        FormRun formRun;

        args = new Args();
        args.name(formStr(TmpMCRUpSellOrderEntry));
        args.record(_salesLine);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        if (formRun.args().parmEnum() == NoYes::Yes)
        {
            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecordsForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds records to the table based on a sales line.
    /// </summary>
    /// <param name = "_salesLine">The sales line record to generate records based on.</param>
    /// <param name = "_inventDimParm">The dimension setup.</param>
    /// <remarks>
    ///     If opened based on an item,  then find all up-sell/cross-sell items based off the item.
    ///     If opened based on an offer, then find all cross-sell items based off the offer.
    ///     In both cases call the table method ruleFired which will determine if the rule associated
    ///     with the item was successful and therefore the item should be added to the temp table.
    /// </remarks>
    public void addRecordsForSalesLine(SalesLine _salesLine, InventDimParm _inventDimParm)
    {
        MCRUpSellItem           mcrUpSellItem;
        ItemId                  itemId;
        boolean                 keepLooping;
        RecordLinkList          recordLinkList = new RecordLinkList();
        InventSum               inventSumGrouped;
        InventTable             inventTable;
        boolean                 isItemRestricted;
        MCRSourceCodeSetup      mcrSourceCodeSetup;
        EcoResProductRecId      productRecId;
        MCRSourceID             mcrSourceID;
        WHSInventReserveQty     whsInventReserveQty;
        boolean                 isWHSItem;
        boolean                 isOnHand;

        // Select up-/cross-sell directly associated with the item
        itemId = _salesLine.ItemId;
        while select mcrUpSellItem
            where mcrUpSellItem.ItemId == itemId
        {
            recordLinkList.ins(mcrUpSellItem);
        }

        //Find cross-sells that match the product of the item used on the sales line,
        //and the sourceId used on the salesline.
        productRecId = _salesLine.inventTable().Product;
        mcrSourceID = _salesLine.mcrSalesLine().SourceId;
        while select mcrUpSellItem
            where mcrUpSellItem.Product == productRecId
            join RecId from mcrSourceCodeSetup
            where mcrSourceCodeSetup.Catalog == mcrUpSellItem.Catalog
                && mcrSourceCodeSetup.SourceID == mcrSourceID
        {
            recordLinkList.ins(mcrUpSellItem);
        }

        // Now that record list is filled, ensure item is not restricted and check rule for each record.
        for (keepLooping = recordLinkList.first(mcrUpSellItem);
             keepLooping;
             keepLooping = recordLinkList.next(mcrUpSellItem))
        {
            // Reset/clear all table fields.
            this.clear();
            isOnHand = false;
            
            // Check start/end date of item
            if (!InventTable::mcrValidStartEndDate(mcrUpSellItem.LinkedItem))
            {
                isItemRestricted = NoYes::Yes;
            }

            if (!isItemRestricted
                 && mcrUpSellItem.ruleFired(_salesLine.RecId))
            {
                inventTable = InventTable::find(mcrUpSellItem.LinkedItem);

                if (inventTable.ItemType != ItemType::Service)
                {
                    // Find all item combinations by looping around inventSum instead
                    // of inventDimCombinations.  Also count so it includes other item dimensions used
                    // for inventory purposes (ie: serial/lot).
                    // Used to find inventSum across dimensions,
                    isWHSItem   = WHSInventEnabled::exist(mcrUpSellItem.LinkedItem);

                    _inventDimParm.ItemIdFlag = NoYes::Yes;

                    Query query = new Query();

                    QueryBuildDataSource inventSumQbds = query.addDataSource(tableNum(InventSum));
                    inventSumQbds.addSelectionField(fieldNum(InventSum, Recid));
                    inventSumQbds.addRange(fieldNum(InventSum, ItemId)).value(queryValue(mcrUpSellItem.LinkedItem));
                    inventSumQbds.addRange(fieldNum(InventSum, AvailPhysical)).value('>0'); 

                    QueryBuildDataSource inventDimQbds = inventSumQbds.addDataSource(tableNum(InventDim));
                    inventDimQbds.addLink(fieldNum(InventSum, InventDimId), fieldNum(InventDim, InventDimId));
                    inventDimQbds.orderMode(OrderMode::GroupBy);
                    inventDimQbds.addSortField(fieldNum(InventDim, InventSiteId));
                    inventDimQbds.addSortField(fieldNum(InventDim, InventLocationId));

                    ListEnumerator enumerator = InventDim::dimProductDimFieldList().getEnumerator();
                    while (enumerator.moveNext())
                    {
                        inventDimQbds.addSortField(enumerator.current());
                    }

                    QueryRun queryRun = new QueryRun(query);
                    while (queryRun.next())
                    {
                        InventDim inventDimLoc = queryRun.get(tableNum(InventDim));

                        isOnHand = true;

                        // Due to the groupby do not have an inventDimId
                        InventDim inventDimLocator = InventDim::findOrCreate(inventDimLoc);
                        this.InventDimId = inventDimLocator.InventDimId;

                        InventSum inventSumTotalCount = InventSum::findSum(mcrUpSellItem.LinkedItem, inventDimLocator, _inventDimParm);

                        if (isWHSItem)
                        {
                            whsInventReserveQty = WHSInventReserveQty::newFromParms(inventTable,inventDimLocator, _inventDimParm);
                            this.AvailPhysical = whsInventReserveQty.availPhysical();
                        }
                        else
                        {
                            this.AvailPhysical = inventSumTotalCount.AvailPhysical;
                        }
                        this.initFromUpSellItems(mcrUpSellItem);
                        this.SalesLineRecId = _salesLine.RecId;

                        this.insert();
                    }
                }

                // Up - sell or cross - sell the items be listed even if
                // the itemtype is service or there is no on - hand quantity on stock.
                if (inventTable.ItemType == ItemType::Service || !isOnHand)
                {
                    this.InventDimId = inventTable.inventItemOrderSetupMap(InventItemOrderSetupType::Sales).inventDimDefault().inventDimId;
                    this.initFromUpSellItems(mcrUpSellItem);
                    this.SalesLineRecId = _salesLine.RecId;
                    
                    this.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MCRCallCenter</ConfigurationKey>
	<DeveloperDocumentation>@MCR24202</DeveloperDocumentation>
	<Label>@MCR24202</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>SalesQty</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AvailPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Script</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpSellType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpSellOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AvailPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyAvailPhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Priority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesOrderedQty</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Script</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRScriptNote</ExtendedDataType>
			<Label>@MCR10446</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UpSellOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>MCRUpSellOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UpSellType</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>MCRUpSellType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PriorityItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Priority</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesLineRecId</Name>
					<SourceEDT>SalesLineRefRecId</SourceEDT>
					<Field>SalesLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>