<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatUserReviewComputedVendorRating</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatUserReviewComputedVendorRating extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(VendAccount _vendAccountNum, dataAreaId _vendDataAreaId)
    {
        return CatUserReviewComputedVendorRating::exist(_vendAccountNum, _vendDataAreaId) ? true
            : checkFailed(strfmt(CatUserReviewComputedVendorRating::txtNotExist(), _vendAccountNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeAggregateAllVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the average rating and the total number of ratings of all the  <c>VendTable</c> objects in the <c>CatUserReviewVendor</c> table.
    /// </summary>
    public static void computeAggregateAllVendor()
    {
        CatUserReviewVendor                 catUserReviewVendor;
        CatUserReviewComputedVendorRating   catUserReviewComputedVendorRating;
        CatParameters                       catParameters;
        utcdatetime                         utcCutOffDate;

        ttsbegin;

        catParameters = CatParameters::find();
        utcCutOffDate = DateTimeUtil::newDateTime(catParameters.CutoffDate , 0);

        delete_from catUserReviewComputedVendorRating;

        insert_recordset catUserReviewComputedVendorRating (AverageRating , NumRatings , VendAccountNum , VendDataAreaId)
            select   avg (Rating) , count(RecId) ,  VendAccountNum , VendDataAreaId
                from catUserReviewVendor
                group by VendAccountNum , VendDataAreaId
                where catUserReviewVendor.Rating != 0
                    && catUserReviewVendor.CreatedDateTime >= utcCutOffDate;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeAggregateByVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes the average rating and the total number of ratings of the related <c>VendTable</c> table
    ///    vendor.
    /// </summary>
    /// <param name="_vendAccountNum">
    ///    The vendor account number of the related <c>VendTable</c> object.
    /// </param>
    /// <param name="_vendDataAreadId">
    ///    The vendor data area ID of the related <c>VendTable</c> object.
    /// </param>
    /// <param name="_cutOffDate">
    ///    A <c>CatUserReviewCutoffDate</c> value that specifies the date before which to filter the user
    ///    review ratings.
    /// </param>
    public static void computeAggregateByVendor(VendAccount _vendAccountNum , dataAreaId _vendDataAreadId , CatUserReviewCutoffDate _cutOffDate = DateTimeUtil::date(DateTimeUtil::minValue()) )
    {
        CatUserReviewVendor                 catUserReviewVendor;
        CatUserReviewComputedVendorRating   catUserReviewComputedVendorRating;
        CatParameters                       catParameters;
        utcdatetime                         utcCutOffDate;

        ttsbegin;

        if (_cutOffDate == DateTimeUtil::date(DateTimeUtil::minValue()))
        {
            catParameters = CatParameters::find();
            _cutOffDate = catParameters.CutoffDate;
        }

        utcCutOffDate = DateTimeUtil::newDateTime(catParameters.CutoffDate , 0);

        select count (RecId) , avg (Rating) , VendAccountNum , VendDataAreaId
            from catUserReviewVendor
            group by VendAccountNum , VendDataAreaId
            where catUserReviewVendor.VendAccountNum == _vendAccountNum
                && catUserReviewVendor.VendDataAreaId == _vendDataAreadId
                && catUserReviewVendor.Rating != 0 //Comments exists but no Rating
                && catUserReviewVendor.CreatedDateTime >= utcCutOffDate;

        select forupdate NumRatings , AverageRating
            from catUserReviewComputedVendorRating
            where catUserReviewComputedVendorRating.VendAccountNum == _vendAccountNum
                && catUserReviewComputedVendorRating.VendDataAreaId == _vendDataAreadId;

        catUserReviewComputedVendorRating.VendAccountNum = _vendAccountNum;
        catUserReviewComputedVendorRating.VendDataAreaId = _vendDataAreadId;
        catUserReviewComputedVendorRating.NumRatings = int642int(catUserReviewVendor.RecId);
        catUserReviewComputedVendorRating.AverageRating = catUserReviewVendor.Rating;

         // if a vendor exists in catUserReviewComputedVendorRating
        if (catUserReviewComputedVendorRating.RecId != 0)
        {
            catUserReviewComputedVendorRating.update();
        }
        else
        {
            catUserReviewComputedVendorRating.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the record with the specified key exists in the
    ///    <c>CatUserReviewComputedVendorRating</c> table.
    /// </summary>
    /// <param name="_vendAccountNum">
    ///    The account number of the vendor from the <c>VendTable</c> table.
    /// </param>
    /// <param name="_vendDataAreaId">
    ///    The data area ID of the vendor from the <c>VendTable</c> table.
    /// </param>
    /// <returns>
    ///    true if the record was found; otherwise, false.
    /// </returns>
    public static boolean exist(VendAccount _vendAccountNum, dataAreaId _vendDataAreaId)
    {
        return (CatUserReviewComputedVendorRating::find(_vendAccountNum, _vendDataAreaId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CatUserReviewComputedVendorRating</c> table.
    /// </summary>
    /// <param name="_vendAccountNum">
    ///    The account number of the vendor from the <c>VendTable</c> table.
    /// </param>
    /// <param name="_vendDataAreaId">
    ///    The data area ID of the vendor from the <c>VendTable</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The <c>CatUserReviewComputedVendorRating</c> record, if it is found; otherwise, an empty record
    ///    buffer.
    /// </returns>
    public static CatUserReviewComputedVendorRating find(VendAccount _vendAccountNum, dataAreaId _vendDataAreaId, boolean _forUpdate = false)
    {
        CatUserReviewComputedVendorRating catUserReviewComputedVendorRating;

        if (_vendAccountNum && _vendDataAreaId)
        {
            catUserReviewComputedVendorRating.selectForUpdate(_forUpdate);
            select firstonly catUserReviewComputedVendorRating
                where catUserReviewComputedVendorRating.VendAccountNum == _vendAccountNum
                    && catUserReviewComputedVendorRating.VendDataAreaId == _vendDataAreaId;
        }

        return catUserReviewComputedVendorRating;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102217";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
	<DeveloperDocumentation>@SYS318555</DeveloperDocumentation>
	<Label>@SYS312760</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VendAccountNum</TitleField1>
	<TitleField2>AverageRating</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>Vendor</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>Vendor</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumRatings</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumRatings</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AverageRating</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumRatings</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberOfRatings</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccountNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Vendor</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatUserReviewComputedVendorRating</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendDataAreaId</Name>
					<SourceEDT>DataAreaId</SourceEDT>
					<Field>VendDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Vendor</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendTable_CatUserReviewComputedVendorRating</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendDataAreaId</Name>
					<Field>VendDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccountNum</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>