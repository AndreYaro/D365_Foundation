<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductImage</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Framework.FileManagement;

public class EcoResProductImage extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPublishedThumbNailFileName</Name>
				<Source><![CDATA[
    display AttributeValueText getPublishedThumbNailFileName()
    {
        // AttributeValueText is long enough - 1999
        return CatDisplayHelper::getPublishedImageFileName(this, fieldnum(EcoResProductImage, ThumbnailSize));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret
            && _fieldIdToCheck == fieldnum(EcoResProductImage, DefaultImage)
            && this.DefaultImage == NoYes::Yes)
        {
            DocuRef docuRef;
            if (EcoResProductImageDefaultRefTableFlight::instance().isEnabled())
            {
                docuRef = DocuRef::findRecId(this.RefRecId);
            }

            if (EcoResProductImage::hasDefaultProductImage(this.RefRecord, docuRef.RefTableId, this.RecId))
            {
                ret = checkFailed("@SYS130278");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determents if a record has a default product image.
    /// </summary>
    /// <param name = "_refRecId">RefRecId of the record to look at.</param>
    /// <param name = "_excludeRecId">
    ///     EcoResProductImage RecId to exclude when looking for product images; optional.
    /// </param>
    /// <returns>True if a product image is set to default, otherwise false.</returns>
    [SysObsolete('This method is deprecated. Please use hasDefaultProductImage() instead.', false, 19\1\2023)]
    public static boolean hasDefault(RefRecId _refRecId, RecId _excludeRecId = 0)
    {
        EcoResProductImage  ecoResProductImage;

        select firstonly RecId from ecoResProductImage
            where ecoResProductImage.RefRecord  == _refRecId
               && ecoResProductImage.DefaultImage == NoYes::Yes
               && ecoResProductImage.RecId != _excludeRecId;

        return (ecoResProductImage.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDefaultProductImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a record has a default product image.
    /// </summary>
    /// <param name = "_refRecId">The ID of the record to look at.</param>
    /// <param name = "_refTableId">The Table ID of the record to look at.</param>
    /// <param name = "_excludeRecId">The <c>EcoResProductImage</c> record ID to exclude when looking for product images; optional.</param>
    /// <returns>true if there is an existing default product image associated to the given record; otherwise false.</returns>
    public static boolean hasDefaultProductImage(
        RefRecId    _refRecId,
        RefTableId  _refTableId,
        RecId       _excludeRecId = 0)
    {
        if (!EcoResProductImageDefaultRefTableFlight::instance().isEnabled())
        {
            return EcoResProductImage::hasDefault(_refRecId, _excludeRecId);
        }

        EcoResProductImage  defaultProductImage;
        DocuRef             defaultDocuRef;

        select firstonly RecId from defaultProductImage
            where defaultProductImage.RefRecord  == _refRecId
               && defaultProductImage.DefaultImage == NoYes::Yes
               && defaultProductImage.RecId != _excludeRecId
            exists join defaultDocuRef
                where defaultDocuRef.RecId == defaultProductImage.RefRecId
                    && defaultDocuRef.RefTableId == _refTableId;

        return (defaultProductImage.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update images marked as default to no longer be marked as default.
    /// </summary>
    /// <param name = "_refRecId">The parent record ID of the image(s) to unmark as default images.</param>
    /// <param name = "_refTableId">The parent table ID of the image(s) to unmark as default images.</param>
    /// <param name = "_refCompanyId">The parent company ID of the image(s) to unmark as default images.</param>
    /// <param name = "_newDefaultProductImageRecId">The record ID of the image to remain as the default image.</param>
    public static void updateDefault(RefRecId _refRecId, RefTableId _refTableId, SelectableDataArea _refCompanyId,
        RecId _newDefaultProductImageRecId = 0)
    {
        EcoResProductImage ecoResProductImage;
        DocuRef docuRef;

        update_recordset ecoResProductImage
            setting DefaultImage = NoYes::No
        join docuRef
            where ecoResProductImage.RefRecId == docuRef.RecId
                && ecoResProductImage.DefaultImage == NoYes::Yes
                && ecoResProductImage.RecId != _newDefaultProductImageRecId
                && docuRef.RefRecId == _refRecId
                && docuRef.RefTableId == _refTableId
                && docuRef.RefCompanyId == _refCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuRef_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for deletion of EcoResProductImage records when referenced a
    /// DocuRef record is deleted.
    /// </summary>
    /// <param name = "sender">The deleted record.</param>
    /// <param name = "e">Args for the event.</param>
    [DataEventHandler(tablestr(DocuRef), DataEventType::Deleted)]
    public static void docuRef_onDeleted(Common sender, DataEventArgs e)
    {
        DocuRef docuRef = sender as DocuRef;
        if (docuRef.RefTableId == tablenum(InventTable) ||
            docuRef.RefTableId == tablenum(EcoResProduct) ||
            docuRef.RefTableId == tablenum(InventDimCombination) ||
            docuRef.RefTableId == tablenum(CatExternalCatalog))
        {
            EcoResProductImage ecoResProductImage;

            ttsbegin;
            delete_from ecoResProductImage
                where ecoResProductImage.RefRecId == docuRef.RecId
                && ecoResProductImage.RefRecord == docuRef.RefRecId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new EcoResProductImage based on a DocuRef.
    /// </summary>
    /// <param name = "_docuRef">DocuRef to base the EcoResProductImage on.</param>
    /// <returns>A new instance of EcoResProductImage.</returns>
    /// <remarks>
    /// The EcoResProductImage will be created as the default image if there are no
    /// other EcoResProductImage for the referenced DocuRef record.
    /// </remarks>
    public static EcoResProductImage create(DocuRef _docuRef)
    {
        EcoResProductImage ecoResProductImage;

        ecoResProductImage.RefRecId  = _docuRef.RecId;
        ecoResProductImage.RefRecord = _docuRef.RefRecId;
        ecoResProductImage.DefaultImage = EcoResProductImage::hasDefaultProductImage(_docuRef.RefRecId, _docuRef.RefTableId) ? NoYes::No : NoYes::Yes;
        ecoResProductImage.write();

        EcoResProductImage::generateThumbnail(_docuRef, ecoResProductImage);

        return ecoResProductImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateThumbnail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates thumbnail for the <c>EcoResProductImage</c> based on the image stored in Document Management
    /// </summary>
    /// <param name = "_docuRef"><c>DocuRef</c> object with the full size image.</param>
    /// <param name = "_ecoResProductImage"><c>EcoResProductImage</c> to generate the thumbnail for.</param>
    private static void generateThumbnail(DocuRef _docuRef, EcoResProductImage _ecoResProductImage)
    {
        System.Drawing.Image fullSizeImage = EcoResProductImage::downloadImage(_docuRef.docuValue().FileId);
        if (fullSizeImage)
        {
            System.Drawing.Image mediumImage = EcoResProductImage::scaleImage(fullSizeImage, 300, 120);
            container binImage = EcoResProductImage::convertImageToContainer(mediumImage);
            ttsbegin;
            _ecoResProductImage.MediumSize = binImage;
            _ecoResProductImage.write();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertImageToContainer</Name>
				<Source><![CDATA[
    private static container convertImageToContainer(System.Drawing.Image _image)
    {
        using(var memoryStream = new System.IO.MemoryStream())
        {
            _image.Save(memoryStream, System.Drawing.Imaging.ImageFormat::Png);
            return Binary::constructFromMemoryStream(memoryStream).getContainer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads image from DocumentManagement into <c>System.Drawing.Image</c> object.
    /// </summary>
    /// <param name = "_imageId">Image id in Document Management</param>
    /// <returns>The image object if image was found, null otherwise.</returns>
    private static System.Drawing.Image downloadImage(guid _imageId)
    {
        DocuValue docuValue = DocuValue::findByFileId(_imageId);
        if (docuValue == null || docuValue.RecId == 0)
        {
            return null;
        }

        DocumentLocation location = docuValue.createLocation();
        if (location == null)
        {
            return null;
        }

        IDocumentStorageProvider storageProvider = docuValue.GetStorageProvider();
        if (storageProvider == null)
        {
            return null;
        }

        try
        {
            DocumentContents documentContent = storageProvider.GetFile(location);
            if (documentContent == null || documentContent.Content == null)
            {
                return null;
            }

            System.IO.Stream fileStream = documentContent.Content;
            return System.Drawing.Image::FromStream(fileStream);
        }
        catch
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scaleImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Scales <c>System.Drawing.Image</c> object keeping the orignal
    /// aspect ratio, using high quality scaling.
    /// </summary>
    /// <param name = "_image">Image object to be scaled.</param>
    /// <param name = "_maxWidth">Maximum width of the scaled object.</param>
    /// <param name = "_maxHeight">Maximum height of the scaled object.</param>
    /// <returns>The scaled object.</returns>
    private static System.Drawing.Image scaleImage(System.Drawing.Image _image, int _maxWidth, int _maxHeight)
    {
        if (_image == null || _maxWidth <= 0 || _maxHeight <= 0)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        int origWidth = _image.get_Width();
        int origHeight = _image.get_Height();

        real realOrigWidth = origWidth;
        real realOrigHeight = origHeight;
        real realMaxWidth = _maxWidth;
        real realMaxHeight = _maxHeight;

        real ratioX = realMaxWidth/realOrigWidth;
        real ratioY = realMaxHeight/realOrigHeight;
        real ratio = min(ratioX, ratioY);

        int newWidth = real2int(realOrigWidth * ratio);
        int newHeight = real2int(realOrigHeight * ratio);

        System.Drawing.Rectangle destRect = new System.Drawing.Rectangle(0, 0, newWidth, newHeight);
        System.Drawing.Bitmap newImage = new System.Drawing.Bitmap(newWidth, newHeight);
        newImage.SetResolution(_image.get_HorizontalResolution(), _image.get_VerticalResolution());

        using (System.Drawing.Graphics graphics = System.Drawing.Graphics::FromImage(newImage))
        {
            graphics.set_InterpolationMode(System.Drawing.Drawing2D.InterpolationMode::HighQualityBicubic);
            graphics.set_CompositingMode(System.Drawing.Drawing2D.CompositingMode::SourceCopy);
            graphics.set_CompositingQuality(System.Drawing.Drawing2D.CompositingQuality::HighQuality);
            graphics.set_SmoothingMode(System.Drawing.Drawing2D.SmoothingMode::HighQuality);
            graphics.set_PixelOffsetMode(System.Drawing.Drawing2D.PixelOffsetMode::HighQuality);

            using (System.Drawing.Imaging.ImageAttributes wrapMode = new System.Drawing.Imaging.ImageAttributes())
            {
                wrapMode.SetWrapMode(System.Drawing.Drawing2D.WrapMode::TileFlipXY);
                graphics.DrawImage(_image, destRect, 0, 0, origWidth, origHeight, System.Drawing.GraphicsUnit::Pixel, wrapMode);
            }
        }
        return newImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a product image for a given EcoResProduct.
    /// </summary>
    /// <param name = "_ecoResProduct">EcoResProduct to get a product image for.</param>
    /// <param name = "_ecoResProductImageSize">The desired image size; optional.</param>
    /// <returns>ImageReference of the product image.</returns>
    /// <remarks>
    /// If no product image is found a 'No Image Available' image is returned.
    /// </remarks>
    public static ImageReference productImage(EcoResProduct _ecoResProduct, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {
        return EcoResProductImage::getImage(_ecoResProduct, _ecoResProductImageSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalCatalogImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets image for a given <c>CatExternalCatalog</c>.
    /// </summary>
    /// <param name = "_catExternalCatalog"><c>CatExternalCatalog</c> to get a catalog image for.</param>
    /// <param name = "_ecoResProductImageSize">The desired image size; optional.</param>
    /// <returns>ImageReference of the external catalog image.</returns>
    /// <remarks>
    /// If no product image is found a 'No Image Available' image is returned.
    /// </remarks>
    public static ImageReference externalCatalogImage(CatExternalCatalog _catExternalCatalog, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {
        return EcoResProductImage::getImage(_catExternalCatalog, _ecoResProductImageSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedProductImageExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a product image exists for a given InventTable.
    /// </summary>
    /// <param name = "_inventTable">InventTable to get a product image for.</param>
    /// <param name = "_ecoResProductImageSize">The desired image size; optional.</param>
    /// <returns>True if an image eixsts, false otherwise.</returns>
    public static boolean releasedProductImageExists(InventTable _inventTable, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {
        EcoResProduct product;
        product.RecId = _inventTable.Product;

        return EcoResProductImage::imageExistsFrom2Records(_inventTable, product, _ecoResProductImageSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedProductVariantImageExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a product image exists for a given InventDimCombination.
    /// </summary>
    /// <param name = "_inventDimCombination">InventDimCombination to get a product image for.</param>
    /// <param name = "_ecoResProductImageSize">The desired image size; optional.</param>
    /// <returns>True if an image eixsts, false otherwise.</returns>
    public static boolean releasedProductVariantImageExists(InventDimCombination _inventDimCombination, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {
        EcoResDistinctProductVariant productVariant;
        productVariant.RecId = _inventDimCombination.DistinctProductVariant;

        return EcoResProductImage::imageExistsFrom2Records(_inventDimCombination, productVariant, _ecoResProductImageSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedProductImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a product image for a given InventTable.
    /// </summary>
    /// <param name = "_inventTable">InventTable to get a product image for.</param>
    /// <param name = "_ecoResProductImageSize">The desired image size; optional.</param>
    /// <returns>ImageReference of the product image.</returns>
    /// <remarks>
    /// If no product image is found a 'No Image Available' image is returned.
    /// </remarks>
    public static ImageReference releasedProductImage(InventTable _inventTable, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {
        EcoResProduct product;
        product.RecId = _inventTable.Product;

        return EcoResProductImage::getImageFrom2Records(_inventTable, product, _ecoResProductImageSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releasedProductVariantImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a product image for a given InventDimCombination.
    /// </summary>
    /// <param name = "_inventDimCombination">InventDimCombination to get a product image for.</param>
    /// <param name = "_ecoResProductImageSize">The desired image size; optional.</param>
    /// <returns>ImageReference of the product image.</returns>
    /// <remarks>
    /// If no product image is found a 'No Image Available' image is returned.
    /// </remarks>
    public static ImageReference releasedProductVariantImage(InventDimCombination _inventDimCombination, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {
        EcoResDistinctProductVariant productVariant;
        productVariant.RecId = _inventDimCombination.DistinctProductVariant;

        return EcoResProductImage::getImageFrom2Records(_inventDimCombination, productVariant, _ecoResProductImageSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayImageInNewBrowserWindow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens given image URL in a new browser window.
    /// </summary>
    /// <param name = "_packedImageReference">Packed instance of <c>ImageReference</c> class, of type URL.</param>
    public static void displayImageInNewBrowserWindow(container _packedImageReference)
    {
        ImageReference imgReference = ImageReference::constructForPackedData(_packedImageReference);
        if (imgReference.parmImageType() == ImageReference::URLType)
        {
            if (System.Uri::IsWellFormedUriString(imgReference.parmImageData(), System.UriKind::RelativeOrAbsolute))
            {
                Browser browser = new Browser();
                browser.navigate(imgReference.parmImageData());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultImageDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the DocuRef record which carries the default image for the given record.
    /// </summary>
    /// <param name = "_record">Record with associated images.</param>
    /// <returns>DocuRef record with default image</returns>
    public static DocuRef findDefaultImageDocuRef(Common _record)
    {
        DocuRef defaultDocuRef;
        EcoResProductImage localEcoResProductImage;
        select firstonly defaultDocuRef
                where
                    defaultDocuRef.RefTableId == _record.TableId
                    && defaultDocuRef.RefRecId == _record.RecId
                    && defaultDocuRef.RefCompanyId == _record.DataAreaId
                join localEcoResProductImage
                where
                    defaultDocuRef.RecId == localEcoResProductImage.RefRecId
                    && localEcoResProductImage.DefaultImage == NoYes::Yes;

        return defaultDocuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDummyImage</Name>
				<Source><![CDATA[
    private static ImageReference getDummyImage()
    {
        ImageReference imageRef = ImageReference::constructForAotResource(resourceStr(CatNoImageAvailable48x48));
        return imageRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default product image, if one exsts, returns dummy image otherwise.
    /// </summary>
    /// <param name = "_record">Record to get a product image for.</param>
    /// <param name = "_ecoResProductImageSize">The desired image size; optional.</param>
    /// <returns>ImageReference of the product image if one exists.</returns>
    private static ImageReference getImage(Common _record, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {
        TableId             tableId = DocuRef::GetRootTableID(_record.TableId);
        DocuRef             docuRef;
        DocuValue           docuValue;
        EcoResProductImage  ecoResProductImage;

        select firstonly docuRef
            join docuValue
                where docuValue.RecId == docuRef.ValueRecId
                && docuRef.RefTableId == tableId
                && docuRef.RefRecId == _record.RecId
                && docuRef.RefCompanyId == _record.DataAreaId
            join ecoResProductImage
                where docuRef.RecId == ecoResProductImage.RefRecId
                && ecoResProductImage.DefaultImage == NoYes::Yes;

        if (docuRef)
        {
            return EcoResProductImage::getImageUrlReference(docuRef, ecoResProductImage, _ecoResProductImageSize);
        }
        else
        {
            return EcoResProductImage::getDummyImage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageFrom2Records</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default product image, if one exists for given 2 records in 1 SQL statement.
    /// If both records have an image, the order of passed parameters is used to choose the image.
    /// </summary>
    /// <param name = "_firstRecord">Record to get a product image for.</param>
    /// <param name = "_secondRecord">Record to get a product image for.</param>
    /// <param name = "_ecoResProductImageSize">The desired image size; optional.</param>
    /// <returns>ImageReference of the product image if one exists.</returns>
    protected static ImageReference getImageFrom2Records(Common _firstRecord, Common _secondRecord, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {        
        return EcoResProductImage::getImageFrom2RecordsV2(_firstRecord, _secondRecord, _ecoResProductImageSize);         
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageFrom2RecordsV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default product image, if one exists for given 2 records in 1 SQL statement.
    /// If both records have an image, the order of passed parameters is used to choose the image.
    /// </summary>
    /// <param name = "_firstRecord">Record to get a product image for.</param>
    /// <param name = "_secondRecord">Record to get a product image for.</param>
    /// <param name = "_ecoResProductImageSize">The desired image size; optional.</param>
    /// <returns>ImageReference of the product image if one exists.</returns>
    private static ImageReference getImageFrom2RecordsV2(Common _firstRecord, Common _secondRecord, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {
        TableId             firstTableId = DocuRef::GetRootTableID(_firstRecord.TableId);
        TableId             secondTableId = DocuRef::GetRootTableID(_secondRecord.TableId);
        DocuRef             docuRef;
        DocuValue           docuValue;
        EcoResProductImage  ecoResProductImage;
        
        DocuRef             docuRefRow;
        EcoResProductImage  ecoResProductImageRow;

        while select ecoResProductImage
            where ecoResProductImage.DefaultImage == NoYes::Yes
            join docuRef
                where
                    docuRef.RecId == ecoResProductImage.RefRecId
                && ((docuRef.RefTableId == firstTableId
                    && docuRef.RefRecId == _firstRecord.RecId
                    && docuRef.RefCompanyId == _firstRecord.DataAreaId)
                ||
                    (docuRef.RefTableId == secondTableId
                    && docuRef.RefRecId == _secondRecord.RecId
                    && docuRef.RefCompanyId == _secondRecord.DataAreaId)
                )
            exists join docuValue
                where
                    docuValue.RecId == docuRef.ValueRecId
        {
            docuRefRow.data(docuRef);
            ecoResProductImageRow.data(ecoResProductImage);
            if (docuRef.RefTableId == firstTableId)
            {
                // We loop until we hit the first table (in case the first table is selected as the second row).
                // If we do not hit the first table, then second table row is used.
                // This logic could also be replaced by ordering
                // (depending on the order of firstTableId and secondTableId we would order our query,
                // but it would result in copying the query code or building it dynamically, which is not worth it).
                break;                
            }
        }
        
        if (ecoResProductImageRow)
        {
            return EcoResProductImage::getImageUrlReference(docuRefRow, ecoResProductImageRow, _ecoResProductImageSize);
        }

        return EcoResProductImage::getDummyImage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageExistsFrom2Records</Name>
				<Source><![CDATA[
    protected static boolean imageExistsFrom2Records(Common _firstRecord, Common _secondRecord, EcoResProductImageSize _ecoResProductImageSize = EcoResProductImageSize::Normal)
    {
        TableId             firstTableId = DocuRef::GetRootTableID(_firstRecord.TableId);
        TableId             secondTableId = DocuRef::GetRootTableID(_secondRecord.TableId);
        DocuRef             docuRef;
        DocuValue           docuValue;
        EcoResProductImage  ecoResProductImage;

        select firstonly RecId from ecoResProductImage
            where ecoResProductImage.DefaultImage == NoYes::Yes
            exists join docuRef
                where
                    docuRef.RecId == ecoResProductImage.RefRecId
                && ((docuRef.RefTableId == firstTableId
                    && docuRef.RefRecId == _firstRecord.RecId
                    && docuRef.RefCompanyId == _firstRecord.DataAreaId)
                ||
                    (docuRef.RefTableId == secondTableId
                    && docuRef.RefRecId == _secondRecord.RecId
                    && docuRef.RefCompanyId == _secondRecord.DataAreaId)
                )
            exists join docuValue
                where
                    docuValue.RecId == docuRef.ValueRecId;

        return ecoResProductImage.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageUrlReference</Name>
				<Source><![CDATA[
    private static ImageReference getImageUrlReference(DocuRef _docuRef, ecoResProductImage _ecoResProductImage, EcoResProductImageSize _ecoResProductImageSize)
    {
        switch (_ecoResProductImageSize)
        {
            case EcoResProductImageSize::Normal:
                str displayUrl = DocumentManagement::getAttachmentPublicUrl(_docuRef);
                return ImageReference::constructForUrl(displayUrl);
            case EcoResProductImageSize::Thumbnail:
                if (conLen(_ecoResProductImage.MediumSize) > 0)
                {
                    Image mediumImage = new Image();
                    mediumImage.setData(_ecoResProductImage.MediumSize);
                    return ImageReference::constructForImage(mediumImage);
                }

                return EcoResProductImage::getDummyImage();
        }
        
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS323951</DeveloperDocumentation>
	<Label>@SYS130276</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FileName</TitleField1>
	<TitleField2>Usage</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Usage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultImage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecord</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MediumSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThumbnailSize</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Usage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultImage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecord</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MediumSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThumbnailSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImageFormat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultImage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS132677</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FileName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Filename</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ImageFormat</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ImageFormat</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>MediumSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Bitmap</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecord</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ThumbnailSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Bitmap</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Usage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EcoResProductImageUsage</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecordIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecord</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdDefaultImageRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DefaultImage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DocuRef</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DocuRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DocuRef</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>DocuRef_EcoResProductImage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecord</Name>
					<Field>RefRecord</Field>
					<RelatedField>RefRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>