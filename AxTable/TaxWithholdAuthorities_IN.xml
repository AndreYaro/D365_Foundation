<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdAuthorities_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdAuthorities_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean              ret;
        TaxWithholdHead_IN   taxWithholdHead;

        ret = super();

        select  firstonly TaxWithholdAuthorities from taxWithholdHead
            where taxWithholdHead.TaxWithholdAuthorities    == this.RecId
               && taxWithholdHead.TaxType                   == this.TaxType;
        if (taxWithholdHead)
        {
            ret = ret && checkFailed(strfmt("@GLS5454", this.Authority));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = TaxWithholdParameters_IN::checkParameter(this.TaxType);
        }

        if (ret && !this.VendAccount)
        {
            ret = checkFailed(strfmt("@SYS26332", fieldpname(TaxWithholdAuthorities_IN, VendAccount)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdAuthorities_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_taxType">
    /// Withhold tax type.
    /// </param>
    /// <param name="_taxWithholdAuthority">
    /// Withhold tax authority .
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(TaxWithholdType_IN      _taxType,
                                TaxWithholdAuthority_IN _taxWithholdAuthority)
    {
        return (select firstonly taxWithholdAuthorities_IN
                    where taxWithholdAuthorities_IN.TaxType     == _taxType
                       && taxWithholdAuthorities_IN.Authority   == _taxWithholdAuthority).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdAuthorities_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdAuthorities_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdAuthorities_IN find(RefRecId            _recId,
                                                 boolean             _forupdate        = false,
                                                 ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdAuthorities_IN taxWithholdAuthorities;

        taxWithholdAuthorities.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdAuthorities.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdAuthorities
            where taxWithholdAuthorities.RecId == _recId;

        return taxWithholdAuthorities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>TaxWithholdAuthorities_IN</c> record based on Tax type and Authority
    /// </summary>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    /// <param name="_taxWithholdAuthority">
    /// Withhold tax authority used to the record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdAuthorities_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdAuthorities_IN findByVendAuthority(TaxWithholdType_IN         _taxType,
                                                                TaxWithholdAuthority_IN    _taxWithholdAuthority,
                                                                boolean                    _forUpdate = false)
    {
        TaxWithholdAuthorities_IN   taxWithholdAuthorities;

        if (_taxWithholdAuthority)
        {
            taxWithholdAuthorities.selectForUpdate(_forUpdate);
            select firstonly taxWithholdAuthorities
                where taxWithholdAuthorities.TaxType    == _taxType
                   && taxWithholdAuthorities.Authority  == _taxWithholdAuthority;
        }
        return taxWithholdAuthorities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs "Go to main table" operation.
    /// </summary>
    /// <param name="_authority">
    /// Withhold tax authority used to find the record.
    /// </param>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void jumpRef(TaxWithholdAuthority_IN _authority,
                               TaxWithholdType_IN      _taxType)
    {
        Args    args = new Args();

        args.parm(_authority);
        args.parmEnumType(enumnum(TaxWithholdType_IN));
        args.parmEnum(_taxType);
        new MenuFunction(menuitemdisplaystr(TaxWithholdAuthorities_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the specific field with their own logic.
    /// </summary>
    /// <param name = "_fieldIdToCheck">The checked field id.</param>
    /// <returns>The validated result.</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                // Vendor account
                case fieldNum(TaxWithholdAuthorities_IN, VendAccount):
                    VendTable vendTable = vendTable::find(this.VendAccount);
                    if (vendTable
                        && vendTable.Currency != Ledger::accountingCurrency(CompanyInfo::current()))
                    {
                        ret = checkFailed('@TaxWithholdParameters:WHTAuthorityCodeCurrencyCheckLabel');
                    }

                    break;

                default:
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63791</DeveloperDocumentation>
	<Label>@GLS5482</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxType</TitleField1>
	<TitleField2>Authority</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TypeAuthorityIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Authority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Authority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Authority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation</Name>
			<Label>@SYS33550</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Authority</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdAuthority_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:WithholdingTaxAuthorityHelpText</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:AuthoritiesDescriptionHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:AuthoritiesVendorAccountHelpText</HelpText>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeAuthorityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Authority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>