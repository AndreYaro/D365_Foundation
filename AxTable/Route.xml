<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Route</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Route extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>operationName</Name>
				<Source><![CDATA[
    internal display RouteOprName operationName()
    {
        return RouteOprTable::find(this.OprId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (!this.canEdit())
            {
                throw error("@SYS95153");
            }

            super();

            this.updateCheckFlag();

            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPhantom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a route from a phantom route.
    /// </summary>
    /// <param name="_phantomRoute">
    /// The phantom route that contains the information which should be used in this route.
    /// </param>
    /// <param name="_oprNumOffset">
    /// The offset that must be added to the operation number.
    /// </param>

    void initFromPhantom(
        Route       _phantomRoute,
        OprNum      _oprNumOffset
        )
    {
        this.Level         = this.Level        + _phantomRoute.Level;
        this.OprNum        = this.OprNum       + _oprNumOffset;
        this.OprNumNext    = this.OprNumNext ? this.OprNumNext   + _oprNumOffset : _phantomRoute.OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdRoute</Name>
				<Source><![CDATA[
    void initFromProdRoute(ProdRoute prodRoute)
    {
        this.RouteMap::initFromRouteMap(prodRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (!this.canEdit())
            {
                throw error("@SYS95153");
            }

            super();

            this.updateCheckFlag();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproved</Name>
				<Source><![CDATA[
    public boolean isApproved()
    {
        return RouteTable::find(this.RouteId).isApproved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be edited.
    /// </summary>
    /// <returns>
    /// true if edit is allowed; otherwise, false.
    /// </returns>
    public boolean canEdit()
    {
        return !(this.isApproved() && RouteParameters::find().BlockEditing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        RouteOpr    routeOpr;
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(Route, OprId):
                select firstonly routeOpr
                    index hint OprRelIdx
                    where routeOpr.ItemCode        == TableGroupAll::All    &&
                          routeOpr.ItemRelation    == ''                    &&
                          routeOpr.ConfigId        == ''                    &&
                          routeOpr.RouteCode       == RouteAll::Route       &&
                          routeOpr.RouteRelation   == this.RouteId          &&
                          routeOpr.OprId           == this.OprId;

                if (routeOpr)
                {
                    this.ErrorPct = routeOpr.getResource().ErrorPct;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextOperation</Name>
				<Source><![CDATA[
    Route nextOperation(boolean _forUpdate = false)
    {
        Route routeNext;

        select routeNext
            index hint NumOprNumIdx
            where routeNext.RouteId     == this.RouteId    &&
                  routeNext.OprNum      == this.OprNumNext;

        return routeNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>primary</Name>
				<Source><![CDATA[
    Route primary()
    {
        Route routeTmp;

        if (this.OprPriority == RouteOprPriority::Primary)
            return this;

        select routeTmp
            where routeTmp.RouteId              == this.RouteId                 &&
                  routeTmp.OprNum               == this.OprNum                  &&
                  routeTmp.OprPriority          == RouteOprPriority::Primary;

        if (! routeTmp.RecId)
            throw error(strfmt("@SYS24363",this.OprNum));

        return routeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeOpr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds tzhe best matching operation relation for this route.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of an item for which to search.
    /// </param>
    /// <param name="_configId">
    /// The ID of an item configuration for which to search.
    /// </param>
    /// <param name="_siteId">
    /// The ID of a site for which to search.
    /// </param>
    /// <param name="_routeOpr">
    /// The set of operation relations in which to search.
    /// </param>
    /// <returns>
    /// The best matching operation relation.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method must be called by using a valid operation relation buffer.
    /// </exception>

    public RouteOpr routeOpr( ItemId                      _itemId,
                                            EcoResItemConfigurationName _configId,
                                            InventSiteId                _siteId,
                                            RouteOpr                    _routeOpr = null)
    {
        ItemGroupId     itemGroupId = InventTable::find(_itemId).itemGroupId();
        boolean         throwIfError;

        // If not called with RouteOpr buffer then throw if error
        throwIfError = prmisdefault(_routeOpr);

        if (!this.OprId)
        {
            if (throwIfError)
            {
                throw error(strfmt("@SYS28622",funcname()));
            }
            return _routeOpr;
        }

        select firstonly _routeOpr
            order by ItemCode, RouteCode, ConfigId desc, SiteId desc
            where _routeOpr.OprId           == this.OprId
              && (    _routeOpr.ItemCode    == TableGroupAll::All
                  || (_routeOpr.ItemCode    == TableGroupAll::Table     && _routeOpr.ItemRelation == _itemId)
                  || (_routeOpr.ItemCode    == TableGroupAll::GroupId   && _routeOpr.ItemRelation == itemGroupId)
                 )
              && (    _routeOpr.RouteCode   == RouteAll::All
                  || (_routeOpr.RouteCode   == RouteAll::Route          && _routeOpr.RouteRelation == this.RouteId)
                 )
              && (    _routeOpr.ConfigId    == ''
                  ||  _routeOpr.ConfigId    == _configId
                 )
              && (    _routeOpr.SiteId      == ''
                  ||  _routeOpr.SiteId      == _siteId
                 );

        if (!_routeOpr.RecId && throwIfError)
        {
            if (_configId)
            {
                throw error(strfmt("@SYS25769",this.OprId,_itemId,_configId));
            }
            throw error(strfmt("@SYS73492",this.OprId,_itemId));
        }

        return _routeOpr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeTable</Name>
				<Source><![CDATA[
    RouteTable routeTable(boolean _forUpdate)
    {
        return RouteTable::find(this.RouteId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrevOprNum</Name>
				<Source><![CDATA[
    void setPrevOprNum(Route   oldRoute,
                              boolean append = false
                             )
    {
        Route   testRoute;

        if (append)
        {
            this.OprNum = oldRoute.OprNum + RouteParameters::defaultOprNumInterval();
            return;
        }

        if (oldRoute.RouteId)
        {
            select reverse firstonly testRoute
                index NumOprNumIdx
                where testRoute.RouteId        == oldRoute.RouteId    &&
                      (
                       (testRoute.OprNum        == oldRoute.OprNum      &&
                        testRoute.OprPriority   <  oldRoute.OprPriority
                       )                                                ||
                       testRoute.OprNum         <  oldRoute.OprNum
                      );
            if (testRoute)
            {
                if (testRoute.OprNum < oldRoute.OprNum)
                    this.OprNum = oldRoute.OprNum - (oldRoute.OprNum - testRoute.OprNum) div 2;
                else
                    this.OprNum = oldRoute.OprNum;
            }
            else
                this.OprNum = oldRoute.OprNum - RouteParameters::defaultOprNumInterval();
        }
        else
            this.OprNum = RouteParameters::defaultOprNumInterval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            if (!this.canEdit())
                throw error("@SYS95153");

            super();

            this.updateCheckFlag();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCheckFlag</Name>
				<Source><![CDATA[
    void updateCheckFlag()
    {
        RouteTable routeTable = this.routeTable(true);

        if (routeTable)
        {
            this.updateRouteTableCheckFlag(routeTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRouteTableCheckFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the given <c>RouteTable</c> record for a route update.
    /// </summary>
    /// <param name = "_routeTable">
    /// The <c>RouteTable</c> record to update.
    /// </param>
    protected void updateRouteTableCheckFlag(RouteTable _routeTable)
    {
        _routeTable.CheckRoute = NoYes::Yes;
        _routeTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && FormDataUtil::getFormDataSource(this) && this.isApproved() && RouteParameters::find().BlockEditing)
            ret = checkFailed("@SYS95153");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && FormDataUtil::getFormDataSource(this) && this.isApproved() && RouteParameters::find().BlockEditing)
            ret = checkFailed("@SYS95153");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accError</Name>
				<Source><![CDATA[
    static Percent accError(
        RouteId    _routeId,
        OprNum     _oprNum
        )
    {
        Percent tmpAcc;

        if (_oprNum)
            tmpAcc = (select route
                         where route.RouteId        == _routeId     &&
                               route.OprNum         == _oprNum      &&
                               route.OprPriority    == RouteOprPriority::Primary).AccError;

        if (! tmpAcc)
            tmpAcc = Route::findFirst(_routeId).AccError;

        return tmpAcc > 0 ? tmpAcc : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRelation</Name>
				<Source><![CDATA[
    static void existRelation(RouteId  _routeId)
    {
        Route       route;
        RouteOpr    routeOpr;

        while select OprId, RouteId, OprNum from route
            where route.RouteId == _routeId
        {
            select firstonly routeOpr
                where routeOpr.OprId         == route.OprId           &&
                    ((routeOpr.RouteCode     == RouteAll::Route  &&
                      routeOpr.RouteRelation == route.RouteId)   ||
                      routeOpr.RouteCode     == RouteAll::All);
            if (! routeOpr)
            {
                error(strfmt("@SYS86118",route.OprId,route.OprNum,route.RouteId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    static Route findFirst(RouteId _routeId,boolean _forUpdate = false)
    {
        Route route;
        route.selectForUpdate(_forUpdate);

        if (_routeId)
            select firstonly route
                index hint NumOprNumIdx
                order by Level desc,OprNum
                where route.RouteId          == _routeId      &&
                      route.OprPriority      == RouteOprPriority::Primary;

        return route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstOpr</Name>
				<Source><![CDATA[
    public static Route findFirstOpr(
        RouteId _routeId,
        OprNum  _oprNum,
        boolean _forUpdate = false)
    {
        Route route;
        route.selectForUpdate(_forUpdate);

        if (_routeId)
        {
            select firstonly route
                where route.RouteId     == _routeId
                   && route.OprNum      == _oprNum
                   && route.OprPriority == RouteOprPriority::Primary;
        }

        return route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static Route findRecId(recId       recId,
                           boolean     _forUpdate = false
                          )
    {
        Route route;

        if (! recId)
            return route;

        route.selectForUpdate(_forUpdate);

        select route
            where route.RecId == recId;

        return route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRouteOpr</Name>
				<Source><![CDATA[
    static RouteOpr findRouteOpr(
        ItemId                      itemId,
        EcoResItemConfigurationName configId,
        RouteId                     routeId,
        RouteOprId                  operation,
        InventSiteId                siteId)
    {
        Route route;

        route.RouteId   = routeId;
        route.OprId     = operation;

        return route.routeOpr(itemId, configId, siteId, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastOprNum</Name>
				<Source><![CDATA[
    static OprNum lastOprNum(RouteId _routeNum)
    {
        Route   route;

        select count(RecId) from route
                index hint NumNextIdx
                where route.RouteId     == _routeNum &&
                      route.OprNumNext  == 0;
        // If more
        if (route.RecId == 1)
            return (select route
                        index hint NumNextIdx
                        where route.RouteId     == _routeNum &&
                              route.OprNumNext  == 0).OprNum;
        else
            return (select maxof(OprNum) from route
                        index hint NumNextIdx
                        where route.RouteId     == _routeNum &&
                              route.OprNumNext  == 0).OprNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProdRouting</ConfigurationKey>
	<DeveloperDocumentation>@SYS124196</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>Route</FormRef>
	<Label>@SYS4190</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RouteId</TitleField1>
	<TitleField2>OprNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>NumOprNumIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ErrorPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNumNext</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Operation</Name>
			<Label>@SYS101237</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OprId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OprNumNext</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinkType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobPayType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Scrap</Name>
			<Label>@SYS21681</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ErrorPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccError</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AccError</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteAccErrorPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ErrorPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteErrorPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobPayType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobPayType</ExtendedDataType>
			<EnumType>JmgJobPayTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LinkType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SchedJobLinkType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OprId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteOprId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OprNumNext</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OprNumNext</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OprPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RouteOprPriority</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumOprNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RouteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumNextIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RouteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprNumNext</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumLevelIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RouteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Level</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OperationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OprId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RouteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OprNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>RouteMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNumNext</MapField>
					<MapFieldTo>OprNumNext</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Level</MapField>
					<MapFieldTo>Level</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccError</MapField>
					<MapFieldTo>AccError</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprPriority</MapField>
					<MapFieldTo>OprPriority</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ErrorPct</MapField>
					<MapFieldTo>ErrorPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinkType</MapField>
					<MapFieldTo>LinkType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PlanVersion</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobPayType</MapField>
					<MapFieldTo>JobPayType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteOprTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteOprTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OprId</Name>
					<Field>OprId</Field>
					<RelatedField>OprId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OprIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteId</Name>
					<Field>RouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>