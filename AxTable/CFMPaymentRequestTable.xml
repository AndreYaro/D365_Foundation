<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CFMPaymentRequestTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNumModified</Name>
				<Source><![CDATA[
    public void accountNumModified()
    {
        const str blank = '';

        this.InvoiceAccountNum = blank;
        this.AgreementID = blank;

        this.initFromAccount(this.AccountType, this.AccountNum);
        this.initFromAgreementPaymentOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeModified</Name>
				<Source><![CDATA[
    public void accountTypeModified()
    {
        const str blank = '';

        this.AccountNum = blank;
        this.InvoiceAccountNum = blank;
        this.PostingProfile = blank;
        this.AgreementID = blank;
        this.RecepientBankAccountId = blank;
        this.PaymMode = blank;
        this.PaymSpec = blank;
        this.DefaultDimension = 0;
        this.PaymentAccountType = this.AccountType == CFMAccountType::Worker ? CFMPaymentAccountType::Cash_RU : CFMPaymentAccountType::Bank;
        this.PaymentAccountNum = blank;

        this.accountNumModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementDocumentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document title of the related agreement.
    /// </summary>
    /// <returns>
    ///     The agreement document title.
    /// </returns>
    public display AgreementDocumentTitle agreementDocumentTitle()
    {
        CompanyInfo companyInfo;
        AgreementDocumentTitle agreementTitle;

        switch (this.AccountType)
        {
            case CFMAccountType::Cust:
                SalesAgreementHeader salesAgreementHeader;
                select firstonly SalesNumberSequence, SellingLegalEntity, DocumentTitle from salesAgreementHeader
                exists join companyInfo
                    where salesAgreementHeader.SalesNumberSequence == this.AgreementID
                       && salesAgreementHeader.SellingLegalEntity == companyInfo.RecId
                       && companyInfo.DataArea == this.SourceDataAreaId;

                agreementTitle = salesAgreementHeader.DocumentTitle;
                break;

            case CFMAccountType::Vend:
                PurchAgreementHeader purchAgreementHeader;
                select firstonly PurchNumberSequence, BuyingLegalEntity, DocumentTitle from purchAgreementHeader
                exists join companyInfo
                    where purchAgreementHeader.PurchNumberSequence == this.AgreementID
                       && purchAgreementHeader.BuyingLegalEntity == companyInfo.RecId
                       && companyInfo.DataArea == this.SourceDataAreaId;

                agreementTitle = purchAgreementHeader.DocumentTitle;
                break;
        }

        return agreementTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementIdModified</Name>
				<Source><![CDATA[
    public void agreementIdModified()
    {
        switch (this.AccountType)
        {
            case CFMAccountType::Cust:
                this.initFromSalesAgreement(SalesAgreementHeader::findAgreementId(this.AgreementID));
                break;

            case CFMAccountType::Vend:
                this.initFromPurchAgreement(PurchAgreementHeader::findAgreementId(this.AgreementID));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return amount for the payment request.
    /// </summary>
    /// <returns>Return sum of amount all lines of the payment request.</returns>
	public display CFMPaymentRequestAmountCurOriginal amountCur()
    {
        return (select sum(AmountCur) from cfmPaymentRequestLine
                    where cfmPaymentRequestLine.PaymentRequestTable == this.RecId).AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return amount balance for the payment request.
    /// </summary>
    /// <returns> Return sum of amount balance all lines of the payment request.</returns>
    public display CFMPaymentRequestAmountCurPayment amountCurBalance()
    {
        return (select sum(BalanceAmountCur) from cfmPaymentRequestLine
                    where cfmPaymentRequestLine.PaymentRequestTable == this.RecId).BalanceAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToPay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the calculated payment amount.
    /// </summary>
    /// <param name="_paymDate">
    /// Payment date to calculate cash discount.
    /// </param>
    /// <returns>
    /// The payment amount.
    /// </returns>
    public AmountCur amountToPay(PaymDate _paymDate = this.PaymentDate)
    {
        return this.amountCurBalance() - this.cashDiscAmount(_paymDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToPayInCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return payment amount by date.
    /// </summary>
    /// <param name = "_paymDate">Payment date</param>
    /// <returns>Return paym amount by date.</returns>
    public AmountCur amountToPayInCurrency(PaymDate _paymDate = this.PaymentDate)
    {
        CurrencyExchangeHelper paymExchRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::current(this.PaymentDataAreaId)), _paymDate);

        return paymExchRateHelper.calculateCurrencyToCurrency(this.CurrencyCode,
            this.PaymentCurrency,
            this.amountCurBalance() - this.cashDiscAmount(_paymDate),
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can submit workflow for the document.
    /// </summary>
    /// <param name = "_workflowType">Workflow type.</param>
    /// <returns>Return true if the document can submit workflow false if other</returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        return this.WorkflowStatus == CFMPaymentRequestWorkflowStatus::NotSubmitted &&
               this.Status != CFMPaymentRequestStatus::Opened &&
               this.Status != CFMPaymentRequestStatus::Canceled &&
               this.amountCurBalance() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return cash disc amount.
    /// </summary>
    /// <param name = "_dueDate">Due date for range by cash disc date.</param>
    /// <returns>return cash disc amount.</returns>
    display public CashDiscAmount cashDiscAmount(DueDate _dueDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CFMPaymentRequestCashDisc paymentReqCahsDisc;

        select firstonly CashDiscAmount from paymentReqCahsDisc
            order by CashDiscdate asc
            where paymentReqCahsDisc.PaymentRequestTable == this.RecId
               && paymentReqCahsDisc.CashDiscdate >= _dueDate;

        return paymentReqCahsDisc.CashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return first cash disc date.
    /// </summary>
    /// <param name = "_dueDate">Due date for range by cash disc date.</param>
    /// <returns>return cash disc date.</returns>
    display public CashDiscdate cashDiscDate(DueDate _dueDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CFMPaymentRequestCashDisc paymentReqCahsDisc;

        select firstonly CashDiscdate from paymentReqCahsDisc
            order by CashDiscdate asc
            where paymentReqCahsDisc.PaymentRequestTable == this.RecId
               && paymentReqCahsDisc.CashDiscdate >= _dueDate;

        return paymentReqCahsDisc.CashDiscdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    public CompanyInfo companyInfo(SelectableDataArea _dataAreaId)
    {
        return CompanyInfo::findDataArea(_dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy default dimension.
    /// </summary>
    /// <param name = "_defaultDimension">From Default Dimension.</param>
    /// <param name = "_dimensionCopy">To Default Dimension.</param>
    /// <returns>return copy default dimension record</returns>
    public DimensionDefault copyDimension(DimensionDefault _defaultDimension,
        DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this, CompanyInfo::findDataArea(this.DataAreaId).RecId))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return customer or vendor table default for current payment request.
    /// </summary>
    /// <param name = "_account">Vendor or customer account/</param>
    /// <returns>Return customer or vendor table.</returns>
    public CustVendTable custVendTable(CustVendAC _account = this.AccountNum)
    {
        CustVendTable custVendTable;

        if (this.SourceDataAreaId)
        {
            changecompany(this.SourceDataAreaId)
            {
                switch (this.AccountType)
                {
                    case CFMAccountType::Cust:
                        custVendTable = CustTable::find(_account);
                        break;

                    case CFMAccountType::Vend:
                        custVendTable = VendTable::find(_account);
                        break;
                }
            }
        }

        return custVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTaxGroupBaseAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns packed map where key of each element is the pair (TaxGroup, TaxItemGroup) and base amount is a value.
    /// </summary>
    /// <param name="_paymDate">
    /// Payment date to calculate cash discount and exchange rate. Optional.
    /// </param>
    /// <param name="_paymCurrencyCode">
    /// Currency code to convert tax amount to. Optional.
    /// </param>
    /// <returns>
    /// Returns packed map with key type is <c>container</c>, value type is <c>real</c>
    /// </returns>
    /// <remarks>
    /// If payment request is marked as prepayment, method fetches TaxGroup and TaxItemGroup from parmameter if lines contains not unique combinations of tax groups
    /// </remarks>
    public container custVendTaxGroupBaseAmountMap(PaymDate _paymDate = this.PaymentDate, CurrencyCode _paymCurrencyCode = this.PaymentCurrency)
    {
        Map taxMap = new Map(Types::Container, Types::Real);
        TaxBaseCur prepaymentBaseCur;

        TaxGroup prepaymentTaxGroupDefault;
        TaxItemGroup prepaymentTaxItemGroupDefault;
        #ISOCountryRegionCodes

        if (this.RecId == 0)
        {
            return conNull();
        }

        changecompany(this.SourceDataAreaId)
        {
            boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
            CFMPaymentRequestLine paymentRequestLine;

            while select TaxGroup, TaxItemGroup, BalanceAmountCur, RecId from paymentRequestLine
                where paymentRequestLine.PaymentRequestTable == this.RecId
            {
                container con = [paymentRequestLine.TaxGroup, paymentRequestLine.TaxItemGroup];

                CurrencyExchangeHelper paymExchRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::current(this.PaymentDataAreaId)), _paymDate);
                TaxBaseCur taxBaseCur = paymExchRateHelper.calculateCurrencyToCurrency(this.CurrencyCode,
                    _paymCurrencyCode,
                    paymentRequestLine.BalanceAmountCur - CFMPaymentRequestLineCashDisc::findCashDiscOnDate(paymentRequestLine.RecId, _paymDate).CashDiscAmount,
                    true);

                if (this.Prepayment)
                {
                    prepaymentBaseCur += taxBaseCur;

                    boolean isTaxGroupsCombinationUnique = !taxMap.exists(con);

                    if (isTaxGroupsCombinationUnique && !taxMap.empty())
                    {
                        if (prepaymentTaxGroupDefault && prepaymentTaxItemGroupDefault)
                        {
                            con = [prepaymentTaxGroupDefault, prepaymentTaxItemGroupDefault];
                        }
                        else
                        {
                            if (countryRegion_RU)
                            {
                                if (this.AccountType == CFMAccountType::Vend)
                                {
                                    VendParameters vendParameters = VendParameters::find();
                                    prepaymentTaxItemGroupDefault = vendParameters.TaxItemGroup_W;
                                    prepaymentTaxGroupDefault = vendParameters.TaxGroup_W;
                                }
                                else
                                {
                                    prepaymentTaxItemGroupDefault = CustParameters::find().TaxItemGroup_RU;
                                    prepaymentTaxGroupDefault = CustParameters::find().TaxGroup_RU;
                                }
                            }
                            else
                            {
                                CustVendTable custVendTable = this.custVendTable();
                                prepaymentTaxGroupDefault = custVendTable.TaxGroup;
                                prepaymentTaxItemGroupDefault = Tax::taxItemGroup();
                            }

                            taxMap = new Map(Types::Container, Types::Real);
                            con = [prepaymentTaxGroupDefault, prepaymentTaxItemGroupDefault];
                            taxBaseCur = prepaymentBaseCur;
                        }
                    }
                }

                if (taxMap.exists(con))
                {
                    taxBaseCur += taxMap.lookup(con);
                }

                taxMap.insert(con, taxBaseCur);
            }
        }

        return taxMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dirPartyMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns <c>DirPartyMap</c> object for entity assotiated with current account.
    /// </summary>
    /// <returns>
    /// <c>DirPartyMap</c> object with mapped record.
    /// </returns>
    public DirPartyMap dirPartyMap()
    {
        DirPartyMap dirPartyMap;

        switch (this.AccountType)
        {
            case CFMAccountType::Cust:
                CustTable custTable = this.custVendTable();
                dirPartyMap = custTable;
                break;

            case CFMAccountType::Vend:
                VendTable vendTable = this.custVendTable();
                dirPartyMap = vendTable;
                break;

            case CFMAccountType::Worker:
                dirPartyMap = HcmWorker::findByPersonnelNumber(this.AccountNum);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return dirPartyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalByDate</Name>
				<Source><![CDATA[
	/// <summary>
    /// Find cash flow management journal by date.
    /// </summary>
    /// <param name = "_journalType">Type of cash flow journal.</param>
    /// <param name = "_paymentDate">Date of the journal.</param>
    /// <returns>Return cash flow management journal.</returns>
    public CFMJournalTable findJournalByDate(CFMJournalType _journalType, DueDate _paymentDate)
    {
        CFMJournalTransLog transLog;
        CFMJournalTable journalTable;

        select firstonly crossCompany journalTable
            where journalTable.JournalType == _journalType
               && journalTable.DateFrom <= _paymentDate
               && journalTable.DateTo >= _paymentDate
        exists join transLog
            where transLog.SourceType == CFMJournalTransSourceType::PaymentRequest
                && transLog.SourceHeader == this.RecId
                && transLog.JournalTable == journalTable.RecId
                && transLog.Outdated == NoYes::No;

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WorkflowVersionTable</c> record that is associated to the <c>PaymentRequestType</c>.
    /// record.
    /// </summary>
    /// <returns>
    /// The <c>WorkflowVersionTable</c> record.
    /// </returns>
    public WorkflowVersionTable getWorkflowVersionTable()
    {
        WorkflowVersionTable workflowVersionTable;

        if (this.PaymentRequestType)
        {
            CFMPaymentRequestType paymentRequestType = CFMPaymentRequestType::find(this.PaymentRequestType);

            if (paymentRequestType.isWorkflowTableSequenceNumberValid())
            {
                workflowVersionTable = paymentRequestType.workflowVersionTable();
            }
        }

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAccount</Name>
				<Source><![CDATA[
	/// <summary>
    /// Init record from account.
    /// </summary>
    /// <param name = "_accountType">Account type.</param>
    /// <param name = "_accountNum">Account num.</param>
    public void initFromAccount(CFMAccountType _accountType, CFMAccountNum _accountNum)
    {
        switch (_accountType)
        {
            case CFMAccountType::Cust:
            case CFMAccountType::Vend:
                this.initFromCustVendTable(this.custVendTable(_accountNum));
                break;

            case CFMAccountType::Worker:
                this.initFromWorker();
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        this.initPaymentPriority();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementPaymentOrder</Name>
				<Source><![CDATA[
    private void initFromAgreementPaymentOrder()
    {
        CFMAgreementPaymentOrder agreementPaymentOrder;

        if (this.isMethodOfPaymentRu())
        {
            switch (this.AccountType)
            {
                case CFMAccountType::Cust:
                    agreementPaymentOrder = CFMAgreementPaymentOrder::findByAgreement(SalesAgreementHeader::findAgreementId(this.AgreementID).RecId, SalesPurch::Sales);
                    break;

                case CFMAccountType::Vend:
                    agreementPaymentOrder = CFMAgreementPaymentOrder::findByAgreement(PurchAgreementHeader::findAgreementId(this.AgreementID).RecId, SalesPurch::Purch);
                    break;
            }

            if (agreementPaymentOrder)
            {
                CFMPaymentRequestPaymentOrderCreate paymentOrderCreate = CFMPaymentRequestPaymentOrderCreate::construct(agreementPaymentOrder);
                this.paymentOrder = paymentOrderCreate.findOrCreate(agreementPaymentOrder).RecId;
                this.BankPurposeText = agreementPaymentOrder.BankPurposeText;
            }
        }
        else
        {
            this.PaymentOrder = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendPaymModeTable</Name>
				<Source><![CDATA[
	/// <summary>
    /// Init the payment request from customer or vendor method of payment.
    /// </summary>
    /// <param name = "_paymModeTable">Customer or vendor method of payment map.</param>
    public void initFromCustVendPaymModeTable(CustVendPaymModeTable _paymModeTable)
    {
        if (_paymModeTable.AccountType == LedgerJournalACType::Bank)
        {
            this.PaymentAccountType = CFMPaymentAccountType::Bank;
            this.PaymentAccountNum = _paymModeTable.parmPaymAccount();
        }
        else if (_paymModeTable.AccountType == LedgerJournalACType::RCash)
        {
            this.PaymentAccountType = CFMPaymentAccountType::Cash_RU;
            this.PaymentAccountNum = _paymModeTable.parmPaymAccount();
        }
        else
        {
            this.PaymentAccountNum ='';
        }

        this.paymentAccountNumModified();
        this.initFromAgreementPaymentOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendTable</Name>
				<Source><![CDATA[
	/// <summary>
    /// init the payment request from the customer or vendor.
    /// </summary>
    /// <param name = "_custVendTable">Customer or vendor map.</param>
    public void initFromCustVendTable(CustVendTable _custVendTable)
    {
        this.AccountNum = _custVendTable.AccountNum;
        this.InvoiceAccountNum = _custVendTable.InvoiceAccount ? _custVendTable.InvoiceAccount : _custVendTable.AccountNum;
        this.PaymMode = _custVendTable.PaymMode;
        this.RecepientBankAccountId = _custVendTable.BankAccountId;
        this.CurrencyCode = _custVendTable.Currency;
        this.PaymentCurrency = _custVendTable.Currency;
        this.DefaultDimension = this.copyDimension(_custVendTable.DefaultDimension);
        this.PaymentAccountType = CFMPaymentAccountType::Bank;
        this.paymentAccountTypeModified();

        if (this.AccountType == CFMAccountType::Cust)
        {
            this.PostingProfile = CustParameters::find().PostingProfile;
        }
        else
        {
            this.PostingProfile = VendParameters::find().PostingProfile;
        }

        this.paymModeModified();

        this.PaymSpec = _custVendTable.PaymSpec;

    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPaymentBankAccountTable</Name>
				<Source><![CDATA[
	/// <summary>
    /// Init the payment request from a bank account.
    /// </summary>
    /// <param name = "_bankAccountTable">Bank account.</param>
    public void initFromPaymentBankAccountTable(BankAccountTable _bankAccountTable)
    {
        if (_bankAccountTable)
        {
            if (_bankAccountTable.BankMultiCurrency)
            {
                this.PaymentCurrency = this.CurrencyCode;
            }
            else
            {
                this.PaymentCurrency = _bankAccountTable.CurrencyCode;
            }
        }
        else
        {
            this.PaymentCurrency = this.CurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPaymentOrder</Name>
				<Source><![CDATA[
	/// <summary>
    /// Init the payment request from payment order.
    /// </summary>
    /// <param name = "_paymentOrder">Payment order.</param>
    public void initFromPaymentOrder(CFMPaymentRequestPaymentOrder _paymentOrder)
    {
        CFMPaymentRequestPaymentOrderCreate_PO paymentOrderCreate = new CFMPaymentRequestPaymentOrderCreate_PO();

        this.paymentOrder = paymentOrderCreate.findOrCreate(_paymentOrder).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchAgreement</Name>
				<Source><![CDATA[
	/// <summary>
    ///  Init the payment request from a purch agreement.
    /// </summary>
    /// <param name = "_purchAgreement">Purch agreement.</param>
    public void initFromPurchAgreement(PurchAgreementHeader _purchAgreement)
    {
        PurchAgreementHeaderDefault purchAgreementHeaderDefault;
        AgreementHeaderDefault agreementHeaderDefault;
        #ISOCountryRegionCodes

        select firstonly RecId from agreementHeaderDefault
            where agreementHeaderDefault.AgreementHeader == _purchAgreement.RecId
        join firstonly MethodOfPayment, PaymentSpecification, VendorInvoiceAccount from purchAgreementHeaderDefault
            where purchAgreementHeaderDefault.PurchaseAgreementHeader == _purchAgreement.RecId;

        if (agreementHeaderDefault.RecId)
        {
            this.DefaultDimension = this.mergeDimension(_purchAgreement.DefaultDimension, this.DefaultDimension);

            this.PaymMode = '';
            this.PaymSpec = '';

            VendPaymModeTable vendPaymModeTable = VendPaymModeTable::findByCompany(this.PaymentDataAreaId, purchAgreementHeaderDefault.MethodOfPayment);

            if (vendPaymModeTable.RecId != 0)
            {
                this.PaymMode = purchAgreementHeaderDefault.MethodOfPayment;

                this.paymModeModified();
                VendPaymModeSpec vendPaymModeSpec;

                select firstonly crosscompany RecID from vendPaymModeSpec
                    where vendPaymModeSpec.PaymMode == purchAgreementHeaderDefault.MethodOfPayment
                       && vendPaymModeSpec.Specification == purchAgreementHeaderDefault.PaymentSpecification
                       && vendPaymModeSpec.dataAreaId == this.PaymentDataAreaId;

                if (vendPaymModeSpec.RecId != 0)
                {
                    this.PaymSpec = purchAgreementHeaderDefault.PaymentSpecification;
                }
            }

            if (purchAgreementHeaderDefault.VendorInvoiceAccount)
            {
                this.InvoiceAccountNum = purchAgreementHeaderDefault.VendorInvoiceAccount;
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.DefaultDimension = this.copyDimension(_purchAgreement.DefaultDimension);

                PurchAgreementHeaderExt_RU purchAgreementHeaderExt = PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(_purchAgreement.RecId);

                if (purchAgreementHeaderExt.VendPostingProfile)
                {
                    this.PostingProfile = purchAgreementHeaderExt.VendPostingProfile;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesAgreement</Name>
				<Source><![CDATA[
	/// <summary>
    /// Init the payment request from sales agreement.
    /// </summary>
    /// <param name = "_salesAgreement">Sales agreement.</param>
    public void initFromSalesAgreement(SalesAgreementHeader _salesAgreement)
    {
        AgreementHeaderDefault agreementHeaderDefault;
        SalesAgreementHeaderDefault salesAgreementHeaderDefault;
        #ISOCountryRegionCodes

        select firstonly RecId from agreementHeaderDefault
            where agreementHeaderDefault.AgreementHeader == _salesAgreement.RecId
        join firstonly CustomerInvoiceAccount, CustomerMethodOfPayment, CustomerPaymentSpec from salesAgreementHeaderDefault
            where salesAgreementHeaderDefault.SalesAgreementHeader == _salesAgreement.RecId;

        if (agreementHeaderDefault.RecId)
        {
            this.DefaultDimension = this.mergeDimension(_salesAgreement.DefaultDimension, this.DefaultDimension);

            this.PaymMode = '';
            this.PaymSpec = '';

            CustPaymModeTable custPaymModeTable = CustPaymModeTable::findByCompany(this.PaymentDataAreaId, salesAgreementHeaderDefault.CustomerMethodOfPayment);

            if (custPaymModeTable.RecId != 0)
            {
                this.PaymMode = salesAgreementHeaderDefault.CustomerMethodOfPayment;

                this.paymModeModified();

                CustPaymModeSpec custPaymModeSpec;

                select firstonly crosscompany RecID from custPaymModeSpec
                    where custPaymModeSpec.PaymMode == salesAgreementHeaderDefault.CustomerMethodOfPayment
                       && custPaymModeSpec.Specification == salesAgreementHeaderDefault.CustomerPaymentSpec
                       && custPaymModeSpec.dataAreaId == this.PaymentDataAreaId;

                if (custPaymModeSpec.RecId != 0)
                {
                    this.PaymSpec = salesAgreementHeaderDefault.CustomerPaymentSpec;
                }
            }

            if (salesAgreementHeaderDefault.CustomerInvoiceAccount)
            {
                this.InvoiceAccountNum = salesAgreementHeaderDefault.CustomerInvoiceAccount;
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.DefaultDimension = this.copyDimension(_salesAgreement.DefaultDimension);

                SalesAgreementHeaderExt_RU salesAgreementHeaderExt = SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(_salesAgreement.RecId);

                if (salesAgreementHeaderExt.CustPostingProfile)
                {
                    this.PostingProfile = salesAgreementHeaderExt.CustPostingProfile;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the payment request from a worker.
    /// </summary>
    public void initFromWorker()
    {
        const str blank ='';

        this.InvoiceAccountNum = blank;
        this.AgreementID = blank;
        this.PaymMode = blank;
        this.PaymSpec = blank;

        this.PaymentAccountNum = blank;
        this.RecepientBankAccountId = blank;
        this.PostingProfile = blank;
        this.PaymentCurrency = this.CurrencyCode;
        this.DefaultDimension = this.copyDimension(HcmEmployment::findByWorkerLegalEntity(HcmWorker::findByPersonnelNumber(this.AccountNum).RecId, CompanyInfo::findDataArea(this.SourceDataAreaId).RecId).DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the payment request from legal entities.
    /// </summary>
    public void initLegalEntities()
    {
        if (!this.SourceDataAreaId)
        {
            this.SourceDataAreaId = curext();
        }

        if (!this.PaymentDataAreaId)
        {
            this.PaymentDataAreaId = CFMParameters::getCentralizedPaymentCompanyInfo(this.SourceDataAreaId).DataArea;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the payment request from a payment priority.
    /// </summary>
	public void initPaymentPriority()
    {
        container conPriorityRecIds;

        if (this.PaymentRequestType)
        {
            CFMPaymentRequestType paymentRequestType = CFMPaymentRequestType::find(this.PaymentRequestType);

            if (paymentRequestType.PaymentPriority)
            {
                conPriorityRecIds += paymentRequestType.PaymentPriority;
            }
        }

        CFMPaymentPriorityRecId paymentPriorityAccountRecId = CFMPaymentPriority::getPaymentPriorityForAccount(this.SourceDataAreaId, this.AccountType, this.AccountNum);

        if (paymentPriorityAccountRecId)
        {
            conPriorityRecIds += paymentPriorityAccountRecId;
        }

        this.PaymentPriority = CFMPaymentPriority::findHighestPriority(conPriorityRecIds);

        if (this.PaymentPriority == 0)
        {
            this.PaymentPriority = CFMPaymentPriority::getPaymentPriorityDefault();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentRequestInitiator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a payment request initiator.
    /// </summary>
    public void initPaymentRequestInitiator()
    {
		#ISOCountryRegionCodes

        if (!this.Initiator &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            (this.SourceType == CFMPaymentRequestSourceType::VendInvoice ||
             this.SourceType == CFMPaymentRequestSourceType::PlannedPayment))
        {
            PurchAgreementHeader purchAgreementHeader = PurchAgreementHeader::findAgreementId(this.AgreementID);
            PurchAgreementHeaderExt_RU purchAgreementHeaderExt_RU = PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(purchAgreementHeader.RecId);
            this.Initiator  = purchAgreementHeaderExt_RU.WorkerPurchResponsible;
        }

        if (!this.Initiator)
        {
            this.Initiator = this.getInitiatorBySourceType();
        }

        if (!this.Initiator)
        {
            this.Initiator = HcmWorker::userId2Worker(curUserId());
        }

        if (!this.Initiator)
        {
            throw error("@SYS335749");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitiatorBySourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a payment request initiator.
    /// </summary>
    /// <returns>
    ///  The <c>HcmWorkerRecId</c> value that is associated with the user ID or <c>PurchTable</c> Requester
    /// </returns>
    protected anytype getInitiatorBySourceType()
    {
        switch (this.SourceType)
        {
            case CFMPaymentRequestSourceType::PlannedPayment:
                PurchTable purchTable = PurchTable::findRecId(this.HeaderRefRecId);
                return purchTable.Requester ? purchTable.Requester : HcmWorker::userId2Worker(purchTable.createdBy);

            case CFMPaymentRequestSourceType::VendInvoice:
                VendTrans vendTrans = VendTrans::find(this.HeaderRefRecId);
                VendInvoiceJour vendInvoiceJour = vendTrans.vendInvoiceJour();
                return HcmWorker::userId2Worker(vendInvoiceJour.createdBy);

            case CFMPaymentRequestSourceType::CustInvoice:
                CustTrans custTrans = CustTrans::find(this.HeaderRefRecId);
                CustInvoiceJour custInvoiceJour = custTrans.custInvoiceJour_RU();
                return HcmWorker::userId2Worker(custInvoiceJour.createdBy);
            default : 
                return HcmWorker::userId2Worker(curUserId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.initLegalEntities();

        if (!this.CurrencyCode)
        {
            this.CurrencyCode = Ledger::findByLegalEntity(this.companyInfo(this.SourceDataAreaId).RecId).AccountingCurrency;
        }

        if (!this.PaymentCurrency)
        {
            this.PaymentCurrency = this.CurrencyCode;
        }

        this.initPaymentRequestInitiator();
        this.initWorkflowStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkflowStatus</Name>
				<Source><![CDATA[
    public void initWorkflowStatus()
    {
        if (this.getWorkflowVersionTable().RecId != 0)
        {
            this.WorkflowStatus = CFMPaymentRequestWorkflowStatus::NotSubmitted;
        }
        else
        {
            this.WorkflowStatus = CFMPaymentRequestWorkflowStatus::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.initLegalEntities();

        if (!this.isTmp() && !this.PaymentRequestId)
        {
            this.PaymentRequestId = NumberSeq::newGetNum(CFMParameters::numRefPaymentRequestId()).num();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountNumModified</Name>
				<Source><![CDATA[
    public void invoiceAccountNumModified()
    {
        this.AgreementID = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check is account active.
    /// </summary>
    /// <returns>If account is active return true; else return false/</returns>
    public boolean isAccountActive()
    {
        boolean ret;

        switch (this.AccountType)
        {
            case CFMAccountType::Worker:
                HCMEmployment hcmEmployment = HcmEmployment::findByWorkerLegalEntity(HcmWorker::findByPersonnelNumber(this.AccountNum).RecId, CompanyInfo::findDataArea(this.SourceDataAreaId).RecId);
                ret = hcmEmployment.RecId != 0;
                break;

            case CFMAccountType::Cust:
                CustTable custTable = CustTable::find(this.AccountNum);
                ret = custTable.Blocked != CustVendorBlocked::Payment && custTable.Blocked != CustVendorBlocked::All;
                break;

            case CFMAccountType::Vend:
                VendTable vendTable = VendTable::find(this.AccountNum);
                ret = vendTable.Blocked != CustVendorBlocked::Payment && vendTable.Blocked != CustVendorBlocked::All;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMethodOfPaymentRu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check is Method payment for Russia.
    /// </summary>
    /// <returns>If the method payment is for Russia return true; else return false/</returns>
    public boolean isMethodOfPaymentRu()
    {
        boolean ret;

        if (this.PaymentDataAreaId && this.PaymMode)
        {
            changeCompany(this.PaymentDataAreaId)
            {
                switch (this.AccountType)
                {
                    case CFMAccountType::Vend:
                        VendPaymModeTable vendPaymMode = VendPaymModeTable::find(this.PaymMode);

                        if (vendPaymMode.ClassId == classnum(VendOutPaym_MST_RU))
                        {
                            ret = true;
                        }
                        break;

                    case CFMAccountType::Cust:
                        CustPaymModeTable custPaymMode = CustPaymModeTable::find(this.PaymMode);

                        if (custPaymMode.ClassId == classnum(CustOutPaym_MST_RU))
                        {
                            ret = true;
                        }
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkFlowResubmitRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether payment request workflow should be resubmitted.
    /// </summary>
    /// <param name="_amountAdjustment">
    /// The amount of payment request amount to pay adjustment.
    /// </param>
    /// <returns>
    /// True if resubmit is required; otherwise False.
    /// </returns>
    public boolean isWorkFlowResubmitRequired(AmountCur _amountAdjustment)
    {
        CFMParameters cfmParameters = CFMParameters::findInCentralizedPaymentsCompany();

        return (this.WorkflowStatus == CFMPaymentRequestWorkflowStatus::Submitted || this.WorkflowStatus == CFMPaymentRequestWorkflowStatus::Approved) &&
               (cfmParameters.PRReaproveAmountChange == CFMPaymentRequestReapproveAmountChange::Always ||
               (_amountAdjustment > 0 && cfmParameters.PRReaproveAmountChange == CFMPaymentRequestReapproveAmountChange::Increased));
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check exist a payment request line for the payment request.
    /// </summary>
    /// <returns>If payment request line for the payment request exist return true; else return false.</returns>
	public boolean linesExist()
    {
        return (select firstonly RecId from cfmPaymentRequestLine
                    where cfmPaymentRequestLine.PaymentRequestTable == this.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge DimensionDefault.
    /// </summary>
    /// <param name = "_primaryDefaultDimension">Primary default dimension for merge.</param>
    /// <param name = "_secondaryDefaultDimension">Secondary default dimension for merge.</param>
    /// <param name = "_dimensionMerge">The class for merge of default dimensions.</param>
    /// <returns>return merge result</returns>
	public DimensionDefault mergeDimension(DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo(this.SourceDataAreaId).RecId))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CFMPaymentRequestTable, AccountType):
                this.accountTypeModified();
                break;

            case fieldNum(CFMPaymentRequestTable, AccountNum):
                this.accountNumModified();
                break;

            case fieldNum(CFMPaymentRequestTable, InvoiceAccountNum):
                this.invoiceAccountNumModified();
                break;

            case fieldNum(CFMPaymentRequestTable, AgreementID):
                this.agreementIdModified();
                break;

            case fieldNum(CFMPaymentRequestTable, PaymMode):
                this.paymModeModified();
                break;

            case fieldNum(CFMPaymentRequestTable, PaymentAccountNum):
                this.paymentAccountNumModified();
                break;

            case fieldNum(CFMPaymentRequestTable, PaymentAccountType):
                this.paymentAccountTypeModified();
                break;

            case fieldNum(CFMPaymentRequestTable, PaymentRequestType):
                this.initWorkflowStatus();
                this.initPaymentPriority();
                break;

            case fieldNum(CFMPaymentRequestTable, DueDate):
                this.paymentDueDateModified();
                break;

            case fieldNum(CFMPaymentRequestTable, PaymentDate):
                this.paymentDateModified();
                break;

            case fieldNum(CFMPaymentRequestTable, Prepayment):
                this.prepaymentModified();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountNumModified</Name>
				<Source><![CDATA[
    public void paymentAccountNumModified()
    {
        if (this.PaymentAccountType == CFMPaymentAccountType::Bank)
        {
            this.initFromPaymentBankAccountTable(BankAccountTable::find(this.PaymentAccountNum));
        }
        else if (this.PaymentAccountType == CFMPaymentAccountType::Cash_RU)
        {
            this.PaymentCurrency = RCashTable::find(this.PaymentAccountNum).CurrencyCode;
        }

        if (!this.PaymentCurrency)
        {
            this.PaymentCurrency = this.CurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountType2LedgerAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return ledger journal type by payment account type of the current record.
    /// </summary>
    /// <returns>Return Ledger Journal Type.</returns>
    public LedgerJournalACType paymentAccountType2LedgerAccountType()
    {
        LedgerJournalACType type;

        switch (this.PaymentAccountType)
        {
            case CFMPaymentAccountType::Bank:
                type = LedgerJournalACType::Bank;
                break;

            case CFMPaymentAccountType::Cash_RU:
                type =  LedgerJournalACType::RCash;
                break;

            default:
                type = LedgerJournalACType::Ledger;
        }

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountTypeModified</Name>
				<Source><![CDATA[
    public void paymentAccountTypeModified()
    {
        this.PaymentAccountNum = '';
        this.paymentAccountNumModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentDateModified</Name>
				<Source><![CDATA[
    public void paymentDateModified()
    {
        if (this.Status == CFMPaymentRequestStatus::Scheduled)
        {
            CFMJournalTable journalTable = this.findJournalByDate(CFMJournalType::Plan, this.PaymentDate);

            if (journalTable.RecId == 0)
            {
                this.Status = CFMPaymentRequestStatus::Confirmed;

                CFMJournalTransLog transLog;

                update_recordSet transLog
                    setting OutDated = NoYes::Yes
                    where transLog.SourceHeader == this.RecId
                       && transLog.SourceType == CFMJournalTransSourceType::PaymentRequest
                       && transLog.Outdated == NoYes::No
                        exists join journalTable
                            where journalTable.RecId == transLog.JournalTable
                               && journalTable.JournalType == CFMJournalType::Plan
                               && journalTable.DateFrom <= this.orig().PaymentDate
                               && journalTable.DateTo >= this.orig().PaymentDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentDueDateModified</Name>
				<Source><![CDATA[
    public void paymentDueDateModified()
    {
        this.PaymentDate = this.DueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestTypeDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the directions of payment request type.
    /// </summary>
    /// <returns>
    ///     The direction of request type.
    /// </returns>
    public display CFMCashFlowDirection paymentRequestTypeDirection()
    {
        return CFMPaymentRequestType::find(this.PaymentRequestType).Direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeModified</Name>
				<Source><![CDATA[
    public void paymModeModified()
    {
        switch (this.AccountType)
        {
            case CFMAccountType::Cust:
                this.initFromCustVendPaymModeTable(CustPaymModeTable::find(this.PaymMode));
                break;

            case CFMAccountType::Vend:
                this.initFromCustVendPaymModeTable(VendPaymModeTable::find(this.PaymMode));
                break;
        }

        this.PaymSpec = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get payment mode of the current record.
    /// </summary>
    /// <param name = "_dataAreaId">Payment data area Id.</param>
    /// <returns>Get payment mode</returns>
    public CustVendPaymModeTable paymModeTable(SelectableDataArea _dataAreaId = this.PaymentDataAreaId)
    {
        CustVendPaymModeTable payModeTable;

        if (_dataAreaId)
        {
            changecompany(_dataAreaId)
            {
                if (this.AccountType == CFMAccountType::Vend)
                {
                    payModeTable = VendPaymModeTable::find(this.PaymMode);
                }
                else
                {
                    payModeTable = CustPaymModeTable::find(this.PaymMode);
                }
            }
        }

        return payModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaymentModified</Name>
				<Source><![CDATA[
    public void prepaymentModified()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.AccountType == CFMAccountType::Vend)
            {
                PurchAgreementHeaderExt_RU purchAgreementHeaderExt = PurchAgreementHeaderExt_RU::findByPurchAgreementHeader(PurchAgreementHeader::findAgreementId(this.AgreementID).RecId);

                if (this.Prepayment)
                {
                    if (purchAgreementHeaderExt.VendPrepaymentPostingProfile)
                    {
                        this.PostingProfile = purchAgreementHeaderExt.VendPrepaymentPostingProfile;
                    }
                    else
                    {
                        this.PostingProfile = VendParameters::find().PrepaymentPostingProfile;
                    }
                }

                if (! this.Prepayment || ! this.PostingProfile)
                {
                    if (purchAgreementHeaderExt.VendPostingProfile)
                    {
                        this.PostingProfile = purchAgreementHeaderExt.VendPostingProfile;
                    }
                    else
                    {
                        this.PostingProfile = VendParameters::find().PostingProfile;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpostedJournalExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the payment request is included into any unposted journal.
    /// </summary>
    /// <returns>
    /// True if any unposted journal exists; otherwise, false.
    /// </returns>
    public boolean unpostedJournalExist()
    {
        CFMJournalTable cfmJournalTable;
        CFMJournalTransLog cfmJournalTransLog;

        select firstOnly crossCompany RecId from cfmJournalTable
            where !cfmJournalTable.Posted
            exists join cfmJournalTransLog
                where cfmJournalTransLog.JournalTable == cfmJournalTable.RecId &&
                      cfmJournalTransLog.SourceHeader == this.RecId &&
                      cfmJournalTransLog.SourceType == CFMJournalTransSourceType::PaymentRequest;

        return cfmJournalTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsBegin;

        CFMPaymentRequestTable originalRecord = this.orig();

        super();

        //We need to update source transactions after super() because this code may produce another update() call on this table,
        //and this will result in an update conflict if done before super()
        CFMPaymentRequestUpdateSource::updateSourceUsingOriginalRecord(this, originalRecord);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        ret = ret && CFMPaymentRequestUpdateSource::validateSourceField(this, _fieldIdToCheck);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        CustVendPaymModeTable paymModeTable = this.paymModeTable();
        CFMPaymentRequestTable paymentRequestOrig = this.orig();

        if (paymModeTable.RecId && paymModeTable.FurtherPosting &&
            paymentRequestOrig.PaymentAccountNum != this.PaymentAccountNum &&
            paymentRequestOrig.PaymentAccountType != this.PaymentAccountType)
        {
            ret = checkFailed("@CashFlowManagement:PaymAccTypeAndPaymAccountNotChanged");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CFMPaymentRequestId _paymentRequestId)
    {
        return (select firstonly RecId from cfmPaymentRequestTable
                    where cfmPaymentRequestTable.PaymentRequestId == _paymentRequestId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBankPaymentOrderByPaymentRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if bank payment order exists for related payment request.
    /// </summary>
    /// <param name="_paymentRequestRef">
    /// Payment request for which bank payment order is looked for.
    /// </param>
    /// <returns>
    /// True if bank payment order exists; otherwise, false.
    /// </returns>
    public static boolean existBankPaymentOrderByPaymentRequest(CFMPaymentRequestRef _paymentRequestRef)
    {
        BankPaymentOrderJour_RU bankPaymentOrder;
        CFMPaymentRequestPaymentLink paymentLink;
        LedgerJournalTrans ledgerJournalTrans;

        select firstOnly crossCompany RecId from bankPaymentOrder
            exists join ledgerJournalTrans
                where bankPaymentOrder.JournalTransDate == ledgerJournalTrans.TransDate &&
                      bankPaymentOrder.JournalLineNum == ledgerJournalTrans.LineNum &&
                      bankPaymentOrder.LedgerACType == ledgerJournalTrans.AccountType &&
                      bankPaymentOrder.JournalNum == ledgerJournalTrans.JournalNum &&
                      bankPaymentOrder.Voucher == ledgerJournalTrans.Voucher
                exists join paymentLink
                    where paymentLink.RefTableId == tableNum(LedgerJournalTrans) &&
                          paymentLink.PaymentRequest == _paymentRequestRef &&
                          paymentLink.RefRecId == ledgerJournalTrans.RecId;

        return bankPaymentOrder.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByAgreementId</Name>
				<Source><![CDATA[
    public static boolean existByAgreementId(AgreementId_RU _agreementId)
    {
        CFMPaymentRequestTable paymentRequest;

        select firstOnly RecId from paymentRequest
            where paymentRequest.AgreementId == _agreementId;

        return paymentRequest.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the payment request with a specified header exists.
    /// </summary>
    /// <param name="_sourceType">
    /// The header source type.
    /// </param>
    /// <param name="_headerRecId">
    /// The header record identifier.
    /// </param>
    /// <returns>
    /// true if the payment request exists; otherwise, false.
    /// </returns>
    public static boolean existByHeader(CFMPaymentRequestSourceType _sourceType, RefRecId _headerRecId)
    {
        return (select firstonly RecId from CFMPaymentRequestTable
                    where CFMPaymentRequestTable.SourceType     == _sourceType &&
                          CFMPaymentRequestTable.HeaderRefRecId == _headerRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the payment request with a specified source exists.
    /// </summary>
    /// <param name="_sourceType">
    /// The source type.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record identifier.
    /// </param>
    /// <returns>
    /// true if the payment request exists; otherwise, false.
    /// </returns>
    public static boolean existBySource(CFMPaymentRequestSourceType _sourceType, RefRecId _sourceRecId)
    {
        return (select firstonly RecId from CFMPaymentRequestTable
                    where CFMPaymentRequestTable.SourceType == _sourceType &&
                          CFMPaymentRequestTable.SourceRefRecId == _sourceRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the payment request with a specified source.
    /// </summary>
    /// <param name="_sourceType">
    /// The source type.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record identifier.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>CFMPaymentRequestTable</c> record.
    /// </returns>
    public static CFMPaymentRequestTable findBySource(CFMPaymentRequestSourceType _sourceType, RefRecId _sourceRecId, boolean _forUpdate = false)
    {
        CFMPaymentRequestTable paymentRequestTable;

        if (_sourceRecId)
        {
            paymentRequestTable.selectForUpdate(_forupdate);

            select firstonly paymentRequestTable
                where paymentRequestTable.SourceType == _sourceType &&
                      paymentRequestTable.SourceRefRecId == _sourceRecId;
        }

        return paymentRequestTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymentRequestOnCustVendTransOpen</Name>
				<Source><![CDATA[
	/// <summary>
    /// Find a payment Request by a customer or vendor open transaction.
    /// </summary>
    /// <param name = "_custVendTransOpen">A customer or vendor open transaction.</param>
    /// <returns></returns>
    public static CFMPaymentRequestTable findPaymentRequestOnCustVendTransOpen(CustVendTransOpen _custVendTransOpen)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(CFMPaymentRequestTable));
        CFMPRViewQueryFilter::filterQuery(_custVendTransOpen, query);
        qbds.firstOnly(true);

        QueryRun qr = new QueryRun(query);
        qr.next();
        CFMPaymentRequestTable paymentRequest = qr.get(tableNum(CFMPaymentRequestTable));

        return paymentRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecID</Name>
				<Source><![CDATA[
    public static CFMPaymentRequestTable findRecID(RefRecId _paymentRequestRecId, boolean _forupdate = false)
    {
        CFMPaymentRequestTable paymentRequestTable;

        if (_paymentRequestRecId)
        {
            paymentRequestTable.selectForUpdate(_forupdate);

            select paymentRequestTable 
                where paymentRequestTable.RecId == _paymentRequestRecId;
        }

        return paymentRequestTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllowedToIncludeToPaymentJournal</Name>
				<Source><![CDATA[
    public static boolean isAllowedToIncludeToPaymentJournal(CFMPaymentRequestRef _paymentRequestRecId)
    {
        CFMPaymentRequestTable paymentRequest;
        CFMJournalTransLog transLog;
        CFMJournalTable journalTable;
        CFMPaymentRequestPaymentLink paymentLink;

        select firstonly RecId from paymentRequest
            where paymentRequest.RecId == _paymentRequestRecId
               && paymentRequest.Status == CFMPaymentRequestStatus::Accepted
            join RecId from transLog
                where transLog.SourceType == CFMJournalTransSourceType::PaymentRequest
                   && transLog.SourceHeader == paymentRequest.RecId
                    exists join journalTable
                        where journalTable.RecId == transLog.JournalTable
                           && journalTable.Posted == NoYes::Yes
                           && journalTable.JournalType == CFMJournalType::Fact
            notexists join paymentLink
                where paymentLink.PaymentRequest == paymentRequest.RecId;

        return paymentRequest.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPurchSalesAgreementId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup Purch or Sales Agreement form.
    /// </summary>
    /// <param name = "_formControl">Control for lookup.</param>
    /// <param name = "_paymentRequestTable">Payment request.</param>
    static public void lookupPurchSalesAgreementId(FormStringControl _formControl, CFMPaymentRequestTable _paymentRequestTable)
    {
        #ISOCountryRegionCodes

        SysTableLookup sysTableLookup;
        Query query = new Query();
        QueryBuildDataSource qbdsSalesPurchAgreement, qbds;

        switch (_paymentRequestTable.AccountType)
        {
            case CFMAccountType::Cust:
                sysTableLookup = SysTableLookup::newParameters(tableNum(SalesAgreementHeader), _formControl);
                qbdsSalesPurchAgreement = query.addDataSource(tableNum(SalesAgreementHeader));
                qbdsSalesPurchAgreement.addRange(fieldNum(SalesAgreementHeader, CustAccount)).value(queryValue(_paymentRequestTable.AccountNum));
                qbdsSalesPurchAgreement.addRange(fieldNum(SalesAgreementHeader, CustomerDataAreaId)).value(queryValue(_paymentRequestTable.SourceDataAreaId));

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    qbds = qbdsSalesPurchAgreement.addDataSource(tableNum(SalesAgreementHeaderDefault));
                    qbds.relations(true);
                    qbds.addRange(fieldNum(SalesAgreementHeaderDefault, CustomerInvoiceAccount)).value(_paymentRequestTable.InvoiceAccountNum);
                    qbds.joinMode(JoinMode::ExistsJoin);

                    qbds = qbds.addDataSource(tableNum(SalesAgreementHeaderExt_RU));
                    qbds.relations(true);
                    qbds.joinMode(JoinMode::ExistsJoin);
                }

                sysTableLookup.addLookupfield(fieldNum(SalesAgreementHeader, SalesNumberSequence));
                sysTableLookup.addLookupfield(fieldNum(SalesAgreementHeader, CustAccount));
                break;

            case CFMAccountType::Vend:
                sysTableLookup = SysTableLookup::newParameters(tableNum(PurchAgreementHeader), _formControl);
                qbdsSalesPurchAgreement = query.addDataSource(tableNum(PurchAgreementHeader));
                qbdsSalesPurchAgreement.addRange(fieldNum(PurchAgreementHeader, VendAccount)).value(queryValue(_paymentRequestTable.AccountNum));
                qbdsSalesPurchAgreement.addRange(fieldNum(PurchAgreementHeader, VendorDataAreaId)).value(queryValue(_paymentRequestTable.SourceDataAreaId));

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    qbds = qbdsSalesPurchAgreement.addDataSource(tableNum(PurchAgreementHeaderDefault));
                    qbds.relations(true);
                    qbds.addRange(fieldNum(PurchAgreementHeaderDefault, VendorInvoiceAccount)).value(_paymentRequestTable.InvoiceAccountNum);
                    qbds.joinMode(JoinMode::ExistsJoin);

                    qbds = qbds.addDataSource(tableNum(PurchAgreementHeaderExt_RU));
                    qbds.relations(true);
                    qbds.joinMode(JoinMode::ExistsJoin);
                }

                sysTableLookup.addLookupfield(fieldNum(PurchAgreementHeader, PurchNumberSequence));
                sysTableLookup.addLookupfield(fieldNum(PurchAgreementHeader, VendAccount));
                break;
        }

        qbdsSalesPurchAgreement.addRange(fieldNum(AgreementHeader, AgreementState)).value(queryValue(AgreementState::Effective));
        qbdsSalesPurchAgreement.addRange(fieldNum(AgreementHeader, IsDeleted)).value(queryValue(NoYes::No));

        qbds = qbdsSalesPurchAgreement.addDataSource(tableNum(CompanyInfo));
        qbds.relations(true);
        qbds.addRange(fieldNum(CompanyInfo, DataArea)).value(queryValue(_paymentRequestTable.SourceDataAreaId));
        qbds.joinMode(JoinMode::ExistsJoin);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHoldUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// set onHold for the record value.
    /// </summary>
    /// <param name = "_paymentRequestRecId">Record identifier.</param>
    /// <param name = "_newOnHoldState">New hold state.</param>
    /// <param name = "_reason">Reason.</param>
    public static void  onHoldUpdate(RefRecId _paymentRequestRecId, NoYesId _newOnHoldState, ReasonCode _reason)
    {
        if (_paymentRequestRecId)
        {
            ttsbegin;
            CFMPaymentRequestTable paymentRequestTable = CFMPaymentRequestTable::findRecID(_paymentRequestRecId, true);

            if (paymentRequestTable)
            {
                if (paymentRequestTable.OnHold == NoYes::Yes && _newOnHoldState == NoYes::No)
                {
                    paymentRequestTable.OnHold = NoYes::No;
                    paymentRequestTable.DeblockingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    paymentRequestTable.OnHoldReasonCode = '';
                    paymentRequestTable.OnHoldInitiator = 0;
                    paymentRequestTable.update();
                }
                else if (paymentRequestTable.OnHold == NoYes::No && _newOnHoldState == NoYes::Yes)
                {
                    paymentRequestTable.OnHold = NoYes::Yes;
                    paymentRequestTable.DeblockingDate = dateNull();
                    paymentRequestTable.OnHoldReasonCode = _reason;
                    paymentRequestTable.OnHoldInitiator = HcmWorker::findByPerson(DirPersonUser::find(curUserId()).PersonParty).RecId;
                    paymentRequestTable.update();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestCancellation</Name>
				<Source><![CDATA[
    public static void paymentRequestCancellation(container _paymentRecIds)
    {
        if (conLen(_paymentRecIds) == 0)
        {
            return;
        }

        ttsbegin;
        for (int i = 1; i<= conLen(_paymentRecIds); ++i)
        {
            RefRecId refRecId = conPeek(_paymentRecIds, i);
            CFMPaymentRequestTable paymentRequestTable = CFMPaymentRequestTable::findRecID(refRecId, true);
            CFMPaymentRequestState paymentRequestState = CFMPaymentRequestState::construct(paymentRequestTable, paymentRequestTable.Status);

            if (paymentRequestState.validateOperation(CFMPaymentRequestStatusOperation::Cancellation))
            {
                paymentRequestTable.Status = paymentRequestState.getNext(CFMPaymentRequestStatusOperation::Cancellation).paymentRequestStatus();
                paymentRequestTable.SourceRefRecId = 0;
                CFMPaymentRequestWorkflowManager::cancelWorkflow(paymentRequestTable);
                paymentRequestTable.update();
            }
            else
            {
                checkFailed(paymentRequestState.getValidationResultTxt());
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestCopyFieldsClear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears new extension fields to the default value while payment request copying.
    /// </summary>
    /// <param name = "_paymentRequestTableDest"> Source RequestTable.</param>
    /// <param name = "_dueDate">Payment date for new payment request.</param>
    /// <returns>Returns CFMPaymentRequestTable cursor</returns>
    public static CFMPaymentRequestTable paymentRequestCopyFieldsClear(CFMPaymentRequestTable _paymentRequestTableDest , DueDate _dueDate)
    {
        _paymentRequestTableDest.PaymentRequestId = NumberSeq::newGetNum(CFMParameters::numRefPaymentRequestId()).num();
        _paymentRequestTableDest.DueDate = _dueDate;
        _paymentRequestTableDest.Status = CFMPaymentRequestStatus::Opened;
        _paymentRequestTableDest.initWorkflowStatus();
        _paymentRequestTableDest.PaymentDate = _dueDate;
        _paymentRequestTableDest.ApprovedBy = 0;
        _paymentRequestTableDest.ApprovedDate = dateNull();
        _paymentRequestTableDest.CompletedDate = dateNull();
        _paymentRequestTableDest.PaymentDocumentNum = '';
        _paymentRequestTableDest.OnHold = NoYes::No;
        _paymentRequestTableDest.OnHoldInitiator = 0;
        _paymentRequestTableDest.OnHoldReasonCode = '';
        _paymentRequestTableDest.Outdated = NoYes::No;
        _paymentRequestTableDest.SourceRefRecId = 0;
        _paymentRequestTableDest.HeaderRefRecId = 0;
        _paymentRequestTableDest.SourceType = CFMPaymentRequestSourceType::Manual; 

        return _paymentRequestTableDest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentRequestCopy</Name>
				<Source><![CDATA[
	/// <summary>
    /// Make new payment request from a source payment request.
    /// </summary>
    /// <param name = "_paymentRequestSourceRef">Source payment request identifier.</param>
    /// <param name = "_dueDate">Payment date for new payment request.</param>
    /// <returns></returns>
    static public CFMPaymentRequestId paymentRequestCopy(RefRecId _paymentRequestSourceRef, DueDate _dueDate)
    {
        CFMPaymentRequestTable paymentRequestTableDest;
        Map paymentRequestLinesMap = new Map(Types::Int64, Types::Int64);

        CFMPaymentRequestTable paymentRequestTableSource = CFMPaymentRequestTable::findRecID(_paymentRequestSourceRef);
        if (paymentRequestTableSource)
        {
            ttsbegin;
            paymentRequestTableDest.clear();
            paymentRequestTableDest.data(paymentRequestTableSource);
            paymentRequestTableDest = CFMPaymentRequestTable::paymentRequestCopyFieldsClear(paymentRequestTableDest, _dueDate);
            paymentRequestTableDest.insert();

            CFMPaymentRequestLine paymentRequestLineSource;
            while select paymentRequestLineSource
                where paymentRequestLineSource.PaymentRequestTable == paymentRequestTableSource.RecId
            {
                CFMPaymentRequestLine paymentRequestLineDest;
                paymentRequestLineDest.clear();
                paymentRequestLineDest.data(paymentRequestLineSource);
                paymentRequestLineDest.BalanceAmountCur = paymentRequestLineDest.AmountCur;
                paymentRequestLineDest.PaymentRequestTable = paymentRequestTableDest.RecId;
                paymentRequestLineDest.insert();

                paymentRequestLinesMap.insert(paymentRequestLineSource.RecId, paymentRequestLineDest.RecId);
            }

            int dueDateDelta = _dueDate - paymentRequestTableSource.DueDate;

            CFMPaymentRequestCashDisc cashDiscSource;
            while select cashDiscSource
                where cashDiscSource.PaymentRequestTable == paymentRequestTableSource.RecId
            {
                CFMPaymentRequestCashDisc cashDiscDest;
                cashDiscDest.clear();
                cashDiscDest.data(cashDiscSource);
                cashDiscDest.PaymentRequestTable = paymentRequestTableDest.RecId;
                cashDiscDest.CashDiscdate = cashDiscSource.CashDiscdate + dueDateDelta;
                cashDiscDest.insert();

                CFMPaymentRequestLineCashDisc cashDiscLineSource;
                while select CashDiscAmount, cfmPaymentRequestLine from cashDiscLineSource
                    where cashDiscLineSource.cfmPaymentRequestCashDisc == cashDiscSource.RecId
                {
                    CFMPaymentRequestLineCashDisc cashDiscLineDest;

                    cashDiscLineDest.clear();
                    cashDiscLineDest.CashDiscAmount = cashDiscLineSource.CashDiscAmount;
                    cashDiscLineDest.cfmPaymentRequestLine = paymentRequestLinesMap.lookup(cashDiscLineSource.cfmPaymentRequestLine);
                    cashDiscLineDest.cfmPaymentRequestCashDisc = cashDiscDest.RecId;
                    cashDiscLineDest.insert();
                }
            }

            ttscommit;
        }

        return paymentRequestTableDest.PaymentRequestId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutdatedBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>Outdated</c> field value for payment request with specified source.
    /// </summary>
    /// <param name="_sourceType">
    /// The source type.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record identifier.
    /// </param>
    /// <param name="_clearSourceReference">
    /// Clear the payment request reference to source.
    /// </param>
    public static void setOutdatedBySource(CFMPaymentRequestSourceType _sourceType, RefRecId _sourceRecId, boolean _clearSourceReference = false)
    {
        ttsBegin;

        CFMPaymentRequestTable paymentRequestTable = CFMPaymentRequestTable::findBySource(_sourceType, _sourceRecId, true);

        if (paymentRequestTable &&(paymentRequestTable.Status == CFMPaymentRequestStatus::Confirmed || paymentRequestTable.Status == CFMPaymentRequestStatus::Scheduled))
        {
            paymentRequestTable.Outdated = true;
            paymentRequestTable.SourceRefRecId = _clearSourceReference ? 0 : paymentRequestTable.SourceRefRecId;
            paymentRequestTable.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeForCompany</Name>
				<Source><![CDATA[
	/// <summary>
    /// Set range for the query by a company.
    /// </summary>
    /// <param name = "_query">The payment requests query for filter.</param>
    /// <param name = "_dataAreaId">The filter company.</param>
    public static void setRangeForCompany(Query _query, DataAreaId _dataAreaId = curext())
    {
        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(CFMPaymentRequestTable));

        if (qbds)
        {
            qbds.clearRange(fieldNum(CFMPaymentRequestTable, PaymentDataAreaId));
            qbds.clearRange(fieldNum(CFMPaymentRequestTable, SourceDataAreaId));

            QueryBuildRange qbr;
            DataAreaId centralizedPaymentDataAreaId = CFMParameters::getCentralizedPaymentCompanyInfo(_dataAreaId).DataArea;

            if (centralizedPaymentDataAreaId == _dataAreaId)
            {
                qbr = qbds.addRange(fieldNum(CFMPaymentRequestTable, PaymentDataAreaId));
            }
            else
            {
                qbr = qbds.addRange(fieldNum(CFMPaymentRequestTable, SourceDataAreaId));
            }

            qbr.value(queryValue(_dataAreaId));
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    public static void setWorkflowStatus(RefRecId _paymentRequestRecId, CFMPaymentRequestWorkflowStatus _workflowStatus)
    {
        ttsbegin;

        CFMPaymentRequestTable paymentRequest = CFMPaymentRequestTable::findRecID(_paymentRequestRecId, true);

        paymentRequest.WorkflowStatus = _workflowStatus;
        paymentRequest.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CFMPaymentRequestTable find(CFMPaymentRequestId _paymentRequestId, boolean _forupdate = false)
    {
        CFMPaymentRequestTable paymentRequestTable;

        if (_paymentRequestId)
        {
            paymentRequestTable.selectForUpdate(_forupdate);

            select paymentRequestTable
                where paymentRequestTable.PaymentRequestId == _paymentRequestId;
        }

        return paymentRequestTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentRequestSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return last cash flow management payment request related the sales order by payment date.
    /// </summary>
    /// <returns>Id of cash flow management payment request.</returns>
    public static CFMPaymentRequestId  lastPaymentRequestSale(SalesId _salesId)
    {
        CFMPaymentRequestId ret;

        if (CFMParameters::isPaymentRequestsEnabled())
        {
            CFMPaymentRequestTable paymentRequestTable;
            CustTrans custTrans;
            CustInvoiceJour custInvoice;
            CustInvoiceSalesLink custInvoiceSalesLink;

            select firstonly PaymentRequestId from paymentRequestTable
                order by PaymentDate desc
                where paymentRequestTable.SourceType == CFMPaymentRequestSourceType::CustInvoice
                    exists join custTrans
                        where custTrans.RecId == paymentRequestTable.HeaderRefRecId
                        exists join custInvoice
                            where custInvoice.InvoiceId == custTrans.Invoice
                               && custInvoice.LedgerVoucher == custTrans.Voucher
                               && custInvoice.InvoiceDate == custTrans.TransDate
                               && custInvoice.InvoiceAccount == custTrans.AccountNum
                            exists join custInvoiceSalesLink
                                where custInvoice.SalesId == custInvoiceSalesLink.SalesId
                                   && custInvoice.InvoiceId == custInvoiceSalesLink.InvoiceId
                                   && custInvoice.InvoiceDate == custInvoiceSalesLink.InvoiceDate
                                   && custInvoiceSalesLink.OrigSalesId == _salesId;

            ret = paymentRequestTable.PaymentRequestId;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentRequestPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return last cash flow management payment request related the purch order by payment date.
    /// </summary>
    /// <returns>Id of cash flow management payment request.</returns>
    public static CFMPaymentRequestId lastPaymentRequestPurch(PurchId _purchId)
    {
        CFMPaymentRequestId ret;

        if (CFMParameters::isPaymentRequestsEnabled())
        {
            CFMPaymentRequestTable paymentRequestTable;
            VendTrans vendTrans;
            VendInvoiceJour vendInvoice;
            VendInvoicePurchLink vendInvoicePurchLink;

            select firstonly PaymentRequestId from paymentRequestTable
                order by PaymentDate desc
                where paymentRequestTable.SourceType == CFMPaymentRequestSourceType::VendInvoice
                exists join vendTrans
                    where vendTrans.RecId == paymentRequestTable.HeaderRefRecId
                    exists join vendInvoice
                        where vendInvoice.InvoiceId == vendTrans.Invoice
                           && vendInvoice.LedgerVoucher == vendTrans.Voucher
                           && vendInvoice.InvoiceDate == vendTrans.TransDate
                           && vendInvoice.InvoiceAccount == vendTrans.AccountNum
                        exists join vendInvoicePurchLink
                            where vendInvoice.PurchId == vendInvoicePurchLink.PurchId
                               && vendInvoice.InvoiceId == vendInvoicePurchLink.InvoiceId
                               && vendInvoice.InternalInvoiceId == vendInvoicePurchLink.InternalInvoiceId
                               && vendInvoice.InvoiceDate == vendInvoicePurchLink.InvoiceDate
                               && vendInvoicePurchLink.origPurchId == _purchId;

            if (!paymentRequestTable.PaymentRequestId)
            {
                select firstonly PaymentRequestId from paymentRequestTable
                    where paymentRequestTable.HeaderRefRecId == PurchTable::find(_purchId).RecId
                       && paymentRequestTable.SourceType == CFMPaymentRequestSourceType::PlannedPayment;
            }

            ret = paymentRequestTable.PaymentRequestId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret && this.Status != CFMPaymentRequestStatus::Opened)
        {
            ret = checkFailed(strFmt("@ApplicationSuite_Localization:PaymentRequestDeleteValidation", this.PaymentRequestId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>impliedDataAreaFieldNameDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionObjectStorageTableReferenceProcessor), delegatestr(DimensionObjectStorageTableReferenceProcessor, impliedDataAreaFieldNameDelegate))]
    static void impliedDataAreaFieldNameDelegate(TableId _tableId, FieldId _fieldId, EventHandlerResult _result)
    {
        if (_tableId == tableNum(CFMPaymentRequestTable))
        {
            switch(_fieldId)
            {
                case(fieldNum(CFMPaymentRequestTable, DefaultDimension)):
                    _result.result(fieldStr(CFMPaymentRequestTable, SourceDataAreaId));
                break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CFMPaymentRequests</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@CashFlowManagement:PaymentRequestTableDevDescription</DeveloperDocumentation>
	<FormRef>CFMPaymentRequest</FormRef>
	<Label>@CashFlowManagement:PaymentRequests</Label>
	<ListPageRef>CFMPaymentRequestListPage</ListPageRef>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>PaymentRequestId</TitleField1>
	<TitleField2>SourceRefRecId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PaymentRequestIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>RCashFlowManagement</Modules>
	<ReplacementKey>PaymentRequestIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentRequestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentRequestId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@CashFlowManagement:PaymentRequestAmount</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>amountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>amountCurBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approval</Name>
			<Label>@CashFlowManagement:ApprovalInformation</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApprovedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Comment</Name>
			<Label>@SYS53151</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Completion</Name>
			<Label>@CashFlowManagement:Closing</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompletedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Creation</Name>
			<Label>@CashFlowManagement:CreationInformation</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Initiator</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultDimension</Name>
			<Label>@SYS35094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS40182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Hold</Name>
			<Label>@SYS103075</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OnHold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnHoldInitiator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnHoldReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeblockingDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InitialPaymentConditions</Name>
			<Label>@CashFlowManagement:PaymentDetails</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InitialPaymentRequest</Name>
			<Label>@CashFlowManagement:PaymentRequest</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentRequestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentRequestType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Initiator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LegalEntities</Name>
			<Label>@SYS303247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymenRequest</Name>
			<Label>@CashFlowManagement:PaymentRequest</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentRequestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentRequestType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentAccount</Name>
			<Label>@SYS21686</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentAccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentConditions</Name>
			<Label>@CashFlowManagement:PaymentDetails</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Prepayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentDocumentNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentRequest</Name>
			<Label>@CashFlowManagement:PaymentRequest</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentRequestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentRequestType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymRequestDetails</Name>
			<Label>@CashFlowManagement:PaymentRequestDetails</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Priority</Name>
			<Label>@CashFlowManagement:PaymentPriority</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchSalesAgreement</Name>
			<Label>@SYS15240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>agreementDocumentTitle</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurposeText</Name>
			<Label>@SYS66149</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankPurposeText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecipientBankAccount</Name>
			<Label>@SYS79534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecepientBankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Source</Name>
			<Label>@SYS11258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS36398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Outdated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CFMAccountNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>CFMAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementID</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@CashFlowManagement:AgreementRegistrationNumber</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ApprovedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@CashFlowManagement:ApprovedRequestPersonIdentification</HelpText>
			<Label>@SYS318917</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ApprovedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ApprovedDate</ExtendedDataType>
			<HelpText>@CashFlowManagement:DateOfPaymRequestApproval</HelpText>
			<Label>@SYS82782</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankPurposeText</Name>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CompletedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@CashFlowManagement:SettlementDateOfPaymRequest</HelpText>
			<Label>@CashFlowManagement:ClosingDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeblockingDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@CashFlowManagement:PaymRequestDateUnblocked</HelpText>
			<Label>@CashFlowManagement:UnblockingDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<ExtendedDataType>DueDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HeaderRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@CashFlowManagement:OriginOfPaymRequest</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Initiator</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CFMPaymentRequestInitiator</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CFMInvoiceAccountNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnHold</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@CashFlowManagement:WhetherOrNotPaymRequestIsOnHold</HelpText>
			<Label>@SYS103075</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OnHoldInitiator</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CFMPaymentRequestUpdateWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OnHoldReasonCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ReasonCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Outdated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@CashFlowManagement:AmountOfReqOriginChangedUpdPaymRequestRequired</HelpText>
			<Label>@CashFlowManagement:Outdated</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentAccountNum</Name>
			<ExtendedDataType>CFMPaymentAccountNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentAccountType</Name>
			<EnumType>CFMPaymentAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentCurrency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<HelpText>@SYS114318</HelpText>
			<Label>@SYS66023</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Label>@CashFlowManagement:TreasuryCompany</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PaymentDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@CashFlowManagement:DateOfPaymRequestClosing</HelpText>
			<Label>@SYS104996</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentDocumentNum</Name>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<HelpText>@CashFlowManagement:IDOfPaymOrderCompletedPaymRequest</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaymentOrder</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaymentPriority</Name>
			<ExtendedDataType>CFMPaymentPriorityRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentRequestId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CFMPaymentRequestId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaymentRequestType</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CFMPaymentRequestTypeRef</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<ExtendedDataType>PostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Prepayment</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@CashFlowManagement:WhetherOrNotPrepayment</HelpText>
			<Label>@SYS183647</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecepientBankAccountId</Name>
			<ExtendedDataType>BankAccountID</ExtendedDataType>
			<HelpText>@CashFlowManagement:BankAccountOfPaymentRecipient</HelpText>
			<Label>@CashFlowManagement:AccountOfRecipient</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Label>@CashFlowManagement:PaymRequestCompany</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@CashFlowManagement:SourceOfPaymentRequest</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>CFMPaymentRequestSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>CFMPaymentRequestStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>CFMPaymentRequestWorkflowStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PaymentRequestIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymentRequestId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymentDateStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymentDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DueDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkflowStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDateStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DueDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkflowStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceRefRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HeaderRefRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HeaderRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>Approver</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApprovedBy</Name>
					<Field>ApprovedBy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PaymentAccountType</Name>
					<Field>PaymentAccountType</Field>
					<ValueStr>CFMPaymentAccountType::Bank</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentDataAreaId</Name>
					<Field>PaymentDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentAccountNum</Name>
					<Field>PaymentAccountNum</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecepientBankAccountId</Name>
					<Field>RecepientBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccountNum</Name>
					<Field>InvoiceAccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Customer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentDataAreaId</Name>
					<Field>PaymentDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentDataAreaId</Name>
					<Field>PaymentDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeaderRefRecId</Name>
					<Field>HeaderRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceType</Name>
					<Field>SourceType</Field>
					<ValueStr>CFMPaymentRequestSourceType::CustInvoice</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRefRecId</Name>
					<Field>SourceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EmployeeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EmployeeTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>AdvHolder</Name>
					<RelatedField>AdvHolder</RelatedField>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Worker</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>EmployeeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Worker</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>PersonnelNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Initiator</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Initiator</Name>
					<Field>Initiator</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentCompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentDataAreaId</Name>
					<Field>PaymentDataAreaId</Field>
					<RelatedField>DataArea</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentCurrency</Name>
					<Field>PaymentCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentOrder</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFMPaymentRequestPaymentOrder</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentOrder</Name>
					<Field>PaymentOrder</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentPriority</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFMPaymentPriority</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentPriority</Name>
					<Field>PaymentPriority</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentRequestTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>CFMPaymentRequestTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentRequestId</Name>
					<Field>PaymentRequestId</Field>
					<RelatedField>PaymentRequestId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentRequestType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CFMPaymentRequestType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentRequestType</Name>
					<Field>PaymentRequestType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementID</Name>
					<Field>AgreementID</Field>
					<RelatedField>PurchNumberSequence</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>VendorDataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceType</Name>
					<Field>SourceType</Field>
					<ValueStr>CFMPaymentRequestSourceType::PlannedPayment</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeaderRefRecId</Name>
					<Field>HeaderRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RCash</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RCashTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PaymentAccountType</Name>
					<Field>PaymentAccountType</Field>
					<ValueStr>CFMPaymentAccountType::Cash_RU</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentAccountNum</Name>
					<Field>PaymentAccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OnHoldReasonCode</Name>
					<Field>OnHoldReasonCode</Field>
					<RelatedField>Reason</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentDataAreaId</Name>
					<Field>PaymentDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementID</Name>
					<Field>AgreementID</Field>
					<RelatedField>SalesNumberSequence</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>CustomerDataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceCompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>DataArea</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecepientBankAccountId</Name>
					<Field>RecepientBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccountNum</Name>
					<Field>InvoiceAccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Vendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPaymMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentDataAreaId</Name>
					<Field>PaymentDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPaymModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentDataAreaId</Name>
					<Field>PaymentDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>CFMAccountType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDataAreaId</Name>
					<Field>SourceDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HeaderRefRecId</Name>
					<Field>HeaderRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>SourceType</Name>
					<Field>SourceType</Field>
					<ValueStr>CFMPaymentRequestSourceType::VendInvoice</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTransOpen</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRefRecId</Name>
					<Field>SourceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WorkerOnHoldInitiator</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OnHoldInitiator</Name>
					<Field>OnHoldInitiator</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>