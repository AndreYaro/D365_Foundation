<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEProperties_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGEProperties_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>attributeName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEAttributeName_W attributeName()
    {
        return this.AttributeName ? this.AttributeName : this.PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDefaultCell</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Displays the default cell.
    /// </summary>
    /// <returns>
    ///   A default cell string representation.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display LedgerRRGCellCode_RU displayDefaultCell()
    {
        const str   Exclamation	    = '!';
        const str   Quote	        = "'";

        return this.DefaultWorksheet ? Quote + this.DefaultWorksheet + Quote + Exclamation + this.DefaultCell : this.DefaultCell;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAttributeName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGEAttributeName_W editAttributeName(boolean _set, LedgerRRGEAttributeName_W _value)
    {
        if (_set)
        {
            this.AttributeName = _value;
        }

        return this.attributeName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LedgerRRGEPropertyValue_W editValue(boolean _set, LedgerRRGEPropertyValue_W _value)
    {
        if (this.Type == LedgerRRGEPropertyType_W::Value || this.Type == LedgerRRGEPropertyType_W::FileName)
        {
            if (_set)
            {
                this.Value = _value;
            }
        }
        else
        {
            this.Value = this.evalExpression();
        }

        return this.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalExpression</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display LedgerRRGEPropertyExpression_W evalExpression(LedgerRRGEDocuments_W _document = null, LedgerRRGEBufferEval_W _bufferEval = null)
    {
        LedgerRRGEExpressionLines_W     expressionLines;
        LedgerRRGEPropertyExpression_W  expression;
        CompanyInfo                     companyInfo;
        int                             time;
        SysGlobalCache                  cache;
        const int                       INNSize	        = 10;
        const int                       INNFullSize	    = 12;
        const int                       KPPSize	        = 9;
        const int                       SecInHour	    = 3600;
        const int                       SecInMinute	    = 60;
        const int                       Ddmmyyyy	    = 321;
        const int                       Dd	            = 2;
        const int                       Mm	            = 2;
        const int                       Yyyy	        = 4;
        const int                       TimePartSize	= 2;
        const str                       StarChar	    = '*';
        const str                       ZeroChar	    = '0';

        setPrefix(strFmt("@LedgerRRG:LedgerRRG_evaluationValue", this.PropertyId));

        cache = classfactory.globalCache();

        if (cache.isSet(tableStr(LedgerRRGEProperties_W), this.PropertyId))
        {
            throw error("@LedgerRRG:LedgerRRG_RequisiteLoop");
        }

        cache.set(tableStr(LedgerRRGEProperties_W), this.PropertyId, 1);

        try
        {
            switch (this.Type)
            {
                case LedgerRRGEPropertyType_W::Expression:
                    while select expressionLines order by LineNum
                        where expressionLines.LedgerRRGEProperties_W == this.RecId
                    {
                        expression += expressionLines.evalValue(_document, _bufferEval);
                    }
                    break;

                case LedgerRRGEPropertyType_W::FileId:
                    companyInfo = CompanyInfo::find();
                    time        = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
                    expression  = strLFix(subStr(companyInfo.partyINNasOfDate_RU(), 1, INNSize), INNFullSize, StarChar);
                    expression += strLFix(companyInfo.partyKPPasOfDate_RU(), KPPSize, StarChar);
                    expression += date2str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), Ddmmyyyy, Dd, 0, Mm, 0 , Yyyy,DateFlags::None);
                    expression += num2Str0(time div SecInHour, TimePartSize, 0, 0, 0);
                    expression += num2Str0(time mod SecInHour div SecInMinute, TimePartSize, 0, 0, 0);
                    expression += num2Str0(time mod SecInHour mod SecInMinute, TimePartSize, 0, 0, 0);
                    break;

                case LedgerRRGEPropertyType_W::PropertyNumber:
                    expression  = ZeroChar;
                    break;

                default:
                    expression = ComExcelDocument_RU::removeExtremeQuotas(this.Value);
            }

            expression = LedgerRRGEProperties_W::replaceMacroValue(expression, _document, _bufferEval);

            if (this.LedgerRRGERequisiteTypes_W)
            {
                expression = LedgerRRGEProperties_W::updateValueExtendedType(this.LedgerRRGERequisiteTypes_W, expression);
            }
        }
        catch
        {
            cache.remove(tableStr(LedgerRRGEProperties_W), this.PropertyId);
            throw Exception::Error;
        }

        cache.remove(tableStr(LedgerRRGEProperties_W), this.PropertyId);

        return expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static server client public void clearCache()
    {
        classfactory.globalCache().clear(tableStr(LedgerRRGEProperties_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearClientCache</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static client public void clearClientCache()
    {
        LedgerRRGEProperties_W::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearClientServerCache</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public void clearClientServerCache()
    {
        LedgerRRGEProperties_W::clearServerCache();
        LedgerRRGEProperties_W::clearClientCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearServerCache</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static server public void clearServerCache()
    {
        LedgerRRGEProperties_W::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns whether the property with the given ID exist.
    /// </summary>
    /// <param name="_propertyId">
    ///   An ID of the property.
    /// </param>
    /// <returns>
    ///   True, if exist; otherwise - false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existPropertyId(LedgerRRGEPropertyId_W _propertyId)
    {
        return _propertyId && (select ledgerRRGEProperties_W index PropertyIdIdx
            where ledgerRRGEProperties_W.PropertyId == _propertyId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerRRGEProperties_W</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the LedgerRRGEProperties_W record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerRRGEProperties_W</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEProperties_W find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerRRGEProperties_W ledgerRRGEProperties;

        ledgerRRGEProperties.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerRRGEProperties.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerRRGEProperties
            where ledgerRRGEProperties.RecId == _recId;

        return ledgerRRGEProperties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds a property by it's ID.
    /// </summary>
    /// <param name="_propertyId">
    ///   An ID of the property.
    /// </param>
    /// <param name="_update">
    ///   Whether select for update or not.
    /// </param>
    /// <returns>
    ///  A record found.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEProperties_W findByPropertyId(LedgerRRGEPropertyId_W _propertyId, boolean _update = false)
    {
        LedgerRRGEProperties_W properties;

        if (_propertyId)
        {
            properties.selectForUpdate(_update);

            select firstonly properties
                index PropertyIdIdx
                where properties.PropertyId == _propertyId;
        }

        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceMacroValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEPropertyExpression_W replaceMacroValue(LedgerRRGEPropertyExpression_W  _value,
                                                            LedgerRRGEDocuments_W           _document = null,
                                                            LedgerRRGEBufferEval_W          _bufferEval = null)
    {
        LedgerRRGEPropertyExpression_W  retValue;
        LedgerRRGEProperties_W          property;
        LedgerRRGEFormatPeriods_W       formatPeriod;
        int                             pos, prevPos, nextPos, valueLen;
        str 10                          strDate;
        const int                       Ddmmyyyy	= 123;
        const int                       Dd	        = 2;
        const int                       Mm	        = 2;
        const int                       Yyyy	    = 4;

        const str                       SpecialChar	= '%';
        const str                       DTmp	    = 'd';
        const str                       DdTmp	    = 'dd';
        const str                       MTmp	    = 'm';
        const str                       MmTmp	    = 'mm';
        const str                       GTmp	    = 'g';
        const str                       GgTmp	    = 'gg';
        const str                       GggTmp	    = 'ggg';
        const str                       GgggTmp	    = 'gggg';
        const str                       YTmp	    = 'y';
        const str                       YyTmp	    = 'yy';
        const str                       YyyTmp	    = 'yyy';
        const str                       YyyyTmp	    = 'yyyy';
        const str                       GuidTmp	    = 'guid';
        const str                       VerFormatTmp	= 'ВерсФорм';
        const str                       TypeInfTmp	= 'ТипИнф';
        const str                       VerProgTmp	= 'ВерсПрог';
        const str                       CntDocTmp	= 'КолДок';
        const str                       CodeKNDTmp	= 'КНД';

        str strDate()
        {
            if (!strDate)
            {
                strDate = date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Ddmmyyyy, Dd, 0, Mm, 0 , Yyyy,DateFlags::None);
            }

            return strDate;
        }

        LedgerRRGEFormatPeriods_W formatPeriod()
        {
            if (!formatPeriod && _document)
            {
                formatPeriod = _document.template().formatPeriods();
            }

            return formatPeriod;
        }

        str cutDate(str _macro, int _start)
        {
            int macroLen = strLen(_macro);

            return substr(strDate(), _start - macroLen, macroLen);
        }

        int findMacroNextPos(str _macro)
        {
            int propertyNamePos;
            int lastPropertyNamePos;

            if (_macro)
            {
                switch (_macro)
                {
                    case DTmp:
                    case DdTmp:
                        retValue += cutDate(_macro, 3);
                        break;
                    case MTmp:
                    case MmTmp:
                        retValue += cutDate(_macro, 5);
                        break;
                    case GTmp:
                    case YTmp:
                    case GgTmp:
                    case YyTmp:
                    case GggTmp:
                    case YyyTmp:
                    case GgggTmp:
                    case YyyyTmp:
                        retValue += cutDate(_macro, 9);
                        break;
                    case GuidTmp:
                        retValue += strrem(guid2str(newguid()), '{}');
                        break;
                    case VerFormatTmp:
                        retValue += formatPeriod().FormatVersionID;
                        break;
                    case TypeInfTmp:
                        retValue += formatPeriod().FileNamePrefix;
                        break;
                    case CodeKNDTmp:
                        retValue += formatPeriod().CodeKND;
                        break;
                    case VerProgTmp:
                        retValue += ApplicationVersion::buildNo();
                        break;
                    case CntDocTmp:
                        retValue += '';
                        break;
                    default:
                        return 0;
                }

                return nextPos + 1;
            }
            else
            {
                // Double percent (%%) is sign for fixed requisite name
                propertyNamePos     = pos + 2;
                lastPropertyNamePos = strFind(_value, SpecialChar, propertyNamePos, valueLen - pos - 1);
                if (lastPropertyNamePos && lastPropertyNamePos - propertyNamePos)
                {
                    property = LedgerRRGEProperties_W::findByPropertyId(subStr(_value, propertyNamePos, lastPropertyNamePos - propertyNamePos));
                    if (property)
                    {
                        retValue += property.evalExpression(_document, _bufferEval);
                        return lastPropertyNamePos + 1;
                    }
                }
            }

            return 0;
        }

        prevPos     = 1;
        valueLen    = strLen(_value);
        pos         = strFind(_value, SpecialChar, 1, valueLen);
        if (pos)
        {
            while (pos && pos <= valueLen)
            {
                if (prevPos < pos)
                {
                    retValue += subStr(_value, prevPos, pos - prevPos);
                }

                nextPos = strFind(_value, SpecialChar, pos + 1, valueLen - pos);
                if (nextPos)
                {
                    prevPos = findMacroNextPos(subStr(_value, pos + 1, nextPos - pos - 1));

                    if (prevPos)
                    {
                        pos = strFind(_value, SpecialChar, prevPos, valueLen);
                        continue;
                    }
                }
                else
                {
                    nextPos = valueLen + 1;
                }

                prevPos = pos;
                pos     = nextPos;
            }

            if (prevPos && prevPos <= valueLen)
            {
                retValue += subStr(_value, prevPos, valueLen - prevPos + 1);
            }

            return retValue;
        }

        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateValueExtendedType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str updateValueExtendedType(LedgerRRGERequisiteTypeRecId_W _requisiteTypeRecIdId, str _valueStr)
    {
        LedgerRRGERequisiteTypes_W              requisiteType;
        LedgerRRGEPatternValue_W                patternValue;
        System.Text.RegularExpressions.Regex    re;
        System.Text.RegularExpressions.Match    matchIdx;
        InteropPermission                       permission;
        str                                     dateStr;
        str                                     timeStr;
        timeOfDay                               time;
        str                                     res         = _valueStr;
        const str                               Space	    = ' ';

        requisiteType = LedgerRRGERequisiteTypes_W::find(_requisiteTypeRecIdId);
        if (requisiteType)
        {
            if (!requisiteType.AutomaticCreate)
            {
                permission = new InteropPermission(InteropKind::ClrInterop);
                permission.assert();

                while select PatternDesc from patternValue
                    where patternValue.LedgerRRGERequisiteTypes_W == requisiteType.RecId
                {
                    re = new System.Text.RegularExpressions.Regex(patternValue.PatternDesc);

                    matchIdx = re.Match(_valueStr);

                    if (matchIdx.get_Success())
                    {
                        res = matchIdx.get_Value();
                        break;
                    }
                }
            }

            switch (requisiteType.BaseType)
            {
                case LedgerRRGEBaseType_W::date:
                    res = date2str(str2date(res, -1), 321, 2, 3, 2, 3, 4, DateFlags::None);
                    break;

                case LedgerRRGEBaseType_W::dateTime:
                    [dateStr, timeStr] = str2con(res, Space);

                    time = str2time(timeStr);
                    if (time < 0)
                    {
                        time = 0;
                    }

                    res = DateTimeUtil::toStr(DateTimeUtil::newDateTime(str2date(dateStr, -1), time));
                    break;
            }
        }

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@LedgerRRG:LedgerRRG_FixedRequisites</DeveloperDocumentation>
	<Label>@LedgerRRG:LedgerRRG_FixedRequisites</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PropertyId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>PropertyIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>PropertyIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerRRGEExpressionLines_W</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerRRGEExpressionLines_W</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Appearance</Name>
			<Label>@LedgerRRG:LedgerRRG_Appearance</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Alignment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Length</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmptyChar</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PointSignNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Defaults</Name>
			<Label>@SYS80655</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>defaultWorksheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>defaultCell</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editAttributeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerRRGERequisiteTypes_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutputType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerRRGERequisiteTypes_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PropertyValue</Name>
			<Label>@LedgerRRG:LedgerRRGRequisite</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Alignment</Name>
			<ExtendedDataType>LedgerRRGEAlignment_W</ExtendedDataType>
			<EnumType>SysAlignment</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AttributeName</Name>
			<ExtendedDataType>LedgerRRGEAttributeName_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataType</Name>
			<EnumType>LedgerRRGEPropertyDataType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>defaultCell</Name>
			<ExtendedDataType>LedgerRRGCellCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>defaultWorksheet</Name>
			<ExtendedDataType>LedgerRRGEExcelSheet_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmptyChar</Name>
			<ExtendedDataType>LedgerRRGELayoutEmptyChar_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerRRGERequisiteTypes_W</Name>
			<ExtendedDataType>LedgerRRGERequisiteTypeRecId_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Length</Name>
			<ExtendedDataType>LedgerRRGELength_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OutputType</Name>
			<EnumType>LedgerRRGEPropertyOutputType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PointSignNum</Name>
			<ExtendedDataType>LedgerRRGEPointSignNum_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>LedgerRRGEPropertyId_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<EnumType>LedgerRRGEPropertyType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<ExtendedDataType>LedgerRRGEPropertyValue_W</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PropertyIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PropertyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerRRGERequisiteTypes_WIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerRRGERequisiteTypes_W</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerRRGERequisiteTypes_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerRRGERequisiteTypes_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerRRGERequisiteTypes_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerRRGEProperties_W</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerRRGERequisiteTypes_W</Name>
					<Field>LedgerRRGERequisiteTypes_W</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>