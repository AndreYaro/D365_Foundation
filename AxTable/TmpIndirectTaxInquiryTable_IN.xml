<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpIndirectTaxInquiryTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpIndirectTaxInquiryTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccumulatedAmountPerTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total accumulated amount that is based on the tax type.
    /// </summary>
    /// <param name="_tmpTable">
    /// A <c>TmpIndirectTaxInquiryTable_IN</c> record.
    /// </param>
    /// <param name="_taxType">
    /// The specified tax type.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID of the specified field.
    /// </param>
    /// <param name="_fieldName">
    /// The name of the specified field.
    /// </param>
    /// <returns>
    /// The total accumulated amount.
    /// </returns>
    public static AmountMST getAccumulatedAmountPerTaxType(TmpIndirectTaxInquiryTable_IN   _tmpTable,
                                                           TaxType_IN                      _taxType,
                                                           fieldId                         _fieldId,
                                                           FieldName                       _fieldName)
    {
        AmountMST   amount;
        str         separator;

        separator = System.Globalization.CultureInfo::get_CurrentCulture().get_NumberFormat().get_NumberGroupSeparator();

        switch (_fieldName)
        {
            case fieldpname(TaxTrans_IN, InvoiceAmount):
                while select _tmpTable
                    group by Voucher, TaxType, MiscChargeAmount, SourceCurrencyCode, TransDate
                        where _tmpTable.TaxType == _taxType
                {
                    amount += CurrencyExchangeHelper::mstAmount(_tmpTable.InvoiceAmount, _tmpTable.SourceCurrencyCode, _tmpTable.TransDate);
                }
                 break;
            case fieldpname(TaxTrans_IN, MiscChargeAmount):
                while select _tmpTable
                    group by Voucher, TaxType, MiscChargeAmount, SourceCurrencyCode, TransDate
                        where _tmpTable.TaxType == _taxType
                {
                    amount += CurrencyExchangeHelper::mstAmount(_tmpTable.MiscChargeAmount, _tmpTable.SourceCurrencyCode, _tmpTable.TransDate);
                }
                break;
            case fieldpname(TaxTrans_IN, TransactionAmount):
                while select _tmpTable
                    group by Voucher, TaxType, TransactionAmount, SourceCurrencyCode, TransDate
                        where _tmpTable.TaxType == _taxType
                {
                    amount += CurrencyExchangeHelper::mstAmount(_tmpTable.TransactionAmount, _tmpTable.SourceCurrencyCode, _tmpTable.TransDate);
                }
                break;
            default:
                while select _tmpTable
                    where _tmpTable.TaxType == _taxType
                {
                    amount += CurrencyExchangeHelper::mstAmount(str2num_RU(strrem(_tmpTable.(_fieldId), separator)), _tmpTable.SourceCurrencyCode, _tmpTable.TransDate);
                }
                break;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccumulatedAmountSecPerTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total accumulated amount in a secondary currency that is based on the tax type.
    /// </summary>
    /// <param name="_tmpTable">
    /// A <c>TmpIndirectTaxInquiryTable_IN</c> record.
    /// </param>
    /// <param name="_taxType">
    /// The specified tax type.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID of the specified field.
    /// </param>
    /// <param name="_fieldName">
    /// The name of the specified field.
    /// </param>
    /// <returns>
    /// The total accumulated amount.
    /// </returns>
    public static AmountMST getAccumulatedAmountSecPerTaxType(TmpIndirectTaxInquiryTable_IN    _tmpTable,
                                                              TaxType_IN                       _taxType,
                                                              fieldId                          _fieldId,
                                                              FieldName                        _fieldName)
    {
        AmountMST               amount;
        str                     separator;
        CurrencyExchangeHelper  currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                         _tmpTable.TransDate);
        separator = System.Globalization.CultureInfo::get_CurrentCulture().get_NumberFormat().get_NumberGroupSeparator();

        switch (_fieldName)
        {
            case fieldpname(TaxTrans_IN, InvoiceAmount):
                while select _tmpTable
                    group by Voucher, TaxType, InvoiceAmount, SourceCurrencyCode, TransDate
                    where _tmpTable.TaxType == _taxType
                {
                    amount += currencyHelper.calculateAccountingToReportingAdjustment(_tmpTable.SourceCurrencyCode,
                                                                                      _tmpTable.InvoiceAmount,
                                                                                      true);
                }
            break;
            case fieldpname(TaxTrans_IN, MiscChargeAmount):
                while select _tmpTable
                    group by Voucher, TaxType, MiscChargeAmount, SourceCurrencyCode, TransDate
                    where _tmpTable.TaxType == _taxType
                {
                    amount += currencyHelper.calculateAccountingToReportingAdjustment(_tmpTable.SourceCurrencyCode,
                                                                                      _tmpTable.MiscChargeAmount,
                                                                                      true);
                }
            break;
            case fieldpname(TaxTrans_IN, TransactionAmount):
                while select _tmpTable
                    group by Voucher, TaxType, TransactionAmount, SourceCurrencyCode, TransDate
                    where _tmpTable.TaxType == _taxType
                {
                    amount += currencyHelper.calculateAccountingToReportingAdjustment(_tmpTable.SourceCurrencyCode,
                                                                                      _tmpTable.TransactionAmount,
                                                                                      true);
                }
            break;
            default:
                while select _tmpTable
                    where _tmpTable.TaxType == _taxType
                {
                    amount += currencyHelper.calculateAccountingToReportingAdjustment(_tmpTable.SourceCurrencyCode,
                                                                                      str2num_RU(strrem(_tmpTable.(_fieldId), separator)),
                                                                                      true);
                }
            break;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccumulatedTaxAmountPerTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total accumulated tax amount that is based on the tax type.
    /// </summary>
    /// <param name="_tmpTable">
    /// A <c>TmpIndirectTaxInquiryTable_IN</c> record.
    /// </param>
    /// <param name="_taxType">
    /// The specified tax type.
    /// </param>
    /// <returns>
    /// The total accumulated tax amount.
    /// </returns>
    public static AmountMST getAccumulatedTaxAmountPerTaxType(TmpIndirectTaxInquiryTable_IN  _tmpTable,
                                                              TaxType_IN                     _taxType)
    {
        select sum(TaxAmount) from _tmpTable
            where _tmpTable.TaxType == _taxType;

        return _tmpTable.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccumulatedTaxAmountSecPerTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total accumulated tax amount in a secondary currency that is based on the tax type.
    /// </summary>
    /// <param name="_tmpTable">
    /// A <c>TmpIndirectTaxInquiryTable_IN</c> record.
    /// </param>
    /// <param name="_taxType">
    /// The specified tax type.
    /// </param>
    /// <returns>
    /// The total accumulated tax amount.
    /// </returns>
    public static AmountMST getAccumulatedTaxAmountSecPerTaxType(TmpIndirectTaxInquiryTable_IN  _tmpTable,
                                                                 TaxType_IN                     _taxType)
    {
        select sum(TaxAmountSecondary) from _tmpTable
            where _tmpTable.TaxType == _taxType;

        return _tmpTable.TaxAmountSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFromPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field ID of a specified position.
    /// </summary>
    /// <param name="_position">
    /// The position of the field.
    /// </param>
    /// <returns>
    /// The field ID that is based on the specified position.
    /// </returns>
    public static fieldId getFieldIdFromPosition(int _position)
    {
        fieldId fieldId;

        switch (_position)
        {
            case 1:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort1);
                break;
            case 2:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort2);
                break;
            case 3:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort3);
                break;
            case 4:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort4);
                break;
            case 5:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort5);
                break;
            case 6:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort6);
                break;
            case 7:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort7);
                break;
            case 8:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort8);
                break;
            case 9:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort9);
                break;
            case 10:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort10);
                break;
            case 11:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort11);
                break;
            case 12:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort12);
                break;
            case 13:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort13);
                break;
            case 14:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort14);
                break;
            case 15:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort15);
                break;
            case 16:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort16);
                break;
            case 17:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort17);
                break;
            case 18:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort18);
                break;
            case 19:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort19);
                break;
            case 20:
                fieldId = fieldnum(TmpIndirectTaxInquiryTable_IN, Sort20);
                break;
            default:
                break;
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAccumulatedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total accumulated amount that is based on the specified fields.
    /// </summary>
    /// <param name="_tmpTable">
    /// A <c>TmpIndirectTaxInquiryTable_IN</c> record.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the specified field.
    /// </param>
    /// <param name="_fieldName">
    /// The name of the specified field.
    /// </param>
    /// <returns>
    /// The total accumulated amount.
    /// </returns>
    public static AmountMST getTotalAccumulatedAmount(TmpIndirectTaxInquiryTable_IN    _tmpTable,
                                                      fieldId                          _fieldId,
                                                      FieldName                        _fieldName)
    {
        AmountMST       amount;
        str             separator;

        separator = System.Globalization.CultureInfo::get_CurrentCulture().get_NumberFormat().get_NumberGroupSeparator();

        switch (_fieldName)
        {
            case fieldpname(TaxTrans_IN, InvoiceAmount):
                while select _tmpTable
                    group by Voucher, TaxType, InvoiceAmount, SourceCurrencyCode, TransDate
                {
                    amount += CurrencyExchangeHelper::mstAmount(_tmpTable.InvoiceAmount, _tmpTable.SourceCurrencyCode, _tmpTable.TransDate);
                }
                break;
            case fieldpname(TaxTrans_IN, MiscChargeAmount):
                while select _tmpTable
                    group by Voucher, TaxType, MiscChargeAmount, SourceCurrencyCode, TransDate
                {
                    amount += CurrencyExchangeHelper::mstAmount(_tmpTable.MiscChargeAmount, _tmpTable.SourceCurrencyCode, _tmpTable.TransDate);
                }
                break;
            case fieldpname(TaxTrans_IN, TransactionAmount):
                while select _tmpTable
                    group by Voucher, TaxType, TransactionAmount, SourceCurrencyCode, TransDate
                {
                    amount += CurrencyExchangeHelper::mstAmount(_tmpTable.TransactionAmount, _tmpTable.SourceCurrencyCode, _tmpTable.TransDate);
                }
                break;
            default:
                while select _tmpTable
                {
                     amount += CurrencyExchangeHelper::amount(str2num_RU(strrem(_tmpTable.(_fieldId), separator)), _tmpTable.SourceCurrencyCode);
                }
                break;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAccumulatedAmountSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total accumulated amount in a secondary currency that is based on the specified
    /// fields.
    /// </summary>
    /// <param name="_tmpTable">
    /// A <c>TmpIndirectTaxInquiryTable_IN</c> record.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the specified field.
    /// </param>
    /// <param name="_fieldName">
    /// The name of the specified field.
    /// </param>
    /// <returns>
    /// The total accumulated amount in a secondary currency.
    /// </returns>
    public static AmountMST getTotalAccumulatedAmountSecondary(TmpIndirectTaxInquiryTable_IN   _tmpTable,
                                                               fieldId                         _fieldId,
                                                               FieldName                       _fieldName)
    {
        AmountMST       amount;
        str             separator;
        CurrencyExchangeHelper  currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                         _tmpTable.TransDate);

        separator = System.Globalization.CultureInfo::get_CurrentCulture().get_NumberFormat().get_NumberGroupSeparator();

        switch (_fieldName)
        {
            case fieldpname(TaxTrans_IN, InvoiceAmount):
                while select _tmpTable
                    group by Voucher, TaxType, InvoiceAmount, SourceCurrencyCode, TransDate
                {
                    amount += CurrencyExchangeHelper::mstAmount(_tmpTable.InvoiceAmount, _tmpTable.SourceCurrencyCode, _tmpTable.TransDate);
                }
                break;
            case fieldpname(TaxTrans_IN, MiscChargeAmount):
                while select _tmpTable
                    group by Voucher, TaxType, MiscChargeAmount, SourceCurrencyCode, TransDate
                {
                    amount += currencyHelper.calculateAccountingToReportingAdjustment(_tmpTable.SourceCurrencyCode,
                                                                                      _tmpTable.MiscChargeAmount,
                                                                                      true);
                }
                break;
            case fieldpname(TaxTrans_IN, TransactionAmount):
                while select _tmpTable
                    group by Voucher, TaxType, TransactionAmount, SourceCurrencyCode, TransDate
                {
                    amount += currencyHelper.calculateAccountingToReportingAdjustment(_tmpTable.SourceCurrencyCode,
                                                                                      _tmpTable.TransactionAmount,
                                                                                      true);
                }
                break;
            default:
                while select _tmpTable
                {
                    amount += CurrencyExchangeHelper::amount(str2num_RU(strrem(_tmpTable.(_fieldId), separator)), _tmpTable.SourceCurrencyCode);
                }
                break;
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAccumulatedTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax amount that is based on a specified record.
    /// </summary>
    /// <param name="_tmpTable">
    /// A <c>TmpIndirectTaxInquiryTable_IN</c> record.
    /// </param>
    /// <returns>
    /// The total tax amount.
    /// </returns>
    public static AmountMST getTotalAccumulatedTaxAmount(TmpIndirectTaxInquiryTable_IN  _tmpTable)
    {
        select sum(TaxAmount) from _tmpTable;

        return _tmpTable.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAccumulatedTaxAmountSec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax amount in a secondary currency that is based on a specified record.
    /// </summary>
    /// <param name="_tmpTable">
    /// A <c>TmpIndirectTaxInquiryTable_IN</c> record.
    /// </param>
    /// <returns>
    /// The tax amount in a secondary currency.
    /// </returns>
    public static AmountMST getTotalAccumulatedTaxAmountSec(TmpIndirectTaxInquiryTable_IN  _tmpTable)
    {
        select sum(TaxAmountSecondary) from _tmpTable;

        return _tmpTable.TaxAmountSecondary;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@SYS326</Label>
	<ClusteredIndex></ClusteredIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sort1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort5</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort6</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort7</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort8</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort9</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort10</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort11</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort12</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort13</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort14</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort15</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort16</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort17</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort18</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort19</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort20</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sort1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort5</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort6</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort7</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort8</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort9</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort10</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort11</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort12</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort13</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort14</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort15</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort16</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort17</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort18</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort19</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sort20</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATDefermentExtTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATDefermentExtRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTaxAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MiscChargeAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostLedgerVoucher</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MiscChargeAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort1</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort10</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort11</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort12</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort13</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort14</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort15</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort16</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort17</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort18</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort19</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort2</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort20</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort3</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort4</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort5</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort6</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort7</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort8</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sort9</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceCurrencyCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceTaxAmountCur</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountSecondary</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxComponentRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>TaxType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TransTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATDefermentExtRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>VATDefermentExtTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxComponentTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxComponentTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LedgerTransactionVoucher_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxInquiryMap_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CostLedgerVoucher</MapField>
					<MapFieldTo>CostLedgerVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceCurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>SourceCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_TmpIndirectTaxInquiryTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>