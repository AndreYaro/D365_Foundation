<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventClosing</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventClosing extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransactionLog</Name>
				<Source><![CDATA[
    void createTransactionLog()
    {
        switch (this.AdjustmentType)
        {
            case InventAdjustmentType::PreClose:
            case InventAdjustmentType::Closing:
                TransactionLog::create(TransactionLogType::InventCloseClosing, this.Voucher);
                break;

            case InventAdjustmentType::Transaction:
                TransactionLog::create(TransactionLogType::InventCloseTrans, this.Voucher);
                break;

            case InventAdjustmentType::InventOnHand:
                TransactionLog::create(TransactionLogType::InventCloseOnHand, this.Voucher);
                break;

            case InventAdjustmentType::Recalculation:
                TransactionLog::create(TransactionLogType::InventCloseRecalc, this.Voucher);
                break;

            case InventAdjustmentType::Revaluation:
                TransactionLog::create(TransactionLogType::InventCloseRevaluation, this.Voucher);
                break;

            default:
                throw error("@SYS6144");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the <c>InventClosing</c> record has a log associated with it.
    /// </summary>
    /// <returns>
    ///    true, if the <c>InventClosing</c> record has a log associated with it; otherwise, false.
    /// </returns>
    display boolean hasLog()
    {
        return InventClosingLog::hasLog(this.TransDate, this.Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCancelClosing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a cancel closing record from a given <c>inventClosing</c> record.
    /// </summary>
    /// <param name="cancelClosing">
    ///    The <c>inventClosing</c> record that should be canceled.
    /// </param>

    void initFromCancelClosing( InventClosing cancelClosing)
    {
        if (cancelClosing.AdjustmentType == InventAdjustmentType::PreClose)
        {
            throw error(strFmt("@SYS19378",funcName()));
        }
        this.AdjustmentType         = cancelClosing.AdjustmentType;
        this.Active                 = NoYes::No;

        this.TransDate              = cancelClosing.TransDate;
        this.AdjustmentSpec         = cancelClosing.AdjustmentSpec;
        this.ProdJournal            = cancelClosing.ProdJournal;
        this.Ledger                 = cancelClosing.Ledger;

        this.CancelClosingRefRecId  = cancelClosing.RecId;
        // <GEERU>
        this.InventTransCurrency_RU = cancelClosing.InventTransCurrency_RU;
        this.StornoAdjustment_RU    = cancelClosing.StornoAdjustment_RU;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the container with Infolog messages to the log associated with the <c>InventClosing</c>
    /// record.
    /// </summary>
    /// <param name="_infologData">
    /// The container with the Infolog messages to be logged.
    /// </param>
    /// <param name="_logType">
    /// An enumeration used to categorize the messages by; optional.
    /// </param>
    /// <param name="_logId">
    /// A string that is used to categorize the messages by; optional.
    /// </param>
    void writeLog(InfologData _infologData, LogType _logType = LogType::Misc, LogId _logId = '')
    {
        InventClosingLog::writeLog(this.TransDate, this.Voucher, _logType, _logId, _infologData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLogWithSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the container with Infolog messages and summary messages to the log associated with the <c>InventClosing</c>
    /// record.
    /// </summary>
    /// <param name="_infologSummaryData">
    /// The container with the Infolog messages summary to be logged.
    /// </param>
    /// <param name="_logType">
    /// An enumeration used to categorize the messages by; optional.
    /// </param>
    /// <param name="_logId">
    /// A string that is used to categorize the messages by; optional.
    /// </param>
    void writeLogWithSummary(InfologData _infologSummaryData = conNull(), LogType _logType = LogType::Misc, LogId _logId = '')
    {
        InventClosingLog::writeLogWithSummary(this.TransDate, this.Voucher, _logType, _logId, _infologSummaryData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLog</Name>
				<Source><![CDATA[
    void clearLog()
    {
        InventClosingLog::clearLog(this.TransDate, this.Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCancel</Name>
				<Source><![CDATA[
    static boolean  checkCancel(TransDate       dateCancel,
                                Voucher                voucherCancel,
                                InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventClosing           inventClosing;
        InventStdCostConv       inventStdCostConv;

        InventAdjustmentType    adjustmentType;

        select inventClosing
            where inventClosing.Voucher == voucherCancel          &&
                  // <GEERU>
                  inventClosing.TransDate == dateCancel           &&
                  inventClosing.InventTransCurrency_RU == _inventTransCurrency;
        // </GEERU>

        adjustmentType = inventClosing.AdjustmentType;

        if (! inventClosing.RecId)
            return checkFailed(strFmt("@SYS25517",date2StrUsr( dateCancel, DateFlags::FormatAll),voucherCancel));

        if (! inventClosing.Active)
            return checkFailed("@SYS18893");

        boolean ret = InventTransArchiveProcessHistoryTable::checkArchivingInvolvedInClosingCancel(inventClosing);
        if (inventClosing.InventCostStatus != InventCostStatus::Ended)
        {
            return ret;
        }

        // <GEERU>
        inventClosing = InventClosing::inventClosingLast(InventAdjustmentType::Closing, _inventTransCurrency);
        // </GEERU>

        if (adjustmentType == InventAdjustmentType::Closing)
        {
            if (inventClosing.TransDate > dateCancel)
                return checkFailed("@SYS16766"+'\n'+
                                   "@SYS18895");

            // <GEERU>
            inventClosing= InventClosing::inventClosingLast(InventAdjustmentType::InventOnHand, _inventTransCurrency);
            // </GEERU>
            if (inventClosing.TransDate >= dateCancel)
                return checkFailed("@SYS18896"+'\n'+
                                   "@SYS18897");

            // <GEERU>
            inventStdCostConv = InventStdCostConv::lastNotPlannedConversion(_inventTransCurrency);
            // </GEERU>
            if (inventStdCostConv.RecId)
            {
                if (inventStdCostConv.Status == InventStdCostConvStatus::Completed && dateCancel < inventStdCostConv.TransitionEndDate)
                {
                    return checkFailed(strFmt("@SYS120627", date2StrUsr( inventStdCostConv.TransitionEndDate, DateFlags::FormatAll)));
                }
                if (inventStdCostConv.Status != InventStdCostConvStatus::Completed && dateCancel < inventStdCostConv.TransitionStartDate)
                {
                    return checkFailed(strFmt("@SYS120628", inventStdCostConv.Status, date2StrUsr( inventStdCostConv.TransitionStartDate, DateFlags::FormatAll)));
                }
            }
        }
        else
        if (adjustmentType == InventAdjustmentType::InventOnHand)
        {
            if (inventClosing.TransDate > dateCancel)
                return checkFailed("@SYS18898"+'\n'+
                                   "@SYS18899");
        }
        else
        {
            if (inventClosing.TransDate >= dateCancel)
                return checkFailed("@SYS18898"+'\n'+
                                   "@SYS18899");
        }

        if (adjustmentType == InventAdjustmentType::Recalculation)
        {
            // <GEERU>
            inventClosing= InventClosing::inventClosingLast(InventAdjustmentType::Recalculation, _inventTransCurrency);
            // </GEERU>
            if (inventClosing.Voucher != voucherCancel)
                return checkFailed("@SYS90432"+'\n'+
                                   "@SYS90433");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClosing</Name>
				<Source><![CDATA[
    static boolean checkClosing(TransDate closingDate,
                                       InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        if (! closingDate)
            return checkFailed("@SYS17635");

        // <GEERU>
        if (InventClosing::closingDate(false, _inventTransCurrency) >= closingDate)
            return checkFailed(strFmt("@SYS18892", date2StrUsr(InventClosing::closingDate(false, _inventTransCurrency), DateFlags::FormatAll)));
        // </GEERU>

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOpen</Name>
				<Source><![CDATA[
    static boolean  checkOpen(TransDate              testDate,
                                     boolean                onDateOk = false,
                                     InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        TransDate closingDate = InventClosing::closingDate(false, _inventTransCurrency);

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || testDate)
        {
            // </GEERU>

            if ((testDate <= closingDate && !onDateOk) ||
                (testDate <  closingDate &&  onDateOk))
            {
                return checkFailed(strFmt("@SYS16144",date2StrUsr( closingDate, DateFlags::FormatAll)));
            }
            // <GEERU>
        }
        // </GEERU>

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closingDate</Name>
				<Source><![CDATA[
    static TransDate closingDate(boolean                reRead = false,
                                        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        // <GEERU>
        if (_inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            // </GEERU>
            return InventClassFactory::Instance().inventLastClosingDate(reRead);
            // <GEERU>
        }
        else
        {
            return InventClassFactory::Instance().inventLastClosingDateSecCur_RU(reRead);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(Voucher       voucher,
                         TransDate     transDate,
                         boolean       update = false)
    {
        return  voucher && transDate &&
                (select firstonly inventClosing
                where inventClosing.Voucher == voucher  &&
                      inventClosing.TransDate == transDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static InventClosing find(Voucher       voucher,
                              TransDate     transDate,
                              boolean       update = false)
    {
        InventClosing   inventClosing;

        inventClosing.selectForUpdate(update);

        if (voucher && transDate)
            select firstonly inventClosing
                where inventClosing.Voucher == voucher  &&
                      inventClosing.TransDate == transDate;

        return inventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findClosingDate</Name>
				<Source><![CDATA[
    static InventClosing findClosingDate(TransDate              _transDate,
                                         InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur,
                                         boolean                _forupdate = false
                                         )
    {
        InventClosing   inventClosing;
        // <GEERU>
        inventClosing.selectForUpdate(_forupdate);
        // </GEERU>

        select firstonly inventClosing
            where inventClosing.Active                 == NoYes::Yes                    &&
                  inventClosing.AdjustmentType         == InventAdjustmentType::Closing &&
                  inventClosing.Cancellation           == NoYes::No                     &&
                  inventClosing.InventCostStatus       == InventCostStatus::Ended       &&
                  // <GEERU>
                  inventClosing.TransDate              == _transDate                    &&
                  inventClosing.InventTransCurrency_RU == _inventTransCurrency;
        // </GEERU>

        return inventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrevClosingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the previous inventory closing record.
    /// </summary>
    /// <param name="_currentClosingDate">
    ///    The date of the current active inventory closing.
    /// </param>
    /// <param name="_inventTransCurrency">
    ///    The currency of the current active inventory closing - primary or secondary.
    /// </param>
    /// <returns>
    ///    The previous inventory closing record.
    /// </returns>
    /// <remarks>
    ///    This method looks for the previous active inventory closing to a given date.
    /// </remarks>

    static InventClosing findPrevClosingDate(
                                             TransDate              _currentClosingDate,
                                             InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventClosing   inventClosing;

        if (_currentClosingDate)
        {
            select reverse firstonly inventClosing
                // <GEERU>
                index TypeDateIdx
                // </GEERU>
                where inventClosing.Active                 == NoYes::Yes                    &&
                      inventClosing.AdjustmentType         == InventAdjustmentType::Closing &&
                      inventClosing.Cancellation           == NoYes::No                     &&
                      inventClosing.InventCostStatus       == InventCostStatus::Ended       &&
                      // <GEERU>
                      inventClosing.InventTransCurrency_RU == _inventTransCurrency          &&
                      // </GEERU>
                      inventClosing.TransDate              <  _currentClosingDate;
        }

        return inventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventClosingLast</Name>
				<Source><![CDATA[
    static InventClosing inventClosingLast(InventAdjustmentType   regType,
                                           InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventClosing inventClosing;
        inventClosing.selectLocked(false);

        if (regType == InventAdjustmentType::Closing)
        {
            select reverse firstonly inventClosing
                index TypeActiveIdx
                where inventClosing.AdjustmentType         == regType              &&
                      // <GEERU>
                      inventClosing.InventTransCurrency_RU == _inventTransCurrency &&
                      // </GEERU>
                      inventClosing.Active                 == NoYes::Yes;
        }
        else
        {
            select firstonly inventClosing
                order by AdjustmentType desc, Active desc, TransDate desc, Executed desc, Start desc
                where inventClosing.AdjustmentType         == regType              &&
                      // <GEERU>
                      inventClosing.InventTransCurrency_RU == _inventTransCurrency &&
                      // </GEERU>
                      inventClosing.Active                 == NoYes::Yes;
        }

        return inventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxt</Name>
				<Source><![CDATA[
    //

    static LedgerTransTxt ledgerTransTxt(InventAdjustmentType   regType,
                                         InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        // <GEERU>
        if (_inventTransCurrency == InventTransCurrency_RU::SecondaryCur)
        {
            if (regType == InventAdjustmentType::Closing)
            {
                return LedgerTransTxt::InventClosingSecCur_RU;
            }

            return LedgerTransTxt::InventClosingAdjustmentSecCur_RU;
        }
        // </GEERU>
        if (regType == InventAdjustmentType::Closing)
            return LedgerTransTxt::InventClosing;

        return LedgerTransTxt::InventClosingAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReference</Name>
				<Source><![CDATA[
    static NumberSequenceReference numberSequenceReference(InventAdjustmentType   regType,
                                                                  InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        // <GEERU>
        if (_inventTransCurrency == InventTransCurrency_RU::SecondaryCur)
        {
            if (regType == InventAdjustmentType::Closing)
            {
                return InventParameters::numRefInventClosingVoucherIdSecCur_RU();
            }

            return InventParameters::numRefInventAdjustmentVoucherIdSecCur_RU();
        }
        // </GEERU>

        if (regType == InventAdjustmentType::Closing)
            return InventParameters::numRefInventClosingVoucherId();

        return InventParameters::numRefInventAdjustmentVoucherId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unresolvedClosingExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a non ended closing or cancellation exists.
    /// </summary>
    /// <returns>
    ///    true if a non ended closing or cancellation exists; otherwise, false.
    /// </returns>

    public static boolean unresolvedClosingExist()
    {
        InventClosing   inventClosing;
        select firstonly RecId from inventClosing
        where ( inventClosing.Active           == NoYes::Yes
             && inventClosing.InventCostStatus != InventCostStatus::Ended
             && inventClosing.AdjustmentType   == InventAdjustmentType::Closing
             && inventClosing.Cancellation     == NoYes::No )
           || ( inventClosing.Active           == NoYes::No
             && inventClosing.InventCostStatus != InventCostStatus::Ended
             && inventClosing.AdjustmentType   == InventAdjustmentType::Closing
             && inventClosing.Cancellation     == NoYes::Yes );

        return inventClosing.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnfinishedClosing</Name>
				<Source><![CDATA[
    public static boolean checkUnfinishedClosing()
    {
        InventClosing inventClosing;

        select firstonly RecId, Active, Voucher, CancelClosingRefRecId from inventClosing
        where ( inventClosing.Active           == NoYes::Yes
             && inventClosing.InventCostStatus != InventCostStatus::Ended
             && inventClosing.AdjustmentType   == InventAdjustmentType::Closing
             && inventClosing.Cancellation     == NoYes::No )
           || ( inventClosing.Active           == NoYes::No
             && inventClosing.InventCostStatus != InventCostStatus::Ended
             && inventClosing.AdjustmentType   == InventAdjustmentType::Closing
             && inventClosing.Cancellation     == NoYes::Yes );

        if (inventClosing.RecId)
        {
            if (inventClosing.Active)
            {
                return checkFailed(strFmt("@SCM:ValidationMessageForUnfinishedInventoryClosing", inventClosing.Voucher));
            }
            else
            {
                InventClosing inventClosingReversed;

                select Voucher from inventClosingReversed where inventClosingReversed.RecId == inventClosing.CancelClosingRefRecId;

                return checkFailed(strFmt("@SCM:ValidationMessageForUnfinishedReverseInventoryClosing", inventClosing.Voucher, inventClosingReversed.Voucher));
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNonMovingAverageModelGroup</Name>
				<Source><![CDATA[
    private static boolean existsNonMovingAverageModelGroup()
    {
        InventModelGroup inventModelGroup;
        select firstonly RecId from inventModelGroup
            where inventModelGroup.InventModel != InventModel::MovingAverage;

        return inventModelGroup.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsInventoryTransactionPostingsInPeriod</Name>
				<Source><![CDATA[
    private static boolean existsInventoryTransactionPostingsInPeriod(DatePhysical _startDate, DatePhysical _endDate)
    {
        InventTransPosting inventTransPosting;
        select firstonly RecId from inventTransPosting
            where  inventTransPosting.TransDate >= _startDate
                && inventTransPosting.TransDate <= _endDate;

        return inventTransPosting.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStopRunning</Name>
				<Source><![CDATA[
    public void setStopRunning(NoYes _isStopped, NoYes _isOnError = NoYes::No)
    {
        this.StopRunning = _isStopped;
        this.StopOnError = _isOnError;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123668</DeveloperDocumentation>
	<FormRef>InventClosing</FormRef>
	<Label>@SYS2380</Label>
	<TableGroup>TransactionHeader</TableGroup>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>VoucherDateIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<OccEnabled>No</OccEnabled>
	<PrimaryIndex>VoucherDateIdx</PrimaryIndex>
	<ReplacementKey>VoucherDateIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventClosingLog</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventClosingLog</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventCostList</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventCostList</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventCostListTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventCostListTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cancellation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Executed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransCurrency_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdjustmentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cancellation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Note</Name>
			<Label>@SYS13887</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PeriodCode</Name>
			<Label>@SYS22717</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Session</Name>
			<Label>@SYS7115</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Executed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Start</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>End</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfIteration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventCostStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopRunning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopOnError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSumDateFinancialCalcFinished_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CancelRecalculation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ledger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxIterations</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinTransferValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RunRecalculation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Sys14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdjustmentSpec</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventAdjustmentSpec</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdjustmentType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventAdjustmentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BOMLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CancelClosingRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventClosingRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cancellation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS9528</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CancelRecalculation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostCancelRecalculation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>End</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToTime</ExtendedDataType>
			<Label>@SYS101262</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Executed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@Sys10114</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HelpersCreated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventCostStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventCostStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventSumDateFinancialCalcFinished_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS114023</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransCurrency_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransCurrency_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Ledger</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Sys13356</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerCorrection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerCorrection</ExtendedDataType>
			<Label>@GLS112549</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxIterations</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS65224</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinTransferValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<Label>@SYS65226</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NextRunNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventClosingRunNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FreeTxt</ExtendedDataType>
			<Label>@SYS13887</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumOfIteration</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumOfIteration</ExtendedDataType>
			<Label>@SYS23906</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdJournal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Prod</ConfigurationKey>
			<Label>@SYS4398</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RunNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventClosingRunNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RunRecalculation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCostRunRecalculation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>Start</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromTime</ExtendedDataType>
			<Label>@Sys3008</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StopRunning</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS78017</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StopOnError</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS121581</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StornoAdjustment_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Label>@GLS112464</Label>
			<Visible>No</Visible>
			<EnumType>UnknownNoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerPostingBatch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShouldSummarizeInfolog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeDateIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AdjustmentType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeActiveIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AdjustmentType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransCurrency_RU</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventCostStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Active</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AdjustmentType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CancelInventClosing</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventClosing</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CancelClosingRefRecId</Name>
					<Field>CancelClosingRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerPeriodCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerPeriodCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodCode</Name>
					<Field>PeriodCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>