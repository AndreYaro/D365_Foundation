<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpVATDefermentBalLine_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpVATDefermentBalLine_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVATDefermentBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the table.
    /// </summary>
    /// <param name="_vatDefermentInquiry">
    /// The object which is used to calculate the tax.
    /// </param>
    /// <param name="_tmpVATDefermentBalLine">
    /// The table buffer which is used to find the record.
    /// </param>
    public static void createVATDefermentBalance(
        TaxInquiryArguments_IN      _vatDefermentInquiry,
        TmpVATDefermentBalLine_IN   _tmpVATDefermentBalLine )

    {
        TaxReportPeriod                 taxReportPeriod;
        TaxTrans                        taxTrans,taxTransloc;
        LedgerJournalTrans              ledgerJournalTrans;
        VendInvoiceTrans                vendInvoiceTrans;
        VendInvoiceTransTaxExtensionIN  vendInvoiceTransTaxExtensionIN;
        TaxTrans_IN                     taxTransLocal;
        DefermentScheduleTransLines_IN  defermentLines;
        DefermentScheduleTransLines_IN  defermentLinesLocal;
        VATDefermentTransaction_IN      vatDefTrans;
        VATDefermentTransaction_IN      vatDefTransLoc;
        VATDefermentTransaction_IN      vatDefTransSearch;
        DefermentScheduleTrans_IN       deferment;
        TaxAmount                       postedTax;
        container                       periods;
        int                             counter;
        recId                           recId;
        boolean                         installmentLines;
        TransTaxInformation             transTaxInformation;
        TransTaxInformationHelper		transTaxInformationHelper = TransTaxInformationHelper::newHelper();

        delete_from _tmpVATDefermentBalLine;
        delete_from vatDefTrans;
        counter = 1;
        installmentLines = false;

        while select RecId, FromDate, ToDate from taxReportPeriod
            where taxReportPeriod.TaxPeriod == _vatDefermentInquiry.getSettlementPeriod()
        {
            if (! _vatDefermentInquiry.getFromDate()
                && ! _vatDefermentInquiry.getToDate())
            {
                if (!confind(periods,taxReportPeriod.RecId))
                {
                    periods = conpoke(periods,counter, taxReportPeriod.RecId);
                    counter ++;
                }
            }
            else if (taxReportPeriod.FromDate  >= _vatDefermentInquiry.getFromDate()
                    && taxReportPeriod.ToDate <= _vatDefermentInquiry.getToDate())
            {
                if (!confind(periods, taxReportPeriod.RecId))
                {
                    periods = conpoke(periods, counter, taxReportPeriod.RecId);
                    counter ++;
                }
            }
            else if (taxReportPeriod.FromDate  <= _vatDefermentInquiry.getToDate()
                     && taxReportPeriod.ToDate >= _vatDefermentInquiry.getToDate())
            {
                if (!confind(periods, taxReportPeriod.RecId))
                {
                    periods = conpoke(periods, counter, taxReportPeriod.RecId);
                    counter ++;
                }
            }
            else if (taxReportPeriod.FromDate  <= _vatDefermentInquiry.getFromDate()
                     && taxReportPeriod.ToDate >= _vatDefermentInquiry.getFromDate())
            {
                if (!confind(periods, taxReportPeriod.RecId))
                {
                    periods = conpoke(periods, counter, taxReportPeriod.RecId);
                    counter ++;
                }
            }
        }
        for (counter = 1 ; counter <= conlen(periods) ; counter ++)
        {
            recId = conpeek(periods,counter);
            select firstonly TaxPeriod, FromDate, ToDate from taxReportPeriod
                where taxReportPeriod.RecId == recId;
            while select JournalNum, Voucher, TransDate, CurrencyCode, TaxGroup, TaxItemGroup, SourceRecId, SourceTableId from taxTrans
                group by JournalNum, Voucher, TransDate, CurrencyCode, TaxGroup, TaxItemGroup, SourceRecId, SourceTableId
                where taxTrans.Source    == TaxModuleType::Voucher
                   && taxTrans.TaxOrigin == TaxOrigin::Tax
                   && taxTrans.TaxPeriod == taxReportPeriod.TaxPeriod
            {
                installmentLines = false;
                select firstonly ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum        == taxTrans.JournalNum
                       && ledgerJournalTrans.RecId             == taxTrans.SourceRecId
                       && taxTrans.sourceTableId               == tablenum(LedgerJournalTrans);

                transTaxInformation = transTaxInformationHelper.getTransTaxInformationByRecord(ledgerJournalTrans);

                if (ledgerJournalTrans && transTaxInformation.VATGoodsType == VATGoodsType_IN::CapitalGoods)
                {
                    deferment           = DefermentScheduleTrans_IN::findExtRecId(ledgerJournalTrans.RecId);
                    defermentLinesLocal = DefermentScheduleTransLines_IN::find(deferment.RecId);

                    while select defermentLines
                        where defermentLines.FatherRecId == deferment.RecId
                           && (defermentLines.Period     <= taxReportPeriod.FromDate
                               || defermentLines.Period  <= taxReportPeriod.ToDate)
                    {
                        select vatDefTrans
                            where vatDefTrans.RefRecId == defermentLines.RecId
                               && vatDefTrans.Voucher  == taxTrans.Voucher;

                        if (!vatDefTrans)
                        {
                            vatDefTrans.clear();
                            postedTax = 0;
                            vatDefTrans.Voucher         = taxTrans.Voucher;
                            vatDefTrans.DefermentDate   = defermentLines.Period;
                            vatDefTrans.Source          = TaxModuleType::Voucher;
                            vatDefTrans.InvoiceNumber   = VendTrans::findVoucherDate(taxTrans.Voucher,taxTrans.TransDate).Invoice;
                            if (VendTrans::findVoucherDate(taxTrans.Voucher,taxTrans.TransDate).AmountCur < 0)
                            {
                                vatDefTrans.TransactionAmount   = ledgerJournalTrans.amount();
                                vatDefTrans.DeferredAmount      = deferment.vatDefermentAmount;
                                while select SourceCurrencyCode, RecId from taxTransloc
                                    where taxTransloc.Voucher       == taxTrans.Voucher
                                       && taxTransloc.TaxPeriod     == taxReportPeriod.TaxPeriod
                                       && taxTransloc.TaxOrigin     == TaxOrigin::Tax
                                       && taxTransloc.JournalNum    == ledgerJournalTrans.JournalNum
                                {
                                    taxTransLocal = TaxTrans_IN::findRefRecId(taxTransloc.RecId);
                                    vatDefTrans.DefermentInstallmentAmount += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Debit, taxTransloc.SourceCurrencyCode);
                                    if (defermentLines.TransferDebitAmount && confind(defermentLines.TransferDetails,taxTransloc.RecId))
                                    {
                                        vatDefTrans.TransferAmount+= CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Debit, taxTransloc.SourceCurrencyCode);
                                    }
                                }
                            }
                            else
                            {
                                vatDefTrans.TransactionAmount   = -ledgerJournalTrans.amount();
                                vatDefTrans.DeferredAmount      = -deferment.vatDefermentAmount;

                                while select SourceCurrencyCode, RecId from taxTransloc
                                    where taxTransloc.Voucher    == taxTrans.Voucher
                                       && taxTransloc.TaxPeriod  == taxReportPeriod.TaxPeriod
                                       && taxTransloc.TaxOrigin  == TaxOrigin::Tax
                                       && taxTransloc.JournalNum == ledgerJournalTrans.JournalNum
                                {
                                    taxTransLocal = TaxTrans_IN::findRefRecId(taxTransloc.RecId);

                                    vatDefTrans.DefermentInstallmentAmount += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Credit, taxTransloc.SourceCurrencyCode);
                                    if (defermentLines.TransferDebitAmount && confind(defermentLines.TransferDetails,taxTransloc.RecId))
                                    {
                                        vatDefTrans.TransferAmount+= CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Credit, taxTransloc.SourceCurrencyCode);
                                    }
                                }
                            }
                            vatDefTrans.Date              = taxTrans.TransDate;
                            vatDefTrans.Currency          = taxTrans.CurrencyCode;
                            vatDefTrans.JournalName       = LedgerJournalTable::find(ledgerJournalTrans.JournalNum).Name;
                            vatDefTrans.JounrnalNumber    = ledgerJournalTrans.JournalNum;
                            vatDefTrans.TaxGroup          = taxTrans.TaxGroup;
                            vatDefTrans.ItemTaxGroup      = taxTrans.TaxItemGroup;
                            vatDefTrans.Allocation        = deferment.Allocation;
                            vatDefTrans.PaymantPer        = deferment.PaymentPer;
                            vatDefTrans.NumberOfDeferment = deferment.NumberOfDeferment;
                            vatDefTrans.Change            = deferment.Change;
                            vatDefTrans.AmountCurrency    = deferment.AmountCurrency;
                            vatDefTrans.Minimum           = deferment.Minimum;
                            vatDefTrans.RefRecId          = defermentLines.RecId;
                            vatDefTrans.FatherRecId       = deferment.RecId;
                            vatDefTrans.insert();
                            installmentLines = true;
                        }
                    }

                    if (deferment && !installmentLines && !defermentLinesLocal)
                    {
                        select vatDefTrans
                            where vatDefTrans.FatherRecId  == deferment.RecId
                               && vatDefTrans.RefRecId     == 0
                               && vatDefTrans.Voucher      == taxTrans.Voucher;
                        if (!vatDefTrans)
                        {
                            vatDefTrans.clear();
                            vatDefTrans.Voucher                     = taxTrans.Voucher;
                            vatDefTrans.DefermentDate               = taxTrans.TransDate;
                            vatDefTrans.Source                      = TaxModuleType::Voucher;
                            vatDefTrans.InvoiceNumber               = VendTrans::findVoucherDate(taxTrans.Voucher,taxTrans.TransDate).Invoice;

                            if (VendTrans::findVoucherDate(taxTrans.Voucher,taxTrans.TransDate).AmountCur < 0)
                            {
                                vatDefTrans.TransactionAmount   = ledgerJournalTrans.amount();
                            }
                            else
                            {
                                vatDefTrans.TransactionAmount   = -ledgerJournalTrans.amount();
                            }

                            vatDefTrans.DefermentInstallmentAmount  = 0;
                            vatDefTrans.DeferredAmount              = 0;
                            vatDefTrans.TransferAmount              = 0;
                            vatDefTrans.Date                        = taxTrans.TransDate;
                            vatDefTrans.Currency                    = taxTrans.CurrencyCode;
                            vatDefTrans.JournalName                 = LedgerJournalTable::find(ledgerJournalTrans.JournalNum).Name;
                            vatDefTrans.JounrnalNumber              = ledgerJournalTrans.JournalNum;
                            vatDefTrans.TaxGroup                    = taxTrans.TaxGroup;
                            vatDefTrans.ItemTaxGroup                = taxTrans.TaxItemGroup;
                            vatDefTrans.Allocation                  = deferment.Allocation;
                            vatDefTrans.PaymantPer                  = deferment.PaymentPer;
                            vatDefTrans.NumberOfDeferment           = deferment.NumberOfDeferment;
                            vatDefTrans.Change                      = deferment.Change;
                            vatDefTrans.AmountCurrency              = deferment.AmountCurrency;
                            vatDefTrans.Minimum                     = deferment.Minimum;
                            vatDefTrans.FatherRecId                 = deferment.RecId;
                            vatDefTrans.insert();
                        }
                    }
                }
            }
            while select InventTransId, Voucher, TaxGroup, TaxItemGroup, TransDate, CurrencyCode from taxTrans
                group by InventTransId, Voucher, TaxGroup, TaxItemGroup, TransDate, CurrencyCode
                where taxTrans.TaxPeriod == _vatDefermentInquiry.getSettlementPeriod()
                   && taxTrans.Source    == TaxModuleType::Purch
            {
                installmentLines = false;
                select vendInvoiceTrans
                    where vendInvoiceTrans.InventTransId     == taxTrans.InventTransId
                       && vendInvoiceTrans.vatGoodsType_IN   == VATGoodsType_IN::CapitalGoods
                exists join vendInvoiceTransTaxExtensionIN
                    where vendInvoiceTrans.RecId                            == vendInvoiceTransTaxExtensionIN.VendInvoiceTrans
                        && vendInvoiceTransTaxExtensionIN.TaxInformation_IN == _vatDefermentInquiry.getTIN();
                if (vendInvoiceTrans)
                {
                    if (vendInvoiceTrans.InventRefTransId)
                    {
                        deferment = DefermentScheduleTrans_IN::findExtRecId(VendInvoiceTrans::findInventTransId(vendInvoiceTrans.InventRefTransId).RecId);
                    }
                    else
                    {
                        deferment = DefermentScheduleTrans_IN::findExtRecId(vendInvoiceTrans.RecId);
                    }

                    defermentLinesLocal = DefermentScheduleTransLines_IN::find(deferment.RecId);

                    while select defermentLines
                        where defermentLines.FatherRecId    == deferment.RecId
                           && (defermentLines.Period        <= taxReportPeriod.FromDate
                           || defermentLines.Period         <= taxReportPeriod.ToDate)
                    {
                         select vatDefTrans
                            where vatDefTrans.RefRecId == defermentLines.RecId
                               && vatDefTrans.Voucher  == taxTrans.Voucher;
                        if (!vatDefTrans)
                        {
                            vatDefTrans.clear();
                            postedTax = 0;
                            vatDefTrans.Voucher             = taxTrans.Voucher;
                            vatDefTrans.DefermentDate       = defermentLines.Period;
                            vatDefTrans.Source              = TaxModuleType::Purch;
                            vatDefTrans.InvoiceNumber       = VendTrans::findVoucherDate(taxTrans.Voucher,taxTrans.TransDate).Invoice;
                            vatDefTrans.Item                = vendInvoiceTrans.ItemId;
                            vatDefTrans.TransactionAmount   = vendInvoiceTrans.LineAmount;

                            if (vendInvoiceTrans.InventRefTransId)
                            {
                                while select RecId from taxTransloc
                                    where taxTransloc.InventTransId == vendInvoiceTrans.InventTransId
                                       && taxTransloc.TaxPeriod     == _vatDefermentInquiry.getSettlementPeriod()
                                {
                                    postedTax += abs(TaxTrans_IN::findRefRecId(taxTransloc.RecId).PostedTaxAmout);
                                }
                                vatDefTrans.DefermentInstallmentAmount  = -(postedTax / deferment.NumberOfDeferment);
                                vatDefTrans.DeferredAmount              = -postedTax;
                                if (defermentLines.TransferDebitAmount && confind(defermentLines.TransferDetails, taxTransloc.RecId))
                                {
                                    vatDefTrans.TransferAmount  = -(postedTax / deferment.NumberOfDeferment);
                                }
                                postedTax = 0;
                            }
                            else
                            {
                                while select SourceCurrencyCode, RecId from taxTransloc
                                    where taxTransloc.Voucher       == taxTrans.Voucher
                                       && taxTransloc.InventTransId == vendInvoiceTrans.InventTransId
                                       && taxTransloc.TaxPeriod     == _vatDefermentInquiry.getSettlementPeriod()
                                {
                                    taxTransLocal = TaxTrans_IN::findRefRecId(taxTransloc.RecId);
                                    vatDefTrans.DefermentInstallmentAmount += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Debit, taxTransloc.SourceCurrencyCode);
                                    if (defermentLines.TransferDebitAmount && confind(defermentLines.TransferDetails,taxTransloc.RecId))
                                    {
                                        vatDefTrans.TransferAmount+= CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Debit, taxTransloc.SourceCurrencyCode);
                                    }
                                }

                                vatDefTrans.DeferredAmount = deferment.vatDefermentAmount;
                            }
                            vatDefTrans.Date              = taxTrans.TransDate;
                            vatDefTrans.Currency          = taxTrans.CurrencyCode;
                            vatDefTrans.PurchaseOrder     = vendInvoiceTrans.PurchID;
                            vatDefTrans.TaxGroup          = taxTrans.TaxGroup;
                            vatDefTrans.ItemTaxGroup      = taxTrans.TaxItemGroup;
                            vatDefTrans.Allocation        = deferment.Allocation;
                            vatDefTrans.PaymantPer        = deferment.PaymentPer;
                            vatDefTrans.NumberOfDeferment = deferment.NumberOfDeferment;
                            vatDefTrans.Change            = deferment.Change;
                            vatDefTrans.AmountCurrency    = deferment.AmountCurrency;
                            vatDefTrans.Minimum           = deferment.Minimum;
                            vatDefTrans.RefRecId          = defermentLines.RecId;
                            vatDefTrans.FatherRecId       = deferment.RecId;
                            vatDefTrans.insert();

                            installmentLines = true;
                        }
                    }
                    if (deferment && !installmentLines && !defermentLinesLocal)
                    {
                        select vatDefTrans
                            where vatDefTrans.FatherRecId  == deferment.RecId
                               && vatDefTrans.RefRecId     == 0
                               && vatDefTrans.Voucher      == taxTrans.Voucher;
                        if (!vatDefTrans)
                        {
                            vatDefTrans.clear();
                            vatDefTrans.Voucher                     = taxTrans.Voucher;
                            vatDefTrans.DefermentDate               = taxTrans.TransDate;
                            vatDefTrans.Source                      = TaxModuleType::Purch;
                            vatDefTrans.InvoiceNumber               = VendTrans::findVoucherDate(taxTrans.Voucher,taxTrans.TransDate).Invoice;
                            vatDefTrans.Item                        = vendInvoiceTrans.ItemId;
                            vatDefTrans.TransactionAmount           = vendInvoiceTrans.LineAmount;
                            vatDefTrans.DefermentInstallmentAmount  = 0;
                            vatDefTrans.DeferredAmount              = 0;
                            vatDefTrans.TransferAmount              = 0;
                            vatDefTrans.Date                        = taxTrans.TransDate;
                            vatDefTrans.Currency                    = taxTrans.CurrencyCode;
                            vatDefTrans.PurchaseOrder               = vendInvoiceTrans.PurchID;
                            vatDefTrans.TaxGroup                    = taxTrans.TaxGroup;
                            vatDefTrans.ItemTaxGroup                = taxTrans.TaxItemGroup;
                            vatDefTrans.Allocation                  = deferment.Allocation;
                            vatDefTrans.PaymantPer                  = deferment.PaymentPer;
                            vatDefTrans.NumberOfDeferment           = deferment.NumberOfDeferment;
                            vatDefTrans.Change                      = deferment.Change;
                            vatDefTrans.AmountCurrency              = deferment.AmountCurrency;
                            vatDefTrans.Minimum                     = deferment.Minimum;
                            vatDefTrans.FatherRecId                 = deferment.RecId;
                            vatDefTrans.insert();
                        }
                    }
                }
            }

            select firstOnly RecId from vatDefTrans
                where (vatDefTrans.DefermentDate >= taxReportPeriod.FromDate &&
                       vatDefTrans.DefermentDate <= taxReportPeriod.ToDate ) ||
                      (vatDefTrans.DefermentDate <= taxReportPeriod.FromDate &&
                       vatDefTrans.TransferAmount == 0);

            if (vatDefTrans.RecId)
            {
                select sum(TransferAmount) from vatDefTrans
                     where vatDefTrans.DefermentDate >= taxReportPeriod.FromDate
                        && vatDefTrans.DefermentDate <= taxReportPeriod.ToDate;
                select sum(DefermentInstallmentAmount) from vatDefTransLoc
                    where vatDefTransLoc.DefermentDate >= taxReportPeriod.FromDate
                       && vatDefTransLoc.DefermentDate <= taxReportPeriod.ToDate;
                select sum(DefermentInstallmentAmount) from vatDefTransSearch
                    where vatDefTransSearch.DefermentDate  < taxReportPeriod.FromDate
                       && vatDefTransSearch.TransferAmount == 0;

                _tmpVATDefermentBalLine.From       = taxReportPeriod.FromDate;
                _tmpVATDefermentBalLine.To         = taxReportPeriod.ToDate;
                _tmpVATDefermentBalLine.OpeningBal = vatDefTransSearch.DefermentInstallmentAmount;
                _tmpVATDefermentBalLine.Deferred   = vatDefTransLoc.DefermentInstallmentAmount;
                _tmpVATDefermentBalLine.Transfer   = vatDefTrans.TransferAmount;
                _tmpVATDefermentBalLine.ClosingBal = (_tmpVATDefermentBalLine.OpeningBal +
                                                                   _tmpVATDefermentBalLine.Deferred ) -
                                                                   _tmpVATDefermentBalLine.Transfer;

                _tmpVATDefermentBalLine.TaxIdentificationNumber = _vatDefermentInquiry.getTIN();
                _tmpVATDefermentBalLine.TaxPeriod               = _vatDefermentInquiry.getSettlementPeriod();
                _tmpVATDefermentBalLine.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS6031</Label>
	<TitleField1>From</TitleField1>
	<TitleField2>To</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ClosingBal</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS22796</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Deferred</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS80263</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>From</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS4083</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OpeningBal</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS22797</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxIdentificationNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Label>@GLS5096</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriod</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxPeriod</ExtendedDataType>
			<Label>@GLS6030</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>To</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS53942</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Transfer</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS13891</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxIdentificationNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxIdentificationNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxIdentificationNumber</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_TmpVATDefermentBalLine_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxIdentificationNumber</Name>
					<Field>TaxIdentificationNumber</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxPeriodHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxPeriodHead</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<SourceEDT>TaxPeriod</SourceEDT>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxPeriodIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>