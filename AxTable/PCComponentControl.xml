<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCComponentControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCComponentControl extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        PCComponentAttributeGroup   componentAttributeGroup;

        PCComponentControlSubComponent  subComponentControl;

        _visitor.visitStart(this);

        // visit attribute groups
        while select componentAttributeGroup
        where componentAttributeGroup.ComponentControl == this.RecId
        {
            componentAttributeGroup.accept(_visitor);
        }

        // visit sub component relations
        while select subComponentControl
        where subComponentControl.ParentComponentControl == this.RecId
        {
            subComponentControl.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateExtended</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates the record.
    /// </summary>
    /// <param name="_duplicatedConfigurationControl">
    ///    A reference to a duplicate <c>PCConfigurationControl</c> record that will be associated with the
    ///    current definition.
    /// </param>
    /// <param name="_duplicatedParentComponentControl">
    ///    A reference to a duplicate <c>PCConfigurationControl</c> record that will be the parent that
    ///    contains the current definition.
    /// </param>
    /// <param name="_duplicatedComponentsMap">
    ///    holds the map from orginal components to duplicated components.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The duplicated component cannot be found.
    /// </exception>
    public void duplicateExtended(RefRecId _duplicatedConfigurationControl, RefRecId _duplicatedParentComponentControl, Map _duplicatedComponentsMap )
    {
        PCComponentControl          duplicate;
        PCComponentControl          childrenControl;

        PCComponentAttributeGroup   componentAttributeGroup;

        PCComponentControlRootComponent rootComponentControl;
        PCComponentControlSubComponent  subComponentControl;
        PCClass                         originalComponent;

        boolean                     isRootComponent = true;

        duplicate.data(this);
        duplicate.ConfigurationControl = _duplicatedConfigurationControl;
        // do insert to by-pass the logic in the insert method
        duplicate.doInsert();

        if (_duplicatedParentComponentControl)
        {
            isRootComponent = false;
            subComponentControl = PCComponentControlSubComponent::findByComponentControl(this.RecId);
            originalComponent   = PCClass::find(PCSubComponent::find(subComponentControl.SubComponent).ChildComponentClass);
            subComponentControl.duplicateSubComponentTree(duplicate.RecId,_duplicatedParentComponentControl);
        }
        else
        {
            rootComponentControl = PCComponentControlRootComponent::findByComponentControl(this.RecId);
            originalComponent    = PCClass::find(rootComponentControl.RootComponent);
            rootComponentControl.duplicateRootComponentTree(duplicate.RecId);
        }

        while select componentAttributeGroup
            where componentAttributeGroup.ComponentControl == this.RecId
        {
             componentAttributeGroup.duplicateExtended(duplicate.RecId,_duplicatedComponentsMap.lookup(originalComponent.RecId));
        }

        //duplicate the children
        while   select childrenControl
        join    subComponentControl
        where   subComponentControl.ParentComponentControl == this.RecId
        &&      childrenControl.RecId == subComponentControl.ComponentControl
        {
            childrenControl.duplicateExtended(_duplicatedConfigurationControl, duplicate.RecId, _duplicatedComponentsMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUIOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the display order of the element up or down.
    /// </summary>
    /// <param name="_up">
    ///    A <c>NoYes</c> enumeration value that indicates whether the element should be moved up.
    /// </param>
    public void moveUIOrder(NoYes _up)
    {
        PCComponentControl record;
        PCComponentControl recordToBeUpdated;
        Integer            uiOrder;
        PCComponentControlSubComponent subComponentControl;
        PCComponentControlSubComponent tmpSubComponentControl;

        recordToBeUpdated.data(this);

        if (PCComponentControlRootComponent::findByComponentControl(this.RecId))
        {
            //being the root, you can't be moved
            return;
        }
        else
        {
            subComponentControl = PCComponentControlSubComponent::findByComponentControl(this.RecId);
        }

        if (_up == NoYes::Yes)
        {
            // find the UI order number just before the current record
            select maxof(uiOrder) from record
                where record.ConfigurationControl == this.ConfigurationControl &&
                      record.uiOrder    < recordToBeUpdated.uiOrder
            exists  join RecId from tmpSubComponentControl
                where   tmpSubComponentControl.ParentComponentControl == subComponentControl.ParentComponentControl
                &&      tmpSubComponentControl.ComponentControl == record.RecId;
        }
        else
        {
            // find the UI order number just after the current record
            select minof(uiOrder) from record
                where record.ConfigurationControl == this.ConfigurationControl &&
                      record.uiOrder    > recordToBeUpdated.uiOrder
            exists  join RecId from tmpSubComponentControl
                where   tmpSubComponentControl.ParentComponentControl == subComponentControl.ParentComponentControl
                &&      tmpSubComponentControl.ComponentControl == record.RecId;
        }

        if (record.uiOrder == 0)
        {
            // this is the first UI order
            return;
        }

        uiOrder = record.uiOrder;

        ttsbegin;

        select forupdate firstonly record
            where   record.ConfigurationControl == recordToBeUpdated.ConfigurationControl  &&
                    record.uiOrder          == uiOrder
            exists  join RecId from tmpSubComponentControl
                where   tmpSubComponentControl.ParentComponentControl == subComponentControl.ParentComponentControl
                &&      tmpSubComponentControl.ComponentControl == record.RecId;

        // need to update to temporary value to avoid index violation
        record.uiOrder = -1;
        record.update();

        recordToBeUpdated = PCComponentControl::find(this.RecId, true);
        recordToBeUpdated.uiOrder = uiOrder;
        recordToBeUpdated.update();

        record.uiOrder = (_up == NoYes::Yes) ? recordToBeUpdated.uiOrder + 1 : recordToBeUpdated.uiOrder - 1;
        record.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PCComponentControl</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCComponentControl::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCComponentControl</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCComponentControl</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentControl find(RefRecId _recId, boolean _forupdate = false)
    {
        PCComponentControl record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRootComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCComponentControl</c> table.
    /// </summary>
    /// <param name="_model">
    /// A reference to a product configuration model.
    /// </param>
    /// <param name="_rootComponent">
    /// A reference to the root component of the tree.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCComponentControl</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentControl findByRootComponent(
        RefRecId    _model,
        RefRecId    _rootComponent,
        boolean     _forupdate = false)
    {
        PCComponentControl      record;
        PCConfigurationControl  modelControl;
        PCComponentControlRootComponent  rootComponentControl;

        if (!_model || !_rootComponent)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);

        select firstonly    record
            join  RecId from modelControl
                where modelControl.ConfigurationModel   == _model
                &&    modelControl.RecId                == record.ConfigurationControl
            join  firstonly RecId from rootComponentControl
            where   rootComponentControl.RootComponent == _rootComponent
            &&      rootComponentControl.ComponentControl == record.RecId;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySubComponentAndParentControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCComponentControl</c> table.
    /// </summary>
    /// <param name="_model">
    /// A reference to a product configuration model.
    /// </param>
    /// <param name="_subComponent">
    /// A reference to the sub-component of the tree.
    /// </param>
    /// <param name="_parentComponentControl">
    /// A reference to the containing component control.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCComponentControl</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentControl findBySubComponentAndParentControl(
        RefRecId    _model,
        RefRecId    _subComponent,
        RefRecId    _parentComponentControl,
        boolean     _forupdate = false)
    {
        PCComponentControl      record;
        PCConfigurationControl  modelControl;
        PCComponentControlSubComponent  subComponentControl;

        if (!_model || !_subComponent || !_parentComponentControl)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);

        select firstonly    record
            join  RecId from modelControl
                where modelControl.ConfigurationModel == _model
            join  firstonly RecId from subComponentControl
            where   subComponentControl.SubComponent == _subComponent
            &&      subComponentControl.ParentComponentControl == _parentComponentControl
            &&      subComponentControl.ComponentControl == record.RecId;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateFromModelAndRootComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the specified record in the <c>PCComponentControl</c> table.
    /// </summary>
    /// <param name="_configurationControl">
    /// A reference to a configuration control.
    /// </param>
    /// <param name="_component">
    /// A reference to a component.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCComponentControl</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentControl findOrCreateFromModelAndRootComponent(
        RefRecId _configurationControl,
        RefRecId _component,
        boolean _forupdate = false)
    {
        PCComponentControl              record;
        PCComponentControlRootComponent rootComponentControl;

        record.selectForUpdate(_forupdate);

        select      firstonly record
            where   record.ConfigurationControl == _configurationControl
        join    firstonly RecId from rootComponentControl
            where   rootComponentControl.ComponentControl == record.RecId
            &&      rootComponentControl.RootComponent == _component;

        if (record.RecId == 0)
        {
            record.ConfigurationControl = _configurationControl;
            record.uiOrder = 1;
            record.insert();

            rootComponentControl.ComponentControl   = record.RecId;
            rootComponentControl.RootComponent      = _component;
            rootComponentControl.insert();
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateFromModelAndSubComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the specified record in the <c>PCComponentControl</c> table.
    /// </summary>
    /// <param name="_configurationControl">
    /// A reference to a configuration control.
    /// </param>
    /// <param name="_subComponent">
    /// A reference to a sub-component.
    /// </param>
    /// <param name="_parentComponentControl">
    /// A reference to the component control of the parent.
    /// </param>
    /// <param name="_orderNumber">
    /// The order number assigned to the created component control.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCComponentControl</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentControl findOrCreateFromModelAndSubComponent(
        RefRecId _configurationControl,
        RefRecId _subComponent,
        RefRecId _parentComponentControl,
        int      _orderNumber,
        boolean _forupdate = false)
    {
        PCComponentControl              record;
        PCComponentControlSubComponent  subComponentControl;

        record.selectForUpdate(_forupdate);

        select      firstonly record
            where   record.ConfigurationControl == _configurationControl
        join    firstonly RecId from subComponentControl
            where   subComponentControl.ComponentControl == record.RecId
            &&      subComponentControl.SubComponent == _subComponent
            &&      subComponentControl.ParentComponentControl == _parentComponentControl;

        if (record.RecId == 0)
        {
            record.ConfigurationControl = _configurationControl;
            record.uiOrder = _orderNumber;
            record.insert();

            subComponentControl.ParentComponentControl  = _parentComponentControl;
            subComponentControl.ComponentControl        = record.RecId;
            subComponentControl.SubComponent            = _subComponent;
            subComponentControl.insert();
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS325885</DeveloperDocumentation>
	<Label>@SYS190608</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TableId</TitleField1>
	<TitleField2>RecId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCComponentControlRootComponent</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCComponentControlRootComponent</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigurationControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UIOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfigurationControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UIOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConfigurationControl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS190607</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>UIOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PC</ConfigurationKey>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS69861</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ControlClassIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>PC</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ConfigurationControl</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UIOrder</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Control</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PCConfigurationControl</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ControlContainedIn</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ComponentContained</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConfigurationControl</Name>
					<Field>ConfigurationControl</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>