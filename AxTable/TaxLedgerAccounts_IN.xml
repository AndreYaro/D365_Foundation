<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxLedgerAccounts_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxLedgerAccounts_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exciseDeferredTaxAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise deferred tax account number.
    /// </summary>
    /// <param name="_taxTable">
    /// The tax table.
    /// </param>
    /// <param name="_exciseECCNumber">
    /// The excise ECC number.
    /// </param>
    /// <param name="_exciseRecordType">
    /// The excise record type.
    /// </param>
    /// <param name="_taxDirection">
    /// The tax direction.
    /// </param>
    /// <param name="_claimPercentage">
    /// The claim percentage.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxLedgerAccounts_IN</c> class.
    /// </returns>
    public TaxLedgerAccounts_IN exciseDeferredTaxAccountNum(
        TaxTable            _taxTable,
        RefRecId            _exciseECCNumber,
        ExciseRecordType_IN _exciseRecordType,
        TaxDirection        _taxDirection,
        Percent             _claimPercentage)
    {
        TaxLedgerAccounts_IN    taxLedgerAccounts;

        RefRecId           taxledgerSetupTable;
        RefRecId           taxledgerSetupAll;

        taxledgerSetupTable = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN,  TaxAccountCode_IN::Table, _exciseECCNumber).RecId;
        taxledgerSetupAll   = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN,  TaxAccountCode_IN::All).RecId;

        switch (_taxDirection)
        {
            case TaxDirection::IncomingTax:

                if (_exciseRecordType == ExciseRecordType_IN::RG23A)
                {
                    if (_claimPercentage)
                    {
                        taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupTable,TaxAccountType_IN::ExciseDeferredRG23AAccount,_taxTable.TaxComponentTable_IN);

                        if (!taxLedgerAccounts)
                        {
                            taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupAll,TaxAccountType_IN::ExciseDeferredRG23AAccount,_taxTable.TaxComponentTable_IN);
                        }
                    }
                }

                if (_exciseRecordType == ExciseRecordType_IN::RG23C)
                {
                    if (_claimPercentage)
                    {
                        taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupTable,TaxAccountType_IN::ExciseDeferredRG23CAccount,_taxTable.TaxComponentTable_IN);

                        if (!taxLedgerAccounts)
                        {
                            taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupAll,TaxAccountType_IN::ExciseDeferredRG23CAccount,_taxTable.TaxComponentTable_IN);
                        }
                    }
                }
                break;
        }

        return taxLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseTaxAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise tax account number.
    /// </summary>
    /// <param name="_taxTable">
    /// The tax table.
    /// </param>
    /// <param name="_exciseECCNumber">
    /// The excise ECC number.
    /// </param>
    /// <param name="_exciseRecordType">
    /// The excise record type.
    /// </param>
    /// <param name="_taxDirection">
    /// The tax direction.
    /// </param>
    /// <param name="_directSettlement">
    /// The direct settlement.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxLedgerAccounts_IN</c> class.
    /// </returns>
    public TaxLedgerAccounts_IN exciseTaxAccountNum(
        TaxTable            _taxTable,
        RefRecId            _exciseECCNumber,
        ExciseRecordType_IN _exciseRecordType,
        TaxDirection        _taxDirection,
        DirectSettlement_IN _directSettlement = DirectSettlement_IN::None)

    {
        TaxLedgerAccounts_IN    taxLedgerAccounts;
        RefRecId                taxledgerSetupTable;
        RefRecId                taxledgerSetupAll;

        taxledgerSetupTable = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN,  TaxAccountCode_IN::Table, _exciseECCNumber).RecId;
        taxledgerSetupAll   = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN,  TaxAccountCode_IN::All).RecId;
        switch (_taxDirection)
        {
            case TaxDirection::IncomingTax :

                if (_directSettlement == DirectSettlement_IN::PLA)
                {
                    taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupTable, TaxAccountType_IN::ExcisePLAAccount, _taxTable.TaxComponentTable_IN);

                    if (!taxLedgerAccounts)
                    {
                        taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupAll, TaxAccountType_IN::ExcisePLAAccount, _taxTable.TaxComponentTable_IN);
                    }
                }
                else if (_exciseRecordType != ExciseRecordType_IN::RG23D)
                {
                    taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupTable, TaxAccountType_IN::ExciseRecoverableAccount, _taxTable.TaxComponentTable_IN);

                    if (!taxLedgerAccounts)
                    {
                        taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupAll, TaxAccountType_IN::ExciseRecoverableAccount, _taxTable.TaxComponentTable_IN);
                    }
                }
                else if (_exciseRecordType == ExciseRecordType_IN::RG23D)
                {
                    taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupTable, TaxAccountType_IN::ExciseRG23DRecoverableAccount, _taxTable.TaxComponentTable_IN);

                    if (!taxLedgerAccounts)
                    {
                        taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupAll, TaxAccountType_IN::ExciseRG23DRecoverableAccount, _taxTable.TaxComponentTable_IN);
                    }
                }
                break;

            case TaxDirection::OutgoingTax :
                if (_directSettlement == DirectSettlement_IN::PLA)
                {
                    taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupTable, TaxAccountType_IN::ExcisePLAAccount, _taxTable.TaxComponentTable_IN);

                    if (!taxLedgerAccounts)
                    {
                        taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupAll, TaxAccountType_IN::ExcisePLAAccount, _taxTable.TaxComponentTable_IN);
                    }
                }
                else if (_directSettlement == DirectSettlement_IN::RG23A || _directSettlement == DirectSettlement_IN::RG23C )
                {
                    taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupTable, TaxAccountType_IN::ExciseRecoverableAccount, _taxTable.TaxComponentTable_IN);

                    if (!taxLedgerAccounts)
                    {
                        taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupAll, TaxAccountType_IN::ExciseRecoverableAccount, _taxTable.TaxComponentTable_IN);
                    }
                }
                else if (_exciseRecordType != ExciseRecordType_IN::RG23D)
                {
                    taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupTable, TaxAccountType_IN::ExcisePayableAccount, _taxTable.TaxComponentTable_IN);

                    if (!taxLedgerAccounts)
                    {
                        taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupAll, TaxAccountType_IN::ExcisePayableAccount, _taxTable.TaxComponentTable_IN);
                    }
                }
                else if (_exciseRecordType == ExciseRecordType_IN::RG23D)
                {
                    taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupTable, TaxAccountType_IN::ExciseRG23DPayableAccount, _taxTable.TaxComponentTable_IN);

                    if (!taxLedgerAccounts)
                    {
                        taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(taxledgerSetupAll, TaxAccountType_IN::ExciseRG23DPayableAccount, _taxTable.TaxComponentTable_IN);
                    }
                }
                break;
        }

        return taxLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseTaxAccountNumForScrapQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method used to get the LedgerDimensionDefaultAccount.
    /// </summary>
    /// <param name="_taxTable">
    /// TaxTable buffer.
    /// </param>
    /// <param name="_exciseECCNumber">
    /// ExciseECCNumber for which the ledgerDimension is found.
    /// </param>
    /// <param name="_exciseRecordType">
    /// ExciseRecordType for which the LedgerDimension is found.
    /// </param>
    /// <param name="_exciseType_IN">
    /// Based on exciseType_IN ledgerDimension and ledgerAccountExp is found.
    /// </param>
    /// <param name="_directSettlement">
    /// DirectSettlement_IN for which the LedgerDimension is found.
    /// </param>
    /// <returns>
    /// Returns LedgerDimensionDefaultAccount.
    /// </returns>
    /// <remarks>
    /// This method used to get the LedgerDimensionDefaultAccount.
    /// </remarks>
    public container exciseTaxAccountNumForScrapQty(
        TaxTable                  _taxTable,
        RefRecId                  _exciseECCNumber,
        ExciseRecordType_IN       _exciseRecordType,
        ExciseType_IN             _exciseType_IN,
        DirectSettlement_IN       _directSettlement = DirectSettlement_IN::None)

    {
        LedgerDimensionDefaultAccount   ledgerDimension;
        LedgerDimensionDefaultAccount   ledgerAccountExp;

        switch (_exciseType_IN)
        {
            case ExciseType_IN::Manufacturer :

                if (_exciseRecordType != ExciseRecordType_IN::RG23D)
                {
                    if (_directSettlement == DirectSettlement_IN::None)
                    {
                        ledgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::Table, _exciseECCNumber).RecId, TaxAccountType_IN::ExcisePayableAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;

                        if (!ledgerDimension)
                        {
                           ledgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::All, 0).RecId, TaxAccountType_IN::ExcisePayableAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;
                        }
                    }
                    else if (_directSettlement == DirectSettlement_IN::RG23A || _directSettlement == DirectSettlement_IN::RG23C)
                    {
                        ledgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::Table, _exciseECCNumber).RecId, TaxAccountType_IN::ExciseRecoverableAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;

                        if (!ledgerDimension)
                        {
                            ledgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::All, 0).RecId, TaxAccountType_IN::ExciseRecoverableAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;
                        }
                    }
                    else
                    {
                        ledgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::Table, _exciseECCNumber).RecId, TaxAccountType_IN::ExcisePLAAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;

                        if (!ledgerDimension)
                        {
                            ledgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::All, 0).RecId, TaxAccountType_IN::ExcisePLAAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;
                        }
                    }
                }
                break;

            case ExciseType_IN::Trader :

                if (_exciseRecordType == ExciseRecordType_IN::RG23D)
                {
                    ledgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::Table, _exciseECCNumber).RecId, TaxAccountType_IN::ExciseRG23DPayableAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;

                    if (!ledgerDimension)
                    {
                        ledgerDimension = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::All, 0).RecId, TaxAccountType_IN::ExciseRG23DPayableAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;
                    }
                }
                break;
        }

        ledgerAccountExp = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::Table, _exciseECCNumber).RecId, TaxAccountType_IN::ExciseExpenseAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;
        if (!ledgerAccountExp)
        {
            ledgerAccountExp = TaxLedgerAccounts_IN::findByTaxAccounts(TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxTable.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::All, 0).RecId, TaxAccountType_IN::ExciseExpenseAccount, _taxTable.TaxComponentTable_IN).LedgerDimension;
        }

        return [ledgerAccountExp, ledgerDimension];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseAccountsForReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise accounts for return order.
    /// </summary>
    /// <param name="_taxAccountGroup">
    /// The tax account group.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component.
    /// </param>
    /// <param name="_registrationNumber">
    /// The registration number.
    /// </param>
    /// <param name="_dispositionId">
    /// The disposition id.
    /// </param>
    /// <param name="_exciseRecordType">
    /// The excise record type.
    /// </param>
    /// <returns>
    /// The instance of the <c>RefRecId</c> class.
    /// </returns>
    public RefRecId getExciseAccountsForReturnOrder(
        RefRecId                _taxAccountGroup,
        RefRecId                _taxComponent,
        RefRecId                _registrationNumber,
        ReturnDispositionCodeId _dispositionId,
        ExciseRecordType_IN     _exciseRecordType)
    {
        TaxLedgerAccounts_IN taxLedgerAccounts;
        TaxAccountType_IN    accountType;
        RefRecId             ledgerAccountSetupTable;
        RefRecId             ledgerAccountSetupAll;

        ledgerAccountSetupTable = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxAccountGroup,TaxAccountCode_IN::Table,_registrationNumber).RecId;
        ledgerAccountSetupAll = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(_taxAccountGroup,TaxAccountCode_IN::All).RecId;

        if (ReturnDispositionCode::find(_dispositionId).DispositionAction == DispositionAction::CreditOnly)
        {
            taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(ledgerAccountSetupTable, TaxAccountType_IN::ExciseExpenseAccount, _taxComponent);
            if (!taxLedgerAccounts)
            {
                taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(ledgerAccountSetupAll, TaxAccountType_IN::ExciseExpenseAccount, _taxComponent);
            }
        }
        else
        {
            accountType = _exciseRecordType == ExciseRecordType_IN::RG23D
                          ? TaxAccountType_IN::ExciseRG23DPayableAccount
                          : TaxAccountType_IN::ExciseRecoverableAccount;

            taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(ledgerAccountSetupTable, accountType, _taxComponent);
            if (!taxLedgerAccounts)
            {
                taxLedgerAccounts = TaxLedgerAccounts_IN::findByTaxAccounts(ledgerAccountSetupAll, accountType, _taxComponent);
            }
        }

        return taxLedgerAccounts.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean                  ret;
        TaxLedgerAccountGroup_IN taxLedgerAccountGroup;
        TaxComponentTable_IN     taxComponentTable;
        LedgerPostingType        postingType;
        LedgerJournalAC          mainAccountId;
        MainAccount              mainAccount;

        ret = super(_fieldName, _arrayIndex);

        taxLedgerAccountGroup = TaxLedgerAccountGroup_IN::find(TaxLedgerAccountSetup_IN::find(this.TaxLedgerAccountSetup).TaxLedgerAccountGroup);

        taxComponentTable = TaxComponentTable_IN::find(this.TaxComponentTable);

        switch (_fieldName)
        {
            case fieldstr(TaxLedgerAccounts_IN, TaxComponentTable) :
                if (this.TaxComponentTable && taxLedgerAccountGroup && !TaxComponentTable_IN::exist(TaxComponentTable_IN::taxTypeComponent2TaxType(taxLedgerAccountGroup.TaxType),
                                                                                                                    taxComponentTable.Component))
                {
                    ret = ret && checkFailed(strfmt("@GLS5073", taxComponentTable.Component, TaxComponentTable_IN::taxTypeComponent2TaxType(taxLedgerAccountGroup.TaxType)));
                }
                break;

            case fieldstr(TaxLedgerAccounts_IN, LedgerDimension) :
                postingType = TaxLedgerAccounts_IN::taxType2PostingType(TaxComponentTable_IN::taxTypeComponent2TaxType(taxLedgerAccountGroup.TaxType));
                if (this.LedgerDimension && taxLedgerAccountGroup)
                {
                    mainAccount   = LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.LedgerDimension);
                    mainAccountId = mainAccount.MainAccountId;
                    if (mainAccount.PostingType != postingType)
                    {
                        ret = ret && checkFailed(strfmt("@GLS5075", mainAccountId, postingType));
                    }
                }
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        TaxLedgerAccountSetup_IN taxLedgerAccountSetup;

        ret = super();

        if (ret)
        {
            taxLedgerAccountSetup = TaxLedgerAccountSetup_IN::find(this.TaxLedgerAccountSetup);

            if (taxLedgerAccountSetup.AccountCode == TaxAccountCode_IN::Table && !taxLedgerAccountSetup.TaxRegistrationNumberTable)
            {
                ret = checkFailed(strfmt("@SYS26332", "@SYS59571"));
            }

            if (this.TaxComponentTable && !this.RecId && TaxLedgerAccounts_IN::findByTaxAccounts(this.TaxLedgerAccountSetup, this.AccountType, this.TaxComponentTable))
            {
                ret = ret && checkFailed(strfmt("@GLS63369", "@GLS5091",
                                                             tablestr(TaxLedgerAccounts_IN),
                                                             "@SYS27730",
                                                             this.AccountType,
                                                             TaxComponentTable_IN::find(this.TaxComponentTable).Component));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPayableExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if account payable exist.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// If 'True', the account payable exist.
    /// </returns>
    public static boolean accountPayableExist(
        RefRecId   _accountNum,
        RefRecId   _taxComponent,
        TaxType_IN _taxType = TaxType_IN::None)
    {
        TaxAccountType_IN taxAccountType;

        switch (_taxType)
        {
            case TaxType_IN::Excise :
                taxAccountType = TaxAccountType_IN::ExcisePayableAccount;
                break;

            case TaxType_IN::SalesTax :
                taxAccountType = TaxAccountType_IN::SalesTaxPayableAccount;
                break;

            case TaxType_IN::ServiceTax :
                taxAccountType = TaxAccountType_IN::ServiceTaxPayableAccount;
                break;

            case TaxType_IN::VAT :
                taxAccountType = TaxAccountType_IN::VATPayableAccount;
                break;

            default:
                break;
        }

        return _accountNum && _taxComponent &&
                    (select firstonly taxLedgerAccounts_IN
                        where taxLedgerAccounts_IN.AccountType       == taxAccountType
                           && taxLedgerAccounts_IN.TaxComponentTable == _taxComponent
                           && taxLedgerAccounts_IN.LedgerDimension   == _accountNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountRecoverableExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if account recoverable exist.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// If 'True', the account recoverable exist.
    /// </returns>
    public static boolean accountRecoverableExist(
        RefRecId   _accountNum,
        RefRecId   _taxComponent,
        TaxType_IN _taxType = TaxType_IN::None)
    {
        TaxAccountType_IN taxAccountType;

        switch (_taxType)
        {
            case TaxType_IN::Excise :
                taxAccountType = TaxAccountType_IN::ExciseRecoverableAccount;
                break;

            case TaxType_IN::ServiceTax :
                taxAccountType = TaxAccountType_IN::ServiceTaxRecoverableAccount;
                break;

            case TaxType_IN::VAT :
                taxAccountType = TaxAccountType_IN::VATRecoverableAccount;
                break;

            default :
                break;
        }

        return _accountNum && _taxComponent &&
                    (select firstonly taxLedgerAccounts_IN
                        where taxLedgerAccounts_IN.AccountType       == taxAccountType
                           && taxLedgerAccounts_IN.TaxComponentTable == _taxComponent
                           && taxLedgerAccounts_IN.LedgerDimension   == _accountNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeCustoms2AccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account type by account type customs.
    /// </summary>
    /// <param name="_accountTypeCustoms">
    /// The account type customs.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAccountType_IN</c> class.
    /// </returns>
    public static TaxAccountType_IN accountTypeCustoms2AccountType(TaxAccountTypeCustoms_IN _accountTypeCustoms)
    {
        TaxAccountType_IN accountType;

        switch (_accountTypeCustoms)
        {
            case TaxAccountTypeCustoms_IN::ImportDutyExpenseAccount:
                accountType = TaxAccountType_IN::CustomsImportDutyExpenseAccount;
                break;

            case TaxAccountTypeCustoms_IN::ImportDutyPayableAccount:
                accountType = TaxAccountType_IN::CustomsImportDutyPayableAccount;
                break;

            case TaxAccountTypeCustoms_IN::ExportDutyExpenseAccount:
                accountType = TaxAccountType_IN::CustomsExportDutyExpenseAccount;
                break;

            case TaxAccountTypeCustoms_IN::ExportDutyPayableAccount:
                accountType = TaxAccountType_IN::CustomsExportDutyPayableAccount;
                break;

            case TaxAccountTypeCustoms_IN::EximAAReceivableAccount:
                accountType = TaxAccountType_IN::EximAAReceivableAccount;
                break;

            case TaxAccountTypeCustoms_IN::EximDFIAReceivableAccount:
                accountType = TaxAccountType_IN::EximDFIAReceivableAccount;
                break;

            case TaxAccountTypeCustoms_IN::EximDEPBReceivableAccount:
                accountType = TaxAccountType_IN::EximDEPBReceivableAccount;
                break;

            default:
                break;
        }
        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeExcise2AccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account type by account type excise.
    /// </summary>
    /// <param name="_accountTypeExcise">
    /// The account type excise.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAccountType_IN</c> class.
    /// </returns>
    public static TaxAccountType_IN accountTypeExcise2AccountType(TaxAccountTypeExcise_IN _accountTypeExcise)
    {
        TaxAccountType_IN accountType;

        switch (_accountTypeExcise)
        {
            case TaxAccountTypeExcise_IN::DeferredRG23AAccount:
                accountType = TaxAccountType_IN::ExciseDeferredRG23AAccount;
                break;

            case TaxAccountTypeExcise_IN::DeferredRG23CAccount:
                accountType = TaxAccountType_IN::ExciseDeferredRG23CAccount;
                break;

            case TaxAccountTypeExcise_IN::InterimPLAAccount:
                accountType = TaxAccountType_IN::ExciseInterimPLAAccount;
                break;

            case TaxAccountTypeExcise_IN::PayableAccount:
                accountType = TaxAccountType_IN::ExcisePayableAccount;
                break;

            case TaxAccountTypeExcise_IN::PLAAccount:
                accountType = TaxAccountType_IN::ExcisePLAAccount;
                break;

            case TaxAccountTypeExcise_IN::RecoverableAccount:
                accountType = TaxAccountType_IN::ExciseRecoverableAccount;
                break;

            case TaxAccountTypeExcise_IN::RG23DPayableAccount:
                accountType = TaxAccountType_IN::ExciseRG23DPayableAccount;
                break;

            case TaxAccountTypeExcise_IN::RG23DRecoverableAccount:
                accountType = TaxAccountType_IN::ExciseRG23DRecoverableAccount;
                break;

            case TaxAccountTypeExcise_IN::ExpenseAccount:
                accountType = TaxAccountType_IN::ExciseExpenseAccount;
                break;

            default:
                break;
        }

        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeSales2AccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account type by account type sales.
    /// </summary>
    /// <param name="_accountTypeSales">
    /// The account type sales.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAccountType_IN</c> class.
    /// </returns>
    public static TaxAccountType_IN accountTypeSales2AccountType(TaxAccountTypeSalesTax_IN _accountTypeSales)
    {
        TaxAccountType_IN accountType;

        switch (_accountTypeSales)
        {
            case TaxAccountTypeSalesTax_IN::ExpenseAccount:
                accountType = TaxAccountType_IN::SalesTaxExpenseAccount;
                break;

            case TaxAccountTypeSalesTax_IN::PayableAccount:
                accountType = TaxAccountType_IN::SalesTaxPayableAccount;
                break;

            default:
                break;
        }

        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeService2AccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account type by account type service.
    /// </summary>
    /// <param name="_accountTypeService">
    /// The account type service.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAccountType_IN</c> class.
    /// </returns>
    public static TaxAccountType_IN accountTypeService2AccountType(TaxAccountTypeServiceTax_IN _accountTypeService)
    {
        TaxAccountType_IN accountType;

        switch (_accountTypeService)
        {
            case TaxAccountTypeServiceTax_IN::ExpenseAccount:
                accountType = TaxAccountType_IN::ServiceTaxExpenseAccount;
                break;

            case TaxAccountTypeServiceTax_IN::InterimPayableAccount:
                accountType = TaxAccountType_IN::ServiceTaxInterimPayableAccount;
                break;

            case TaxAccountTypeServiceTax_IN::InterimRecoverableAccount:
                accountType = TaxAccountType_IN::ServiceTaxInterimRecoverableAccount;
                break;

            case TaxAccountTypeServiceTax_IN::PayableAccount:
                accountType = TaxAccountType_IN::ServiceTaxPayableAccount;
                break;

            case TaxAccountTypeServiceTax_IN::RecoverableAccount:
                accountType = TaxAccountType_IN::ServiceTaxRecoverableAccount;
                break;

            default:
                break;
        }

        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeVAT2AccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account type by account type VAT.
    /// </summary>
    /// <param name="_accountTypeVAT">
    /// The account type VAT.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAccountType_IN</c> class.
    /// </returns>
    public static TaxAccountType_IN accountTypeVAT2AccountType(TaxAccountTypeVAT_IN _accountTypeVAT)
    {
        TaxAccountType_IN accountType;

        switch (_accountTypeVAT)
        {
            case TaxAccountTypeVAT_IN::DeferredAccount:
                accountType = TaxAccountType_IN::VATDeferredAccount;
                break;

            case TaxAccountTypeVAT_IN::PayableAccount:
                accountType = TaxAccountType_IN::VATPayableAccount;
                break;

            case TaxAccountTypeVAT_IN::RecoverableAccount:
                accountType = TaxAccountType_IN::VATRecoverableAccount;
                break;

            case TaxAccountTypeVAT_IN::ExpenseAccount:
                accountType = TaxAccountType_IN::VATExpenseAccount;
                break;

            default:
                break;
        }
        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAccountGroupAndRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if account group and registration number exist.
    /// </summary>
    /// <param name="_taxAccountGroup">
    /// The tax account group.
    /// </param>
    /// <param name="_registrationNumber">
    /// The registration number.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component.
    /// </param>
    /// <param name="_taxTypeComponent">
    /// The tax type component.
    /// </param>
    /// <returns>
    /// Return 'True' if account group and registration number exist.
    /// </returns>
    public static boolean existAccountGroupAndRegistrationNumber(
        TaxAccountGroup_IN  _taxAccountGroup,
        RefRecId            _registrationNumber,
        RefRecId            _taxComponent = 0,
        TaxTypeComponent_IN _taxTypeComponent = TaxTypeComponent_IN::VAT)
    {
        TaxLedgerAccountGroup_IN    taxLedgerAccountGroup;
        TaxLedgerAccounts_IN        taxLedgerAccounts;
        TaxLedgerAccounts_IN        taxLedgerAccountsLoc;
        TaxLedgerAccountSetup_IN    taxLedgerAccountSetup;

        if ( _taxAccountGroup && _registrationNumber && _taxComponent)
        {
            select firstonly taxLedgerAccountGroup
                join taxLedgerAccountSetup
                where taxLedgerAccountGroup.TaxType                    == _taxTypeComponent
                   && taxLedgerAccountGroup.TaxAccountGroup            == _taxAccountGroup
                   && taxLedgerAccountSetup.TaxLedgerAccountGroup      == taxLedgerAccountGroup.RecId
                   && taxLedgerAccountSetup.TaxRegistrationNumberTable == _registrationNumber;
            if (taxLedgerAccountGroup)
            {
                select firstonly taxLedgerAccountsLoc
                    where taxLedgerAccountsLoc.TaxLedgerAccountSetup == taxLedgerAccountSetup.RecId
                       && taxLedgerAccountsLoc.TaxComponentTable     == _taxComponent;

                return taxLedgerAccountsLoc ? true : false;
            }
            else
            {
                select firstonly taxLedgerAccountGroup
                    join taxLedgerAccountSetup
                    where taxLedgerAccountGroup.TaxType               == _taxTypeComponent
                       && taxLedgerAccountGroup.TaxAccountGroup       == _taxAccountGroup
                       && taxLedgerAccountSetup.TaxLedgerAccountGroup == taxLedgerAccountGroup.RecId
                       && taxLedgerAccountSetup.AccountCode           == TaxAccountCode_IN::All
                    join taxLedgerAccounts
                    where taxLedgerAccounts.TaxLedgerAccountSetup == taxLedgerAccountSetup.RecId
                       && taxLedgerAccounts.TaxComponentTable     == _taxComponent;

                return taxLedgerAccountGroup ? true : false;
            }
        }
        else
        {
            select firstonly taxLedgerAccounts
                join TaxRegistrationNumberTable, AccountCode from taxLedgerAccountSetup
                where taxLedgerAccountSetup.TaxRegistrationNumberTable == _registrationNumber
                   && taxLedgerAccountSetup.AccountCode                == TaxAccountCode_IN::Table
                join TaxAccountGroup, RecId from taxLedgerAccountGroup
                where taxLedgerAccountGroup.TaxAccountGroup    == _taxAccountGroup
                   && taxLedgerAccountGroup.RecId              == taxLedgerAccountSetup.TaxLedgerAccountGroup
                   && taxLedgerAccounts.TaxLedgerAccountSetup  == taxLedgerAccountSetup.RecId;

                return taxLedgerAccounts ? true : false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether exist an instance of <c>TaxLedgerAccountGroup_IN</c>.
    /// </summary>
    /// <param name="_taxAccountGroup">
    /// The tax account group is used to find record.
    /// </param>
    /// <param name="_taxTypeComponent">
    /// The tax type component is used to find record.
    /// </param>
    /// <returns>
    /// Returns true, if exsit record; otherwise, false.
    /// </returns>
    public static boolean existAll(
        TaxAccountGroup_IN  _taxAccountGroup,
        TaxTypeComponent_IN _taxTypeComponent)
    {
        TaxLedgerAccountGroup_IN    taxLedgerAccountGroup;
        TaxLedgerAccounts_IN        taxLedgerAccounts;
        TaxLedgerAccountSetup_IN    taxLedgerAccountSetup;

        select firstonly TaxAccountGroup, TaxType from taxLedgerAccountGroup
            join TaxLedgerAccountGroup, AccountCode from taxLedgerAccountSetup
            where taxLedgerAccountGroup.TaxAccountGroup   == _taxAccountGroup
               && taxLedgerAccountGroup.TaxType           == _taxTypeComponent
               && taxLedgerAccountSetup.TaxLedgerAccountGroup == taxLedgerAccountGroup.RecId
               && taxLedgerAccountSetup.AccountCode           == TaxAccountCode_IN::All
               join TaxLedgerAccountSetup from taxLedgerAccounts
               where taxLedgerAccounts.TaxLedgerAccountSetup == taxLedgerAccountSetup.RecId;

        return taxLedgerAccountGroup ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existGTAAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if GTA accounts exist.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <returns>
    /// Return 'True' if GTA account exist.
    /// </returns>
    public static boolean existGTAAccounts(RefRecId _accountNum)
    {
        TaxLedgerAccounts_IN taxLedgerAccounts;

        select firstonly RecId from taxLedgerAccounts
            where taxLedgerAccounts.LedgerDimension     == _accountNum
                &&  (taxLedgerAccounts.AccountType      == TaxAccountType_IN::ServiceTaxInterimPayableAccount
                    || taxLedgerAccounts.AccountType    == TaxAccountType_IN::ServiceTaxPayableAccount);

        return (taxLedgerAccounts.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if ledger account exist.
    /// </summary>
    /// <param name="_taxAccountGroup">
    /// The tax account group.
    /// </param>
    /// <param name="_registrationNumber">
    /// The registration number.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component.
    /// </param>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <returns>
    /// Return 'True' if ledger account exists.
    /// </returns>
    public static boolean existLedgerAccount(
        TaxAccountGroup_IN _taxAccountGroup,
        RefRecId           _registrationNumber,
        RefRecId           _taxComponent,
        RefRecId           _accountNum)
    {
        TaxLedgerAccounts_IN     taxLedgerAccounts;
        TaxLedgerAccounts_IN     taxLedgerAccountsLoc;
        boolean                  found = false;
        TaxLedgerAccountSetup_IN taxLedgerAccountSetup;
        TaxLedgerAccountGroup_IN taxLedgerAccountGroup;

        if ( _taxAccountGroup && _registrationNumber && _taxComponent && _accountNum)
        {
            select firstonly taxLedgerAccounts
                join taxLedgerAccountGroup
                    where taxLedgerAccountGroup.TaxAccountGroup           == _taxAccountGroup
                join taxLedgerAccountSetup
                   where  taxLedgerAccountSetup.TaxLedgerAccountGroup     == taxLedgerAccountGroup.RecId
                      && taxLedgerAccountSetup.TaxRegistrationNumberTable == _registrationNumber
                      && taxLedgerAccounts.TaxLedgerAccountSetup          == taxLedgerAccountSetup.RecId;

            if (taxLedgerAccounts)
            {
                select firstonly taxLedgerAccountsLoc
                    join taxLedgerAccountGroup
                        where taxLedgerAccountGroup.TaxAccountGroup           == _taxAccountGroup
                    join taxLedgerAccountSetup
                       where  taxLedgerAccountSetup.TaxLedgerAccountGroup     == taxLedgerAccountGroup.RecId
                          && taxLedgerAccountSetup.TaxRegistrationNumberTable == _registrationNumber
                          && taxLedgerAccountsLoc.TaxLedgerAccountSetup       == taxLedgerAccountSetup.RecId
                          && taxLedgerAccountsLoc.TaxComponentTable           == _taxComponent
                          && taxLedgerAccountsLoc.LedgerDimension             == _accountNum;

                return taxLedgerAccountsLoc ? true : false;
            }
            else
            {
                select firstonly TaxLedgerAccountSetup, TaxComponentTable, LedgerDimension from taxLedgerAccountsLoc
                    join TaxAccountGroup from taxLedgerAccountGroup
                        where taxLedgerAccountGroup.TaxAccountGroup           == _taxAccountGroup
                    join TaxLedgerAccountGroup, AccountCode from taxLedgerAccountSetup
                        where taxLedgerAccountSetup.TaxLedgerAccountGroup     == taxLedgerAccountGroup.RecId
                              && taxLedgerAccountSetup.AccountCode            == TaxAccountCode_IN::All
                              && taxLedgerAccountsLoc.TaxLedgerAccountSetup   == taxLedgerAccountSetup.RecId
                              && taxLedgerAccountsLoc.TaxComponentTable       == _taxComponent
                              && taxLedgerAccountsLoc.LedgerDimension         == _accountNum;

                return _taxAccountGroup && _registrationNumber && _taxComponent && taxLedgerAccountsLoc.RecId;
            }
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxLedgerAccounts_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing TaxLedgerAccounts_IN table.
    /// </returns>
    public static TaxLedgerAccounts_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxLedgerAccounts_IN    taxLedgerAccounts;

        taxLedgerAccounts.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxLedgerAccounts.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxLedgerAccounts
            where taxLedgerAccounts.RecId == _recId;

        return taxLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>TaxLedgerAccounts_IN</c> table specified by tax accounts.
    /// </summary>
    /// <param name="_taxAccountSetup">
    /// The tax account setup reference record ID of the <c>TaxLedgerAccounts_IN</c> record to find.
    /// </param>
    /// <param name="_accountType">
    /// The tax account type of the <c>TaxLedgerAccounts_IN</c> record to find.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component reference record ID of the <c>TaxLedgerAccounts_IN</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>TaxLedgerAccounts_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxLedgerAccounts_IN findByTaxAccounts(
        RefRecId          _taxAccountSetup,
        TaxAccountType_IN _accountType,
        RefRecId          _taxComponent,
        boolean           _forUpdate = false)
    {
        TaxLedgerAccounts_IN        taxLedgerAccounts;

        if (_taxAccountSetup && _taxComponent)
        {
            taxLedgerAccounts.selectForUpdate(_forUpdate);

            select firstonly taxLedgerAccounts
                where taxLedgerAccounts.TaxLedgerAccountSetup == _taxAccountSetup
                   && taxLedgerAccounts.AccountType           == _accountType
                   && taxLedgerAccounts.TaxComponentTable     == _taxComponent;
        }

        return taxLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets account number.
    /// </summary>
    /// <param name="_taxAccountSetup">
    /// The tax account setup.
    /// </param>
    /// <param name="_accountType">
    /// The account type.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component.
    /// </param>
    /// <returns>
    /// The instance of the <c>RefRecId</c> class.
    /// </returns>
    public static RefRecId getAccountNum(
        RefRecId          _taxAccountSetup,
        TaxAccountType_IN _accountType,
        RefRecId          _taxComponent)
    {
        return TaxLedgerAccounts_IN::findByTaxAccounts(_taxAccountSetup, _accountType, _taxComponent).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the Account.
    /// </summary>
    /// <param name="_formControl">
    /// An instance of <c>FormControl</c>
    /// </param>
    /// <param name="_taxAccountSetup">
    /// The recid of tax account setup is used to add rang in query.
    /// </param>
    /// <param name="_component">
    /// The recid of component is used to add rang in query.
    /// </param>
    /// <param name="_taxTypeComponent">
    /// Is not used.
    /// </param>
    public static void lookupAccount(
        FormControl         _formControl,
        RefRecId            _taxAccountSetup,
        RefRecId            _component,
        TaxTypeComponent_IN _taxTypeComponent)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        // If "All" is there then get all the records from Tax Ledger Account table
        // for this posting group and which have account code as "All"
        sysTableLookup          = SysTableLookup::newParameters(tablenum(TaxLedgerAccounts_IN), _formControl);
        queryBuildDataSource    = query.addDataSource(tablenum(TaxLedgerAccounts_IN));
        queryBuildDataSource.orderMode(1);
        queryBuildDataSource.addSortField(fieldnum(TaxLedgerAccounts_IN, LedgerDimension));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxLedgerAccounts_IN, TaxLedgerAccountSetup));
        queryBuildRange.value(queryValue(_taxAccountSetup));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxLedgerAccounts_IN, TaxComponentTable));
        queryBuildRange.value(queryValue(_component));

        sysTableLookup.addLookupfield(fieldnum(TaxLedgerAccounts_IN, LedgerDimension));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the component.
    /// </summary>
    /// <param name="_formControl">
    /// An instance of <c>FormControl</c>
    /// </param>
    /// <param name="_taxAccountSetup">
    /// The recid of tax account setup is used to add rang in query.
    /// </param>
    /// <param name="_taxTypeComponent">
    /// Is not used.
    /// </param>
    public static void lookupComponent(
        FormControl         _formControl,
        RefRecId            _taxAccountSetup,
        TaxTypeComponent_IN _taxTypeComponent)
    {
        SysTableLookup       sysTableLookup;
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      queryBuildRange;

        // If "All" is there then get all the records from Tax Ledger Account table
        // for this posting group and which have account code as "All"
        sysTableLookup          = SysTableLookup::newParameters(tablenum(TaxLedgerAccounts_IN), _formControl, false);
        queryBuildDataSource    = query.addDataSource(tablenum(TaxLedgerAccounts_IN));
        queryBuildDataSource.orderMode(1);
        queryBuildDataSource.addSortField(fieldnum(TaxLedgerAccounts_IN, TaxComponentTable));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxLedgerAccounts_IN, TaxLedgerAccountSetup));
        queryBuildRange.value(queryValue(_taxAccountSetup));

        sysTableLookup.addLookupfield(fieldnum(TaxLedgerAccounts_IN, TaxComponentTable));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupComponentPLA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the component PLA.
    /// </summary>
    /// <param name="_formControl">
    /// An instance of <c>FormControl</c>
    /// </param>
    /// <param name="_taxAccountSetup">
    /// The recid of tax account setup is used to add rang in query.
    /// </param>
    /// <param name="_taxAccountType">
    /// The tax account type is used to add rang in query.
    /// </param>
    /// <returns>
    /// The quered records.
    /// </returns>
    public static Common lookupComponentPLA(
        FormControl       _formControl,
        RefRecId          _taxAccountSetup,
        TaxAccountType_IN _taxAccountType)
    {
        SysReferenceTableLookup       sysTableLookup  = SysReferenceTableLookup::newParameters(tablenum(TaxComponentTable_IN), _formControl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildDataSource queryBuildDataSourceNew;
        QueryBuildRange      queryBuildRange;

        queryBuildDataSource        = query.addDataSource(tablenum(TaxComponentTable_IN));
        queryBuildDataSourceNew     = queryBuildDataSource.addDataSource(tablenum(TaxLedgerAccounts_IN));
        queryBuildDataSourceNew.addLink(fieldnum(TaxComponentTable_IN, RecId), fieldnum(TaxLedgerAccounts_IN, TaxComponentTable));

        queryBuildRange = queryBuildDataSourceNew.addRange(fieldnum(TaxLedgerAccounts_IN, TaxLedgerAccountSetup));
        queryBuildRange.value(queryValue(_taxAccountSetup));

        queryBuildRange = queryBuildDataSourceNew.addRange(fieldnum(TaxLedgerAccounts_IN, AccountType));
        queryBuildRange.value(queryValue(_taxAccountType));

        sysTableLookup.addLookupfield(fieldnum(TaxComponentTable_IN, Component));

        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomsComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the customer component.
    /// </summary>
    /// <param name="_formControl">
    /// An instance of <c>FormControl</c>
    /// </param>
    /// <param name="_taxAccountSetup">
    /// The recid of tax account setup is used to add rang in query.
    /// </param>
    /// <param name="_taxTypeComponent">
    /// Is not used.
    /// </param>
    /// <param name="_taxAccountType">
    /// The tax account type is used to add rang in query.
    /// </param>
    /// <returns>
    /// The quered records.
    /// </returns>
    public static Common lookupCustomsComponent(
        FormControl         _formControl,
        RefRecId            _taxAccountSetup,
        TaxTypeComponent_IN _taxTypeComponent,
        TaxAccountType_IN   _taxAccountType)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbd1;
        QueryBuildDataSource    qbd2;

        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxComponentTable_IN), _formControl);

        qbd1 = query.addDataSource(tablenum(TaxComponentTable_IN));

        qbd2 = qbd1.addDataSource(tablenum(TaxLedgerAccounts_IN));
        qbd2.addLink(fieldnum(TaxComponentTable_IN, RecId), fieldnum(TaxLedgerAccounts_IN, TaxComponentTable));

        qbd2.addRange(fieldnum(TaxLedgerAccounts_IN, TaxLedgerAccountSetup)).value(queryValue(_taxAccountSetup));
        qbd2.addRange(fieldnum(TaxLedgerAccounts_IN, AccountType)).value(queryValue(_taxAccountType));

        sysTableLookup.addLookupfield(fieldnum(TaxComponentTable_IN, Component));
        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPLAAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the PLA Account.
    /// </summary>
    /// <param name="_formControl">
    /// An instance of <c>FormControl</c>
    /// </param>
    /// <param name="_taxAccountSetup">
    /// The recid of tax account setup is used to add rang in query.
    /// </param>
    /// <param name="_taxAccountType">
    /// The tax account type is used to add rang in query.
    /// </param>
    /// <returns>
    /// The quered records.
    /// </returns>
    public static Common lookupPLAAccount(
        FormControl       _formControl,
        RefRecId          _taxAccountSetup,
        TaxAccountType_IN _taxAccountType)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxLedgerAccounts_IN), _formControl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tablenum(TaxLedgerAccounts_IN));

        queryBuildRange = queryBuildDataSource.addRange(fieldnum(TaxLedgerAccounts_IN, TaxLedgerAccountSetup));
        queryBuildRange.value(queryValue(_taxAccountSetup));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(TaxLedgerAccounts_IN, AccountType));
        queryBuildRange.value(queryValue(_taxAccountType));

        sysTableLookup.addLookupfield(fieldnum(TaxLedgerAccounts_IN, LedgerDimension));
        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxType2PostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets posting type by tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The instance of the <c>LedgerPostingType</c> class.
    /// </returns>
    public static LedgerPostingType taxType2PostingType(TaxType_IN _taxType)
    {
        LedgerPostingType postingType;

        switch (_taxType)
        {
            case TaxType_IN::SalesTax:
                postingType = LedgerPostingType::SalesTax_IN;
                break;
            case TaxType_IN::VAT:
                postingType = LedgerPostingType::VAT_IN;
                break;
            case TaxType_IN::ServiceTax:
                postingType = LedgerPostingType::ServiceTax_IN;
                break;
            case TaxType_IN::Excise:
                postingType = LedgerPostingType::Excise_IN;
                break;
            case TaxType_IN::Customs:
                postingType = LedgerPostingType::Customs_IN;
                break;

            default:
                break;
        }

        return postingType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63750</DeveloperDocumentation>
	<FormRef>TaxLedgerAccountGroup_IN</FormRef>
	<Label>@GLS5091</Label>
	<TitleField1>AccountType</TitleField1>
	<TitleField2>TaxComponentTable</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>LedgerAccountSetupTypeComponentIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxLedgerAccountSetup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxAccountSetUp</Name>
			<Label>@SYS12687</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxLedgerAccountSetup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxLedgerAccounts</Name>
			<Label>@SYS11800</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxComponentTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TaxAccountType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxComponentTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5042</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxLedgerAccountSetup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS59571</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxComponentTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxComponentTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerAccountSetupTypeComponentIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxLedgerAccountSetup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxComponentTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS139233</EntityRelationshipRole>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_TaxLedgerAccounts_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxComponentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5042</EntityRelationshipRole>
			<RelatedTable>TaxComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxComponentTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxComponentTable_IN_TaxLedgerAccounts_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxComponentTable</Name>
					<Field>TaxComponentTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxLedgerAccountSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5092</EntityRelationshipRole>
			<RelatedTable>TaxLedgerAccountSetup_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxLedgerAccountSetup_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxLedgerAccountSetup_IN_TaxLedgerAccounts_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxLedgerAccountSetup</Name>
					<Field>TaxLedgerAccountSetup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>