<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpTaxReport_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpTaxReport_IT extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public boolean create(
        TaxPeriod           _taxPeriod,
        FromDate            _fromDate,
        ToDate              _toDate,
        TaxBookTypeJournal  _taxBookTypeJournal,
        TaxBookId           _fromTaxBookId,
        TaxBookId           _toTaxBookId)
    {
        boolean              ret = false;
        TaxTrans             taxTrans;
        TaxBook              taxBook;
        CurrencyCode         companyCurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        boolean              recordExist;
        TmpTaxReport_IT      tmpTaxReport;
        TransDate            oldTransDate        = dateNull();
        Voucher              oldVoucher          = '';
        TaxCode              oldTaxCode          = '';
        TaxBookRecId         oldTaxBook;
        InvoiceId            invoiceId;
        boolean              initFromTrans;
        TaxBookStatus        taxBookStatus;
        CurrencyCode         invoiceCurrency;
        Voucher              lastVoucher;
        TransDate            lastTransDate;
        GeneralJournalAccountEntry   generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        Voucher              voucher, relatedVoucher;
        SubledgerVoucherGeneralJournalEntry     subledgerVoucherGeneralJournalEntry;
        boolean reportUseVatDueDate_W = TaxParameters::reportUseVatDueDate_W();
        boolean useCompetencePeriod = TaxReportERHelper_IT::useCompetencePeriod();
        ReportInTaxCurrency_IT reportInTaxCurrency = TaxPeriodHead::find(_taxPeriod).ReportInTaxCurrency_IT;

        void writeRecord()
        {
            if (recordExist)
            {
                ttsBegin;
                tmpTaxReport.selectForUpdate(true);
                tmpTaxReport.TaxBaseAmount      +=  this.TaxBaseAmount;
                tmpTaxReport.TaxAmount          +=  this.TaxAmount;
                tmpTaxReport.TaxBaseConditional +=  this.TaxBaseConditional;
                tmpTaxReport.TaxConditional     +=  this.TaxConditional;
                tmpTaxReport.TaxBaseInCostPrice +=  this.TaxBaseInCostPrice;
                tmpTaxReport.TaxInCostPrice     +=  this.TaxInCostPrice;
                tmpTaxReport.update();
                ttsCommit;
            }
            else
            {
                if (lastVoucher != this.Voucher || lastTransDate != this.TransDate)
                {
                    lastVoucher   = this.Voucher;
                    lastTransDate = this.TransDate;
                }

                this.insert();
            }
        }

        select this;
        tmpTaxReport.linkPhysicalTableInstance(this);

        QueryRun queryRun = new QueryRun(this.getTaxTransQuery(_taxPeriod, _fromDate, _toDate));

        Set tmpTaxRecordSet = new Set(Types::String);
        Set tmpTaxRecordPurchSet = new Set(Types::String);

        while (queryRun.next())
        {
            taxTrans = queryRun.get(tableNum(TaxTrans));
            taxBook = queryRun.get(tableNum(TaxBook));

            if (!TmpTaxReport_IT::checkTaxTrans(taxTrans))
            {
                continue;
            }

            if ((!_fromTaxBookId    && !_toTaxBookId) ||
                (taxBook.TaxBookId  >= _fromTaxBookId &&
                 taxBook.TaxBookId  <= _toTaxBookId) ||
                (taxBook.SalesTaxBookId >= _fromTaxBookId &&
                 taxBook.SalesTaxBookId <= _toTaxBookId))
            {
                if (TmpTaxReport_ITSummary::isTaxBookTypeIncluded(taxBook, _taxBookTypeJournal) ||
                    (_taxBookTypeJournal == TaxBookTypeJournal::Sales &&
                     taxBook.TaxBookType   == TaxBookType::Purchase     &&
                     taxTrans.TaxDirection == TaxDirection::UseTax      &&
                     taxBook.SalesTaxBookId))
                {
                    if (reportInTaxCurrency)
                    {
                        TaxReportERHelper_IT::switchTaxTransAmounts(taxTrans);
                    }

                    relatedVoucher = LedgerTransVoucherLink::find(LedgerTransVoucherLink::findVoucherGroupId(taxTrans.Voucher, taxTrans.TransDate)).Voucher;
                    voucher = (taxTrans.taxTrans_IT().isSplitPayment() || this.relatedAccrualExistsForVoucher(taxTrans.Voucher, taxTrans.TransDate)) ?
                        taxTrans.Voucher : relatedVoucher;

                    if (oldVoucher == taxTrans.Voucher)
                    {
                        invoiceId = this.InvoiceId;
                    }
                    this.clear();

                    this.TaxBookType       = taxBook.TaxBookType;
                    this.TaxBook           = taxTrans.TaxBook;
                    this.TaxBookSection    = taxTrans.TaxBookSection;
                    this.TransDate         = taxTrans.TransDate;
                    this.Voucher           = voucher ? voucher : taxTrans.Voucher;
                    this.TaxCode           = taxTrans.TaxCode;
                    this.TaxName           = TaxTable::find(this.TaxCode).TaxName;
                    this.InvoiceId         = invoiceId;

                    // these 2 fields are added for correct sorting in the SSRS report
                    this.RelatedVoucher    = relatedVoucher ? relatedVoucher : taxTrans.Voucher;
                    this.SplitPaymReverse  = taxTrans.taxTrans_IT().SplitPaymReverse;

                    if (reportUseVatDueDate_W)
                    {
                        this.VatDueDate_W = taxTrans.taxTrans_W().VatDueDate_W;
                        if (useCompetencePeriod)
                        {
                            this.initCompetencePeriod(_fromDate, _toDate);
                        }
                    }

                    // documentDate, invoiceId, moduleCustVend, custVendAC,
                    // invoiceAmountCur, invoiceCurrency, invoiceAmount,
                    // taxValue and tax amounts in tax currency
                    if (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                        ||  taxTrans.TaxDirection == TaxDirection::TaxExemptSales)
                    {
                        this.ModuleCustVend = ModuleCustVend::Cust;

                        if (oldTransDate != this.TransDate || oldVoucher != this.Voucher || oldTaxCode != this.TaxCode || oldTaxBook != this.TaxBook)
                        {
                            initFromTrans = this.initCust(taxTrans);

                            oldTransDate = taxTrans.TransDate;
                            oldVoucher   = taxTrans.Voucher;
                            oldTaxCode   = taxTrans.TaxCode;
                            oldTaxBook   = taxTrans.TaxBook;
                        }

                        if (initFromTrans)
                        {
                            this.initFromTableIdRecId(taxTrans.SourceTableId, taxTrans.SourceRecId);
                        }

                        this.TaxValue      = TaxData::percent(this.TaxCode, this.TransDate, -taxTrans.TaxBaseAmount);
                        this.TaxBaseAmount = -taxTrans.TaxBaseAmount;

                        // Do not revert if it is a reverse charge
                        this.TaxAmount = (taxTrans.TaxValue < 0 && TaxGroupData::find(taxTrans.TaxGroup, taxTrans.TaxCode).ReverseCharge_W) ?
                            taxTrans.TaxAmount : -taxTrans.TaxAmount;
                    }
                    else
                    {
                        this.ModuleCustVend = ModuleCustVend::Vend;

                        //Initialize the TaxBook for EU purchase
                        if (_taxBookTypeJournal == TaxBookTypeJournal::Sales &&
                            taxTrans.TaxDirection == TaxDirection::UseTax &&
                            taxBook.SalesTaxBookId)
                        {
                            this.TaxBookType    = TaxBookType::Sales;
                            this.TaxBook        = TaxBook::findByTaxBookId(taxBook.SalesTaxBookId).RecId;
                        }

                        if (oldTransDate != this.TransDate || oldVoucher != this.Voucher || oldTaxCode != this.TaxCode || oldTaxBook != this.TaxBook)
                        {
                            initFromTrans = this.initVend(taxTrans);

                            oldTransDate = taxTrans.TransDate;
                            oldVoucher   = taxTrans.Voucher;
                            oldTaxCode   = taxTrans.TaxCode;
                            oldTaxBook   = taxTrans.TaxBook;
                        }

                        if (initFromTrans)
                        {
                            this.initFromTableIdRecId(taxTrans.SourceTableId, taxTrans.SourceRecId);
                        }

                        this.TaxValue           = TaxData::percent(this.TaxCode, this.TransDate, taxTrans.TaxBaseAmount);

                        this.TaxAmount          = taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST;
                        this.TaxInCostPrice     = taxTrans.TaxInCostPriceMST;

                        this.calcTaxBaseDetails(taxTrans);
                    }

                    // Conditional tax?
                    if (TaxTable::find(taxTrans.TaxCode).PaymentTaxCode)
                    {
                        this.TaxBaseConditional = this.TaxBaseAmount;
                        this.TaxConditional     = this.TaxAmount;
                        this.TaxBaseAmount      = 0;
                        this.TaxAmount          = 0;
                    }

                    this.initFromCustVendTable(taxTrans);

                    // only show the invoice currency if it is different from company currency
                    invoiceCurrency = this.InvoiceCurrency;
                    if ((reportInTaxCurrency && this.InvoiceCurrency == taxTrans.CurrencyCode)
                        || (!reportInTaxCurrency && this.InvoiceCurrency == companyCurrencyCode))
                    {
                        this.InvoiceCurrency  = '';
                        this.InvoiceAmountCur = 0;
                    }
                    else
                    {
                        this.InvoiceCurrency = taxTrans.SourceCurrencyCode;
                    }

                    if ((reportInTaxCurrency && this.InvoiceCurrency == taxTrans.CurrencyCode)
                        || (!reportInTaxCurrency && this.InvoiceCurrency == companyCurrencyCode))
                    {
                        this.InvoiceCurrency  = invoiceCurrency;
                    }

                    if (!tmpTaxRecordSet.add(strFmt('%1#%2#%3', this.Voucher, this.InvoiceId, this.TaxCode)))
                    {
                        select firstOnly tmpTaxReport
                            where tmpTaxReport.TaxBookType == this.TaxBookType
                                && tmpTaxReport.TaxBook == this.TaxBook
                                && tmpTaxReport.TaxBookSection == this.TaxBookSection
                                && tmpTaxReport.Voucher == this.Voucher
                                && tmpTaxReport.InvoiceId == this.InvoiceId
                                && tmpTaxReport.TransDate == this.TransDate
                                && tmpTaxReport.TaxCode == this.TaxCode;
                        
                        recordExist = tmpTaxReport.RecId ? true : false;
                    }
                    else
                    {
                        recordExist = false;
                    }

                    // no purchase transaction if EU purchase transaction for sales TaxBook
                    // but TaxBookType 'Sales' selected
                    if (! (_taxBookTypeJournal == TaxBookTypeJournal::Sales &&
                           taxBook.TaxBookType == TaxBookType::Purchase))
                    {
                        writeRecord();
                    }

                    // EU purchase transaction for sales TaxBook
                    if ((_taxBookTypeJournal == TaxBookTypeJournal::Empty ||
                         _taxBookTypeJournal == TaxBookTypeJournal::Sales) &&
                         taxTrans.TaxDirection == TaxDirection::UseTax &&
                         taxBook.SalesTaxBookId)
                    {
                        this.TaxBookType        = TaxBookType::Sales;
                        this.TaxBook            = TaxBook::findByTaxBookId(taxBook.SalesTaxBookId).RecId;

                        //if pct.Exempt from tax is filled and use Tax is marked,then total Tax ,Base amounts should not be deducted with pct.Exempted Tax and Base amounts
                        if (taxTrans.TaxInCostPrice)
                        {
                            this.TaxAmount = taxTrans.TaxAmount;
                            this.TaxBaseAmount = taxTrans.TaxBaseAmount;
                            this.TaxInCostPrice = 0;
                            this.TaxBaseInCostPrice = 0;
                        }

                        if (!tmpTaxRecordPurchSet.add(strFmt('%1#%2', this.Voucher, this.TaxCode)) && taxTrans.TaxOrigin != TaxOrigin::TaxReversed)
                        {
                            select firstOnly tmpTaxReport
                                where tmpTaxReport.TaxBookType == this.TaxBookType
                                    && tmpTaxReport.TaxBook == this.TaxBook
                                    && tmpTaxReport.TaxBookSection == this.TaxBookSection
                                    && tmpTaxReport.Voucher == this.Voucher
                                    && tmpTaxReport.TaxCode == this.TaxCode;

                            recordExist = tmpTaxReport.RecId ? true : false;
                        }
                        else
                        {
                            recordExist = false;
                        }

                        writeRecord();
                    }
                    ret = true;
                }
            }
        }

        if (!_toTaxBookId)
        {
            _toTaxBookId = (select firstonly TaxBookId from taxBook order by TaxBookId desc where taxBook.TaxPeriod == _taxPeriod).TaxBookId;
        }

        while select taxBook
            where taxBook.TaxBookId >= _fromTaxBookId
               && taxBook.TaxBookId <= _toTaxBookId
               && taxBook.TaxPeriod == _taxPeriod
        {
            if (!taxBook.closedTo() || (taxBook.closedTo() && taxBook.closedTo() > _fromDate))
            {
                select firstonly tmpTaxReport index VoucherIdx
                    where tmpTaxReport.TaxBookType == taxBook.TaxBookType
                       && tmpTaxReport.TaxBook     == taxBook.RecId;

                if (!tmpTaxReport
                    && TmpTaxReport_ITSummary::isTaxBookTypeIncluded(taxBook, _taxBookTypeJournal))
                {
                    taxBookStatus = TaxBookStatus::findByPeriodDateBookId(_taxPeriod, _fromDate, _toDate, taxBook.RecId);
                    if (!TaxReportPeriod::find(_taxPeriod, _fromDate).Closed
                        || taxBookStatus.FirstPageNo <= taxBookStatus.LastPageNo)
                    {
                        this.clear();
                        this.TaxBookType       = taxBook.TaxBookType;
                        this.TaxBook           = taxBook.RecId;
                        this.insert();
                        ret = true;
                    }
                }
            }
        }

        TaxReportERContext_IT taxReportERContext = TaxReportERContext_IT::current();
        if (taxReportERContext)
        {
            while select taxBook
                where taxBook.TaxPeriod == _taxPeriod
                    && taxBook.IncludeZeroLines_IT == NoYes::No
            {
                if (TmpTaxReport_ITSummary::isTaxBookIncluded(
                    taxBook,
                    _taxPeriod,
                    _fromDate,
                    _toDate,
                    _taxBookTypeJournal,
                    _fromTaxBookId,
                    _toTaxBookId))
                {
                    delete_from tmpTaxReport
                        where tmpTaxReport.TaxAmount == 0
                            && tmpTaxReport.TaxBaseAmount == 0
                            && tmpTaxReport.TaxBaseConditional == 0
                            && tmpTaxReport.TaxConditional  == 0
                            && tmpTaxReport.TaxBaseInCostPrice == 0
                            && tmpTaxReport.TaxInCostPrice == 0
                            && tmpTaxReport.TaxBook == taxBook.RecId;
                }
            }
        }
        else
        {
            TaxReportContext_IT taxReportContext = TaxReportContext_IT::current();
            if (!taxReportContext || taxReportContext.parmDeleteZeroLines())
            {
                delete_from tmpTaxReport
                    where tmpTaxReport.TaxAmount == 0
                        && tmpTaxReport.TaxBaseAmount == 0
                        && tmpTaxReport.TaxBaseConditional == 0
                        && tmpTaxReport.TaxConditional  == 0
                        && tmpTaxReport.TaxBaseInCostPrice == 0
                        && tmpTaxReport.TaxInCostPrice == 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxBaseDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax base amounts.
    /// </summary>
    /// <param name = "_taxTrans">
    /// The tax transaction.
    /// </param>
    protected void calcTaxBaseDetails(TaxTrans _taxTrans)
    {
        if (_taxTrans.SourceTaxAmountCur)
        {
            if (!_taxTrans.TaxAutogenerated && _taxTrans.SourceRegulateAmountCur)
            {
                this.TaxBaseAmount = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmount * (_taxTrans.SourceRegulateAmountCur - _taxTrans.TaxInCostPriceRegulated) / _taxTrans.SourceRegulateAmountCur);
            }
            else
            {
                TaxValue vatExemptPercent = TaxData::find(this.TaxCode, this.TransDate, _taxTrans.TaxBaseAmount).VATExemptPct;
                AmountCur taxInCostPriceRaw;

                if (vatExemptPercent)
                {
                    // The lack of rounding of taxInCostPrice is done intentionally
                    taxInCostPriceRaw = _taxTrans.SourceTaxAmountCur * vatExemptPercent / 100;
                }

                this.TaxBaseAmount = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmount * (_taxTrans.SourceTaxAmountCur - taxInCostPriceRaw) / _taxTrans.SourceTaxAmountCur);
            }
        }
        else
        {
            this.TaxBaseAmount = _taxTrans.TaxBaseAmount;
        }

        if (this.TaxInCostPrice)
        {
            this.TaxBaseInCostPrice = _taxTrans.TaxBaseAmount - this.TaxBaseAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendName</Name>
				<Source><![CDATA[
    public Name getCustVendName (utcDateTime _createdDateTime, Int64  _party)
    {
        DirOrganizationName dirOrganisationName;
        DirPartyTable dirPartyTable = DirPartyTable::findRec(_party);

        if (dirPartyTable.baseType() != DirPartyBaseType::Person)
        {
            select validTimeState(_createdDateTime) Name from dirOrganisationName where dirOrganisationName.Organization == _party;
            return dirOrganisationName.Name;
        }
        else
        {
            return dirPartyTable.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCust</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the table buffer with values from the Customer module.
    /// </summary>
    /// <param name="_taxTrans">
    ///     This parameter is used to search for the source document.
    /// </param>
    /// <returns>
    ///     Returns false if the source documents to initialize the buffer was found; otherwise - true.
    /// </returns>
    public boolean initCust(TaxTrans   _taxTrans)
    {
        CustInvoiceJour custInvoiceJour;
        ProjInvoiceJour projInvoiceJour;
        CustTrans       custTrans;
        boolean         initFromTrans;

        custInvoiceJour = CustInvoiceJour::findFromTaxTrans(this.Voucher, this.TransDate);
        if (!custInvoiceJour
            && _taxTrans.SourceTableId == tableNum(CustTrans))
        {
            custInvoiceJour = CustInvoiceJour::findRecId(_taxTrans.taxTrans_IT().InvoiceRefRecId);
        }
        else if (!custInvoiceJour
            && _taxTrans.SourceTableId == tableNum(TaxTrans)
            && TaxGroupHeading::find(_taxTrans.TaxGroup).SplitPayment_IT == NoYes::Yes)
        {
            custTrans = CustTrans::findByVoucher(this.Voucher);
            this.InvoiceId = custTrans.Invoice;
            this.DocumentDate = custTrans.TransDate;
            this.CustVendAC = custTrans.AccountNum;
        }

        if (custInvoiceJour.RecId)
        {
            this.initFromCustVendInvoiceJour(custInvoiceJour, _taxTrans.TaxOrigin == TaxOrigin::Payment);
        }
        else
        {
            select firstonly projInvoiceJour
                where projInvoiceJour.InvoiceDate   == this.TransDate &&
                      projInvoiceJour.LedgerVoucher == this.Voucher;
            if (!projInvoiceJour)
            {
                custTrans   = custTrans::find(_taxTrans.taxTrans_IT().InvoiceRefRecId);
                select firstonly projInvoiceJour
                    where projInvoiceJour.InvoiceDate   == custTrans.TransDate &&
                          projInvoiceJour.LedgerVoucher == custTrans.Voucher;
            }
            if (projInvoiceJour.RecId)
            {
                this.initFromCustVendInvoiceJour(projInvoiceJour);
            }
            else
            {
                initFromTrans = true;
            }
        }

        return initFromTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the table buffer with values from the <c>CustVendTable</c> map.
    /// </summary>
    /// <param name="_taxTrans">
    ///     The parameters used for initialization of a number of fields in the buffer.
    /// </param>
    public void initFromCustVendTable(TaxTrans  _taxTrans)
    {
        CustVendTable   custVendTable;
        TaxVATNumTable  taxVatNumTable_OrigVend;
        VendInvoiceJour vendInvoiceJour_OrigVend;
        VendTable       vendTable_OrigVend;
        boolean         useDefaultLogic = true;
        boolean         useOriginalVendorInReporting = false;

        switch (this.ModuleCustVend)
        {
            case ModuleCustVend::Cust:
                custVendTable = CustTable::find(this.CustVendAC);
                break;
            case ModuleCustVend::Vend:
                custVendTable = VendTable::find(this.CustVendAC);
                vendTable_OrigVend = custVendTable.data();
                useOriginalVendorInReporting = vendTable_OrigVend.OriginalVendorInReporting_IT;
                break;
        }

        if (useOriginalVendorInReporting)
        {
            vendInvoiceJour_OrigVend = this.getVendInvoiceJour(_taxTrans);
            if (vendInvoiceJour_OrigVend && vendInvoiceJour_OrigVend.VATNum)
            {
                select firstOnly taxVatNumTable_OrigVend
                    where taxVatNumTable_OrigVend.VATNum == vendInvoiceJour_OrigVend.VATNum;
        
                if (taxVatNumTable_OrigVend.Name == '')
                {
                    select firstOnly vendTable_OrigVend
                        where vendTable_OrigVend.VATNum == taxVatNumTable_OrigVend.VATNum;
        
                    this.CustVendName = this.getCustVendName(_taxTrans.createdDateTime, vendTable_OrigVend.party);
                    if (this.CustVendName == '')
                    {
                        this.CustVendName = this.getCustVendName(_taxTrans.createdDateTime, custVendTable.party);
                    }
                }
                else
                {
                    this.CustVendName = taxVatNumTable_OrigVend.Name;
                }
                this.VATNum = taxVatNumTable_OrigVend.VATNum;
                this.FiscalCode = '';
                useDefaultLogic = false;
            }
        }

        if (useDefaultLogic)
        {
            this.CustVendName = this.getCustVendName(_taxTrans.createdDateTime, custVendTable.party);
            VATNumJournal vatNumInvoice = this.getInvoiceLevelVATNum(_taxTrans.SourceRecId, _taxTrans.SourceTableId);
            this.VATNum       = vatNumInvoice ? vatNumInvoice : custVendTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _taxTrans.TransDate);
            this.FiscalCode   = custVendTable.FiscalCode;
        }

        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForVATDeclarations() && _taxTrans.PartyTaxId)
        {
            TaxRegistration taxRegistration = TaxRegistration::find(_taxTrans.PartyTaxId);
            LogisticsLocation logisticsLocation = LogisticsLocation::find(
                DirPartyLocation::findRec(taxRegistration.DirPartyLocation).Location);

            this.CustVendName = logisticsLocation.Description ? logisticsLocation.Description : this.CustVendName;
            this.VATNum = taxRegistration.RegistrationNumber ? taxRegistration.RegistrationNumber : this.VATNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTableIdRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines the table buffer to initialize the current <c>TmpTaxReport_IT</c> record
    /// </summary>
    /// <param name="_tableId">
    ///     The TableId value for source buffer.
    /// </param>
    /// <param name="_recId">
    ///     The RecId value for source buffer.
    /// </param>
    public void initFromTableIdRecId(TableId _tableId, RecId _recId)
    {
        switch (_tableId)
        {
            case tablenum(CustTrans):
                this.initFromCustVendTrans(CustTrans::find(_recId), true);
                break;

            case tablenum(VendTrans):
                this.initFromCustVendTrans(VendTrans::find(_recId), true);
                break;

            case tablenum(CustInvoiceJour):
                this.initFromCustVendInvoiceJour(CustInvoiceJour::findRecId(_recId), true);
                break;

            case tablenum(ProjInvoiceJour):
                this.initFromCustVendInvoiceJour(ProjInvoiceJour::findRecId(_recId), true);
                break;

            case tablenum(VendInvoiceJour):
                this.initFromCustVendInvoiceJour(VendInvoiceJour::findRecId(_recId), true);
                break;

            case tableNum(LedgerJournalTrans):
                this.initFromLedgerJournalTrans(LedgerJournalTrans::findRecId(_recId, false));
                break;

            case tableNum(InventTransferJourLine):
                this.initFromInventTransferJourLine(InventTransferJourLine::findRecId(_recId, false));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVend</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the table buffer with values from the Vendor module.
    /// </summary>
    /// <param name="_taxTrans">
    ///     This parameter is used to search for the source document.
    /// </param>
    /// <returns>
    ///     Returns false if the source documents to initialize the buffer was found; otherwise - true.
    /// </returns>
    public boolean initVend(TaxTrans _taxTrans)
    {
        VendInvoiceJour vendInvoiceJour;
        boolean         initFromTrans;

        vendInvoiceJour = this.getVendInvoiceJour(_taxTrans);

        if (vendInvoiceJour.RecId)
        {
            this.initFromCustVendInvoiceJour(vendInvoiceJour);
        }
        else
        {
            initFromTrans = true;
        }

        return initFromTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the table buffer with values from the <c>CustVendInvoiceJour</c> map.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    ///     The table buffer that contains the values to set as the default on the new record.
    /// </param>
    /// <param name="_initFromSettleAmount">
    ///     This parameter determines whether to recalculate the amount from settled amount.
    /// </param>
    public void initFromCustVendInvoiceJour(
        CustVendInvoiceJour _custVendInvoiceJour,
        boolean             _initFromSettleAmount = false)
    {
        CustVendTrans   custVendTrans;

        TaxTrans taxTrans;
        select firstonly TaxPeriod, CurrencyCode from taxTrans
            where taxTrans.Voucher == _custVendInvoiceJour.LedgerVoucher
                && taxTrans.TransDate == _custVendInvoiceJour.InvoiceDate;

        ReportInTaxCurrency_IT reportInTaxCurrency = TaxPeriodHead::find(taxTrans.TaxPeriod).ReportInTaxCurrency_IT;

        this.DocumentDate       = _custVendInvoiceJour.DocumentDate ? _custVendInvoiceJour.DocumentDate : _custVendInvoiceJour.InvoiceDate;
        this.InvoiceId          = _custVendInvoiceJour.InvoiceId;
        this.ModuleCustVend     = _custVendInvoiceJour.TableId == tableNum(VendInvoiceJour) ? ModuleCustVend::Vend : ModuleCustVend::Cust;
        this.CustVendAC         = _custVendInvoiceJour.InvoiceAccount;
        this.InvoiceAmountCur   = _custVendInvoiceJour.InvoiceAmount;
        this.InvoiceCurrency    = _custVendInvoiceJour.CurrencyCode;
        if (!reportInTaxCurrency)
        {
            this.InvoiceAmount      = _custVendInvoiceJour.amountMST(this.InvoiceAmountCur);
        }

        if (_initFromSettleAmount)
        {
            switch (_custVendInvoiceJour.TableId)
            {
                case tableNum(CustInvoiceJour):
                case tableNum(ProjInvoiceJour):
                    custVendTrans = CustTrans::findVoucherDate(_custVendInvoiceJour.LedgerVoucher, _custVendInvoiceJour.InvoiceDate);
                    break;
                case tableNum(VendInvoiceJour):
                    custVendTrans = VendTrans::findVoucherDate(_custVendInvoiceJour.LedgerVoucher, _custVendInvoiceJour.InvoiceDate);
                    break;
            }

            if (custVendTrans)
            {
                this.InvoiceAmountCur = sign(custVendTrans.AmountCur) * custVendTrans.SettleAmountCur;
                if (!reportInTaxCurrency)
                {
                    this.InvoiceAmount    = sign(custVendTrans.AmountMST) * custVendTrans.SettleAmountMST;
                }
            }
        }

        if (reportInTaxCurrency)
        {
            this.InvoiceAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                this.InvoiceAmountCur,
                this.InvoiceCurrency,
                taxTrans.CurrencyCode,
                _custVendInvoiceJour.InvoiceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the table buffer with values from the <c>CustVendTrans</c> map.
    /// </summary>
    /// <param name="_custVendTrans">
    ///     The table buffer that contains the values to set as the default on the new record.
    /// </param>
    /// <param name="_initFromSettleAmount">
    ///     This parameter determines whether to recalculate the amount from settled amount.
    /// </param>
    public void initFromCustVendTrans(
        CustVendTrans   _custVendTrans,
        boolean         _initFromSettleAmount = false)
    {
        this.DocumentDate     = _custVendTrans.DocumentDate ? _custVendTrans.DocumentDate : _custVendTrans.TransDate;
        this.ModuleCustVend   = _custVendTrans.TableId == tableNum(CustTrans) ? ModuleCustVend::Cust : ModuleCustVend::Vend;
        this.CustVendAC       = _custVendTrans.AccountNum;
        this.InvoiceAmountCur = _custVendTrans.AmountCur;
        this.InvoiceCurrency  = _custVendTrans.CurrencyCode;
        this.InvoiceAmount    = _custVendTrans.AmountMST;
        if (_initFromSettleAmount)
        {
            this.InvoiceAmountCur = _custVendTrans.SettleAmountCur;
            this.InvoiceAmount    = _custVendTrans.SettleAmountMST;
        }

        TaxTrans taxTrans;
        select firstonly TaxPeriod, CurrencyCode from taxTrans
            where taxTrans.Voucher == _custVendTrans.Voucher
                && taxTrans.TransDate == _custVendTrans.TransDate;

        if (TaxPeriodHead::find(taxTrans.TaxPeriod).ReportInTaxCurrency_IT)
        {
            this.InvoiceAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                this.InvoiceAmountCur,
                this.InvoiceCurrency,
                taxTrans.CurrencyCode,
                _custVendTrans.TransDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        this.DocumentDate = _ledgerJournalTrans.DocumentDate ? _ledgerJournalTrans.DocumentDate : _ledgerJournalTrans.TransDate;
        this.InvoiceId = _ledgerJournalTrans.Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransferJourLine</Name>
				<Source><![CDATA[
    private void initFromInventTransferJourLine(InventTransferJourLine _inventTransferJourLine)
    {
        this.CustVendAC = CompanyInfo::find().PartyNumber;
        this.DocumentDate = _inventTransferJourLine.TransDate;
        this.InvoiceId = _inventTransferJourLine.TransferId;

        InventTransferJourLine inventTransferJourLine;
        TaxTrans taxTrans;
        TaxBaseCur taxBaseAmountCur, sourceBaseAmountCur;
        TaxAmountCur taxAmountCur, sourceTaxAmountCur;
        CurrencyCode sourceCurrencyCode;
        RecId currentLineRecId;

        while select RecId from inventTransferJourLine
            where inventTransferJourLine.VoucherId == _inventTransferJourLine.VoucherId
                && inventTransferJourLine.TransferId == _inventTransferJourLine.TransferId
        join TaxBaseAmountCur, SourceBaseAmountCur, TaxAmountCur,
            SourceRegulateAmountCur, SourceCurrencyCode from taxTrans
            where taxTrans.SourceTableId == inventTransferJourLine.TableId
                && taxTrans.SourceRecId == inventTransferJourLine.RecId
        {
            if (currentLineRecId != inventTransferJourLine.RecId)
            {
                taxBaseAmountCur += taxTrans.TaxBaseAmountCur;
                sourceBaseAmountCur += taxTrans.SourceBaseAmountCur;
                currentLineRecId = inventTransferJourLine.RecId;
            }

            taxAmountCur += taxTrans.TaxAmountCur;
            sourceTaxAmountCur += taxTrans.SourceRegulateAmountCur;
            sourceCurrencyCode = taxTrans.SourceCurrencyCode;
        }

        this.InvoiceAmount = abs(taxBaseAmountCur + taxAmountCur);
        this.InvoiceAmountCur = abs(sourceBaseAmountCur + sourceTaxAmountCur);
        this.InvoiceCurrency = sourceCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     The method checks whether it is possible to create record <c>TmpTaxReport_IT</c> on the basis of <c>TaxTrans</c>.
    /// </summary>
    /// <param name="_taxTrans">
    ///     Record <c>TaxTrans</c> for check.
    /// </param>
    /// <returns>
    ///     True if we can create <c>TmpTaxReport_IT</c> on the basis of <c>TaxTras</c> ; otherwise - false.
    /// </returns>
    public static boolean checkTaxTrans(TaxTrans  _taxTrans)
    {
        boolean             ret = true;
        CustVendSettlement  custVendSettlement;
        CustSettlement      custSettlement;
        VendSettlement      vendSettlement;

        // for conditional tax trans functionality we should exclude tax transes that have been reversed during unsettlement payment transactions
        if (_taxTrans.TaxOrigin == TaxOrigin::Payment)
        {
            if (_taxTrans.TaxDirection == TaxDirection::OutgoingTax
                || _taxTrans.TaxDirection == TaxDirection::TaxExemptSales)
            {
                custVendSettlement  = custSettlement;
            }
            else
            {
                custVendSettlement = vendSettlement;
            }

            select firstonly custVendSettlement
                where custVendSettlement.SettlementVoucher == _taxTrans.Voucher
                    && custVendSettlement.TransDate == _taxTrans.TransDate;
            if (!custVendSettlement.CanBeReversed)
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets Vendor Invoice header record
    /// </summary>
    /// <param name="_taxTrans">
    ///     Record <c>TaxTrans</c> for getting Invoice RecId if necessary.
    /// </param>
    /// <returns>
    ///     Vendor Invoice header value <c>VendInvoiceJour</c>
    /// </returns>
    protected VendInvoiceJour getVendInvoiceJour(TaxTrans _taxTrans)
    {
        VendInvoiceJour vendInvoiceJour;
    
        if (_taxTrans.SourceTableId == tableNum(LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTrans;

            select * from vendInvoiceJour
                where vendInvoiceJour.LedgerVoucher == this.Voucher
                    && vendInvoiceJour.InvoiceDate == this.TransDate
                exists join ledgerJournalTrans
                    where ledgerJournalTrans.Invoice == vendInvoiceJour.InvoiceId
                        && ledgerJournalTrans.TransDate == vendInvoiceJour.InvoiceDate
                        && ledgerJournalTrans.RecId == _taxTrans.SourceRecId
                        && ledgerJournalTrans.TableId == _taxTrans.SourceTableId;

            if (!vendInvoiceJour)
            {
                vendInvoiceJour = VendInvoiceJour::findFromTaxTrans(this.Voucher, this.TransDate);
            }
        }
        else
        {
            vendInvoiceJour = VendInvoiceJour::findFromTaxTrans(this.Voucher, this.TransDate);
        }

        if (!vendInvoiceJour
            && _taxTrans.SourceTableId == tableNum(VendTrans))
        {
            vendInvoiceJour = VendInvoiceJour::findRecId(_taxTrans.taxTrans_IT().InvoiceRefRecId);
        }
    
        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates tax transaction query to be used in <c>create</c> method.
    /// </summary>
    /// <param name="_taxPeriod">Settlement period.</param>
    /// <param name="_fromDate">Period start date.</param>
    /// <param name="_toDate">Period end date.</param>
    /// <returns>Tax transaction query to be used in <c>create</c> method.</returns>
    private Query getTaxTransQuery(
        TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsTaxTrans = query.addDataSource(tableNum(TaxTrans));
        qbdsTaxTrans.addOrderByField(fieldNum(TaxTrans, TaxPeriod));
        qbdsTaxTrans.addOrderByField(fieldNum(TaxTrans, TransDate));
        qbdsTaxTrans.addOrderByField(fieldNum(TaxTrans, Voucher));
        qbdsTaxTrans.addOrderByField(fieldNum(TaxTrans, TaxCode));
        qbdsTaxTrans.addRange(fieldNum(TaxTrans, TaxPeriod)).value(queryValue(_taxPeriod));

        QueryBuildDataSource qbdsTaxBook = qbdsTaxTrans.addDataSource(tableNum(TaxBook));
        qbdsTaxBook.joinMode(JoinMode::InnerJoin);
        qbdsTaxBook.fetchMode(QueryFetchMode::One2One);
        qbdsTaxBook.relations(true);

        if (TaxParameters::reportUseVatDueDate_W())
        {
            // include tax transactions having either TransDate or VatDueDate_W in reporting period
            QueryBuildDataSource qbdsTaxTrans_W = TaxTransCustomization_W::addDataSource(qbdsTaxTrans, tableNum(TaxTrans_W));
            QueryBuildRange qbr = qbdsTaxTrans.addRange(fieldNum(TaxTrans, DataAreaId));
            qbr.value(strFmt('(((%1.%2 >= %5) && (%1.%2 <= %6)) || ((%3.%4 >= %5) && (%3.%4 <= %6)))',
                        query.dataSourceTable(tableNum(TaxTrans)).name(),
                        fieldStr(TaxTrans, TransDate),
                        query.dataSourceTable(tableNum(TaxTrans_W)).name(),
                        fieldStr(TaxTrans_W, VatDueDate_W),
                        Date2StrXpp(_fromDate),
                        Date2StrXpp(_toDate)));
        }
        else
        {
            qbdsTaxTrans.addRange(fieldNum(TaxTrans, TransDate)).value(queryRange(_fromDate, _toDate));
        }

        TaxReportERContext_IT taxReportERContext = TaxReportERContext_IT::current();
        if (taxReportERContext)
        {
            TaxBook taxBook;
            select firstonly RecId from taxBook
                where taxBook.TaxPeriod == _taxPeriod
                    && taxBook.IncludeReverseTrans_IT == NoYes::No;

            if (taxBook.RecId)
            {
                QueryBuildDataSource qbdsTaxTrans_IT = TaxTransCustomization_W::addDataSource(
                    qbdsTaxTrans,
                    tableNum(TaxTrans_IT),
                    JoinMode::OuterJoin);

                qbdsTaxTrans.addRange(fieldNum(TaxTrans, TaxOrigin)).value(
                strFmt('((%1.%2 != %3) || ((%4.%5 != %6) || ((%4.%5 == %6) && (%7.%8 == %9)) || ((%4.%5 == %6) && (%7.%10 == %9) && (%11 == %12))))',
                    qbdsTaxBook.name(),
                    fieldStr(TaxBook, IncludeReverseTrans_IT),
                    enum2int(NoYes::No),
                    qbdsTaxTrans.name(),
                    fieldStr(TaxTrans, TaxOrigin),
                    enum2int(TaxOrigin::TaxReversed),
                    qbdsTaxTrans_IT.name(),
                    fieldStr(TaxTrans_IT, SplitPaymReverse),
                    enum2int(NoYes::Yes),
                    fieldStr(TaxTrans_IT, InvoiceApproval),
                    any2Int(InvoiceApprovalsAreNotReportedInTaxReportFlight::instance().isEnabled()),
                    0));
            }
        }
        else
        {
            TaxReportContext_IT taxReportContext = TaxReportContext_IT::current();
            if (!taxReportContext || taxReportContext.parmExcludeReverseTrans())
            {
                QueryBuildDataSource qbdsTaxTrans_IT = TaxTransCustomization_W::addDataSource(
                    qbdsTaxTrans,
                    tableNum(TaxTrans_IT),
                    JoinMode::OuterJoin);

                qbdsTaxTrans.addRange(fieldNum(TaxTrans, TaxOrigin)).value(
                strFmt('((%1.%2 != %3) || ((%1.%2 == %3) && (%4.%5 == %6))|| ((%1.%2 == %3) && (%4.%7 == %6) && (%8 == %9)))',
                    qbdsTaxTrans.name(),
                    fieldStr(TaxTrans, TaxOrigin),
                    enum2int(TaxOrigin::TaxReversed),
                    qbdsTaxTrans_IT.name(),
                    fieldStr(TaxTrans_IT, SplitPaymReverse),
                    enum2int(NoYes::Yes),
                    fieldStr(TaxTrans_IT, InvoiceApproval),
                    any2Int(InvoiceApprovalsAreNotReportedInTaxReportFlight::instance().isEnabled()),
                    0));
            }
        }

        if (ExcludeReverseSplitPaymentFromSalesTaxReportFeature_IT::isEnabled())
        {
            QueryBuildDataSource qbdsTaxTrans_IT2 = TaxTransCustomization_W::addDataSource(qbdsTaxTrans, tableNum(TaxTrans_IT), JoinMode::NoExistsJoin);
            qbdsTaxTrans_IT2.addRange(fieldNum(TaxTrans_IT, SplitPaymReverse)).value(queryValue(NoYes::Yes));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompetencePeriod</Name>
				<Source><![CDATA[
    private void initCompetencePeriod(FromDate _fromDate, ToDate _toDate)
    {
        switch (true)
        {
            case this.VatDueDate_W
              && this.VatDueDate_W < _fromDate:
                this.CompetencePeriod = TaxReportCompetencePeriod_IT::Previous;
                break;

            case this.VatDueDate_W
              && this.VatDueDate_W >= _fromDate
              && this.VatDueDate_W <= _toDate
              && this.TransDate > _toDate:
                this.CompetencePeriod = TaxReportCompetencePeriod_IT::Actual;
                break;

            default:
                this.CompetencePeriod = TaxReportCompetencePeriod_IT::Default;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedAccrualExistsForVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is accrual transactions for given voucher.
    /// </summary>
    /// <param name="_voucher">Voucher.</param>
    /// <param name="_transDate">Transaction date.</param>
    /// <returns>
    /// true if there is <c>LedgerJournalTransAccrual</c> record related to specified voucher; otherwise, false.
    /// </returns>
    private boolean relatedAccrualExistsForVoucher(Voucher _voucher, TransDate _transDate)
    {
        LedgerJournalTrans ledgerJournalTransLocal;
        LedgerJournalTransAccrual ledgerJournalTransAccrualLocal;

        select RecId from ledgerJournalTransLocal
            where ledgerJournalTransLocal.Voucher == _voucher
                && ledgerJournalTransLocal.TransDate == _transDate
        join RecId from ledgerJournalTransAccrualLocal
            where ledgerJournalTransAccrualLocal.RefTableid == ledgerJournalTransLocal.TableId
                && ledgerJournalTransAccrualLocal.RefRecId == ledgerJournalTransLocal.RecId;

        return ledgerJournalTransAccrualLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceLevelVATNum</Name>
				<Source><![CDATA[
    private VATNumJournal getInvoiceLevelVATNum(RefRecId _sourceRecId, RefTableId _refTableId)
    {
        VATNumJournal vatNum;

        if (_refTableId == tableNum(CustInvoiceTrans))
        {
            CustInvoiceJour custInvoiceJour;
            CustInvoiceTrans custInvoiceTrans;

            select firstonly VATNum from custInvoiceJour
                exists join custInvoiceTrans
                    where custInvoiceTrans.SalesId == custInvoiceJour.SalesId
                        && custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
                        && custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate
                        && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
                        && custInvoiceTrans.RecId == _sourceRecId
                        && custInvoiceTrans.TableId == _refTableId;

            vatNum = custInvoiceJour.VATNum;
        }

        return vatNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IT</CountryRegionCodes>
	<DeveloperDocumentation>@sys320578</DeveloperDocumentation>
	<Label>@SYS85204</Label>
	<ClusteredIndex></ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendAC</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS9458</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmountCur</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79493</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceCurrency</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS79744</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleCustVend</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>ModuleCustVend</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS22646</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79497</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseConditional</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79499</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseInCostPrice</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79500</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxBook</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxBookRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxBookSection</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxBookSectionRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxBookType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>TaxBookType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxConditional</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79498</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInCostPrice</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79501</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxName</ExtendedDataType>
			<Label>@SYS79496</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValue</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxValue</ExtendedDataType>
			<Label>@SYS79495</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS14475</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VATNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SplitPaymReverse</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SplitPaymReverse_IT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RelatedVoucher</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VatDueDate_W</Name>
			<ExtendedDataType>VatDueDate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CompetencePeriod</Name>
			<EnumType>TaxReportCompetencePeriod_IT</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBookType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxBook</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxBookSection</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxBookSectionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBookSection</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxBookIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBook</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TmpTaxReport_IT</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>InvoiceCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxBookJournals</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxReportTableForItaly</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxBook</Name>
					<Field>TaxBook</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxBookSection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxBookSection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTaxBookSections</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxReportTableForItaly</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxBookSection</Name>
					<Field>TaxBookSection</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TmpTaxReport_IT</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>