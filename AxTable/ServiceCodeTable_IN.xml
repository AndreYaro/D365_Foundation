<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ServiceCodeTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ServiceCodeTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean         ret;
        InventTable     inventTable;

        ret = super();

        if (ret)
        {
            select firstonly inventTable
                where inventTable.ServiceCodeTable_IN == this.RecId;
            if (inventTable)
            {
                ret = checkFailed("@GLS5078");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret && this.ServiceAccountingCode != '')
        {
            if (ServiceCodeTable_IN::existServiceAccountingCode(this.ServiceAccountingCode))
            {
                ret = checkfailed(strfmt("@SYS4002335", this.ServiceAccountingCode));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>ServiceCodeTable_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_serviceCode">
    /// The service code is used to find record.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    public static boolean exist(ServiceCode_IN _serviceCode)
    {
        return _serviceCode && (select firstonly RecId from serviceCodeTable_IN
                                    where serviceCodeTable_IN.ServiceCode == _serviceCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existServiceAccountingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// check if there already exists the service accounting code
    /// </summary>
    /// <param name="_serviceAccountingCode">
    /// The service accounting code
    /// </param>
    /// <returns>
    /// Whether there already exists the given serivce accounting code or not
    /// </returns>
    public static boolean existServiceAccountingCode(ServiceAccountingCode_IN _serviceAccountingCode)
    {
        return _serviceAccountingCode
           && (select firstonly RecId from serviceCodeTable_IN
                  where serviceCodeTable_IN.ServiceAccountingCode == _serviceAccountingCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the ServiceCodeTable_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing ServiceCodeTable_IN table.
    /// </returns>
    public static ServiceCodeTable_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ServiceCodeTable_IN  serviceCodeTable;

        serviceCodeTable.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            serviceCodeTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly serviceCodeTable
            where serviceCodeTable.RecId == _recId;

        return serviceCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>ServiceCodeTable_IN</c> table specified by a service code.
    /// </summary>
    /// <param name="_serviceCode">
    /// The service code of the <c>ServiceCodeTable_IN</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>ServiceCodeTable_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static ServiceCodeTable_IN findByServiceCode(
        ServiceCode_IN   _serviceCode,
        boolean          _forUpdate = false)
    {
        ServiceCodeTable_IN serviceCodeTable;

        if (_serviceCode)
        {
            serviceCodeTable.selectForUpdate(_forUpdate);

            select firstonly serviceCodeTable
                where serviceCodeTable.ServiceCode == _serviceCode;
        }

        return serviceCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and runs one form <c>ServiceCodeTable_IN</c>.
    /// </summary>
    /// <param name="_serviceCode">
    /// The service code will be parmed.
    /// </param>
    /// <param name="_record">
    /// The record that need to be passed to the form.
    /// </param>
    public static void jumpRef(
        ServiceCode_IN _serviceCode,
        Common         _record)
    {
        Args    args = new Args();

        MenuItemName menuItemName;

        menuItemName = menuitemDisplayStr(ServiceCodeTable_IN);

        if (hasMenuItemAccess(menuItemName, MenuItemType::Display))
        {
            args.record(_record);
            args.parm(_serviceCode);
            new MenuFunction(menuItemName, MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRefServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup where the user can select a ServiceCodeTable_IN
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The calling formReference control
    /// </param>
    /// <returns>
    /// A ServiceCodeTable_IN record.
    /// </returns>
    public static Common lookupRefServiceCode(FormReferenceControl      _formReferenceControl)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(ServiceCodeTable_IN), _formReferenceControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(ServiceCodeTable_IN));
        sysTableLookup.addLookupfield(fieldNum(ServiceCodeTable_IN, ServiceCode));
        sysTableLookup.addLookupfield(fieldNum(ServiceCodeTable_IN, Name));
        sysTableLookup.addLookupfield(fieldNum(ServiceCodeTable_IN, MinorHead));
        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup where the user can select a <c>ServiceCodeTable_IN</c>.
    /// </summary>
    /// <param name="_formControl">
    /// The calling form control.
    /// </param>
    /// <param name="_companyId">
    /// The company id; optional.
    /// </param>
    /// <returns>
    /// A ServiceCodeTable_IN record.
    /// </returns>
    public static Common lookupServiceCode(FormControl                _formControl,
                                         CompanyId                  _companyId = curext())
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(ServiceCodeTable_IN), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        query.allowCrossCompany(true);
        query.addCompanyRange(_companyId);
        queryBuildDataSource = query.addDataSource(tableNum(ServiceCodeTable_IN));
        sysTableLookup.addLookupfield(fieldNum(ServiceCodeTable_IN, ServiceCode));
        sysTableLookup.addLookupfield(fieldNum(ServiceCodeTable_IN, Name));
        sysTableLookup.addLookupfield(fieldNum(ServiceCodeTable_IN, MinorHead));
        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64204</DeveloperDocumentation>
	<FormRef>ServiceCodeTable_IN</FormRef>
	<Label>@GLS5076</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ServiceCode</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ServiceCodeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinorHead</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinorHead</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceHead</Name>
			<Label>@GLS5080</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MinorHead</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceAccountingCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MinorHead</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>MinorHead_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS80991</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceAccountingCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ServiceAccountingCode_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ServiceCode_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ServiceCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>