<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceSim</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemPriceSim extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowActivation</Name>
				<Source><![CDATA[
    public boolean allowActivation(boolean _showErrorMessage = true)
    {
        boolean ret;

        ret = true;

        if (CostingVersion::find(this.VersionId).BlockActivation)
        {
            ret = false;
            if (_showErrorMessage)
            {
                checkFailed(strFmt("@SYS104980", this.VersionId));
            }
        }

        ret = ret && InventTable::find(this.ItemId).PmfProductType != PmfProductType::MainItem;

        return ret && (this.RecId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrInitializeSalesSim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an existing sales <c>InventItemPriceSim</c> record or initializes the default values if it doesn't exist.
    /// </summary>
    /// <param name = "_inventTable">The <c>InventTable</c> record for the item using the price.</param>
    /// <returns>An <c>InventItemPriceSim</c> record.</returns>
    protected InventItemPriceSim findOrInitializeSalesSim(InventTable _inventTable)
    {
        InventItemPriceSim inventItemPriceSimSales = InventItemPriceSim::find(this.ItemId,
                                                           this.VersionId,
                                                           this.FromDate,
                                                           CostingVersionPriceType::Sales,
                                                           this.InventDimId,
                                                           '',
                                                           true);

        if (!inventItemPriceSimSales)
        {
            inventItemPriceSimSales.initFrominventItemPriceSim(this);
            inventItemPriceSimSales.PriceType   = CostingVersionPriceType::Sales;
            inventItemPriceSimSales.UnitID      = _inventTable.inventTableModuleSales().UnitId;
        }
        else
        {
            inventItemPriceSimSales.PriceUnit   = this.PriceUnit;
        }

        return inventItemPriceSimSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLatestFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the latest pending price for the given date.
    /// </summary>
    /// <param name="_itemId">The item ID.</param>
    /// <param name="_versionId">The version ID.</param>
    /// <param name="_fromDate">The latest date at which the pending price is available.</param>
    /// <param name="_priceType">The price type.</param>
    /// <param name="_inventDimId">The ID of the dimensions combination.</param>
    /// <param name="_newSiteId">A specific site from which the price should be taken; optional.</param>
    /// <param name="_forUpdate">A Boolean value that determines whether the record should be selected for update; optional.</param>
    /// <returns>A record in the <c>InventItemPriceSim</c> table; otherwise, an empty record.</returns>
    /// <remarks>
    /// The <paramref name="_newSiteId" /> will overwrite the value of site in the <paramref name="_inventDimId" />.
    /// The owner dimension is used when retrieving the item price. In case the specified item is owner enabled the owner dimension must be specified.
    /// </remarks>
    internal static InventItemPriceSim findLatestFromDate(
        ItemId                  _itemId,
        CostingVersionId        _versionId,
        FromDate                _fromDate,
        CostingVersionPriceType _priceType,
        InventDimId             _inventDimId,
        InventSiteId            _newSiteId          = '',
        boolean                 _forUpdate          = false)
    {
        InventItemPriceSim  inventItemPriceSim;

        if (_itemId
            && _versionId
            && InventDim::find(_inventDimId).isOwnerCurrentLegalEntity())
        {
            inventItemPriceSim.selectForUpdate(_forUpdate);

            InventTable inventTable         = InventTable::find(_itemId);
            InventDim inventDimCriteria     = InventItemPrice::initializeInventDimCriteria(inventTable, _inventDimId);
            inventDimCriteria.InventSiteId  = InventItemPrice::changeSiteId(inventDimCriteria.InventSiteId, _newSiteId);

            InventDim inventDim = InventDim::findDim(inventDimCriteria);
            select firstonly inventItemPriceSim
                order by FromDate desc
                where inventItemPriceSim.ItemId        == _itemId
                   && inventItemPriceSim.VersionId     == _versionId
                   && inventItemPriceSim.FromDate      <= _fromDate
                   && inventItemPriceSim.PriceType     == _priceType
                   && inventItemPriceSim.InventDimId    == inventDim.inventDimId;
        }

        return inventItemPriceSim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate a sales price based on the cost or purchase price of the item.
    /// </summary>
    private void autoSalesPrice()
    {
        InventTable         inventTable = InventTable::find(this.ItemId);
        InventItemPriceSim  inventItemPriceSimSales;
        FormRun             formRun;
        FormObjectSet       formObjSet;
        int                 i;

        if (! FormDataUtil::isFormDataSource(this))
        {
            return;
        }

        if (inventTable.SalesModel == SalesPriceModel::None)
        {
            return;
        }

        if (! CostingVersion::find(this.VersionId).AllowSales)
        {
            return;
        }

        if ((inventTable.SalesPriceModelBasic == SalesPriceModelBasic::PurchPrice && this.PriceType != CostingVersionPriceType::Purch) ||
            (inventTable.SalesPriceModelBasic == SalesPriceModelBasic::CostPrice  && this.PriceType != CostingVersionPriceType::Cost))
        {
            return;
        }

        inventItemPriceSimSales = this.findOrInitializeSalesSim(inventTable);

        inventItemPriceSimSales.calcSalesPrice(inventTable, this);

        if (inventItemPriceSimSales)
        {
            inventItemPriceSimSales.update();
            info(strFmt("@SYS115793", this.ItemId));
        }
        else
        {
            inventItemPriceSimSales.insert();
            info(strFmt("@SYS115794", this.ItemId));
        }

        // refresh and reread inventItemPriceSim datasource if exists in form
        formRun = FormDataUtil::getFormDataSource(this).formRun();
        for (i=1; i<= formRun.dataSourceCount(); i++)
        {
            if (formRun.dataSource(i).cursor().TableId == tableNum(InventItemPriceSim))
            {
                formObjSet = formRun.dataSource(i);
                break;
            }
        }
        if (formObjSet)
        {
            formObjSet.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>blocked</Name>
				<Source><![CDATA[
    display InventItemPriceBlocked blocked()
    {
        return CostingVersion::blocked(this.VersionId, CostingVersionStatus::Pending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesPrice</Name>
				<Source><![CDATA[
    void calcSalesPrice(InventTable _inventTable, InventAutoSalesPriceMap _basePrice)
    {
        this.InventAutoSalesPriceMap::calcSalesPrice(_inventTable, _basePrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoActivePrice</Name>
				<Source><![CDATA[
    public boolean checkNoActivePrice(boolean _showErrorMessage)
    {
        TransDate       currentActivationDate;
        boolean         ret                     = true;

        currentActivationDate = InventItemPrice::findCurrent(this.ItemId,
                                                              this.PriceType,
                                                              this.InventDimId).ActivationDate;

        if (this.FromDate < currentActivationDate)
        {
            if (_showErrorMessage)
            {
                checkFailed(strFmt("@SYS106970", this.ItemId, date2StrUsr( this.FromDate, DateFlags::FormatAll), date2StrUsr(currentActivationDate, DateFlags::FormatAll)));
            }
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        InventItemPriceSim oldinventItemPriceSim;

        ttsbegin;

        if (this.PriceCalcId)
        {
            oldinventItemPriceSim.data(this);
        }

        CostingVersion::updateLastUpdated(this.VersionId);

        if (oldinventItemPriceSim.PriceCalcId)
        {
            this.deleteBOMCalcTable(oldinventItemPriceSim);
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBOMCalcTable</Name>
				<Source><![CDATA[
    private void deleteBOMCalcTable(InventItemPriceSim _oldInventItemPriceSim)
    {
        InventItemPrice     inventItemPrice;
        InventItemPriceSim  inventItemPriceSim;
        BOMCalcTable        bomCalcTable
        ;

        select count(RecId) from inventItemPrice
            where inventItemPrice.ItemId            == _oldInventItemPriceSim.ItemId
               && inventItemPrice.PriceCalcId       == _oldInventItemPriceSim.PriceCalcId;

        select count(RecId) from inventItemPriceSim
            where inventItemPriceSim.ItemId         == _oldInventItemPriceSim.ItemId
               && inventItemPriceSim.PriceCalcId    == _oldInventItemPriceSim.PriceCalcId;

        if ((! inventItemPrice.RecId) && (! inventItemPriceSim.RecId))
        {
            bomCalcTable = BOMCalcTable::find(_oldInventItemPriceSim.PriceCalcId, true);
            bomCalcTable.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBOMId</Name>
				<Source><![CDATA[
    display BOMId displayBOMId()
    {
        return this.InventItemPriceMap::displayBOMId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBOMLog</Name>
				<Source><![CDATA[
    display InventItemPriceBOMLog displayBOMLog()
    {
        return this.InventItemPriceMap::displayBOMLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalculated</Name>
				<Source><![CDATA[
    display InventItemPriceCalculated displayCalculated()
    {
        return this.InventItemPriceMap::displayCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCostCalculationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost calculation method used for the current calculation.
    /// </summary>
    /// <returns>
    /// The <c>BOMCostCalculationMethod</c> value used for the current calculation.
    /// </returns>
    public display BOMCostCalculationMethod displayCostCalculationMethod()
    {
        return this.InventItemPriceMap::displayCostCalculationMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
    display InventItemPriceName displayItemName()
    {
        return this.InventItemPriceMap::displayItemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProductionFlowName</Name>
				<Source><![CDATA[
    display PlanName displayProductionFlowName()
    {
        return this.InventItemPriceMap::displayProductionFlowName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProfitSet</Name>
				<Source><![CDATA[
    display CostProfitSet displayProfitSet()
    {
        return this.InventItemPriceMap::displayProfitSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRouteId</Name>
				<Source><![CDATA[
    display RouteId displayRouteId()
    {
        return this.InventItemPriceMap::displayRouteId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
    display InventItemPriceUnitId displayUnitId()
    {
        return this.InventItemPriceMap::displayUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVersionBlocked</Name>
				<Source><![CDATA[
    display NoYes displayVersionBlocked()
    {
        return this.CostingVersionMap::displayVersionBlocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVersionName</Name>
				<Source><![CDATA[
    display Name displayVersionName()
    {
        return this.CostingVersionMap::displayVersionName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOMCalcTable</Name>
				<Source><![CDATA[
    public void initFromBOMCalcTable(BOMCalcTable _bomCalcTable)
    {
        if (!this.RecId)
        {
            this.ItemId         = _bomCalcTable.ItemId;
            this.FromDate       = _bomCalcTable.TransDate;
            this.InventDimId    = InventTable::priceInventDimId(_bomCalcTable.ItemId,
                                                                _bomCalcTable.InventDimId);
        }
        this.PriceCalcId        = _bomCalcTable.PriceCalcId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCostingVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the restrictions from a costing version to the price.
    /// </summary>
    /// <param name="_costingVersion">
    ///    The costing version from which to apply the restrictions.
    /// </param>
    /// <param name="_siteId">
    ///    The ID of the new site, if it needs to be changed. If there is a site specified in the costing
    ///    version, that will overrule this value; optional.
    /// </param>
    /// <param name="_costingVersionId">
    ///    The new costing version ID. It defaults to the ID of the costing version; optional.
    /// </param>
    /// <param name="_fromDate">
    ///    The new activation date of the price. A default date may be specified in the costing version;
    ///    optional.
    /// </param>
    public void initFromCostingVersion(
        CostingVersion          _costingVersion,
        InventSiteId            _siteId             = '',
        CostingVersionId        _costingVersionId   = _costingVersion.VersionId,
        CostingVersionFromDate  _fromDate           = _costingVersion.DefaultDate
        )
    {
        InventDim               inventDim;

        this.VersionId = _costingVersionId;

        if (_fromDate)
        {
            this.FromDate = _fromDate;
        }

        if (_costingVersion.RecordRestrict)
        {
            this.PriceAllocateMarkup = _costingVersion.PriceAllocateMarkup;
        }

        if (_siteId || _costingVersion.InventSiteId)
        {
            inventDim               = InventDim::find(this.InventDimId);
            inventDim.InventSiteId  = _costingVersion.InventSiteId ? _costingVersion.InventSiteId : _siteId;
            this.InventDimId        = InventDim::findOrCreate(inventDim).InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItemPrice</Name>
				<Source><![CDATA[
    public void initFromInventItemPrice(
        InventItemPrice     _inventItemPrice,
        CostingVersionId    _versionId          = _inventItemPrice.VersionId,
        Price               _price              = _inventItemPrice.Price,
        FromDate            _fromDate           = _inventItemPrice.ActivationDate,
        PriceCalcId         _priceCalcId        = _inventItemPrice.PriceCalcId,
        PriceSecCur_RU      _priceSecCur        = _inventItemPrice.PriceSecCur_RU
        )
    {
        this.FromDate = _fromDate;
        this.InventItemPriceMap::initFromInventItemPriceMap(_inventItemPrice,
                                                            _versionId,
                                                            _price,
                                                            _priceCalcId,
                                                            _priceSecCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItemPrices</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the price from a record of the <c>InventItemPrices</c> view.
    /// </summary>
    /// <param name="_inventItemPrices">
    ///    The record from the <c>InventItemPrices</c> view.
    /// </param>
    public void initFromInventItemPrices(InventItemPricesFiltered _inventItemPrices)
    {
        switch (_inventItemPrices.TableSourceId)
        {
            case tableNum(InventItemPriceSim):
                this.initFrominventItemPriceSim(InventItemPriceSim::findRecId(_inventItemPrices.RecId));
                break;
            case tableNum(InventItemPrice):
                this.initFromInventItemPrice(InventItemPrice::findRecId(_inventItemPrices.RecId));
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFrominventItemPriceSim</Name>
				<Source><![CDATA[
    public void initFrominventItemPriceSim(
        InventItemPriceSim  _inventItemPriceSim,
        CostingVersionId    _versionId          = _inventItemPriceSim.VersionId,
        Price               _price              = _inventItemPriceSim.Price,
        FromDate            _fromDate           = _inventItemPriceSim.FromDate,
        PriceCalcId         _priceCalcId        = _inventItemPriceSim.PriceCalcId,
        PriceSecCur_RU      _priceSecCur        = _inventItemPriceSim.PriceSecCur_RU
        )
    {
        this.FromDate = _fromDate;
        this.InventItemPriceMap::initFromInventItemPriceMap(_inventItemPriceSim,
                                                            _versionId,
                                                            _price,
                                                            _priceCalcId,
                                                            _priceSecCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
    void initLine(
        CostingVersionId            _versionId,
        CostingVersionPriceType     _priceType,
        FromDate                    _fromDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
        )
    {
        this.VersionId  = _versionId;
        this.PriceType  = _priceType;
        this.FromDate   = _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(InventItemPriceSimRefRecId _inventItemPriceSimRefRecId = 0)
    {
        InventItemCostGroupRollupSim    costGroupRollupSim;

        if (! this.InventDimId)
        {
            this.InventDimId = InventDim::inventDimIdBlank();
        }

        ttsbegin;

        super();
        CostingVersion::updateLastUpdated(this.VersionId);

        // Instead of calculating the inventItemCostGroupRollup table
        // based on the BOM Calculation, copy it from a given price
        if (this.isStdCostPrice())
        {
            if (_inventItemPriceSimRefRecId != 0)
            {
                InventItemCostGroupRollupSim::copyCostGroupRollupFromPrice(_inventItemPriceSimRefRecId, this.RecId);
            }
            else
            {
                if (!this.PriceCalcId)
                {
                    costGroupRollupSim.initFromInventItemPriceSim(this);
                    costGroupRollupSim.insert();
                }
            }
        }

        this.autoSalesPrice();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostingVersionCompatible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that this price is compatible with the given costing version.
    /// </summary>
    /// <param name="_costingVersion">
    ///    The costing version against which the price will be checked.
    /// </param>
    /// <returns>
    ///    true if the price is compatible with the costing version; otherwise, false.
    /// </returns>
    public boolean isCostingVersionCompatible(CostingVersion _costingVersion)
    {
        switch (this.PriceType)
        {
            case CostingVersionPriceType::Cost:
                return _costingVersion.AllowCost;

            case CostingVersionPriceType::Purch:
                return _costingVersion.AllowPurch;

            case CostingVersionPriceType::Sales:
                return _costingVersion.AllowSales;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStdCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies if a price is a standard cost price.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether the price is a standard cost price.
    /// </returns>
    /// <remarks>
    ///    A price is a standard cost price if the price model is Cost and the price type is Standard.
    /// </remarks>
    public boolean isStdCostPrice()
    {
        return this.InventItemPriceMap::isStdCostPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markup</Name>
				<Source><![CDATA[
    MarkupAmount  markup()
    {
        return this.InventPriceMap::markup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupSecCur_RU</Name>
				<Source><![CDATA[
    public InventPriceMarkupSecCur_RU markupSecCur_RU()
    {
        return this.InventPriceMap::markupSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveSimulatedToCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers a simulated price to active.
    /// </summary>
    /// <remarks>
    ///    Triggers the standard cost revaluation process.
    /// </remarks>
    public void moveSimulatedToCurrent()
    {
        ttsbegin;
        InventItemPrice inventItemPrice;
        inventItemPrice.initFromInventItemPriceSim(this);
        inventItemPrice.initFromCostingVersion();

        PriceConvertFactory priceConvertFactory = PriceConvertFactory::newItemPriceByInventItemPrice(inventItemPrice);

        priceConvertFactory.parmNewUnitId(InventTableModule::find(inventItemPrice.ItemId, InventItemPrice::convPriceTypeToModuleInventPurchSales(inventItemPrice.PriceType)).UnitId);
        if (inventItemPrice.PriceCalcId)
        {
            priceConvertFactory.parmRounding(false);
        }
        else
        {
            priceConvertFactory.parmRounding(true);
        }

        priceConvertFactory.parmInventDimId(this.InventDimId);

        PriceConvert priceConvert = priceConvertFactory.priceConvert();

        inventItemPrice.initFromPriceConvert(priceConvert);

        // Avoid duplicate index.
        inventItemPrice.LastPriceUniquenessAllowance = newGuid();

        // Insert active price record.
        inventItemPrice.insert();

        // Now move the costGroupRollup records
        InventItemCostGroupRollupSim::moveSimulatedToCurrent(this, inventItemPrice);

        InventItemCostGroupRollup inventItemCostGroupRollup;
        // If no cost group roll up exists at this point, it is created
        select firstonly RecId from inventItemCostGroupRollup where inventItemCostGroupRollup.InventItemPriceRefRecId == inventItemPrice.RecId;
        if (!inventItemCostGroupRollup.RecId)
        {
            inventItemCostGroupRollup.initFromInventItemPriceSim(this);
            inventItemCostGroupRollup.InventItemPriceRefRecId = inventItemPrice.RecId;
            inventItemCostGroupRollup.insert();
        }
        
        // Re-evaluated the inventory
        if (inventItemPrice.PriceType == CostingVersionPriceType::Cost &&
            CostingVersion::find(this.VersionId).CostingType == CostingVersionCostingType::Standard)
        {
            InventStdCostAdjust inventStdCostAdjust;
            Map                 inventTransCache;
            InventModelGroup    inventModelGroup = InventTable::find(inventItemPrice.ItemId).modelGroup();

            if (inventModelGroup.inventModelType().stdCostBased())
            {
                if (this.InventDimId == InventDim::inventDimIdBlank())
                {
                    inventStdCostAdjust = InventStdCostAdjust::newStdCost(InventTable::find(inventItemPrice.ItemId),
                                                                          inventItemPrice);
                }
                else
                {
                    inventStdCostAdjust = InventStdCostAdjust::newInventDimStdCost(InventTable::find(inventItemPrice.ItemId),
                                                                                   InventDim::find(inventItemPrice.InventDimId),
                                                                                   inventItemPrice);
                }
                if (inventModelGroup.inventModelTypeSecCur_RU().stdCostBased())
                {
                    inventTransCache = inventStdCostAdjust.initInventTransCache_RU();
                }

                inventStdCostAdjust.parmPriceActivation(true);
                inventStdCostAdjust.updateNow();

                if (inventStdCostAdjust.parmVoucher())
                {
                    inventItemPrice.StdCostVoucher   = inventStdCostAdjust.parmVoucher();
                    inventItemPrice.StdCostTransDate = inventStdCostAdjust.parmTransDate();
                    inventItemPrice.update();
                }
            }

            if (inventModelGroup.inventModelTypeSecCur_RU().stdCostBased())
            {
                if (this.InventDimId == InventDim::inventDimIdBlank())
                {
                    inventStdCostAdjust = InventStdCostAdjust::newStdCost(InventTable::find(inventItemPrice.ItemId),
                                                                          inventItemPrice,
                                                                          InventTransCurrency_RU::SecondaryCur);
                }
                else
                {
                    inventStdCostAdjust = InventStdCostAdjust::newInventDimStdCost(InventTable::find(inventItemPrice.ItemId),
                                                                                   InventDim::find(inventItemPrice.InventDimId),
                                                                                   inventItemPrice,
                                                                                   InventTransCurrency_RU::SecondaryCur);
                }
                if (inventTransCache)
                {
                    inventStdCostAdjust.initInventTransCache_RU(inventTransCache);
                }

                inventStdCostAdjust.updateNow();

                if (inventStdCostAdjust.parmVoucher())
                {
                    inventItemPrice.StdCostVoucher   = inventStdCostAdjust.parmVoucher();
                    inventItemPrice.StdCostTransDate = inventStdCostAdjust.parmTransDate();
                    inventItemPrice.update();
                }
            }
        }

        // Remove the simulated price record.
        this.delete();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
    Price  pcsPrice()
    {
        return this.InventPriceMap::pcsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPriceSecCur_RU</Name>
				<Source><![CDATA[
    public PriceSecCur_RU pcsPriceSecCur_RU()
    {
        return this.InventPriceMap::pcsPriceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>price</Name>
				<Source><![CDATA[
    Price price()
    {
        return this.InventPriceMap::price();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceQty</Name>
				<Source><![CDATA[
    PriceQty priceQty()
    {
        return this.InventPriceMap::priceQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceSecCur_RU</Name>
				<Source><![CDATA[
    public PriceSecCur_RU priceSecCur_RU()
    {
        return this.InventPriceMap::priceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceUnit</Name>
				<Source><![CDATA[
    PriceUnit  priceUnit()
    {
        return this.InventPriceMap::priceUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventItemCostGroupRollupSim    costGroupRollupSim;
        ttsbegin;

        super();
        CostingVersion::updateLastUpdated(this.VersionId);

        if (!this.PriceCalcId &&
             this.isStdCostPrice())
        {
            select firstonly forupdate * from costGroupRollupSim
                where costGroupRollupSim.InventItemPriceSimRefRecId == this.RecId
                   && costGroupRollupSim.CostLevel                  == InventCostLevel::Total;

            costGroupRollupSim.initFromInventItemPriceSim(this);
            costGroupRollupSim.write();
        }

        this.autoSalesPrice();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.blocked())
        {
            ret = checkFailed("@SYS104061");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean         ret;
        CostingVersion  costingVersion;
        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventItemPriceSim, VersionId) :
                costingVersion = CostingVersion::find(this.VersionId);
                if (costingVersion.Blocked)
                {
                    ret = checkFailed("@SYS104062");
                }

                break;

            case fieldNum(InventItemPriceSim, FromDate) :
                var defaultDate = CostingVersion::find(this.VersionId).DefaultDate;

                if (defaultDate
                    && this.FromDate != defaultDate)
                {
                    ret = checkFailed("@SYS106899");
                }
                break;

            case fieldNum(InventItemPriceSim, PriceAllocateMarkup) :
                costingVersion = CostingVersion::find(this.VersionId);
                if (costingVersion.CostingType == CostingVersionCostingType::Standard || costingVersion.CostingType == CostingVersionCostingType::Conversion)
                {
                    if (!this.PriceAllocateMarkup)
                    {
                        ret = checkFailed(strFmt("@SYS112056", "@SYS6613", costingVersion.CostingType));
                    }
                }
                if (costingVersion.RecordRestrict == NoYes::Yes
                    && costingVersion.PriceAllocateMarkup == NoYes::Yes
                    && costingVersion.PriceAllocateMarkup != this.PriceAllocateMarkup)
                {
                     ret = checkFailed("@SYS113564");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean          ret              = super();
        ret = this.validatePriceIsNotNegative() && ret;
        InventModelGroup inventModelGroup = InventTable::find(this.ItemId).modelGroup();
        ret = inventModelGroup.inventModelType().validateWriteInventItemPriceSim(this) && ret;
        ret = inventModelGroup.inventModelTypeSecCur_RU().validateWriteInventItemPriceSim(this) && ret;
        ret = InventTable::find(this.ItemId).modelGroup().inventModelType().validateWriteInventItemPriceSim(this) && ret;

        var costingVersion = CostingVersion::find(this.VersionId);
        if (! costingVersion.checkPriceType(this.PriceType))
        {
            ret = checkFailed(strFmt("@SYS112961",this.PriceType, this.VersionId));
        }

        if (this.ItemId == '')
        {
            return ret;
        }

        var inventTable = InventTable::find(this.ItemId);
        var inventDimSim = this.inventDim();

        if (costingVersion.InventSiteId
            && inventDimSim.InventSiteId != costingVersion.InventSiteId)
        {
            ret = checkFailed("@SCM:CostingVersionAndItemPriceSiteNoMatch");
        }

        InventDimGroupFieldSetupEnumerator enumerator = InventDimGroupSetup::newInventTable(inventTable).getFieldSetupEnumerator();
        while (enumerator.moveNext())
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();
            FieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimFieldId == fieldNum(InventDim, InventSiteId))
            {
                if (inventDimGroupFieldSetup.isActive() && !inventDimSim.InventSiteId)
                {
                    ret = checkFailed(strFmt("@SYS103633", fieldId2pname(inventDimSim.TableId, inventDimFieldId)));
                }
            }
            else if (inventDimGroupFieldSetup.isProductDimension())
            {
                if (inventTable.ItemDimCostPrice)
                {
                    InventProductDimension productDim = InventDimension::singletonFromInventDimFieldId(inventDimFieldId) as InventProductDimension;
                    if (productDim)
                    {
                        ret = productDim.checkExistsValueForItem(InventTable, inventDimSim.(productDim.parmInventDimFieldId()));
                    }
                }
                else if (inventDimSim.(inventDimFieldId))
                {
                    ret = checkFailed(strFmt("@SYS111325",
                                                 "@SYS17",
                                                 inventTable.ItemId,
                                                 fieldId2pname(tableNum(InventDim), inventDimFieldId)));
                }
            }
        }

        if (inventTable.ItemDimCostPrice && !InventDimCombination::existByInventDim(inventTable.ItemId, inventDimSim))
        {
            ret = checkFailed(strFmt("@SYS113229", inventTable.ItemId));
        }

        var productValidator = EcoResProductValidator::construct(inventTable);
        if (!productValidator.isEssentialFieldValuesSet())
        {
            ret = checkFailed(strFmt("@SYS4000187", productValidator.getErrorFieldList(), this.ItemId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceIsNotNegative</Name>
				<Source><![CDATA[
    private boolean validatePriceIsNotNegative()
    {
        boolean ret = true;

        if (this.Price < 0 || this.PriceQty < 0 || this.PriceUnit < 0)
        {
            ret = checkFailed(strFmt(
                "@CostManagement:InventItemPriceSim_PriceMustNotBeNegative",
                strFmt(
                    '%1, %2, %3', 
                    new SysDictField(tableNum(InventItemPriceSim), fieldNum(InventItemPriceSim, Price)).label(),
                    new SysDictField(tableNum(InventItemPriceSim), fieldNum(InventItemPriceSim, PriceUnit)).label(),
                    new SysDictField(tableNum(InventItemPriceSim), fieldNum(InventItemPriceSim, PriceQty)).label())));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current pending price.
    /// </summary>
    /// <param name="_itemId">The item ID.</param>
    /// <param name="_versionId">The version ID.</param>
    /// <param name="_fromDate">The date from which the price is created.</param>
    /// <param name="_priceType">The price type.</param>
    /// <param name="_inventDimId">The ID of the dimensions combination.</param>
    /// <param name="_newSiteId">A specific site from which the price should be taken; optional.</param>
    /// <param name="_forUpdate">A Boolean value that determines whether the record should be selected for update; optional.</param>
    /// <returns>A record in the <c>InventItemPrice</c> table; otherwise, an empty record.</returns>
    /// <remarks>
    /// The <paramref name="_newSiteId" /> will overwrite the value of site in the <paramref name="_inventDimId" />.
    /// The owner dimension is used when retrieving the item price. In case the specified item is owner enabled the owner dimension must be specified.
    /// </remarks>
    public static InventItemPriceSim find(
        ItemId                  _itemId,
        CostingVersionId        _versionId,
        FromDate                _fromDate,
        CostingVersionPriceType _priceType,
        InventDimId             _inventDimId,
        InventSiteId            _newSiteId          = '',
        boolean                 _forUpdate          = false)
    {
        InventItemPriceSim  inventItemPriceSim;

        if (_itemId
            && _versionId
            && InventDim::find(_inventDimId).isOwnerCurrentLegalEntity())
        {
            inventItemPriceSim.selectForUpdate(_forUpdate);

            InventTable inventTable         = InventTable::find(_itemId);
            InventDim inventDimCriteria     = InventItemPrice::initializeInventDimCriteria(inventTable, _inventDimId);
            inventDimCriteria.InventSiteId  = InventItemPrice::changeSiteId(inventDimCriteria.InventSiteId, _newSiteId);

            InventDim inventDim = InventDim::findDim(inventDimCriteria);

            select firstonly inventItemPriceSim
            where inventItemPriceSim.ItemId        == _itemId
               && inventItemPriceSim.VersionId     == _versionId
               && inventItemPriceSim.FromDate      == _fromDate
               && inventItemPriceSim.PriceType     == _priceType
               && inventItemPriceSim.InventDimId    == inventDim.inventDimId;
        }

        return inventItemPriceSim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds an <c>inventItemPriceSim</c> record by using a given <c>recId</c>.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>recId</c> of the record that should be found.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    An <c>inventItemPriceSim</c> record.
    /// </returns>
    /// <remarks>
    ///    The record is selected by using the <c>recId Idx</c>.
    /// </remarks>
    static InventItemPriceSim findRecId(RecId       _recId,
                                     boolean     _forUpdate = false )
    {
        InventItemPriceSim inventItemPriceSim;

        inventItemPriceSim.selectForUpdate(_forUpdate);

        select inventItemPriceSim
            where inventItemPriceSim.RecId == _recId;
        return inventItemPriceSim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivePriceNotEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the current <c>InventItemPriceSim</c> instance is different than the current active price for a given item/dimension combination.
    /// </summary>
    /// <param name="_showErrorMessage">
    /// Controls whether to show error message if this pending price is equal to the current active price.
    /// </param>
    /// <returns>
    /// True, if current <c>InventItemPriceSim</c> record is different than the current active price for a given item/dimension combination; false, otherwise.
    /// </returns>
    public boolean checkActivePriceNotEqual(boolean _showErrorMessage)
    {
        InventItemPrice currentActivePrice;
        boolean         ret = true;

        currentActivePrice = InventItemPrice::findCurrent(this.ItemId,
                                                          this.PriceType,
                                                          this.InventDimId);

        if (   currentActivePrice
            && this.Price       == currentActivePrice.Price
            && this.PriceUnit   == currentActivePrice.PriceUnit
            && this.Markup      == currentActivePrice.Markup
            && this.PriceQty    == currentActivePrice.PriceQty
            && this.UnitID      == currentActivePrice.UnitID)
        {
            if (_showErrorMessage)
            {
                checkFailed(strFmt("@SYP4882095",
                            this.ItemId, this.InventDimId, fieldStr(InventItemPriceSim, Price), this.Price, fieldStr(InventItemPriceSim, PriceUnit), this.PriceUnit,
                            fieldStr(InventItemPriceSim, Markup), this.Markup, fieldStr(InventItemPriceSim, PriceQty), this.PriceQty,
                            fieldStr(InventItemPriceSim, UnitID), this.UnitID));
            }
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventory dimension record associated with this pending price.
    /// </summary>
    /// <param name = "_forUpdate">true if the inventory dimension record must be selected for update; otherwise, false.</param>
    /// <returns>The <c>InventDim</c> record found.</returns>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costingVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the costing version associated with this pending price.
    /// </summary>
    /// <param name = "_forUpdate">true if the costing version record must be selected for update; otherwise, false.</param>
    /// <returns>The <c>CostingVersion</c> record found.</returns>
    public CostingVersion costingVersion(boolean _forUpdate = false)
    {
        return CostingVersion::find(this.VersionId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromDate</Name>
				<Source><![CDATA[
    private void defaultFromDate()
    {
        if (this.isFieldSet(fieldnum(InventItemPriceSim, VersionId)))
        {
            var costingVersion = this.getExtensionCostingVersion();

            if (this.costingVersion().DefaultDate)
            {
                this.FromDate = this.costingVersion().DefaultDate;
            }
        }

        if (!this.FromDate)
        {
            this.FromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPriceAllocateMarkup</Name>
				<Source><![CDATA[
    private void defaultPriceAllocateMarkup()
    {
        if (this.isFieldSet(fieldnum(InventItemPriceSim, VersionId)))
        {
            var costingVersion = this.getExtensionCostingVersion();

            if (costingVersion.CostingType == CostingVersionCostingType::Standard
                || costingVersion.CostingType == CostingVersionCostingType::Conversion)
            {
                this.PriceAllocateMarkup = NoYes::Yes;
            }
            else
            {
                this.PriceAllocateMarkup = costingVersion.PriceAllocateMarkup;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultUnitId</Name>
				<Source><![CDATA[
    private void defaultUnitId()
    {
        this.UnitID = InventTableModule::find(this.ItemId, InventItemPrice::convPriceTypeToModuleInventPurchSales(this.PriceType)).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPriceUnit</Name>
				<Source><![CDATA[
    private void defaultPriceUnit()
    {
        this.PriceUnit = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(InventItemPriceSim, FromDate):
                this.defaultFromDate();
                break;

            case fieldnum(InventItemPriceSim, PriceAllocateMarkup):
                this.defaultPriceAllocateMarkup();
                break;

            case fieldnum(InventItemPriceSim, UnitId):
                this.defaultUnitId();
                break;

            case fieldnum(InventItemPriceSim, PriceUnit):
                this.defaultPriceUnit();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum (InventItemPriceSim, FromDate), [fieldnum (InventItemPriceSim, VersionId)]],
            [fieldnum (InventItemPriceSim, PriceAllocateMarkup), [fieldnum (InventItemPriceSim, VersionId)]],
            [fieldnum (InventItemPriceSim, UnitId), [fieldnum (InventItemPriceSim, ItemId)]],
            [fieldnum (InventItemPriceSim, PriceUnit), [fieldnum (InventItemPriceSim, ItemId)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionCostingVersion</Name>
				<Source><![CDATA[
    private CostingVersion getExtensionCostingVersion()
    {
        return this.costingVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123676</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>InventItemPrice</FormRef>
	<Label>@SYS108619</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>VersionId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemIdx</PrimaryIndex>
	<ReplacementKey>ItemIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventItemCostGroupRollupSim</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemCostGroupRollupSim</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalculationIdentification</Name>
			<Label>@SYS112493</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayBOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayProductionFlowName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayProfitSet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCostCalculationMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Markup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceAllocateMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SecondaryCost_RU</Name>
			<Label>@GLS102435</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceSecCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionFromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Markup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountNonMonetary</ExtendedDataType>
			<Label>@SYS25095</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarkupSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceMarkupSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPriceNonMonetary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceAllocateMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceAllocateMarkup</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceCalcId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceCalcId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceMarkupQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostPriceSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostingVersionPriceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceUnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VersionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PriceType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VersionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VersionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FromDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CostingVersionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VersionId</MapField>
					<MapFieldTo>VersionId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventAutoSalesPriceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>Markup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupSecCur_RU</MapField>
					<MapFieldTo>MarkupSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>Price</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceQty</MapField>
					<MapFieldTo>PriceQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceSecCur_RU</MapField>
					<MapFieldTo>PriceSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitID</MapField>
					<MapFieldTo>UnitID</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventItemPriceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PriceType</MapField>
					<MapFieldTo>PriceType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceCalcId</MapField>
					<MapFieldTo>PriceCalcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VersionId</MapField>
					<MapFieldTo>VersionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>Markup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>Price</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitID</MapField>
					<MapFieldTo>UnitID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceAllocateMarkup</MapField>
					<MapFieldTo>PriceAllocateMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceQty</MapField>
					<MapFieldTo>PriceQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceSecCur_RU</MapField>
					<MapFieldTo>PriceSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupSecCur_RU</MapField>
					<MapFieldTo>MarkupSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventPriceMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>Price</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>Markup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceQty</MapField>
					<MapFieldTo>PriceQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceDate</MapField>
					<MapFieldTo>FromDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AllocateMarkup</MapField>
					<MapFieldTo>PriceAllocateMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceCalcId</MapField>
					<MapFieldTo>PriceCalcId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaximumRetailPrice_IN</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceSecCur_RU</MapField>
					<MapFieldTo>PriceSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MarkupSecCur_RU</MapField>
					<MapFieldTo>MarkupSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCalcTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCalcTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceCalcId</Name>
					<Field>PriceCalcId</Field>
					<RelatedField>PriceCalcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CostingVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CostingVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VersionId</Name>
					<Field>VersionId</Field>
					<RelatedField>VersionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VersionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitID</Name>
					<Field>UnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>