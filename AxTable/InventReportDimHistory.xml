<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventReportDimHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventReportDimHistory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
        public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromCustQuotationConfirmTrans</Name>
				<Source><![CDATA[
        static public void addFromCustQuotationConfirmTrans(CustQuotationConfirmTrans _custQuotationConfirmTrans)
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventQty               qtyRemain = _custQuotationConfirmTrans.InventQty;
        InventQty               qtyTrans;

        while select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId       == _custQuotationConfirmTrans.InventTransId
               && inventTransOrigin.ReferenceCategory   == InventTransType::SalesQuotation
            join InventDimId, Qty from inventTrans
                order by StatusIssue, InventDimId
                where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                  && (inventTrans.StatusIssue           == StatusIssue::QuotationIssue
                  ||  inventTrans.StatusIssue           == StatusIssue::OnOrder
                  ||  inventTrans.StatusIssue           == StatusIssue::ReservOrdered
                  ||  inventTrans.StatusIssue           == StatusIssue::ReservPhysical)
                  &&  inventTrans.StatusReceipt         == StatusReceipt::None
        {
            if (qtyRemain)
            {
                if (abs(inventTrans.Qty) < abs(qtyRemain))
                {
                    qtyTrans   = -inventTrans.Qty;
                    qtyRemain -= qtyTrans;
                }
                else
                {
                    qtyTrans  = qtyRemain;
                    qtyRemain = 0;
                }

                InventReportDimHistory::findAndWrite(InventReportDimHistoryLogType::SalesQuotation,
                                                     _custQuotationConfirmTrans.QuotationConfirmId,
                                                     _custQuotationConfirmTrans.InventTransId,
                                                     inventTrans.InventDimId,
                                                     qtyTrans);
            }
            else
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromCustQuotationTrans</Name>
				<Source><![CDATA[
        static public void addFromCustQuotationTrans(CustQuotationTrans _custQuotationTrans)
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventQty               qtyRemain = _custQuotationTrans.InventQty;
        InventQty               qtyTrans;

        while select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId       == _custQuotationTrans.InventTransId
               && inventTransOrigin.ReferenceCategory   == InventTransType::SalesQuotation
            join InventDimId, Qty from inventTrans
                order by StatusIssue, InventDimId
                where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                  && (inventTrans.StatusIssue           == StatusIssue::QuotationIssue
                  ||  inventTrans.StatusIssue           == StatusIssue::OnOrder
                  ||  inventTrans.StatusIssue           == StatusIssue::ReservOrdered
                  ||  inventTrans.StatusIssue           == StatusIssue::ReservPhysical)
                  &&  inventTrans.StatusReceipt         == StatusReceipt::None
        {
            if (qtyRemain)
            {
                if (abs(inventTrans.Qty) < abs(qtyRemain))
                {
                    qtyTrans   = -inventTrans.Qty;
                    qtyRemain -= qtyTrans;
                }
                else
                {
                    qtyTrans  = qtyRemain;
                    qtyRemain = 0;
                }

                InventReportDimHistory::findAndWrite(InventReportDimHistoryLogType::SalesQuotation,
                                                     _custQuotationTrans.QuotationId,
                                                     _custQuotationTrans.InventTransId,
                                                     inventTrans.InventDimId,
                                                     qtyTrans);
            }
            else
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromProdJournalBOM</Name>
				<Source><![CDATA[
        static public void addFromProdJournalBOM(ProdJournalBOM _prodJournalBOM)
    {
        InventTrans         inventTrans;
        StatusIssue         fromStatusIssue = StatusIssue::Picked;
        StatusIssue         toStatusIssue   = StatusIssue::OnOrder;
        InventQty           qtyRemain       = _prodJournalBOM.InventConsump;
        InventQty           qtyTrans;
        InventMovement      movement        = InventMovement::constructNoThrow(_prodJournalBOM);

        if (!movement)
        {
            return;
        }

        if (movement.mustBePicked())
        {
            toStatusIssue       = StatusIssue::Picked;
        }

        while select InventDimId, Qty from inventTrans
            order by StatusIssue,InventDimId
            where inventTrans.InventTransOrigin == movement.inventTransOriginId()
               && inventTrans.StatusReceipt     == StatusReceipt::None
               && inventTrans.StatusIssue       >= fromStatusIssue
               && inventTrans.StatusIssue       <= toStatusIssue
               && inventTrans.TransChildType    == movement.transChildType()
               && inventTrans.TransChildRefId   == movement.transChildRefId()
        {
            if (qtyRemain)
            {
                if (abs(inventTrans.Qty) < abs(qtyRemain))
                {
                    qtyTrans   = -inventTrans.Qty;
                    qtyRemain -= qtyTrans;
                }
                else
                {
                    qtyTrans  = qtyRemain;
                    qtyRemain = 0;
                }

                InventReportDimHistory::findAndWrite(InventReportDimHistoryLogType::ProdJournalBOM,
                                                     movement.transChildRefId(),
                                                     _prodJournalBOM.InventTransId,
                                                     inventTrans.InventDimId,
                                                     qtyTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromProdJournalProd</Name>
				<Source><![CDATA[
        static public void addFromProdJournalProd(ProdJournalProd _prodJournalProd)
    {
        InventTrans                     inventTrans;
        StatusReceipt                   fromStatusReceipt   = StatusReceipt::Registered;
        StatusReceipt                   toStatusReceipt     = StatusReceipt::Ordered;
        InventQty                       qtyRemain           = _prodJournalProd.QtyGood;
        InventQty                       qtyTrans;
        InventMovement                  movement            = InventMovement::constructNoThrow(_prodJournalProd);

        if (!movement)
        {
            return;
        }

        if (movement.mustBeRegistered())
        {
            toStatusReceipt   = StatusReceipt::Registered;
        }

        while select InventDimId, Qty from inventTrans
            order by StatusIssue,InventDimId
            where inventTrans.InventTransOrigin == movement.inventTransOriginId()
               && inventTrans.StatusIssue       == StatusIssue::None
               && inventTrans.StatusReceipt     >= fromStatusReceipt
               && inventTrans.StatusReceipt     <= toStatusReceipt
               && inventTrans.TransChildType    == movement.transChildType()
               && inventTrans.TransChildRefId   == movement.transChildRefId()
        {
            if (qtyRemain)
            {
                if (abs(inventTrans.Qty) < abs(qtyRemain))
                {
                    qtyTrans   = inventTrans.Qty;
                    qtyRemain -= qtyTrans;
                }
                else
                {
                    qtyTrans  = qtyRemain;
                    qtyRemain = 0;
                }

                InventReportDimHistory::findAndWrite(InventReportDimHistoryLogType::ProdJournalProd,
                                                     movement.transChildRefId(),
                                                     _prodJournalProd.InventTransId,
                                                     inventTrans.InventDimId,
                                                     qtyTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromProdJournalBOM</Name>
				<Source><![CDATA[
        static public void deleteFromProdJournalBOM(ProdJournalBOM _prodJournalBOM)
    {
        InventReportDimHistory  inventReportDimHistory;

        ttsbegin;
        delete_from inventReportDimHistory
            where inventReportDimHistory.InventTransId      == _prodJournalBOM.InventTransId
               && inventReportDimHistory.TransRefId         == _prodJournalBOM.InventTransChildRefId
               && inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::ProdJournalBOM;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromProdJournalProd</Name>
				<Source><![CDATA[
        static public void deleteFromProdJournalProd(ProdJournalProd _prodJournalProd)
    {
        InventReportDimHistory  inventReportDimHistory;

        ttsbegin;

        delete_from inventReportDimHistory
            where inventReportDimHistory.InventTransId      == _prodJournalProd.InventTransId
               && inventReportDimHistory.TransRefId         == _prodJournalProd.InventTransChildRefId
               && inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::ProdJournalProd;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromProdJournalRelease_RU</Name>
				<Source><![CDATA[
        public static void deleteFromProdJournalRelease_RU(ProdJournalRelease_RU _prodJournal)
    {
        InventReportDimHistory inventReportDimHistory;

        ttsbegin;

        delete_from inventReportDimHistory
            where inventReportDimHistory.InventTransId      == _prodJournal.InventTransId &&
                  inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::ProdJournalProd;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndWrite</Name>
				<Source><![CDATA[
        static private InventReportDimHistory findAndWrite(
        InventReportDimHistoryLogType    _logType,
        InventTransRefId                 _refTransId,
        InventTransId                    _inventTransId,
        InventDimId                      _inventDimId,
        InventQty                        _qty = 0)
    {
        InventReportDimHistory  dimHistory;

        ttsbegin;
        select firstonly forupdate dimHistory
            where dimHistory.TransactionLogType == _logType
               && dimHistory.TransRefId         == _refTransId
               && dimHistory.InventTransId      == _inventTransId
               && dimHistory.InventDimId        == _inventDimId;

        if (!dimHistory.RecId)
        {
            dimHistory.InventTransId        = _inventTransId;
            dimHistory.TransRefId           = _refTransId;
            dimHistory.TransactionLogType   = _logType;
            dimHistory.InventDimId          = _inventDimId;
        }
        dimHistory.Qty  += _qty;

        dimHistory.write();
        ttscommit;

        return dimHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateHistory</Name>
				<Source><![CDATA[
    public static boolean canCreateHistory(Common _journalLine)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124025</DeveloperDocumentation>
	<Label>@SYS81660</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TransactionLogType</TitleField1>
	<TitleField2>InventTransId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TypeTransIdRefIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>TypeTransIdRefIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionLogType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionLogType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionLogType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventReportDimHistoryLogType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeTransIdRefIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionLogType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustConfirmTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustConfirmTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::SalesConfirm</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>ConfirmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::SalesInvoice</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPackingSlipTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPackingSlipTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::SalesPackingSlip</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>PackingSlipId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustQuotationConfirmTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustQuotationConfirmTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::SalesQuotation</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>QuotationConfirmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustQuotationTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustQuotationTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::SalesQuotation</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalBOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalBOM</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::ProdJournalBOM</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>InventTransChildRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalProd</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdJournalProd</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::ProdJournalProd</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>InventTransChildRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLineHistory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLineHistory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::PurchPurchaseOrder</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::PurchInvoice</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>InternalInvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendReceiptsListTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendReceiptsListTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransactionLogType</Name>
					<Field>TransactionLogType</Field>
					<ValueStr>InventReportDimHistoryLogType::PurchReceiptList</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRefId</Name>
					<Field>TransRefId</Field>
					<RelatedField>ReceiptsListId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>