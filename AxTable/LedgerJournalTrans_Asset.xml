<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_Asset</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTrans_Asset extends common
{
    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the non-system fields from this buffer to the destination buffer.
    /// </summary>
    /// <param name="_destination">
    ///    The buffer to which to copy the non-system fields.
    /// </param>
    /// <remarks>
    ///    The <c>Common.data</c> method forces the system fields to be copied across. Some scenarios, such as
    ///    in-memory rollbacks of buffers, should not have those fields copied across.
    /// </remarks>
    public void copyTo(LedgerJournalTrans_Asset _destination)
    {
        SysDictField field;
        FieldId fieldId;
        SysDictTable sysDictTable = new SysDictTable(tableNum(LedgerJournalTrans_Asset));
        Set fieldsSet;
        Set systemFieldIds = new Set(Types::Integer);
        SetEnumerator fieldSetEnumerator;

        // Generate the list of system fields contained by this table.
        systemFieldIds.add(fieldNum(LedgerJournalTrans_Asset, RecId));
        systemFieldIds.add(fieldNum(LedgerJournalTrans_Asset, RecVersion));
        systemFieldIds.add(fieldNum(LedgerJournalTrans_Asset, DataAreaId));

        // Copy the non-system fields from this buffer to the destination buffer.
        fieldsSet = sysDictTable.fields();
        fieldSetEnumerator = fieldsSet.getEnumerator();
        while (fieldSetEnumerator.moveNext())
        {
            field = fieldSetEnumerator.current();
            fieldId = field.id();
            if (!systemFieldIds.in(fieldId))
            {
                // This is not a system field, so copy the value across.
                _destination.(fieldId) = this.(fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
	{
	    // <GJP>
	    AssetDepDistribution_JP distribution;
	    RefRecId                recId = this.RecId;
	    RefTableId              tableId = this.TableId;
	    ttsBegin;
	    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
	    {
	        delete_from distribution
	            where distribution.RefTableId == this.TableId
	                && distribution.RefRecId == this.RecId;
	    }
	    // </GJP>
	    super();
	    // <GJP>
	    ttsCommit;
	    // </GJP>
	}

]]></Source>
			</Method>
			<Method>
				<Name>doesAffectAcquisitionCost_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the fixed asset journal line affects the acquisition cost.
    /// </summary>
    /// <returns>
    /// true if the fixed asset journal line affects the acquisition cost; otherwise, false.
    /// </returns>
    public boolean doesAffectAcquisitionCost_JP()
    {
        boolean ret;

        ret = this.DocumentType_JP == AssetDocumentType_JP::None
            || AssetDocumentUtility_JP::isTransactionAffectingAcquisitionCost(
                AssetDocumentUtility_JP::assetTransTypeJournal2AssetTransType_JP(
                    this.TransType
                    , this.DocumentType_JP)
                , this.DocumentType_JP);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesAffectNetBookValue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the fixed asset journal line affects the net book value.
    /// </summary>
    /// <returns>
    /// true if the fixed asset journal line affects the net book value; otherwise, false.
    /// </returns>
    public boolean doesAffectNetBookValue_JP()
    {
        boolean ret;

        ret =  this.DocumentType_JP == AssetDocumentType_JP::None
            || AssetDocumentUtility_JP::isTransactionAffectingNetBookValue(
                AssetDocumentUtility_JP::assetTransTypeJournal2AssetTransType_JP(
                    this.TransType
                    ,this.DocumentType_JP)
                ,this.DocumentType_JP);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTopDefaultBookIdForFATransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the top-most book from the list of books associated with the primary fixed asset on this transaction.
    /// </summary>
    /// <param name="_currentOperationsTax">
    /// An optional parameter that allows one to specify which posting layer the book belongs to. This defaults to the <c>Current</c>
    /// posting layer.
    /// </param>
    /// <param name="_includeOnlyAssetBookPostingToLedger">
    /// An optional parameter if true will filter the asset book which has post to general ledger set to true. This defaults to the false.
    /// </param>
    /// <returns>
    /// The top-most book from the list of books associated with the primary fixed asset on this transaction.
    /// </returns>
    public AssetBookId getTopDefaultBookIdForFATransaction(
        CurrentOperationsTax _currentOperationsTax = CurrentOperationsTax::Current)
    {
        return AssetBook::getTopDefaultBookIdForAssetId(this.AssetId, this.Company, _currentOperationsTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.SaleFactor_PL = 100;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalTable  ledgerJournalTable;

        super();

        ledgerJournalTable = this.ledgerJournalTable();
        ledgerJournalTrans = LedgerJournalTrans::findRecId(this.RefRecId, false);

        if (ledgerJournalTable.JournalType != LedgerJournalType::Assets)
        {
            if ((ledgerJournalTrans.TaxGroup && ledgerJournalTrans.TaxItemGroup) || ledgerJournalTrans.TaxCode)
            {
                // tax information is out of date so delete and recalculate taxes.
                if (TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice))
                {
                    TaxUncommitted::deleteForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice);
                }

                // don't calculate taxes if this is marked as posted.  Also, records in the invoice pool don't
                // get Taxes calculated since they have already been posted to TaxTrans.
                // documents in the invoice pool are already posted and should not have taxes calculated.
                if (!ledgerJournalTable.Posted && !(ledgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool) && !ledgerJournalTrans.DelayTaxCalculation)
                {
                    LedgerJournalTrans::getTaxInstance(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice, true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssembling_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether current line is assembling.
    /// </summary>
    /// <returns>
    /// True if the current line is assembling; otherwise false;
    /// </returns>
    public boolean isAssembling_JP()
    {
        boolean isAssembling;

        if (AssetComponent_JP::isAssemblingEnabled()
            && (this.TransType      == AssetTransTypeJournal::Acquisition
                ||  this.TransType  == AssetTransTypeJournal::AcquisitionAdj
                ||  this.TransType  == AssetTransTypeJournal::WriteUpAdj)
            && AssetComponent_JP::isAssemblingNeeded(this.AssetId)
            && this.BookId == AssetComponent_JP::getAssemblingAssetBookId(this.AssetId))
        {
            isAssembling = true;
        }

        return isAssembling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisassembling_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether current line is assembling.
    /// </summary>
    /// <returns>
    /// True if the current line is assembling; otherwise false;
    /// </returns>
    public boolean isDisassembling_JP()
    {
        boolean isDisassembling;

        if (AssetComponent_JP::isAssemblingEnabled()
            && this.TransType  == AssetTransTypeJournal::WriteDownAdj
            && AssetComponent_JP::isDisassemblingNeeded(this.AssetId)
            && this.BookId == AssetComponent_JP::getAssemblingAssetBookId(this.AssetId))
        {
            isDisassembling = true;
        }

        return isDisassembling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMissingRequiredFATransactionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any transaction-required fields are missing.
    /// </summary>
    /// <returns>
    /// true if any transaction-required fields are missing; otherwise, false.
    /// </returns>
    public boolean isMissingRequiredFATransactionFields()
    {
        // Return true if any of the following fields are not filled in.
        return !this.BookId || !this.AssetId || !this.Company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsNotAdjustedForSYDM_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the acquisition value is not adjusted for sum-year-digits depreciation method.
    /// </summary>
    /// <returns>
    /// True if the acquisition value is not adjusted for sum-year-digits depreciation method; otherwise, false.
    /// </returns>
    public boolean IsNotAdjustedForSYDM_CN()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        AssetBook               assetBook;
        boolean                 ret = true;

        if (this.TransType
            && (this.TransType == AssetTransTypeJournal::AcquisitionAdj
                || this.TransType == AssetTransTypeJournal::WriteDownAdj
                || this.TransType == AssetTransTypeJournal::WriteUpAdj))
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(this.RefRecId, false);
            if (ledgerJournalTrans
                && (ledgerJournalTrans.AmountCurDebit || ledgerJournalTrans.AmountCurCredit))
            {
                assetBook = AssetBook::find(this.AssetId, this.BookId);
                if (assetBook.depreciationMethod() == AssetDepreciationMethod::SumYearDigits_CN)
                {
                    ret = ret && checkFailed(strFmt(AssetBook::txtAjustmentNotAllowedForSYDM_CN(), assetBook.assetId));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the journal to which this transaction belongs.
    /// </summary>
    /// <returns>
    ///    The journal to which this transaction belongs.
    /// </returns>
    public LedgerJournalTable ledgerJournalTable()
    {
        return LedgerJournalTable::find(LedgerJournalTrans::findRecId(this.RefRecId, false).JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(LedgerJournalTrans_Asset, AmountDebitReportingCurrency):

                if (LedgerJournalTransAssetReportingCurrencyEnablementFlight::instance().isEnabled()
                    && this.AmountDebitReportingCurrency)
                {
                    this.AmountCreditReportingCurrency = 0;
                }
                break;

            case fieldNum(LedgerJournalTrans_Asset, AmountCreditReportingCurrency):

                if (LedgerJournalTransAssetReportingCurrencyEnablementFlight::instance().isEnabled()
                    && this.AmountCreditReportingCurrency)
                {
                    this.AmountDebitReportingCurrency = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name of the field to modify.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to modify.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);
        // <GJP>
        switch (_fieldName)
        {
            case fieldStr(LedgerJournalTrans_Asset, DocumentType_JP):
                if (this.DocumentType_JP != this.orig().DocumentType_JP)
                {
                    this.AssetDocumentEntry_JP = 0;
                }
                break;
            case fieldStr(LedgerJournalTrans_Asset, BookId):
                if (this.BookId != this.orig().BookId)
                {
                    this.DocumentType_JP = AssetDocumentType_JP::None;
                    this.AssetDocumentEntry_JP = 0;
                }
                break;            
        }
        // </GJP>
    }

]]></Source>
			</Method>
			<Method>
				<Name>reductionEntryDocumentDate_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the asset reduction entry document date
    /// </summary>
    /// <param name="_set">
    /// Set or get the document date
    /// </param>
    /// <param name="_documentDate">
    /// Instance of <c>AssetReductionEntryDocumentDate_JP</c>
    /// </param>
    /// <returns>
    /// The document date for asset reduction entry
    /// </returns>
    public edit AssetReductionEntryDocumentDate_JP reductionEntryDocumentDate_JP(
        boolean                                  _set,
        AssetReductionEntryDocumentDate_JP       _documentDate)
    {
        AssetDocumentReductionEntry_JP      document;
        AssetReductionEntryDocumentDate_JP  documentDateLoc;

        document = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
            this.AssetId,
            this.BookId);

        if (_set)
        {
            documentDateLoc = _documentDate;
            if (document != null)
            {
                document.parmReductionEntryDocumentDate(documentDateLoc);
                document.updateReductionEntryDocument();
            }
        }
        else
        {
            if (document != null)
            {
                documentDateLoc = document.parmReductionEntryTable().DocumentDate;
            }
        }

        return documentDateLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAndValidateCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and validates the <c>Company</c> field.
    /// </summary>
    /// <returns>
    /// true if the company field is valid; otherwise, false.
    /// </returns>
    private boolean setAndValidateCompany()
    {
        boolean isValid = true;

        if (!this.Company)
        {
            this.Company = curext();
        }
        else if (!xDataArea::exist(this.Company))
        {
            isValid = checkFailed(strFmt("@SYS10666", this.Company));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetId</Name>
				<Source><![CDATA[
    private void setAssetId()
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.RecId == this.RefRecId;

        if (ledgerJournalTrans && ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets)
        {
            this.AssetId = ledgerJournalTrans.getAssetId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetBookId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the book exists based on asset and book ID in the <c>AssetBook</c> table for the
    ///    appropriate company.
    /// </summary>
    /// <returns>
    ///    <c>true</c> if the asset and book ID exist for the specified company; otherwise, <c>false</c>.
    /// </returns>
    public boolean validateAssetBookId()
    {
        boolean     isValid = true;

        isValid = this.setAndValidateCompany();

        this.setAssetId();

        if (isValid)
        {
            changecompany(this.Company)
            {
                // <GIN>
                if (AssetParameters::isDepreciationIncomeTaxActEnable_IN()
                    && !this.AssetId)
                {
                    if (!AssetGroupBookSetup::exist(this.AssetGroup_IN, this.BookId))
                    {
                        isValid = checkFailed(strFmt("@FixedAssets:FA_MessageError_BookDoesNotExistForFixedAsset", this.BookId, this.AssetGroup_IN));
                    }
                }
                else
                {
                // </GIN>
                    if (!AssetBook::exist(this.AssetId, this.BookId))
                    {
                        isValid = checkFailed(strFmt("@FixedAssets:FA_MessageError_BookDoesNotExistForFixedAsset", this.BookId, this.AssetId));
                    }
                    else
                    {
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
                        {
                            // Verify that French derogatory transactions have proper transactions types.
                            isValid = this.validateDerogatoryTransTypeInCurComp_FR();
                        }
                    }

                // <GIN>
                }
                // </GIN>
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetIdForWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>AssetId</c> field for the write event.
    /// </summary>
    /// <returns>
    /// true if the <c>AssetId</c> field is valid for writing; otherwise, false.
    /// </returns>
    private boolean validateAssetIdForWrite()
    {
        boolean isValid = true;

        // Make sure the AssetId been has been set.
        if (!this.AssetId)
        {
            isValid = checkFailed("@SYS113323");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompanyForWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>Company</c> field for the write event.
    /// </summary>
    /// <returns>
    /// true if the <c>Company</c> field is valid for writing; otherwise, false.
    /// </returns>
    private boolean validateCompanyForWrite()
    {
        boolean isValid = true;

        // Make sure the Company field has been set.
        if (!this.Company)
        {
            isValid = checkFailed("@SYS113324");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDerogatoryTransactionType_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether a transaction type is valid for a given value model.
    /// </summary>
    /// <returns>
    ///    true if transaction type is valid; otherwise, false.
    /// </returns>
    private boolean validateDerogatoryTransactionType_FR()
    {
        boolean isValid = true;

        isValid = this.setAndValidateCompany();

        if (isValid)
        {
            changecompany(this.Company)
            {
                isValid = this.validateDerogatoryTransTypeInCurComp_FR();
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDerogatoryTransTypeInCurComp_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the transaction for derogatory books without changing companies.
    /// </summary>
    /// <returns>
    ///    true if transaction type is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is wrapped by other methods such as the <c>validateAssetBookId</c> and
    ///    <c>validateDerogatoryTransactionType_FR</c> method that provide company changes.
    /// </remarks>
    private boolean validateDerogatoryTransTypeInCurComp_FR()
    {
        AssetBook assetBook;
        boolean isValid = true;

        // Select the related AssetBook
        assetBook = AssetBook::find(this.AssetId, this.BookId);

        if (assetBook.BookId)
        {
            // A user cannot create Derogatory transactions as they do not apply to tax transactions.
            // Acqisitions, Acquistion Adj, Write Down/Upd adj are synchronized via derived value models.
            if (assetBook.IsDerogatoryBook_FR
                && LedgerJournalTrans_Asset::invalidDerogatoryTaxTranType_FR(this.TransType))
            {
                // An asset transaction '%1' for derogatory tax model '%2' is not allowed.
                isValid = checkFailed(strFmt("@SYS110420", this.TransType, assetBook.BookId));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the field passed in as a parameter.
    /// </summary>
    /// <param name="field">
    ///    The field to be validated.
    /// </param>
    /// <returns>
    ///    <c>true</c> if the rule exits; otherwise, <c>false</c>.
    /// </returns>
    public boolean validateField(FieldId field)
    {
        boolean isValid = true;

        switch (field)
        {
            case fieldNum(LedgerJournalTrans_Asset, BookId) :
                isValid = this.validateAssetBookId();

                if (isValid)
                {
                    this.assetBook().hasHalfYearDepreciation_CZ(this.TransType, this.ledgerJournalTrans().TransDate);
                }
                break;

            case fieldNum(LedgerJournalTrans_Asset, TransType) :
                // For French Derogatory verify that proper transactions are selected.
                if (this.AssetId && this.BookId && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
                {
                    isValid = this.validateDerogatoryTransactionType_FR();
                }

                // <GEEPL>
                if ((this.TransType == AssetTransTypeJournal::DisposalSale
                    || this.TransType == AssetTransTypeJournal::DisposalScrap)
                    && !AssetTable::isAssetForSale(this.AssetId))
                {
                    isValid = checkFailed(strFmt("@GLS110194", this.AssetId));
                }
                // </GEEPL>
                break;

            // <GEEPL>
            case fieldNum(LedgerJournalTrans_Asset, SaleFactor_PL) :
                if (this.SaleFactor_PL <= 0 || this.SaleFactor_PL > 100)
                {
                    isValid = checkFailed("@SYS31248");
                }

                if (isValid && this.SaleFactor_PL > 0 && this.SaleFactor_PL < 100)
                {
                    if (!AssetPostDisposal_Pl::isDisposalWithPolishDepreciation(
                            this.AssetId, this.BookId))
                    {
                        isValid = checkFailed("@GLS221846");
                    }
                }
                break;
            // </GEEPL>

            default:
                isValid = super(field);
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether a transaction can be saved.
    /// </summary>
    /// <returns>
    ///    true if the write action is successful; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean isValid = true;

        isValid = super();

        if (isValid)
        {
            isValid = this.validateAssetBookId();
        }

        if (isValid)
        {
            isValid = this.validateAssetIdForWrite();
        }

        if (isValid)
        {
            isValid = this.validateBudgetModelForWrite();
        }

        if (isValid)
        {
            isValid = this.validateCompanyForWrite();
        }

        // <GIN>
        if (AssetParameters::isDepreciationIncomeTaxActEnable_IN()
            && LedgerJournalTable::find(LedgerJournalTrans::findRecId(this.RefRecId,false).JournalNum).CurrentOperationsTax != CurrentOperationsTax::Tax
            && this.TransType == AssetTransTypeJournal::BonusDepreciation)
        {
            isValid =  checkFailed(strFmt("@GLS5978", "@SYS28668"));
        }
        // </GIN>
        
        isValid = this.checkLastDepreciationDate(isValid);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(LedgerJournalTransRefRecId _refRecId )
    {
        boolean ret = true;

        if (!LedgerJournalTrans_Asset::exist(_refRecId))
        {
            ret = checkFailed(strFmt(LedgerJournalTrans_Asset::txtNotExist(), _refRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The unique ID for which to check.
    /// </param>
    /// <returns>
    ///    true if the rule exits; otherwise, false.
    /// </returns>
    public static boolean exist(LedgerJournalTransRefRecId _refRecId )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     ledgerJournalTrans_Asset
                 where
                     ledgerJournalTrans_Asset.RefRecId == _refRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the <c>LedgerJournalTrans_Asset</c> table for the specified ID.
    /// </summary>
    /// <param name="_refRecId">
    ///    The unique record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An optional value that is used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    ///    An elimination rule buffer.
    /// </returns>
    /// <remarks>
    ///    This is a public method that is used to find records.
    /// </remarks>
    public static LedgerJournalTrans_Asset find(
        LedgerJournalTransRefRecId _refRecId ,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;

        ledgerJournalTrans_Asset.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalTrans_Asset.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            ledgerJournalTrans_Asset
            where
            ledgerJournalTrans_Asset.RefRecId == _refRecId;

        return ledgerJournalTrans_Asset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidDerogatoryTaxTranType_FR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the asset transaction type is invalid for French Derogatory Depreciation tax value
    ///    models.
    /// </summary>
    /// <param name="_assetTransType">
    ///    An asset transaction journal type for which the check will be done.
    /// </param>
    /// <returns>
    ///    true if the transaction type is invalid; otherwise, false.
    /// </returns>
    public static boolean invalidDerogatoryTaxTranType_FR(AssetTransTypeJournal _assetTransType)
    {
        boolean isInvalid = false;

        if (_assetTransType == AssetTransTypeJournal::DerogatoryDecrease
            || _assetTransType== AssetTransTypeJournal::DerogatoryIncrease
            || _assetTransType== AssetTransTypeJournal::DisposalScrap
            || _assetTransType== AssetTransTypeJournal::DisposalSale
            || _assetTransType== AssetTransTypeJournal::Acquisition
            || _assetTransType== AssetTransTypeJournal::AcquisitionAdj
            || _assetTransType== AssetTransTypeJournal::WriteDownAdj
            || _assetTransType== AssetTransTypeJournal::WriteUpAdj)
        {
            isInvalid = true;
        }

        return isInvalid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the label number to use when it displays a message to indicate that the record does not
    ///    exist.
    /// </summary>
    /// <returns>
    ///    A string that indicates the label number to use.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102239";
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureForSkipDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>skip</c> methods that are relevant when doing inserts or updates.
    /// </summary>
    public void configureForSkipDelete()
    {
        this.skipDataMethods(true);
        this.skipDeleteActions(true);
        this.skipDeleteMethod(true);
        this.skipEvents(true);
        this.skipPostLoad(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransactionTypeByAssetIdBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the transaction type of the journal transaction based on Asset information.
    /// </summary>
    /// <param name="_assetId">
    /// Instance of <c>AssetId</c>.
    /// </param>
    /// <param name="_bookId">
    /// Instance of <c>AssetBookId</c>.
    /// </param>
    /// <param name="_company">
    /// The <c>SelectableDataArea</c> associated with the journal transaction; optional.
    /// </param>
    /// <returns>
    /// Tranaction type of the journal transaction.
    /// </returns>
    public AssetTransTypeJournal findTransactionTypeByAssetIdBookId(
        AssetId             _assetId,
        AssetBookId         _bookId,
        SelectableDataArea  _company = curext())
    {
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;

        select firstonly TransType from ledgerJournalTrans_Asset
            where ledgerJournalTrans_Asset.BookId == _bookId &&
                ledgerJournalTrans_Asset.AssetId == _assetId &&
                ledgerJournalTrans_Asset.Company == _company;

        return ledgerJournalTrans_Asset.TransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSplitTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if current transaction originated from the split process
    /// </summary>
    /// <returns>
    /// true if transactions is from the split process; otherwise, false.
    /// </returns>
    public boolean isSplitTransaction()
    {
        boolean returnValue;

        if (this.ledgerJournalTable().Name == "@SYS67430" || this.AssetTransSubType == AssetTransactionSubType::Split)
        {
            returnValue = true;
        }

        return  returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDepreciationJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a transaction of a depreciation type.
    /// </summary>
    /// <param name = "_assetId">Asset id </param>
    /// <param name = "_bookId">Asset book id</param>
    /// <param name="_includeBonusDepreciation">
    /// If set true, the search will include Bonus Depreciation transactions, optional.
    /// </param>
    /// <returns>True if a transaction is found, otherwise false</returns>
    public static boolean existDepreciationJournals(AssetId _assetId, AssetBookId _bookId, boolean _includeBonusDepreciation = false)
    {
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        boolean returnValue;

        if (_assetId && _bookId)
        {
            if (_includeBonusDepreciation)
            {
                returnValue = (select firstonly RecId from ledgerJournalTrans_Asset
                            where ledgerJournalTrans_Asset.AssetId == _assetId
                                && ledgerJournalTrans_Asset.BookId == _bookId
                                && (ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::Depreciation
                                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::DepreciationAdj
                                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::DerogatoryIncrease
                                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::DerogatoryDecrease
                                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::BonusDepreciation
                                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::ExtraordinaryDepreciation )
                                ).RecId != 0;
            }
            else
            {
                returnValue = (select firstonly RecId from ledgerJournalTrans_Asset
                            where ledgerJournalTrans_Asset.AssetId == _assetId
                                && ledgerJournalTrans_Asset.BookId == _bookId
                                && (ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::Depreciation
                                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::DepreciationAdj
                                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::DerogatoryIncrease
                                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::DerogatoryDecrease
                                || ledgerJournalTrans_Asset.TransType == AssetTransTypeJournal::ExtraordinaryDepreciation )
                                ).RecId != 0;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBookPostsToGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// This function checks if the asset book can post to general ledger.
    /// </summary>
    /// <returns>
    /// True, if the asset books posts to general ledger; otherwise, false.
    /// </returns>
    public boolean assetBookPostsToGeneralLedger()
    {
       return AssetBookTable::find(this.BookId).postToGeneralLedger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the transaction date of the fixed asset operation.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The record in the <c>LedgerJournalTrans</c> table.</param>
    /// <returns>
    ///   The transaction date.
    /// </returns>
    public TransDate getTransDate_RU(LedgerJournalTrans _ledgerJournalTrans = null)
    {
        TransDate transDate;

        if (prmIsDefault(_ledgerJournalTrans))
        {
            transDate = (select firstonly TransDate from LedgerJournalTrans
                            where LedgerJournalTrans.RecId == this.RefRecId).TransDate;
        }
        else
        {
            transDate = _ledgerJournalTrans.TransDate;
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetModelForWrite</Name>
				<Source><![CDATA[
    private boolean validateBudgetModelForWrite()
    {
        boolean isValid = true;
        if (this.ledgerJournalTable().JournalType == LedgerJournalType::AssetBudgets && !this.BudgetModel)
        {
            isValid = checkFailed("@SYS71103");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBook</Name>
				<Source><![CDATA[
    public AssetBook assetBook()
    {
        AssetBook assetBook = AssetBook::find(this.AssetId, this.BookId);

        return assetBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans ledgerJournalTrans()
    {
        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(this.RefRecId, false);

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportingCurrencyAmountsForDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets reporting currency amounts for debit and credit on the table <c>ledgerJournalTrans_Asset</c>.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <param name = "ledgerJournalTrans_Asset">
    /// The <c>LedgerJournalTrans_Asset</c> table buffer.
    /// </param>    
    public static void setReportingCurrencyAmountsForDepreciation(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset)
    {        
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets && Ledger::reportingCurrency())
        {
            if (_ledgerJournalTrans_Asset.isDepreciationTransactionType())
            {            
                if (_ledgerJournalTrans.AmountCurDebit)
                {
                    _ledgerJournalTrans_Asset.AmountDebitReportingCurrency = _ledgerJournalTrans.calcDebitReportingCurrency();
                    _ledgerJournalTrans_Asset.AmountCreditReportingCurrency = 0;
                }
                else if (_ledgerJournalTrans.AmountCurCredit)
                {
                    _ledgerJournalTrans_Asset.AmountCreditReportingCurrency = _ledgerJournalTrans.calcCreditReportingCurrency();
                    _ledgerJournalTrans_Asset.AmountDebitReportingCurrency = 0;
                }                                
            }
            else
            {
                _ledgerJournalTrans_Asset.AmountCreditReportingCurrency = 0;
                _ledgerJournalTrans_Asset.AmountDebitReportingCurrency  = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepreciationTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check for depreciation transaction type. 
    /// </summary>
    /// <returns>
    /// true if it transaction type is depreciation; otherwise, false.
    /// </returns>
    public boolean isDepreciationTransactionType()
    {
        if (this.TransType == AssetTransTypeJournal::Depreciation
            || this.TransType == AssetTransTypeJournal::DepreciationAdj
            || this.TransType == AssetTransTypeJournal::ExtraordinaryDepreciation
            || this.TransType == AssetTransTypeJournal::BonusDepreciation)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrency</Name>
				<Source><![CDATA[
    public display CurrencyCode reportingCurrency()
    {
        return Ledger::reportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the the debit/credit reporting currency amount.
    /// </summary>
    /// <returns>return reporting currency amount.</returns>
    public display Amount amountReportingCurrency()
    {
        return this.AmountDebitReportingCurrency ? CurrencyExchange::round(this.AmountDebitReportingCurrency, Ledger::reportingCurrency()) : -CurrencyExchange::round(this.AmountCreditReportingCurrency, Ledger::reportingCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLastDepreciationDate</Name>
				<Source><![CDATA[
    private boolean checkLastDepreciationDate(boolean _isValid)
    {
        LedgerJournalTrans ledgerJournalTrans;
        ledgerJournalTrans = LedgerJournalTrans::findRecId(this.RefRecId, false);
        boolean ret = _isValid;

        if (ret
            && this.TransType == AssetTransTypeJournal::Depreciation
            && ledgerJournalTrans.TransDate <= AssetBook::find(this.AssetId, this.BookId).LastDepreciationDate)
        {
            if (!AssetParameters::isAllowMultipleDepreciation())
            {
                ret = checkFailed(strfmt("@FixedAssets:FA_AssetPreventMultipleDepreciationMessage",
                        this.AssetId,
                        this.BookId));
            }
            else
            {
                checkFailed(strFmt("@SYS344047", ledgerJournalTrans.TransDate));
            }
        }
        return ret;   
    }

]]></Source>
			</Method>
			<Method>
				<Name>impliedDataAreaFieldNameDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionObjectStorageTableReferenceProcessor), delegatestr(DimensionObjectStorageTableReferenceProcessor, impliedDataAreaFieldNameDelegate))]
    static void impliedDataAreaFieldNameDelegate(TableId _tableId, FieldId _fieldId, EventHandlerResult _result)
    {
        if (_tableId == tableNum(LedgerJournalTrans_Asset))
        {
            switch(_fieldId)
            {
                case(fieldNum(LedgerJournalTrans_Asset, LedgerDimension_RU)):
                    _result.result(fieldStr(LedgerJournalTrans, Company));
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126168</DeveloperDocumentation>
	<Label>@SYS111034</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>BookId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>BookIdAssetId</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RefRecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetDocument_JP</Name>
			<Label>@SYS4004938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentType_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetDocumentEntry_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetGroup_IN</Name>
			<Label>@GLS5992</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Budget</Name>
			<Label>@SYS80981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPostingStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionDepreciation</Name>
			<Label>@SYS111261</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsumptionQuantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation</Name>
			<Label>@SYS67341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReserveTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAdjustedDepreciation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationPeriod_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets_PL</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleFactor_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefAssetID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LowValuePool</Name>
			<Label>@SYS113681</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LowValuePoolType_AU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LVPTransferId_AU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Revaluation</Name>
			<Label>@SYS67509</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevaluationAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevaluationTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference_RU</Name>
			<Label>@GLS106473</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LinkedTransRecId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CanDisposal_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostValue_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StornoRecId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account_RU</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationBonus_RU</Name>
			<Label>@GLS116827</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationBonusId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correction_RU</Name>
			<Label>@GLS105434</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportingCurrency</Name>
			<Label>@GeneralLedger:ReportingCurrency</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountCreditReportingCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountDebitReportingCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetDocumentEntry_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDocumentRecId_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookIdPurchSalesInvent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBudgetModelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetPostingStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetBudgetPostingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS14025</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsumptionQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetConsumption</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DepreciationStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<ExtendedDataType>AssetDepreciationStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepreciationTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentType_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetDocumentType_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAdjustedDepreciation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FixedAssetAdjustedDepreciation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPriorYear</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LowValuePoolType_AU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetLowValuePoolType_AU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LVPTransferId_AU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLowValuePoolTransferId_AU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefAssetID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetRefAssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReserveTransId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RevaluationAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetRevaluationAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RevaluationTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetRevaluationTrans</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SaleFactor_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlAssetSaleFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetTransTypeJournal</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanDisposal_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<IsObsolete>Yes</IsObsolete>
			<Label>@GLS116236</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationBonusId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AssetBonusId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DepreciationPeriod_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS67451</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostValue_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>AssetPostValue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LinkedTransRecId_RU</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetRelationRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StornoRecId_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedPeriod_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectedPeriod_RU</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup_LT</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT</CountryRegionCodes>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCreditReportingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Label>@FixedAssets:FA_TableField_AmountCreditReportingCurrency</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountDebitReportingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Label>@FixedAssets:FA_TableField_AmountDebitReportingCurrency</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetTransSubType</Name>
			<EnumType>AssetTransactionSubType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodFromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@FixedAssets:PeriodFromDate</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@FixedAssets:PeriodToDate</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OriginalTransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OriginalIsPriorYear</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BookIdAssetId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerDimension_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>CRSERussia</ConfigurationKey>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123822</EntityRelationshipRole>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBook</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_Asset</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Company</Name>
					<Field>Company</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookIdPurchSalesInvent</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetDocumentEntryTableView_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetDocumentEntryTableView_JP</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetDocumentEntry_JP</Name>
					<Field>AssetDocumentEntry_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup_IN</Name>
					<SourceEDT>AssetGroupId</SourceEDT>
					<Field>AssetGroup_IN</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable_AssetId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable_AssetId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable_LVPTransferId_AU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable_LVPTransferId_AU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LVPTransferId_AU</Name>
					<SourceEDT>AssetLowValuePoolTransferId_AU</SourceEDT>
					<Field>LVPTransferId_AU</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable_RefAssetID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable_RefAssetID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefAssetID</Name>
					<SourceEDT>AssetRefAssetId</SourceEDT>
					<Field>RefAssetID</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126169</EntityRelationshipRole>
			<RelatedTable>AssetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_Asset</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReserveTransId</Name>
					<Field>ReserveTransId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BudgetModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetModel</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetModel</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>AssetBudgetModelId</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>HeadingSub::Heading</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetModel</Name>
					<SourceEDT>AssetBudgetModelId</SourceEDT>
					<Field>BudgetModel</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetGroup_LT</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup_LT</Name>
					<Field>AssetGroup_LT</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>