<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqProcessAutoFirmingRun</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqProcessAutoFirmingRun extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initNewRunForProcessId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record in the <c>ReqProcessAutoFirmingRun</c> table for a master planning run.
    /// </summary>
    /// <param name = "_processId">The process id of the master planning run.</param>
    /// <returns>A newly created <c>ReqProcessAutoFirmingRun</c> record.</returns>
    internal static ReqProcessAutoFirmingRun initNewRunForProcessId(ReqProcessId _processId)
    {
        ttsbegin;
        ReqProcessAutoFirmingRun processAutoFirmingRun;
        processAutoFirmingRun.FirmingRunId = ReqProcessAutoFirmingRun::generateFirmingRunId();
        processAutoFirmingRun.ProcessId = _processId;
        processAutoFirmingRun.insert();
        ttscommit;

        return processAutoFirmingRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureExistsForProcessId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that a new record exists in the <c>ReqProcessAutoFirmingRun</c> table for a master planning run.
    /// </summary>
    /// <param name = "_processId">The process id of the master planning run.</param>
    /// <returns>A <c>ReqProcessAutoFirmingRun</c> record corresponding to a given run.</returns>
    /// <remarks>Not thread safe.</remarks>
    internal static ReqProcessAutoFirmingRun ensureExistsForProcessId(ReqProcessId _processId)
    {
        var processAutoFirmingRun = ReqProcessAutoFirmingRun::findByProcessId(_processId);

        if (!processAutoFirmingRun)
        {
            return ReqProcessAutoFirmingRun::initNewRunForProcessId(_processId);
        }

        return processAutoFirmingRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFirmingRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a new firming run id.
    /// </summary>
    /// <returns>A new firming run id.</returns>
    private static ReqFirmingRunId generateFirmingRunId()
    {
        return System.Guid::NewGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirmingRunIdForProccessId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the firming run id for a master planning run.
    /// </summary>
    /// <param name = "_processId">The process id of the master planning run.</param>
    /// <returns>The firming run id.</returns>
    internal static ReqFirmingRunId findFirmingRunIdForProccessId(ReqProcessId _processId)
    {
        ReqProcessAutoFirmingRun processAutoFirmingRun = ReqProcessAutoFirmingRun::findByProcessId(_processId);

        return processAutoFirmingRun.FirmingRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up all records related to a single master planning run.
    /// </summary>
    /// <param name = "_processId">The Process ID of the affected run.</param>
    internal static void cleanUpProcess(ReqProcessId _processId)
    {
        ReqProcessAutoFirmingRun processAutoFirmingRun;

        delete_from processAutoFirmingRun
            where processAutoFirmingRun.ProcessId == _processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHasErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the associated <c>ReqProcessAutoFirmingRun</c> as having errors.
    /// </summary>
    /// <param name = "_processId">The Process ID of the affected run.</param>
    internal static void setHasErrors(ReqProcessId _processId)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            ReqProcessAutoFirmingRun processAutoFirmingRun = ReqProcessAutoFirmingRun::findByProcessId(_processId, true);
            if (processAutoFirmingRun && processAutoFirmingRun.HasErrors == false)
            {
                processAutoFirmingRun.HasErrors = true;
                processAutoFirmingRun.update();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::UpdateConflict;
            }
                    
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }

            throw Exception::UpdateConflictNotRecovered;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProcessId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the associated <c>ReqProcessAutoFirmingRun</c> from the process id of the run.
    /// </summary>
    /// <param name = "_processId">The Process ID of the affected run.</param>
    /// <param name = "_forupdate">Whether to select for update.</param>
    /// <returns>The associated <c>ReqProcessAutoFirmingRun</c> record.</returns>
    internal static ReqProcessAutoFirmingRun findByProcessId(ReqProcessId _processId, boolean _forupdate = false)
    {
        ReqProcessAutoFirmingRun processAutoFirmingRun;

        if (_processId)
        {
            if (_forupdate)
            {
                processAutoFirmingRun.selectForUpdate(_forupdate);
            }
        
            select firstonly processAutoFirmingRun
                where processAutoFirmingRun.ProcessId == _processId;
        }

        return processAutoFirmingRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SCM:Developer_ReqProcessAutoFirmingRun</DeveloperDocumentation>
	<Label>@SCM:Table_ReqProcessAutoFirmingRun</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Visible>No</Visible>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>FirmingRunId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReqFirmingRunId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProcessId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqProcessId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasErrors</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RunIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FirmingRunId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProcessIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcessId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProcessList</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqProcessList</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProcessList</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FirmingRuns</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcessId</Name>
					<Field>ProcessId</Field>
					<RelatedField>ProcessId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProcessIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>