<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximSionItemTableRelationship_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximSionItemTableRelationship_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromEximSionItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize from exim sion item table.
    /// </summary>
    /// <param name="_sionItemTable">
    /// The sion item table.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromEximSionItemTable(EximSionItemTable_IN _sionItemTable)
    {
        this.Unit                      = _sionItemTable.Unit;
        this.AllowedQty                = _sionItemTable.RestrictedAllowedQty ?
                                         _sionItemTable.RestrictedAllowedQty :
                                         _sionItemTable.AllowedQty;
        this.RelatedSionItemTableRecId = _sionItemTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays item name.
    /// </summary>
    /// <returns>
    /// The item name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display ItemName itemName()
    {
        return InventTable::find(this.ItemId).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the specified field to its original value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    public void modifiedFieldValue(
        fieldName _fieldName,
        int       _arrayIndex = 1)
    {
        EximSionItemTable_IN sionItemTable;
        EximSionItemTable_IN sionItemTableCopy;

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(EximSionItemTableRelationship_IN, ItemId):
                if (this.ItemId)
                {
                    select firstonly SionLineRecId, ItemId
                        from sionItemTable
                            where sionItemTable.RecId == this.SionItemTableRecId
                        join firstonly ItemId, Unit, AllowedQty, RestrictedAllowedQty, RecId
                            from sionItemTableCopy
                                where sionItemTableCopy.SionLineRecId == sionItemTable.SionLineRecId
                                   && sionItemTableCopy.ItemId        == this.ItemId;

                    this.initFromEximSionItemTable(sionItemTableCopy);
                }
                else
                {
                    this.Unit               = '';
                    this.AllowedQty         = 0;
                    this.RelatedSionItemTableRecId = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(
        fieldName _fieldName,
        int       _arrayIndex = 1)
    {
        EximSionItemTable_IN sionItemTable;
        EximSionItemTable_IN sionItemTableCopy;

        boolean ret = true;

        switch (_fieldName)
        {
            case fieldstr(EximSionItemTableRelationship_IN, ItemId):

                select firstonly SionLineRecId, ItemId
                    from sionItemTable
                        where sionItemTable.RecId == this.SionItemTableRecId
                    join firstonly ItemId, RecId
                        from sionItemTableCopy
                            where sionItemTableCopy.SionLineRecId == sionItemTable.SionLineRecId
                                && sionItemTableCopy.ItemId       == this.ItemId;

                if (!sionItemTableCopy.ItemId)
                {
                    ret = checkFailed(strfmt("@SYS112224", this.ItemId, "@SYS12836", "@GLS61438"));
                }

                if (this.SionItemTableRecId == sionItemTableCopy.RecId)
                {
                    ret = checkFailed(strfmt("@SYS90981", this.ItemId + "@SYS77038" + sionItemTableCopy.ItemId));
                }

                if (ret)
                {
                    ret = EximSionItemTableRelationship_IN::checkCyclicDependency(this.SionItemTableRecId,
                                                                                    sionItemTableCopy.RecId,
                                                                                    this.ItemId);
                }
            break;
        }

        ret = ret && super(_fieldName, _arrayIndex);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAllowedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the allowed quantity for inputs that can be imported to India based on the quantity that has to be exported.
    /// </summary>
    /// <param name="_sionItemTableRecId">
    ///    RecId of SIONItemTable.
    /// </param>
    /// <returns>
    ///    The latest <c>The allowed quantity</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Qty calculateAllowedQty(RefRecId _sionItemTableRecId)
    {
        EximSionItemTableRelationship_IN sionItemTableRelation;
        EximSionItemTable_IN             sionItemTable;
        Qty                              allowedQtySum;

        while select Unit, AllowedQty, Percent
            from sionItemTableRelation
                join Unit, ItemId
                from sionItemTable
                    where sionItemTableRelation.SionItemTableRecId == sionItemTable.RecId
                       && sionItemTable.RecId                      == _sionItemTableRecId
        {
            if (sionItemTableRelation.Unit != sionItemTable.Unit)
            {
                if (!UnitOfMeasureConverter::canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(sionItemTableRelation.Unit),
                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(sionItemTable.Unit),
                                                            InventTable::itemProduct(sionItemTable.ItemId)))
                {
                    throw error(strfmt("@SYS28690", sionItemTableRelation.Unit, sionItemTable.Unit));
                }
                else
                {
                    sionItemTableRelation.AllowedQty = sionItemTableRelation.Unit == sionItemTable.Unit ?
                                                       sionItemTableRelation.AllowedQty : UnitOfMeasureConverter::convert(
                                                                                            sionItemTableRelation.AllowedQty,
                                                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(sionItemTableRelation.Unit),
                                                                                            UnitOfMeasure::unitOfMeasureIdBySymbol(sionItemTable.Unit),
                                                                                            NoYes::Yes,
                                                                                            InventTable::itemProduct(sionItemTable.ItemId));
                }
            }

            sionItemTableRelation.AllowedQty = CurrencyExchangeHelper::amount(sionItemTableRelation.AllowedQty * sionItemTableRelation.Percent / 100);

            allowedQtySum += sionItemTableRelation.AllowedQty;
        }

        return allowedQtySum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCyclicDependency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks cyclic dependency.
    /// </summary>
    /// <param name="_parentSionItemTableRecid">
    /// The parent sion item table RecId.
    /// </param>
    /// <param name="_relatedSionItemTableRecid">
    /// The related sion item table RecId.
    /// </param>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <returns>
    /// If 'True', the cyclic dependency is active.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkCyclicDependency(
        RefRecId _parentSionItemTableRecid,
        RefRecId _relatedSionItemTableRecid,
        ItemId   _itemId)
    {
        EximSionItemTableRelationship_IN sionItemTableRelation;
        RefRecId                         parentRecId;
        RefRecId                         relatedRecId;
        RefRecId                         buildRecId;
        Counter                          counterI;
        container                        storeRecId = connull();
        boolean                          status     = true;
        boolean                          ret        = true;
        #define.0(0)

        parentRecId  = _parentSionItemTableRecid;
        relatedRecId = _relatedSionItemTableRecid;

        do
        {
            for (counterI = #0; counterI <= conlen(storeRecId); counterI++)
            {
                if (status)
                {
                    if (storeRecId)
                    {
                        relatedRecId = conpeek(storeRecId, counterI);
                    }

                    select count(RecId)
                        from sionItemTableRelation
                            where sionItemTableRelation.SionItemTableRecId == relatedRecId;

                    if (sionItemTableRelation.RecId)
                    {
                        while select ItemId, SionItemTableRecId, RelatedSionItemTableRecId
                            from sionItemTableRelation
                            where sionItemTableRelation.SionItemTableRecId == relatedRecId
                        {
                            if (sionItemTableRelation.RelatedSionItemTableRecId == parentRecId)
                            {
                                ret = checkFailed(strfmt("@SYS90981", sionItemTableRelation.ItemId + "@SYS77038" + _itemId));
                                status = false;
                                break;
                            }
                            else if (EximSionItemTable_IN::find(sionItemTableRelation.SionItemTableRecId).Basis == EximSionBasis_IN::PctOfInput)
                            {
                                buildRecId = sionItemTableRelation.RelatedSionItemTableRecId;
                            }

                            if (buildRecId != #0)
                            {
                                if (!confind(storeRecId, buildRecId))
                                {
                                    storeRecId += buildRecId;
                                    buildRecId  = #0;
                                }
                            }
                        }
                    }
                    else
                    {
                        status = false;
                    }
                }
            }
        }
        while (status);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSionItemTableRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if sion item table relation exists.
    /// </summary>
    /// <param name="_refRecId">
    /// The reference RecId.
    /// </param>
    /// <returns>
    /// If 'True', the sion item table relation exists.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existSionItemTableRelation(RefRecId _refRecId)
    {
        return _refRecId
            && (select firstonly eximSionItemTableRelationShip_IN
                   where eximSionItemTableRelationship_IN.SionItemTableRecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximSionItemTableRelationship_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximSionItemTableRelationship_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximSionItemTableRelationship_IN find(
        RefRecId            _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximSionItemTableRelationship_IN    eximSionItemTableRelationship;

        eximSionItemTableRelationship.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximSionItemTableRelationship.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximSionItemTableRelationship
            where eximSionItemTableRelationship.RecId == _recId;

        return eximSionItemTableRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSionItemAllowedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates sion item allowed quantity.
    /// </summary>
    /// <param name="_sionItemTableRecId">
    /// The sion item table RecId.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateSionItemAllowedQty(RefRecId _sionItemTableRecId)
    {
        EximSionItemTable_IN::updateAllowedQty(
            EximSionItemTableRelationship_IN::calculateAllowedQty(_sionItemTableRecId),
            _sionItemTableRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS61481</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@GLS61451</Label>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>Unit</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemData</Name>
			<Label>@SYS23860</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS23497</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SionItemTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RelatedSionItemTableRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Value</Name>
			<Label>@SYS41043</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AllowedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
			<Label>@GLS61441</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EximPercentage_IN</ExtendedDataType>
			<Label>@SYS67344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RelatedSionItemTableRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS22569</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SionItemTableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximSionItemTableRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RelatedSionItemTableRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RelatedSionItemTableRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SionItemTableRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SionItemTableRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximSionItemTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximSionItemTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximSionItemTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximSionItemTable_IN_EximSionItemTableRelationship_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SionItemTableRecId</Name>
					<Field>SionItemTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximSionItemTableRelated</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximSionItemTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximSionItemTable_IN_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximSionItemTable_IN_1_EximSionItemTableRelationship_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RelatedSionItemTableRecId</Name>
					<Field>RelatedSionItemTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>