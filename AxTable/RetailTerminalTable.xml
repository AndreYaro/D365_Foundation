<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTerminalTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

public class RetailTerminalTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies a dimension set that can be applied to the <c>defaultDimension</c> field.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that can be applied to the <c>defaultDimension</c> field.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on the <c>SalesLine</c>
    /// table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the net amount of the transactions done by the current terminal for a given time.
    /// </summary>
    /// <param name="_fromDate">
    /// The current value of fromDate.
    /// </param>
    /// <param name="_toDate">
    /// The current value of the ending date.
    /// </param>
    /// <param name="_fromTime">
    /// The current value of the starting date.
    /// </param>
    /// <param name="_toTime">
    /// The current value of ending date.
    /// </param>
    /// <returns>
    /// The net amount of the transactions done by the current terminal and for a given time.
    /// </returns>
    RetailCostAmount costAmount(FromDate _fromDate, ToDate _toDate,FromTime _fromTime,ToTime _toTime)
    {
        return -RetailTransactionTable::netAmountByTerminal(this.TerminalId,_fromDate,_toDate,_fromTime,_toTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the discounted amount of the transactions done by the current terminal for a given time.
    /// </summary>
    /// <param name="_fromDate">
    /// The current value of the starting date.
    /// </param>
    /// <param name="_toDate">
    /// The current value of the ending date.
    /// </param>
    /// <param name="_fromTime">
    /// The current value of starting date.
    /// </param>
    /// <param name="_toTime">
    /// The current value of ending time.
    /// </param>
    /// <returns>
    /// The discounted amount of the transactions done by the current terminal for a given time.
    /// </returns>
    RetailDiscAmount discount(FromDate _fromDate, ToDate _toDate,FromTime _fromTime,ToTime _toTime)
    {
        return RetailTransactionTable::discAmountByTerminal(this.TerminalId,_fromDate,_toDate,_fromTime,_toTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromStoreTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field values from the <c>RetailStoreTable</c> table.
    /// </summary>
    /// <param name="_storeTable">
    /// The current instance of the <c>RetailStoreTable</c> table.
    /// </param>
    void initFromStoreTable(RetailStoreTable _storeTable)
    {
        this.StoreRecId         = _storeTable.RecId;

        this.eftStoreRecId      = _storeTable.RecId;

        this.StatementMethod    = _storeTable.StatementMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTerminalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field values of the <c>RetailTerminalTable</c> table.
    /// </summary>
    /// <param name="_terminalTable">
    /// The current instance of the <c>RetailTerminalTable</c> table.
    /// </param>
    void initFromTerminalTable(RetailTerminalTable _terminalTable)
    {
        this.Name = _terminalTable.Name;
        this.StoreRecId = _terminalTable.StoreRecId;
        this.Location = _terminalTable.Location;
        this.StatementMethod = _terminalTable.StatementMethod;
        this.TerminalStatement = _terminalTable.TerminalStatement;
        this.NotActive = _terminalTable.NotActive;
        this.ClosingStatus = _terminalTable.ClosingStatus;
        this.ManagerKeyOnReturn = _terminalTable.ManagerKeyOnReturn;
        this.SlipIfReturn = _terminalTable.SlipIfReturn;
        this.OpenDrawerAtLILO = _terminalTable.OpenDrawerAtLILO;
        this.OnlyTotalInSuspendedTransaction = _terminalTable.OnlyTotalInSuspendedTransaction;
        this.ExitAfterEachTransaction = _terminalTable.ExitAfterEachTransaction;
        this.AutoLogoffTimeout = _terminalTable.AutoLogoffTimeout;
        this.ReturnInTransaction = _terminalTable.ReturnInTransaction;
        this.ItemIdOnReceipt = _terminalTable.ItemIdOnReceipt;
        this.eftStoreRecId = _terminalTable.StoreRecId;
        this.eftTerminalId = _terminalTable.eftTerminalId;
        this.MaxReceiptTextLength = _terminalTable.MaxReceiptTextLength;
        this.NumberOfTopBottomLines = _terminalTable.NumberOfTopBottomLines;
        this.ReceiptSetupLocation = _terminalTable.ReceiptSetupLocation;
        this.MaxDisplayTextLength = _terminalTable.MaxDisplayTextLength;
        this.CustomerDisplayText1 = _terminalTable.CustomerDisplayText1;
        this.CustomerDisplayText2 = _terminalTable.CustomerDisplayText2;
        this.HardwareProfile = _terminalTable.HardwareProfile;
        this.VisualProfile = _terminalTable.VisualProfile;
        this.CreateRecording = _terminalTable.CreateRecording;
        this.PlaybackRecording = _terminalTable.PlaybackRecording;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field values to a new record of <c>RetailterminalTable</c> table.
    /// </summary>
    /// <remarks>
    /// The field values are set for <c>MaxReceiptTextLength</c>, <c>NumberOfTopBottomLines</c> and <c>MaxDisplayTextLength</c> fields.
    /// </remarks>
    public void initValue()
    {
        this.MaxReceiptTextLength               = 39;
        this.NumberOfTopBottomLines             = 10;
        this.MaxDisplayTextLength               = 20;
        this.receiptSetupLocation = RetailTerminalStoreBase::Terminal;
        this.statementMethod = RetailStaffTerminalTotal::Shift;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailTerminalTable</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is inserted into the <c>RetailConnPreactionTable</c> table.
    /// Calls the method <c>setEFT</c> to set values for fields <c>EftStoreRecId</c> and <c>EftTerminalId</c>.
    /// </remarks>
    public void insert()
    {
        this.setEFT();
        this.updateRetailTerminalOperationMode();

        super();

        this.UpdateSelfServicePackageForAssociatedDevice(this);
        this.updateSupportOffline();
 
        DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(this, fieldNum(RetailTerminalTable, TerminalId), this, fieldNum(RetailTerminalTable, DefaultDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field and
    /// the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>netTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the net turnover of the transactions done by the current terminal for a given time.
    /// </summary>
    /// <param name="_fromDate">
    /// The current value of starting date.
    /// </param>
    /// <param name="_toDate">
    /// The current value of ending date.
    /// </param>
    /// <param name="_fromTime">
    /// The current value of starting date.
    /// </param>
    /// <param name="_toTime">
    /// The current value of ending time.
    /// </param>
    /// <returns>
    /// The net turnover of transactions done by the current terminal for a given time.
    /// </returns>
    RetailNetTurnover netTurnover(FromDate _fromDate, ToDate _toDate,FromTime _fromTime,ToTime _toTime)
    {
        return -RetailTransactionTable::netAmountByTerminal(this.TerminalId,_fromDate,_toDate,_fromTime,_toTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfSalesTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of sales transactions done by the current terminal for a given time.
    /// </summary>
    /// <param name="_fromDate">
    /// The current value of fromDate.
    /// </param>
    /// <param name="_toDate">
    /// The current value of ending date.
    /// </param>
    /// <param name="_fromTime">
    /// The current value of starting time.
    /// </param>
    /// <param name="_toTime">
    /// The current value of ending time.
    /// </param>
    /// <returns>
    /// The number of sales transactions done by the current terminal for a given time.
    /// </returns>
    RetailNumberOfSalesTransactions numberOfSalesTransactions(FromDate _fromDate, ToDate _toDate,FromTime _fromTime,ToTime _toTime)
    {
        return RetailTransactionTable::numberOfSalesTransactionsByTerminal(this.TerminalId,_fromDate,_toDate,_fromTime,_toTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfTraining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of training transactions done by the current terminal for a given time.
    /// </summary>
    /// <param name="_fromDate">
    /// The current value of starting time.
    /// </param>
    /// <param name="_toDate">
    /// The current value of ending date.
    /// </param>
    /// <param name="_fromTime">
    /// The current value of starting time.
    /// </param>
    /// <param name="_toTime">
    /// The current value of ending time.
    /// </param>
    /// <returns>
    /// The number of training transactions done by the current terminal for a given time.
    /// </returns>
    RetailNumberOfSalesTransactions numberOfTraining(FromDate _fromDate, ToDate _toDate,FromTime _fromTime,ToTime _toTime)
    {
        return RetailTransactionTable::numberOfTrainingTransactionsByTerminal(this.TerminalId,_fromDate,_toDate,_fromTime,_toTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfVoidedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of voided transactions done by the current terminal for a given time.
    /// </summary>
    /// <param name="_fromDate">
    /// The current value of starting date.
    /// </param>
    /// <param name="_toDate">
    /// The current value of ending date.
    /// </param>
    /// <param name="_fromTime">
    /// The current value of starting time.
    /// </param>
    /// <param name="_toTime">
    /// The current value of ending time.
    /// </param>
    /// <returns>
    /// The number of voided transactions done by the current terminal for a given time.
    /// </returns>
    RetailNumberOfVoidedTrans numberOfVoidedTransactions(FromDate _fromDate, ToDate _toDate,FromTime _fromTime,ToTime _toTime)
    {
        return RetailTransactionTable::numberOfVoidedTransactionsByTerminal(this.TerminalId, _fromDate, _toDate, _fromTime, _toTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.TerminalId, this.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// An error is thrown when you rename the record if the distribution type is other than
    /// <c>NoDistribution</c>.
    /// </summary>
    /// <remarks>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </remarks>
    public void renamePrimaryKey()
    {
        RetailConnActionManagement::errorOnRename(this);

        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailTerminalTitleFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title fields of the <c>RetailterminalTable</c>.
    /// </summary>
    /// <returns>
    /// Title field based on the existance of record.
    /// </returns>
    display TitleFields retailTerminalTitleFields()
    {
        if (this.RecId == 0)
        {
            return "@RET5915";
        }
        else
        {
            return strFmt("@RET5916", this.terminalId, this.name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEFT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>EftStoreRecId</c> and <c>EftTerminalId</c> fields.
    /// </summary>
    void setEFT()
    {
        if (!this.eftStoreRecId)
        {
            this.eftStoreRecId = this.StoreRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the store name based on the value of the <c>StoreRecId</c> field.
    /// </summary>
    /// <returns>
    /// The store name based on the value of the <c>StoreRecId</c> field.
    /// </returns>
    display RetailStoreName storeName()
    {
        return RetailStoreTable::findRecId(this.StoreRecId).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerDisplayText1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value for the <c>CustomerDisplayText1</c> field if it is larger than the
    /// <c>MaxDisplayTextLength</c> field defined.
    /// </summary>
    /// <returns>
    /// true if the value of the field is valid; otherwise, throws an error message.
    /// </returns>
    boolean validateCustomerDisplayText1()
    {
        if (strLen(this.CustomerDisplayText1) > this.MaxDisplayTextLength)
        {
            return checkFailed(strFmt("@RET4073",fieldPName(RetailTerminalTable, CustomerDisplayText1),fieldPName(RetailTerminalTable, MaxDisplayTextLength)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerDisplayText2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the value for the <c>CustomerDisplayText2</c> field is larger than the
    /// <c>MaxDisplayTextLength</c> field.
    /// </summary>
    /// <returns>
    /// true if the value of the field is valid; otherwise throws error message.
    /// </returns>
    boolean validateCustomerDisplayText2()
    {
        if (strLen(this.CustomerDisplayText2) > this.MaxDisplayTextLength)
        {
            return checkFailed(strFmt("@RET4073",fieldPName(RetailTerminalTable, CustomerDisplayText2),fieldPName(RetailTerminalTable, MaxDisplayTextLength)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the field is valid for the current record.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// The field ID to be validated.
    /// </param>
    /// <returns>
    /// true if the field is valid; otherwise false.
    /// </returns>
    /// <remarks>
    /// Calls the method <c>validateTerminalId</c> to validate field <c>TerminalId</c>.
    /// Calls the method <c>validateStoreRecId</c> to validate field <c>StoreRecId</c>.
    /// Calls the method <c>validateEFTStoreRecId</c> to validate field <c>EftStoreRecId</c>.
    /// Calls the method <c>validateCustomerDisplayText1</c> to validate field <c>CustomerDisplayText1</c>.
    /// Calls the method <c>validateCustomerDisplayText2</c> to validate field <c>CustomerDisplayText2</c>.
    /// Calls the method <c>validateMaxDisplayTextLength</c> to validate field <c>MaxDisplayTextLength</c>.
    /// </remarks>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldNum(RetailTerminalTable, StoreRecId):
                this.validateStoreRecId();
                break;

            case fieldNum(RetailTerminalTable, CustomerDisplayText1):
                ret = this.validateCustomerDisplayText1();
                break;

            case fieldNum(RetailTerminalTable, CustomerDisplayText2):
                ret = this.validateCustomerDisplayText2();
                break;

            case fieldNum(RetailTerminalTable, MaxDisplayTextLength):
                ret = this.validateMaxDisplayTextLength();
                break;

            case fieldNum(RetailTerminalTable, FiscalDocumentSeries):
                ret = RetailTerminalFiscalDocumentSeriesValidator_BR::construct(this).validateFiscalDocumentSeries();
                break;

            case fieldNum(RetailTerminalTable, FiscalDocumentSeriesContingency):
                ret = RetailTerminalFiscalDocumentSeriesValidator_BR::construct(this).validateFiscalDocumentSeriesContingency();
                break;

            case fieldNum(RetailTerminalTable, FiscalDocumentSeriesEFDoc):
                ret = RetailTerminalFiscalDocumentSeriesValidator_BR::construct(this).validateFiscalDocumentSeriesEFDoc();
                break;

            case fieldNum(RetailTerminalTable, SupportOffline):
                ret = this.validateSupportOfflineMode();
                break;

            case fieldNum(RetailTerminalTable, OfflineDatabaseProfile): // check if the databaseProfile is RetailCDXDataStoreType::OfflineDatabase
                ret = this.validateOfflineDatabaseProfileField();
                break;

            case fieldNum(RetailTerminalTable, EFRRegisterNumber):
                ret = RetailTerminalElectronicFiscalReceiptValidator_BR::construct(this).validateEFRRegisterNumber();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSupportOfflineMode</Name>
				<Source><![CDATA[
    private boolean validateSupportOfflineMode()
    {
        boolean ret = true;

        if (RetailStoreTable::findRecId(this.StoreRecId).RecId == 0)
        {
            ret = checkFailed("@Retail:EnableOfflineSupportMissingStoreWarning");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOfflineDatabaseProfileField</Name>
				<Source><![CDATA[
    private boolean validateOfflineDatabaseProfileField()
    {
        boolean ret = true;
        RetailConnDatabaseProfile databaseProfile;
        select databaseProfile where databaseProfile.RecId == this.OfflineDatabaseProfile;
        if (this.SupportOffline == NoYes::Yes
            && databaseProfile.RecId != 0
            && databaseProfile.DataStoreType != RetailCDXDataStoreType::OfflineDatabase)
        {
            ret = checkFailed("@Retail:InvalidOfflineDatabaseProfileError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHardwareProfile</Name>
				<Source><![CDATA[
    private boolean validateHardwareProfile()
    {
        boolean ret = true;

        if (!this.EFTTenderTypeIdDefault &&
            RetailHardwareProfile::find(this.hardwareProfile).pinPad == RetailPinPadType::ManagedByEFTService)
        {
            ret = checkFailed("@SYS4007509");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaxDisplayTextLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>MaxDisplayLength</c> field value is less than the length of the
    /// <c>CustomerDisplayText1</c> and <c>CustomerDisplayText2</c> fields.
    /// </summary>
    /// <returns>
    /// true if the field is valid; otherwise false.
    /// </returns>
    boolean validateMaxDisplayTextLength()
    {
        if ((this.MaxDisplayTextLength < strLen(this.CustomerDisplayText1)) || (this.MaxDisplayTextLength < strLen(this.CustomerDisplayText2)))
        {
            return checkFailed("");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStoreRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and sets values to the <c>EftStoreRecId</c> and <c>StatementMethod</c> fields.
    /// </summary>
    void validateStoreRecId()
    {
        this.eftStoreRecId = this.StoreRecId;
        this.StatementMethod = RetailStoreTable::findRecId(this.StoreRecId).StatementMethod;
        this.ConcessionVendaccountDataAreaId = getCompany(tableNum(VendTable),
                                                          RetailStoreTable::findRecId(this.StoreRecId).inventLocationDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSupportOffline</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does necessary updates to tables based on whether offline mode is supported or not.
    ///</summary>
    void updateSupportOffline()
    {
        // If support offline is set
        if (this.SupportOffline == NoYes::Yes)
        {
            RetailDevice retailDevice;
            RetailDeviceTypes retailDeviceTypes;

            // Select device type to check if it supports offline mode.
            select firstonly Type from retailDeviceTypes
                exists join retailDevice
                  where retailDevice.Terminal == this.terminalId
                    && retailDevice.Type == retailDeviceTypes.RecId;

            if (retailDeviceTypes.Type == RetailDeviceTypeBase::CloudPOS)
            {
                this.SupportOffline = NoYes::No;
                error("@Retail:OfflineModeNotSupportedForCloudPOS");
            }
            else
            {
                if (!this.OfflineDatabaseProfile)
                {
                    // If OfflineDatabaseProfile is not set
                    // create entry in RetailConnDatabaseProfile, copy the foreign key over
                    if (this.StoreRecId)
                    {
                        RetailCDXDataStoreChannel retailCDXDataStoreChannel;
                        RetailConnDatabaseProfile channelDatabaseProfile;
                        RetailConnDatabaseProfile offlineDatabaseProfile;
                        RetailChannelTableExt retailChannelTableExt;

                        // select data group the channel is associated with.
                        select firstonly DataGroup, SchedulerInterval from channelDatabaseProfile
                           exists join retailChannelTableExt
                             where retailChannelTableExt.Channel == this.StoreRecId
                               && retailChannelTableExt.LiveChannelDatabase == channelDatabaseProfile.RecId;

                        if (!channelDatabaseProfile.DataGroup)
                        {
                            this.SupportOffline = NoYes::No;
                            error("@Retail:StoreNotAssignedToDataGroup");
                        }
                        else
                        {
                            offlineDatabaseProfile.initValue();
                            offlineDatabaseProfile.Name = this.getOfflineDbName();
                            offlineDatabaseProfile.DataStoreType = RetailCDXDataStoreType::OfflineDatabase;

                            if (!RetailCdxFeatureControl::isDataGroupSelectionForNewOfflineSupportDisabled())
                            {
                                RetailTerminalTableContext context = RetailTerminalTableContext::current();
        
                                if (context != null && context.parmSelectedDataGroupRecId())
                                {
                                    offlineDatabaseProfile.DataGroup = context.parmSelectedDataGroupRecId();
                                }
                                else
                                {
                                    offlineDatabaseProfile.DataGroup = channelDatabaseProfile.DataGroup;
                                }
                            }
                            else
                            {
                                offlineDatabaseProfile.DataGroup = channelDatabaseProfile.DataGroup;
                            }

                            if (channelDatabaseProfile.SchedulerInterval)
                            {
                                offlineDatabaseProfile.SchedulerInterval = channelDatabaseProfile.SchedulerInterval;
                            }

                            next channelDatabaseProfile;
                            if (channelDatabaseProfile.DataGroup)
                            {
                                this.SupportOffline = NoYes::No;
                                error("@Retail:StoreAssignedToMultipleDataGroups");
                            }
                            else if (RetailConnDatabaseProfile::find(this.getOfflineDbName()))
                            {
                                this.SupportOffline = NoYes::No;
                                error (strfmt("@Retail:OfflineDataStoreNameAlreadyExists", this.getOfflineDbName()));
                            }
                            else
                            {
                                ttsbegin;
                                offlineDatabaseProfile.insert();

                                // assign the channel of the terminal to the offline database profile
                                retailCDXDataStoreChannel.initValue();
                                retailCDXDataStoreChannel.DatabaseProfile = offlineDatabaseProfile.RecId;
                                retailCDXDataStoreChannel.channel = this.StoreRecId;
                                retailCDXDataStoreChannel.insert();

                                this.OfflineDatabaseProfile = offlineDatabaseProfile.RecId;
                                this.write();
                                ttscommit;
                                
                                if(!RetailCdxFeatureControl::isDelayedOfflineDownloadSessionCreationEnabled() || (RetailCdxFeatureControl::isDelayedOfflineDownloadSessionCreationEnabled() && offlineDatabaseProfile.isActivatedOrWasActivated()))
                                {
                                    container skippedJobs;
                                    int downloadSessionsCount;

                                    [skippedJobs, downloadSessionsCount] = RetailTerminalTable::initializeDatabaseDownloadSessions(offlineDatabaseProfile);

                                    // Still some jobs do not have corresponding full package available
                                    // throw warning, suggest manual full sync
                                    if (conLen(skippedJobs) > 0)
                                    {
                                        warning(strFmt("@Retail:CdxFullPackageMissingError", con2Str(skippedJobs)));
                                    }
                                }
                                else
                                {
                                    warning("@Retail:RetailCDXDownloadSessionsCreatedAtDeviceActivation");
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            // If support offline is not set, and OfflineDatabaseProfile is set
            if (this.OfflineDatabaseProfile)
            {
                // delete entry in RetailConnDatabaseProfile, and unset OfflineDatabaseProfile
                RetailConnDatabaseProfile offlineDatabaseProfile;
                ttsbegin;

                delete_from offlineDatabaseProfile
                    where offlineDatabaseProfile.RecId == this.OfflineDatabaseProfile &&
                    offlineDatabaseProfile.DataStoreType == RetailCDXDataStoreType::OfflineDatabase; // Due to a bug, in older versions, user could assign online database to be used as the offline db.
                // added this check to prevent user from deleting online channel database by mistake.
                this.OfflineDatabaseProfile = 0;
                this.write();

                ttscommit;
            }
            // Otherwise, do nothing
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = this.validateHardwareProfile() && ret;
        ret = this.validateEFTPOSRegisterNumber() && ret;
        ret = this.validateCardNotPresentConfiguration() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visualProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>RetailVisualProfile</c> table.
    /// </summary>
    /// <returns>
    /// The current record of the <c>RetailVisualProfile</c> table for a given <c>VisualProfile</c> field
    /// value.
    /// </returns>
    RetailVisualProfile visualProfile()
    {
        return RetailVisualProfile::find(this.VisualProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTerminalTable</c> table.
    /// </summary>
    /// <param name="_terminalId">
    /// The terminal ID of the <c>RetailTerminalTable</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTerminalTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTerminalTable find(RetailTerminalId _terminalId, boolean _forUpdate = false)
    {
        RetailTerminalTable    terminalTable;

        if (_terminalId)
        {
            terminalTable.selectForUpdate(_forUpdate);

            select firstonly terminalTable
                index hint terminalIdx
                where terminalTable.TerminalId == _terminalId;
        }

        return terminalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTerminalTable</c> table.
    /// </summary>
    /// <param name="_terminalRecId">
    /// The record ID of the <c>RetailTerminalTable</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTerminalTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTerminalTable findByRecId(RefRecId _terminalRecId, boolean _forUpdate = false)
    {
        RetailTerminalTable    terminalTable;

        if (_terminalRecId)
        {
            terminalTable.selectForUpdate(_forUpdate);

            select firstonly terminalTable
                where terminalTable.RecId == _terminalRecId;
        }

        return terminalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDataStoreName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailTerminalTable</c> record by it's offline database name.
    /// </summary>
    /// <param name = "_dataStoreName">The data store name from <c>RetailConnDatabaseProfile</c>.</param>
    /// <returns>
    /// A record in the <c>RetailTerminalTable</c> table; otherwise, an empty record.
    /// </returns>
    internal static RetailTerminalTable findByDataStoreName(RetailConnProfileName _dataStoreName, boolean _forUpdate = false)
    {
        RetailTerminalTable         terminalTable;
        RetailConnDatabaseProfile   dataStore;

        if (_dataStoreName)
        {
            terminalTable.selectForUpdate(_forUpdate);

            select firstonly terminalTable
                exists join dataStore
                where terminalTable.OfflineDatabaseProfile == dataStore.RecId
                    && dataStore.DataStoreType == RetailCDXDataStoreType::OfflineDatabase
                    && dataStore.Name == _dataStoreName;
        }

        return terminalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean recalculateSeedData;
        boolean updateSelfServicePkgForAssociatedDevice;

        this.updateRetailTerminalOperationMode();

        recalculateSeedData = this.FiscalDocumentSeries != this.orig().FiscalDocumentSeries;
        updateSelfServicePkgForAssociatedDevice =  this.OfflineDatabaseProfile != this.orig().OfflineDatabaseProfile;

        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
        rename.syncRenamedValuePreSuper();

        super();

        rename.syncRenamedValuePostSuper();

        if (recalculateSeedData)
        {
            RetailPOSSeedData::CalculateSeedData(RetailStoreTable::findRecId(this.StoreRecId).StoreNumber, this.terminalId);
        }
        if (updateSelfServicePkgForAssociatedDevice)
        {
            this.UpdateSelfServicePackageForAssociatedDevice(this);
            this.updateMergedSelfServicePackageForAssociatedDevices();
        }

        this.updateSupportOffline();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDataGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default data group for specified terminal Id.
    /// </summary>
    /// <param name = "_terminalId">The terminal Id.</param>
    /// <returns>The <c>RetailCDXDataGroup</c> record.</returns>
    internal static RetailCDXDataGroup getDefaultDataGroup(RetailTerminalId _terminalId)
    {
        RetailCDXDataGroup retailCDXDataGroup;

        RetailTerminalTable retailTerminalTable;

        select StoreRecId from retailTerminalTable
            where retailTerminalTable.terminalId == _terminalId;

        if (retailTerminalTable)
        {
            RetailConnDatabaseProfile channelDatabaseProfile;
            RetailChannelTableExt retailChannelTableExt;

            // select data group the channel is associated with.
            select firstonly DataGroup from channelDatabaseProfile
                exists join retailChannelTableExt
                    where retailChannelTableExt.Channel == retailTerminalTable.StoreRecId
                    && retailChannelTableExt.LiveChannelDatabase == channelDatabaseProfile.RecId;

            if (channelDatabaseProfile)
            {
                retailCDXDataGroup = RetailCDXDataGroup::find(channelDatabaseProfile.DataGroup);
            }
        }

        return retailCDXDataGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEFTPOSRegisterNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the EFTPOSRegisterNumber field.
    /// </summary>
    /// <returns>
    /// Always returns true to enable form save even with string  value in the field.
    /// </returns>
    private boolean validateEFTPOSRegisterNumber()
    {
        if (this.eftTerminalId && !isInteger(this.eftTerminalId))
        {
            warning("@SYP4881977");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCardNotPresentConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates card not present processing configuration.
    /// </summary>
    /// <returns>
    /// True if configuration is valid; false otherwise.
    /// </returns>
    internal boolean validateCardNotPresentConfiguration()
    {
        if (this.SupportOffline == NoYes::Yes && this.CardNotPresentProcessingConfiguration == RetailCNPProcessingConfiguration::UseCommerceEngine)
        {
            return checkFailed("@Retail:InvalidCNPProcessingConfigurationError");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOfflineDbName</Name>
				<Source><![CDATA[
    private str getOfflineDbName()
    {
        return strFmt("@Retail:TerminalOfflineDbName", this.terminalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateSelfServicePackageForAssociatedDevice</Name>
				<Source><![CDATA[
    private void UpdateSelfServicePackageForAssociatedDevice(RetailTerminalTable terminalRecord)
    {
        // Get the default package set at the store level.
        RetailDefaultChannelPackages channelPackagesTable;
        select firstonly1 * from channelPackagesTable where channelPackagesTable.ChannelRecId == terminalRecord.StoreRecId;

        // Set the default package set at the store level for the associated device.
        RetailDevice devicesTable;
        select forupdate * from devicesTable where devicesTable.Terminal == terminalRecord.terminalId;

        if (devicesTable.RecId != 0)
        {
            ttsbegin;
            devicesTable.SelfServicePackage = (terminalRecord.OfflineDatabaseProfile == 0)
                                        ? channelPackagesTable.DefaultModernPOSPackage
                                        : channelPackagesTable.DefaultModernPOSOfflinePackage;
            devicesTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailTerminalOperationMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes <c>RetailTerminalOperationMode</c> value from "Fiscal printer" to "EFDocConsumer" if it is a Brazilian store's register.
    /// </summary>
    private void updateRetailTerminalOperationMode()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]) &&
            this.RetailTerminalOperationMode == RetailTerminalOperationMode::FiscalPrinter &&
            this.isBrazilianStoreRegister())
        {
            this.RetailTerminalOperationMode = RetailTerminalOperationMode::EFDocConsumer;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMergedSelfServicePackageForAssociatedDevices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the field MergedSelfServicePackageReference on DeviceTable that is associated with this terminal record.
    /// </summary>
    private void updateMergedSelfServicePackageForAssociatedDevices()
    {
        PackageType packageType = this.OfflineDatabaseProfile > 0 ? PackageType::ModernPosWithOffline : PackageType::ModernPosWithoutOffline;

        RetailSelfServiceDefaultPackages defaultPackagesTable = RetailSelfServiceDefaultPackages::findDefaultPackage(
            tableNum(RetailStoreTable), packageType, this.StoreRecId);

        if (defaultPackagesTable.MergedSelfServicePackageReference > 0)
        {
            ttsbegin;

            RetailDevice deviceTable;

            update_recordset deviceTable
                setting
                    MergedSelfServicePackageReference = defaultPackagesTable.MergedSelfServicePackageReference
                where deviceTable.Terminal == this.terminalId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.terminalId));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DimensionAttributeDelegates_getTablesToAddCopiedValuesTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of tables and fields to update when copying the values to default dimensions on existing values.
    /// </summary>
    /// <param name = "_tableSet">A <c>Set</c> of <c>DimensionCopyValuesDataContract</c> values.</param>
    [SubscribesTo(classStr(DimensionAttributeDelegates), delegateStr(DimensionAttributeDelegates, getTablesToAddCopiedValuesTo))]
    public static void DimensionAttributeDelegates_getTablesToAddCopiedValuesTo(Set _tableSet)
    {
        DimensionCopyValueDataContract contract = DimensionCopyValueDataContract::construct(tableNum(RetailTerminalTable), fieldNum(RetailTerminalTable, DefaultDimension));
        contract.addKeyFieldDimensionPair(tableNum(RetailTerminalTable), fieldNum(RetailTerminalTable, TerminalId));
        _tableSet.add(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSynchronizeOffline</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the offline synchronization should happen at this moment time for this terminal.
    /// </summary>
    /// <returns>
    /// True if the offline synchronization should be happening; otherwise, false.
    /// </returns>
    internal boolean shouldSynchronizeOffline()
    {
        // Check if offline is supported at all.
        if (!this.SupportOffline)
        {
            return false;
        }

        // Retrieve the terminal's store's offline profile to check if sync is paused or not.
        RetailStoreTable storeTable = RetailStoreTable::findRecId(this.StoreRecId);
        RetailOfflineProfile offlineProfile = RetailOfflineProfile::findByRecId(storeTable.OfflineProfile);
        
        if (offlineProfile && offlineProfile.PauseOfflineSync)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDatabaseDownloadSessions</Name>
				<Source><![CDATA[
    internal static container initializeDatabaseDownloadSessions(RetailConnDatabaseProfile _databaseProfile)
    {
        RetailCDXDataGroup dataGroup;
        RetailConnDatabaseProfile dataStore;
        RetailCDXDownloadSession downloadSessionMaxSession, downloadSession;
        RetailCDXDownloadSessionDataStore downloadSessionDataStore;

        container skippedJobs;
        RetailConnSchedule schedule;
        RetailConnScheduleJobMapping scheduleJob;
        RetailCDXScheduleDataGroup   scheduleDataGroup;
        RetailConnSchedulerJobTable  job;

        int downloadSessionsCount;

        ttsbegin;

        // find out all jobs this data group is running
        while select jobId, AllowSkipDataSync from job order by job.jobId
            where job.IsUpload == NoYes::No
        exists join scheduleJob
            where scheduleJob.SchedulerJobId == job.jobId
        exists join schedule
            where schedule.RecId == scheduleJob.ScheduleRecId
        exists join scheduleDataGroup
            where   scheduleDataGroup.Schedule  == schedule.RecId
                &&  scheduleDataGroup.DataGroup == _databaseProfile.DataGroup
        exists join dataGroup
            where   dataGroup.RecId         == scheduleDataGroup.DataGroup
                &&  dataGroup.ChannelSchema == job.RetailConnChannelSchema
        {
            RetailCDXDownloadSessionType jobSessionType = RetailCDXDownloadSessionType::Default;

            if (_databaseProfile.DataStoreType == RetailCDXDataStoreType::OfflineDatabase)
            {
                if (job.AllowSkipDataSync)
                {
                    ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreCreationSkipped(_databaseProfile.RecId, job.jobId);
                    continue;
                }

                if (RetailConnSchedulerJobTable::hasAllowDataSyncSkipSubjobs(job.jobId) ||  RetailConnSchedulerJobTable::shouldFilterCdxEntityData(job.jobId))
                {
                    jobSessionType = RetailCDXDownloadSessionType::DataFiltered;
                }
            }

            // In case there is any existing DownloadSessionDataStore record, delete it
            delete_from downloadSessionDataStore
                where downloadSessionDataStore.DataStore == _databaseProfile.RecId
                exists join downloadSession
                where downloadSession.RecId     == downloadSessionDataStore.Session
                    && downloadSession.JobID    == job.jobId;

            // find latest full package for current download job
            select maxof(@Session) from downloadSessionMaxSession
                where   downloadSessionMaxSession.DataGroup                 == _databaseProfile.DataGroup
                    &&  downloadSessionMaxSession.IsScheduledFullPackage    == NoYes::Yes
                    &&  downloadSessionMaxSession.Status                    == RetailCDXDownloadSessionStatus::Available
                    &&  downloadSessionMaxSession.SessionType               == jobSessionType
                    &&  downloadSessionMaxSession.JobID                     == job.jobId;

            if (downloadSessionMaxSession)
            {
                RetailTerminalTable::createDownloadSessionDataStoreRecords(downloadSessionMaxSession.Session, _databaseProfile.RecId);

                downloadSessionsCount++;
            }
            else
            {
                skippedJobs += job.jobId;
            }

        }

        ttscommit;

        return [skippedJobs, downloadSessionsCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDownloadSessionDataStoreRecords</Name>
				<Source><![CDATA[
    private static void createDownloadSessionDataStoreRecords(RetailCDXSessionNumber _sessionNumber, RetailCDXDataStoreRefRecId _dataStoreRecId)
    {
        RetailCDXDownloadSession            downloadSessionInitial, downloadSession;
        RetailCDXDownloadSessionDataStore   downloadSessionDataStore;

        RetailCDXDownloadSessionStatus availableStatus = RetailCDXDownloadSessionStatus::Available;

        // add this download session to download session data store
        select downloadSessionInitial where downloadSessionInitial.Session == _sessionNumber;

        downloadSessionDataStore.initValue();
        downloadSessionDataStore.Session    = downloadSessionInitial.RecId;
        downloadSessionDataStore.DataStore  = _dataStoreRecId;
        downloadSessionDataStore.Status     = availableStatus;
        downloadSessionDataStore.insert();

        // add all delta package for this job for this data store.
        insert_recordset downloadSessionDataStore (@Session, @DataStore, @Status)
            select RecId, _dataStoreRecId, availableStatus
            from downloadSession
            where   downloadSession.JobID                   == downloadSessionInitial.JobID
                &&  downloadSession.DataGroup               == downloadSessionInitial.DataGroup
                &&  downloadSession.IsScheduledFullPackage  == NoYes::No
                &&  downloadSession.Status                  == availableStatus
                &&  downloadSession.Session                 > downloadSessionInitial.Session
                &&  downloadSession.SessionType             == downloadSessionInitial.SessionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSynchronizeOfflineDataStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given data store is NOT an offline DB or, if it is, that the related terminal should synchronize.
    /// </summary>
    /// <param name = "_dataStoreName">The data store name.</param>
    /// <returns>True if it should synchronize; otherwise, false.</returns>
    internal static boolean shouldSynchronizeOfflineDataStore(RetailConnProfileName _dataStoreName)
    {
        // A terminal will be returned only if it has a database, which is always an offline database.
        RetailTerminalTable terminal = RetailTerminalTable::findByDataStoreName(_dataStoreName);

        // We should return true if the terminal is not found, because then it's normal Retail Server channel database.
        return (!terminal || terminal.shouldSynchronizeOffline());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies field.
    /// </summary>
    /// <param name = "_fieldId">The field id.</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(RetailTerminalTable, RetailTerminalOperationMode):
                this.clearFiscalDocumentSeries();
                this.clearEFRRegisterNumber();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFiscalDocumentSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the fiscal document series fields accordingly to the operation mode.
    /// </summary>
    private void clearFiscalDocumentSeries()
    {
        switch (this.RetailTerminalOperationMode)
        {
            case RetailTerminalOperationMode::EFDocConsumer:
                break;

            case RetailTerminalOperationMode::ElectronicFiscalReceipt:
                this.FiscalDocumentSeries = '';
                this.FiscalDocumentSeriesContingency = '';
                break;

            default:
                this.FiscalDocumentSeries = '';
                this.FiscalDocumentSeriesContingency = '';
                this.FiscalDocumentSeriesEFDoc = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearEFRRegisterNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the fiscal document EFR register number.
    /// </summary>
    private void clearEFRRegisterNumber()
    {
        this.EFRRegisterNumber = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the register/terminal record can be deleted.
    /// </summary>
    /// <returns>True if it can be deleted; otherwise, false.</returns>
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        // Method validateDelete was used because we needed the flight to control the behavior.
		// Once the flight is deleted, we can use restrict delete action on existing relations.
        if (RetailCdxBlockRegisterDeleteWhenExistingDbFlight::instance().isEnabled() && RetailConnDatabaseProfile::findByRecId(this.OfflineDatabaseProfile).RecId)
        {
            ret = ret && checkFailed("@Retail:POSRegisterDeletingOfflineDB");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelfCheckout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the necessary updates when terminal is SelfCheckout.
    /// </summary>
    public void updateSelfCheckout()
    {
        this.SelectHardwareStationAtStartOfTransaction = NoYes::No;
        this.SelectHardwareStationOnTendering = NoYes::No;
        this.autoExitMethod = RetailPosAutoExitMethod::Logoff;
        this.exitAfterEachTransaction = NoYes::No;
        this.autoLogoffTimeout = 0;
        this.CreateRecording = NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260337</DeveloperDocumentation>
	<FormRef>RetailTerminalTable</FormRef>
	<Label>@RET3277</Label>
	<ListPageRef>RetailTerminalTable</ListPageRef>
	<TableGroup>Main</TableGroup>
	<TitleField1>terminalId</TitleField1>
	<TitleField2>name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>terminalIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>BrickAndMortarStore</Modules>
	<PrimaryIndex>terminalIdx</PrimaryIndex>
	<ReplacementKey>terminalIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailTerminalReceiptTxt</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailTerminalReceiptTxt</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>RetailTerminalTable</Relation>
			<Table>RetailHardwareConfiguration</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction2</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>RetailTerminal</Relation>
			<Table>RetailDevice</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@RET3049</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>receiptPrintingDefaultOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberOfTopBottomLines</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>maxReceiptTextLength</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemIdOnReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>onlyTotalInSuspendedTransaction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>closingStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>notActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Concession</Name>
			<Label>@RET742</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConcessionVendaccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@RET4854</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>location</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DisplaySetup</Name>
			<Label>@RET3283</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>maxDisplayTextLength</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>customerDisplayText1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>customerDisplayText2</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EFT</Name>
			<Label>@RET3284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EFTStoreRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EFTTerminalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EFTTenderTypeIdDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardNotPresentProcessingConfiguration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GlobalRefund</Name>
			<Label>@RET3285</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>printVATRefundChecks</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET4855</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LoginLogoff</Name>
			<Label>@Retail:RetailPosAutoExitSettings</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>autoExitMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>exitAfterEachTransaction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>autoLogoffTimeout</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>openDrawerAtLILO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NumberSequence</Name>
			<Label>@SYS1161</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>numberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PosIsConfigure</Name>
			<Label>@RET2378</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ipAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>updateServicePort</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>standAlone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PosIsLayout</Name>
			<Label>@RET2352</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>layoutId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Profiles</Name>
			<Label>@RET3287</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>hardwareProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>visualProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Receipts</Name>
			<Label>@RET3288</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>receiptSetupLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>receiptBarcode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailDeployment</Name>
			<Label>@REX4160096</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>terminalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReturnTransactions</Name>
			<Label>@RET3289</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>managerKeyOnReturn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>slipIfReturn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>returnInTransaction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Statement</Name>
			<Label>@RET3248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>terminalStatement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>statementMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Store</Name>
			<Label>@RET4856</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StoreRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailTerminalOperationMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentSeriesContingency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentSeriesEFDoc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EFRRegisterNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HardwareStation</Name>
			<Label>@SYP4910226</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SelectHardwareStationOnTendering</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelectHardwareStationAtStartOfTransaction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaskRecorder</Name>
			<Label>@Retail:TaskRecorderLabel</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreateRecording</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlaybackRecording</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TerminalUpgrade</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RunFullSyncOnTerminalUpgrade</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>autoLogoffTimeout</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailAutoLoggOffTimeout</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>closingStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailClosingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConcessionVendaccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@RET974</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConcessionVendaccountDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>customerDisplayText1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCustomerDisplayText</ExtendedDataType>
			<Label>@RET3279</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>customerDisplayText2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCustomerDisplayText</ExtendedDataType>
			<Label>@RET3280</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EFTStoreRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@RET3600</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EFTTenderTypeIdDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreTenderTypeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS4007507</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EFTTerminalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailEFTTerminalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>exitAfterEachTransaction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailExitAfterEachTransaction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>hardwareProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailHardwareProfileId</ExtendedDataType>
			<Label>@RET3281</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ipAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailIpAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>itemIdOnReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RET5277</Label>
			<EnumType>RetailNoneItemBarcodeItem</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>layoutId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLayoutId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>location</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@RET3278</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>managerKeyOnReturn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailManagerKeyOnReturn</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>maxDisplayTextLength</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailMaxDisplayTextLength</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>maxReceiptTextLength</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailMaximumTextLengthOnReceipt</ExtendedDataType>
			<Label>@RET4857</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>notActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RET4858</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>numberOfTopBottomLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNumberOfTopOrBottomLines</ExtendedDataType>
			<Label>@RET4859</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>numberSequenceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>onlyTotalInSuspendedTransaction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RET4860</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>openDrawerAtLILO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOpenDrawerAtLiLo</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>printVATRefundChecks</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailPrintTaxRefundChecks</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>receiptBarcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReceiptBarcode</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>receiptPrintingDefaultOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReceiptPrintingDefaultOff</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>receiptSetupLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalStore</ExtendedDataType>
			<EnumType>RetailTerminalStoreBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>returnInTransaction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailReturnInTransaction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>slipIfReturn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNoneTotalAll</ExtendedDataType>
			<EnumType>RetailNoneTotalAllBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>standAlone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStandAlone</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>statementMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStatementMethod</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>RetailStaffTerminalTotal</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StoreRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@RET3600</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>terminalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>terminalStatement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalStatement</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>updateServicePort</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUpdateServicePort</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>visualProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailVisualProfileId</ExtendedDataType>
			<Label>@RET3282</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentSeries</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FiscalDocumentSeriesConsumerEfd</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentSeriesContingency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FiscalDocumentSeriesContingency</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentSeriesEFDoc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FiscalDocumentSeriesEFDoc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetailTerminalOperationMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<EnumType>RetailTerminalOperationMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SelectHardwareStationOnTendering</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSelectHardwareStationOnTendering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OfflineDatabaseProfile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@REX1106</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SupportOffline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Retail:SupportOffline</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EftTestMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreateRecording</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Retail:CreateRecordingLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PlaybackRecording</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Retail:PlaybackRecordingLabel</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>transactionServiceProfile</Name>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>RetailTransactionServiceProfileId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@RET260729</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>autoExitMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailPosAutoExitMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RunFullSyncOnTerminalUpgrade</Name>
			<HelpText>@Retail:RunFullSyncOnTerminalUpgradeHelpText</HelpText>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CardNotPresentProcessingConfiguration</Name>
			<EnumType>RetailCNPProcessingConfiguration</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EFRRegisterNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EFRRegisterNumber_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SelectHardwareStationAtStartOfTransaction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSelectHardwareStationAtStartOfTransaction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SelfCheckout</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSelfCheckout</ExtendedDataType>
			<FeatureClass>RetailSelfCheckoutFeature</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>terminalIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>terminalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StoreIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StoreRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OfflineDatabaseProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OfflineDatabaseProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>numberSequenceGroupId</Name>
					<SourceEDT>RetailNumberSequenceGroupId</SourceEDT>
					<Field>numberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailHardwareProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailHardwareProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>hardwareProfile</Name>
					<SourceEDT>RetailHardwareProfileId</SourceEDT>
					<Field>hardwareProfile</Field>
					<RelatedField>profileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>profileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RetailStore</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreRecId</Name>
					<Field>StoreRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStoreTable1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EFTRetailStore</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EFTStoreRecId</Name>
					<Field>EFTStoreRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStoreTenderTypeTable_EFTDefault</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailStoreTenderTypeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreRecId</Name>
					<Field>StoreRecId</Field>
					<RelatedField>Channel</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>function_Extern</Name>
					<RelatedField>function</RelatedField>
					<ValueStr>RetailTenderFunction::Card</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EFTTenderTypeIdDefault</Name>
					<Field>EFTTenderTypeIdDefault</Field>
					<RelatedField>tenderTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTillLayout</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailTillLayout</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>layoutId</Name>
					<SourceEDT>RetailLayoutId</SourceEDT>
					<Field>layoutId</Field>
					<RelatedField>layoutId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LayoutIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailVisualProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailVisualProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>visualProfile</Name>
					<SourceEDT>RetailVisualProfileId</SourceEDT>
					<Field>visualProfile</Field>
					<RelatedField>profileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>profileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConcessionVendaccountDataAreaId</Name>
					<Field>ConcessionVendaccountDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConcessionVendaccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>ConcessionVendaccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailConnDatabaseProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailConnDatabaseProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OfflineDatabaseProfile</Name>
					<Field>OfflineDatabaseProfile</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>