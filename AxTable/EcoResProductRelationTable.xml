<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductRelationTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductRelationTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>product2Name</Name>
				<Source><![CDATA[
    public display Name product2Name()
    {
        EcoResProductName   productName;

        productName = EcoResProductTranslation::findByProductLanguage(this.Product2, SystemParameters::getSystemLanguageId()).Name;

        return productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationName</Name>
				<Source><![CDATA[
    public display Name relationName()
    {
        EcoResProductRelationType relationType;
        Name rtv;

        select firstonly Name from relationType
            where relationType.RecId == this.ProductRelationType;

        rtv = relationType.Name;

        return rtv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the fields Product1 of <c>EcoResProductRelationTable</c> can be changed.
    /// </summary>
    /// <returns>
    /// Returns true if the change to fields Product1 of <c>EcoResProductRelationTable</c> is allowed; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        EcoResProductRelationTable  thisFromDB;
        boolean                     ret;

        ret = super();

        if (ret)
        {
            // existing object?
            if (this.RecId)
            {
                select forupdate firstonly thisFromDB
                    where thisFromDB.RecId==this.RecId;

                // cannot change Product1
                if (this.validateProduct1(thisFromDB))
                {
                    info(strfmt("@SYS135651", this.RecId, thisFromDB.Product1, this.Product1));
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProduct1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the Product1 field of <c>EcoResProductRelationTable</c> table.
    /// </summary>
    /// <param name = "_thisFromDB">
    /// The <c>EcoResProductRelationTable</c> table buffer.
    /// </param>
    /// <returns>
    /// Returns true if the object Product1 is not existing in <c>EcoResProductRelationTable</c> table; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean validateProduct1(EcoResProductRelationTable _thisFromDB)
    {
        boolean ret = false;

        if (_thisFromDB.Product1 != this.Product1)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if a record matching the given <paramref>_product1</paramref> of type <c>RefRecId</c> and _productRelationType of type <c>RefRecId</c> and _product2 of type <c>RefRecId</c> exists.
    /// </summary>
    /// <param  name='_product1'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_productRelationType'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_product2'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean checkExist(
        RefRecId _product1,
        RefRecId _productRelationType,
        RefRecId _product2)
    {
        if (!EcoResProductRelationTable::exist(_product1, _productRelationType, _product2))
        {
            return checkFailed(strfmt(EcoResProductRelationTable::txtNotExist(), _product1, _productRelationType, _product2));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record matching the given <paramref>_product1</paramref> of type <c>RefRecId</c> and _productRelationType of type <c>RefRecId</c> and _product2 of type <c>RefRecId</c> exists.
    /// </summary>
    /// <param  name='_product1'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_productRelationType'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_product2'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean exist(
        RefRecId _product1,
        RefRecId _productRelationType,
        RefRecId _product2)
    {
        return (EcoResProductRelationTable::find(_product1, _productRelationType, _product2).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record that matches the given <paramref>_product1</paramref> of type <c>RefRecId</c> and _productRelationType of type <c>RefRecId</c> and _product2 of type <c>RefRecId</c>.
    /// </summary>
    /// <param  name='_product1'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_productRelationType'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_product2'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the <c>boolean</c> data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>EcoResProductRelationTable</c> data type.
    /// </returns>
    public static EcoResProductRelationTable find(
        RefRecId _product1,
        RefRecId _productRelationType,
        RefRecId _product2,
        boolean  _forUpdate = false)
    {
        EcoResProductRelationTable tblEcoResProductRelation;

        if (   _product1
           && _productRelationType
           && _product2)
        {
            tblEcoResProductRelation.selectForUpdate(_forUpdate);

            select firstonly tblEcoResProductRelation
                index hint ProductsRelationIdx
                where tblEcoResProductRelation.Product1     == _product1
                   && tblEcoResProductRelation.ProductRelationType == _productRelationType
                   && tblEcoResProductRelation.Product2     == _product2;
        }

        return tblEcoResProductRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static str txtNotExist()
    {
        return "@SYS131169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS131003</DeveloperDocumentation>
	<Label>@SCM:EcoResProductRelationTableLabel</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Product1</TitleField1>
	<TitleField2>Product2</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ProductsRelationIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product2</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductRelationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>EcoResProductRelationDisplayOrder</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductsRelationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Product1</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProductRelationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product2</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DisplayOrderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Product1</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProductRelationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DisplayOrder</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product2</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Product1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Product1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Product1_EcoResProductRelationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product1</Name>
					<Field>Product1</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Product2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Product2</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Product2_EcoResProductRelationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product2</Name>
					<Field>Product2</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductRelationType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProductRelationType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductRelationType</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProductRelationType_EcoResProductRelationTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductRelationType</Name>
					<Field>ProductRelationType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>