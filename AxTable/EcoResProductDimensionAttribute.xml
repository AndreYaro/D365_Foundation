<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductDimensionAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductDimensionAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table ID for a dimension table, based on a product dimension attribute.
    /// </summary>
    /// <returns>
    ///    A table ID value for a dimension table.
    /// </returns>
    public TableId getDimensionTableId()
    {
        return this.DimensionTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionTableLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the label for a dimension table.
    /// </summary>
    /// <returns>
    ///     A string that contains the label; otherwise, an empty string.
    /// </returns>
    public str getDimensionTableLabel()
    {
        DictTable   dictTable;
        DictField   dictField;
        DictIndex   dictIndex;
        TableId     dimensionTableId;

        dimensionTableId    = this.getDimensionTableId();
        dictTable           = new DictTable(dimensionTableId);
        if (!dictTable)
        {
            throw error(strFmt("@SYS134333", dimensionTableId));
        }
        dictIndex = dictTable.indexObject(dictTable.replacementKey());
        if (!dictIndex)
        {
            throw error(strFmt("@SYS134113", dictTable.name()));
        }
        dictField = dictTable.fieldObject(dictIndex.field(1));
        if (!dictField)
        {
            throw error(strFmt("@SYS134331", dictTable.name()));
        }
        return new SysDictType(dictField.typeId()).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionTableValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the dimension value from a dimension table
    /// </summary>
    /// <param name="_dimensionTableRecId">
    ///    The ID of a record in a dimension table.
    /// </param>
    /// <returns>
    ///    The dimension value of a record in a dimension table.
    /// </returns>
    public str getDimensionTableValue(RefRecId _dimensionTableRecId)
    {
        Query       query;
        QueryRun    queryRun;
        TableId     dimensionTableId;
        FieldId     dimensionTableNaturalKeyFieldId;
        Common      dimensionTableBuffer;
        str         result;

        query = new Query();

        dimensionTableId                =   this.getDimensionTableId();
        dimensionTableNaturalKeyFieldId =   EcoResProductDimensionAttribute::getDimensionTableNaturalKeyFieldId(dimensionTableId);

        query.addDataSource(dimensionTableId).addRange(fieldNum(Common, RecId)).value(queryValue(_dimensionTableRecId));

        queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            dimensionTableBuffer = queryRun.get(dimensionTableId);
            result = dimensionTableBuffer.(dimensionTableNaturalKeyFieldId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionTableValueFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the natural key field ID for the product dimension table.
    /// </summary>
    /// <returns>
    ///    The <c>FieldID</c> value of the natural key for the product dimension table.
    /// </returns>
    public FieldId getDimensionTableValueFieldId()
    {
        SysDictIndex    sysDictIndex;
        SetEnumerator   indexEnumerator;
        FieldId         indexFieldId;
        SysDictTable    dictTable           =   new SysDictTable(this.getDimensionTableId());
        int             indexIdNaturalKey   =   dictTable.replacementKey();

        indexEnumerator = dictTable.indexes().getEnumerator();

        while (indexEnumerator.moveNext() && indexFieldId == 0)
        {
            sysDictIndex = indexEnumerator.current();

            if (sysDictIndex.id() == indexIdNaturalKey) // Name Index should be present on each dimension table and should be set as alternative key
            {
                indexFieldId = sysDictIndex.field(1);
            }
        }

        if (indexFieldId == 0)
        {
            throw error("@SYS135714");
        }

        return indexFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of a field in the <c>InventDim</c> table which corresponds to the table of the
    ///    instance dimension value.
    /// </summary>
    /// <returns>
    ///    The ID of a field in the <c>InventDim</c> table.
    /// </returns>
    public FieldId getInventDimFieldId()
    {
        return EcoResProductDimensionAttribute::dimensionTable2InventDimFieldId(this.getDimensionTableId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMasterDimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the product model dimension attribute value table that corresponds to the
    ///    instance of the dimension value table.
    /// </summary>
    /// <returns>
    ///    The table ID of the dimension attribute of the product master that corresponds to the dimension
    ///    value.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method has been called on an empty buffer.
    /// </exception>
    public TableId getMasterDimensionTableId()
    {
        TableId result = EcoResProductDimensionDataModel::getInstance().dimensionTableId2MasterDimensionTableId(this.DimensionTableId);

        if (!result)
        {
            throw error("@SYS111577");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariantDimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a dimension attribute to the ID of a <c>InstanceRelationType</c> field in the
    ///    <c>ecoResProductDimensionAttribute</c> table.
    /// </summary>
    /// <returns>
    ///    The ID of a <c>InstanceRelationType</c> field in the <c>ecoResProductDimensionAttribute</c> table;
    ///    otherwise, an exception is thrown.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    This method was called on an empty buffer.
    /// </exception>
    public TableId getVariantDimensionTableId()
    {
        TableId result = EcoResProductDimensionDataModel::getInstance().dimensionTableId2VariantDimensionTableId(this.DimensionTableId);

        if (!result)
        {
            throw error("@SYS111577");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoPopulate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates default records in the <c>EcoResProductDimensionAttribute</c> table.
    /// </summary>
    static void autoPopulate()
    {
        Enumerator dimensionTables = EcoResProductDimensionDataModel::getInstance().dimensionTables().getEnumerator();

        ttsbegin;

        while (dimensionTables.moveNext())
        {
            TableId dimensionTableId = dimensionTables.current();
            
            EcoResProductDimensionAttribute ecoResProductDimensionAttribute;

            select firstonly RecId
                from    ecoResProductDimensionAttribute
                where   ecoResProductDimensionAttribute.DimensionTableId == dimensionTableId;

            if (!ecoResProductDimensionAttribute)
            {
                ecoResProductDimensionAttribute.clear();
                ecoResProductDimensionAttribute.DimensionTableId    = dimensionTableId;
                ecoResProductDimensionAttribute.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionTable2InventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the ID of a dimension table to the ID of a field in the <c>InventDim</c> table.
    /// </summary>
    /// <param name="_dimensionTableId">
    ///    The ID of a dimension table.
    /// </param>
    /// <returns>
    ///    The ID of a field in the <c>InventDim</c> table; otherwise, 0.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    This method was called on an empty buffer.
    /// </exception>
    public static FieldId dimensionTable2InventDimFieldId(TableId _dimensionTableId)
    {
        FieldId result = EcoResProductDimensionDataModel::getInstance().dimensionTableId2InventDimFieldId(_dimensionTableId);

        if (!result)
        {
            throw error("@SYS111577");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionTableId2dimensionAttributeRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </summary>
    /// <param name="_dimensionTableId">
    /// The ID of a dimension table the <c>EcoResColor</c> table, the <c>EcoResSize</c> table or the
    /// <c>EcoResConfiguration</c> table.
    /// </param>
    /// <returns>
    /// The ID of a record in the <c>EcoResProductDimensionAttribute</c> table; otherwise, 0.
    /// </returns>
    /// <remarks>
    /// The specified dimension table can be the <c>EcoResColor</c> table, the <c>EcoResSize</c> table, the
    /// <c>EcoResConfiguration</c> table or the <c>EcoResGenericProductModel</c> table.The dimension table
    /// can be the <c>EcoResColor</c> table, the <c>EcoResSize</c> table, the <c>EcoResConfiguration</c>
    /// table or the <c>EcoResGenericProductModel</c> table.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The <paramref name="_dimensionTableId" /> parameter contains not supported dimension table ID.
    /// </exception>
    private static RefRecId dimensionTableId2dimensionAttributeRecId(TableId _dimensionTableId)
    {
        EcoResProductDimensionAttribute ecoResProductDimensionAttribute;

        if (_dimensionTableId)
        {
            //check for valid table ID
            if (!EcoResProductDimensionDataModel::getInstance().dimensionTables().in(_dimensionTableId))
            {
                throw error(strFmt("@SYS134204", tableId2name(_dimensionTableId)));
            }

            select firstonly RecId from ecoResProductDimensionAttribute
                where ecoResProductDimensionAttribute.DimensionTableId == _dimensionTableId;

            //if not found then auto populate and reselect
            if (!ecoResProductDimensionAttribute.RecId)
            {
                EcoResProductDimensionAttribute::autoPopulate();
                select firstonly RecId from ecoResProductDimensionAttribute
                    where ecoResProductDimensionAttribute.DimensionTableId == _dimensionTableId;
            }
        }
        return ecoResProductDimensionAttribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </summary>
    /// <param name="_productDimensionAttribute">
    ///    The ID of the <c>EcoResProductDimensionAttribute</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResProductDimensionAttribute</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResProductDimensionAttribute find(
        RefRecId    _productDimensionAttribute,
        boolean     _forUpdate = false)
    {
        EcoResProductDimensionAttribute ecoResProductDimensionAttribute;

        ecoResProductDimensionAttribute.selectForUpdate(_forUpdate);

        if (0 != _productDimensionAttribute)
        {
            select firstonly ecoResProductDimensionAttribute
                where ecoResProductDimensionAttribute.RecId == _productDimensionAttribute;
        }
        return ecoResProductDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionTableNaturalKeyFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the natural key field ID for a product dimension table.
    /// </summary>
    /// <param name="_dimensionTableId">
    ///    The ID of a dimension table.
    /// </param>
    /// <returns>
    ///    The ID of a natural key field of a product dimension table.
    /// </returns>
    static FieldId getDimensionTableNaturalKeyFieldId(TableId _dimensionTableId)
    {
        SysDictIndex    sysDictIndex;
        SetEnumerator   indexEnumerator;
        FieldId         indexFieldId;
        SysDictTable    dictTable           =   new SysDictTable(_dimensionTableId);
        int             indexIdNaturalKey   =   dictTable.replacementKey();

        indexEnumerator = dictTable.indexes().getEnumerator();

        while (indexEnumerator.moveNext() && indexFieldId == 0)
        {
            sysDictIndex = indexEnumerator.current();

            if (sysDictIndex.id() == indexIdNaturalKey) // Name Index should be present on each dimension table and should be set as alternative key
            {
                indexFieldId = sysDictIndex.field(1);
            }
        }

        if (indexFieldId == 0)
        {
            throw error("@SYS135714");
        }

        return indexFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFieldId2DimensionAttributeRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of a record in the <c>EcoResProductDimensionAttribute</c> table by the number of
    ///    the product dimension field that is in the <c>InventDim</c> table.
    /// </summary>
    /// <param name="_inventDimFieldId">
    ///    The ID of the number of the product dimension field in the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    ///    The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method has been called for a dimension that is not supported.
    /// </exception>
    public static RefRecId inventDimFieldId2DimensionAttributeRecId(FieldId _inventDimFieldId)
    {
        TableId dimensionTableId = EcoResProductDimensionDataModel::getInstance().inventDimFieldId2DimensionTableId(_inventDimFieldId);

        if (!dimensionTableId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));         
        }

        return EcoResProductDimensionAttribute::dimensionTableId2dimensionAttributeRecId(dimensionTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>masterDimensionTableId2DimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sends the ID of the dimension value table that is related to the value table of the product master
    ///    dimension attribute by using the ID from the <paramref name="_masterDimensionTableId" /> parameter.
    /// </summary>
    /// <param name="_masterDimensionTableId">
    ///    The ID of the product model dimension attribute value table.
    /// </param>
    /// <returns>
    ///    The ID of a dimension value table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    This method has been called on an empty buffer.
    /// </exception>
    static public TableId masterDimensionTableId2DimensionTableId(TableId _masterDimensionTableId)
    {
        TableId result = EcoResProductDimensionDataModel::getInstance().masterDimensionTableId2DimensionTableId(_masterDimensionTableId);

        if (!result)
        {
            throw error("@SYS111577");
        }

        return result;      
    }

]]></Source>
			</Method>
			<Method>
				<Name>variantDimensionTableId2DimensionTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a dimension attribute value to the ID of a dimension table.
    /// </summary>
    /// <param name="_variantDimensionTableId">
    /// The ID of the dimension attribute value table.
    /// </param>
    /// <returns>
    /// The ID of a of a dimension table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method has been called on an empty record.
    /// </exception>
    static public TableId variantDimensionTableId2DimensionTableId(TableId _variantDimensionTableId)
    {
        TableId result = EcoResProductDimensionDataModel::getInstance().variantDimensionTableId2DimensionTableId(_variantDimensionTableId);

        if (!result)
        {
            throw error("@SYS111577");
        }

        return result;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS133898</DeveloperDocumentation>
	<FormRef>EcoResProductDetails</FormRef>
	<Label>@SYS133897</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>DimensionTableId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>DimensionTableIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResProductMasterColor</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductMasterColor</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductMasterConfiguration</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductMasterConfiguration</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductMasterSize</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductMasterSize</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResProductVariantDimensionValue</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResProductVariantDimensionValue</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DimensionTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DimensionTableIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>