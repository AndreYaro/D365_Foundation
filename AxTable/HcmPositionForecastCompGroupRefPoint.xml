<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCompGroupRefPoint</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionForecastCompGroupRefPoint extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>HcmPositionForecastCompGroupRefPoint</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_positionForecastCompGroupRefPointRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmPositionForecastCompGroupRefPtRecId _positionForecastCompGroupRefPointRecId)
    {
        boolean isExist = true;

        if (!HcmPositionForecastCompGroupRefPoint::exist(_positionForecastCompGroupRefPointRecId))
        {
            isExist = checkFailed(strFmt(HcmPositionForecastCompGroupRefPoint::txtNotExist(), tableStr(HcmPositionForecastCompGroupRefPoint)));
        }

        return isExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmPositionForecastCompGroupRefPoint</c> table.
    /// </summary>
    /// <param name="_positionForecastCompGroupRefPtRecId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(HcmPositionForecastCompGroupRefPtRecId _positionForecastCompGroupRefPtRecId)
    {
        return _positionForecastCompGroupRefPtRecId && (select firstonly RecId from hcmPositionForecastCompGroupRefPoint
                    where HcmPositionForecastCompGroupRefPoint.RecId == _positionForecastCompGroupRefPtRecId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastCompGroupRefPoint</c> table that is based on a record ID value.
    /// </summary>
    /// <param name="_positionForecastCompGrpRefPointRecId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastCompGroupRefPoint</c> table.
    /// </returns>
    public static HcmPositionForecastCompGroupRefPoint find(
        HcmPositionForecastCompGroupRefPtRecId _positionForecastCompGrpRefPointRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompGroupRefPoint positionForecastCompGroupRefPoint;

        positionForecastCompGroupRefPoint.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            positionForecastCompGroupRefPoint.concurrencyModel(_concurrencyModel);
        }

        select firstonly positionForecastCompGroupRefPoint
             where positionForecastCompGroupRefPoint.RecId == _positionForecastCompGrpRefPointRecId;

        return positionForecastCompGroupRefPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCompensationGroupCompensationGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>HcmPositionForecastCompGroupRefPoint</c> record
    /// </summary>
    /// <param name="_compGroupRecId">
    ///  The record ID of the <c>HcmPositionForecastCompGroupRecId</c> record to delete..
    /// </param>
    public static void removeCompensationGroupCompensationGrid(HcmPositionForecastCompGroupRecId _compGroupRecId)
    {
        HcmPositionForecastCompGroupRefPoint positionForecastCompGroupRefPoint;

        delete_from positionForecastCompGroupRefPoint
            where positionForecastCompGroupRefPoint.CompensationGroup == _compGroupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>HcmPositionForecastCompGroupRefPoint</c> table specified by the <c>HcmPositionForecastCompensationRateRecId</c>.
    /// </summary>
    /// <param name="_compRateRecId">
    ///   The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record from the <c>HcmPositionForecastCompGroupRefPoint</c> table.
    /// </returns>
    public static HcmPositionForecastCompGroupRefPoint findByCompRate(HcmPositionForecastCompensationRateRecId _compRateRecId,
                                                         boolean             _forUpdate = false,
                                                         ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastCompGroupRefPoint    positionForecastCompGroupRefPoint;

        positionForecastCompGroupRefPoint.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            positionForecastCompGroupRefPoint.concurrencyModel(_concurrencyModel);
        }

         select firstonly positionForecastCompGroupRefPoint
            where positionForecastCompGroupRefPoint.CompensationRate == _compRateRecId;

        return positionForecastCompGroupRefPoint;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@SYS4005882</DeveloperDocumentation>
	<Label>@SYS4005903</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>CompensationRate</TitleField1>
	<TitleField2>RefPointSetupId</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CompensationRateRefPointIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<ReplacementKey>CompensationRateRefPointIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefPointSetupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompensationGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompensationRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefPointSetupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS55776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefPointSetupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompensationGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompensationRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompensationGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefPointSetupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HRCCompRefPointSetupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompensationRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionForecastCompensationRateRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CompensationGroupRefPointIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CompensationGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefPointSetupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CompensationRateRefPointIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CompensationRate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefPointSetupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmPositionForecastCompensationGroup</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>HcmPositionForecastCompensationGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompensationGroup</Name>
					<Field>CompensationGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HRCCompRefPointSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HRCCompRefPointSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefPointSetupId</Name>
					<SourceEDT>HRCCompRefPointSetupId</SourceEDT>
					<Field>RefPointSetupId</Field>
					<RelatedField>RefPointSetupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmPositionForecastCompensationRate</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmPositionForecastCompensationRate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompensationRate</Name>
					<Field>CompensationRate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>