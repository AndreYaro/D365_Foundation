<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMVendRebateTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TAMVendRebateTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateRebateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the rebate amounts based on the rebate amount type.
    /// </summary>
    /// <param name="_tamVendRebateAgreement">
    /// The <c>TAMVendRebateAgreement</c> record; optional.
    /// </param>
    public void calculateRebateAmount(
        TAMVendRebateAgreement  _tamVendRebateAgreement = null)
    {
        TAMRebateAmt rebateAmount = this.rebateAmountBasedOnRebateAmtType();
        TAMVendRebateAgreement tamVendRebateAgreement = this.vendRebateAgreement();
        rebateAmount = CurrencyExchangeHelper::amount(rebateAmount, tamVendRebateAgreement.RebateCurrency);

        this.StartingRebateAmt   = CurrencyExchangeHelper::curAmount2CurAmount(rebateAmount, tamVendRebateAgreement.RebateCurrency, this.CurrencyCode);
        this.CorrectedRebateAmt  = this.StartingRebateAmt;
        this.RebateBalance       = this.StartingRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmountBasedOnRebateAmtType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate amount based on the rebate amount type.
    /// </summary>
    /// <returns>The rebate amount.</returns>
    [Replaceable]
    public TAMRebateAmt rebateAmountBasedOnRebateAmtType()
    {
        TAMVendRebateAgreementLine tamVendRebateAgreementLine  = this.vendRebateAgreementLine();

        switch (tamVendRebateAgreementLine.RebateAmtType)
        {
            case TAMRebateAmtType::AmountPerUnit :
                return this.rebateAmountPerUnitUnitOfMeasure();

            case TAMRebateAmtType::FixedAmount:
                return this.convertToNegativeRebate(tamVendRebateAgreementLine.RebateValue);

            case TAMRebateAmtType::Percentage:
                return this.PurchAmount
                                    * tamVendRebateAgreementLine.RebateValue
                                    / 100;
        }

        throw error("@PDS1430");
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConsumedRebateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the consumed rebate amount is correct.
    /// </summary>
    /// <returns>
    /// true if the consumed rebate amount is valid; otherwise, false.
    /// </returns>
    public boolean checkConsumedRebateAmount()
    {
        boolean ret = true;

        if (this.CorrectedRebateAmt > this.StartingRebateAmt)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the passed in dates are valid for this rebate.
    /// </summary>
    /// <param name="_startDate">
    /// The start date to validate against the rebate.
    /// </param>
    /// <param name="_endDate">
    /// The end date to validate against the rebate.
    /// </param>
    /// <returns>
    /// true if the passed in dates are valid; otherwise, false.
    /// </returns>
    public boolean checkValidDate(date _startDate, date _endDate)
    {
        boolean ret = true;

        if ((_startDate && (_startDate  > this.RebateCalcDate))
            ||  (_endDate   && (_endDate    < this.RebateCalcDate)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToNegativeRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a negative rebate amount if rebate quantity is negative or if the related purchase line is a return item.
    /// </summary>
    /// <param name="_rebateAmount">
    /// The rebate amount.
    /// </param>
    /// <returns>
    /// The rebate amount.
    /// </returns>
    public Amount convertToNegativeRebate(Amount _rebateAmount)
    {
        return _rebateAmount *  sign(this.vendInvoiceTrans().Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProcessRebates</Name>
				<Source><![CDATA[
    private void doProcessRebates(VendAccount           _vendAccount,
                                  TAMVendRebateGroupId  _tamVendRebateGroupId,
                                  TAMVendRebateStatus   _rebateStatus,
                                  QueryRun              _queryRun = null)
    {
        TAMVendRebatePaymentPost    tamVendRebatePaymentPost = new TAMVendRebatePaymentPost();

        if (_queryRun != null)
        {
            if (!_vendAccount)
            {
                _vendAccount = _queryRun.query().dataSourceTable(tablenum(TAMVendRebateTable))
                    .rangeField(fieldnum(TAMVendRebateTable,VendAccount)).value();
            }

            if (!_tamVendRebateGroupId)
            {
                _tamVendRebateGroupId = _queryRun.query().dataSourceTable(tablenum(TAMVendRebateTable))
                    .rangeField(fieldnum(TAMVendRebateTable,VendRebateGroupId)).value();
            }
        }

        if (_vendAccount || _tamVendRebateGroupId )
        {
            if (_rebateStatus == TAMVendRebateStatus::Approved)
            {
                this.process(_vendAccount, _tamVendRebateGroupId, _rebateStatus, true, _queryRun);
            }
            else
            {
                this.process(_vendAccount, _tamVendRebateGroupId, _rebateStatus, false, _queryRun);
            }
        }
        else
        {
            throw error("@MCR40198");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endOfCumulationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the end date for the period type selected for the vendor rebate agreement.
    /// </summary>
    /// <returns>
    /// The end date of the period type.
    /// </returns>
    public date endOfCumulationPeriod()
    {
        TAMVendRebateAgreement  tamVendRebateAgreement = this.vendRebateAgreement();
        TAMCumulationPeriod tamCumulationPeriod = tamVendRebateAgreement.CumulatePurchaseBy;
        date                endDate;
        date                creationDate        = this.RebateCalcDate;
        ProjPeriodLine      periodLine;
        WeekDays            startingDayOfWeek;
        #TimeConstants

        switch (tamCumulationPeriod)
        {
            case TAMCumulationPeriod::Week:
                startingDayOfWeek   = TAMVendRebateParameters::find().RebateStartingDayOfWeekPeriod;
                if (dayOfWk(creationDate) >= startingDayOfWeek)
                {
                    endDate = (creationDate + (#daysPerWeek - dayOfWk(creationDate) + startingDayOfWeek) - 1);
                }
                else
                {
                    endDate = (creationDate + (startingDayOfWeek - dayOfWk(creationDate)) - 1);
                }
                break;

            case TAMCumulationPeriod::Month:
                endDate = endmth(creationDate);
                break;
            case TAMCumulationPeriod::Year:
                endDate = mkDate(#daysPerMonth + 1, #monthsPerYear, year(creationDate));
                break;
            case TAMCumulationPeriod::CustomizedPeriod:
                tamVendRebateAgreement = this.vendRebateAgreement();
                periodLine  = ProjPeriodLine::findFromPeriod(tamVendRebateAgreement.RebateCustomizedPeriodType, creationDate);
                endDate = periodLine.PeriodTo;
                break;
            case TAMCumulationPeriod::Lifetime:
                if (tamVendRebateAgreement.ValidTo)
                {
                    endDate = tamVendRebateAgreement.ValidTo;
                }
                else
                {
                    endDate = dateMax();
                }
                break;
            default:
                throw error("@PDS1432");
        }

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default dimensions that should be used on the rebate postings.
    /// </summary>
    /// <returns>
    /// The default dimensions from the purchase order line if one is related; otherwise the vendor default dimensions.
    /// </returns>
    public DimensionDefault getDefaultDimension()
    {
        DimensionDefault    dimensionDefault;
        VendTable           vendTable;
        PurchLine           purchLine;

        if (this.PurchLineRefRecId)
        {
            purchLine = PurchLine::findRecId(this.PurchLineRefRecId);
            dimensionDefault = purchLine.DefaultDimension;
        }
        else
        {
            vendTable = VendTable::find(this.VendAccount);
            dimensionDefault = vendTable.DefaultDimension;
        }

        return dimensionDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TAMVendRebateTable</c> table record with the values from an <c>VendInvoicejour</c>
    /// and <c>VendInvoiceTrans</c> table records.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// The <c>VendInvoicejour</c> table record.
    /// </param>
    /// <param name="_vendInvoiceTrans">
    /// The  <c>VendInvoiceTrans</c> table record.
    /// </param>
    /// <param name="_sumQty">
    /// Total quantity for the rebate.
    /// </param>
    /// <param name="_sumGrossAmt">
    /// Total gross amount for the rebate.
    /// </param>
    /// <param name="_sumNetAmt">
    /// Total net amount for the rebate.
    /// </param>
    /// <param name="_cwSumQty">
    /// Total catch weight quantity for the rebate.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    public void initFromVendInvoiceJour(VendInvoiceJour         _vendInvoiceJour,
                                        VendInvoiceTrans        _vendInvoiceTrans,
                                        PurchQty                _sumQty         = 0,
                                        Amount                  _sumGrossAmt    = 0,
                                        Amount                  _sumNetAmt      = 0,
                                        PdsCWInventQty          _cwSumQty       = 0,
                                        CurrencyCode            _currencyCode   = _vendInvoiceJour.vendTable_InvoiceAccount().Currency)
    {
        date                    calcDate;
        TAMVendRebateAgreement  tamVendRebateAgreement = this.vendRebateAgreement();
        UnitOfMeasureSymbol     purchUnit;
        Qty                     purchQty;
        Qty                     rebateQty;

        if (_vendInvoiceJour
            && _vendInvoiceTrans)
        {
            if (tamVendRebateAgreement.VendRebateCode == TableGroupAll::GroupId)
            {
                this.VendRebateGroupId = tamVendRebateAgreement.VendRebateRelation;
            }

            if (tamVendRebateAgreement.ItemRebateCode == TAMVendRebateItemCode::GroupId)
            {
                this.ItemVendRebateGroupId = tamVendRebateAgreement.ItemRebateRelation;
            }

            this.CurrencyCode               = _currencyCode;
            
            this.setPurchId(_vendInvoiceJour, _vendInvoiceTrans);

            this.VendInvoiceId             = _vendInvoiceJour.InvoiceId;
            calcDate = tamVendRebateAgreement.setCalcDate(_vendInvoiceTrans.purchLine());

            this.RebateCalcDate             = calcDate;
            this.VendAccount                = _vendInvoiceJour.InvoiceAccount;
            this.VendInvoiceJourRefRecId    = _vendInvoiceJour.RecId;

            this.InventTransId              = _vendInvoiceTrans.InventTransId;
            this.ItemId                     = _vendInvoiceTrans.ItemId;
            this.PurchPriceUnit             = _vendInvoiceTrans.PurchPrice;
            this.PurchNetExtdPrice          = _sumNetAmt
                                                ? _sumNetAmt
                                                : _vendInvoiceTrans.LineAmount;

            this.PurchInvoicedQty           = _sumQty
                                                ? _sumQty
                                                : _vendInvoiceTrans.Qty;

            this.cwInventQty                = _cwSumQty
                                                ? _cwSumQty
                                                : _vendInvoiceTrans.PdsCWQty;

            purchUnit = tamVendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit
                                                ? _vendInvoiceTrans.purchUnit
                                                : _vendInvoiceTrans.pdsCWUnitId();
            purchQty = tamVendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit
                                                ? this.PurchInvoicedQty
                                                : this.cwInventQty;

            EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                                                      _vendInvoiceTrans.InventDimId,
                                                                                                                                      purchUnit,
                                                                                                                                      tamVendRebateAgreement.RebateUnit,
                                                                                                                                      NoYes::No,
                                                                                                                                      NoYes::No);
            if (ecoResProductUnitConverter.canValueBeConverted())
            {
                rebateQty = ecoResProductUnitConverter.convertValue(purchQty);
            }
            else
            {
                throw error(strFmt("@PRO1166",
                                this.ItemId,
                                tamVendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit
                                    ? _vendInvoiceTrans.purchUnit
                                    : _vendInvoiceTrans.pdsCWUnitId(),
                                    tamVendRebateAgreement.RebateUnit));
            }

            if (tamVendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit)
            {
                this.PurchInvoicedQty =  rebateQty;
            }
            else
            {
                this.cwInventQty = rebateQty;
            }

            if (tamVendRebateAgreement.RebateTakenFrom == TAMVendRebateTakenFrom::Gross)
            {
                this.PurchAmount            = _sumGrossAmt
                                                ? _sumGrossAmt
                                                : TAMVendRebateHelpers::grossAmountFromVendInvoiceTrans(_vendInvoiceTrans);
            }
            else
            {
                this.PurchAmount            = this.PurchNetExtdPrice;
            }

            if (tamVendRebateAgreement.RebateCurrency != _vendInvoiceTrans.CurrencyCode)
            {
                // we are storing the value without rounding
                this.PurchAmount = CurrencyExchangeHelper::curAmount2CurAmount(this.PurchAmount, _vendInvoiceTrans.CurrencyCode, tamVendRebateAgreement.RebateCurrency);
            }
            this.VendInvoiceTransRefRecId   = _vendInvoiceTrans.RecId;

            if (tamVendRebateAgreement.IsTaxable)
            {
                this.TaxGroup     = _vendInvoiceTrans.TaxGroup;
                this.TaxItemGroup = _vendInvoiceTrans.TaxItemGroup;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchId</Name>
				<Source><![CDATA[
    private void setPurchId(VendInvoiceJour _vendInvoiceJour, VendInvoiceTrans _vendInvoiceTrans)
    {
        if (_vendInvoiceTrans.OrigPurchId)
        {
            this.PurchId = _vendInvoiceTrans.OrigPurchId;
        }
        else
        {
            this.PurchId = _vendInvoiceJour.PurchId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TAMVendRebateTable</c> table record with the values from <c>TAMVendRebateAgreementLine</c> table record.
    /// </summary>
    /// <param name="_tamVendRebateAgreementLine">
    /// The <c>TAMVendRebateAgreementLine</c> record from which to initialize the rebate table record.
    /// </param>
    public void initFromVendRebateAgreement(TAMVendRebateAgreementLine  _tamVendRebateAgreementLine)
    {
        TAMVendRebateAgreement  tamVendRebateAgreement;

        if (_tamVendRebateAgreementLine)
        {
            tamVendRebateAgreement                  = _tamVendRebateAgreementLine.tamVendRebateAgreement();

            this.RebateValue                        = _tamVendRebateAgreementLine.RebateValue;
            this.RebateAmtType                      = _tamVendRebateAgreementLine.RebateAmtType;

            this.RebateProgramId                    = tamVendRebateAgreement.RebateProgramId;
            this.LedgerDimension                    = tamVendRebateAgreement.LedgerDimension;
            this.OffsetLedgerDimension              = tamVendRebateAgreement.OffsetLedgerDimension;

            this.VendRebateAgreementLineRefRecId    = _tamVendRebateAgreementLine.RecId;
            this.VendRebateAgreementRefRecId        = tamVendRebateAgreement.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendRebateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new unique number from the vendor rebate number sequence for the <c>TAMVendRebateId</c> field.
    /// </summary>
    /// <param name="_makeDecisionLater">
    /// true if the number is committed later; optional.
    /// </param>
    /// <returns>
    /// The unique number for the <c>TAMVendRebateId</c> field.
    /// </returns>
    public PdsRebateId initVendRebateId(boolean _makeDecisionLater = true)
    {
        TAMVendRebateId vendRebateId;
        NumberSeq       numberSeq;

        numberSeq = TAMVendRebateTable::numSeqVendRebate(_makeDecisionLater);

        vendRebateId = numberSeq.num();

        return vendRebateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        TAMVendRebateTableStatusType vendRebateTableStatusType = this.status();

        vendRebateTableStatusType.inserting();

        this.VendRebateId = this.initVendRebateId();

        super();

        vendRebateTableStatusType.inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount to post.
    /// </summary>
    /// <returns>
    /// The ledger posting amount.
    /// </returns>
    public Amount ledgerPostingAmount()
    {
        return this.status().ledgerPostingAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmountPerUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the rebate amount when the rebate amount type is calculated per unit.
    /// </summary>
    /// <returns>
    /// The rebate amount.
    /// </returns>
    [SysObsolete('This method is obsolete. Use TAMVendRebateTable.rebateAmountPerUnitUnitOfMeasure() instead.', false, 31\03\2019)]
    public Amount rebateAmountPerUnit()
    {
        return this.calcRebateAmountPerUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmountPerUnitUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the rebate amount when the rebate amount type is calculated per unit with unit of measure if needed.
    /// </summary>
    /// <param name="_purchUnit">
    /// A <c>PurchUnit</c> indicates purchase line unit.
    /// </param>
    /// <returns>
    /// The rebate amount.
    /// </returns>
    [Hookable(false)]
    public Amount rebateAmountPerUnitUnitOfMeasure(PurchUnit _purchUnit = null)
    {
        return this.calcRebateAmountPerUnit(_purchUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRebateAmountPerUnit</Name>
				<Source><![CDATA[
    private Amount calcRebateAmountPerUnit(PurchUnit _purchUnit = null)
    {
        Qty                         rebateQty;

        TAMVendRebateAgreementLine  vendRebateAgreementLine  = this.vendRebateAgreementLine();
        TAMVendRebateAgreement      vendRebateAgreement      = this.vendRebateAgreement();

        rebateQty = vendRebateAgreement.UnitType == TAMRebateUnitType::InventoryUnit
                                                ? this.PurchInvoicedQty
                                                : this.cwInventQty;
        if(_purchUnit && _purchUnit != vendRebateAgreementLine.RebateUnit)
        {
            rebateQty =  EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                               vendRebateAgreement.InventDimId,
                                                                                               rebateQty,
                                                                                               _purchUnit,
                                                                                               vendRebateAgreementLine.RebateUnit);
        }

        return rebateQty * vendRebateAgreementLine.RebateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateTableCorrectedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total corrected rebate amount.
    /// </summary>
    /// <returns>
    /// The corrected rebate amount.
    /// </returns>
    public Amount rebateTableCorrectedAmount()
    {
        TAMVendRebateTable      tamVendRebateTable;

        tamVendRebateTable = this.rebateTableSum(false);

        return tamVendRebateTable.CorrectedRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateTableProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TAMVendRebateTableProcess</c> class instance.
    /// </summary>
    /// <returns>
    /// The <c>TAMVendRebateTableProcess</c> class instance.
    /// </returns>
    public TAMVendRebateTableProcess rebateTableProcess()
    {
        return new TAMVendRebateTableProcess(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateTableProcessedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total processed rebate amount.
    /// </summary>
    /// <returns>
    /// The processed rebate amount.
    /// </returns>
    public Amount rebateTableProcessedAmount()
    {
        TAMVendRebateTable      tamVendRebateTable;
        TAMVendRebateTrans      tamVendRebateTrans;
        date                    startDate;
        date                    endDate;

        startDate = this.startOfCumulationPeriod();
        endDate   = this.endOfCumulationPeriod();

        select sum(RebateAmt) from tamVendRebateTrans
            where tamVendRebateTrans.RebateTransactionType == TAMVendRebateTransactionType::VendorPayment
            exists join tamVendRebateTable
            where tamVendRebateTable.VendRebateId == tamVendRebateTrans.VendRebateId
                && tamVendRebateTable.ItemId                       == this.ItemId
                &&  tamVendRebateTable.VendAccount                  == this.VendAccount
                &&  tamVendRebateTable.VendRebateAgreementRefRecId   == this.VendRebateAgreementRefRecId
                &&  (tamVendRebateTable.RebateCalcDate               >= startDate
                    || !startDate)
                &&  (tamVendRebateTable.RebateCalcDate               <= endDate
                    || !endDate)
                &&  tamVendRebateTable.RebateStatus              == TAMVendRebateStatus::Processed;

        return abs(tamVendRebateTrans.RebateAmt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateTableSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount and total quantities for all rebates related to the selected rebate in order
    /// to apply the correct rebate amount.
    /// </summary>
    /// <param name="_checkProcessed">
    /// A boolean value defining whether to include the processed status in the query; optional.
    /// </param>
    /// <returns>
    /// The sum values of the <c>TAMVendRebateTable</c> table records that fit the criteria.
    /// </returns>
    public TAMVendRebateTable rebateTableSum(boolean _checkProcessed = true)
    {
        TAMVendRebateTable  tamVendRebateTable;
        date                startDate;
        date                endDate;

        startDate = this.startOfCumulationPeriod();

        endDate = this.endOfCumulationPeriod();

        select sum(PurchAmount), sum(PurchInvoicedQty), sum(cwInventQty), sum(CorrectedRebateAmt)
            from tamVendRebateTable
            where tamVendRebateTable.ItemId                         == this.ItemId
                && tamVendRebateTable.VendAccount                   == this.VendAccount
                && tamVendRebateTable.VendRebateAgreementRefRecId   == this.VendRebateAgreementRefRecId
                && (tamVendRebateTable.RebateStatus                 == TAMVendRebateStatus::ToCalculate
                    || tamVendRebateTable.RebateStatus              == TAMVendRebateStatus::Calculated
                    || tamVendRebateTable.RebateStatus              == TAMVendRebateStatus::Approved
                    || (_checkProcessed                             == true
                        && tamVendRebateTable.RebateStatus          == TAMVendRebateStatus::Processed))
                && (tamVendRebateTable.RebateCalcDate               >= startDate
                    && tamVendRebateTable.RebateCalcDate            <= endDate);

        return tamVendRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCorrectedRebateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the corrected rebate amount on the current rebate record.
    /// </summary>
    public void setCorrectedRebateAmount()
    {
        this.CorrectedRebateAmt = this.RebateBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the final status of the rebate based on its current status.
    /// </summary>
    public void setFinalStatus()
    {
        this.status().setFinalStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the next status of the rebate based on it's current status.
    /// </summary>
    public void setNextStatus()
    {
        this.status().setNextStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRebateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rebate balance on the current rebate record.
    /// </summary>
    public void setRebateBalance()
    {
        this.RebateBalance -= this.CorrectedRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOfCumulationPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the start date for the period type selected for the vendor rebate agreement.
    /// </summary>
    /// <returns>
    /// The start date of the period type.
    /// </returns>
    public date startOfCumulationPeriod()
    {
        TAMVendRebateAgreement  tamVendRebateAgreement  = this.vendRebateAgreement();
        TAMCumulationPeriod     tamCumulationPeriod = tamVendRebateAgreement.CumulatePurchaseBy;
        date                startDate;
        date                creationDate        = this.RebateCalcDate;
        ProjPeriodLine      periodLine;
        WeekDays            startingDayOfWeek   = TAMVendRebateParameters::find().RebateStartingDayOfWeekPeriod;
        #TimeConstants

        switch (tamCumulationPeriod)
        {
            case TAMCumulationPeriod::Week:
                if (dayOfWk(creationDate) >= startingDayOfWeek)
                {
                    startDate = (creationDate - (dayOfWk(creationDate) - startingDayOfWeek));
                }
                else
                {
                    startDate = (creationDate - (dayOfWk(creationDate) - startingDayOfWeek + #daysPerWeek));
                }
                break;

            case TAMCumulationPeriod::Month:
                startDate = mkDate(1, mthOfYr(creationDate), year(creationDate));
                break;
            case TAMCumulationPeriod::Year:
                startDate = mkDate(1, 1, year(creationDate));
                break;
            case TAMCumulationPeriod::CustomizedPeriod:
                periodLine = ProjPeriodLine::findFromPeriod(tamVendRebateAgreement.RebateCustomizedPeriodType, creationDate);
                startDate = periodLine.PeriodFrom;
                break;
            case TAMCumulationPeriod::Lifetime:
                startDate = tamVendRebateAgreement.ValidFrom;
                break;
            default:
                throw error("@PDS1432");
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TAMVendRebateTableStatusType</c> class instance based on the rebate status.
    /// </summary>
    /// <returns>
    /// The <c>TAMVendRebateTableStatusType</c> class instance.
    /// </returns>
    public TAMVendRebateTableStatusType status()
    {
        return TAMVendRebateTableStatusType::newBuffer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamRebateUnitType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the unit type of the related rebate agreement record.
    /// </summary>
    /// <returns>
    /// The unit type of the related rebate agreement record.
    /// </returns>
    public display TAMRebateUnitType tamRebateUnitType()
    {
        return this.vendRebateAgreement().UnitType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>VendInvoiceTrans</c> record that relates to the current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>VendInvoiceTrans</c> table record.
    /// </returns>
    public VendInvoiceTrans vendInvoiceTrans(boolean _forUpdate = false)
    {
        return VendInvoiceTrans::findRecId(this.VendInvoiceTransRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendor_CurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the standard currency code for the company that is used on the rebate.
    /// </summary>
    /// <returns>
    /// The standard currency code for the company that is used on the rebate.
    /// </returns>
    public display CurrencyCode vendor_CurrencyCode()
    {
        return CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding <c>TAMVendRebateAgreement</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The corresponding <c>TAMVendRebateAgreement</c> record.
    /// </returns>
    public TAMVendRebateAgreement vendRebateAgreement(boolean _forUpdate = false)
    {
        return TAMVendRebateAgreement::find(
            this.VendRebateAgreementRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendRebateAgreementLine</Name>
				<Source><![CDATA[
    ///<summary>
    /// Returns the corresponding <c>TAMVendRebateAgreementLine</c> record to current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The related <c>TAMVendRebateAgreementLine</c> table record.
    /// </returns>
    public TAMVendRebateAgreementLine vendRebateAgreementLine(boolean _forUpdate = false)
    {
        return TAMVendRebateAgreementLine::find(this.VendRebateAgreementLineRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBatchRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates rebates for the vendor invoice transactions that fall within a particular date range.
    /// </summary>
    /// <param name="_startDate">
    /// The starting date of the date range.
    /// </param>
    /// <param name="_endDate">
    /// The ending date of the date range.
    /// </param>
    public static void applyBatchRebates(date _startDate,
                                                date _endDate)
    {
        VendInvoiceTrans    vendInvoiceTrans;
        VendInvoiceJour     vendInvoiceJour;

        while select vendInvoiceTrans
            where vendInvoiceTrans.InvoiceDate          >= _startDate
                && vendInvoiceTrans.InvoiceDate         <= _endDate
            join vendInvoiceJour
            where vendInvoiceJour.PurchId               == vendInvoiceTrans.PurchID
                && vendInvoiceJour.InvoiceId            == vendInvoiceTrans.InvoiceId
                && vendInvoiceJour.InvoiceDate          == vendInvoiceTrans.InvoiceDate
                && vendInvoiceJour.NumberSequenceGroup  == vendInvoiceTrans.NumberSequenceGroup
        {
            TAMVendRebateFindAndCreate::newFromVendInvoiceTrans(vendInvoiceJour, vendInvoiceTrans).run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfVendRebateExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a vendor rebate table record exists based on the passed in parameters.
    /// </summary>
    /// <param name="_vendRebateAgreementRecId">
    /// The <c>TAMVendRebateAgreementRecId</c> value for which to search the vendor rebate table.
    /// </param>
    /// <param name="_vendInvoiceTransRefRecId">
    /// The <c>VendInvoiceTransRefRecId</c> value for which to search the vendor rebate table.
    /// </param>
    /// <returns>
    /// true if a vendor rebate table record exists based on the passed in parameters; otherwise, false.
    /// </returns>
    public static boolean checkIfVendRebateExists(RecId     _vendRebateAgreementRecId,
                                                  RecId     _vendInvoiceTransRefRecId)
    {
        TAMVendRebateTable tamVendRebateTable;

        if (_vendRebateAgreementRecId && _vendInvoiceTransRefRecId)
        {
            return (select firstonly tamVendRebateTable
                        where tamVendRebateTable.VendInvoiceTransRefRecId
                                == _vendInvoiceTransRefRecId
                            && tamVendRebateTable.VendRebateAgreementRefRecId
                                == _vendRebateAgreementRecId).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cumulateRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cumulative rebate amount for the vendor.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number for whom the cumulate rebate amount is calculating.
    /// </param>
    /// <param name="_startDate">
    /// The starting date of the period for which to cumulate.
    /// </param>
    /// <param name="_endDate">
    /// The ending date of the period for which to cumulate.
    /// </param>
    //AOSRunmode:Server
    public static void cumulateRebates(
        VendAccount _vendAccount,
        date        _startDate,
        date        _endDate)
    {
        TAMVendRebateTable          tamVendRebateTable;
        TAMVendRebateTable          tamVendRebateTableCumulated;
        TAMVendRebateTable          tamVendRebateTableSum;
        TAMVendRebateAgreement      tamVendRebateAgreement;
        TAMVendRebateAgreementLine  tamVendRebateAgreementLine;
        real                        minValueQtyQuery;
        real                        minValueSumQtyQuery;
        real                        minValueSumAmountQuery;
        real                        expectedAmt;
        real                        actualAmt;
        real                        amountDiff;
        UnitOfMeasureSymbol         purchUnit;
        TAMVendRebateTable          previousRebateTable;
        date                        startOfCumulationPeriod;
        date                        endOfCumulationPeriod;
        VendInvoiceTrans            vendInvoiceTrans;
        date                        dateMin = dateNull();
        date                        dateMax = maxDate();

        SysDaSearchObject			    searchObject            = new SysDaSearchObject(TamVendRebateTable::buildCumulateRebatesQuery(
                                                                                                                _vendAccount, 
                                                                                                                _startDate, 
                                                                                                                _endDate, 
                                                                                                                tamVendRebateTable, 
                                                                                                                tamVendRebateAgreement));
        SysDaSearchStatement		    searchStatement         = new SysDaSearchStatement();
        SysDaValidTimeStateDateRange    validTimeStateDateRange = new SysDaValidTimeStateDateRange(dateMin, dateMax);

        searchObject.validTimeState(validTimeStateDateRange);

        while (searchStatement.nextRecord(searchObject))
        {
            startOfCumulationPeriod = tamVendRebateTable.startOfCumulationPeriod();
            endOfCumulationPeriod   = tamVendRebateTable.endOfCumulationPeriod();
            vendInvoiceTrans        = tamVendRebateTable.vendInvoiceTrans();

            if (previousRebateTable.RecId
                && previousRebateTable.VendRebateAgreementRefRecId  == tamVendRebateTable.VendRebateAgreementRefRecId
                && previousRebateTable.ItemId                       == tamVendRebateTable.ItemId
                && previousRebateTable.VendAccount                  == tamVendRebateTable.VendAccount
                && previousRebateTable.startOfCumulationPeriod()    == startOfCumulationPeriod)
            {
                continue;
            }

            previousRebateTable.data(tamVendRebateTable);

            purchUnit = tamVendRebateTable.vendRebateAgreement().UnitType == TAMRebateUnitType::InventoryUnit
                                                                            ? vendInvoiceTrans.PurchUnit
                                                                            : vendInvoiceTrans.pdsCWUnitId();

            tamVendRebateTableSum   = tamVendRebateTable.rebateTableSum();
            tamVendRebateAgreementLine = null;

            if (tamVendRebateAgreement.UnitType == TAMRebateUnitType::CWUnit)
            {
                minValueSumQtyQuery = tamVendRebateTableSum.cwInventQty;
            }
            else
            {
                minValueSumQtyQuery = tamVendRebateTableSum.PurchInvoicedQty;
            }

            minValueSumAmountQuery = tamVendRebateTableSum.PurchAmount;

            if (minValueSumQtyQuery == 0
                && minValueSumAmountQuery == 0
                && tamVendRebateTable.RebateStatus == TAMVendRebateStatus::ToCalculate)
            {
                if (tamVendRebateAgreement.UnitType == TAMRebateUnitType::CWUnit)
                {
                    minValueQtyQuery = abs(tamVendRebateTable.cwInventQty);
                }
                else
                {
                    minValueQtyQuery = abs(tamVendRebateTable.PurchInvoicedQty);
                }

                if (tamVendRebateAgreement.checkRebateAmountRequirements(abs(tamVendRebateTable.PurchAmount), tamVendRebateAgreement.RebateCurrency))
                {
                    tamVendRebateAgreementLine = TAMVendRebateAgreementLine::findRebateAgreementLine(
                                                                    tamVendRebateAgreement,
                                                                    vendInvoiceTrans,
                                                                    minValueQtyQuery,
                                                                    abs(tamVendRebateTable.PurchAmount));
                }
            }
            else
            {
                if (tamVendRebateAgreement.checkRebateAmountRequirements(minValueSumAmountQuery, tamVendRebateAgreement.RebateCurrency))
                {
                    tamVendRebateAgreementLine = TAMVendRebateAgreementLine::findRebateAgreementLine(
                                                                    tamVendRebateAgreement,
                                                                    vendInvoiceTrans,
                                                                    minValueSumQtyQuery,
                                                                    minValueSumAmountQuery);
                }

                // Check whether we have passed the largest line break threshold
                // and therefore the total rebate amount for this agreement should equal the maximum
                if (!tamVendRebateAgreementLine.RecId
                    && tamVendRebateAgreement.checkRebateAmountRequirements(minValueSumAmountQuery,
                                                                        tamVendRebateAgreement.RebateCurrency)
                    && tamVendRebateAgreement.checkRebateRequirements(minValueSumAmountQuery,
                                                                    minValueSumQtyQuery,
                                                                    purchUnit,
                                                                    tamVendRebateAgreement.RebateCurrency))
                {
                    tamVendRebateAgreementLine = TAMVendRebateAgreementLine::selectRebateAgreementLineMax(
                                                                    tamVendRebateAgreement,
                                                                    vendInvoiceTrans,
                                                                    minValueSumQtyQuery,
                                                                    purchUnit,
                                                                    tamVendRebateAgreement.RebateCurrency,
                                                                    minValueSumAmountQuery);
                    if (tamVendRebateAgreementLine)
                    {
                        if (tamVendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount)
                        {
                            if (minValueSumAmountQuery < 0)
                            {
                                minValueSumAmountQuery = tamVendRebateAgreementLine.ToValue * -1;
                            }
                            else
                            {
                                minValueSumAmountQuery = tamVendRebateAgreementLine.ToValue;
                            }
                        }
                        else
                        {
                            if (minValueSumQtyQuery < 0)
                            {
                                minValueSumQtyQuery = tamVendRebateAgreementLine.ToValue * -1;
                            }
                            else
                            {
                                minValueSumQtyQuery = tamVendRebateAgreementLine.ToValue;
                            }
                        }
                    }
                }
            }

            if (!tamVendRebateAgreementLine.RecId
                && !tamVendRebateAgreement.checkRebateRequirements(minValueSumAmountQuery, minValueSumQtyQuery, purchUnit,
                tamVendRebateAgreement.RebateCurrency))
            {
                previousRebateTable = null;
                continue;
            }

            update_recordset tamVendRebateTableCumulated
                setting RebateStatus = TAMVendRebateStatus::Calculated
                where tamVendRebateTableCumulated.VendAccount                   == tamVendRebateTable.VendAccount
                    && tamVendRebateTableCumulated.ItemId                       == tamVendRebateTable.ItemId
                    && tamVendRebateTableCumulated.VendRebateAgreementRefRecId  == tamVendRebateTable.VendRebateAgreementRefRecId
                    && tamVendRebateTableCumulated.RebateStatus            == TAMVendRebateStatus::ToCalculate
                    && tamVendRebateTableCumulated.RebateCalcDate               >= startOfCumulationPeriod
                    && tamVendRebateTableCumulated.RebateCalcDate               <= endOfCumulationPeriod
                    && (tamVendRebateTableCumulated.PurchInvoicedQty || tamVendRebateTableCumulated.cwInventQty);


            actualAmt	= tamVendRebateTable.calculateActualAmt();
            expectedAmt = tamVendRebateTable.calculateExpectedAmt(
                                tamVendRebateAgreementLine, 
                                tamVendRebateAgreement, 
                                minValueSumQtyQuery, 
                                minValueSumAmountQuery, 
                                actualAmt);

            amountDiff = expectedAmt - actualAmt;

            if (expectedAmt != actualAmt)
            {
                TAMVendRebateCorrectClaims::constructFromCumulate(
                                tamVendRebateTable,
                                tamVendRebateAgreement,
                                tamVendRebateAgreementLine,
                                startOfCumulationPeriod,
                                endOfCumulationPeriod,
                                amountDiff,
                                tamVendRebateTableSum).correctClaims();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateActualAmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual rebate amount.
    /// </summary>
    /// <returns>
    ///     Returns the actual rebate amount.
    /// </returns>
    protected real calculateActualAmt()
    {
        real actualAmt = this.rebateTableCorrectedAmount() + this.rebateTableProcessedAmount();
        actualAmt = CurrencyExchange::roundWithRuleType(actualAmt,
                                                                  this.CurrencyCode,
                                                                  CurrencyRoundingRuleType::Price);
        return actualAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExpectedAmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the expected rebate amount.
    /// </summary>
    /// <param name = "_tamVendRebateAgreementLine">
    ///     The rebate agreement line record.
    /// </param>
    /// <param name = "_tamVendRebateAgreement">
    ///     The rebate agreement record.
    /// </param>
    /// <param name = "_minValueSumQtyQuery">
    ///     The total quantity for all rebates related to the selected rebate in order
    ///     to apply the correct rebate amount.
    /// </param>
    /// <param name = "_minValueSumAmountQuery">
    ///     The total amount for all rebates related to the selected rebate in order
    ///     to apply the correct rebate amount.
    /// </param>
    /// <param name = "_actualAmt">
    ///     The actual rebate amount.
    /// </param>
    /// <returns>
    ///     Returns the expected rebate amount.
    /// </returns>
    protected real calculateExpectedAmt(
		TamVendRebateAgreementLine	_tamVendRebateAgreementLine, 
		TamVendRebateAgreement		_tamVendRebateAgreement, 
		real						_minValueSumQtyQuery, 
		real						_minValueSumAmountQuery,
        real                        _actualAmt)
    {
        real expectedAmt;

        switch (_tamVendRebateAgreementLine.RebateAmtType)
        {
            case TAMRebateAmtType::AmountPerUnit :
                expectedAmt = _minValueSumQtyQuery * _tamVendRebateAgreementLine.RebateValue;
                break;
            case TAMRebateAmtType::FixedAmount :
            if (_tamVendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount)
                {
                    if (_minValueSumAmountQuery	< 0)
                    {
                        expectedAmt = -_tamVendRebateAgreementLine.RebateValue;
                    }
                    else if (_minValueSumAmountQuery == 0)
                    {
                        expectedAmt = 0;
                    }
                    else
                    {
                        expectedAmt = _tamVendRebateAgreementLine.RebateValue;
                    }
                }
                else if (_tamVendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity)
                {
                    if (_minValueSumQtyQuery < 0)
                    {
                        expectedAmt = -_tamVendRebateAgreementLine.RebateValue;
                    }
                    else if (_minValueSumQtyQuery == 0)
                    {
                        expectedAmt = 0;
                    }
                    else
                    {
                        expectedAmt = _tamVendRebateAgreementLine.RebateValue;
                    }
                }
                break;

            case TAMRebateAmtType::Percentage :
                expectedAmt = _minValueSumAmountQuery * _tamVendRebateAgreementLine.RebateValue / 100;
                break;
        }

        if (_tamVendRebateAgreementLine.Currency != this.CurrencyCode)
        {
            expectedAmt = CurrencyExchangeHelper::curAmount2CurAmount(expectedAmt, _tamVendRebateAgreementLine.Currency, this.CurrencyCode);
        }
        
        expectedAmt = CurrencyExchange::roundWithRuleType(expectedAmt,
                                                                    this.CurrencyCode,
                                                                    CurrencyRoundingRuleType::Price);
        return expectedAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesQuery</Name>
				<Source><![CDATA[
	/// <summary>
    ///     Builds the query for cumulate rebates.
    /// </summary>
    /// <param name = "_vendAccount">
    ///     The vendor account number for whom the cumulate rebate amount is calculating.
    /// </param>
    /// <param name = "_startDate">
    ///     The starting date of the period for which to cumulate.
    /// </param>
    /// <param name = "_endDate">
    ///     The ending date of the period for which to cumulate.
    /// </param>
    /// <param name = "_tamVendRebateTable">
    ///     The vendor rebate record.
    /// </param>
    /// <param name = "_tamVendRebateAgreement">
    ///     The vendor rebate agreement record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryObject</c> instance.
    /// </returns>
    private static SysDaQueryObject buildCumulateRebatesQuery(
        VendAccount				_vendAccount,
        date					_startDate,
        date					_endDate,
        TamVendRebateTable		_tamVendRebateTable,
        TAMVendRebateAgreement  _tamVendRebateAgreement)
    {
        SysDaQueryObject	queryObject = new SysDaQueryObject(_tamVendRebateTable);
        
        TamVendRebateTable::buildCumulateRebatesOrderByClause(queryObject);

        queryObject.whereClause(TamVendRebateTable::buildCumulateRebatesWhereClause(_vendAccount, _startDate, _endDate, _tamVendRebateTable));
        queryObject.joinClause(SysDaJoinKind::InnerJoin, TamVendRebateTable::buildCumulateRebatesJoinQuery(_tamVendRebateTable, _tamVendRebateAgreement));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesOrderbyClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the order by clause to the cumulate rebates query.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    private static void buildCumulateRebatesOrderbyClause(SysDaQueryObject _queryObject)
    {
        _queryObject.orderByClause().add(fieldStr(TamVendRebateTable, VendAccount));
        _queryObject.orderByClause().add(fieldStr(TamVendRebateTable, ItemId));
        _queryObject.orderByClause().add(fieldStr(TamVendRebateTable, VendRebateAgreementRefRecId));
        _queryObject.orderByClause().add(fieldStr(TamVendRebateTable, RebateCalcDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause to be added to the cumulate rebates query.
    /// </summary>
    /// <param name = "_vendAccount">
    ///     The vendor account number for whom the cumulate rebate amount is calculating.
    /// </param>
    /// <param name = "_startDate">
    ///     The starting date of the period for which to cumulate.
    /// </param>
    /// <param name = "_endDate">
    ///     The ending date of the period for which to cumulate.
    /// </param>
    /// <param name = "_tamVendRebateTable">
    ///     The vendor rebate record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private static SysDaQueryExpression buildCumulateRebatesWhereClause(
        VendAccount			_vendAccount,
        date				_startDate,
        date				_endDate,
        TamVendRebateTable	_tamVendRebateTable)
    {
        SysDaQueryExpression whereClause = 
			new SysDaEqualsExpression(
                new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, VendAccount)), 
                new SysDaValueExpression(_vendAccount))
            .and(new SysDaOrExpression(
				new SysDaEqualsExpression(
				    new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateStatus)), 
                    new SysDaValueExpression(TAMVendRebateStatus::ToCalculate)),
				new SysDaEqualsExpression(
                    new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateStatus)), 
                    new SysDaValueExpression(TAMVendRebateStatus::Calculated))));

        if (_startDate)
        {
            whereClause = whereClause.and(new SysDaGreaterThanOrEqualsExpression(
                            new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateCalcDate)), 
                            new SysDaValueExpression(_startDate)));
        }

        if (_endDate)
        {
            whereClause = whereClause.and(new SysDaLessThanOrEqualsExpression(
                            new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TAMVendRebateTable, RebateCalcDate)), 
                            new SysDaValueExpression(_endDate)));
        }

        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesJoinQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the rebate agreements query to be joined with the cumulate rebates query.
    /// </summary>
    /// <param name = "_tamVendRebateTable">
    ///     The vendor rebate record.
    /// </param>
    /// <param name = "_tamVendRebateAgreement">
    ///     The vendor rebate agreement record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryObject</c> instance.
    /// </returns>
    private static SysDaQueryObject buildCumulateRebatesJoinQuery(
        TamVendRebateTable		_tamVendRebateTable,
        TamVendRebateAgreement	_tamVendRebateAgreement)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_tamVendRebateAgreement);

        queryObject.whereClause(TamVendRebateTable::buildCumulateRebatesJoinClause(_tamVendRebateTable, _tamVendRebateAgreement));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCumulateRebatesJoinClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause to be added to the cumulate rebates join query.
    /// </summary>
    /// <param name = "_tamVendRebateTable">
    ///     The vendor rebate record.
    /// </param>
    /// <param name = "_tamVendRebateAgreement">
    ///     The vendor rebate agreement record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    protected static SysDaQueryExpression buildCumulateRebatesJoinClause(
        TamVendRebateTable		_tamVendRebateTable,
        TamVendRebateAgreement	_tamVendRebateAgreement)
    {
        SysDaQueryExpression whereClause =
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_tamVendRebateAgreement, fieldStr(TamVendRebateAgreement, RecId)),
                new SysDaFieldExpression(_tamVendRebateTable, fieldStr(TamVendRebateTable, VendRebateAgreementRefRecId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_tamVendRebateAgreement, fieldStr(TamVendRebateAgreement, Validated)),
                new SysDaValueExpression(NoYes::Yes)));

        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a vendor rebate table record exists with the passed in <c>TAMVendRebateId</c>.
    /// </summary>
    /// <param name="_vendRebateId">
    /// The <c>TAMVendRebateId</c> value for which to search the vendor rebate table record.
    /// </param>
    /// <returns>
    /// true if a vendor rebate table record exists with the passed in <c>TAMVendRebateId</c>; otherwise, false.
    /// </returns>
    public static boolean exist(TAMVendRebateId _vendRebateId)
    {
        return _vendRebateId
            && (select firstonly tamVendRebateTable
                    where tamVendRebateTable.VendRebateId == _vendRebateId
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a vendor rebate record based on the passed in <c>TAMVendRebateId</c>.
    /// </summary>
    /// <param name="_vendRebateId">
    /// The <c>TAMVendRebateId</c> value for which to search the vendor rebate table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not.
    /// </param>
    /// <returns>
    /// The vendor rebate record that was found based on the passed in parameters.
    /// </returns>
    public static TAMVendRebateTable find(TAMVendRebateId _vendRebateId,
                                          boolean         _forUpdate = false)
    {
        TAMVendRebateTable   vendRebateTable;

        if (_vendRebateId)
        {
            vendRebateTable.selectForUpdate(_forUpdate);

            select firstonly vendRebateTable
                where vendRebateTable.VendRebateId == _vendRebateId;
        }

        return vendRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a vendor rebate record based on the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value for which to search the vendor rebate table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not.
    /// </param>
    /// <returns>
    /// The vendor rebate record that was found based on the passed in parameters.
    /// </returns>
    public static TAMVendRebateTable findByRecId(RecId   _recId,
                                                 boolean _forUpdate = false)
    {
        TAMVendRebateTable   vendRebateTable;

        if (_recId)
        {
            vendRebateTable.selectForUpdate(_forUpdate);

            select firstonly vendRebateTable
                where vendRebateTable.RecId == _recId;
        }

        return vendRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numSeqVendRebate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new <c>TAMVendRebateId</c>.
    /// </summary>
    /// <param name="_makeDecisionLater">
    /// A <c>Boolean</c> value that defines whether to make a decision on the number sequence now or later.
    /// </param>
    /// <returns>
    /// A new <c>TAMVendRebateId</c>.
    /// </returns>
    public static NumberSeq numSeqVendRebate(boolean _makeDecisionLater = true)
    {
        return NumberSeq::newGetNum(TAMVendRebateParameters::numRefTAMVendRebateId(),
                _makeDecisionLater);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRebatePayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate payment processing.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number.
    /// </param>
    /// <param name="_tamVendRebateGroupId">
    /// The vendor rebate group Id.
    /// </param>
    /// <param name="_queryRun">
    /// The QueryRun instance.
    /// </param>
    public static void processRebatePayments(VendAccount          _vendAccount,
                                                    TAMVendRebateGroupId _tamVendRebateGroupId,
                                                    QueryRun             _queryRun = null)
    {
        TAMVendRebateTable  tamVendRebateTable;

        tamVendRebateTable.doProcessRebates(_vendAccount,
                                            _tamVendRebateGroupId,
                                            TAMVendRebateStatus::Approved,
                                            _queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate processing.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number.
    /// </param>
    /// <param name="_tamVendRebateGroupId">
    /// The vendor rebate group Id.
    /// </param>
    public static void processRebates(VendAccount          _vendAccount,
                                             TAMVendRebateGroupId _tamVendRebateGroupId)
    {
        TAMVendRebateTable  tamVendRebateTable;

        tamVendRebateTable.doProcessRebates(_vendAccount,
                                            _tamVendRebateGroupId,
                                            TAMVendRebateStatus::Calculated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purgeRebates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all rebates with a status of 'Processed'.
    /// </summary>
    /// <param name="_upToDate">
    /// The date upto which the rebates are deleted.
    /// </param>
    public static void purgeRebates(date _upToDate)
    {
        TAMVendRebateTable  tamVendRebateTable;

        if (_upToDate)
        {
            while select tamVendRebateTable
                where tamVendRebateTable.ProcessDate         <= _upToDate
                    && (tamVendRebateTable.RebateStatus      == TAMVendRebateStatus::Processed
                    || tamVendRebateTable.RebateStatus       == TAMVendRebateStatus::Approved)
            {
                tamVendRebateTable.status().runDeleted();
            }

            info("@PRO1903");
        }
        else
        {
            throw error("@PDS1512");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the claim is linked to an agreement the currency of the agreement is returned.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display CurrencyCode agreementCurrency()
    {
        TAMVendRebateAgreement tamVendRebateAgreement;
        CurrencyCode           rebateCurrency;

        if (this.VendRebateAgreementRefRecId)
        {
            tamVendRebateAgreement = TAMVendRebateAgreement::find(this.VendRebateAgreementRefRecId);

            rebateCurrency = tamVendRebateAgreement.RebateCurrency;
        }

        return rebateCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the claim is linked to an agreement the unit of measure on the agreement is returned.
    /// </summary>
    /// <returns>
    /// The unit of measure symbol.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    display UnitOfMeasureSymbol agreementUOM()
    {
        TAMVendRebateAgreement    tamVendRebateAgreement;
        UnitOfMeasureSymbol       rebateUOM;

        if (this.VendRebateAgreementRefRecId)
        {
            tamVendRebateAgreement = TAMVendRebateAgreement::find(this.VendRebateAgreementRefRecId);

            rebateUOM = tamVendRebateAgreement.RebateUnit;
        }

        return rebateUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTAMVendRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>TAMVendRebateTable</c> table buffer based on another <c>TAMVendRebateTable</c> table buffer.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    ///    The <c>TAMVendRebateTable</c> table buffer that is to be copied.
    /// </param>
    /// <remarks>
    ///    Used for generating adjustments for claims when accumulating claims.
    /// </remarks>
    public void initFromTAMVendRebateTable(TAMVendRebateTable _tamVendRebateTable)
    {
        this.VendRebateId                 = _tamVendRebateTable.initVendRebateId();
        this.VendAccount                  = _tamVendRebateTable.VendAccount;
        this.RebateProgramId              = _tamVendRebateTable.RebateProgramId;
        this.ItemId                       = _tamVendRebateTable.ItemId;
        this.VendRebateAgreementRefRecId  = _tamVendRebateTable.VendRebateAgreementRefRecId;
        this.CurrencyCode                 = _tamVendRebateTable.CurrencyCode;
        this.VendInvoiceJourRefRecId      = _tamVendRebateTable.VendInvoiceJourRefRecId;
        this.LedgerDimension              = _tamVendRebateTable.LedgerDimension;
        this.DefaultDimension             = _tamVendRebateTable.DefaultDimension;
        this.OffsetLedgerDimension        = _tamVendRebateTable.OffsetLedgerDimension;
        this.OffsetDefaultDimension       = _tamVendRebateTable.OffsetDefaultDimension;
        this.VendInvoiceTransRefRecId     = _tamVendRebateTable.VendInvoiceTransRefRecId;
        this.VendInvoiceId                = _tamVendRebateTable.VendInvoiceId;
        this.PurchId                      = _tamVendRebateTable.PurchId;
        this.TaxGroup                     = _tamVendRebateTable.TaxGroup;
        this.TaxItemGroup                 = _tamVendRebateTable.TaxItemGroup;
        this.ItemVendRebateGroupId        = _tamVendRebateTable.ItemVendRebateGroupId;
        this.VendRebateGroupId            = _tamVendRebateTable.VendRebateGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private void process(VendAccount           _vendAccount,
                         TAMVendRebateGroupId  _tamVendRebateGroupId,
                         TAMVendRebateStatus   _rebateStatus,
                         boolean               _postRebateInvoice = false,
                         QueryRun              _queryRun = null)
    {
        TAMVendRebateTable           tamVendRebateTable;
        TAMVendRebateTable           tamVendRebateTableTemp;
        TAMVendRebateTableStatusType tamVendRebateTableStatusType;
        QueryBuildDataSource         dataSource;
        VendAccount                  vendAccount;
        boolean                      vendChanged = false;

        tamVendRebateTableTemp.RebateStatus = _rebateStatus;
        tamVendRebateTableStatusType = tamVendRebateTableTemp.status();

        ttsBegin;

        if (_queryRun == null)
        {
            _queryRun = new QueryRun(querystr(TAMVendRebateTableListPage));
        }

        dataSource = _queryRun.query().dataSourceTable(tablenum(TAMVendRebateTable));
        dataSource.addOrderByField(fieldnum(TAMVendRebateTable, VendAccount));

        if (_vendAccount != '')
        {
            SysQuery::findOrCreateRange(dataSource, fieldnum(TAMVendRebateTable, VendAccount)).value(_vendAccount);
        }

        if (_tamVendRebateGroupId != '')
        {
            SysQuery::findOrCreateRange(dataSource, fieldnum(TAMVendRebateTable, VendRebateGroupId)).value(_tamVendRebateGroupId);
        }

        SysQuery::findOrCreateRange(dataSource, fieldnum(TAMVendRebateTable, RebateStatus)).value(queryValue(_rebateStatus));
        
        _queryRun.reset();
        while (_queryRun.next())
        {
            tamVendRebateTable = _queryRun.get(tablenum(TAMVendRebateTable));
            // Only post once for same vender.
            if (vendAccount && vendAccount != tamVendRebateTable.VendAccount && _postRebateInvoice)
            {
                tamVendRebateTableStatusType.parmVendRebateTable(tamVendRebateTableTemp);
                tamVendRebateTableStatusType.finalizeProcessed();
            }

            // Set the current record
            tamVendRebateTableStatusType.parmVendRebateTable(tamVendRebateTable);
            tamVendRebateTableStatusType.runProcessed();

            // Assign current vendAccount.
            vendAccount = tamVendRebateTable.VendAccount;          
        }

        // Post for the last vender.
        if (_postRebateInvoice)
        {
            tamVendRebateTableStatusType.parmVendRebateTable(tamVendRebateTableTemp);
            tamVendRebateTableStatusType.finalizeProcessed();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClaimDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ledger and the offset dimensions with appropriate financial dimensions.
    /// </summary>
    public void updateClaimDimensions()
    {
        List             dimensionSources = new List(Types::Class);
        VendTable        vendTable;
        VendInvoiceTrans vendInvoiceTrans = this.vendInvoiceTrans();

        if (! this.DefaultDimension && ! this.OffsetDefaultDimension)
        {
            if (vendInvoiceTrans)
            {
                this.DefaultDimension       = vendInvoiceTrans.DefaultDimension;
                this.OffsetDefaultDimension = vendInvoiceTrans.DefaultDimension;
            }
            else
            {
                vendTable = VendTable::find(this.VendAccount);

                this.DefaultDimension       = vendTable.DefaultDimension;
                this.OffsetDefaultDimension = vendTable.DefaultDimension;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMVendorRebate</ConfigurationKey>
	<DeveloperDocumentation>@MCR40073</DeveloperDocumentation>
	<FormRef>TAMVendRebateTableEdit</FormRef>
	<Label>@PRO39</Label>
	<SingularLabel>@PRO39</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>VendRebateId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TAMVendRebateIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>TAMVendRebateIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRebateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRebateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Accounts</Name>
			<Label>@SYS11800</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRebateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateAdjustmentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventTable</Name>
			<Label>@SYS15649</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemVendRebateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRebateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRebateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemVendRebateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchTable</Name>
			<Label>@SYS53872</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateCalcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>tamRebateUnitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchNetExtdPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchInvoicedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CWInventQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RebateProgram</Name>
			<Label>@PRO1304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateProgramId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalRefNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceTransRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TAMVendRebate</Name>
			<Label>@PDS300</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateAmtType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedRebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendTable</Name>
			<Label>@SYS334087</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRebateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OffsetDimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetDefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CorrectedRebateAmt</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMCorrectedRebateAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CWInventQty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemVendRebateGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMItemVendRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalRefNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMJournalRefNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@PDS1900</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@PDS1902</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProcessDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMProcessDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@MCR40119</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchInvoicedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchInvoicedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchLineRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchLineRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchNetExtdPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMPurchNetExtdPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPriceUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchTableRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RebateAdjustmentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateAdjustmentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateAmt</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RebateAmtType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMRebateAmtType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateBalance</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateBalance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RebateCalcDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateCalcDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RebateProgramId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateProgramId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RebateStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMVendRebateStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateValue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StartingRebateAmt</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMStartingRebateAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceJourRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceJourRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTransRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendInvoiceTransRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorRef</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendorRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendRebateAgreementLineRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TAMVendRebateAgreementLineRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendRebateAgreementRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TAMVendRebateAgreementRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendRebateGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendRebateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetDefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects70</ConfigurationKey>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TAMVendRebateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendRebateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TAMVendRebateAgreementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendRebateAgreementRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RebateCalcDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TAMVendRefRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceTransRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendRebateAgreementRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProcessDateStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcessDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RebateStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RebateGroupStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendRebateGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RebateStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombinationDefault</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_VendRebateInstanceDefault</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombinationOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_VendRebateInstanceOffset</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchLineRef</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchLineRefRecId</Name>
					<SourceEDT>PurchLineRefRecId</SourceEDT>
					<Field>PurchLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TAMVendRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TAMVendRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchTableRefRecId</Name>
					<SourceEDT>PurchTableRefRecId</SourceEDT>
					<Field>PurchTableRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMItemVendRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TAMItemVendRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemVendRebateGroupId</Name>
					<Field>ItemVendRebateGroupId</Field>
					<RelatedField>ItemVendRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TAMItemVendRebateGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMVendRebate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TAMVendRebate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateProgramId</Name>
					<Field>RebateProgramId</Field>
					<RelatedField>RebateProgramId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProgramIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMVendRebateAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMVendRebateAgreement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendRebateAgreementRefRecId</Name>
					<Field>VendRebateAgreementRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMVendRebateAgreementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMVendRebateAgreementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendRebateAgreementLineRefRecId</Name>
					<Field>VendRebateAgreementLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMVendRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TAMVendRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendRebateGroupId</Name>
					<Field>VendRebateGroupId</Field>
					<RelatedField>VendRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TAMVendRebateGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceJourRefRecId</Name>
					<SourceEDT>VendInvoiceJourRefRecId</SourceEDT>
					<Field>VendInvoiceJourRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceTransRefRecId</Name>
					<SourceEDT>VendInvoiceTransRefRecId</SourceEDT>
					<Field>VendInvoiceTransRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TAMVendRebateTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_TAMVendRebateTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetDefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OffsetDefaultDimension_TAMVendRebateTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetDefaultDimension</Name>
					<Field>OffsetDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>